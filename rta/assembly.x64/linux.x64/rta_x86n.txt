     1                                  
     2                                  	%include	"rta_x86n.def"
     3                              <1> 
     4                              <1> __SMP		equ	8
     5                              <1> 
     6                              <1> TIME_UPDATE	equ     1
     7                              <1> LOCKSTEP	equ	2
     8                              <1> BREAKPOINT	equ	4
     9                              <1> CHILLDOWN	equ	8
    10                              <1> TOUCHPOINT	equ	16
    11                              <1> 
    12                              <1> EXTERNAL_INTERRUPT 	equ	00FF00h
    13                              <1> ATTENTION		equ	128
    14                              <1> INCREMENTER_CARRY	equ	64
    15                              <1> 
    16                              <1> 		%if	DRANG & 2
    17                              <1> INDICATIONS	equ	CHILLDOWN|TIME_UPDATE|LOCKSTEP
    18                              <1> 		%else
    19                              <1> INDICATIONS	equ	CHILLDOWN|TIME_UPDATE|LOCKSTEP|BREAKPOINT
    20                              <1> 		%endif
    21                              <1> 
    22                              <1> EXTERNAL_INDICATIONS equ EXTERNAL_INTERRUPT|ATTENTION|INCREMENTER_CARRY
    23                              <1> 
    24                              <1> IO_PORTS	equ	192
    25                              <1> 
    26                              <1> 	%if	RTA_MBANKS
    27                              <1> global	_metric
    28                              <1> global	_indication
    29                              <1> global	_iselect
    30                              <1> global	_iselectu
    31                              <1> global	_readout
    32                              <1> global	_readoutx
    33                              <1> global	_readoutp
    34                              <1> global	_psr
    35                              <1> global	_apc
    36                              <1> global	_apcz
    37                              <1> global	_breakpoint
    38                              <1> global	_b0_name
    39                              <1> global	_b0p
    40                              <1> global	_devices
    41                              <1> global	_base
    42                              <1> global	_register_set
    43                              <1> global	__register
    44                              <1> global	_memory
    45                              <1> 
    46                              <1> 	%if	RTA_MBANKS<1
    47                              <1> RTA_MPAGES	equ	32
    48                              <1> 	%else
    49                              <1> RTA_MPAGES	equ	RTA_MBANKS*64
    50                              <1> 	%endif
    51                              <1> 
    52                              <1> 	%else
    53                              <1> ;	extern	_metric
    54                              <1> extern	_general_indication
    55                              <1> ;	extern	_iselect
    56                              <1> ;	extern	_iselectu
    57                              <1> ;	extern	_psr
    58                              <1> ;	extern	_apc
    59                              <1> ;	extern	_apcu
    60                              <1> ;	extern	_apcz
    61                              <1> 
    62                              <1> extern	_breakpoint
    63                              <1> extern	_touchpoint
    64                              <1> extern	_touchpoint2
    65                              <1> 
    66                              <1> ;	extern	_b0_name
    67                              <1> ;	extern	_b0p
    68                              <1> extern	_devices
    69                              <1> ;	extern	_base
    70                              <1> ;	extern	_register_set
    71                              <1> ;	extern	__register
    72                              <1> extern	_memory
    73                              <1> 
    74                              <1> _output equ     272
    75                              <1> _inputr equ     264
    76                              <1> _input2 equ     256
    77                              <1> 
    78                              <1> _OUTPUT	equ	_output*4
    79                              <1> _INPUTR	equ	_inputr*4
    80                              <1> _INPUT2 equ	_input2*4
    81                              <1> _BIAS	equ	_OUTPUT
    82                              <1> 
    83                              <1> 	%endif
    84                              <1> 
    85                              <1> 	extern	_flag
    86                              <1> 	extern	_uflag
    87                              <1> 
    88                              <1> HALF_W	equ	128
    89                              <1> FP_R	equ	8
    90                              <1> B_STREAMZR  equ 64
    91                              <1> B_STREAM16R equ 32
    92                              <1> B_STREAM16W equ 16
    93                              <1> 
    94                              <1> r	equ	0
    95                              <1> k	equ	1
    96                              <1> x	equ	2
    97                              <1> y	equ	3
    98                              <1> a	equ	4
    99                              <1> b	equ	5
   100                              <1> mantissa2 equ	6
   101                              <1> mantissa3 equ	7
   102                              <1> residue	equ	8
   103                              <1> p	equ	12
   104                              <1> q	equ	13
   105                              <1> fp	equ	14
   106                              <1> s_p	equ	15
   107                              <1> 
   108                              <1> rdatac	equ	20
   109                              <1> rdata	equ	21
   110                              <1> wdatac	equ	22
   111                              <1> wdata	equ	23
   112                              <1> 
   113                              <1> 
   114                              <1> fp_guard equ	128+19
   115                              <1> 
   116                              <1> rt_clock equ	128+20
   117                              <1> priority equ	128+21
   118                              <1> dayclock_u equ	128+22
   119                              <1> dayclock equ	128+23
   120                              <1> 
   121                              <1> R	equ	r*4
   122                              <1> K	equ	k*4
   123                              <1> X	equ	x*4
   124                              <1> Y	equ	y*4
   125                              <1> A	equ	a*4
   126                              <1> B	equ	b*4
   127                              <1> MANTISSA2 equ	mantissa2*4
   128                              <1> MANTISSA3 equ	mantissa3*4
   129                              <1> RESIDUE	equ	residue*4
   130                              <1> 
   131                              <1> P	equ	p*4
   132                              <1> Q	equ	q*4
   133                              <1> FP	equ	fp*4
   134                              <1> S_P	equ	s_p*4
   135                              <1> 
   136                              <1> RDATAC	equ	rdatac*4
   137                              <1> RDATA	equ	rdata*4
   138                              <1> WDATAC	equ	wdatac*4
   139                              <1> WDATA	equ	wdata*4
   140                              <1> 
   141                              <1> FP_GUARD equ	fp_guard*4
   142                              <1> 
   143                              <1> RT_CLOCK equ	rt_clock*4
   144                              <1> PRIORITY equ	priority*4
   145                              <1> DAYCLOCK_U equ	dayclock_u*4
   146                              <1> DAYCLOCK equ	dayclock*4
   147                              <1> 
   148                              <1> I	equ	4
   149                              <1> XI	equ	5
   150                              <1> 
   151                              <1> DEVICE  equ	32768
   152                              <1> SYSMEM  equ	16384
   153                              <1> DATA16  equ	1
   154                              <1> FSYS24  equ	2
   155                              <1> 
   156                              <1> II_GUARD equ	64+31
   157                              <1> II_EXIT	equ	64+6
   158                              <1> II_YIELD equ	64+1
   159                              <1> II_SPAWN equ	64+2
   160                              <1> II_BANK equ	64+3
   161                              <1> II_ARRAY equ	64+4
   162                              <1> II_BANK_FREE equ 64+5
   163                              <1> II_TWAIT equ	64+27
   164                              <1> II_EVENT_WAIT equ 64+28
   165                              <1> II_FPXPO equ	0+3
   166                              <1> 
   167                              <1> II_XINT		equ	0+2
   168                              <1> II_MSECOND	equ	0+4
   169                              <1> II_ATTENTION	equ	0+5
   170                              <1> 
   171                              <1> LP_AUTHORITY	equ	1		; latent parameters GUARD$
   172                              <1> LP_ADDRESS	equ	14
   173                              <1> 
   174                              <1> LP_TIMESLICE	equ	10		; latent parameter timeslice -> yield
   175                              <1> LP_RANGE	equ	12		; latent parameter FP$XPO
   176                              <1> LP_AUTOEXIT	equ	11		; latent parameter return -> EXIT$
   177                                  	%include	"rta_smp.def"
   178                              <1> __POINTER	equ	4
   179                              <1> 
   180                              <1> REGISTER	equ	0
   181                              <1> APC		equ	REGISTER+288*4
   182                              <1> APCZ		equ	APC+__POINTER
   183                              <1> B0P		equ	APCZ+__POINTER
   184                              <1> RESTART_VECTOR	equ	B0P+__POINTER
   185                              <1> INDICATION	equ	RESTART_VECTOR+4
   186                              <1> LATENT_PARAMETER equ	INDICATION+4
   187                              <1> ISELECT		equ	LATENT_PARAMETER+4
   188                              <1> PSR		equ	ISELECT+4
   189                              <1> REGISTER_SET	equ	PSR+4
   190                              <1> B0_NAME		equ	REGISTER_SET+__POINTER
   191                              <1> B0_SCOPE	equ	B0_NAME+4
   192                              <1> DELTA		equ	B0_SCOPE+4
   193                              <1> __METRIC	equ	DELTA+4
   194                              <1> DELTA_BASE	equ	__METRIC+4
   195                              <1> TOTAL_DELTA	equ	DELTA_BASE+8
   196                              <1> TOTAL_METRIC	equ	TOTAL_DELTA+8
   197                              <1> IO_PORT		equ	TOTAL_METRIC+8
   198                              <1> DATAFRAME	equ	IO_PORT+192*4
   199                              <1> CORE_SIZE	equ	DATAFRAME+64*2*4
   200                              <1> 
   201                              <1> CORE_INDEX2	equ	4*280
   202                              <1> CORE_INDEX1	equ	4*(280-128)
   203                                  	%include	"io.def"
   204                              <1> 
   205                              <1> _MCAST_SUBVECTOR	equ	75*4	; writeable port to fan out multicast vector
   206                              <1> 					; not a read port
   207                              <1> _XI_PENDING		equ	74*4	; mask of external interrupt sources
   208                              <1> _XI_ACK			equ	75*4	; writeable ack to quench pending signals
   209                              <1> _INCREMENTER_RESTART	equ	76*4
   210                              <1> _CORE_SOCKET		equ	77*4	; socket index this core
   211                              <1> 
   212                              <1> _MCAST_PENDING		equ	78*4	; mask of cores which have multicast to here
   213                              <1> _MCAST_TO		equ	79*4	; -> latent parameter
   214                              <1> 					; destinations mask in register k
   215                              <1> _TZONE			equ	101*4
   216                                  
   217                                  ;	this is not PIC code
   218                                  ;	but does relative jumps for compactness
   219                                  
   220                                  %define ptr
   221                                  %define include
   222                                  %define .model
   223                                  %define .code
   224                                  
   225                                  SYSMEM_FLAG	equ	00800000h
   226                                  DATA16_FLAG	equ	00400000h
   227                                  FSYS24_FLAG	equ	00C00000h
   228                                  
   229                                  					; instruction code starts here
   230                                  	section		.text
   231                                  	global		_leloup
   232                                  	global		_execute
   233                                  	global		_device_readp
   234                                  	global		_bus_readp
   235                                  	global		_memory_read
   236                                  	global		_bus_read
   237                                  	global		_device_read
   238                                  
   239                                  ;	%include	"leloup.msm"
   240                                  ;	%include	"execute.msm"
   241                                  ;	%include	"rw.msm"
   242                                  ;	%include	"sr.msm"
   243                                  	%include	"base_map.msm"
   244                              <1> base_read_pointer:
   245 00000000 89C7                <1> 	mov	edi, eax		; keep EA for +words reads
   246                              <1> 					; straddling storage blocks
   247 00000002 C1C910              <1> 	ror	ecx, 16			; conserve designator / word counts
   248                              <1> 
   249 00000005 C1C812              <1> 	ror	eax, 18
   250 00000008 A83F                <1> 	test	al, 63
   251 0000000A 750F                <1> 	jnz	read_address18
   252 0000000C C1C006              <1> 	rol	eax, 6
   253 0000000F 660FB6C8            <1> 	movzx	cx, al
   254 00000013 C1E814              <1> 	shr	eax, 32-12
   255                              <1> 					; advise caller address 6.12
   256 00000016 E907000000          <1> 	jmp	resolve_read_tag	; this path is  most storage reads
   257                              <1> 	
   258                              <1> read_address18:
   259 0000001B 660FB6C8            <1> 	movzx	cx, al
   260 0000001F C1E80E              <1> 	shr	eax, 32-18
   261                              <1> 
   262                              <1> resolve_read_tag:
   263                              <1> 
   264 00000022 80E13F              <1> 	and	cl, 63
   265 00000025 7415                <1> 	jz	read_window_clear	; everyone may read B0
   266 00000027 F6C138              <1> 	test	cl, 56
   267 0000002A 7510                <1> 	jnz	read_window_clear
   268 0000002C 80F12F              <1> 	xor	cl, 40+7		; [ 1 2 3 4 5 6 7 ] -> 40 + [ 6 5 4 3 2 1 0]
   269 0000002F 66410FA3CC          <1> 	bt	r12w, cx		; in memory bytes ffff f00c 0xxx xxxx
   270 00000034 7303                <1> 	jnc	read_application_window	; x86 bus read -> 0xxx xxxx ffff f00c
   271 00000036 80C940              <1> 	or	cl, 64
   272                              <1> 
   273                              <1> read_application_window:
   274 00000039 80F12F              <1> 	xor	cl, 40+7		; [ 1 2 3 4 5 6 7 ] <- 40 + [ 6 5 4 3 2 1 0]
   275                              <1> 
   276                              <1> read_window_clear:
   277 0000003C 50                  <1> 	push	rax
   278 0000003D 480FB6C1            <1> 	movzx	rax, cl
   279 00000041 8B8486CC040000      <1> 	mov	eax, dword ptr [rsi+rax*4+IO_PORT]
   280 00000048 5E                  <1> 	pop	rsi
   281                              <1> 
   282 00000049 C1C910              <1> 	ror	ecx, 16
   283 0000004C C3                  <1> 	ret
   284                              <1> 
   285 0000004D FF00800000000000    <1> write_rule	db	255, 0, 128, 0, 0, 0, 0, 0
   286 00000055 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   287 0000005D 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   288 00000065 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   289 0000006D 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   290 00000075 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   291 0000007D 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   292 00000085 0000000000000000    <1> 		db	0, 0, 0, 0, 0, 0, 0, 0
   293 0000008D FF80808080808080    <1> 		db	255, 128, 128, 128, 128, 128, 128, 128
   294                              <1> 
   295                              <1> base_write_pointer:
   296                              <1> 
   297 00000095 89C7                <1> 	mov	edi, eax		; keep EA for +words writes
   298 00000097 C1C910              <1> 	ror	ecx, 16			; straddling storage blocks
   299                              <1> 					; protect designators in ecx
   300 0000009A C1C812              <1> 	ror	eax, 18			
   301                              <1> 
   302 0000009D A83F                <1> 	test	al, 63
   303 0000009F 750F                <1> 	jnz	write_address18
   304 000000A1 C1C006              <1> 	rol	eax, 6
   305 000000A4 660FB6C8            <1> 	movzx	cx, al
   306 000000A8 C1E814              <1> 	shr	eax, 32-12
   307 000000AB E907000000          <1> 	jmp	resolve_write_tag	; this path is
   308                              <1> 					; most storge writes
   309                              <1> write_address18:
   310 000000B0 660FB6C8            <1> 	movzx	cx, al
   311 000000B4 C1E80E              <1> 	shr	eax, 32-18
   312                              <1> 	
   313                              <1> resolve_write_tag:
   314                              <1> 
   315 000000B7 80E13F              <1> 	and	cl, 63
   316 000000BA 0F843D000000        <1> 	jz	near guard_ii_authority	; no-one may write B0
   317 000000C0 F6C138              <1> 	test	cl, 56
   318 000000C3 7510                <1> 	jnz	write_window_known
   319 000000C5 80F12F              <1> 	xor	cl, 40+7			; [ 1 2 3 4 5 6 7 ] -> 40 + [ 6 5 4 3 2 1 0]
   320 000000C8 66410FA3CC          <1> 	bt	r12w, cx			; in memory bytes ffff f00c 0xxx xxxx
   321 000000CD 7303                <1> 	jnc	write_application_window	; x86 bus read -> 0xxx xxxx ffff f00c
   322 000000CF 80C940              <1> 	or	cl, 64
   323                              <1> 
   324                              <1> write_application_window:
   325 000000D2 80F12F              <1> 	xor	cl, 40+7			; [ 1 2 3 4 5 6 7 ] <- 40 + [ 6 5 4 3 2 1 0]
   326                              <1> 
   327                              <1> write_window_known:
   328 000000D5 50                  <1> 	push	rax
   329 000000D6 480FB6C1            <1> 	movzx	rax, cl
   330 000000DA 67F680[4D000000]80  <1> 	test	byte ptr [eax+write_rule], 128
   331 000000E2 740D                <1> 	jz	write_window_free
   332 000000E4 48F7C100000000      <1> 	test	rcx, 0080000000000000h	; ISR ?
   333          ******************  <1>  warning: signed dword immediate exceeds bounds
   334 000000EB 0F840C000000        <1> 	jz	near guard_ii_authority		; the unbalanced push is harmless
   335                              <1> 						; stack is reset on faults
   336                              <1> write_window_free:
   337 000000F1 8B8486CC040000      <1> 	mov	eax, dword ptr [rsi+rax*4+IO_PORT]
   338 000000F8 5E                  <1> 	pop	rsi
   339                              <1> 
   340 000000F9 C1C910              <1> 	ror	ecx, 16		; restore designator information
   341 000000FC C3                  <1> 	ret
   342                              <1> 
   343                              <1> guard_ii_authority:
   344                                  ;	%include	"io.msm"
   345                                  ;	%include	"oport.msm"
   346                                  ;	%include	"ii.msm"
   347                                  ;	%include	"stack.msm"
   348                                  ;	%include	"return.msm"
   349                                  ;	%include	"rta.msm"
   350                                  ;	%include	"alu.msm"
   351                                  ;	%include	"fpu.msm"
   352                                  ;	%include	"parity.msm"
   353                                  ;	%include	"margin.msm"
   354                                  ;	%include	"margin_w.msm"
   355                                  ;	%include	"rex.msm"
   356                                  					; data follows here
   357                                  					; if it is in this assembly
   358                                  	%if	RTA_MBANKS
   359                                  
   360                                  	section		.data
   361                                  	%include	"rta_data.msm"
   362                                  
   363                                  	section		.bss
   364                                  _memory	resd	MEMORY
   365                                  
   366                                  	%endif
   367                                  
   368                                  	end
   369                                  

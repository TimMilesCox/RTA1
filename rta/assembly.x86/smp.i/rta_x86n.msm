
	%include	"rta_x86n.def"
	%include	"rta_smp.def"
	%include	"io.def"

;	this is not PIC code
;	but does relative jumps for compactness

%define ptr
%define include
%define .model
%define .code

SYSMEM_FLAG	equ	00800000h
DATA16_FLAG	equ	00400000h
FSYS24_FLAG	equ	00C00000h

					; instruction code starts here
	section		.text
	global		_leloup
	global		_execute
	global		_device_readp
	global		_bus_readp
	global		_memory_read
	global		_bus_read
	global		_device_read

	%include	"leloup.msm"
	%include	"execute.msm"
	%include	"rw.msm"
	%include	"base_map.msm"
	%include	"sr.msm"
	%include	"io.msm"
	%include	"sabr.msm"
	%include	"oport.msm"
	%include	"ii.msm"
	%include	"stack.msm"
	%include	"return.msm"
	%include	"rta.msm"
	%include	"alu.msm"
	%include	"fpu.msm"
	%include	"parity.msm"
	%include	"margin.msm"
	%include	"margin_w.msm"
	%include	"rex.msm"
	%include	"144.msm"
	%include	"_144_fm.msm"
					; data follows here
					; if it is in this assembly
	%if	RTA_MBANKS

	section		.data
	%include	"rta_data.msm"

	section		.bss
_memory	resd	MEMORY

	%endif

	end


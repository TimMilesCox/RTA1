_autoexit:
	mov	eax, II_EXIT
	mov	ecx, LP_AUTOEXIT
	jmp	_ii_escape

_lret:	test	dword ptr [esi+PSR], 00800000h
	jnz	_lret_

	cmp	dword ptr [ebp+S_P], 128
	jz	_autoexit

_lret_:	call	stack_read1
	add	eax, dword ptr [esi+ebx*4]
	and	eax, 00FFFFFFh
	jmp	_j

_fret:	test	dword ptr [esi+PSR], 00800000h
	jnz	_fret_

	cmp	dword ptr [ebp+S_P], 128
	jz	_autoexit

_fret_:	call	stack_read2
	mov	dword ptr [esi+APC], edx
	mov	edx, eax
	add	edx, dword ptr [esi+ebx*4+1*4]	; add EA as displacement to offset on stack
	mov	eax, dword ptr [esi+ebx*4]
	xor	ebx, ebx			; 1-page frame?
	test	eax, 00800000h			; multipages frame?
	jz	_fret_1page
	mov	ebx, eax
	shl	ebx, 12
	movzx	ebx, byte ptr [_memory+ebx*4+64*4+1]
	shr	ebx, 2

_fret_1page:
	jmp	_go2_frame

_fpxpo_low_order:				; $residue exponent out of range
        mov     ebx, dword ptr [esp+3*4]        ; tell ISR which accumulator

	%if 1
        mov     dword ptr [_ultra], ebx         ; tell developer if that is true
	%endif

_fpxpo:	mov	eax, II_FPXPO
	mov	ecx, ebx			; tell ISR which accumulator
	jmp	_ii_escape			; in latent parameter


; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Smaragd\rta\engine.rta\fpu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_fa
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_fa	PROC
; File c:\users\smaragd\rta\engine.rta\fpu.c
; Line 552
	push	ebp
	mov	ebp, esp
; Line 553
	push	0
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_ones_add
	add	esp, 8
; Line 554
	pop	ebp
	ret	0
_fa	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_psr:DWORD
EXTRN	__register:BYTE
EXTRN	_iselect:DWORD
EXTRN	_burst_read4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_magnitude_characteristic_difference$ = -88		; size = 4
_signs$ = -84						; size = 4
_normalised_addend$ = -80				; size = 32
_carry$ = -48						; size = 4
_biased_addend$ = -44					; size = 32
__$ArrayPad$ = -12					; size = 4
_characteristic$ = -8					; size = 4
_signs_right$ = -4					; size = 4
_ea$ = 8						; size = 4
_direction$ = 12					; size = 4
_ones_add PROC
; Line 393
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 404
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	lea	ecx, DWORD PTR _biased_addend$[ebp]
	push	ecx
	call	_burst_read4
	add	esp, 8
; Line 406
	mov	edx, DWORD PTR _biased_addend$[ebp]
	xor	edx, DWORD PTR _direction$[ebp]
	mov	DWORD PTR _biased_addend$[ebp], edx
; Line 407
	mov	eax, DWORD PTR _biased_addend$[ebp+4]
	xor	eax, DWORD PTR _direction$[ebp]
	mov	DWORD PTR _biased_addend$[ebp+4], eax
; Line 408
	mov	ecx, DWORD PTR _biased_addend$[ebp+8]
	xor	ecx, DWORD PTR _direction$[ebp]
	mov	DWORD PTR _biased_addend$[ebp+8], ecx
; Line 409
	mov	edx, DWORD PTR _biased_addend$[ebp+12]
	xor	edx, DWORD PTR _direction$[ebp]
	mov	DWORD PTR _biased_addend$[ebp+12], edx
; Line 411
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	sar	ecx, 23					; 00000017H
	and	ecx, 1
	xor	edx, edx
	sub	edx, ecx
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], edx
; Line 412
	mov	eax, DWORD PTR _biased_addend$[ebp]
	sar	eax, 23					; 00000017H
	and	eax, 1
	xor	ecx, ecx
	sub	ecx, eax
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs_right$[ebp], ecx
; Line 414
	mov	edx, DWORD PTR _biased_addend$[ebp+4]
	xor	edx, DWORD PTR _signs_right$[ebp]
	and	edx, 8388608				; 00800000H
	je	$LN10@ones_add
; Line 416
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	xor	ecx, DWORD PTR _signs$[ebp]
	and	ecx, 8388608				; 00800000H
	je	$LN9@ones_add
; Line 419
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR __register[edx*4]
	and	eax, 16777215				; 00ffffffH
	xor	eax, DWORD PTR _signs$[ebp]
	mov	ecx, DWORD PTR _biased_addend$[ebp]
	and	ecx, 16777215				; 00ffffffH
	xor	ecx, DWORD PTR _signs_right$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _magnitude_characteristic_difference$[ebp], eax
; Line 421
	jns	SHORT $LN8@ones_add
; Line 427
	mov	edx, DWORD PTR _biased_addend$[ebp]
	mov	DWORD PTR _normalised_addend$[ebp], edx
; Line 428
	mov	eax, DWORD PTR _biased_addend$[ebp+4]
	mov	DWORD PTR _normalised_addend$[ebp+4], eax
; Line 429
	mov	ecx, DWORD PTR _biased_addend$[ebp+8]
	mov	DWORD PTR _normalised_addend$[ebp+8], ecx
; Line 430
	mov	edx, DWORD PTR _biased_addend$[ebp+12]
	mov	DWORD PTR _normalised_addend$[ebp+12], edx
; Line 431
	mov	eax, DWORD PTR _signs_right$[ebp]
	xor	eax, DWORD PTR __register+588
	mov	DWORD PTR _normalised_addend$[ebp+16], eax
; Line 433
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _biased_addend$[ebp], ecx
; Line 434
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _biased_addend$[ebp+4], eax
; Line 435
	mov	ecx, DWORD PTR _iselect
	or	ecx, 6
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _biased_addend$[ebp+8], edx
; Line 436
	mov	eax, DWORD PTR _iselect
	or	eax, 7
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _biased_addend$[ebp+12], ecx
; Line 437
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _biased_addend$[ebp+16], edx
; Line 440
	xor	eax, eax
	sub	eax, DWORD PTR _magnitude_characteristic_difference$[ebp]
	mov	DWORD PTR _magnitude_characteristic_difference$[ebp], eax
; Line 442
	mov	ecx, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR _signs$[ebp], ecx
; Line 444
	jmp	SHORT $LN7@ones_add
$LN8@ones_add:
; Line 450
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _normalised_addend$[ebp], eax
; Line 451
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _normalised_addend$[ebp+4], edx
; Line 452
	mov	eax, DWORD PTR _iselect
	or	eax, 6
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _normalised_addend$[ebp+8], ecx
; Line 453
	mov	edx, DWORD PTR _iselect
	or	edx, 7
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _normalised_addend$[ebp+12], eax
; Line 454
	mov	ecx, DWORD PTR _signs$[ebp]
	xor	ecx, DWORD PTR __register+588
	mov	DWORD PTR _normalised_addend$[ebp+16], ecx
; Line 456
	mov	edx, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR _biased_addend$[ebp+16], edx
; Line 457
	mov	eax, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR _biased_addend$[ebp], eax
$LN7@ones_add:
; Line 460
	mov	ecx, DWORD PTR _normalised_addend$[ebp]
	xor	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _characteristic$[ebp], ecx
; Line 462
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _normalised_addend$[ebp], edx
; Line 475
	lea	eax, DWORD PTR _biased_addend$[ebp]
	push	eax
	lea	ecx, DWORD PTR _normalised_addend$[ebp]
	push	ecx
	mov	edx, DWORD PTR _magnitude_characteristic_difference$[ebp]
	push	edx
	call	_add_bias
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _carry$[ebp], eax
; Line 477
	mov	eax, DWORD PTR _characteristic$[ebp]
	add	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _characteristic$[ebp], eax
; Line 478
	cmp	DWORD PTR _carry$[ebp], -71		; ffffffb9H
	jge	SHORT $LN6@ones_add
	mov	DWORD PTR _characteristic$[ebp], 4194304 ; 00400000H
$LN6@ones_add:
; Line 494
	mov	ecx, DWORD PTR _characteristic$[ebp]
	xor	ecx, DWORD PTR _normalised_addend$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 495
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR _normalised_addend$[ebp+4]
	mov	DWORD PTR __register[eax*4], ecx
; Line 496
	mov	edx, DWORD PTR _iselect
	or	edx, 6
	mov	eax, DWORD PTR _normalised_addend$[ebp+8]
	mov	DWORD PTR __register[edx*4], eax
; Line 497
	mov	ecx, DWORD PTR _iselect
	or	ecx, 7
	mov	edx, DWORD PTR _normalised_addend$[ebp+12]
	mov	DWORD PTR __register[ecx*4], edx
; Line 499
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN5@ones_add
; Line 500
	lea	ecx, DWORD PTR _normalised_addend$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _characteristic$[ebp]
	push	edx
	mov	eax, DWORD PTR _normalised_addend$[ebp]
	push	eax
	call	_store_minor_result
	add	esp, 12					; 0000000cH
$LN5@ones_add:
; Line 502
	jmp	$LN4@ones_add
$LN9@ones_add:
; Line 515
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR _biased_addend$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
; Line 516
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR _biased_addend$[ebp+4]
	mov	DWORD PTR __register[eax*4], ecx
; Line 517
	mov	edx, DWORD PTR _iselect
	or	edx, 6
	mov	eax, DWORD PTR _biased_addend$[ebp+8]
	mov	DWORD PTR __register[edx*4], eax
; Line 518
	mov	ecx, DWORD PTR _iselect
	or	ecx, 7
	mov	edx, DWORD PTR _biased_addend$[ebp+12]
	mov	DWORD PTR __register[ecx*4], edx
; Line 520
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN4@ones_add
; Line 522
	mov	ecx, DWORD PTR _iselect
	or	ecx, 8
	mov	edx, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
; Line 523
	mov	eax, DWORD PTR _iselect
	or	eax, 9
	mov	ecx, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR __register[eax*4], ecx
; Line 524
	mov	edx, DWORD PTR _iselect
	or	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR __register[edx*4], eax
; Line 525
	mov	ecx, DWORD PTR _iselect
	or	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _signs_right$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
$LN4@ones_add:
; Line 527
	jmp	SHORT $LN11@ones_add
$LN10@ones_add:
; Line 532
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN11@ones_add
; Line 543
	mov	ecx, DWORD PTR _iselect
	or	ecx, 8
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
; Line 544
	mov	eax, DWORD PTR _iselect
	or	eax, 9
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR __register[eax*4], ecx
; Line 545
	mov	edx, DWORD PTR _iselect
	or	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _signs$[ebp]
	mov	DWORD PTR __register[edx*4], eax
; Line 546
	mov	ecx, DWORD PTR _iselect
	or	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
$LN11@ones_add:
; Line 548
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ones_add ENDP
; Function compile flags: /Odtp
_normalising_count$ = -4				; size = 4
_signs$ = 8						; size = 4
_characteristic$ = 12					; size = 4
_result$ = 16						; size = 4
_store_minor_result PROC
; Line 157
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 158
	mov	DWORD PTR _normalising_count$[ebp], 0
; Line 161
	mov	eax, DWORD PTR _characteristic$[ebp]
	sub	eax, 72					; 00000048H
	mov	DWORD PTR _characteristic$[ebp], eax
$LN5@store_mino:
; Line 163
	cmp	DWORD PTR _normalising_count$[ebp], 72	; 00000048H
	jge	SHORT $LN4@store_mino
; Line 165
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	edx, DWORD PTR _signs$[ebp]
	and	edx, 8388608				; 00800000H
	je	SHORT $LN3@store_mino
	jmp	SHORT $LN4@store_mino
$LN3@store_mino:
; Line 166
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _signs$[ebp]
	push	ecx
	call	_sleft
	add	esp, 12					; 0000000cH
; Line 167
	mov	edx, DWORD PTR _normalising_count$[ebp]
	add	edx, 1
	mov	DWORD PTR _normalising_count$[ebp], edx
; Line 168
	jmp	SHORT $LN5@store_mino
$LN4@store_mino:
; Line 170
	cmp	DWORD PTR _normalising_count$[ebp], 72	; 00000048H
	jge	SHORT $LN2@store_mino
	mov	eax, DWORD PTR _characteristic$[ebp]
	sub	eax, DWORD PTR _normalising_count$[ebp]
	mov	DWORD PTR _characteristic$[ebp], eax
	jmp	SHORT $LN1@store_mino
$LN2@store_mino:
; Line 171
	mov	DWORD PTR _characteristic$[ebp], 0
$LN1@store_mino:
; Line 173
	mov	ecx, DWORD PTR _characteristic$[ebp]
	and	ecx, 8388607				; 007fffffH
	mov	DWORD PTR _characteristic$[ebp], ecx
; Line 174
	mov	edx, DWORD PTR _characteristic$[ebp]
	xor	edx, DWORD PTR _signs$[ebp]
	mov	eax, DWORD PTR _iselect
	or	eax, 8
	mov	DWORD PTR __register[eax*4], edx
; Line 175
	mov	ecx, DWORD PTR _iselect
	or	ecx, 9
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __register[ecx*4], eax
; Line 176
	mov	ecx, DWORD PTR _iselect
	or	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __register[ecx*4], eax
; Line 177
	mov	ecx, DWORD PTR _iselect
	or	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __register[ecx*4], eax
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	0
_store_minor_result ENDP
; Function compile flags: /Odtp
_carry$ = -8						; size = 4
_index$ = -4						; size = 4
_insert_bit$ = 8					; size = 4
_words$ = 12						; size = 4
_data$ = 16						; size = 4
_sleft	PROC
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 85
	mov	eax, DWORD PTR _insert_bit$[ebp]
	and	eax, 1
	mov	DWORD PTR _carry$[ebp], eax
; Line 86
	mov	ecx, DWORD PTR _words$[ebp]
	mov	DWORD PTR _index$[ebp], ecx
$LN2@sleft:
; Line 88
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
	test	edx, edx
	je	SHORT $LN3@sleft
; Line 90
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shl	eax, 1
	or	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 91
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 92
	mov	ecx, DWORD PTR _carry$[ebp]
	sar	ecx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], ecx
; Line 93
	jmp	SHORT $LN2@sleft
$LN3@sleft:
; Line 94
	mov	esp, ebp
	pop	ebp
	ret	0
_sleft	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp
_TEXT	SEGMENT
_from$ = -84						; size = 4
_downscale$ = -80					; size = 4
_mantissa_words$ = -76					; size = 4
_inverse$ = -72						; size = 4
_bits_offset$ = -68					; size = 4
_leading_bits$ = -64					; size = 4
_signs$ = -60						; size = 4
_right$ = -56						; size = 32
__$ArrayPad$ = -24					; size = 4
_carry$ = -20						; size = 4
_word_offset$ = -16					; size = 4
_transition$ = -12					; size = 4
_scale$ = -8						; size = 4
_to$ = -4						; size = 4
_bias$ = 8						; size = 4
_left$ = 12						; size = 4
_biased_addend$ = 16					; size = 4
_add_bias PROC
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 228
	mov	DWORD PTR _scale$[ebp], 0
; Line 229
	mov	eax, DWORD PTR _biased_addend$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 230
	mov	eax, DWORD PTR _bias$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, 1
	mov	DWORD PTR _word_offset$[ebp], eax
; Line 231
	mov	eax, DWORD PTR _bias$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR _bits_offset$[ebp], edx
; Line 232
	mov	edx, 24					; 00000018H
	sub	edx, DWORD PTR _bits_offset$[ebp]
	mov	DWORD PTR _leading_bits$[ebp], edx
; Line 233
	mov	eax, DWORD PTR _biased_addend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _transition$[ebp], ecx
; Line 234
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _signs$[ebp], eax
; Line 235
	mov	DWORD PTR _to$[ebp], 0
; Line 236
	mov	DWORD PTR _from$[ebp], 2
; Line 237
	mov	DWORD PTR _mantissa_words$[ebp], 3
; Line 238
	mov	DWORD PTR _inverse$[ebp], 3
; Line 239
	mov	DWORD PTR _downscale$[ebp], -71		; ffffffb9H
; Line 243
	mov	ecx, DWORD PTR _psr
	and	ecx, 8
	je	SHORT $LN21@add_bias
; Line 245
	mov	DWORD PTR _mantissa_words$[ebp], 6
; Line 246
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+28], ecx
; Line 247
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _signs$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 248
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 249
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 250
	mov	edx, DWORD PTR _biased_addend$[ebp]
	mov	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 251
	mov	ecx, DWORD PTR _biased_addend$[ebp]
	mov	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 252
	mov	eax, DWORD PTR _biased_addend$[ebp]
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 254
	mov	DWORD PTR _inverse$[ebp], 6
; Line 255
	mov	DWORD PTR _downscale$[ebp], -143	; ffffff71H
; Line 256
	cmp	DWORD PTR _bias$[ebp], 160		; 000000a0H
	jle	SHORT $LN20@add_bias
	xor	eax, eax
	jmp	$LN22@add_bias
$LN20@add_bias:
; Line 260
	jmp	SHORT $LN17@add_bias
$LN21@add_bias:
	cmp	DWORD PTR _bias$[ebp], 80		; 00000050H
	jle	SHORT $LN17@add_bias
	xor	eax, eax
	jmp	$LN22@add_bias
$LN17@add_bias:
; Line 263
	mov	edx, DWORD PTR _to$[ebp]
	cmp	edx, DWORD PTR _word_offset$[ebp]
	jge	SHORT $LN15@add_bias
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _right$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _to$[ebp]
	add	edx, 1
	mov	DWORD PTR _to$[ebp], edx
	jmp	SHORT $LN17@add_bias
$LN15@add_bias:
; Line 267
	mov	eax, DWORD PTR _carry$[ebp]
	mov	ecx, DWORD PTR _leading_bits$[ebp]
	shl	eax, cl
	mov	DWORD PTR _carry$[ebp], eax
; Line 268
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR _bits_offset$[ebp]
	sar	edx, cl
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 269
	mov	eax, DWORD PTR _carry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _carry$[ebp], eax
; Line 270
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _right$[ebp+ecx*4], edx
; Line 271
	mov	eax, DWORD PTR _to$[ebp]
	cmp	eax, DWORD PTR _mantissa_words$[ebp]
	jle	SHORT $LN13@add_bias
	jmp	SHORT $LN12@add_bias
$LN13@add_bias:
; Line 272
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx
; Line 273
	mov	edx, DWORD PTR _transition$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 274
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR _biased_addend$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _transition$[ebp], edx
	mov	eax, DWORD PTR _from$[ebp]
	add	eax, 1
	mov	DWORD PTR _from$[ebp], eax
; Line 275
	jmp	SHORT $LN15@add_bias
$LN12@add_bias:
; Line 291
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 292
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 293
	mov	ecx, DWORD PTR _to$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _to$[ebp], ecx
; Line 294
	jns	SHORT $LN10@add_bias
	jmp	SHORT $LN11@add_bias
$LN10@add_bias:
; Line 295
	mov	edx, DWORD PTR _carry$[ebp]
	sar	edx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], edx
; Line 296
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _carry$[ebp]
	add	ecx, DWORD PTR _right$[ebp+eax*4]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 297
	jmp	SHORT $LN12@add_bias
$LN11@add_bias:
; Line 299
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	eax, DWORD PTR _signs$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN9@add_bias
; Line 310
	mov	ecx, DWORD PTR _signs$[ebp]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], ecx
; Line 312
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 313
	cmp	DWORD PTR _carry$[ebp], 0
	jne	SHORT $LN7@add_bias
	mov	DWORD PTR _carry$[ebp], 1
$LN7@add_bias:
; Line 315
	cmp	DWORD PTR _inverse$[ebp], 0
	je	SHORT $LN9@add_bias
; Line 321
	mov	eax, DWORD PTR _inverse$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 322
	mov	eax, DWORD PTR _carry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _inverse$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 323
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 324
	mov	ecx, DWORD PTR _inverse$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _inverse$[ebp], ecx
; Line 325
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 326
	jmp	SHORT $LN7@add_bias
$LN9@add_bias:
; Line 345
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, DWORD PTR _signs$[ebp]
	and	ecx, 1
	je	SHORT $LN3@add_bias
; Line 354
	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	eax, DWORD PTR _mantissa_words$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _signs$[ebp]
	push	ecx
	call	_sright
	add	esp, 12					; 0000000cH
; Line 355
	mov	DWORD PTR _scale$[ebp], 1
; Line 357
	jmp	SHORT $LN4@add_bias
$LN3@add_bias:
; Line 359
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	eax, DWORD PTR _signs$[ebp]
	and	eax, 8388608				; 00800000H
	jne	SHORT $LN4@add_bias
; Line 368
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mantissa_words$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _signs$[ebp]
	push	eax
	call	_sleft
	add	esp, 12					; 0000000cH
; Line 369
	mov	ecx, DWORD PTR _scale$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _scale$[ebp], ecx
; Line 370
	mov	edx, DWORD PTR _scale$[ebp]
	cmp	edx, DWORD PTR _downscale$[ebp]
	jge	SHORT $LN1@add_bias
	jmp	SHORT $LN4@add_bias
$LN1@add_bias:
; Line 371
	jmp	SHORT $LN3@add_bias
$LN4@add_bias:
; Line 374
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 375
	mov	eax, DWORD PTR _scale$[ebp]
$LN22@add_bias:
; Line 376
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_add_bias ENDP
; Function compile flags: /Odtp
_carry$ = -8						; size = 4
_index$ = -4						; size = 4
_insert_bit$ = 8					; size = 4
_words$ = 12						; size = 4
_data$ = 16						; size = 4
_sright	PROC
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 70
	mov	eax, DWORD PTR _insert_bit$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 71
	mov	DWORD PTR _index$[ebp], 0
$LN2@sright:
; Line 73
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR _words$[ebp]
	jge	SHORT $LN3@sright
; Line 75
	mov	edx, DWORD PTR _carry$[ebp]
	and	edx, 1
	mov	DWORD PTR _carry$[ebp], edx
; Line 76
	mov	eax, DWORD PTR _carry$[ebp]
	shl	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 77
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _carry$[ebp]
	or	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 78
	mov	ecx, DWORD PTR _carry$[ebp]
	sar	ecx, 1
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 79
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
; Line 80
	jmp	SHORT $LN2@sright
$LN3@sright:
; Line 81
	mov	esp, ebp
	pop	ebp
	ret	0
_sright	ENDP
_TEXT	ENDS
PUBLIC	_fan
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_fan	PROC
; Line 557
	push	ebp
	mov	ebp, esp
; Line 558
	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_ones_add
	add	esp, 8
; Line 559
	pop	ebp
	ret	0
_fan	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_fm
; Function compile flags: /Odtp
_TEXT	SEGMENT
_shift$ = -144						; size = 4
_add_words$ = -140					; size = 4
_result$ = -136						; size = 36
_around$ = -100						; size = 32
_signs$ = -68						; size = 4
_index2$ = -64						; size = 4
_addend$ = -60						; size = 32
_characteristic$ = -28					; size = 4
_multiplier$ = -24					; size = 16
__$ArrayPad$ = -8					; size = 4
_index1$ = -4						; size = 4
_ea$ = 8						; size = 4
_fm	PROC
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 563
	mov	DWORD PTR _around$[ebp], 0
	mov	DWORD PTR _around$[ebp+4], 0
	mov	DWORD PTR _around$[ebp+8], 0
	mov	eax, DWORD PTR __register+588
	mov	DWORD PTR _around$[ebp+12], eax
	mov	DWORD PTR _around$[ebp+16], 0
	mov	DWORD PTR _around$[ebp+20], 0
	mov	DWORD PTR _around$[ebp+24], 0
	mov	ecx, DWORD PTR __register+588
	mov	DWORD PTR _around$[ebp+28], ecx
; Line 565
	mov	DWORD PTR _result$[ebp], 0
	mov	DWORD PTR _result$[ebp+4], 0
	mov	DWORD PTR _result$[ebp+8], 0
	mov	DWORD PTR _result$[ebp+12], 0
	mov	DWORD PTR _result$[ebp+16], 0
	mov	DWORD PTR _result$[ebp+20], 0
	mov	DWORD PTR _result$[ebp+24], 0
	mov	DWORD PTR _result$[ebp+28], 0
	mov	DWORD PTR _result$[ebp+32], 0
; Line 566
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _addend$[ebp], eax
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _addend$[ebp+4], edx
	mov	eax, DWORD PTR _iselect
	or	eax, 6
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _addend$[ebp+8], ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 7
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _addend$[ebp+12], eax
	mov	DWORD PTR _addend$[ebp+16], 0
	mov	DWORD PTR _addend$[ebp+20], 0
	mov	DWORD PTR _addend$[ebp+24], 0
	mov	DWORD PTR _addend$[ebp+28], 0
; Line 568
	mov	DWORD PTR _multiplier$[ebp], 0
	mov	DWORD PTR _multiplier$[ebp+4], 0
	mov	DWORD PTR _multiplier$[ebp+8], 0
	mov	DWORD PTR _multiplier$[ebp+12], 0
; Line 571
	mov	ecx, DWORD PTR _psr
	and	ecx, 8
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 4
	add	ecx, 3
	mov	DWORD PTR _add_words$[ebp], ecx
; Line 574
	mov	edx, DWORD PTR _ea$[ebp]
	push	edx
	lea	eax, DWORD PTR _multiplier$[ebp]
	push	eax
	call	_burst_read4
	add	esp, 8
; Line 576
	mov	ecx, DWORD PTR _addend$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN18@fm
; Line 578
	mov	edx, DWORD PTR _result$[ebp]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _result$[ebp], edx
; Line 579
	mov	eax, DWORD PTR _addend$[ebp]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _addend$[ebp], eax
; Line 580
	mov	ecx, DWORD PTR _addend$[ebp+4]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _addend$[ebp+4], ecx
; Line 581
	mov	edx, DWORD PTR _addend$[ebp+8]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _addend$[ebp+8], edx
; Line 582
	mov	eax, DWORD PTR _addend$[ebp+12]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _addend$[ebp+12], eax
$LN18@fm:
; Line 595
	mov	ecx, DWORD PTR _multiplier$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN17@fm
; Line 597
	mov	edx, DWORD PTR _result$[ebp]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _result$[ebp], edx
; Line 598
	mov	eax, DWORD PTR _multiplier$[ebp]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _multiplier$[ebp], eax
; Line 599
	mov	ecx, DWORD PTR _multiplier$[ebp+4]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _multiplier$[ebp+4], ecx
; Line 600
	mov	edx, DWORD PTR _multiplier$[ebp+8]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _multiplier$[ebp+8], edx
; Line 601
	mov	eax, DWORD PTR _multiplier$[ebp+12]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _multiplier$[ebp+12], eax
$LN17@fm:
; Line 604
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _signs$[ebp], ecx
; Line 605
	mov	DWORD PTR _characteristic$[ebp], 0
; Line 618
	mov	edx, DWORD PTR _addend$[ebp+4]
	and	edx, DWORD PTR _multiplier$[ebp+4]
	and	edx, 8388608				; 00800000H
	je	$LN16@fm
; Line 620
	mov	DWORD PTR _index1$[ebp], 1
	jmp	SHORT $LN15@fm
$LN14@fm:
	mov	eax, DWORD PTR _index1$[ebp]
	add	eax, 1
	mov	DWORD PTR _index1$[ebp], eax
$LN15@fm:
	cmp	DWORD PTR _index1$[ebp], 4
	jge	SHORT $LN13@fm
; Line 622
	mov	ecx, DWORD PTR _index1$[ebp]
	mov	edx, DWORD PTR _multiplier$[ebp+ecx*4]
	mov	DWORD PTR _shift$[ebp], edx
; Line 623
	mov	DWORD PTR _index2$[ebp], 24		; 00000018H
$LN12@fm:
; Line 625
	mov	eax, DWORD PTR _index2$[ebp]
	mov	ecx, DWORD PTR _index2$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _index2$[ebp], ecx
	test	eax, eax
	je	SHORT $LN11@fm
; Line 639
	lea	edx, DWORD PTR _addend$[ebp+4]
	push	edx
	push	7
	push	0
	call	_sright
	add	esp, 12					; 0000000cH
; Line 640
	mov	eax, DWORD PTR _shift$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN10@fm
	lea	ecx, DWORD PTR _addend$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _result$[ebp+4]
	push	edx
	push	7
	call	_add
	add	esp, 12					; 0000000cH
$LN10@fm:
; Line 641
	mov	eax, DWORD PTR _shift$[ebp]
	shl	eax, 1
	mov	DWORD PTR _shift$[ebp], eax
; Line 642
	jmp	SHORT $LN12@fm
$LN11@fm:
; Line 643
	jmp	SHORT $LN14@fm
$LN13@fm:
; Line 653
	mov	ecx, DWORD PTR _addend$[ebp]
	and	ecx, 8388607				; 007fffffH
	mov	edx, DWORD PTR _multiplier$[ebp]
	and	edx, 8388607				; 007fffffH
	lea	eax, DWORD PTR [ecx+edx-4194304]
	mov	DWORD PTR _characteristic$[ebp], eax
; Line 655
	mov	ecx, DWORD PTR _result$[ebp+4]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN9@fm
; Line 663
	jmp	SHORT $LN8@fm
$LN9@fm:
; Line 671
	lea	edx, DWORD PTR _result$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _add_words$[ebp]
	push	eax
	push	0
	call	_sleft
	add	esp, 12					; 0000000cH
; Line 672
	mov	ecx, DWORD PTR _characteristic$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _characteristic$[ebp], ecx
$LN8@fm:
; Line 675
	mov	edx, DWORD PTR _characteristic$[ebp]
	and	edx, 8388607				; 007fffffH
	mov	DWORD PTR _characteristic$[ebp], edx
; Line 683
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN7@fm
	mov	DWORD PTR _around$[ebp+12], 0
$LN7@fm:
; Line 684
	lea	ecx, DWORD PTR _around$[ebp]
	push	ecx
	lea	edx, DWORD PTR _result$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _add_words$[ebp]
	add	eax, 1
	push	eax
	call	_add
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _shift$[ebp], eax
; Line 685
	mov	ecx, DWORD PTR _characteristic$[ebp]
	add	ecx, DWORD PTR _shift$[ebp]
	mov	DWORD PTR _characteristic$[ebp], ecx
; Line 686
	cmp	DWORD PTR _shift$[ebp], 0
	je	SHORT $LN6@fm
	lea	edx, DWORD PTR _result$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _add_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shift$[ebp]
	push	ecx
	call	_sright
	add	esp, 12					; 0000000cH
$LN6@fm:
; Line 688
	mov	edx, DWORD PTR _characteristic$[ebp]
	and	edx, -8388608				; ff800000H
	je	SHORT $LN5@fm
; Line 696
	mov	DWORD PTR _characteristic$[ebp], 8388607 ; 007fffffH
$LN5@fm:
; Line 705
	mov	eax, DWORD PTR _result$[ebp+4]
	xor	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+4], eax
; Line 706
	mov	ecx, DWORD PTR _result$[ebp+8]
	xor	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+8], ecx
; Line 707
	mov	edx, DWORD PTR _result$[ebp+12]
	xor	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 709
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN4@fm
; Line 711
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _signs$[ebp], ecx
; Line 712
	mov	edx, DWORD PTR _result$[ebp+16]
	xor	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+16], edx
; Line 713
	mov	eax, DWORD PTR _result$[ebp+20]
	xor	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+20], eax
; Line 714
	mov	ecx, DWORD PTR _result$[ebp+24]
	xor	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp+24], ecx
$LN4@fm:
; Line 717
	mov	edx, DWORD PTR _result$[ebp]
	xor	edx, DWORD PTR _characteristic$[ebp]
	mov	DWORD PTR _result$[ebp], edx
; Line 719
	jmp	SHORT $LN3@fm
$LN16@fm:
; Line 721
	mov	eax, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+4], eax
; Line 722
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+8], ecx
; Line 723
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 725
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN3@fm
; Line 727
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+16], ecx
; Line 728
	mov	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+20], edx
; Line 729
	mov	eax, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _result$[ebp+24], eax
$LN3@fm:
; Line 733
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
; Line 734
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR _result$[ebp+4]
	mov	DWORD PTR __register[eax*4], ecx
; Line 735
	mov	edx, DWORD PTR _iselect
	or	edx, 6
	mov	eax, DWORD PTR _result$[ebp+8]
	mov	DWORD PTR __register[edx*4], eax
; Line 736
	mov	ecx, DWORD PTR _iselect
	or	ecx, 7
	mov	edx, DWORD PTR _result$[ebp+12]
	mov	DWORD PTR __register[ecx*4], edx
; Line 738
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN19@fm
; Line 739
	lea	ecx, DWORD PTR _result$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _characteristic$[ebp]
	push	edx
	mov	eax, DWORD PTR _signs$[ebp]
	push	eax
	call	_store_minor_result
	add	esp, 12					; 0000000cH
$LN19@fm:
; Line 740
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fm	ENDP
; Function compile flags: /Odtp
_carry$ = -8						; size = 4
_index$ = -4						; size = 4
_words$ = 8						; size = 4
_to$ = 12						; size = 4
_from$ = 16						; size = 4
_add	PROC
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 98
	mov	DWORD PTR _carry$[ebp], 0
; Line 99
	mov	eax, DWORD PTR _words$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN2@add:
; Line 101
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	sub	edx, 1
	mov	DWORD PTR _index$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN1@add
; Line 103
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 104
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 105
	mov	eax, DWORD PTR _carry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 106
	mov	eax, DWORD PTR _carry$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 107
	jmp	SHORT $LN2@add
$LN1@add:
; Line 108
	mov	eax, DWORD PTR _carry$[ebp]
; Line 109
	mov	esp, ebp
	pop	ebp
	ret	0
_add	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_fd
; Function compile flags: /Odtp
_TEXT	SEGMENT
_mantissa_words$ = -148					; size = 4
_reciprocal$ = -144					; size = 32
_beats$ = -112						; size = 4
_lookaside$ = -108					; size = 28
_signs$ = -80						; size = 4
_carry$ = -76						; size = 4
_divisor$ = -72						; size = 32
_remainder$ = -40					; size = 32
__$ArrayPad$ = -8					; size = 4
_signs1$ = -4						; size = 4
_ea$ = 8						; size = 4
_fd	PROC
; Line 744
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 745
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _remainder$[ebp], ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _remainder$[ebp+4], eax
	mov	ecx, DWORD PTR _iselect
	or	ecx, 6
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _remainder$[ebp+8], edx
	mov	eax, DWORD PTR _iselect
	or	eax, 7
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _remainder$[ebp+12], ecx
; Line 746
	mov	edx, DWORD PTR __register+588
	mov	DWORD PTR _remainder$[ebp+16], edx
	mov	DWORD PTR _remainder$[ebp+20], 0
	mov	DWORD PTR _remainder$[ebp+24], 0
	mov	eax, DWORD PTR __register+588
	mov	DWORD PTR _remainder$[ebp+28], eax
; Line 748
	mov	DWORD PTR _divisor$[ebp], 0
	mov	DWORD PTR _divisor$[ebp+4], 0
	mov	DWORD PTR _divisor$[ebp+8], 0
	mov	DWORD PTR _divisor$[ebp+12], 0
; Line 749
	mov	DWORD PTR _divisor$[ebp+16], 16777215	; 00ffffffH
	mov	DWORD PTR _divisor$[ebp+20], 16777215	; 00ffffffH
; Line 750
	mov	DWORD PTR _divisor$[ebp+24], 16777215	; 00ffffffH
	mov	DWORD PTR _divisor$[ebp+28], 16777215	; 00ffffffH
; Line 754
	mov	DWORD PTR _reciprocal$[ebp], 0
	mov	DWORD PTR _reciprocal$[ebp+4], 0
	mov	DWORD PTR _reciprocal$[ebp+8], 0
	mov	DWORD PTR _reciprocal$[ebp+12], 0
	mov	DWORD PTR _reciprocal$[ebp+16], 0
	mov	DWORD PTR _reciprocal$[ebp+20], 0
	mov	DWORD PTR _reciprocal$[ebp+24], 0
	mov	DWORD PTR _reciprocal$[ebp+28], 0
; Line 756
	mov	DWORD PTR _signs$[ebp], 0
; Line 757
	mov	DWORD PTR _signs1$[ebp], 0
; Line 758
	mov	DWORD PTR _beats$[ebp], 72		; 00000048H
; Line 759
	mov	DWORD PTR _mantissa_words$[ebp], 3
; Line 762
	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	lea	edx, DWORD PTR _divisor$[ebp]
	push	edx
	call	_burst_read4
	add	esp, 8
; Line 764
	mov	eax, DWORD PTR _divisor$[ebp]
	xor	eax, DWORD PTR _divisor$[ebp+4]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN18@fd
; Line 767
	jmp	$LN17@fd
$LN18@fd:
; Line 769
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	DWORD PTR __register[ecx*4], 16777215	; 00ffffffH
; Line 770
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], 16777215	; 00ffffffH
; Line 771
	mov	eax, DWORD PTR _iselect
	or	eax, 6
	mov	DWORD PTR __register[eax*4], 16777215	; 00ffffffH
; Line 772
	mov	ecx, DWORD PTR _iselect
	or	ecx, 7
	mov	DWORD PTR __register[ecx*4], 16777215	; 00ffffffH
; Line 774
	mov	edx, DWORD PTR _psr
	and	edx, 8
	je	SHORT $LN16@fd
; Line 776
	mov	eax, DWORD PTR _iselect
	or	eax, 8
	mov	DWORD PTR __register[eax*4], 16777215	; 00ffffffH
; Line 777
	mov	ecx, DWORD PTR _iselect
	or	ecx, 9
	mov	DWORD PTR __register[ecx*4], 16777215	; 00ffffffH
; Line 778
	mov	edx, DWORD PTR _iselect
	or	edx, 10					; 0000000aH
	mov	DWORD PTR __register[edx*4], 16777215	; 00ffffffH
; Line 779
	mov	eax, DWORD PTR _iselect
	or	eax, 11					; 0000000bH
	mov	DWORD PTR __register[eax*4], 16777215	; 00ffffffH
$LN16@fd:
; Line 782
	jmp	$LN19@fd
$LN17@fd:
; Line 785
	mov	ecx, DWORD PTR _divisor$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN15@fd
	mov	DWORD PTR _signs$[ebp], 16777215	; 00ffffffH
; Line 786
	jmp	SHORT $LN14@fd
$LN15@fd:
; Line 788
	mov	edx, DWORD PTR _divisor$[ebp+4]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _divisor$[ebp+4], edx
; Line 789
	mov	eax, DWORD PTR _divisor$[ebp+8]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _divisor$[ebp+8], eax
; Line 790
	mov	ecx, DWORD PTR _divisor$[ebp+12]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _divisor$[ebp+12], ecx
$LN14@fd:
; Line 793
	mov	edx, DWORD PTR _divisor$[ebp]
	xor	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _divisor$[ebp], edx
; Line 795
	mov	eax, DWORD PTR _remainder$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN13@fd
	mov	DWORD PTR _signs1$[ebp], 16777215	; 00ffffffH
$LN13@fd:
; Line 797
	mov	ecx, DWORD PTR _remainder$[ebp]
	xor	ecx, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _remainder$[ebp], ecx
; Line 798
	mov	edx, DWORD PTR _remainder$[ebp+4]
	xor	edx, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _remainder$[ebp+4], edx
; Line 799
	mov	eax, DWORD PTR _remainder$[ebp+8]
	xor	eax, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _remainder$[ebp+8], eax
; Line 800
	mov	ecx, DWORD PTR _remainder$[ebp+12]
	xor	ecx, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _remainder$[ebp+12], ecx
; Line 802
	mov	edx, DWORD PTR _signs1$[ebp]
	xor	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _signs1$[ebp], edx
; Line 804
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN11@fd
; Line 806
	mov	DWORD PTR _beats$[ebp], 144		; 00000090H
; Line 807
	mov	DWORD PTR _remainder$[ebp+16], 0
; Line 808
	mov	DWORD PTR _mantissa_words$[ebp], 6
$LN11@fd:
; Line 811
	mov	ecx, DWORD PTR _beats$[ebp]
	mov	edx, DWORD PTR _beats$[ebp]
	sub	edx, 1
	mov	DWORD PTR _beats$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN10@fd
; Line 813
	lea	eax, DWORD PTR _lookaside$[ebp]
	push	eax
	lea	ecx, DWORD PTR _divisor$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _remainder$[ebp+4]
	push	edx
	push	7
	push	1
	call	_addcarry
	add	esp, 20					; 00000014H
	mov	DWORD PTR _carry$[ebp], eax
; Line 815
	cmp	DWORD PTR _carry$[ebp], 0
	je	SHORT $LN9@fd
; Line 817
	mov	eax, DWORD PTR _lookaside$[ebp]
	mov	DWORD PTR _remainder$[ebp+4], eax
; Line 818
	mov	ecx, DWORD PTR _lookaside$[ebp+4]
	mov	DWORD PTR _remainder$[ebp+8], ecx
; Line 819
	mov	edx, DWORD PTR _lookaside$[ebp+8]
	mov	DWORD PTR _remainder$[ebp+12], edx
; Line 821
	mov	eax, DWORD PTR _psr
	and	eax, 8
	je	SHORT $LN9@fd
; Line 823
	mov	ecx, DWORD PTR _lookaside$[ebp+12]
	mov	DWORD PTR _remainder$[ebp+16], ecx
; Line 824
	mov	edx, DWORD PTR _lookaside$[ebp+16]
	mov	DWORD PTR _remainder$[ebp+20], edx
; Line 825
	mov	eax, DWORD PTR _lookaside$[ebp+20]
	mov	DWORD PTR _remainder$[ebp+24], eax
$LN9@fd:
; Line 829
	lea	ecx, DWORD PTR _reciprocal$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _mantissa_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _carry$[ebp]
	push	eax
	call	_sleft
	add	esp, 12					; 0000000cH
; Line 830
	lea	ecx, DWORD PTR _divisor$[ebp+4]
	push	ecx
	push	7
	push	1
	call	_sright
	add	esp, 12					; 0000000cH
; Line 831
	jmp	$LN11@fd
$LN10@fd:
; Line 833
	mov	edx, DWORD PTR _remainder$[ebp]
	sub	edx, DWORD PTR _divisor$[ebp]
	add	edx, 4194305				; 00400001H
	mov	DWORD PTR _reciprocal$[ebp], edx
; Line 835
	mov	eax, DWORD PTR _reciprocal$[ebp+4]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN7@fd
; Line 838
	jmp	SHORT $LN6@fd
$LN7@fd:
; Line 840
	mov	DWORD PTR _beats$[ebp], 72		; 00000048H
; Line 842
	mov	ecx, DWORD PTR _psr
	and	ecx, 8
	je	SHORT $LN4@fd
	mov	DWORD PTR _beats$[ebp], 144		; 00000090H
$LN4@fd:
; Line 844
	mov	edx, DWORD PTR _beats$[ebp]
	mov	eax, DWORD PTR _beats$[ebp]
	sub	eax, 1
	mov	DWORD PTR _beats$[ebp], eax
	test	edx, edx
	je	SHORT $LN6@fd
; Line 846
	lea	ecx, DWORD PTR _reciprocal$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _mantissa_words$[ebp]
	push	edx
	push	0
	call	_sleft
	add	esp, 12					; 0000000cH
; Line 847
	mov	eax, DWORD PTR _reciprocal$[ebp]
	sub	eax, 1
	mov	DWORD PTR _reciprocal$[ebp], eax
; Line 848
	mov	ecx, DWORD PTR _reciprocal$[ebp+4]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN2@fd
	jmp	SHORT $LN6@fd
$LN2@fd:
; Line 849
	jmp	SHORT $LN4@fd
$LN6@fd:
; Line 852
	mov	edx, DWORD PTR _reciprocal$[ebp]
	and	edx, 8388607				; 007fffffH
	mov	DWORD PTR _reciprocal$[ebp], edx
; Line 854
	mov	eax, DWORD PTR _reciprocal$[ebp]
	xor	eax, DWORD PTR _signs1$[ebp]
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	DWORD PTR __register[ecx*4], eax
; Line 855
	mov	edx, DWORD PTR _reciprocal$[ebp+4]
	xor	edx, DWORD PTR _signs1$[ebp]
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	DWORD PTR __register[eax*4], edx
; Line 856
	mov	ecx, DWORD PTR _reciprocal$[ebp+8]
	xor	ecx, DWORD PTR _signs1$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 6
	mov	DWORD PTR __register[edx*4], ecx
; Line 857
	mov	eax, DWORD PTR _reciprocal$[ebp+12]
	xor	eax, DWORD PTR _signs1$[ebp]
	mov	ecx, DWORD PTR _iselect
	or	ecx, 7
	mov	DWORD PTR __register[ecx*4], eax
; Line 859
	mov	edx, DWORD PTR _psr
	and	edx, 8
	je	SHORT $LN19@fd
; Line 861
	mov	eax, DWORD PTR _reciprocal$[ebp+16]
	xor	eax, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _reciprocal$[ebp+16], eax
; Line 862
	mov	ecx, DWORD PTR _reciprocal$[ebp+20]
	xor	ecx, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _reciprocal$[ebp+20], ecx
; Line 863
	mov	edx, DWORD PTR _reciprocal$[ebp+24]
	xor	edx, DWORD PTR _signs1$[ebp]
	mov	DWORD PTR _reciprocal$[ebp+24], edx
; Line 864
	lea	eax, DWORD PTR _reciprocal$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _reciprocal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _signs1$[ebp]
	push	edx
	call	_store_minor_result
	add	esp, 12					; 0000000cH
$LN19@fd:
; Line 866
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fd	ENDP
; Function compile flags: /Odtp
_carry$ = -8						; size = 4
_index$ = -4						; size = 4
_startvalue$ = 8					; size = 4
_words$ = 12						; size = 4
_data1$ = 16						; size = 4
_data2$ = 20						; size = 4
_giving$ = 24						; size = 4
_addcarry PROC
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 137
	mov	eax, DWORD PTR _startvalue$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _words$[ebp]
	mov	DWORD PTR _index$[ebp], ecx
$LN2@addcarry:
; Line 140
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax
	test	edx, edx
	je	SHORT $LN1@addcarry
; Line 142
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _data1$[ebp]
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 143
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _data2$[ebp]
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 144
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _giving$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 145
	mov	ecx, DWORD PTR _carry$[ebp]
	sar	ecx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], ecx
; Line 146
	jmp	SHORT $LN2@addcarry
$LN1@addcarry:
; Line 148
	mov	eax, DWORD PTR _carry$[ebp]
; Line 149
	mov	esp, ebp
	pop	ebp
	ret	0
_addcarry ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_fpx
EXTRN	_burst_read2:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_signs$ = -28						; size = 4
_extrascale$ = -24					; size = 4
_temp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ea$ = 8						; size = 4
__stack_top$ = 12					; size = 4
_fpx	PROC
; Line 1002
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1007
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	call	_burst_read2
	add	esp, 8
; Line 1008
	mov	edx, DWORD PTR _temp$[ebp]
	and	edx, 8388608				; 00800000H
	neg	edx
	sbb	edx, edx
	and	edx, 4193280				; 003ffc00H
	mov	DWORD PTR _extrascale$[ebp], edx
; Line 1009
	mov	eax, DWORD PTR _temp$[ebp]
	and	eax, 8388608				; 00800000H
	neg	eax
	sbb	eax, eax
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], eax
; Line 1011
	mov	ecx, DWORD PTR _temp$[ebp]
	xor	ecx, DWORD PTR _signs$[ebp]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN3@fpx
; Line 1013
	mov	edx, DWORD PTR _temp$[ebp]
	xor	edx, DWORD PTR _signs$[ebp]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN2@fpx
	jmp	SHORT $LN3@fpx
$LN2@fpx:
; Line 1016
	mov	eax, DWORD PTR _extrascale$[ebp]
	xor	eax, 4193280				; 003ffc00H
	mov	DWORD PTR _extrascale$[ebp], eax
$LN3@fpx:
; Line 1019
	mov	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _temp$[ebp+12], ecx
; Line 1020
	mov	edx, DWORD PTR _temp$[ebp+4]
	shl	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _signs$[ebp]
	and	eax, 4095				; 00000fffH
	or	edx, eax
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp+8], edx
; Line 1021
	mov	ecx, DWORD PTR _temp$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _temp$[ebp+4]
	shr	edx, 12					; 0000000cH
	or	ecx, edx
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp+4], ecx
; Line 1024
	mov	eax, DWORD PTR _temp$[ebp]
	and	eax, 12582912				; 00c00000H
	mov	ecx, DWORD PTR _temp$[ebp]
	shr	ecx, 12					; 0000000cH
	and	ecx, 1023				; 000003ffH
	or	eax, ecx
	or	eax, DWORD PTR _extrascale$[ebp]
	mov	DWORD PTR _temp$[ebp], eax
; Line 1026
	mov	edx, DWORD PTR __stack_top$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1027
	mov	ecx, DWORD PTR __stack_top$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [ecx+4], edx
; Line 1028
	mov	eax, DWORD PTR __stack_top$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 1029
	mov	edx, DWORD PTR __stack_top$[ebp]
	mov	eax, DWORD PTR _temp$[ebp+12]
	mov	DWORD PTR [edx+12], eax
; Line 1030
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fpx	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_fpp
EXTRN	_burst_write2:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_ea$ = 8						; size = 4
__stack_top$ = 12					; size = 4
_fpp	PROC
; Line 1058
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1062
	mov	eax, DWORD PTR __stack_top$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 1063
	mov	edx, DWORD PTR __stack_top$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _temp$[ebp+4], eax
; Line 1064
	mov	ecx, DWORD PTR __stack_top$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _temp$[ebp+8], edx
; Line 1068
	mov	eax, DWORD PTR _temp$[ebp]
	and	eax, 12582912				; 00c00000H
	mov	ecx, DWORD PTR _temp$[ebp]
	and	ecx, 1023				; 000003ffH
	shl	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	shr	edx, 12					; 0000000cH
	or	eax, edx
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp], eax
; Line 1070
	mov	eax, DWORD PTR _temp$[ebp+4]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _temp$[ebp+8]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp+4], eax
; Line 1072
	mov	edx, DWORD PTR _ea$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_burst_write2
	add	esp, 8
; Line 1073
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fpp	ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Smaragd\rta\engine.rta\alu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sar
EXTRN	__register:BYTE
EXTRN	_iselect:DWORD
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_sar	PROC
; File c:\users\smaragd\rta\engine.rta\alu.c
; Line 114
	push	ebp
	mov	ebp, esp
; Line 115
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	edx, DWORD PTR __register[eax*4]
	mov	ecx, DWORD PTR _ea$[ebp]
	sar	edx, cl
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	DWORD PTR __register[eax*4], edx
; Line 116
	pop	ebp
	ret	0
_sar	ENDP
_TEXT	ENDS
PUBLIC	_sbr
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_sbr	PROC
; Line 119
	push	ebp
	mov	ebp, esp
; Line 120
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	edx, DWORD PTR __register[eax*4]
	mov	ecx, DWORD PTR _ea$[ebp]
	sar	edx, cl
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	DWORD PTR __register[eax*4], edx
; Line 121
	pop	ebp
	ret	0
_sbr	ENDP
_TEXT	ENDS
PUBLIC	_dsr
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_dsr	PROC
; Line 124
	push	ebp
	mov	ebp, esp
; Line 125
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _ea$[ebp]
	push	edx
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 126
	pop	ebp
	ret	0
_dsr	ENDP
; Function compile flags: /Odtp
_reverse_bits$ = -24					; size = 4
_carry$ = -20						; size = 4
_transition$ = -16					; size = 4
_index$ = -12						; size = 4
_offset_word$ = -8					; size = 4
_offset_bits$ = -4					; size = 4
_positions$ = 8						; size = 4
_words$ = 12						; size = 4
_fill$ = 16						; size = 4
_target$ = 20						; size = 4
_gshiftr PROC
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 59
	mov	eax, DWORD PTR _positions$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	edx, DWORD PTR _words$[ebp]
	sub	edx, eax
	sub	edx, 1
	mov	DWORD PTR _offset_word$[ebp], edx
; Line 60
	mov	eax, DWORD PTR _positions$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR _offset_bits$[ebp], edx
; Line 61
	mov	edx, 24					; 00000018H
	sub	edx, DWORD PTR _offset_bits$[ebp]
	mov	DWORD PTR _reverse_bits$[ebp], edx
; Line 63
	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR _transition$[ebp], eax
; Line 64
	mov	DWORD PTR _carry$[ebp], 0
; Line 65
	mov	ecx, DWORD PTR _words$[ebp]
	mov	DWORD PTR _index$[ebp], ecx
; Line 68
	cmp	DWORD PTR _offset_word$[ebp], 0
	jge	SHORT $LN6@gshiftr
	jmp	SHORT $LN4@gshiftr
$LN6@gshiftr:
; Line 71
	mov	edx, DWORD PTR _offset_word$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _transition$[ebp], ecx
	mov	edx, DWORD PTR _offset_word$[ebp]
	sub	edx, 1
	mov	DWORD PTR _offset_word$[ebp], edx
$LN4@gshiftr:
; Line 73
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
	test	eax, eax
	je	SHORT $LN7@gshiftr
; Line 75
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR _offset_bits$[ebp]
	sar	edx, cl
	mov	DWORD PTR _carry$[ebp], edx
; Line 76
	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR _transition$[ebp], eax
; Line 78
	cmp	DWORD PTR _offset_word$[ebp], 0
	jge	SHORT $LN2@gshiftr
	jmp	SHORT $LN1@gshiftr
$LN2@gshiftr:
; Line 81
	mov	ecx, DWORD PTR _offset_word$[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _transition$[ebp], eax
	mov	ecx, DWORD PTR _offset_word$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _offset_word$[ebp], ecx
$LN1@gshiftr:
; Line 83
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR _reverse_bits$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 84
	mov	eax, DWORD PTR _carry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 85
	jmp	SHORT $LN4@gshiftr
$LN7@gshiftr:
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
_gshiftr ENDP
_TEXT	ENDS
PUBLIC	_sal
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_sal	PROC
; Line 130
	push	ebp
	mov	ebp, esp
; Line 131
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	edx, DWORD PTR __register[eax*4]
	mov	ecx, DWORD PTR _ea$[ebp]
	shl	edx, cl
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	DWORD PTR __register[eax*4], edx
; Line 132
	pop	ebp
	ret	0
_sal	ENDP
_TEXT	ENDS
PUBLIC	_sbl
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_sbl	PROC
; Line 135
	push	ebp
	mov	ebp, esp
; Line 136
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	edx, DWORD PTR __register[eax*4]
	mov	ecx, DWORD PTR _ea$[ebp]
	shl	edx, cl
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	DWORD PTR __register[eax*4], edx
; Line 137
	pop	ebp
	ret	0
_sbl	ENDP
_TEXT	ENDS
PUBLIC	_dsl
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_dsl	PROC
; Line 140
	push	ebp
	mov	ebp, esp
; Line 141
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _ea$[ebp]
	push	edx
	call	_gshiftl
	add	esp, 16					; 00000010H
; Line 142
	pop	ebp
	ret	0
_dsl	ENDP
; Function compile flags: /Odtp
_reverse_bits$ = -24					; size = 4
_bits_offset$ = -20					; size = 4
_carry$ = -16						; size = 4
_word_offset$ = -12					; size = 4
_index$ = -8						; size = 4
_transition$ = -4					; size = 4
_positions$ = 8						; size = 4
_words$ = 12						; size = 4
_fill$ = 16						; size = 4
_target$ = 20						; size = 4
_gshiftl PROC
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 90
	mov	eax, DWORD PTR _positions$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR _word_offset$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _positions$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR _bits_offset$[ebp], edx
; Line 92
	mov	edx, 24					; 00000018H
	sub	edx, DWORD PTR _bits_offset$[ebp]
	mov	DWORD PTR _reverse_bits$[ebp], edx
; Line 94
	mov	DWORD PTR _index$[ebp], 0
; Line 95
	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR _transition$[ebp], eax
; Line 96
	mov	DWORD PTR _carry$[ebp], 0
; Line 99
	mov	ecx, DWORD PTR _word_offset$[ebp]
	cmp	ecx, DWORD PTR _words$[ebp]
	jge	SHORT $LN3@gshiftl
	mov	edx, DWORD PTR _word_offset$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _transition$[ebp], ecx
	mov	edx, DWORD PTR _word_offset$[ebp]
	add	edx, 1
	mov	DWORD PTR _word_offset$[ebp], edx
$LN3@gshiftl:
; Line 101
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _words$[ebp]
	jge	SHORT $LN5@gshiftl
; Line 103
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR _bits_offset$[ebp]
	shl	edx, cl
	mov	DWORD PTR _carry$[ebp], edx
; Line 104
	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR _transition$[ebp], eax
; Line 105
	mov	ecx, DWORD PTR _word_offset$[ebp]
	cmp	ecx, DWORD PTR _words$[ebp]
	jge	SHORT $LN1@gshiftl
	mov	edx, DWORD PTR _word_offset$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _transition$[ebp], ecx
	mov	edx, DWORD PTR _word_offset$[ebp]
	add	edx, 1
	mov	DWORD PTR _word_offset$[ebp], edx
$LN1@gshiftl:
; Line 106
	mov	eax, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR _reverse_bits$[ebp]
	sar	eax, cl
	or	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 108
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
; Line 109
	jmp	SHORT $LN3@gshiftl
$LN5@gshiftl:
; Line 110
	mov	esp, ebp
	pop	ebp
	ret	0
_gshiftl ENDP
_TEXT	ENDS
PUBLIC	_rar
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_rar	PROC
; Line 146
	push	ebp
	mov	ebp, esp
; Line 147
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR __register[edx*4]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 148
	pop	ebp
	ret	0
_rar	ENDP
_TEXT	ENDS
PUBLIC	_rbr
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_rbr	PROC
; Line 151
	push	ebp
	mov	ebp, esp
; Line 152
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 153
	pop	ebp
	ret	0
_rbr	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_drr
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_temp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ea$ = 8						; size = 4
_drr	PROC
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 157
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _temp$[ebp+4], eax
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _temp$[ebp+8], edx
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp+12], ecx
; Line 159
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ea$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	edx
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 160
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR __register[edx*4], eax
; Line 161
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	edx, DWORD PTR _temp$[ebp+12]
	mov	DWORD PTR __register[ecx*4], edx
; Line 162
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_drr	ENDP
_TEXT	ENDS
PUBLIC	_ral
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_ral	PROC
; Line 166
	push	ebp
	mov	ebp, esp
; Line 167
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR __register[edx*4]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	call	_gshiftl
	add	esp, 16					; 00000010H
; Line 168
	pop	ebp
	ret	0
_ral	ENDP
_TEXT	ENDS
PUBLIC	_rbl
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ea$ = 8						; size = 4
_rbl	PROC
; Line 171
	push	ebp
	mov	ebp, esp
; Line 172
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ea$[ebp]
	push	ecx
	call	_gshiftl
	add	esp, 16					; 00000010H
; Line 173
	pop	ebp
	ret	0
_rbl	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_drl
; Function compile flags: /Odtp
_TEXT	SEGMENT
_temp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ea$ = 8						; size = 4
_drl	PROC
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 177
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _temp$[ebp+4], eax
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _temp$[ebp+8], edx
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp+12], ecx
; Line 179
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ea$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	edx
	call	_gshiftl
	add	esp, 16					; 00000010H
; Line 180
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR __register[edx*4], eax
; Line 181
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR __register[ecx*4], edx
; Line 182
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_drl	ENDP
_TEXT	ENDS
PUBLIC	_saa
; Function compile flags: /Odtp
_TEXT	SEGMENT
_signs$ = -4						; size = 4
_ea$ = 8						; size = 4
_saa	PROC
; Line 186
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 187
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	sar	ecx, 23					; 00000017H
	and	ecx, 1
	xor	edx, edx
	sub	edx, ecx
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _signs$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 190
	mov	esp, ebp
	pop	ebp
	ret	0
_saa	ENDP
_TEXT	ENDS
PUBLIC	_sba
; Function compile flags: /Odtp
_TEXT	SEGMENT
_signs$ = -4						; size = 4
_ea$ = 8						; size = 4
_sba	PROC
; Line 193
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 194
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	sar	ecx, 23					; 00000017H
	and	ecx, 1
	xor	edx, edx
	sub	edx, ecx
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], edx
; Line 196
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _signs$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 197
	mov	esp, ebp
	pop	ebp
	ret	0
_sba	ENDP
_TEXT	ENDS
PUBLIC	_dsa
; Function compile flags: /Odtp
_TEXT	SEGMENT
_signs$ = -4						; size = 4
_ea$ = 8						; size = 4
_dsa	PROC
; Line 200
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 201
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	sar	ecx, 23					; 00000017H
	and	ecx, 1
	xor	edx, edx
	sub	edx, ecx
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], edx
; Line 203
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	lea	ecx, DWORD PTR __register[eax*4]
	push	ecx
	mov	edx, DWORD PTR _signs$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_gshiftr
	add	esp, 16					; 00000010H
; Line 204
	mov	esp, ebp
	pop	ebp
	ret	0
_dsa	ENDP
_TEXT	ENDS
PUBLIC	_lsc
EXTRN	_operand_read:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = -16						; size = 4
_sign$ = -12						; size = 4
_cycle$ = -8						; size = 4
_final_count$ = -4					; size = 4
_ea$ = 8						; size = 4
_lsc	PROC
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 209
	push	7
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	call	_operand_read
	add	esp, 8
	mov	DWORD PTR _operand$[ebp], eax
; Line 210
	mov	DWORD PTR _final_count$[ebp], 0
; Line 211
	mov	ecx, DWORD PTR _operand$[ebp]
	and	ecx, 8388608				; 00800000H
	mov	DWORD PTR _sign$[ebp], ecx
; Line 212
	mov	edx, DWORD PTR _operand$[ebp]
	sar	edx, 23					; 00000017H
	mov	DWORD PTR _cycle$[ebp], edx
$LN3@lsc:
; Line 214
	cmp	DWORD PTR _final_count$[ebp], 24	; 00000018H
	jge	SHORT $LN2@lsc
; Line 216
	mov	eax, DWORD PTR _operand$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN1@lsc
	jmp	SHORT $LN2@lsc
$LN1@lsc:
; Line 217
	mov	ecx, DWORD PTR _final_count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _final_count$[ebp], ecx
; Line 218
	mov	edx, DWORD PTR _operand$[ebp]
	shl	edx, 1
	mov	DWORD PTR _operand$[ebp], edx
; Line 219
	mov	eax, DWORD PTR _operand$[ebp]
	or	eax, DWORD PTR _cycle$[ebp]
	mov	DWORD PTR _operand$[ebp], eax
; Line 220
	jmp	SHORT $LN3@lsc
$LN2@lsc:
; Line 222
	mov	ecx, DWORD PTR _operand$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 223
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR _final_count$[ebp]
	mov	DWORD PTR __register[eax*4], ecx
; Line 224
	mov	esp, ebp
	pop	ebp
	ret	0
_lsc	ENDP
_TEXT	ENDS
PUBLIC	_da
EXTRN	_psr:DWORD
EXTRN	_burst_read2:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = -12						; size = 8
_carry$ = -4						; size = 4
_ea$ = 8						; size = 4
_da	PROC
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 231
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	lea	ecx, DWORD PTR _operand$[ebp]
	push	ecx
	call	_burst_read2
	add	esp, 8
; Line 237
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR _operand$[ebp+4]
	add	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 238
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 239
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 240
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 241
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 242
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 243
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 244
	mov	ecx, DWORD PTR _psr
	and	ecx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, ecx
; Line 245
	mov	edx, DWORD PTR _psr
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, edx
; Line 250
	mov	esp, ebp
	pop	ebp
	ret	0
_da	ENDP
_TEXT	ENDS
PUBLIC	_dan
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = -12						; size = 8
_carry$ = -4						; size = 4
_ea$ = 8						; size = 4
_dan	PROC
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 255
	mov	DWORD PTR _carry$[ebp], 1
; Line 257
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	lea	ecx, DWORD PTR _operand$[ebp]
	push	ecx
	call	_burst_read2
	add	esp, 8
; Line 263
	mov	edx, DWORD PTR _operand$[ebp]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _operand$[ebp], edx
; Line 264
	mov	eax, DWORD PTR _operand$[ebp+4]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _operand$[ebp+4], eax
; Line 266
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 267
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR _operand$[ebp+4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 268
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 269
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 270
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR __register[ecx*4]
	mov	DWORD PTR _carry$[ebp], edx
; Line 271
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 273
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 274
	mov	ecx, DWORD PTR _psr
	and	ecx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, ecx
; Line 275
	mov	edx, DWORD PTR _psr
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, edx
; Line 280
	mov	esp, ebp
	pop	ebp
	ret	0
_dan	ENDP
_TEXT	ENDS
PUBLIC	_dlsc
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = -16						; size = 8
_sign$ = -8						; size = 4
_final_count$ = -4					; size = 4
_ea$ = 8						; size = 4
_dlsc	PROC
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 285
	mov	DWORD PTR _final_count$[ebp], 0
; Line 288
	mov	eax, DWORD PTR _ea$[ebp]
	push	eax
	lea	ecx, DWORD PTR _operand$[ebp]
	push	ecx
	call	_burst_read2
	add	esp, 8
; Line 289
	mov	edx, DWORD PTR _operand$[ebp]
	and	edx, 8388608				; 00800000H
	mov	DWORD PTR _sign$[ebp], edx
$LN3@dlsc:
; Line 291
	cmp	DWORD PTR _final_count$[ebp], 48	; 00000030H
	jge	SHORT $LN2@dlsc
; Line 293
	mov	eax, DWORD PTR _operand$[ebp]
	xor	eax, DWORD PTR _sign$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN1@dlsc
	jmp	SHORT $LN2@dlsc
$LN1@dlsc:
; Line 294
	mov	ecx, DWORD PTR _final_count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _final_count$[ebp], ecx
; Line 295
	lea	edx, DWORD PTR _operand$[ebp]
	push	edx
	mov	eax, DWORD PTR _sign$[ebp]
	push	eax
	push	2
	push	1
	call	_gshiftl
	add	esp, 16					; 00000010H
; Line 296
	jmp	SHORT $LN3@dlsc
$LN2@dlsc:
; Line 298
	mov	ecx, DWORD PTR _iselect
	or	ecx, 4
	mov	edx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR __register[ecx*4], edx
; Line 299
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR _operand$[ebp+4]
	mov	DWORD PTR __register[eax*4], ecx
; Line 300
	mov	edx, DWORD PTR _iselect
	or	edx, 6
	mov	eax, DWORD PTR _final_count$[ebp]
	mov	DWORD PTR __register[edx*4], eax
; Line 301
	mov	esp, ebp
	pop	ebp
	ret	0
_dlsc	ENDP
_TEXT	ENDS
PUBLIC	_or
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_or	PROC
; Line 305
	push	ebp
	mov	ebp, esp
; Line 306
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	or	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 307
	pop	ebp
	ret	0
_or	ENDP
_TEXT	ENDS
PUBLIC	_orb
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_orb	PROC
; Line 310
	push	ebp
	mov	ebp, esp
; Line 311
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	or	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 312
	pop	ebp
	ret	0
_orb	ENDP
_TEXT	ENDS
PUBLIC	_and
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_and	PROC
; Line 315
	push	ebp
	mov	ebp, esp
; Line 316
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	and	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 317
	pop	ebp
	ret	0
_and	ENDP
_TEXT	ENDS
PUBLIC	_andb
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_andb	PROC
; Line 320
	push	ebp
	mov	ebp, esp
; Line 321
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	and	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 322
	pop	ebp
	ret	0
_andb	ENDP
_TEXT	ENDS
PUBLIC	_xor
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_xor	PROC
; Line 325
	push	ebp
	mov	ebp, esp
; Line 326
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	xor	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 327
	pop	ebp
	ret	0
_xor	ENDP
_TEXT	ENDS
PUBLIC	_xorb
; Function compile flags: /Odtp
_TEXT	SEGMENT
_operand$ = 8						; size = 4
_xorb	PROC
; Line 330
	push	ebp
	mov	ebp, esp
; Line 331
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	xor	ecx, DWORD PTR _operand$[ebp]
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 332
	pop	ebp
	ret	0
_xorb	ENDP
_TEXT	ENDS
PUBLIC	_aa
; Function compile flags: /Odtp
_TEXT	SEGMENT
_carry$ = -4						; size = 4
_operand$ = 8						; size = 4
_aa	PROC
; Line 361
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 362
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	add	ecx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 364
	mov	edx, DWORD PTR _carry$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	DWORD PTR __register[eax*4], edx
; Line 365
	mov	ecx, DWORD PTR _carry$[ebp]
	sar	ecx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], ecx
; Line 366
	mov	edx, DWORD PTR _psr
	and	edx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, edx
; Line 367
	mov	eax, DWORD PTR _psr
	or	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, eax
; Line 368
	mov	esp, ebp
	pop	ebp
	ret	0
_aa	ENDP
_TEXT	ENDS
PUBLIC	_ab
; Function compile flags: /Odtp
_TEXT	SEGMENT
_carry$ = -4						; size = 4
_operand$ = 8						; size = 4
_ab	PROC
; Line 371
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 372
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	add	ecx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 374
	mov	edx, DWORD PTR _carry$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	DWORD PTR __register[eax*4], edx
; Line 375
	mov	ecx, DWORD PTR _carry$[ebp]
	sar	ecx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], ecx
; Line 376
	mov	edx, DWORD PTR _psr
	and	edx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, edx
; Line 377
	mov	eax, DWORD PTR _psr
	or	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, eax
; Line 378
	mov	esp, ebp
	pop	ebp
	ret	0
_ab	ENDP
_TEXT	ENDS
PUBLIC	_ana
; Function compile flags: /Odtp
_TEXT	SEGMENT
_carry$ = -4						; size = 4
_operand$ = 8						; size = 4
_ana	PROC
; Line 381
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 382
	mov	eax, DWORD PTR _operand$[ebp]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _carry$[ebp], eax
; Line 384
	mov	ecx, DWORD PTR _carry$[ebp]
	add	ecx, 1
	mov	DWORD PTR _carry$[ebp], ecx
; Line 385
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 386
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 388
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 389
	mov	ecx, DWORD PTR _psr
	and	ecx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, ecx
; Line 390
	mov	edx, DWORD PTR _psr
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, edx
; Line 391
	mov	esp, ebp
	pop	ebp
	ret	0
_ana	ENDP
_TEXT	ENDS
PUBLIC	_anb
; Function compile flags: /Odtp
_TEXT	SEGMENT
_carry$ = -4						; size = 4
_operand$ = 8						; size = 4
_anb	PROC
; Line 394
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 395
	mov	eax, DWORD PTR _operand$[ebp]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _carry$[ebp], eax
; Line 397
	mov	ecx, DWORD PTR _carry$[ebp]
	add	ecx, 1
	mov	DWORD PTR _carry$[ebp], ecx
; Line 398
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 399
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 401
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 402
	mov	ecx, DWORD PTR _psr
	and	ecx, 16777214				; 00fffffeH
	mov	DWORD PTR _psr, ecx
; Line 403
	mov	edx, DWORD PTR _psr
	or	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _psr, edx
; Line 404
	mov	esp, ebp
	pop	ebp
	ret	0
_anb	ENDP
_TEXT	ENDS
PUBLIC	_m
; Function compile flags: /Odtp
_TEXT	SEGMENT
_beats$ = -28						; size = 4
_signs$ = -24						; size = 4
_product$ = -20						; size = 8
_carry$ = -12						; size = 4
_temp$ = -8						; size = 8
_operand$ = 8						; size = 4
_m	PROC
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 408
	mov	DWORD PTR _product$[ebp], 0
	mov	DWORD PTR _product$[ebp+4], 0
; Line 409
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _temp$[ebp+4], edx
; Line 410
	mov	DWORD PTR _signs$[ebp], 0
; Line 411
	mov	DWORD PTR _beats$[ebp], 24		; 00000018H
; Line 412
	mov	DWORD PTR _carry$[ebp], 0
; Line 414
	mov	eax, DWORD PTR _temp$[ebp]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN6@m
; Line 416
	mov	DWORD PTR _signs$[ebp], 16777215	; 00ffffffH
; Line 417
	mov	ecx, DWORD PTR _temp$[ebp]
	xor	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 418
	mov	edx, DWORD PTR _temp$[ebp]
	add	edx, 1
	mov	DWORD PTR _temp$[ebp], edx
$LN6@m:
; Line 421
	mov	eax, DWORD PTR _temp$[ebp+4]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN4@m
; Line 423
	mov	ecx, DWORD PTR _signs$[ebp]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], ecx
; Line 424
	mov	edx, DWORD PTR _temp$[ebp+4]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp+4], edx
; Line 425
	mov	eax, DWORD PTR _temp$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _temp$[ebp+4], eax
$LN4@m:
; Line 428
	mov	ecx, DWORD PTR _beats$[ebp]
	mov	edx, DWORD PTR _beats$[ebp]
	sub	edx, 1
	mov	DWORD PTR _beats$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN3@m
; Line 430
	mov	eax, DWORD PTR _product$[ebp]
	shl	eax, 1
	mov	DWORD PTR _product$[ebp], eax
; Line 431
	mov	ecx, DWORD PTR _product$[ebp+4]
	sar	ecx, 23					; 00000017H
	or	ecx, DWORD PTR _product$[ebp]
	mov	DWORD PTR _product$[ebp], ecx
; Line 432
	mov	edx, DWORD PTR _product$[ebp+4]
	shl	edx, 1
	mov	DWORD PTR _product$[ebp+4], edx
; Line 433
	mov	eax, DWORD PTR _product$[ebp+4]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _product$[ebp+4], eax
; Line 435
	mov	ecx, DWORD PTR _temp$[ebp+4]
	shl	ecx, 1
	mov	DWORD PTR _temp$[ebp+4], ecx
; Line 437
	mov	edx, DWORD PTR _temp$[ebp+4]
	and	edx, 16777216				; 01000000H
	je	SHORT $LN2@m
; Line 439
	mov	eax, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR _product$[ebp+4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 440
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _product$[ebp+4], ecx
; Line 441
	mov	edx, DWORD PTR _carry$[ebp]
	sar	edx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], edx
; Line 442
	mov	eax, DWORD PTR _product$[ebp]
	add	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp], eax
$LN2@m:
; Line 444
	jmp	SHORT $LN4@m
$LN3@m:
; Line 446
	cmp	DWORD PTR _signs$[ebp], 0
	je	SHORT $LN1@m
; Line 448
	mov	DWORD PTR _carry$[ebp], 1
; Line 449
	mov	ecx, DWORD PTR _product$[ebp+4]
	xor	ecx, 16777215				; 00ffffffH
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 450
	mov	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp+4], edx
; Line 451
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 452
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 1
	mov	DWORD PTR _carry$[ebp], ecx
; Line 453
	mov	edx, DWORD PTR _product$[ebp]
	xor	edx, 16777215				; 00ffffffH
	add	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 454
	mov	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp], eax
$LN1@m:
; Line 457
	mov	ecx, DWORD PTR _product$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 458
	mov	eax, DWORD PTR _product$[ebp+4]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	DWORD PTR __register[ecx*4], eax
; Line 459
	mov	esp, ebp
	pop	ebp
	ret	0
_m	ENDP
_TEXT	ENDS
PUBLIC	_mf
; Function compile flags: /Odtp
_TEXT	SEGMENT
_beats$ = -28						; size = 4
_signs$ = -24						; size = 4
_product$ = -20						; size = 8
_carry$ = -12						; size = 4
_temp$ = -8						; size = 8
_operand$ = 8						; size = 4
_mf	PROC
; Line 479
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 480
	mov	DWORD PTR _product$[ebp], 0
	mov	DWORD PTR _product$[ebp+4], 0
; Line 481
	mov	eax, DWORD PTR _iselect
	or	eax, 5
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _temp$[ebp+4], edx
; Line 482
	mov	DWORD PTR _signs$[ebp], 0
; Line 483
	mov	DWORD PTR _beats$[ebp], 24		; 00000018H
; Line 484
	mov	DWORD PTR _carry$[ebp], 0
; Line 486
	mov	eax, DWORD PTR _temp$[ebp+4]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN4@mf
; Line 488
	mov	ecx, DWORD PTR _signs$[ebp]
	xor	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], ecx
; Line 489
	mov	edx, DWORD PTR _temp$[ebp+4]
	xor	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _temp$[ebp+4], edx
; Line 490
	mov	eax, DWORD PTR _temp$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _temp$[ebp+4], eax
$LN4@mf:
; Line 493
	mov	ecx, DWORD PTR _beats$[ebp]
	mov	edx, DWORD PTR _beats$[ebp]
	sub	edx, 1
	mov	DWORD PTR _beats$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN3@mf
; Line 495
	mov	eax, DWORD PTR _product$[ebp]
	shl	eax, 1
	mov	DWORD PTR _product$[ebp], eax
; Line 496
	mov	ecx, DWORD PTR _product$[ebp+4]
	sar	ecx, 23					; 00000017H
	or	ecx, DWORD PTR _product$[ebp]
	mov	DWORD PTR _product$[ebp], ecx
; Line 497
	mov	edx, DWORD PTR _product$[ebp+4]
	shl	edx, 1
	mov	DWORD PTR _product$[ebp+4], edx
; Line 498
	mov	eax, DWORD PTR _product$[ebp+4]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _product$[ebp+4], eax
; Line 500
	mov	ecx, DWORD PTR _temp$[ebp+4]
	shl	ecx, 1
	mov	DWORD PTR _temp$[ebp+4], ecx
; Line 502
	mov	edx, DWORD PTR _temp$[ebp+4]
	and	edx, 16777216				; 01000000H
	je	SHORT $LN2@mf
; Line 504
	mov	eax, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR _product$[ebp+4]
	mov	DWORD PTR _carry$[ebp], eax
; Line 505
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _product$[ebp+4], ecx
; Line 506
	mov	edx, DWORD PTR _carry$[ebp]
	sar	edx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], edx
; Line 507
	mov	eax, DWORD PTR _product$[ebp]
	add	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp], eax
$LN2@mf:
; Line 509
	jmp	SHORT $LN4@mf
$LN3@mf:
; Line 511
	cmp	DWORD PTR _signs$[ebp], 0
	je	SHORT $LN1@mf
; Line 513
	mov	DWORD PTR _carry$[ebp], 1
; Line 514
	mov	ecx, DWORD PTR _product$[ebp+4]
	xor	ecx, 16777215				; 00ffffffH
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 515
	mov	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp+4], edx
; Line 516
	mov	eax, DWORD PTR _carry$[ebp]
	sar	eax, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], eax
; Line 517
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 1
	mov	DWORD PTR _carry$[ebp], ecx
; Line 518
	mov	edx, DWORD PTR _product$[ebp]
	xor	edx, 16777215				; 00ffffffH
	add	edx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 519
	mov	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _product$[ebp], eax
$LN1@mf:
; Line 522
	mov	ecx, DWORD PTR _product$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 4
	mov	DWORD PTR __register[edx*4], ecx
; Line 523
	mov	eax, DWORD PTR _product$[ebp+4]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _iselect
	or	ecx, 5
	mov	DWORD PTR __register[ecx*4], eax
; Line 524
	mov	esp, ebp
	pop	ebp
	ret	0
_mf	ENDP
_TEXT	ENDS
PUBLIC	_d
; Function compile flags: /Odtp
_TEXT	SEGMENT
_beats$ = -44						; size = 4
_lookaside$ = -40					; size = 4
_signs$ = -36						; size = 4
_carry$ = -32						; size = 4
_quotient$ = -28					; size = 4
_upper$ = -24						; size = 4
_divisor$ = -20						; size = 8
_signs2$ = -12						; size = 4
_dividend$ = -8						; size = 8
_operand$ = 8						; size = 4
_d	PROC
; Line 582
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
; Line 583
	mov	DWORD PTR _quotient$[ebp], 0
; Line 584
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	ecx, DWORD PTR __register[eax*4]
	mov	DWORD PTR _dividend$[ebp], ecx
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	eax, DWORD PTR __register[edx*4]
	mov	DWORD PTR _dividend$[ebp+4], eax
; Line 585
	mov	ecx, DWORD PTR _operand$[ebp]
	mov	DWORD PTR _divisor$[ebp], ecx
	mov	DWORD PTR _divisor$[ebp+4], 16777215	; 00ffffffH
; Line 587
	mov	edx, DWORD PTR _dividend$[ebp]
	sar	edx, 23					; 00000017H
	and	edx, 1
	xor	eax, eax
	sub	eax, edx
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _signs$[ebp], eax
; Line 588
	mov	ecx, DWORD PTR _divisor$[ebp]
	sar	ecx, 23					; 00000017H
	and	ecx, 1
	xor	edx, edx
	sub	edx, ecx
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _signs2$[ebp], edx
; Line 590
	mov	DWORD PTR _beats$[ebp], 24		; 00000018H
; Line 592
	mov	DWORD PTR _carry$[ebp], 1
; Line 593
	mov	DWORD PTR _upper$[ebp], 0
; Line 596
	cmp	DWORD PTR _signs$[ebp], 0
	je	SHORT $LN11@d
; Line 598
	mov	eax, DWORD PTR _dividend$[ebp+4]
	xor	eax, 16777215				; 00ffffffH
	add	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 599
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _dividend$[ebp+4], ecx
; Line 600
	mov	edx, DWORD PTR _carry$[ebp]
	sar	edx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], edx
; Line 601
	mov	eax, DWORD PTR _dividend$[ebp]
	xor	eax, 16777215				; 00ffffffH
	add	eax, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 602
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _dividend$[ebp], ecx
$LN11@d:
; Line 605
	cmp	DWORD PTR _signs2$[ebp], 0
	je	SHORT $LN10@d
	mov	edx, DWORD PTR _divisor$[ebp]
	sub	edx, 1
	mov	DWORD PTR _divisor$[ebp], edx
	jmp	SHORT $LN8@d
$LN10@d:
; Line 606
	mov	eax, DWORD PTR _divisor$[ebp]
	xor	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _divisor$[ebp], eax
$LN8@d:
; Line 608
	mov	ecx, DWORD PTR _divisor$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN5@d
; Line 610
	cmp	DWORD PTR _divisor$[ebp], 16777215	; 00ffffffH
	jne	SHORT $LN6@d
	jmp	SHORT $LN5@d
$LN6@d:
; Line 611
	mov	edx, DWORD PTR _beats$[ebp]
	add	edx, 1
	mov	DWORD PTR _beats$[ebp], edx
; Line 612
	mov	eax, DWORD PTR _divisor$[ebp]
	shl	eax, 1
	mov	DWORD PTR _divisor$[ebp], eax
; Line 613
	mov	ecx, DWORD PTR _divisor$[ebp]
	or	ecx, 1
	mov	DWORD PTR _divisor$[ebp], ecx
; Line 614
	mov	edx, DWORD PTR _divisor$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _divisor$[ebp], edx
; Line 615
	jmp	SHORT $LN8@d
$LN5@d:
; Line 617
	mov	eax, DWORD PTR _beats$[ebp]
	mov	ecx, DWORD PTR _beats$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _beats$[ebp], ecx
	test	eax, eax
	je	$LN4@d
; Line 619
	mov	edx, DWORD PTR _upper$[ebp]
	shl	edx, 1
	mov	DWORD PTR _upper$[ebp], edx
; Line 620
	mov	eax, DWORD PTR _quotient$[ebp]
	sar	eax, 23					; 00000017H
	and	eax, 1
	or	eax, DWORD PTR _upper$[ebp]
	mov	DWORD PTR _upper$[ebp], eax
; Line 621
	mov	ecx, DWORD PTR _quotient$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _quotient$[ebp], ecx
; Line 622
	mov	edx, DWORD PTR _quotient$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _quotient$[ebp], edx
; Line 624
	mov	eax, DWORD PTR _divisor$[ebp+4]
	sar	eax, 1
	mov	DWORD PTR _divisor$[ebp+4], eax
; Line 625
	mov	ecx, DWORD PTR _divisor$[ebp]
	and	ecx, 1
	shl	ecx, 23					; 00000017H
	or	ecx, DWORD PTR _divisor$[ebp+4]
	mov	DWORD PTR _divisor$[ebp+4], ecx
; Line 626
	mov	edx, DWORD PTR _divisor$[ebp]
	sar	edx, 1
	mov	DWORD PTR _divisor$[ebp], edx
; Line 627
	mov	eax, DWORD PTR _divisor$[ebp]
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _divisor$[ebp], eax
; Line 629
	mov	ecx, DWORD PTR _divisor$[ebp+4]
	mov	edx, DWORD PTR _dividend$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _lookaside$[ebp], eax
; Line 630
	mov	ecx, DWORD PTR _lookaside$[ebp]
	sar	ecx, 24					; 00000018H
	mov	DWORD PTR _carry$[ebp], ecx
; Line 631
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, DWORD PTR _dividend$[ebp]
	mov	DWORD PTR _carry$[ebp], edx
; Line 632
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, DWORD PTR _divisor$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 634
	mov	ecx, DWORD PTR _carry$[ebp]
	and	ecx, 16777216				; 01000000H
	je	SHORT $LN3@d
; Line 636
	mov	edx, DWORD PTR _lookaside$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _dividend$[ebp+4], edx
; Line 637
	mov	eax, DWORD PTR _carry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _dividend$[ebp], eax
; Line 638
	mov	ecx, DWORD PTR _quotient$[ebp]
	or	ecx, 1
	mov	DWORD PTR _quotient$[ebp], ecx
$LN3@d:
; Line 640
	jmp	$LN5@d
$LN4@d:
; Line 642
	cmp	DWORD PTR _signs$[ebp], 0
	je	SHORT $LN2@d
; Line 653
	mov	edx, DWORD PTR _dividend$[ebp+4]
	xor	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _dividend$[ebp+4], edx
; Line 654
	mov	eax, DWORD PTR _dividend$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _dividend$[ebp+4], eax
$LN2@d:
; Line 663
	mov	ecx, DWORD PTR _signs$[ebp]
	xor	ecx, DWORD PTR _signs2$[ebp]
	mov	DWORD PTR _signs$[ebp], ecx
; Line 665
	je	SHORT $LN1@d
; Line 667
	mov	edx, DWORD PTR _quotient$[ebp]
	xor	edx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _quotient$[ebp], edx
; Line 668
	mov	eax, DWORD PTR _quotient$[ebp]
	add	eax, 1
	mov	DWORD PTR _quotient$[ebp], eax
; Line 670
	mov	ecx, DWORD PTR _upper$[ebp]
	xor	ecx, DWORD PTR _signs$[ebp]
	mov	DWORD PTR _upper$[ebp], ecx
; Line 671
	mov	edx, DWORD PTR _quotient$[ebp]
	sar	edx, 24					; 00000018H
	and	edx, 1
	add	edx, DWORD PTR _upper$[ebp]
	mov	DWORD PTR _upper$[ebp], edx
$LN1@d:
; Line 674
	mov	eax, DWORD PTR _upper$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _iselect
	or	ecx, 6
	mov	DWORD PTR __register[ecx*4], eax
; Line 675
	mov	edx, DWORD PTR _quotient$[ebp]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR _iselect
	or	eax, 4
	mov	DWORD PTR __register[eax*4], edx
; Line 676
	mov	ecx, DWORD PTR _dividend$[ebp+4]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _iselect
	or	edx, 5
	mov	DWORD PTR __register[edx*4], ecx
; Line 677
	mov	esp, ebp
	pop	ebp
	ret	0
_d	ENDP
_TEXT	ENDS
END

fileshare	$tree

.	vector	fileshare_space_open

open	la	FILESHARE_TABLE
	jza	not_configured
	sabr	B_FS2
	la	0,,xi
	fret	0

not_configured
	la	-NOT_THERE,,xi
	fret	0


.	vector	fileshare_space_close

close	push	a				. save function result in a
	la	(0C00001s)			. that's a device
	ii	XBASE$33			. so interrupt code must do it
	pop	a				. restore result
	fret	0

.	vector	fileshare_assign
.	first call initialises the fileshare heap
.	shared in this table are file open states

assign	$head_far	params(file_type,	int)

	la	FILESHARE_TABLE
	jnza	ahead1				. application has FILESHARE_TABLE
						. application has not
	lx	FILESHARE_TABLE,,xi
	ii	READ_XVECTOR$
	jza	obtain				. neither has kernel
	ii	WRITE_AVECTOR$			. plant that in application vectors
ahead1	sabr	B_FS2				. place it in window
	j	ahead2
	
obtain	la	4096,,xi
	lx	FILESHARE_TABLE,,xi
	ii	ASSIGN_XVECTOR$			. obtain for brand new
	jza	no_slot
	ii	WRITE_AVECTOR$			. plant that in application vectors
	sabr	B_FS2
	
	dl	(B_FS2*/12++2, B_FS2*/12++2d)	. initialise shared files-open heap
	ds	*(B_FS2*/12)

ahead2	lx	*(B_FS2*/12++1)			. 1st descriptor in array
	lr	*(B_FS2*/12)			. heap top
	la	file_type
	and	255,,xi				. only keep its length
	lk	-1,,xi				. the whole word must match that

search	jxge	new
	ly	0, x
	mtane	y
	j	hit
	ax	1, y, i
	j	search

new	lx	r				. heap top
	lr	(B_FS2+1*/12)			. limit of space
	ly	a
	ay	1, x, i
	jyge	no_slot
	sy	*(B_FS2*/12)			. new heap top
	
hit	la	file_type
	sa	0, x
	j	slot

no_slot	lx	0,,xi				. none assigned
slot	$ret	0

		$root

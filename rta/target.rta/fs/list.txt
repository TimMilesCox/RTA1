MASMX 7r3A Build 12
3/fs.msm
*EOF*
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 	$path		../
  :                            41 
  :                            46 	$list
  :                            47 
  :                            48: 	$include	def/ii.def
  :                            49: 	$include	def.sys/banks.def
  :                            50: 	$include	def.sys/base.def
  :                            51: 	$include	language/stack.def
  :                            52: 	$include	t77.4/dq.def
  :                            53: 	$include	t77.4/i_f.def
  :                            54: 	$include	t77.4/ip.def
  :                            55: 	$include	t77.4/ipv4.def
  :                            56: 	$include	t77.4/udp.def
  :                            57: 	$include	t77.4/tcp.def
  :                            58: 	$include	t77.4/socket.def
  :                            59: 	$include	t77.4/pointers.def
  :                            60 .	$include	t77.4/b1_view.def
  :                            61: 	$include	rpc/rpc.def
  :                            62: 	$include	rpc/rpcadapt.def
  :                            63: 	$include	lib/register.def
  :                            64: 	$include	lib/ascii.def
  :                            65 	$path
  :                            66 
  :                            67: 	$include	file_io.def
  :                            68: 	$include	fs.def			. defines file-open application state blocks
  :                            69: 	$include	fs24.def		. defines directory structures on FS media
  :                            70: 	$include	response.def
  :                            71: 	$include	ustream.def
  :                            72 
  :                            73 	$list		2
  :                            74 
  :                            75 $(66::,x)
42:000000                     +76 fspax	filep
42:000001                     +76 
42:000002                     +76 
42:000004                     +76 
  :                            77 
  :                            78 $(66::,x)
42:000000                     +79 fspaxq	fileq
42:000001                     +79 
42:000002                     +79 
42:000004                     +79 
  :                            80 
  :                            81 $(67::,y)
43:000000                     +82 fsys	$filetag
43:000001                     +82 
43:000002                     +82 
43:000004                     +82 
43:000006                     +82 
43:000007                     +82 
  :                            83 
  :                            84 $(69::,b)
45:000000                     +85 tpage	$page_control
45:000001                     +85 
45:000002                     +85 
45:000003                     +85 
  :                            86 
  :                            87 $(66::,x)
42:000000                     +88 s	$socket
42:000002                     +88 
42:000004                     +88 
42:000005                     +88 
42:000006                     +88 
42:000007                     +88 
42:000005                     +88 
42:000006                     +88 
42:000007                     +88 
  :                            89 
  :                            90 $(66::,x)
  :                            91 axw	acw
  :                            92 
  :                            93 $(67::,y)
43:000000                     +94 dgram	datagram
43:000001                     +94 
43:000002                     +94 
43:000003                     +94 
43:000004                     +94 
43:000005                     +94 
43:000006                     +94 
43:000008                     +94 
  :                            95 
  :                            96 
  :                            97 $(0::FS24_BANK)
00:007000 B60040              +98 fs_1st*		$vector	fs_first		. low level extent-view commands
00:007001 B60044              +99 fs_read*	$vector	fs_next			. 256K-maxextent device-array FS
00:007002 B60054              +100 fs_find*	$vector	fs_search
00:007003 B60047              +101 fs_dsearch*	$vector	fs_directory_search
00:007004 B6009B              +102 fs_xbase*	$vector	fs_base_extent_advance
  :                            103 
00:007005 B600D6              +104 fspath*		$vector	fspath_walk
00:007006 B6010F              +105 fspath_open*	$vector	fspath_openfile
00:007007 B6013B              +106 fs24_open*	$vector	fs24:fs24_aim
00:007008 B60146              +107 fs24_read*	$vector	fs24:fs24_words
00:007009 B6019E              +108 fs24_advance*	$vector	fs24position:fs24_forward
  :                            109 
00:00700A B602A8              +110 fsrom_da*	$vector	fsrom_direct		. word-oriented R/W data transfer routines,
00:00700B B602B6              +111 fsrom_read*	$vector	fsrom_words		. 4K-maxextent FS in executable space
00:00700C B60300              +112 fsrom_find*	$vector	fsrom_locate
  :                            113 
00:00700D B6034C              +114 seg$load*	$vector	seg_load
00:00700E B6036E              +115 recursive$seg$load* $vector recursive_seg_load
00:00700F B60391              +116 array$seg$load*	$vector	array_seg_load
00:007010 B601E9              +117 iframe_load*	$vector	uframe:load
  :                            118 
00:007011 B603B8              +119 qstart*		$vector	qstart_name
  :                            120 
00:007012 B603EB              +121 open*		$vector	files:open
00:007013 B603F5              +122 read*		$vector files:read_by_handle
00:007014 B6041C              +123 write*		$vector	files:write_by_handle
00:007015 B60432              +124 lseek*		$vector	files:seek_by_handle
00:007016 B6043F              +125 fsync*		$vector	files:sync_by_handle
00:007017 B60453              +126 close*		$vector	files:close_by_handle
  :                            127 
00:007018 B608E7              +128 __sscanf*	$vector	scanfor			. sscanf
00:007019 B608F2              +129 __sprintf*	$vector	editfor			. sprintf
00:00701A B60901              +130 __fscanf*	$vector	f_scanform		. fscanf
00:00701B B6090D              +131 __fprintf*	$vector	f_editform		. fprintf
00:00701C B6092F              +132 net_scan_tcp*	$vector	scan_tcp		. fscanf socket
  :                            133 
00:00701D B604C3              +134 claim_fob*	$vector	claimfob
  :                            135 
  :                            136 		$if	RPC_UDP
  :                            137 rpc_rqport*	$vector	rpc_request_port
  :                            138 		$endif
  :                            139 
00:00701E B60513              +140 nfsmount*	$vector	nfs_fsmount
00:00701F B6055E              +141 nfsopen*	$vector	nfs_open_path
00:007020 B60664              +142 nfsread*	$vector	nfs_data_read
00:007021 B60703              +143 nfs_seek*	$vector	nfs_file_position
00:007022 B60658              +144 nfsclose*	$vector	nfs_close_path
  :                            145 
00:007023 B60192              +146 fs24_snoop*	$vector	fs24:fs24_fsnoop
00:007024 B6095A              +147 __fgets*	$vector	fgets_by_handle
00:007025 B60969              +148 fgets_datafile*	$vector	fgets24
00:007026 B601E0              +149 fs24_window*	$vector	fs24position:view
  :                            150 
00:007027 B60A20              +151 fileshare_space_open*	$vector	fileshare:open
00:007028 B60A27              +152 fileshare_space_close*	$vector	fileshare:close
00:007029 B60A2C              +153 fileshare_assign*	$vector	fileshare:assign
00:00702A B609D8              +154 fscan_datafile*		$vector	fscan24
  :                            155 
00:00702B B6026D              +156 fs24_lseek*	$vector	fs24_seek
00:00702C B6029D              +157 fs24_bytes_written*	$vector	fs24_bytes_on_file
00:00702D B60296              +158 fs24_words_written*	$vector	fs24_words_on_file
  :                            159 
00:00702E B608E2              +160 dialplan_online*	$vector	remotefs:online
00:00702F B608B5              +161 speed_dial*		$vector	remotefs:dial
00:007030 B60820              +162 nfswrite*		$vector	nfs_data_write
00:007031 B60472              +163 appdata_share*		$vector	appdata_vector
00:007032 B60464              +164 __fd_zero_timeout*	$vector	files:no_timeout
  :                            165 
00:007033 B60A53              +166 "$HALT"*	$vector	app_emergency_stop
  :                            167 
  :                            171 	$list	2
  :                            172 
  :                            173: 	$include	fs24			. routines, 256K-maxextent device-array FS
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 $(1:*1/$1)
  :                            42 
01:000000 000001              +43 f_s_pointer_array		+	1
01:000001 400001              +44 ?	$do	63,f_s(?)	+	0400001
01:000002 400001              +44 
01:000003 400001              +44 
01:000004 400001              +44 
01:000005 400001              +44 
01:000006 400001              +44 
01:000007 400001              +44 
01:000008 400001              +44 
01:000009 400001              +44 
01:00000A 400001              +44 
01:00000B 400001              +44 
01:00000C 400001              +44 
01:00000D 400001              +44 
01:00000E 400001              +44 
01:00000F 400001              +44 
01:000010 400001              +44 
01:000011 400001              +44 
01:000012 400001              +44 
01:000013 400001              +44 
01:000014 400001              +44 
01:000015 400001              +44 
01:000016 400001              +44 
01:000017 400001              +44 
01:000018 400001              +44 
01:000019 400001              +44 
01:00001A 400001              +44 
01:00001B 400001              +44 
01:00001C 400001              +44 
01:00001D 400001              +44 
01:00001E 400001              +44 
01:00001F 400001              +44 
01:000020 400001              +44 
01:000021 400001              +44 
01:000022 400001              +44 
01:000023 400001              +44 
01:000024 400001              +44 
01:000025 400001              +44 
01:000026 400001              +44 
01:000027 400001              +44 
01:000028 400001              +44 
01:000029 400001              +44 
01:00002A 400001              +44 
01:00002B 400001              +44 
01:00002C 400001              +44 
01:00002D 400001              +44 
01:00002E 400001              +44 
01:00002F 400001              +44 
01:000030 400001              +44 
01:000031 400001              +44 
01:000032 400001              +44 
01:000033 400001              +44 
01:000034 400001              +44 
01:000035 400001              +44 
01:000036 400001              +44 
01:000037 400001              +44 
01:000038 400001              +44 
01:000039 400001              +44 
01:00003A 400001              +44 
01:00003B 400001              +44 
01:00003C 400001              +44 
01:00003D 400001              +44 
01:00003E 400001              +44 
01:00003F 400001              +44 
  :                            45 
  :                            46 
  :                            47 $(0)
  :                            48 
  :                            49 fs_first
00:007040 750059              +50 	ii	KERNEL$B1_1
(+01)0f
00:007041 600001              +51 	la	f_s_pointer_array+1
00:007042 750058              +52 	ii	B1$
  :                            53 
00:007043 680A5F              +54 	lb	(B_FS1*/18:s)
00:007044 7C0040              +55 fs_next	jdz	fs_first
00:007045 750060              +56 	ii	XBASE$32
  :                            57 .	push	1, b, i		. add the length field + 1 to b
  :                            58 .	lb	0, b
  :                            59 .	lcal	fs_record_lengthB
  :                            60 .	popA	b
00:007046 3D0000              +61 	fret	0
  :                            62 
  :                            63 fs_directory_search		. down one level
00:007047 750060              +64 	ii	XBASE$32
00:007048 F80000              +65 	push	r		. # words in the search argument
00:007049 F80002              +66 	push	x		. you just might like that saved
00:00704A F80003              +67 	push	y		. search argument i.e. name
00:00704B 9F0004              +68 	dpush	a		. bank / offset of this directory
  :                            69 				. descriptor. This updates immediately
  :                            70 				. to directory contents page, and
  :                            71 				. updates again if the directory has
  :                            72 				. multiple pages
  :                            73 				. b addresses target entry on return
  :                            74 
00:00704C 60D000              +75 	la	0, b		. record format word
00:00704D 480A60              +76 	lk	(255*/16:s)
00:00704E AF0A61              +77 	mta	(TREE$*/16)
00:00704F B60052              +78 	j	fs_wrong_type	. this must be a directory because
  :                            79 				. this is a request to search IN it
00:007050 CFD002              +80 	dl	fsys:e:granule, b
00:007051 B60086              +81 	j	fs_directory_page
  :                            82 				. first move is to contents
  :                            83 fs_wrong_type
00:007052 6DFFFE              +84 	lb, xi	-2
00:007053 B60093              +85 	j	fs_nogo
  :                            86 				. search FOR something starts here
  :                            87 fs_search			. search from somewhere = device / directory
00:007054 FF0A62              +88 	call	(fs_read)	. or from nowhere = a device start
00:007055 F80000              +89 	push	r		. # words in the save argument
00:007056 F80002              +90 	push	x		. you just might like that saved
00:007057 F80003              +91 	push	y		. search argument i.e. name
00:007058 9F0004              +92 	dpush	a		. bank and offset of this directory
  :                            93 				. this updates if the directory has
  :                            94 				. multiple pages
  :                            95 				. b addresses target entry on return
  :                            96 fs_search1
00:007059 480A60              +97 	lk	(0FF0000:s)
00:00705A 60D000              +98 	la	fsys:e:rfw, b
00:00705B AF0A63              +99 	mtane	('F'*/16)
00:00705C B6005E              +99 
00:00705D B60074              +100 	j	fs_entity_file
00:00705E AF0A61              +101 	mtane	(TREE$*/16)
00:00705F B60061              +101 
00:007060 B60072              +102 	j	fs_entity_directory
  :                            103 .	mtane	(LINK$*/16)
  :                            104 .	j	fs_entity_directory
00:007061 AF0A64              +105 	mtane	(PAGE$END*/16)
00:007062 B60064              +105 
00:007063 B60083              +106 	j	fs_next_directory_page
00:007064 AF0A65              +107 	mtane	(VOLUME$*/16)
00:007065 B60067              +107 
00:007066 B60070              +108 	j	fs_entity_volume
00:007067 AF0A66              +109 	mtane	(0)
00:007068 B6006A              +109 
00:007069 B60092              +110 	j	fs_nohit	
00:00706A AF0A67              +111 	mtane	(LIST$END*/16)
00:00706B B6006D              +111 
00:00706C B60092              +112 	j	fs_nohit
  :                            113 
00:00706D 3E00CC              +114 	lcal	fs_record_lengthA
00:00706E CCC001              +115 	ab	1, a, i			. add the length field + 1 to b
00:00706F B60059              +116 	j	fs_search1
  :                            117 
  :                            118 fs_entity_volume
00:007070 54D004              +119 	lx, i	VOLUME_NAME_OFFSET$, b
00:007071 B60075              +120 	j	fs_entity
  :                            121 
  :                            122 fs_entity_directory			. you can search for entities which
  :                            123 					. which have a name. The name is at
00:007072 54D004              +124 	lx, i	DIRECTORY_NAME_OFFSET$, b
00:007073 B60075              +125 	j	fs_entity		. different offsets in the descriptor
  :                            126 					. between files / directories
  :                            127 					. the offsets  will grow / diminish
  :                            128 					. independently from each other
  :                            129 fs_entity_file				. with development
  :                            130 
00:007074 54D009              +131 	lx, i	DATAFILE_NAME_OFFSET$, b
  :                            132 
  :                            133 fs_entity
00:007075 A500FF              +134 	and, xi	255			. count of words after format word
00:007076 C4D001              +135 	aa, i	1, b			. calculate next record address
00:007077 400004              +136 	lr	a
  :                            137 					. name length is next entry address
00:007078 D00002              +138 	ana	x			. minus name field address
00:007079 D0F004              +139 	ana	4, sp			. if the length is different
00:00707A D60090              +140 	jnza	fs_search_again		. then it aint the same label
  :                            141 
00:00707B 58F002              +142 	ly	2, sp			. search argument address
  :                            143 
  :                            144 fs_testw
00:00707C 60A000              +145 	la	0, x
00:00707D B0B000              +146 	xor	0, y
  :                            147 
00:00707E D60090              +148 	jnza	fs_search_again
00:00707F 850001              +149 	ax, xi	1
00:007080 8D0001              +150 	ay, xi	1
00:007081 F60094              +151 	jxge	fs_found
00:007082 B6007C              +152 	j	fs_testw
  :                            153 
  :                            154 fs_next_directory_page
00:007083 68F001              +155 	lb	1, sp			. start of this directory page
00:007084 CFD003              +156 	dl	tpage:next_page_granule, b
00:007085 7C0092              +157 	jdz	fs_nohit
  :                            158 
  :                            159 fs_directory_page
00:007086 56000C              +160 	drr	18-LOG24(GRANULE$)
00:007087 2E0006              +161 	sbl	6
00:007088 480A68              +162 	lk	(040003F)
00:007089 BFF000              +163 	mlb	0, sp			. read back the device # / bank flag
  :                            164 
00:00708A 560018              +165 	drr	24
00:00708B 9D0020              +166 	orB	B_FS1,,xi
00:00708C 4E0006              +167 	rbr	6
00:00708D C7F000              +168 	ds	0, sp			. long address current directory
  :                            169 					. page maintained at stack top
  :                            170 
  :                            171 .	orB, xi	5+5+5			. skip the 1st 15 words
  :                            172 					. this will misdirect you
00:00708E 750060              +173 	ii	XBASE$32
00:00708F B60059              +174 	j	fs_search1
  :                            175 
  :                            176 fs_search_again
00:007090 680000              +177 	lb	r
00:007091 B60059              +178 	j	fs_search1
  :                            179 
  :                            180 fs_nohit
00:007092 6DFFFF              +181 	lb, xi	-1
  :                            182 fs_nogo
00:007093 30F000              +183 	z	0, sp
  :                            184 
  :                            185 fs_found
00:007094 28F001              +186 	sb	1, sp			. functional result in b
00:007095 380004              +187 	dpop	a
00:007096 380005              +187 
00:007097 380003              +188 	pop	y
00:007098 380002              +189 	pop	x
00:007099 380000              +190 	pop	r
00:00709A 3D0000              +191 	fret	0
  :                            192 
  :                            193 .		end of directory searches part
  :                            194 
  :                            195 .		next part places data file extents
  :                            196 .		in caller address space
  :                            197 .		while maintaining an extents cursor
  :                            198 .		in caller meta-information
  :                            199 
  :                            200 fs_base_extent_advance
00:00709B F80002              +201 	push	x			. you might like x saved
00:00709C F80004              +202 	push	a			. we might like a saved
00:00709D 750060              +203 	ii	XBASE$32
00:00709E 60D000              +204 	la	0, b
00:00709F 480A60              +205 	lk	(0FF0000:s)
00:0070A0 AF0A63              +206 	mtane	(FILE$*/16)
00:0070A1 B600A3              +206 
00:0070A2 B600A9              +207 	j	fs_extent
00:0070A3 AF0A69              +208 	mtane	(EXTENT$*/16)
00:0070A4 B600A6              +208 
00:0070A5 B600A9              +209 	j	fs_extent
  :                            210 
00:0070A6 30F000              +211 	z	0, sp
00:0070A7 6DFFFE              +212 	lb, xi	-2			. = wrong entity type
00:0070A8 B600C9              +213 	j	fs_extent_x		. for this operation
  :                            214 
  :                            215 fs_extent
00:0070A9 60D001              +216 	la	fsys:e:granules, b
00:0070AA 260006              +217 	sal	6
00:0070AB 400004              +218 	lr	a
00:0070AC 60F000              +219 	la	0, sp
00:0070AD A00A68              +220 	and	(0400000++63)		. mask device bits on
00:0070AE 20F000              +221 	sa	0, sp
00:0070AF 500005              +222 	lx	b
00:0070B0 CFD002              +223 	dl	fsys:e:granule, b
  :                            224 
00:0070B1 36000C              +225 	dsl	12
00:0070B2 9D0020              +226 	orB, xi	B_FS1
00:0070B3 4E0006              +227 	rbr	6
00:0070B4 580005              +228 	ly	b
  :                            229 
00:0070B5 A00A6A              +230 	and	(FS24$_BANK_HIGH_INDEX)
00:0070B6 260006              +231 	sal	6
  :                            232 
00:0070B7 90F000              +233 	or	0, sp
00:0070B8 F8A006              +234 	push	fsys:e:next_offset, x
00:0070B9 F8A004              +235 	push	fsys:e:next, x
00:0070BA 68A005              +236 	lb	fsys:e:next+1, x
00:0070BB 750060              +237 	ii	XBASE$32		. file data bank based
  :                            238 					. now construct the next extent
00:0070BC 380004              +239 	pop	a			. next extent descriptor
  :                            240 					. 48-bit granule #
  :                            241 
00:0070BD 360006              +242 	dsl	6			. shift the long granule # left
00:0070BE C8F000              +243 	ab	0, sp			. catenate the word offset
  :                            244 					. by means of a biased add
00:0070BF B7F000              +245 	sc	0, sp			. 
00:0070C0 2F0004              +246 	popA	a			. in case granule:offset were not
  :                            247 					. normalised as they should be
00:0070C1 7C00C8              +248 	jdz	fs_eofnext
  :                            249 
00:0070C2 360006              +250 	dsl	6			.
  :                            251 
00:0070C3 A00A6A              +252 	and	(FS24$_BANK_HIGH_INDEX)
  :                            253 
00:0070C4 9D0020              +254 	orB, xi	B_FS1			. construct the pointer in b
00:0070C5 4E0006              +255 	rbr	6
  :                            256 
00:0070C6 260006              +257 	sal	6
00:0070C7 90F000              +258 	or	0, sp			. construct the next extent
  :                            259 fs_eofnext
00:0070C8 20F000              +260 	sa	0, sp			. descriptor bank index
  :                            261 					. but do not base it
  :                            262 
  :                            263 .	the bank containing the data extent is based
  :                            264 .	the address of the extent data is in index register y
  :                            265 .	the extent count in words is in r
  :                            266 
  :                            267 .	the long virtual address of the next extent
  :                            268 .	descriptor is in a:b and is not based
  :                            269 .	yew store it for the next call
  :                            270 	
  :                            271 fs_extent_x
00:0070C9 380004              +272 	pop	a
00:0070CA 380002              +273 	pop	x
00:0070CB 3D0000              +274 	fret	0
  :                            275 
  :                            276 fs_record_lengthA $tree
00:0070CC A600CF              +277 	jpa	rfw_8
00:0070CD A00A6A              +278 	and	(00FFFF)
00:0070CE 350000              +279 	lret	0
00:0070CF A500FF              +280 rfw_8	and, xi	255
00:0070D0 350000              +281 	lret	0
  :                            282 	$root
  :                            283 
  :                            284 fs_record_lengthB $tree
00:0070D1 AE00D4              +285 	jpb	rfw_8
00:0070D2 A80A6A              +286 	andB	(00FFFF)
00:0070D3 350000              +287 	lret	0
00:0070D4 AD00FF              +288 rfw_8	andB,xi	255
00:0070D5 350000              +289 	lret	0
  :                            290 	$root
  :                            291 
  :                            292 	$if	0
  :                            293 granule2base10A
  :                            294 	drr	18
  :                            295 	sbl	6
  :                            296 	lk	(040003F)
  :                            297 	mlb	10
  :                            298 	drr	24
  :                            299 	orB, xi	B_FS1
  :                            300 	rbr	6
  :                            301 	lret	0
  :                            302 	$endif
  :                            303 
  :                            174: 	$include	fsopen
  :                            1 
  :                            2 fspath_walk	$tree
  :                            3 
  :                            4 .	(fs_find)
  :                            5 .	(fs_dsearch)
  :                            6 .	(fs_xbase)
  :                            7 
                                	$head_far	 params(inputp,		int)			;
                                									;
                                			scalars(directory,	2			;
                                				extract,	24			;
00:0070D6 9F0A6B              +12 				stream_registers, float, RDATAC		)
00:0070D7 8F0A6D              +12 
00:0070D8 8FF000              +12 
00:0070D9 8FF000              +12 
00:0070DA 8FF000              +12 
00:0070DB 8FF000              +12 
00:0070DC 8FF000              +12 
00:0070DD 8F0014              +12 
  :                            13 
00:0070DE 68F021              +14 	lb	inputp			. initialise the input stream
00:0070DF FF0A71              +15 	call	(rstream_starta)
  :                            16 					. LAST_BYTE_READ = ' '
  :                            17 
00:0070E0 FD002F              +18 	lc	component	extract,,i	'/',,xi
00:0070E1 FCF005              +18 
00:0070E2 FCF002              +18 
00:0070E3 3E0137              +18 
00:0070E4 38000F              +18 
  :                            19 
  :                            20 					. skips space then reads up  to '/'
  :                            21 					. r = length of anything before '/'
  :                            22 
00:0070E5 160030              +23 	dsr	48			. initial status no hit
  :                            24 	
  :                            25 
00:0070E6 3E0104              +26 root	lcal	test_forward		. did a branch get read?
00:0070E7 B600FF              +27 	j	no_next			. no, a leaf
  :                            28 
00:0070E8 FD002F              +29 	lc	component	extract,,i	'/',,xi
00:0070E9 FCF005              +29 
00:0070EA FCF002              +29 
00:0070EB 3E0137              +29 
00:0070EC 38000F              +29 
  :                            30 
00:0070ED 5CF004              +31 	ly	extract,,i
00:0070EE CFF01C              +32 	dl	directory		. blank scalar initially zero
00:0070EF FF0A72              +33 	call	(fs_find)
00:0070F0 C600FF              +34 	jza	no_next
00:0070F1 C7F01C              +35 	ds	directory
  :                            36 
00:0070F2 3E0104              +37 next	lcal	test_forward		. a branch has just been read?
00:0070F3 B600FF              +38 	j	no_next			. no, a leaf
  :                            39 
00:0070F4 FD002F              +40 	lc	component	extract,,i	'/',,xi
00:0070F5 FCF005              +40 
00:0070F6 FCF002              +40 
00:0070F7 3E0137              +40 
00:0070F8 38000F              +40 
  :                            41 
  :                            42 					. length in words returned in r
00:0070F9 5CF004              +43 	ly	extract,,i
00:0070FA CFF01C              +44 	dl	directory
00:0070FB FF0A73              +45 	call	(fs_dsearch)		. and needed here
00:0070FC C600FF              +46 	jza	no_next
00:0070FD C7F01C              +47 	ds	directory
  :                            48 
00:0070FE B600F2              +49 	j	next
  :                            50 
00:0070FF 870014              +51 no_next	qpop	RDATAC
00:007100 870008              +52 	qpop	8			. return four words of leaf name
  :                            53 					. now needs to be nonvolatile
  :                            54 "$$frame" $set	$$frame-4-4
00:007101 FCF016              +55 	$ret
00:007102 38000F              +55 
00:007103 3D0000              +55 
  :                            56 
  :                            57 .	push	24+2-4, sp, i		. if you change scalars()
  :                            58 .	pop	sp			. don't forget to change this
  :                            59 .	USTREAM				. defaults -> b$stream / SIMD registers
  :                            60 .	fret	0
  :                            61 
  :                            62 test_forward
00:007104 9F0004              +63 	dpush	a
00:007105 600013              +64 	la	LAST_BYTE_READ
00:007106 6D0020              +65 	lb	' ',,xi
00:007107 280013              +66 	sb	LAST_BYTE_READ
00:007108 4D00FF              +67 	lk	255,,xi
00:007109 AF0A74              +68 	mtane	('/')
00:00710A B6010C              +68 
00:00710B 17F002              +69 	inc	2, sp			. that means inc by 1 the word @ [sp + 2]
00:00710C 380004              +70 	dpop	a			. which is the near return address
00:00710D 380005              +70 
00:00710E 350000              +71 	lret	0
  :                            72 	
  :                            73 		$root
  :                            74 
  :                            75 fspath_openfile	$tree
  :                            76 
                                	$head_far	 params(inputp,		int	;
                                				flags,		int)	;
                                							;
                                			scalars(media_pointer,	long	;
00:00710F 9F0A6B              +81 				state_block,	int	)
00:007110 FD0000              +81 
  :                            82 	
00:007111 F8F006              +83 	c	(fspath)	inputp
00:007112 FCF001              +83 
00:007113 FF0A75              +83 
00:007114 38000F              +83 
00:007115 C60133              +84 	jza	no_file
00:007116 C7F001              +85 	ds	media_pointer
  :                            86 
00:007117 F80A76              +87 	c	(claim_fob)	(FS$DEVICE$ARRAY,,FS$DEVICE_WORDS)
00:007118 FCF001              +87 
00:007119 FF0A77              +87 
00:00711A 38000F              +87 
  :                            88 
00:00711B 700003              +89 	tnz	y
00:00711C B6011E              +89 
00:00711D B60131              +90 	j	no_state_block
00:00711E 18F000              +91 	sy	state_block
  :                            92 
00:00711F 60F007              +93 	la	flags
00:007120 20B007              +94 	sa	fspaxq:o:flags, y
  :                            95 
00:007121 30B00A              +96 	z	fspaxq:quantum_pointer, y	. initialise
00:007122 30B00B              +97 	z	fspaxq:quantum_pointer+1, y
00:007123 CFF001              +98 	dl	media_pointer
00:007124 C7B008              +99 	ds	fspaxq:rewind_extentp, y
  :                            100 
  :                            101 					. initialise the state block
00:007125 9FF001              +102 	c	(fs24_open)	state_block	media_pointer,,long
00:007126 F8F002              +102 
00:007127 FCF003              +102 
00:007128 FF0A78              +102 
00:007129 38000F              +102 
00:00712A 600A79              +103 	la	(FS$DEVICE$ARRAY*/16)
00:00712B 750050              +104 	ii	HANDLE$
00:00712C E60134              +105 	jna	file_not_ok
00:00712D 50F000              +106 	lx	state_block
[+0001]10
00:00712E 750000              +107 	ii	FILE$HANDLE		. sew the open file state to the handle
00:00712F E60134              +108 	jna	file_not_ok
00:007130 B60134              +109 	j	file_ok
  :                            110 
  :                            111 no_state_block
00:007131 607FF4              +112 	la	-NO_STORAGE
00:007132 B60134              +113 	j	file_not_ok
  :                            114 
00:007133 65FFFE              +115 no_file	la	-NOT_THERE,,xi
  :                            116 file_ok
  :                            117 file_not_ok
00:007134 FCF003              +118 	$ret	0
00:007135 38000F              +118 
00:007136 3D0000              +118 
  :                            119 
  :                            120 		$root
  :                            121 
  :                            122 
  :                            123 component	$tree
                                	$head_near	 params(targetp,	int	;
  :                            125 				sentinel,	int	)
  :                            126 
00:007137 40F003              +127 	lr	sentinel		. r = SENTINEL
00:007138 58F002              +128 	ly	targetp
00:007139 FF0A7A              +129 	call	(string_scana_sentinel)
  :                            130 
  :                            131 					. r returns as net word count
  :                            132 					. of extracted lexical word
00:00713A 350000              +133 	$ret
  :                            134 		$root
  :                            135 
  :                            175: 	$include	readfs24
  :                            1 fs24			$tree
  :                            2 fs24_aim		. set caller state pointing to the first extent descriptor
  :                            3 			. retrieve also an absolute word pointer to the start of first
  :                            4 			. extent data
  :                            5 			. vector name fs24_open
  :                            6 
                                		$head_far	 params(fspp,			int	;
  :                            8 					data_extent,		long)
  :                            9 
00:00713B 50F003              +10 			lx	fspp
00:00713C CFF004              +11 			dl	data_extent
00:00713D C7A002              +12 			ds	fspax:extent, x
  :                            13 
00:00713E A00A68              +14 			and	(0400000++63)
00:00713F 20A001              +15 			sa	fspax:device, x
  :                            16 
00:007140 60F004              +17 			la	data_extent
00:007141 750060              +18 			ii	XBASE$32
  :                            19 
00:007142 CFD002              +20 			dl	fsys:e:granule, b
  :                            21 
00:007143 360006              +22 			dsl	6
  :                            23 
00:007144 C7A004              +24 			ds	fspax:absolute_pointer, x
  :                            25 
00:007145 3D0000              +26 			$ret	0
  :                            27 
  :                            28 
                                fs24_words		$head_far	 params(fsp,			int	;
                                						buffer,			int	;
                                						words_requested,	int)	;
                                										;
00:007146 9F0A6B              +33 					scalars(absolute_pointer,	long)
  :                            34 
  :                            35 			. vector name fs24_read
  :                            36 			. return requested words to buffer starting at intra-
  :                            37 			. extent cursor and advancing that. Change extent of
  :                            38 			. reference as current extent exhausts via fs24_forward
  :                            39 
  :                            40 			. return words which could be delivered
  :                            41 
  :                            42 			. there is a state containing
  :                            43 			.	long virtual address of current read point
  :                            44 			.	long virtual address of current extent descriptor
  :                            45 
  :                            46 			. pick up the current extent information and turn it
  :                            47 			. into an address limit pointer in the current extent
  :                            48 
00:007147 50F005              +49 			lx	fsp
00:007148 CFA004              +50 			dl	fspax:absolute_pointer
00:007149 C7F000              +51 			ds	absolute_pointer
00:00714A CFA002              +52 			dl	fspax:extent
00:00714B 300008              +53 			z	8			. words delivered count
  :                            54 
  :                            55 			$if	0	. FS_CORE
  :                            56 			sabr	B_FS1
  :                            57 			$else
00:00714C 750060              +58 			ii	XBASE$32
  :                            59 			$endif
  :                            60 							. calculate pointer 
00:00714D 60D001              +61 			la	fsys:e:granules, b	. beyond this extent
00:00714E 580005              +62 			ly	b
00:00714F 160018              +63 			dsr	24
00:007150 D7B002              +64 			da	fsys:e:granule, y
00:007151 360006              +65 			dsl	6			. word pointer extent + 1
  :                            66 							. = relative limit pointer
00:007152 DFF000              +67 			dan	absolute_pointer 	. remaining words in extent
00:007153 E6018C              +68 fs24_repoint		jna	fs24_anomaly1
00:007154 7C016F              +69 			jdz	fs24_next_extent?	. you've read this extent
00:007155 60F007              +70 			la	words_requested
00:007156 D00005              +71 			ana	b			. subtract it from outstanding
00:007157 7E0159              +72 			jc	fs24_transferinb	. transfer remaining words in extent 
00:007158 68F007              +73 			lb	words_requested		. transfer remaining words in request
  :                            74 
00:007159 60F007              +75 fs24_transferinb	la	words_requested		. subtract transfer from outstanding
00:00715A D00005              +76 			ana	b
00:00715B 20F007              +77 			sa	words_requested
  :                            78 
00:00715C 280007              +79 			sb	7
00:00715D 650000              +80 			la, xi	0
  :                            81 			
00:00715E D7F000              +82 			da	absolute_pointer
00:00715F C7A004              +83 			ds	fspax:absolute_pointer
  :                            84 
00:007160 CFF000              +85 			dl	absolute_pointer
  :                            86 
  :                            87 			$if	0	. FS_CORE
  :                            88 							. turn device-relative pointer to
  :                            89 			dsl	12			. long address then to based address
  :                            90 			orB	B_FS1,,xi
  :                            91 			rbr	12
  :                            92 			aa	fspax:bank
  :                            93 			sabr	B_FS1
  :                            94 			$else
  :                            95 
00:007161 360006              +96 			dsl	6
00:007162 9D0020              +97 			orB	32,,xi
00:007163 4E0006              +98 			rbr	6
00:007164 260006              +99 			sal	6
00:007165 C0A001              +100 			aa	fspax:bank
00:007166 750060              +101 			ii	XBASE$32
  :                            102 			$endif
  :                            103 
00:007167 580005              +104 			ly	b
00:007168 600007              +105 			la	7
  :                            106 
00:007169 680008              +107 			lb	8
00:00716A C80004              +108 			ab	a
00:00716B 280008              +109 			sb	8
  :                            110 
00:00716C 50F006              +111 			lx	buffer
00:00716D 3E048B              +112 			lcal	fs_xfer
00:00716E 10F006              +113 			sx	buffer
  :                            114 
00:00716F 70F007              +115 fs24_next_extent?	tz	words_requested
00:007170 B60172              +116 			j	fs24_next_extent!
00:007171 B6018E              +117 			j	fs24_exit
  :                            118 
  :                            119 
00:007172 50F005              +120 fs24_next_extent!	lx	fsp
00:007173 CFA002              +121 			dl	fspax:extent
  :                            122 
  :                            123 			$if	0	. FS_CORE
  :                            124 			sabr	B_FS1
  :                            125 			$else
00:007174 750060              +126 			ii	XBASE$32
  :                            127 			$endif
  :                            128 			
00:007175 580005              +129 			ly	b
00:007176 68B006              +130 			lb	fsys:e:next_offset, y
00:007177 280007              +131 			sb	7
00:007178 300006              +132 			z	6			
  :                            133 
00:007179 CFB004              +134 			dl	fsys:e:next, y
00:00717A 7C018E              +135 			jdz	fs24_exit
  :                            136 
00:00717B 360006              +137 			dsl	6		. extent offset to word offset
00:00717C D70006              +138 			da	6
  :                            139 
  :                            140 			$if	0	. FS_CORE
  :                            141 			dsl	12
  :                            142 			orB, xi	B_FS1
  :                            143 			rbr	12
  :                            144 			$else
00:00717D 360006              +145 			dsl	6
00:00717E 9D0020              +146 			orB	32,,xi
00:00717F 4E0006              +147 			rbr	6
00:007180 260006              +148 			sal	6
  :                            149 			$endif
  :                            150 
00:007181 C0A001              +151 			aa	fspax:bank
00:007182 C7A002              +152 			ds	fspax:extent
  :                            153 
  :                            154 			$if	0	. FS_CORE
  :                            155 			sabr	B_FS1		. now get the new data word pointer
  :                            156 			$else
00:007183 750060              +157 			ii	XBASE$32
  :                            158 			$endif
  :                            159 
00:007184 580005              +160 			ly	b
00:007185 CFD002              +161 			dl	fsys:e:granule, b . in the micro file_system
00:007186 360006              +162 			dsl	6
00:007187 C7F000              +163 			ds	absolute_pointer
00:007188 60B001              +164 			la	fsys:e:granules, y . granules in the extent
00:007189 160018              +165 			dsr	24
00:00718A 360006              +166 			dsl	6		. and the remaining words in the
  :                            167 						. new extent = all of them
00:00718B B60153              +168 			j	fs24_repoint
  :                            169 
00:00718C 65FFFF              +170 fs24_anomaly1		la, xi	-1
00:00718D B6018F              +171 			j	fs24_exit1
00:00718E 600008              +172 fs24_exit		la	8		. result = data words transferred
00:00718F FCF002              +173 fs24_exit1		$ret	0
00:007190 38000F              +173 
00:007191 3D0000              +173 
  :                            174 
  :                            175 
  :                            176 .	vector name fs24_snoop
  :                            177 .	read words from file current position
  :                            178 .	without updating position in the open file block
  :                            179 
                                fs24_fsnoop		$head_far	 params(fs_pacp,	int		;
                                						fs_tractp,	int		;
                                						fs_tractl,	int	)	;
                                										;
00:007192 50F003              +184 					scalars(fs_pacq,	6, *fs_pacp	)
00:007193 9FA004              +184 
00:007194 8FA000              +184 
  :                            185 
  :                            186 
00:007195 F8F00B              +187 	c	(fs24_read)		fs_pacq,,i	fs_tractp	fs_tractl
00:007196 F8F00B              +187 
00:007197 FCF002              +187 
00:007198 FCF003              +187 
00:007199 FF0A7B              +187 
00:00719A 38000F              +187 
  :                            188 
  :                            189 			$if	0			
  :                            190 			lb	fs_pacp
  :                            191 			lb	fspaxq:o:column, b
  :                            192 			jzb	fs24_fsnoopz
  :                            193 						. shift the sample words if they are off-column
  :                            194 			jza	fs24_fsnoopz
  :                            195 			jna	fs24_fsnoopz
  :                            196 
  :                            197 			sa	fs_tractl
  :                            198 	
  :                            199 			ly	fs_tractp
  :                            200 			ay	a
  :                            201 			lr	y
  :                            202 
  :                            203 			sbl	3		. get shift count from octet offset
  :                            204 			ly	b
  :                            205 
  :                            206 			lx	fs_tractp
  :                            207 
  :                            208 			dl	0, x
  :                            209 
  :                            210 fs24_sloopx		jxge	fs24_fsnoopx
  :                            211 			dsl	0, y
  :                            212 			sa	0, x
  :                            213 			drr	24, y
  :                            214 			lb	2, x
  :                            215 			ax	1,,xi
  :                            216 			j	fs24_sloopx
  :                            217 
  :                            218 fs24_fsnoopx		la	fs_tractl
  :                            219 fs24_fsnoopz
  :                            220 			$endif
  :                            221 
00:00719B FCF006              +222 			$ret
00:00719C 38000F              +222 
00:00719D 3D0000              +222 
  :                            223 
  :                            224 			$root
  :                            176: 	$include	seekfs24
  :                            1 fs24position		$tree
  :                            2 
  :                            3 			. vector name fs24_advance
  :                            4 			. part of classical seek
  :                            5 			. moves forward like a read
  :                            6 			. without sampling or transfering data
  :                            7 
  :                            8 .			________________________|________________________
  :                            9 .	word	0	|ftpype	|	|   5	| file start bank:device|
  :                            10 .			|_______|_______|_______|_______________________|
  :                            11 .		2	|     pointer to current extent descriptor      |
  :                            12 .			|_______________________________________________|
  :                            13 .		4	|     file state device relative word position  |
  :                            14 .			|_______________________________________________|
  :                            15 
  :                            16 
  :                            17 
  :                            18 			. the other part of a seek is rewind to opening position
  :                            19 			. applications can also do that
  :                            20 			. by repeating the open component fs24_da
  :                            21 			. which places the device relative address
  :                            22 			. of the first extent in the file open drescriptor
  :                            23 			
  :                            24 
                                fs24_forward		$head_far	 params(fsp,			int	;
                                						distance,		long)	;
                                										;
                                					scalars(absolute_pointer,	long	;
00:00719E 9F0A6B              +29 						extent_remainder,	long	)
00:00719F 9F0A6B              +29 
  :                            30 
  :                            31 			. vector name fs24_advance
  :                            32 			. return requested words to buffer starting at intra-
  :                            33 			. extent cursor and advancing that. Change extent of
  :                            34 			. reference as current extent exhausts via fs24_forward
  :                            35 
  :                            36 			. return words which could be delivered
  :                            37 
  :                            38 			. there is a state containing
  :                            39 			.	long virtual address of current read point
  :                            40 			.	long virtual address of current extent descriptor
  :                            41 
  :                            42 			. pick up the current extent information and turn it
  :                            43 			. into an address limit pointer in the current extent
  :                            44 
00:0071A0 50F007              +45 			lx	fsp
00:0071A1 CFA004              +46 			dl	fspax:absolute_pointer
00:0071A2 C7F002              +47 			ds	absolute_pointer
00:0071A3 CFA002              +48 			dl	fspax:extent
  :                            49 
  :                            50 			$if	0	. FS_CORE
  :                            51 			sabr	B_FS1
  :                            52 			$else
00:0071A4 750060              +53 			ii	XBASE$32
  :                            54 			$endif				. b -> extent cell granules24:granule48
  :                            55 							. calculate pointer 
00:0071A5 60D001              +56 			la	fsys:e:granules, b	. beyond this extent
00:0071A6 580005              +57 			ly	b
00:0071A7 160018              +58 			dsr	24
00:0071A8 D7B002              +59 			da	fsys:e:granule, y
00:0071A9 360006              +60 			dsl	6			. device-relative word pointer to extent end
  :                            61 							. = limit pointer
00:0071AA DFF002              +62 			dan	absolute_pointer 	. remaining words in extent
  :                            63 .			jdz	fs24_next_extent!	. if extent @end before you ever even ask
  :                            64 							. draw up the next extent and report it
00:0071AB E601D7              +65 fs24_repoint		jna	fs24_anomaly1
00:0071AC 7C01B9              +66 			jdz	fs24_next_extent?	. you've spanned this extent
00:0071AD DFF008              +67 			dan	distance
00:0071AE C7F000              +68 			ds	extent_remainder
00:0071AF 7C01B7              +69 			jdz	fs24_zero_distance	. extent precisely exhausted
00:0071B0 7E01D9              +70 			jc	fs24_arrived		. extent_remainder >= distance
00:0071B1 CFF000              +71 			dl	extent_remainder	. absolute_pointer += extent_remainder
  :                            72 
00:0071B2 D7F002              +73 			da	absolute_pointer
00:0071B3 C7F002              +74 			ds	absolute_pointer
00:0071B4 C7A004              +75 			ds	fspax:absolute_pointer
  :                            76 
00:0071B5 CFF008              +77 			dl	distance
00:0071B6 DFF000              +78 			dan	extent_remainder
00:0071B7 C7F008              +79 fs24_zero_distance	ds	distance
  :                            80 
00:0071B8 B601B9              +81 			j	fs24_next_extent!
  :                            82 
  :                            83 
  :                            84 fs24_next_extent?	.	dl	distance
  :                            85 .			jdz	fs24_arrived
  :                            86 
  :                            87 
00:0071B9 58A003              +88 fs24_next_extent!	ly	fspax:extent+1		. you're still based
  :                            89 							. because you didn't base data
  :                            90 
00:0071BA 68B006              +91 			lb	fsys:e:next_offset, y
00:0071BB 280007              +92 			sb	7
00:0071BC 300006              +93 			z	6			
  :                            94 
00:0071BD CFB004              +95 			dl	fsys:e:next, y
00:0071BE 7C01D0              +96 			jdz	fs24_hard_eof
  :                            97 
00:0071BF 360006              +98 			dsl	6			. extent offset to word offset
00:0071C0 D70006              +99 			da	6
  :                            100 
  :                            101 			$if	0	. FS_CORE
  :                            102 			dsl	12
  :                            103 			orB, xi	B_FS1
  :                            104 			rbr	12
  :                            105 			$else
00:0071C1 360006              +106 			dsl	6
00:0071C2 9D0020              +107 			orB	32,,xi
00:0071C3 4E0006              +108 			rbr	6
00:0071C4 260006              +109 			sal	6
  :                            110 			$endif
  :                            111 
00:0071C5 C0A001              +112 			aa	fspax:bank
00:0071C6 C7A002              +113 			ds	fspax:extent		. next extent base now calculated
  :                            114 							. next get its absolute pointer
  :                            115 
  :                            116 			$if	0	. FS_CORE
  :                            117 			sabr	B_FS1			. now get the new data word pointer
  :                            118 			$else
00:0071C7 750060              +119 			ii	XBASE$32
  :                            120 			$endif
  :                            121 
00:0071C8 580005              +122 			ly	b
00:0071C9 CFD002              +123 			dl	fsys:e:granule, b	. new absolute pointer
00:0071CA 360006              +124 			dsl	6			. is new granule * 64
00:0071CB C7F002              +125 			ds	absolute_pointer
00:0071CC 60B001              +126 			la	fsys:e:granules, y	. new extent granules * 64
00:0071CD 160018              +127 			dsr	24
00:0071CE 360006              +128 			dsl	6			. = remaining words in the
  :                            129 							. new extent = all of them
00:0071CF B601AB              +130 			j	fs24_repoint
  :                            131 
00:0071D0 58A003              +132 fs24_hard_eof		ly	fspax:extent+1
00:0071D1 60B001              +133 			la	fsys:e:granules, y
00:0071D2 160018              +134 			dsr	24
00:0071D3 D7B002              +135 			da	fsys:e:granule, y
00:0071D4 360006              +136 			dsl	6
00:0071D5 C7A004              +137 			ds	fspax:absolute_pointer
00:0071D6 B601DC              +138 			j	fs24_exit
  :                            139 
00:0071D7 65FFFF              +140 fs24_anomaly1		la, xi	-1
00:0071D8 B601DD              +141 			j	fs24_exit1		. don't retrieve the nice answer
00:0071D9 CFF002              +142 fs24_arrived		dl	absolute_pointer
00:0071DA D7F008              +143 			da	distance
00:0071DB C7A004              +144 			ds	fspax:absolute_pointer
00:0071DC CFF000              +145 fs24_exit		dl	extent_remainder	. result = zero or final count not traversed
00:0071DD FCF004              +146 fs24_exit1		$ret
00:0071DE 38000F              +146 
00:0071DF 3D0000              +146 
  :                            147 
  :                            148 
  :                            149 .	vector name fs24_window
  :                            150 .	extent position pointer returned in b
  :                            151 .	previous 48-bit extent words remaining
  :                            152 .	returned from fs24_advance
  :                            153 
  :                            154 view			$head_far	params(fspacp,	int)
  :                            155 
00:0071E0 50F003              +156 			lx	fspacp
00:0071E1 CFA004              +157 			dl	fspax:absolute_pointer
00:0071E2 360006              +158 			dsl	6
00:0071E3 260006              +159 			sal	6
00:0071E4 C0A002              +160 			aa	fspax:extent
00:0071E5 9D0020              +161 			orB	32,,xi
00:0071E6 750060              +162 			ii	XBASE$32
00:0071E7 4E0006              +163 			rbr	6
00:0071E8 3D0000              +164 			$ret
  :                            165 
  :                            166 		$root
  :                            177: 	$include	loader
  :                            1 
  :                            2 uframe	$tree
  :                            3 
                                load	$head_far	 params(extent1,	long	;
                                				profilep,	int)	;
                                							;
                                			scalars(transfer_gate,	float	;
00:0071E9 8F0A6D              +8 				accessw,	6	)
00:0071EA 8F0A6D              +8 
00:0071EB 9FF000              +8 
  :                            9 
00:0071EC 64F000              +10 	la	accessw,,i
00:0071ED 200012              +11 	sa	fs_pac
  :                            12 
00:0071EE 9FF00D              +13 	c	(fs24_open)	accessw,,i	extent1,,long
00:0071EF FCF002              +13 
00:0071F0 FCF003              +13 
00:0071F1 FF0A78              +13 
00:0071F2 38000F              +13 
  :                            14 
00:0071F3 50F00F              +15 	lx	profilep
00:0071F4 3E020F              +16 	lcal	geometry
00:0071F5 47F006              +17 	qs	transfer_gate
  :                            18 
00:0071F6 600006              +19 	la	6			. read group storage size
00:0071F7 20000B              +20 	sa	storage_size
00:0071F8 750043              +21 	ii	BANK$
00:0071F9 C60206              +22 	jza	trialz
  :                            23 
00:0071FA A00A7C              +24 	and	(03FFFFF)		. strip any big flag
  :                            25 
00:0071FB 200010              +26 	sa	storep
00:0071FC C0F007              +27 	aa	transfer_gate+1
00:0071FD 20F007              +28 	sa	transfer_gate+1
  :                            29 					. now rewind the file
00:0071FE 9FF00D              +30 	c	(fs24_open)	accessw,,i	extent1,,long
00:0071FF FCF002              +30 
00:007200 FCF003              +30 
00:007201 FF0A78              +30 
00:007202 38000F              +30 
  :                            31 
00:007203 3E0231              +32 tuple	lcal	load_string
00:007204 B60208              +33 	j	trialx
00:007205 B60203              +34 	j	tuple
  :                            35 
00:007206 65FFF4              +36 trialz	la	-NO_STORAGE,,xi		. bad
00:007207 B6020C              +37 	j	eotrial
  :                            38 
00:007208 4FF006              +39 trialx	ql	transfer_gate
00:007209 50F00F              +40 	lx	profilep
00:00720A 47A000              +41 	qs	0, x
00:00720B 650000              +42 	la	0,,xi			. good
  :                            43 eotrial
00:00720C FCF00A              +44 	$ret	0
00:00720D 38000F              +44 
00:00720E 3D0000              +44 
  :                            45 
  :                            46 geometry				. a special case of load_string
00:00720F F80002              +47 	push	x			. delivery pointer
00:007210 40000F              +48 	lr	sp
00:007211 000013              +49 	sr	save_sp
  :                            50 
00:007212 8F0A6D              +51 lean_in	qpush	(0.0)
00:007213 FD0004              +52 	c	(fs24_read)	fs_pac	0,sp,i	4,,xi
00:007214 FCF001              +52 
00:007215 F80012              +52 
00:007216 FCF003              +52 
00:007217 FF0A7B              +52 
00:007218 38000F              +52 
00:007219 78F000              +53 	tp	0, sp			. a fixup tuple?
00:00721A B60212              +54 	j	lean_in
  :                            55 
00:00721B 9F0A7D              +56 	c	(fs24_advance)	fs_pac	(64d),,long
00:00721C F80012              +56 
00:00721D FCF003              +56 
00:00721E FF0A7F              +56 
00:00721F 38000F              +56 
00:007220 55FFF4              +57 	lx	-12,,xi
00:007221 80000F              +58 	ax	sp
00:007222 10000F              +59 	sx	sp
00:007223 FD000C              +60 	c	(fs24_read)	fs_pac	0,sp,i	12,,xi
00:007224 FCF001              +60 
00:007225 F80012              +60 
00:007226 FCF003              +60 
00:007227 FF0A7B              +60 
00:007228 38000F              +60 
  :                            61 
00:007229 870004              +62 	qpop	a
00:00722A 508013              +63 	lx	*save_sp		. delivery pointer
00:00722B 87A004              +64 	qpop	4, x
00:00722C 87A008              +65 	qpop	8, x
  :                            66 
00:00722D 400013              +67 	lr	save_sp
00:00722E 00000F              +68 	sr	sp
00:00722F 380002              +69 	pop	x			. delivery pointer
00:007230 350000              +70 	lret	0
  :                            71 
  :                            72 storage_size $equ 11
  :                            73 save_sp	$equ	d$save3
  :                            74 fs_pac	$equ	d$save2
  :                            75 window_bias $equ d$save1
  :                            76 storep	$equ	d$save
  :                            77 
  :                            78 load_string
00:007231 40000F              +79 	lr	sp
00:007232 000013              +80 	sr	save_sp
  :                            81 
  :                            82 stack_tuple
00:007233 8F0A80              +83 	qpush	(-0.0)
00:007234 FD0004              +84 	c	(fs24_read)	fs_pac	0,sp,i	4,,xi
00:007235 FCF001              +84 
00:007236 F80012              +84 
00:007237 FCF003              +84 
00:007238 FF0A7B              +84 
00:007239 38000F              +84 
00:00723A C6026A              +85 	jza	clear
00:00723B 78F000              +86 	tp	0, sp			. a fixup tuple?
00:00723C B60233              +87 	j	stack_tuple
  :                            88 
00:00723D 60F003              +89 	la	3, sp			. calculate write address adjustment
00:00723E B5F000              +90 	xor	-4096,,xi		. minus target start page plus 7
00:00723F A5F000              +91 	and	-4096,,xi
00:007240 C00A84              +92 	aa	(08000)
00:007241 200011              +93 	sa	window_bias
  :                            94 
00:007242 60F000              +95 	la	0, sp			. window the target pages of this string
00:007243 160018              +96 	dsr	24
00:007244 D7F002              +97 	da	2, sp
00:007245 40000B              +98 	lr	storage_size
00:007246 500005              +99 	lx	b
00:007247 F60269              +100 	jxge	too_much
00:007248 16000C              +101 	dsr	12
00:007249 44D001              +102 	lr	1, b, i			. relative high_index page + 1 -> limit
00:00724A CFF002              +103 	dl	2, sp
00:00724B 36000C              +104 	dsl	12
00:00724C 500004              +105 	lx	a			. relative absolute start page -> x
00:00724D C00010              +106 	aa	storep
00:00724E 6D0000              +107 	lb	0,,xi
  :                            108 
00:00724F F60255              +109 window	jxge	window_open
00:007250 34D007              +110 	sabr	7, b
00:007251 64C001              +111 	la	1, a, i
00:007252 6CD001              +112 	lb	1, b, i
00:007253 850001              +113 	ax	1,,xi
00:007254 B6024F              +114 	j	window
  :                            115 
  :                            116 window_open
  :                            117 	
  :                            118 
00:007255 50F003              +119 	lx	3, sp
00:007256 800011              +120 	ax	window_bias
  :                            121 
00:007257 F8F000              +122 	c	(fs24_read)	fs_pac	x 	0, sp
00:007258 F80002              +122 
00:007259 F80012              +122 
00:00725A FCF003              +122 
00:00725B FF0A7B              +122 
00:00725C 38000F              +122 
  :                            123 
00:00725D 400013              +124 	lr	save_sp
00:00725E 87F000              +125 fixup?	qpop	0, sp			. add the load page index
00:00725F 50000F              +126 	lx	sp			. to a pointer constant
00:007260 F60267              +127 	jxge	fixed
  :                            128 
00:007261 50F003              +129 	lx	3, sp
00:007262 800011              +130 	ax	window_bias
00:007263 60A000              +131 	la	0, x
00:007264 C00010              +132 	aa	storep
00:007265 20A000              +133 	sa	0, x
00:007266 B6025E              +134 	j	fixup?
  :                            135 
00:007267 00000F              +136 fixed	sr	sp
00:007268 350001              +137 	lret	1			. good return
  :                            138 
  :                            139 too_much
00:007269 65FFEA              +140 	la	-BAD_ARGUMENT,,xi
00:00726A 400013              +141 clear	lr	save_sp
00:00726B 00000F              +142 	sr	sp
00:00726C 350000              +143 	lret	0			. less good return
  :                            144 
  :                            145 	$root
  :                            178: 	$include	lseekf24
  :                            1 .	vector name	fs24_lseek
  :                            2 
  :                            3 fs24_seek	$tree
                                	$head_far	 params(fblocp,		int	;
                                				seek_position,	long	;
  :                            6 				seek_from,	int	)
  :                            7 
00:00726D 60D000              +8 	la	0, b			. read the first word of file open state
00:00726E A500FF              +9 	and	255,,xi			. is it large enough to hold restart / measurement parts?
00:00726F C5FFF5              +10 	aa	-FS$DEVICE_WORDS,,xi
00:007270 5E0278              +11 	jnc	fs24_not_enough		. no
  :                            12 
00:007271 500005              +13 	lx	b
00:007272 60F006              +14 	la	seek_from
00:007273 C6027A              +15 	jza	fs24_seek_set
00:007274 C5FFFE              +16 	aa	-SEEK_END,,xi
00:007275 C6028F              +17 	jza	fs24_seek_end
00:007276 C50001              +18 	aa	SEEK_END-SEEK_CUR,,xi
00:007277 C60289              +19 	jza	fs24_seek_cur
  :                            20 
  :                            21 fs24_not_enough
00:007278 65FFEA              +22 	la	-BAD_ARGUMENT,,xi
00:007279 3D0000              +23 	fret	0
  :                            24 
  :                            25 fs24_seek_set
00:00727A CFF004              +26 	dl	seek_position
  :                            27 fs24_seek_set_on
00:00727B DFA00A              +28 	dan	fspaxq:quantum_pointer
00:00727C A60283              +29 	jpa	fs24_seek_roll_forward
  :                            30 
  :                            31 fs24_seek_restart_roll
00:00727D 9FA008              +32 	c	(fs24_open)	fblocp	fspaxq:rewind_extentp,,long
00:00727E F8F005              +32 
00:00727F FCF003              +32 
00:007280 FF0A78              +32 
00:007281 38000F              +32 
00:007282 CFF004              +33 	dl	seek_position
  :                            34 
  :                            35 fs24_seek_roll_forward
00:007283 9F0004              +36 	c	(fs24_advance)	fblocp	a,,long
00:007284 F8F005              +36 
00:007285 FCF003              +36 
00:007286 FF0A7F              +36 
00:007287 38000F              +36 
00:007288 3D0000              +37 	fret	0
  :                            38 
  :                            39 fs24_seek_cur
00:007289 CFF004              +40 	dl	seek_position
00:00728A A60283              +41 	jpa	fs24_seek_roll_forward
00:00728B D7A00A              +42 	da	fspaxq:quantum_pointer	. subtract displacement from position
00:00728C E60278              +43 	jna	fs24_not_enough		.
00:00728D C7F004              +44 	ds	seek_position
00:00728E B6027D              +45 	j	fs24_seek_restart_roll
  :                            46 	
  :                            47 fs24_seek_end
00:00728F F8F003              +48 	c	(fs24_words_written)	fblocp
00:007290 FCF001              +48 
00:007291 FF0A85              +48 
00:007292 38000F              +48 
00:007293 D7F004              +49 	da	seek_position
00:007294 B6027B              +50 	j	fs24_seek_set_on
  :                            51 
  :                            52 fs24_seek_z
00:007295 3D0000              +53 	$ret
  :                            54 	$root
  :                            55 
  :                            56 fs24_words_on_file	. vector name fs24_words_written
  :                            57 
  :                            58 	$head_far	 params(fblocp_w,	int)
  :                            59 
00:007296 50F003              +60 	lx	fblocp_w
00:007297 3E02A0              +61 	lcal	fs24_octets_on_file
00:007298 D70A86              +62 	da	(2d)
00:007299 F50003              +63 	d	3,,xi
00:00729A 160018              +64 	dsr	24
00:00729B 600006              +65 	la	6
00:00729C 3D0000              +66 	$ret
  :                            67 
  :                            68 fs24_bytes_on_file	. vector name fs24_bytes_written
  :                            69 
  :                            70 	$head_far	 params(fblocp_b,	int)
  :                            71 
00:00729D 50F003              +72 	lx	fblocp_b
00:00729E 3E02A0              +73 	lcal	fs24_octets_on_file
00:00729F 3D0000              +74 	$ret
  :                            75 
  :                            76 fs24_octets_on_file
00:0072A0 60A000              +77 	la	fspaxq:serialp:fs_type
00:0072A1 A500FF              +78 	and	255,,xi
00:0072A2 C5FFF5              +79 	aa	-FS$DEVICE_WORDS,,xi	. a sufficient open state block to know how big?
00:0072A3 5E02A7              +80 	jnc	fs24_octets_unresolved
00:0072A4 CFA008              +81 	dl	fspaxq:rewind_extentp
00:0072A5 750060              +82 	ii	XBASE$32		. that has unbased whatever was based
00:0072A6 CFD007              +83 	dl	fsys:quanta, b		. read the file descriptor
  :                            84 fs24_octets_unresolved
00:0072A7 350000              +85 	lret	0
  :                            86 
  :                            179: 	$include	fsrom			. routines, 4K-maxextent FS in executable space
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 
  :                            42 fsrom_direct		. set caller state pointing to the first extent descriptor
  :                            43 			. retrieve also an absolute word pointer to the start of first
  :                            44 			. extent data
  :                            45 			. vector name fsrom_da
  :                            46 
                                		$head_far	 params(fspp,			int	;
                                					fsrom_start_bank,	int	;
  :                            49 					fsrom_direct_name,	long)
  :                            50 
00:0072A8 50F003              +51 			lx	fspp
00:0072A9 60F004              +52 			la	fsrom_start_bank
00:0072AA 20A001              +53 			sa	fspax:bank, x
  :                            54 
00:0072AB CFF005              +55 			dl	fsrom_direct_name	. word offset 48 bit just in case
00:0072AC 36000C              +56 			dsl	12			. turn it into a long pointer
00:0072AD 9D0020              +57 			orB	B_FS1,,xi
00:0072AE 4E000C              +58 			rbr	12
00:0072AF C0F004              +59 			aa	fsrom_start_bank	. add on the start pointer
00:0072B0 C7A002              +60 			ds	fspax:extent, x
  :                            61 
00:0072B1 340020              +62 			sabr	B_FS1
00:0072B2 CFD002              +63 			dl	fsys:e:granule, b
  :                            64 
00:0072B3 360006              +65 			dsl	6			. word offset pointer 1st extent
  :                            66 							. within  micro file system
00:0072B4 C7A004              +67 			ds	fspax:absolute_pointer, x
  :                            68 
00:0072B5 3D0000              +69 			$ret	0
  :                            70 
  :                            71 
                                fsrom_words		$head_far	 params(fsp,			int	;
                                						buffer,			int	;
                                						words_requested,	int)	;
                                										;
00:0072B6 9F0A6B              +76 					scalars(absolute_pointer,	long)
  :                            77 
  :                            78 			. vector name fsrom_read
  :                            79 			. return requested words to buffer starting at intra-
  :                            80 			. extent cursor and advancing that. Change extent of
  :                            81 			. reference as current extent exhausts via fsrom_forward
  :                            82 
  :                            83 			. return words which could be delivered
  :                            84 
  :                            85 			. there is a state containing
  :                            86 			.	long virtual address of current read point
  :                            87 			.	long virtual address of current extent descriptor
  :                            88 
  :                            89 			. pick up the current extent information and turn it
  :                            90 			. into an address limit pointer in the current extent
  :                            91 
00:0072B7 50F005              +92 			lx	fsp
00:0072B8 CFA004              +93 			dl	fspax:absolute_pointer
00:0072B9 C7F000              +94 			ds	absolute_pointer
00:0072BA CFA002              +95 			dl	fspax:extent
00:0072BB 300008              +96 			z	8			. words delivered count
  :                            97 
  :                            98 
00:0072BC 340020              +99 			sabr	B_FS1
  :                            100 							. calculate pointer 
00:0072BD 60D001              +101 			la	fsys:e:granules, b	. beyond this extent
00:0072BE 580005              +102 			ly	b
00:0072BF 160018              +103 			dsr	24
00:0072C0 D7B002              +104 			da	fsys:e:granule, y
00:0072C1 360006              +105 			dsl	6			. word pointer extent + 1
  :                            106 							. = relative limit pointer
00:0072C2 DFF000              +107 			dan	absolute_pointer 	. remaining words in extent
00:0072C3 E602FA              +108 fsrom_repoint		jna	fsrom_anomaly1
00:0072C4 7C02DE              +109 			jdz	fsrom_next_extent?	. you've read this extent
00:0072C5 60F007              +110 			la	words_requested
00:0072C6 D00005              +111 			ana	b			. subtract it from outstanding
00:0072C7 7E02C9              +112 			jc	fsrom_transferinb	. transfer remaining words in extent 
00:0072C8 68F007              +113 			lb	words_requested		. transfer remaining words in request
  :                            114 
00:0072C9 60F007              +115 fsrom_transferinb	la	words_requested		. subtract transfer from outstanding
00:0072CA D00005              +116 			ana	b
00:0072CB 20F007              +117 			sa	words_requested
  :                            118 
00:0072CC 280007              +119 			sb	7
00:0072CD 650000              +120 			la, xi	0
  :                            121 			
00:0072CE D7F000              +122 			da	absolute_pointer
00:0072CF C7A004              +123 			ds	fspax:absolute_pointer
  :                            124 
00:0072D0 CFF000              +125 			dl	absolute_pointer
  :                            126 							. turn device-relative pointer to
00:0072D1 36000C              +127 			dsl	12			. long address then to based address
00:0072D2 9D0020              +128 			orB	B_FS1,,xi
00:0072D3 4E000C              +129 			rbr	12
00:0072D4 C0A001              +130 			aa	fspax:bank
00:0072D5 340020              +131 			sabr	B_FS1
  :                            132 
00:0072D6 580005              +133 			ly	b
00:0072D7 600007              +134 			la	7
  :                            135 
00:0072D8 680008              +136 			lb	8
00:0072D9 C80004              +137 			ab	a
00:0072DA 280008              +138 			sb	8
  :                            139 
00:0072DB 50F006              +140 			lx	buffer
00:0072DC 3E048B              +141 			lcal	fs_xfer
00:0072DD 10F006              +142 			sx	buffer
  :                            143 
00:0072DE 70F007              +144 fsrom_next_extent?	tz	words_requested
00:0072DF B602E1              +145 			j	fsrom_next_extent!
00:0072E0 B602FC              +146 			j	fsrom_exit
  :                            147 
  :                            148 
00:0072E1 50F005              +149 fsrom_next_extent!	lx	fsp
00:0072E2 CFA002              +150 			dl	fspax:extent
00:0072E3 340020              +151 			sabr	B_FS1
  :                            152 			
00:0072E4 580005              +153 			ly	b
00:0072E5 68B006              +154 			lb	fsys:e:next_offset, y
00:0072E6 280007              +155 			sb	7
00:0072E7 300006              +156 			z	6			
  :                            157 
00:0072E8 CFB004              +158 			dl	fsys:e:next, y
00:0072E9 7C02FC              +159 			jdz	fsrom_exit
  :                            160 
00:0072EA 360006              +161 			dsl	6		. extent offset to word offset
00:0072EB D70006              +162 			da	6
  :                            163 
00:0072EC 36000C              +164 			dsl	12
00:0072ED 9D0020              +165 			orB, xi	B_FS1
00:0072EE 4E000C              +166 			rbr	12
  :                            167 
00:0072EF C0A001              +168 			aa	fspax:bank
00:0072F0 C7A002              +169 			ds	fspax:extent
  :                            170 
00:0072F1 340020              +171 			sabr	B_FS1		. now get the new data word pointer
00:0072F2 580005              +172 			ly	b
00:0072F3 CFD002              +173 			dl	fsys:e:granule, b . in the micro file_system
00:0072F4 360006              +174 			dsl	6
00:0072F5 C7F000              +175 			ds	absolute_pointer
00:0072F6 60B001              +176 			la	fsys:e:granules, y . granules in the extent
00:0072F7 160018              +177 			dsr	24
00:0072F8 360006              +178 			dsl	6		. and the remaining words in the
  :                            179 						. new extent = all of them
00:0072F9 B602C3              +180 			j	fsrom_repoint
  :                            181 
00:0072FA 65FFFF              +182 fsrom_anomaly1		la, xi	-1
00:0072FB B602FD              +183 			j	fsrom_exit1
00:0072FC 600008              +184 fsrom_exit		la	8		. result = data words transferred
00:0072FD FCF002              +185 fsrom_exit1		$ret	0
00:0072FE 38000F              +185 
00:0072FF 3D0000              +185 
  :                            186 
  :                            187 
  :                            188 
  :                            189 .	get the file offset within FS
  :                            190 .	in return for the directory offset and name
  :                            191 .	vector name fsrom_find
  :                            192 
                                fsrom_locate	$head_far	 params(fsromloc_fpaxp,		int	;
                                					fsromloc_fsid,		int	;
                                					fsromloc_doffset,	long	;
                                					fsromloc_typesought,	int	;
                                					fsromloc_words,		int	;
  :                            198 					fsromloc_namep,		int	)
  :                            199 
                                		c	(fsrom_da)	fsromloc_fpaxp		;
                                					fsromloc_fsid		;
00:007300 9FF005              +202 					fsromloc_doffset,,long
00:007301 F8F006              +202 
00:007302 F8F006              +202 
00:007303 FCF004              +202 
00:007304 FF0A88              +202 
00:007305 38000F              +202 
  :                            203 
00:007306 58F003              +204 		ly	fsromloc_fpaxp
00:007307 58B003              +205 		ly	fspax:extent+1, y		. should be directory granule page head
00:007308 480A60              +206 		lk	(255*/16:s)
  :                            207 
00:007309 60B000              +208 		la	fsys:e:rfw
00:00730A AF0A89              +209 		mta	(PAGE$CONTROL*/16)
00:00730B B6033B              +210 		j	fsrom_locate_miss
  :                            211 
  :                            212 fsrom_locate_search
00:00730C A500FF              +213 		and	255,,xi
00:00730D 8CC001              +214 		ay	1, a, i
  :                            215 fsrom_locate_next
00:00730E 60B000              +216 		la	0, y
00:00730F E6033B              +217 		jna	fsrom_locate_miss		. end of entries and we have no extending directory blocks
00:007310 AF0A66              +218 		mtane	(0)				. another end of directory case?
00:007311 B60313              +218 
00:007312 B6033B              +219 		j	fsrom_locate_miss
  :                            220 
  :                            221 
00:007313 AF0A63              +222 		mtane	(FILE$*/16)
00:007314 B60316              +222 
00:007315 B60324              +223 		j	fsrom_locate_typef
00:007316 AF0A61              +224 		mtane	(TREE$*/16)
00:007317 B60319              +224 
00:007318 B60322              +225 		j	fsrom_locate_typed
00:007319 AF0A65              +226 		mtane	(VOLUME$*/16)
00:00731A B6031C              +226 
00:00731B B60320              +227 		j	fsrom_locate_typev
  :                            228 
00:00731C AF0A8A              +229 		mta	(LINK$*/16)			. last of types being considered
00:00731D B6030C              +230 		j	fsrom_locate_search		. it's not
  :                            231 
  :                            232 		$if	0
  :                            233 		j	fsrom_locate_search		. it is, but there aren't any
  :                            234 		$else
  :                            235 
  :                            236 
  :                            237 fsrom_locate_typel
00:00731E 54B004              +238 		lx	LINK_NAME_OFFSET$, y, i
00:00731F B60325              +239 		j	fsrom_locate_typex
  :                            240 
  :                            241 		$endif
  :                            242 
  :                            243 
  :                            244 fsrom_locate_typev
00:007320 54B004              +245 		lx	VOLUME_NAME_OFFSET$, y, i
00:007321 B60325              +246 		j	fsrom_locate_typex
  :                            247 
  :                            248 fsrom_locate_typed
00:007322 54B004              +249 		lx	DIRECTORY_NAME_OFFSET$, y, i
00:007323 B60325              +250 		j	fsrom_locate_typex
  :                            251 fsrom_locate_typef
00:007324 54B009              +252 		lx	DATAFILE_NAME_OFFSET$, y, i
  :                            253 
  :                            254 fsrom_locate_typex
00:007325 70F007              +255 		tnz	fsromloc_typesought		. does the caller care what entry type?
00:007326 B60328              +255 
00:007327 B6032A              +256 		j	fsrom_locate_testl		. no
00:007328 AFF007              +257 		mta	fsromloc_typesought		. yes
00:007329 B6030C              +258 		j	fsrom_locate_search
  :                            259 
  :                            260 fsrom_locate_testl
00:00732A A500FF              +261 		and	255,,xi
00:00732B C4B001              +262 		aa	1, y, i				. -> next entry
00:00732C 680003              +263 		lb	y				. keep the entry start
  :                            264 
00:00732D 58F009              +265 		ly	fsromloc_namep
00:00732E 400004              +266 		lr	a				. and limit
00:00732F D00002              +267 		ana	x				. words in name
00:007330 B0F008              +268 		xor	fsromloc_words			. if it's not the same length
00:007331 C60334              +269 		jza	fsrom_locate_string		. it'a not the same name
  :                            270 
  :                            271 fsrom_locate_forward
00:007332 580000              +272 		ly	r				. the limits pointer -> next entry
00:007333 B6030E              +273 		j	fsrom_locate_next
  :                            274 
  :                            275 fsrom_locate_string
00:007334 F6033D              +276 		jxge	fsrom_locate_hit		. all words compared?
00:007335 60A000              +277 		la	0, x				. not yet
00:007336 B0B000              +278 		xor	0, y
00:007337 D60332              +279 		jnza	fsrom_locate_forward		. jump to next entry if unequal
00:007338 850001              +280 		ax	1,,xi				. advance next word
00:007339 8D0001              +281 		ay	1,,xi
00:00733A B60334              +282 		j	fsrom_locate_string
  :                            283 
  :                            284 fsrom_locate_miss
00:00733B 160030              +285 		dsr	48				. report no hit
00:00733C B60340              +286 		j	fsrom_locate_deliver
  :                            287 
  :                            288 fsrom_locate_hit					. deliver information
00:00733D 580005              +289 		ly	b				. pointer to record format word
00:00733E CFD002              +290 		dl	fsys:e:granule, b
00:00733F 360006              +291 		dsl	6
  :                            292 
  :                            293 fsrom_locate_deliver
00:007340 50F003              +294 		lx	fsromloc_fpaxp
00:007341 C7A004              +295 		ds	fspax:absolute_pointer, x		
  :                            296 
00:007342 3D0000              +297 		$ret
  :                            298 
  :                            299 romfs_offsetw	$head_near	 params(paxp,	int)	. pointer to 6 word control
00:007343 50F002              +300 		lx	paxp				. saved directory entry pointer
00:007344 68A005              +301 		lb	fspax:absolute_pointer+1, x
00:007345 D80A8B              +302 		anb	(32*/12)
00:007346 60A002              +303 		la	fspax:extent, x
00:007347 D0A001              +304 		ana	fspax:device, x
00:007348 2E000C              +305 		sbl	12
00:007349 16000C              +306 		dsr	12				. offset word
00:00734A C7A004              +307 		ds	fspax:absolute_pointer, x
00:00734B 350000              +308 		$ret
  :                            180: 	$include	seg_load
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 
  :                            42 
                                seg_load	$head_far	 params(segload_bank,	int	;
                                					segload_file,	long)	;
                                								;
                                				scalars(segload_fpax,	6	;
00:00734C 8F0A6D              +47 					segload_buffer,	4)
00:00734D 9FF000              +47 
00:00734E 8F0A6D              +47 
  :                            48 
00:00734F 60F00D              +49 		la	segload_bank
00:007350 D60354              +50 		jnza	seg_fsfound		. caller knows where the FS is
00:007351 60F00A              +51 		la	10, sp			. it's in caller's code bank
00:007352 A00A7C              +52 		and	(03FFFFF)		. minus any flags
00:007353 20F00D              +53 		sa	segload_bank		. caller doesn't know where that is
  :                            54 						. but we do
  :                            55 seg_fsfound
00:007354 9FF00E              +56 		c	(fsrom_da)	segload_fpax,,i segload_bank segload_file,,long
00:007355 F8F00F              +56 
00:007356 FCF007              +56 
00:007357 FCF004              +56 
00:007358 FF0A88              +56 
00:007359 38000F              +56 
  :                            57 
00:00735A FC0004              +58 seg_lstring	c	(fsrom_read)	segload_fpax,,i segload_buffer,,i 4,,i
00:00735B FCF001              +58 
00:00735C FCF006              +58 
00:00735D FCF003              +58 
00:00735E FF0A8C              +58 
00:00735F 38000F              +58 
  :                            59 
00:007360 C5FFFC              +60 		aa, xi	-4
00:007361 D6036B              +61 		jnza	seg_loadx
  :                            62 
00:007362 60F000              +63 		la	segload_buffer
00:007363 C6036B              +64 		jza	seg_loadx
  :                            65 
00:007364 F8F000              +66 		c	(fsrom_read)	segload_fpax,,i segload_buffer+3 segload_buffer
00:007365 F8F004              +66 
00:007366 FCF006              +66 
00:007367 FCF003              +66 
00:007368 FF0A8C              +66 
00:007369 38000F              +66 
00:00736A B6035A              +67 		j	seg_lstring
  :                            68 
00:00736B FCF00A              +69 seg_loadx	$ret	0
00:00736C 38000F              +69 
00:00736D 3D0000              +69 
  :                            181: 	$include	recursld
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 
  :                            42 
  :                            43 recursive_seg_load
                                		$head_far	 params(rsegload_bank,	int	;
                                					rsegload_file,	int)	;
                                								;
                                				scalars(rsegload_fpax,	6	;
00:00736E 8F0A6D              +48 					rsegload_buffer,4)
00:00736F 9FF000              +48 
00:007370 8F0A6D              +48 
  :                            49 
00:007371 60F00D              +50 		la	rsegload_bank
00:007372 D60375              +51 		jnza	rseg_fsfound		. caller knows where FS is
00:007373 60F00A              +52 		la	10, sp			. no but it's in caller's code bank
00:007374 20F00D              +53 		sa	rsegload_bank		. caller doesn't know where that is
  :                            54 						. but we do
  :                            55 rseg_fsfound
00:007375 9FF00E              +56 		c	(fsrom_da)	rsegload_fpax,,i rsegload_bank rsegload_file,,long
00:007376 F8F00F              +56 
00:007377 FCF007              +56 
00:007378 FCF004              +56 
00:007379 FF0A88              +56 
00:00737A 38000F              +56 
  :                            57 
00:00737B FC0004              +58 rseg_lstring	c	(fsrom_read)	rsegload_fpax,,i rsegload_buffer,,i 4,,i
00:00737C FCF001              +58 
00:00737D FCF006              +58 
00:00737E FCF003              +58 
00:00737F FF0A8C              +58 
00:007380 38000F              +58 
  :                            59 
00:007381 C5FFFC              +60 		aa, xi	-4
00:007382 D6038E              +61 		jnza	rseg_loadx
  :                            62 
00:007383 60F000              +63 		la	rsegload_buffer
00:007384 C6038E              +64 		jza	rseg_loadx
  :                            65 
00:007385 50F003              +66 		lx	rsegload_buffer+3
00:007386 80000E              +67 		ax	fp
00:007387 F8F000              +68 		c	(fsrom_read)	rsegload_fpax,,i x rsegload_buffer
00:007388 F80002              +68 
00:007389 FCF006              +68 
00:00738A FCF003              +68 
00:00738B FF0A8C              +68 
00:00738C 38000F              +68 
00:00738D B6037B              +69 		j	rseg_lstring
  :                            70 
00:00738E FCF00A              +71 rseg_loadx	$ret	0
00:00738F 38000F              +71 
00:007390 3D0000              +71 
  :                            182: 	$include	arraylod
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 
  :                            42 
                                array_seg_load	$head_far	 params(asegload_bank,	int	;
                                					asegload_file,	int	;
                                					asegload_base,	int)	;
                                								;
                                				scalars(asegload_fpax,	6	;
00:007391 8F0A6D              +48 					asegload_buffer,4)
00:007392 9FF000              +48 
00:007393 8F0A6D              +48 
  :                            49 
00:007394 60F00D              +50 		la	asegload_bank
00:007395 D60398              +51 		jnza	aseg_fsfound		. caller knows where FS is
00:007396 60F00A              +52 		la	10, sp			. no but it's in caller's code bank
00:007397 20F00D              +53 		sa	asegload_bank		. caller doesn't know where that is
  :                            54 						. but we do
  :                            55 aseg_fsfound
00:007398 9FF00E              +56 		c	(fsrom_da)	asegload_fpax,,i asegload_bank asegload_file,,long
00:007399 F8F00F              +56 
00:00739A FCF007              +56 
00:00739B FCF004              +56 
00:00739C FF0A88              +56 
00:00739D 38000F              +56 
  :                            57 
00:00739E FC0004              +58 aseg_lstring	c	(fsrom_read)	asegload_fpax,,i asegload_buffer,,i 4,,i
00:00739F FCF001              +58 
00:0073A0 FCF006              +58 
00:0073A1 FCF003              +58 
00:0073A2 FF0A8C              +58 
00:0073A3 38000F              +58 
  :                            59 
00:0073A4 C5FFFC              +60 		aa, xi	-4
00:0073A5 D603B5              +61 		jnza	aseg_loadx
  :                            62 
00:0073A6 60F000              +63 		la	asegload_buffer
00:0073A7 C603B5              +64 		jza	aseg_loadx
  :                            65 
00:0073A8 CFF002              +66 		dl	asegload_buffer+2
00:0073A9 C0F00F              +67 		aa	asegload_base
00:0073AA 340022              +68 		sabr	34
00:0073AB 980A8D              +69 		orB	(34*/12)
00:0073AC 64C001              +70 		la	1, a, i
00:0073AD 340023              +71 		sabr	35
  :                            72 
00:0073AE F8F000              +73 		c	(fsrom_read)	asegload_fpax,,i b asegload_buffer
00:0073AF F80005              +73 
00:0073B0 FCF006              +73 
00:0073B1 FCF003              +73 
00:0073B2 FF0A8C              +73 
00:0073B3 38000F              +73 
00:0073B4 B6039E              +74 		j	aseg_lstring
  :                            75 
00:0073B5 FCF00A              +76 aseg_loadx	$ret	0
00:0073B6 38000F              +76 
00:0073B7 3D0000              +76 
  :                            183: 	$include	qstart
  :                            1 
                                qstart_name	$head_far	 params(qstart_fsid,		int	;
                                	 				qstart_doffset,		long	;
                                					qstart_words,		int	;
                                					qstart_namep,		int)	;
                                									;
                                				scalars(qstart_pax,		6	;
00:0073B8 8F0A6D              +8 					qstart_buffer,		8	)
00:0073B9 9FF000              +8 
00:0073BA 8F0A6D              +8 
00:0073BB 8FF000              +8 
  :                            9 
  :                            10 
  :                            11 
                                		c	(fsrom_find)	qstart_pax,,i		;
                                					qstart_fsid		;
                                					qstart_doffset,,long	;
                                					0,,xi			;	. = wildcard on object type
                                					qstart_words		;
00:0073BC F8F015              +17 					qstart_namep
00:0073BD F8F015              +17 
00:0073BE FD0000              +17 
00:0073BF 9FF015              +17 
00:0073C0 F8F016              +17 
00:0073C1 FCF00E              +17 
00:0073C2 FCF007              +17 
00:0073C3 FF0A8E              +17 
00:0073C4 38000F              +17 
  :                            18 
00:0073C5 7C03E7              +19 		jdz	qstart_nane
  :                            20 
00:0073C6 60B000              +21 		la	0, y		. object header
00:0073C7 480A60              +22 		lk	(-1*/$word-$byte)
00:0073C8 AF0A63              +23 		mta	(FILE$*/$word-$byte)
00:0073C9 B603D2              +24 		j	read_launch_gate?
00:0073CA 18F00B              +25 		sy	qstart_pax+3		. file descriptor -> open block
  :                            26 
                                		c	(fsrom_read)	qstart_pax,,i		;
                                					qstart_buffer,,i	;
00:0073CB FD0008              +29 					8,,xi
00:0073CC FCF001              +29 
00:0073CD FCF00A              +29 
00:0073CE FCF003              +29 
00:0073CF FF0A8C              +29 
00:0073D0 38000F              +29 
  :                            30 
00:0073D1 B603DE              +31 		j	read_launch_gate
  :                            32 
  :                            33 read_launch_gate?
00:0073D2 480A8F              +34 		lk	(-1*/$word-$byte*2)
00:0073D3 AF0A90              +35 		mta	(LINK$*/$word-$byte++GATE$)
00:0073D4 B603E7              +36 		j	qstart_nane
  :                            37 
00:0073D5 50B001              +38 		lx	1, y			. offset in granule
00:0073D6 60F011              +39 		la	qstart_fsid		. start page index file system
00:0073D7 340020              +40 		sabr	32			. place in general I/O window
00:0073D8 800005              +41 		ax	b			. granule * 64
00:0073D9 800A8B              +42 		ax	(32*/12)		. window tag
00:0073DA 4FA000              +43 		ql	0, x			. guaranteed in first page of FS
00:0073DB 47F000              +44 		qs	qstart_buffer
00:0073DC 4FA004              +45 		ql	4, x
00:0073DD 47F004              +46 		qs	qstart_buffer+4
  :                            47 
  :                            48 read_launch_gate
00:0073DE 4FF000              +49 		ql	qstart_buffer
00:0073DF A603E2              +50 		jpa	qstart_launch	. vector is simple
  :                            51 
00:0073E0 64F006              +52 		la	qstart_buffer+6,,i
00:0073E1 900A5F              +53 		or	(0800000s)	. vector is gate in template file
  :                            54 		
00:0073E2 750042              +55 qstart_launch	ii	SPAWN$
  :                            56 
00:0073E3 C603E7              +57 		jza	qstart_nane
00:0073E4 68F015              +58 		lb	qstart_namep
00:0073E5 750049              +59 		ii	TAG$		. add name to thread control block
00:0073E6 B603E8              +60 		j	qstart_go
  :                            61 
00:0073E7 650000              +62 qstart_nane	la	0,,xi		. whataver was found was not useful
00:0073E8 FCF00E              +63 qstart_go	$ret
00:0073E9 38000F              +63 
00:0073EA 3D0000              +63 
  :                            64 
  :                            184: 	$include	rwhandle
  :                            1 files		$tree
  :                            2 
                                open	$head_far	 params(opath,		int	;
  :                            4 				oflags,		int	)
  :                            5 	
00:0073EB 68F003              +6 	lb	opath
00:0073EC 60D000              +7 	la	0, b
00:0073ED 480A60              +8 	lk	(255*/16s)
00:0073EE AF0A8B              +9 	mtane	(AF_INET*/16s)
00:0073EF B603F1              +9 
00:0073F0 F70A91              +10 	go	(nfsopen)
00:0073F1 AF0A92              +11 	mtane	('/'*/16s)
00:0073F2 B603F4              +11 
00:0073F3 F70A93              +12 	go	(fspath_open)
  :                            13 
00:0073F4 3D0000              +14 	fret	0
  :                            15 
                                read_by_handle	$head_far	 params(rhandle,	int	;	. vector name read
                                					rbufferp,	int	;
  :                            18 					rbytes,		int	)
00:0073F5 60F003              +19 	la	rhandle
00:0073F6 750055              +20 	ii	READ_SOCKET$		. read both handle encoding words
00:0073F7 480A60              +21 	lk	(255*/16s)
00:0073F8 AF0A94              +22 	mtane	(TCP_TCB*/16:s)
00:0073F9 B603FB              +22 
00:0073FA B60414              +23 	j	read_socket
00:0073FB AF0A95              +24 	mtane	(IPPROTO_UDP*/16)
00:0073FC B603FE              +24 
00:0073FD B60414              +25 	j	read_socket
00:0073FE AF0A8B              +26 	mtane	(AF_INET*/16s)
00:0073FF B60401              +26 
00:007400 F70A96              +27 	go	(nfsread)
00:007401 AF0A79              +28 	mtane	(FS$DEVICE$ARRAY*/16)
00:007402 B60404              +28 
00:007403 B60406              +29 	j	fs24_handle_read
  :                            30 
  :                            31 					. more file system types go here
00:007404 65FFF7              +32 	la	-NO_FILE_TYPE,,xi
00:007405 3D0000              +33 	fret	0
  :                            34 
  :                            35 fs24_handle_read
  :                            36 					. open state block pointer in place of handle
  :                            37 					. place to insert checks for octet-oriented open
  :                            38 					. 1. is the descriptor at least 8 words?
  :                            39 					. where word 7 is flags word 6 octet column
  :                            40 					. 2. is flag O_OCTET on?
  :                            41 
00:007406 28F003              +42 	sb	rhandle			. you want that afterwarde
  :                            43 
00:007407 F8F005              +44 	c	(fs24_read)	b rbufferp rbytes
00:007408 F8F005              +44 
00:007409 F80005              +44 
00:00740A FCF003              +44 
00:00740B FF0A7B              +44 
00:00740C 38000F              +44 
00:00740D E60413              +45 	jna	fs24_handle_readx
00:00740E 160018              +46 	dsr	24
00:00740F 50F003              +47 	lx	rhandle			. this block was assigned to a handle
00:007410 D7A00A              +48 	da	fspaxq:quantum_pointer	. and has all components
00:007411 C7A00A              +49 	ds	fspaxq:quantum_pointer	. update the file position
00:007412 600008              +50 	la	8			. words result cached there
  :                            51 fs24_handle_readx
00:007413 3D0000              +52 	fret	0
  :                            53 
  :                            54 read_socket
                                	c	(recv)	rhandle		;
                                			rbufferp	;
                                			rbytes		;
00:007414 FD0000              +58 			0,,xi		.	flags default
00:007415 F8F006              +58 
00:007416 F8F006              +58 
00:007417 F8F006              +58 
00:007418 FCF004              +58 
00:007419 FF0A97              +58 
00:00741A 38000F              +58 
  :                            59 
00:00741B 3D0000              +60 	fret	0			.	status is whatever revc answered
  :                            61 
                                write_by_handle	$head_far	 params(whandle,	int	;	. vector name write
                                					wbufferp,	int	;
  :                            64 					wbytes,		int	)
00:00741C 60F003              +65 	la	whandle
00:00741D 750055              +66 	ii	READ_SOCKET$
00:00741E 480A60              +67 	lk	(255*/16s)
00:00741F AF0A94              +68 	mtane	(TCP_TCB*/16:s)
00:007420 B60422              +68 
00:007421 B6042A              +69 	j	write_socket
00:007422 AF0A95              +70 	mtane	(IPPROTO_UDP*/16)
00:007423 B60425              +70 
00:007424 B6042A              +71 	j	write_socket
  :                            72 
00:007425 AF0A8B              +73 	mtane	(AF_INET*/16s)
00:007426 B60428              +73 
00:007427 F70A98              +74 	go	(nfswrite)
  :                            75 					. more file system types go here
  :                            76 
00:007428 65FFF7              +77 	la	-NO_FILE_TYPE,,xi
00:007429 3D0000              +78 	fret	0			. 	status is whatever ISR answered
  :                            79 
  :                            80 write_socket
                                	c	(send)	whandle		;
                                			wbufferp	;
                                			wbytes		;
00:00742A FD0000              +84 			0,,xi		. 	flags default
00:00742B F8F006              +84 
00:00742C F8F006              +84 
00:00742D F8F006              +84 
00:00742E FCF004              +84 
00:00742F FF0A99              +84 
00:007430 38000F              +84 
  :                            85 
00:007431 3D0000              +86 	fret	0			. 	status is whatever send answered
  :                            87 
  :                            88 
                                seek_by_handle	$head_far	 params(seek_handle,	int	;
                                					seek_position,	long	;
  :                            91 					seek_from,	int	)	. vector name lseek
  :                            92 
00:007432 60F003              +93 	la	seek_handle
00:007433 750055              +94 	ii	READ_SOCKET$
00:007434 480A60              +95 	lk	(255*/16s)
00:007435 AF0A8B              +96 	mtane	(AF_INET*/16)
00:007436 B60438              +96 
00:007437 F70A9A              +97 	go	(nfs_seek)
00:007438 AF0A79              +98 	mtane	(FS$DEVICE$ARRAY*/16)
00:007439 B6043B              +98 
00:00743A B6043D              +99 	j	fs24_handle_seek
  :                            100 	
  :                            101 					. more file system types go here	
00:00743B 65FFF7              +102 	la	-NO_FILE_TYPE,,xi
00:00743C 3D0000              +103 	fret	0
  :                            104 
  :                            105 fs24_handle_seek
00:00743D 28F003              +106 	sb	seek_handle		. file open status block in place of handle
00:00743E F70A9B              +107 	go	(fs24_lseek)
  :                            108 
  :                            109 sync_by_handle	$head_far	 params(sync_handle,	int	)	. vector name fsync
  :                            110 
00:00743F 60F003              +111 	la	sync_handle
00:007440 750052              +112 	ii	READ_HANDLE$
00:007441 480A60              +113 	lk	(255*/16s)
00:007442 AF0A94              +114 	mtane	(TCP_TCB*/16:s)
00:007443 B60445              +114 
00:007444 B60449              +115 	j	sync_socket
00:007445 AF0A95              +116 	mtane	(IPPROTO_UDP*/16)
00:007446 B60448              +116 
00:007447 B60451              +117 	j	sync_ok			.	UDP is written thru
  :                            118 
  :                            119 					.	more file types go here
  :                            120 
00:007448 3D0000              +121 	fret	0			.	status is whatever handle ii answered
  :                            122 
  :                            123 sync_socket
                                	c	(send)	sync_handle	;
                                			0,,xi		;
                                			0,,xi		;	no bytes from nowhere
00:007449 FD0008              +127 			TCP_PSH,,xi
00:00744A FD0000              +127 
00:00744B FD0000              +127 
00:00744C F8F006              +127 
00:00744D FCF004              +127 
00:00744E FF0A99              +127 
00:00744F 38000F              +127 
00:007450 3D0000              +128 	fret	0
  :                            129 
00:007451 650000              +130 sync_ok	la	0,,xi			.	status is good before you even ask
00:007452 3D0000              +131 	fret	0
  :                            132 
  :                            133 close_by_handle	$head_far	 params(close_handle,	int	)
00:007453 60F003              +134 	la	close_handle
00:007454 E60463              +135 	jna	close_return_open_status	. handle was bad, just say so
00:007455 750052              +136 	ii	READ_HANDLE$
00:007456 480A60              +137 	lk	(255*/16s)
00:007457 AF0A94              +138 	mtane	(TCP_TCB*/16:s)
00:007458 B6045A              +138 
00:007459 F70A9C              +139 	go	(__net_disengage)
00:00745A AF0A95              +140 	mtane	(IPPROTO_UDP*/16)
00:00745B B6045D              +140 
00:00745C F70A9C              +141 	go	(__net_disengage)
00:00745D AF0A9D              +142 	mtane	(IPPROTO_TCP*/16)
00:00745E B60460              +142 
00:00745F F70A9C              +143 	go	(__net_disengage)
00:007460 AF0A8B              +144 	mtane	(AF_INET*/16s)
00:007461 B60463              +144 
00:007462 F70A9E              +145 	go	(nfsclose)
  :                            146 close_return_open_status
00:007463 3D0000              +147 	fret	0
  :                            148 
  :                            149 no_timeout	$head_far	 params(zero_timeout_handle,	int)
00:007464 60F003              +150 	la	zero_timeout_handle
00:007465 750055              +151 	ii	READ_SOCKET$
00:007466 480A60              +152 	lk	(255*/16s)
00:007467 AF0A94              +153 	mta	(TCP_TCB*/16:s)
00:007468 B60471              +154 	j	no_timeout_no_action
00:007469 560018              +155 	drr	24
00:00746A 34002F              +156 	sabr	BSOCKET
00:00746B 2E0008              +157 	sbl	8
00:00746C 9D00BC              +158 	orB	BSOCKET*/2,,xi
00:00746D 4E0008              +159 	rbr	8
00:00746E 30D004              +160 	z	transmission:timer(1), b	
00:00746F 650000              +161 	la	0,,xi				. this translates -> C00001 = nowhere
00:007470 34002F              +162 	sabr	BSOCKET
  :                            163 	
  :                            164 no_timeout_no_action
00:007471 3D0000              +165 	fret	0
  :                            166 
  :                            167 	$root
  :                            168 
  :                            185: 	$include	share_v
  :                            1 .	vector name	appdata_share
  :                            2 
  :                            3 appdata_vector*	$tree
                                	$head_far	 params(vector_index,	int	;
  :                            5 				data_words,	int	)
  :                            6 
  :                            7 
00:007472 50F003              +8 	lx	vector_index
00:007473 452F40              +9 	lr	DATA_SHARE_VECTOR(1)+1,,xi
00:007474 F60477              +10 	jxge	zero_out			. vector too high
00:007475 452F38              +11 	lr	DATA_SHARE_VECTOR(DATA_SHARES),,xi
00:007476 F60479              +12 	jxge	in_order
  :                            13 						. vector too low
  :                            14 zero_out
00:007477 650000              +15 	la	0,,xi
00:007478 B60485              +16 	j	end_of
  :                            17 
  :                            18 in_order
00:007479 750053              +19 	ii	READ_XVECTOR$			. populated already?
00:00747A 3E0486              +20 	lcal	qualify
00:00747B 78F004              +21 	tp	data_words			. seeking to remove?
00:00747C B60484              +22 	j	remove				. remove
00:00747D D60482              +23 	jnza	acquire				. participate
00:00747E 60F004              +24 	la	data_words			. not populated
00:00747F C60485              +25 	jza	end_of				. participating but not assigning
00:007480 75004A              +26 	ii	ASSIGN_XVECTOR$			. get some
00:007481 C60485              +27 	jza	end_of				. if available
00:007482 75004D              +28 acquire	ii	WRITE_AVECTOR$			. write application vector
00:007483 B60485              +29 	j	end_of
  :                            30 
00:007484 C60485              +31 remove	jza	end_of				. if nothing you may keep it
  :                            32 .	ii	(BANK$FREE)			. otherwise you need
  :                            33 .	la	0,,xi				. the descriptor
  :                            34 .	ii	WRITE_XVECTOR			. not the Page Index
  :                            35 						. so far you haven't got that
00:007485 3D0000              +36 end_of	$ret
  :                            37 
00:007486 480A9F              +38 qualify	lk	(0C00001s)			. translate nothing to zero
00:007487 AF0001              +39 	mta	k
00:007488 350000              +40 	lret	0
00:007489 650000              +41 	la	0,,xi
00:00748A 350000              +42 	lret	0
  :                            43 	$root
  :                            186 
  :                            187 fs_xfer4w* $proc
  :                            188 	qpush	4*?-4, y
  :                            189 	qpop	4*?-4, x
  :                            190 	$end
  :                            191 
  :                            192 $(0)
00:00748B 160006              +193 fs_xfer	dsr		6
00:00748C 400004              +194 	lr		a
00:00748D B604B0              +195 	j		fs_xfer64?
  :                            196 
  :                            197 fs_xfer64!
00:00748E 8FB000              +198 ?	$do	16,	fs_xfer4w
00:00748F 87A000              +198 
00:007490 8FB004              +198 
00:007491 87A004              +198 
00:007492 8FB008              +198 
00:007493 87A008              +198 
00:007494 8FB00C              +198 
00:007495 87A00C              +198 
00:007496 8FB010              +198 
00:007497 87A010              +198 
00:007498 8FB014              +198 
00:007499 87A014              +198 
00:00749A 8FB018              +198 
00:00749B 87A018              +198 
00:00749C 8FB01C              +198 
00:00749D 87A01C              +198 
00:00749E 8FB020              +198 
00:00749F 87A020              +198 
00:0074A0 8FB024              +198 
00:0074A1 87A024              +198 
00:0074A2 8FB028              +198 
00:0074A3 87A028              +198 
00:0074A4 8FB02C              +198 
00:0074A5 87A02C              +198 
00:0074A6 8FB030              +198 
00:0074A7 87A030              +198 
00:0074A8 8FB034              +198 
00:0074A9 87A034              +198 
00:0074AA 8FB038              +198 
00:0074AB 87A038              +198 
00:0074AC 8FB03C              +198 
00:0074AD 87A03C              +198 
00:0074AE 850040              +199 	ax, xi		64
00:0074AF 8D0040              +200 	ay, xi		64
  :                            201 fs_xfer64?
00:0074B0 1E048E              +202 	jdr		fs_xfer64!
  :                            203 
00:0074B1 650000              +204 	la, xi		0
00:0074B2 360004              +205 	dsl		4
00:0074B3 400004              +206 	lr		a
00:0074B4 B604B9              +207 	j		fs_xfer4?
  :                            208 
  :                            209 fs_xfer4!
00:0074B5 8FB000              +210 	qpush		0, y
00:0074B6 87A000              +211 	qpop		0, x
00:0074B7 850004              +212 	ax, xi		4
00:0074B8 8D0004              +213 	ay, xi		4
  :                            214 fs_xfer4?
00:0074B9 1E04B5              +215 	jdr		fs_xfer4!
  :                            216 
00:0074BA 0E0016              +217 	sbr		22
00:0074BB 400005              +218 	lr		b
00:0074BC B604C1              +219 	j		fs_xfer1?
  :                            220 
  :                            221 fs_xfer1!
00:0074BD F8B000              +222 	push		0, y
00:0074BE 38A000              +223 	pop		0, x
00:0074BF 850001              +224 	ax, xi		1
00:0074C0 8D0001              +225 	ay, xi		1
  :                            226 fs_xfer1?
00:0074C1 1E04BD              +227 	jdr		fs_xfer1!
  :                            228 
00:0074C2 350000              +229 	lret		0
  :                            230 
  :                            231: 	$include	claimfob
  :                            1 claimfob	$tree
  :                            2 
  :                            3 claim	$head_far	 params(rcformatw,	int)
  :                            4 
00:0074C3 40207D              +5 	lr	FILE_OPEN_HEAPU		. heap top blocks in use + freed
00:0074C4 58207C              +6 	ly	FILE_OPEN_HEAP		. heap start
  :                            7 
00:0074C5 700003              +8 	tnz	y
00:0074C6 B604C8              +8 
00:0074C7 B604D7              +9 	j	x_claim			. not qualified for automatic 
  :                            10 					. file open blocks
00:0074C8 60F003              +11 	la	rcformatw
00:0074C9 A500FF              +12 	and	255,,xi
00:0074CA 480AA0              +13 	lk	(255*/16++255s)		. must be relinquished descriptor
  :                            14 					. 0.?.exact_size
  :                            15 
00:0074CB FE04D3              +16 reclaim	jyge	claim_new
00:0074CC 68B000              +17 	lb	0, y 
00:0074CD AF0005              +18 	mtane	b
00:0074CE B604D0              +18 
00:0074CF B604D5              +19 	j	claimed			. we'll take it
  :                            20 
00:0074D0 AD00FF              +21 	andB	255,,xi			. walk to next descriptor
00:0074D1 8CD001              +22 	ay	1, b, i			. descriptor words + 1
00:0074D2 B604CB              +23 	j	reclaim
  :                            24 
  :                            25 claim_new
00:0074D3 C4B001              +26 	aa	1, y, i			. write new heap top
[+0006]10
00:0074D4 750000              +27 	ii	FO$FRAME		. y is old head top
  :                            28 
00:0074D5 60F003              +29 claimed	la	rcformatw
00:0074D6 20B000              +30 	sa	0, y			. a unchanged and y -> descriptor
  :                            31 					. B1_TABLEP already updated
00:0074D7 3D0000              +32 x_claim	$ret
  :                            33 		$root
  :                            232: 	$include	align
  :                            1 quantum	$tree
  :                            2 
00:0074D8 D70006              +3 align	da	6
00:0074D9 C80004              +4 	ab	a
00:0074DA 650000              +5 	la	0,,xi
00:0074DB F50003              +6 	d	3,,xi
00:0074DC 280007              +7 	sb	7		. keep 3s remainder
00:0074DD CE04E5              +8 	jzb	aligned
  :                            9 	
00:0074DE BD0003              +10 	xorB	3,,xi		. add mirror of remainder
00:0074DF 650000              +11 	la	0,,xi		. to octet pointer
00:0074E0 D7A001              +12 	da	1, x		. in file open state
00:0074E1 C7A001              +13 	ds	1, x
00:0074E2 B70005              +14 	sc	b
00:0074E3 C8A000              +15 	ab	0, x
00:0074E4 28A000              +16 	sb	0, x
00:0074E5 350000              +17 aligned	lret	0
  :                            18 
  :                            19 compress
00:0074E6 20A000              +20 	sa	0, x		. 1st word as is 00xxxx
00:0074E7 600006              +21 	la	6		. then 3 * 00xxxx -> [ a b ]
00:0074E8 260008              +22 	sal	8
00:0074E9 560010              +23 	drr	16
00:0074EA 980007              +24 	orB	7
00:0074EB C7A001              +25 	ds	1, x
00:0074EC 350000              +26 	lret	0
  :                            27 
00:0074ED CFA000              +28 retell	dl	0, x
00:0074EE F50003              +29 	d	3,,xi
00:0074EF F80006              +30 	push	6
00:0074F0 F80004              +31 	push	a
00:0074F1 600005              +32 	la	b
00:0074F2 68A002              +33 	lb	2, x
00:0074F3 F50003              +34 	d	3,,xi
00:0074F4 200005              +35 	sa	b
00:0074F5 380004              +36 	pop	a
00:0074F6 380006              +37 	pop	6
00:0074F7 350000              +38 	lret	0
  :                            39 
  :                            40 	$root
  :                            41 
  :                            233 
  :                            234 	$path		../
  :                            235: 	$include	rpc/nfsclien
  :                            1 
  :                            2 	$if		0
  :                            3 	$path		../
  :                            4 	$include	def/rta.def
  :                            5 	$include	def/vector.def
  :                            6 	$include	def/ii.def
  :                            7 	$include	language/stack.def
  :                            8 	$include	fs/response.def
  :                            9 	$include	t77.4/dq.def
  :                            10 	$include	t77.4/ip.def
  :                            11 	$include	t77.4/tcp.def
  :                            12 	$include	t77.4/socket.def
  :                            13 	$path
  :                            14 	$endif
  :                            15 
  :                            16 p	$proc
  :                            17 XDR_TXLONG* $name
  :                            18 	dsl	16
  :                            19 XDR_TXINT* $name
  :                            20 	dsr	8
  :                            21 	sbr	8
  :                            22 	ds	p(1, 1)
  :                            23 	$end
  :                            24 
  :                            25 $(66::,x)
42:000000                     +26 transmission	tcp_connection
42:000001                     +26 
42:000002                     +26 
42:000003                     +26 
42:000004                     +26 
42:000005                     +26 
42:000006                     +26 
42:000008                     +26 
42:00000A                     +26 
42:00000C                     +26 
42:00000E                     +26 
42:000010                     +26 
42:000011                     +26 
42:000012                     +26 
42:000013                     +26 
42:000014                     +26 
42:000015                     +26 
42:000016                     +26 
42:000017                     +26 
  :                            27 
  :                            28 $(70::,fp)
  :                            29 tcpa	$res	2
46:00000E                     +30 request	xdr_rpcreq
46:000010                     +30 
46:000012                     +30 
46:000024                     +30 
46:000026                     +30 
46:000029                     +30 
  :                            31 
  :                            32 $(70::,fp)
  :                            33 tcpresp	$res	2
  :                            34 response xdr_rpcresp
  :                            35 
  :                            36 $(67::,y)
43:000000                     +37 openfile_bloc	filenfs
43:000001                     +37 
43:000004                     +37 
43:000056                     +37 
43:000058                     +37 
43:00005A                     +37 
43:00005C                     +37 
43:00005E                     +37 
43:000060                     +37 
43:000062                     +37 
43:000064                     +37 
  :                            38 
  :                            39 $(1:*1)
  :                            40 .	these items are in KERNEL_B1(1)
  :                            41 .	so switch to KERNEL_B1(1) before touching them
  :                            42 
01:000040 000000000000        +43 txid			0L	. assembled into kernel B1
  :                            44 				. do not touch when in application B1
  :                            45 
01:000042 000000000100        +46 client_port		256L	. privileged ports 256..511
  :                            47 
  :                            48 
  :                            49 		$if	0
  :                            50 unixauth_v		00000001, 00000018q
  :                            51 			00000000, 00000000q
  :                            52 			501,	 20, 1,	20o
  :                            53 			0q
  :                            54 
  :                            55 nullauth_v		0h
  :                            56 		$endif
  :                            57 
  :                            58 $(0)
  :                            59 
  :                            60 rpc	$tree			. return a nonzero # that's not the same
  :                            61 				. as any other # returned from here recently
  :                            62 				. regardless of cores and threads
  :                            63 getunique
00:0074F8 750059              +64 	ii	KERNEL$B1_1
  :                            65 
00:0074F9 FD0007              +66 	push	7,,xi		. switch interrupt to highest value
00:0074FA 27F000              +67 	sim	0, sp
(+01)0f
00:0074FB 070040              +68 	ts	txid		. lock
00:0074FC B604FB              +69 	j	$-1
(+01)0f
00:0074FD 170041              +70 	inc	txid+1		. advance
(+01)0f
00:0074FE 600041              +71 	la	txid+1		. then acquire
00:0074FF C604FD              +72 	jza	$-2		. don't use zero. The server might not believe it
(+01)0f
00:007500 300040              +73 	z	txid		. free
00:007501 27F000              +74 	sim	0, sp		. restore interrupt mask at entry
00:007502 17000F              +75 	inc	sp
  :                            76 
00:007503 750058              +77 	ii	B1$
00:007504 350000              +78 	lret	0
  :                            79 
  :                            80 get_client_port
00:007505 750059              +81 	ii	KERNEL$B1_1
  :                            82 
00:007506 FD0007              +83 	push	7,,xi		. switch interrupt mask to highest value
00:007507 27F000              +84 	sim	0, sp
(+01)0f
00:007508 070042              +85 	ts	client_port	. lock
00:007509 B60508              +86 	j	$-1
(+01)0f
00:00750A 600043              +87 	la	client_port+1	. acquire
(+01)0f
00:00750B 170043              +88 	inc	client_port+1	. then advance
(+01)0f
00:00750C 300042              +89 	z	client_port	. free
00:00750D 27F000              +90 	sim	0, sp		. restore interrupt mask at entry
00:00750E 17000F              +91 	inc	sp
  :                            92 
00:00750F A501FF              +93 	and	511,,xi		. use only values 256..511
00:007510 950100              +94 	or	256,,xi
  :                            95 
00:007511 750058              +96 	ii	B1$
00:007512 350000              +97 	lret	0
  :                            98 
  :                            99 	$root
  :                            100 
  :                            101 
  :                            102 
  :                            103 .	vector name nfsmount
  :                            104 
  :                            105 $(67::,y)
  :                            106 server_response xdr_rpcresp
  :                            107 
  :                            108 $(67::,y)
  :                            109 mountres	xdr_mountres3
  :                            110 
  :                            111 $(67::,y)
  :                            112 readrespo	xdr_read3res
  :                            113 
  :                            114 $(67::,y)
  :                            115 result_attr	post_op_attr
  :                            116 
  :                            117 $(0)
  :                            118 TARGET_MOUNTD	$equ	RPCADAPT(MOUNTD)
  :                            119 
  :                            120 nfs_fsmount	$tree
                                	$head_far	 params(local_port,	int		;
                                				mount_pathp,	int		;
                                				fobloc,		int	)	;
                                								;
                                			scalars(mname_bytes,	int		;
                                				connectionp,	int		;
00:007513 FD0000              +127 				status_final,	int		)
00:007514 FD0000              +127 
00:007515 FD0000              +127 
  :                            128 
00:007516 50F007              +129 	lx	mount_pathp
00:007517 CFA003              +130 	dl	3, x
00:007518 480A6A              +131 	lk	(00FFFF)
00:007519 BF0AA1              +132 	mlb	(MOUNTD_PORT)
00:00751A C70006              +133 	ds	6
00:00751B CFA001              +134 	dl	1,x
  :                            135 
00:00751C BFF006              +136 	mlb	local_port
  :                            137 
00:00751D 8F0004              +138 	c	(__connect)	a,,float
00:00751E FCF004              +138 
00:00751F FF0AA2              +138 
00:007520 38000F              +138 
00:007521 E6055B              +139 	jna	nfs_mount_x
  :                            140 
00:007522 10F001              +141 	sx	connectionp
  :                            142 
00:007523 68F007              +143 	lb	mount_pathp
00:007524 60D000              +144 	la	0, b
00:007525 060008              +145 	sar	8
00:007526 A500FF              +146 	and	255,,xi		. bytes in mount point name
00:007527 20F002              +147 	sa	mname_bytes
  :                            148 
00:007528 58F008              +149 	ly	fobloc
00:007529 68B059              +150 	lb	openfile_bloc:auth_blank+3
  :                            151 				. retrieve auth block bytes length
  :                            152 				. for copying auth block
  :                            153 				. to request_header
  :                            154 _COUNT	$equ	4
  :                            155 
                                	lc	nfs:startrq	connectionp			;
                                				_COUNT, a, i			;
                                				(xdri(MOUNTD)d),,long		;
                                				(MOUNT_VERS:d),,long		;
                                				(MOUNTPROC3_MNT:d),,long	;
                                				4*4, b, i			;
00:00752A FCB056              +162 				openfile_bloc:auth_unix,,i
00:00752B FCD010              +162 
00:00752C 9F0AA3              +162 
00:00752D 9F0AA5              +162 
00:00752E 9F0AA7              +162 
00:00752F FCC004              +162 
00:007530 F8F00A              +162 
00:007531 FCF00A              +162 
00:007532 3E070F              +162 
00:007533 38000F              +162 
  :                            163 
00:007534 60F007              +164 	la	mount_pathp
  :                            165 
                                	lc	nfs:counted_send_opaque	connectionp		;
                                					mname_bytes		;
                                					6, a, i			;
00:007535 FD5018              +169 					05000++TCP_ACK++TCP_PSH,,xi			
00:007536 FCC006              +169 
00:007537 F8F004              +169 
00:007538 F8F004              +169 
00:007539 FCF004              +169 
00:00753A 3E0757              +169 
00:00753B 38000F              +169 
00:00753C E60555              +170 	jna	nfs_mount_y
  :                            171 
  :                            172 nfs_mount_?
00:00753D 750041              +173 	ii	YIELD$
00:00753E 60A010              +174 	la	transmission:receiveq.head
00:00753F D60545              +175 	jnza	nfs_mount_deliver
  :                            176 
00:007540 60A001              +177 	la	transmission:state
00:007541 C5FFFB              +178 	aa	-TCP_ESTABLISHED,,xi
00:007542 C6053D              +179 	jza	nfs_mount_?
00:007543 65FFE0              +180 	la	-FILE_NOT_OPEN,,xi
00:007544 B6055B              +181 	j	nfs_mount_x
  :                            182 
  :                            183 nfs_mount_deliver
00:007545 58C006              +184 	ly	axw:apdata, a
00:007546 5CB002              +185 	ly	2, y, i			. skip the TCP micro-desciptor @ segment start
00:007547 60B005              +186 	la	server_response:rstat+1
00:007548 C6054B              +187 	jza	nfs_astat?
  :                            188 
00:007549 65FFF3              +189 	la	-NOT_YOU,,xi
00:00754A B60555              +190 	j	nfs_mount_y
  :                            191 
  :                            192 nfs_astat?
00:00754B 60B00D              +193 	la	server_response:yes:astat+1
00:00754C C60550              +194 	jza	nfs_copyback_fh
00:00754D B5FFFF              +195 	xor	-1,,xi
00:00754E 64C001              +196 	la	1, a, i
00:00754F B60555              +197 	j	nfs_mount_y
  :                            198 
  :                            199 nfs_copyback_fh
00:007550 50F008              +200 	lx	fobloc
00:007551 54A034              +201 	lx	openfile_bloc:nfs_handle,x,i
00:007552 5CB00E              +202 	ly	server_response:yes:response,,i
00:007553 3E0772              +203 	lcal	nfs:deliver_fhandle3
00:007554 650000              +204 	la	0,,xi
  :                            205 
  :                            206 nfs_mount_y
00:007555 20F000              +207 	sa	status_final
00:007556 50F001              +208 	lx	connectionp
  :                            209 						. to get here the queue head was sampled		
00:007557 FF0AA9              +210 	call	(tcp_release_rxline)		. this is a locked read + drop
00:007558 50F001              +211 	lx	connectionp
  :                            212 
  :                            213 	$if	1
00:007559 0FA001              +214 	n	transmission:state
  :                            215 	$else
  :                            216 	la	DAYCLOCK$			. direct state machine
  :                            217 	sa	transmission:timer(1)		. to execute outward close
  :                            218 	$endif
  :                            219 
00:00755A 60F000              +220 	la	status_final
  :                            221 nfs_mount_x
00:00755B FCF003              +222 	$ret
00:00755C 38000F              +222 
00:00755D 3D0000              +222 
  :                            223 	$root
  :                            224 
  :                            225 
  :                            226 .	successful return is a handle #
  :                            227 .	any other return is zero minus approximate errno
  :                            228 .	-1 and +errno do not exist. -errno exists
  :                            229 
  :                            230 nfs_open_path*	$tree
                                	$head_far	 params(pathp,		int	;
                                				flags,		int)	;
                                							;
                                			scalars(string_bytes,	int	;
                                				connectionp,	int	;
                                				request_port,	int	;
                                				fobloc,		int	;
                                				sattr_3,	12-10	;
                                				g_3,		float,	(1, 0q)		;
                                				u_3,		float,	(1, 0q)		;
                                				mode_3,		float,	(1, 01a4q)	;
                                				createmode_3,	long,	(1L)		;
                                				status,		int	;
00:00755E FD0000              +244 				stream_registers, float, RDATAC)
00:00755F FD0000              +244 
00:007560 FD0000              +244 
00:007561 FD0000              +244 
00:007562 9F0A6B              +244 
00:007563 8F0AAA              +244 
00:007564 8F0AAA              +244 
00:007565 8F0AAE              +244 
00:007566 9F0AA3              +244 
00:007567 FD0000              +244 
00:007568 8F0014              +244 
  :                            245 
[+0009]10
00:007569 750000              +246 	ii	ON_NETB$				. must run with default net buffer pools
00:00756A 60207A              +247 	la	NFS_MOUNTS
00:00756B E6056D              +248 	jna	common_mounts_hidden			. if you need common mounts that crashes you
00:00756C 340022              +249 	sabr	NFS_BDIAL
  :                            250 common_mounts_hidden
  :                            251 
00:00756D F80AB2              +252 	c	(claim_fob)	(FS$NFS,,FS$NFS_WORDS)	. file open descriptor in application external stack
00:00756E FCF001              +252 
00:00756F FF0A77              +252 
00:007570 38000F              +252 
  :                            253 
00:007571 700003              +254 	tz	y
00:007572 B60575              +255 	j	forward
00:007573 45FFF4              +256 	lr	-NO_STORAGE,,xi
00:007574 B6064E              +257 	j	nfs_open_path_e
  :                            258 
00:007575 18F015              +259 forward	sy	fobloc
00:007576 60F01D              +260 	la	flags
00:007577 20B007              +261 	sa	openfile_bloc:o:flags
00:007578 160030              +262 	dsr	48				. initialise 72-bit position in file
00:007579 30B001              +263 	z	openfile_bloc:quantum_pointer
00:00757A C7B002              +264 	ds	openfile_bloc:quantum_pointer+1
  :                            265 
00:00757B 54B056              +266 	lx	openfile_bloc:auth_blank,,i		. any different auth
00:00757C 58F01C              +267 	ly	pathp
00:00757D 58B005              +268 	ly	5, y				. skip the the mount path
00:00757E 58B005              +269 	ly	5, y				. pull up the auth pointer
00:00757F 700003              +270 	tnz	y
00:007580 B60582              +270 
00:007581 5C0AB3              +271 	ly	(authunix_blank),,i		. must be introduced here
00:007582 3E078C              +272 	lcal	nfs:deliver_auth
  :                            273 
00:007583 3E0505              +274 	lcal	rpc:get_client_port
00:007584 20F016              +275 	sa	request_port
  :                            276 
00:007585 50F01C              +277 	lx	pathp
  :                            278 
00:007586 CFA001              +279 	dl	1, x
00:007587 480A6A              +280 	lk	(00FFFF)
00:007588 BFF016              +281 	mlb	request_port
  :                            282 
00:007589 C7A001              +283 	ds	1, x
  :                            284 
                                	c	(__bind)	(IPPROTO_TCP*/16s)	;
00:00758A 9F0004              +286 				a,,long
00:00758B F80A9D              +286 
00:00758C FCF003              +286 
00:00758D FF0AC7              +286 
00:00758E 38000F              +286 
  :                            287 
00:00758F 400004              +288 	lr	a
00:007590 E6064A              +289 	jna	nfs_open_path_w				. unwind the connection attempt
00:007591 50F01C              +290 	lx	pathp
00:007592 4FA001              +291 	ql	1, x
00:007593 480A6A              +292 	lk	(00FFFF)
00:007594 BFF016              +293 	mlb	request_port
  :                            294 
  :                            295 connection_launch
00:007595 8F0004              +296 	c	(__connect)	a,,float		. local port socket index don't know
00:007596 FCF004              +296 
00:007597 FF0AA2              +296 
00:007598 38000F              +296 
  :                            297 							. low-level call
  :                            298 							. sockets, buffers remain addressable
00:007599 400004              +299 	lr	a
00:00759A E60648              +300 	jna	nfs_open_path_v				. free port socket
  :                            301 
  :                            302 connection_running
00:00759B 10F017              +303 	sx	connectionp				. on return from connect
  :                            304 							. B1 is application B1
  :                            305 
  :                            306 							. use the local port of the first connection
  :                            307 
00:00759C 68F01C              +308 	lb	pathp
  :                            309 
                                	c	(nfsmount)	request_port			;	. local port #
                                				5, b				;	. mount path pointer
00:00759D F8F015              +312 				fobloc					. first handle
00:00759E F8D005              +312 
00:00759F F8F018              +312 
00:0075A0 FCF003              +312 
00:0075A1 FF0AC8              +312 
00:0075A2 38000F              +312 
  :                            313 
00:0075A3 A605A6              +314 	jpa	fs_mounted
  :                            315 
00:0075A4 45FFE0              +316 	lr	-FILE_NOT_OPEN,,xi
00:0075A5 B60646              +317 	j	nfs_open_path_u				. disconnect and free port socket
  :                            318 
  :                            319 fs_mounted
00:0075A6 58F015              +320 	ly	fobloc
00:0075A7 50F017              +321 	lx	connectionp
00:0075A8 10B005              +322 	sx	openfile_bloc:socket+1			. save transmission control block pointer
00:0075A9 65002F              +323 	la	BSOCKET,,xi
[+000b]10
00:0075AA 750000              +324 	ii	A$IDX
00:0075AB 20B004              +325 	sa	openfile_bloc:socket			. save storage block index
  :                            326 
00:0075AC 60F01C              +327 	la	pathp					. read the word at pointer *pathp
00:0075AD 60C000              +328 	la	0, a
00:0075AE 060008              +329 	sar	8					. centre octet is bytes in name
00:0075AF A500FF              +330 	and	255,,xi
00:0075B0 20F018              +331 	sa	string_bytes
00:0075B1 50B035              +332 	lx	openfile_bloc:nfs_handle+1
00:0075B2 800004              +333 	ax	a
  :                            334 
00:0075B3 58F015              +335 	ly	fobloc
00:0075B4 68B059              +336 	lb	openfile_bloc:auth_blank+3		. obtain auth block bytes length
  :                            337 
00:0075B5 60F01D              +338         la	flags
00:0075B6 A50200              +339 	and	O_CREAT,,xi
00:0075B7 C605EB              +340 	jza	obtain_existing_handle
00:0075B8 60F01D              +341 	la	flags
00:0075B9 A50400              +342 	and	O_TRUNC,,xi
00:0075BA C605BC              +343 	jza	open_create_unguarded
00:0075BB 30F006              +344 	z	createmode_3+1		. force create again
  :                            345 open_create_unguarded
  :                            346 
                                	lc	nfs:startrq	connectionp			;
                                				8+28+12, x, i			;
                                				(xdri(NFSD)d),,long 		;
                                				(NFS_VERS:d),,long		;
                                				(NFSPROC3_CREATE:d),,long	;
                                				4*4, b, i			;
00:0075BC FCB056              +353 				openfile_bloc:auth_blank,,i
00:0075BD FCD010              +353 
00:0075BE 9F0AC9              +353 
00:0075BF 9F0AA5              +353 
00:0075C0 9F0ACB              +353 
00:0075C1 FCA030              +353 
00:0075C2 F8F020              +353 
00:0075C3 FCF00A              +353 
00:0075C4 3E070F              +353 
00:0075C5 38000F              +353 
  :                            354 
00:0075C6 58F015              +355 	ly	fobloc
00:0075C7 60B035              +356 	la	openfile_bloc:nfs_handle+1
  :                            357 
                                	lc	nfs:send_opaque16	connectionp		;
                                					4, a, i			;
00:0075C8 FCB034              +360 					openfile_bloc:nfs_handle,,i
00:0075C9 FCC004              +360 
00:0075CA F8F019              +360 
00:0075CB FCF003              +360 
00:0075CC 3E074E              +360 
00:0075CD 38000F              +360 
00:0075CE 58F01C              +361 	ly	pathp
                                	lc	nfs:counted_send_opaque connectionp		;
                                					string_bytes		;
                                					6, y, i			;
00:0075CF FD5010              +365 					05000++TCP_ACK,,xi
00:0075D0 FCB006              +365 
00:0075D1 F8F01A              +365 
00:0075D2 F8F01A              +365 
00:0075D3 FCF004              +365 
00:0075D4 3E0757              +365 
00:0075D5 38000F              +365 
  :                            366 
00:0075D6 58F015              +367 	ly	fobloc
00:0075D7 60B057              +368 	la	openfile_bloc:auth_unix:auth:family+1
00:0075D8 C5FFFF              +369 	aa	-1,,xi
00:0075D9 D605DE              +370 	jnza	auth_another_family?
00:0075DA 4FB05E              +371 	ql	openfile_bloc:auth_unix:auth:uid
00:0075DB C7F00D              +372 	ds	u_3+2
00:0075DC CF0006              +373 	dl	6
00:0075DD C7F011              +374 	ds	g_3+2
  :                            375 
  :                            376 auth_another_family?
  :                            377 
                                	lc	nfs:send_opaque16	connectionp		;
                                					12+24+4,,xi		;
00:0075DE FCF005              +380 					createmode_3,,i		.	unguarded
00:0075DF FD0028              +380 
00:0075E0 F8F019              +380 
00:0075E1 FCF003              +380 
00:0075E2 3E074E              +380 
00:0075E3 38000F              +380 
  :                            381 
  :                            382 .	la	05000++TCP_PSH++TCP_ACK,,xi
  :                            383 .	sa	01b
  :                            384 
00:0075E4 4D5018              +385 	lk	05000++TCP_PSH++TCP_ACK,,xi
  :                            386 
00:0075E5 650000              +387 	la	0,,xi
00:0075E6 6D0000              +388 	lb	0,,xi		. ??????????
00:0075E7 50F017              +389 	lx	connectionp
00:0075E8 FF0ACD              +390 	call	(tcp_tx)
  :                            391 	
  :                            392 	$if	0
                                	lc	nfs:counted_send_opaque	connectionp		;	push it out
                                					0,,xi			;
                                					0,,xi			;
  :                            396 					05000++TCP_PSH++TCP_ACK,,xi
  :                            397 	$endif
  :                            398 
00:0075E9 50F017              +399 	lx	connectionp
00:0075EA B60606              +400 	j	readsocket
  :                            401 
  :                            402 obtain_existing_handle
                                	lc	nfs:startrq	connectionp			;
                                				8, x, i				;	+ 4 + 4	
                                				(xdri(NFSD)d),,long		;
                                				(NFS_VERS:d),,long		;
                                				(NFSPROC3_LOOKUP:d),,long	;
                                				4*4, b, i			;
00:0075EB FCB056              +409 				openfile_bloc:auth_blank,,i
00:0075EC FCD010              +409 
00:0075ED 9F0AA5              +409 
00:0075EE 9F0AA5              +409 
00:0075EF 9F0ACB              +409 
00:0075F0 FCA008              +409 
00:0075F1 F8F020              +409 
00:0075F2 FCF00A              +409 
00:0075F3 3E070F              +409 
00:0075F4 38000F              +409 
  :                            410 
00:0075F5 58F015              +411 	ly	fobloc
00:0075F6 60B035              +412 	la	openfile_bloc:nfs_handle+1
  :                            413 
                                	lc	nfs:send_opaque16	connectionp		;
                                					4, a, i			;
00:0075F7 FCB034              +416 					openfile_bloc:nfs_handle,,i	
00:0075F8 FCC004              +416 
00:0075F9 F8F019              +416 
00:0075FA FCF003              +416 
00:0075FB 3E074E              +416 
00:0075FC 38000F              +416 
  :                            417 
00:0075FD 58F01C              +418 	ly	pathp
                                	lc	nfs:counted_send_opaque	connectionp		;
                                					string_bytes		;
                                					6, y, i			;
00:0075FE FD5018              +422 					05000++TCP_PSH++TCP_ACK,,xi
00:0075FF FCB006              +422 
00:007600 F8F01A              +422 
00:007601 F8F01A              +422 
00:007602 FCF004              +422 
00:007603 3E0757              +422 
00:007604 38000F              +422 
  :                            423 
  :                            424 .	lr	a
  :                            425 .	jna	nfs_open_path_u
  :                            426 
00:007605 50F017              +427 	lx	connectionp
  :                            428 
  :                            429 readsocket
00:007606 750041              +430 	ii	YIELD$
00:007607 60A010              +431 	la	transmission:receiveq:head
00:007608 D6060E              +432 	jnza	data
00:007609 60A001              +433 	la	transmission:state
00:00760A C5FFFB              +434 	aa	-TCP_ESTABLISHED,,xi
00:00760B C60606              +435 	jza	readsocket
00:00760C 45FFE0              +436 	lr	-FILE_NOT_OPEN,,xi
00:00760D B60646              +437 	j	nfs_open_path_u		. close connection
  :                            438 					. and free port socket
  :                            439 					. and cancel fobloc
00:00760E 58C006              +440 data	ly	axw:apdata, a
00:00760F 5CB002              +441 	ly	2, y, i			. advance over record mark
00:007610 60B005              +442 	la	server_response:rstat+1
00:007611 C60614              +443 	jza	data?
00:007612 407FF3              +444 	lr	-NOT_YOU		. cache credentials objection
00:007613 B60640              +445 	j	nfs_open_path_s		. unwind the open attempt
  :                            446 
00:007614 60B00D              +447 data?	la	server_response:yes:astat+1
00:007615 C60619              +448 	jza	data!			. remote operation worked
00:007616 B5FFFF              +449 	xor	-1,,xi			. otherwise rerurn -errno
00:007617 44C001              +450 	lr	1, a, i			. cache NOT errno + 1
00:007618 B60640              +451 	j	nfs_open_path_s		. unwind the open attempt
  :                            452 
00:007619 50F015              +453 data!	lx	fobloc
00:00761A 54A034              +454 	lx	openfile_bloc:nfs_handle,x,i
00:00761B 5CB00E              +455 	ly	server_response:yes:response,,i
  :                            456 
00:00761C 60F01D              +457 	la	flags
00:00761D A50200              +458 	and	O_CREAT,,xi
00:00761E C60626              +459 	jza	handle_retrieve		. for create has different
  :                            460 					. responses
00:00761F 60B001              +461 	la	1, y			. post op handle
00:007620 680004              +462 	anu	1,,xi			. is nice?
00:007621 DD0001              +462 
00:007622 DE0640              +463 	jnzb	nfs_open_path_s		. is don't nice?
  :                            464 
00:007623 8D0002              +465 	ay	2,,xi			. that should be the handle
00:007624 3E0772              +466 	lcal	nfs:deliver_fhandle3	. if we'd like any post-op attributes			
  :                            467 					. y should be pointing at they
  :                            468 
00:007625 B6063A              +469 	j	splice_handle
  :                            470 
  :                            471 handle_retrieve
00:007626 3E0772              +472 	lcal	nfs:deliver_fhandle3
  :                            473 
00:007627 50F015              +474 	lx	fobloc
00:007628 54A008              +475 	lx	openfile_bloc:dimensions,x,i
  :                            476 					. y hasn't moved from -> handle byte count
00:007629 60B001              +477 	la	1, y			. go past the handle
00:00762A 64C001              +478 	la	1, a, i
00:00762B 060001              +479 	sar	1
00:00762C 8CC002              +480 	ay	2, a, i
  :                            481 
00:00762D 3E07BD              +482 	lcal	nfs:capture_fileinfo
  :                            483 
00:00762E 60F01D              +484 	la	flags			. O_APPEND tested here
00:00762F A50008              +485 	and	O_APPEND,,xi		. is not considered when O_CREAT
00:007630 C6063A              +486 	jza	splice_handle		. default is write file from start
  :                            487 					. attributes are in fobloc
00:007631 58F015              +488 	ly	fobloc
00:007632 4FB014              +489 	ql	openfile_bloc:dimensions:attr:size	00xxxx [4]
00:007633 54B001              +490 	lx	openfile_bloc:quantum_pointer,,i
00:007634 3E04E6              +491 	lcal	quantum:compress			00xxxx xxxxxx xxxxxx
  :                            492 
00:007635 60F01D              +493 	la	flags
00:007636 A54000              +494 	and	O_OCTET,,xi
00:007637 D6063A              +495 	jnza	splice_handle
  :                            496 
00:007638 4FB014              +497 	ql	openfile_bloc:dimensions:attr:size
00:007639 3E04D8              +498 	lcal	quantum:align
  :                            499 
  :                            500 splice_handle
00:00763A 600A8B              +501 	la	(AF_INET*/16)		. NFS file handle encoding
00:00763B 750050              +502 	ii	HANDLE$
  :                            503 
00:00763C 400004              +504 	lr	a			. this should be the handle #
00:00763D E60640              +505 	jna	nfs_open_path_s
00:00763E 50F015              +506 	lx	fobloc			. this should be the file open structure
[+0001]10
00:00763F 750000              +507 	ii	FILE$HANDLE
  :                            508 					. unwind, status is cached in r
  :                            509 nfs_open_path_s				. drop message segment from server
00:007640 00F004              +510 	sr	status
00:007641 50F017              +511 	lx	connectionp
00:007642 FF0AA9              +512 	call	(tcp_release_rxline)	. this is a locked read + drop
00:007643 60F004              +513 	la	status
00:007644 400004              +514 	lr	a
00:007645 A6064F              +515 	jpa	nfs_open_path_x
  :                            516 
  :                            517 nfs_open_path_u				. cause connection to drop
00:007646 50F017              +518 	lx	connectionp
  :                            519 
  :                            520 	$if	1
00:007647 0FA001              +521 	n	transmission:state
  :                            522 	$else
  :                            523 
  :                            524 	lb	DAYCLOCK$
  :                            525 	sb	transmission:timer(1)
  :                            526 	$endif
  :                            527 
  :                            528 nfs_open_path_v				. disengage client port socket
00:007648 60F016              +529 	la	request_port
00:007649 FF0ACE              +530 	call	(__free_tcp_port)
  :                            531 
  :                            532 nfs_open_path_w				. hand back the file open descriptor
00:00764A 50F015              +533 	lx	fobloc
00:00764B 60A000              +534 	la	0, x
00:00764C A500FF              +535 	and	255,,xi
00:00764D 20A000              +536 	sa	0, x
  :                            537 nfs_open_path_e
00:00764E 600000              +538 	la	r
  :                            539 
  :                            540 nfs_open_path_x
[+000e]10
00:00764F 750000              +541 	ii	FREE_NETB$		. must now mask network resources
[+000f]10
00:007650 750000              +542 	ii	FREE_SOCKB$		. from address space
00:007651 600A9F              +543 	la	(0C00001s)
00:007652 750062              +544 	ii	XBASE$34
00:007653 600000              +545 	la	r
  :                            546 
00:007654 870014              +547 	qpop	RDATAC			. stream registers now need
  :                            548 					. to be nonvolatilw
  :                            549 "$$frame"	$set	$$frame-4
00:007655 FCF015              +550 	$ret
00:007656 38000F              +550 
00:007657 3D0000              +550 
  :                            551 .	USTREAM				. defaults -> b$stream / SIMD registers
  :                            552 	$root				. end nfsopen -> nfs_open_path
  :                            553 
  :                            554 nfs_close_path
  :                            555 	$head_far		 params(close_handle,	int)
  :                            556 
00:007658 60F003              +557 	la	close_handle
00:007659 750055              +558 	ii	READ_SOCKET$
  :                            559 
00:00765A 60D004              +560 	la	openfile_bloc:socket, b		. address the
00:00765B 50D005              +561 	lx	openfile_bloc:socket+1, b	. TCP connection
00:00765C 34002F              +562 	sabr	BSOCKET
00:00765D 60D000              +563 	la	openfile_bloc:fs_type, b	. change the file open block
00:00765E A00A6A              +564 	and	(00FFFF)			. to type spare / available
00:00765F 20D000              +565 	sa	openfile_bloc:fs_type, b
00:007660 FF0ACF              +566 	call	(__disconnect_free_tcp)
[+000e]10
00:007661 750000              +567 	ii	FREE_NETB$
[+000f]10
00:007662 750000              +568 	ii	FREE_SOCKB$
00:007663 3D0000              +569 	fret	0
  :                            570 
  :                            571 .	vector name nfsread
  :                            572 .	this is a go target from read and has the same arguments
  :                            573 .	but deepens the stack and restores it before return
  :                            574 
  :                            575 nfs_data_read $tree
                                	$head_far	 params(handle,			int	; . already decoded in a:b
                                				bufferp,		int	;
                                				bytes,			int)	;
                                								;
                                			scalars(connectionp,		long	;
                                				foblocp,		int	;
                                				segment_axw,		int	;
                                				wdatac_wdata,		long	;
                                				total,			long	;
                                				record_mark,		long	;
                                				record_net_bytes,	long	;
00:007664 9F0A6B              +587 				stream_registers,  float, RDATAC)
00:007665 FD0000              +587 
00:007666 FD0000              +587 
00:007667 9F0A6B              +587 
00:007668 9F0A6B              +587 
00:007669 9F0A6B              +587 
00:00766A 9F0A6B              +587 
00:00766B 8F0014              +587 
  :                            588 
  :                            589 
[+0009]10
00:00766C 750000              +590 	ii	ON_NETB$
00:00766D 60F013              +591 	la	handle
00:00766E 750055              +592 	ii	READ_SOCKET$
00:00766F 28F00D              +593 	sb	foblocp
  :                            594 
00:007670 CFD004              +595 	dl	openfile_bloc:socket, b
00:007671 34002F              +596 	sabr	BSOCKET
00:007672 28F00E              +597 	sb	connectionp
  :                            598 
00:007673 58F00D              +599 	ly	foblocp
  :                            600 
00:007674 60B035              +601 	la	openfile_bloc:nfs_handle+1			. opaque byte count
00:007675 68B059              +602 	lb	openfile_bloc:auth_blank+3			. opaque byte count
  :                            603 
                                	lc	nfs:startrq	connectionp			;
                                				16, a, i			; . 4 + offset8 + datacount4
                                				(xdri(NFSD)d),,long		;
                                				(NFS_VERS:d),,long		;
                                				(NFSPROC3_READ:d),,long		;
                                				4*4, b, i			; . flavour4 bytecount4 verf8
00:007676 FCB056              +610 				openfile_bloc:auth_blank,,i
00:007677 FCD010              +610 
00:007678 9F0AD0              +610 
00:007679 9F0AA5              +610 
00:00767A 9F0ACB              +610 
00:00767B FCC010              +610 
00:00767C F8F017              +610 
00:00767D FCF00A              +610 
00:00767E 3E070F              +610 
00:00767F 38000F              +610 
  :                            611 
00:007680 58F00D              +612 	ly	foblocp
00:007681 60B035              +613 	la	openfile_bloc:nfs_handle+1
                                	lc	nfs:send_opaque16	connectionp		;
                                					4, a, i			;
00:007682 FCB034              +616 					openfile_bloc:nfs_handle,,i
00:007683 FCC004              +616 
00:007684 F8F010              +616 
00:007685 FCF003              +616 
00:007686 3E074E              +616 
00:007687 38000F              +616 
  :                            617 
00:007688 58F00D              +618 	ly	foblocp
                                	lc	nfs:add_uhyper72	connectionp				;
                                					openfile_bloc:quantum_pointer,,i	;
00:007689 FD5010              +621 					05000++TCP_ACK,,xi
00:00768A FCB001              +621 
00:00768B F8F010              +621 
00:00768C FCF003              +621 
00:00768D 3E0738              +621 
00:00768E 38000F              +621 
  :                            622 
00:00768F 58F00D              +623 	ly	foblocp
00:007690 68F015              +624 	lb	bytes
00:007691 60B007              +625 	la	openfile_bloc:o:flags
00:007692 A54000              +626 	and	O_OCTET,,xi
00:007693 D60695              +627 	jnza	read_octets	
00:007694 ED0003              +628 	mf	3,,xi
  :                            629 
  :                            630 read_octets
                                	lc	nfs:add_uinteger	connectionp			;
                                					b				;
00:007695 FD5018              +633 					05000++TCP_ACK++TCP_PSH,,xi
00:007696 F80005              +633 
00:007697 F8F010              +633 
00:007698 FCF003              +633 
00:007699 3E072B              +633 
00:00769A 38000F              +633 
  :                            634 
00:00769B E606A3              +635 	jna	request_issue_fail
00:00769C 50F00E              +636 	lx	connectionp
00:00769D 750041              +637 sample	ii	YIELD$
00:00769E 60A010              +638 	la	transmission:receiveq.head
00:00769F D606A5              +639 	jnza	data
00:0076A0 60A001              +640 	la	transmission:state
00:0076A1 C5FFFB              +641 	aa	-TCP_ESTABLISHED,,xi
00:0076A2 C6069D              +642 	jza	sample
  :                            643 
  :                            644 request_issue_fail
00:0076A3 45FFE0              +645 	lr	-FILE_NOT_OPEN,,xi
00:0076A4 B606B2              +646 	j	nfs_data_read_z
  :                            647 
00:0076A5 20F00C              +648 data	sa	segment_axw
00:0076A6 58C006              +649 	ly	axw:apdata, a
00:0076A7 CFB000              +650 	dl	0, y				. save the record mark
00:0076A8 C7F006              +651 	ds	record_mark
00:0076A9 5CB002              +652 	ly	2, y, i				. advance past record mark
00:0076AA 60B005              +653 	la	server_response:rstat+1
00:0076AB C606AE              +654 	jza	data?
00:0076AC 45FFF3              +655 	lr	-NOT_YOU,,xi
00:0076AD B606B2              +656 	j	nfs_data_read_z
  :                            657 
00:0076AE 60B00D              +658 data?	la	server_response:yes:astat+1
00:0076AF C606B9              +659 	jza	data!
  :                            660 
  :                            661 net_response_fail
00:0076B0 B5FFFF              +662 	xor	-1,,xi
00:0076B1 44C001              +663 	lr	1, a, i
  :                            664 
  :                            665 nfs_data_read_z
00:0076B2 60F00D              +666 	la	foblocp
00:0076B3 60C004              +667 	la	openfile_bloc:socket,a
00:0076B4 34002F              +668 	sabr	BSOCKET
00:0076B5 50F00E              +669 	lx	connectionp
00:0076B6 FF0ACF              +670 	call	(__disconnect_free_tcp)		. close the connection
  :                            671 						. and free the privileged port
00:0076B7 600000              +672 	la	r				.  __disconnect_free_tcp does not change r
00:0076B8 B606FD              +673 	j	nfs_data_read_x
  :                            674 
  :                            675 
00:0076B9 5CB00E              +676 data!	ly	server_response:yes:response, y, i
00:0076BA CFB02E              +677 	dl	readrespo:eof			. 32 bits not 64
00:0076BB C7000A              +678 	ds	10
  :                            679 
00:0076BC CFB02C              +680 	dl	readrespo:count			. 32 bits not 64
00:0076BD 2E0008              +681 	sbl	8
00:0076BE 160008              +682 	dsr	8				. net data count of record
  :                            683 
00:0076BF C7F004              +684 	ds	record_net_bytes
  :                            685 
  :                            686 
  :                            687 	$if	1
00:0076C0 CFB030              +688 	dl	readrespo:data, y		. there is an opaque count
00:0076C1 5CB032              +689 	ly	readrespo:data+2, y, i		. mostly identical to result count
00:0076C2 2E0008              +690 	sbl	8
00:0076C3 360010              +691 	dsl	16				. store that anywhere you like
  :                            692 						. it's the same as result count
  :                            693 						. and can scan millions of segments
00:0076C4 60F00C              +694 	la	segment_axw
00:0076C5 68C006              +695 	lb	axw:apdata,a
00:0076C6 60C003              +696 	la	axw:bytes, a
00:0076C7 D80003              +697 	anb	y				. data word negative difference
00:0076C8 2E0001              +698 	sbl	1				. each with a data byte pair
00:0076C9 C00005              +699 	aa	b
  :                            700 	$else
  :                            701 	la	segment_axw
  :                            702 	la	axw:bytes, a
  :                            703 	aa	-132,,xi			. headers appear fixed size
  :                            704 						. temporary measure worked but not scientifically
  :                            705 	ly	readrespo:data, y, i		. and this did not walk past the opaque length :-)
  :                            706 	$endif
  :                            707 
  :                            708 next_net_segment
00:0076CA 200007              +709 	sa	7
  :                            710 
00:0076CB CFF00A              +711 	dl	wdatac_wdata			. install bit stream state
00:0076CC C70016              +712 	ds	WDATAC
00:0076CD 60F014              +713 	la	bufferp
00:0076CE 20000C              +714 	sa	p
  :                            715 	
00:0076CF 600007              +716 	la	7				. recover the byte count
00:0076D0 3E07C4              +717 	lcal	nfs3:data_read
  :                            718 
00:0076D1 CF0016              +719 	dl	WDATAC				. save the bit stream state
00:0076D2 C7F00A              +720 	ds	wdatac_wdata
00:0076D3 60000C              +721 	la	p
00:0076D4 20F014              +722 	sa	bufferp
  :                            723 
00:0076D5 50F00E              +724 	lx	connectionp
00:0076D6 FF0AA9              +725 	call	(tcp_release_rxline)
  :                            726 
00:0076D7 300006              +727 	z	6
00:0076D8 CFF008              +728 	dl	total
00:0076D9 D70006              +729 	da	6
00:0076DA C7F008              +730 	ds	total
00:0076DB CFF004              +731 	dl	record_net_bytes
00:0076DC DF0006              +732 	dan	6
00:0076DD C7F004              +733 	ds	record_net_bytes
00:0076DE 7C06EA              +734 	jdz	complete_record
00:0076DF E606EA              +735 	jna	complete_record
  :                            736 
  :                            737 next_segment
00:0076E0 750041              +738 	ii	YIELD$
00:0076E1 60A010              +739 	la	transmission:receiveq:head
00:0076E2 D606E7              +740 	jnza	next_segment_in
00:0076E3 60A001              +741 	la	transmission:state
00:0076E4 C5FFFB              +742 	aa	-TCP_ESTABLISHED,,xi
00:0076E5 C606E0              +743 	jza	next_segment
00:0076E6 B606B0              +744 	j	net_response_fail
  :                            745 
  :                            746 next_segment_in
00:0076E7 58C006              +747 	ly	axw:apdata, a
00:0076E8 60C003              +748 	la	axw:bytes, a
00:0076E9 B606CA              +749 	j	next_net_segment
  :                            750 
  :                            751 complete_record
00:0076EA 60F006              +752 	la	record_mark
00:0076EB A00A84              +753 	and	(008000s)	. record mark
00:0076EC C6069D              +754 	jza	sample		. until we can find out different it's hoped
  :                            755 				. a new record has the same headers as a 1st record
  :                            756 
00:0076ED CFF008              +757 	dl	total
00:0076EE 58F00D              +758 	ly	foblocp
00:0076EF D7B002              +759 	da	openfile_bloc:quantum_pointer+1
00:0076F0 C7B002              +760 	ds	openfile_bloc:quantum_pointer+1
00:0076F1 B70004              +761 	sc	a
00:0076F2 C0B001              +762 	aa	openfile_bloc:quantum_pointer
00:0076F3 20B001              +763 	sa	openfile_bloc:quantum_pointer
  :                            764 
00:0076F4 650000              +765 	la	0,,xi
00:0076F5 1D0010              +766 	wsr	16			. push final octets out of WDATA
00:0076F6 CFF008              +767 	dl	total
  :                            768 
00:0076F7 60B007              +769 	la	openfile_bloc:o:flags
  :                            770 
00:0076F8 A54000              +771 	and	O_OCTET,,xi		. if octets
00:0076F9 B54000              +772 	xor	O_OCTET,,xi		. not not words
00:0076FA C606FD              +773 	jza	nfs_data_read_x		. report octets count
  :                            774 
00:0076FB 6CD002              +775 	lb	2, b, i
00:0076FC E80AD2              +776 	mf	(0555556)
  :                            777 
  :                            778 nfs_data_read_x
  :                            779 .	USTREAM				. defaults -> b$stream / SIMD registers
[+000e]10
00:0076FD 750000              +780 	ii	FREE_NETB$
[+000f]10
00:0076FE 750000              +781 	ii	FREE_SOCKB$
  :                            782 
00:0076FF 870014              +783 	qpop	RDATAC			. stream register now need to be
  :                            784 					. nonvolatile
  :                            785 "$$frame" $set	$$frame-4
00:007700 FCF00C              +786 	$ret
00:007701 38000F              +786 
00:007702 3D0000              +786 
  :                            787 
  :                            788 	$root				. end nfsread -> nfs_data_read
  :                            789 
  :                            790 
  :                            791 .	vector name nfs_seek
  :                            792 
  :                            793 
  :                            794 nfs_file_position	$tree
  :                            795 
  :                            796 	$if	1
  :                            797 
                                	$head_far	 params(handle,		int	;
                                				position,	long	;
  :                            800 				source,		int	)
  :                            801 
00:007703 60F003              +802 	la	handle
00:007704 750055              +803 	ii	READ_SOCKET$
00:007705 580005              +804 	ly	b
  :                            805 
                                	lc	nfs3:seek72	source					;
                                				openfile_bloc:o:flags			;
                                				openfile_bloc:quantum_pointer,,i	;
                                				position,,long				;
00:007706 FCB014              +810 				openfile_bloc:dimensions:attr:size,,i
00:007707 9FF005              +810 
00:007708 FCB001              +810 
00:007709 F8B007              +810 
00:00770A F8F00B              +810 
00:00770B FCF006              +810 
00:00770C 3E07D3              +810 
00:00770D 38000F              +810 
00:00770E 3D0000              +811 	$ret
  :                            812 
  :                            813 	$else
  :                            814 
                                	$head_far	 params(handle,		int	;
                                				position,	long)	;
                                							;
                                			scalars(caller_y,	int, y	;
  :                            819 				octet_position,	triple	)
  :                            820 
  :                            821 
  :                            822 	la	handle
  :                            823 	ii	READ_SOCKET$
  :                            824 	ly	b
  :                            825 	lb	position+1
  :                            826 	mf	3,,xi
  :                            827 	ds	octet_position+1
  :                            828 	lb	position
  :                            829 	mf	3,,xi
  :                            830 	da	octet_position
  :                            831 	ds	openfile_bloc:quantum_pointer
  :                            832 	pop	0, sp
  :                            833 	pop	0, sp
  :                            834 	pop	openfile_bloc:quantum_pointer+2
  :                            835 	pop	y
  :                            836 	fret	0
  :                            837 
  :                            838 	$endif
  :                            839 
  :                            840 			$root
  :                            841 
  :                            842 nfs	$tree
  :                            843 startrq
                                	$head_near	 params(connectionp,	int			;
                                				size,		int			;
                                				rqprogram,	long			;
                                				programversion,	long			;
                                				nfspro,		long			;
                                				auth_bytes,	int			;
                                				authp,		int		)	;
                                									;
                                			scalars(procedure_l,	long,	nfspro		;
                                				programvers_l,	long,	programversion	;
                                				program_l,	long,	rqprogram	;
                                				rpcvers,	long,	(2d)		;
                                				req_resp,	long			;
                                				tid,		long			;
                                				count,		int,	size		;
00:00770F 9FF008              +859 				container,	int,	(008000s)	)
00:007710 9FF008              +859 
00:007711 9FF008              +859 
00:007712 9F0A86              +859 
00:007713 9F0A6B              +859 
00:007714 9F0A6B              +859 
00:007715 F8F00F              +859 
00:007716 F80A84              +859 
  :                            860 
  :                            861 
  :                            862 
00:007717 3E04F8              +863 	lcal	rpc:getunique		. request #
00:007718 160010              +864 	dsr	16			. and kernel B1 is now based	
00:007719 0E0008              +865 	sbr	8
00:00771A C7F002              +866 	ds	tid
  :                            867 
00:00771B 60F011              +868 	la	size			. target data bytes after auth
  :                            869 					. and net of roundup
00:00771C 64C003              +870 	la	3, a, i			. round up for header
00:00771D A5FFFC              +871 	and	-4,,xi
00:00771E 58F018              +872 	ly	auth_bytes
00:00771F 8CC018              +873 	ay	6*4,a,i			. 6Lheader + auth + uprounded data
00:007720 18F001              +874 	sy	count
  :                            875 
00:007721 68000F              +876 	lb	sp			. fire 7Lheader
00:007722 65001C              +877 	la	7*4,,xi
00:007723 50F010              +878 	lx	connectionp
00:007724 3E0751              +879 	lcal	nfs:send16to16i
  :                            880 
00:007725 60F018              +881 	la	auth_bytes		. fire auth structure
00:007726 68F019              +882 	lb	authp
00:007727 3E0751              +883 	lcal	nfs:send16to16i
  :                            884 
00:007728 FCF00E              +885 	$ret
00:007729 38000F              +885 
00:00772A 350000              +885 
  :                            886 
  :                            887 
  :                            888 
  :                            889 
  :                            890 add_uinteger
                                	$head_near	 params(connectpiu,	int		;
                                				uinteger,	int		;
                                				uiflags,	int	)	;
                                								;
00:00772B 9F0A6B              +895 			scalars(format2,	long		)
  :                            896 
  :                            897 	$if	1
00:00772C 48F006              +898 	lk	uiflags
  :                            899 
  :                            900 	$else				. no sir
  :                            901 	la	uiflags
  :                            902 	sa	SOCKET_CALL_FLAGS
  :                            903 	$endif
  :                            904 
00:00772D 60F005              +905 	la	uinteger
00:00772E 160010              +906 	dsr	16
00:00772F 0E0008              +907 	sbr	8
00:007730 C7F000              +908 	ds	format2
  :                            909 
00:007731 6CF000              +910 	lb	format2,,i
00:007732 650004              +911 	la	4,,xi
00:007733 50F004              +912 	lx	connectpiu
00:007734 3E0752              +913 	lcal	send16to16
00:007735 FCF002              +914 	$ret
00:007736 38000F              +914 
00:007737 350000              +914 
  :                            915 
  :                            916 add_uhyper72
                                	$head_near	 params(connectphy,	int		;
                                				hyperp,		int		;
                                				uyflags,	int	)	;
                                								;
00:007738 8F0A6D              +921 			scalars(format4,	float		)
  :                            922 
  :                            923 	$if	1
00:007739 48F008              +924 	lk	uyflags
  :                            925 	$else				. no sir
  :                            926 	la	uyflags
  :                            927 	sa	SOCKET_CALL_FLAGS
  :                            928 	$endif
  :                            929 
00:00773A 50F007              +930 	lx	hyperp
00:00773B CFA000              +931 	dl	0, x
00:00773C 260008              +932 	sal	8
00:00773D 060008              +933 	sar	8
00:00773E 20F000              +934 	sa	format4
00:00773F 650000              +935 	la	0,,xi
00:007740 560008              +936 	drr	8
00:007741 28F001              +937 	sb	format4+1
00:007742 68A002              +938 	lb	2, x
00:007743 060010              +939 	sar	16
00:007744 360008              +940 	dsl	8
00:007745 0E0008              +941 	sbr	8
00:007746 C7F002              +942 	ds	format4+2
  :                            943 
00:007747 6CF000              +944 	lb	format4,,i
00:007748 650008              +945 	la	8,,xi
00:007749 50F006              +946 	lx	connectphy
00:00774A 3E0752              +947 	lcal	send16to16
00:00774B FCF004              +948 	$ret
00:00774C 38000F              +948 
00:00774D 350000              +948 
  :                            949 
  :                            950 send_opaque16
                                	$head_near	 params(tcp_tcbp,	int		;
                                				bytes2go,	int		;
  :                            953 				fromp,		int	)
00:00774E 50F002              +954 	lx	tcp_tcbp
00:00774F 60F003              +955 	la	bytes2go
00:007750 68F004              +956 	lb	fromp		. and just fall thru
  :                            957 				. don't add any scalars or xframe
  :                            958 				. to send_opaque16
  :                            959 send16to16i
  :                            960 	$if	1
00:007751 4D5010              +961 	lk	05000++TCP_ACK,,xi	. method of passing to tcp_add tcp_addx
  :                            962 	$else
  :                            963 	push	(05000++TCP_ACK)
  :                            964 	pop	SOCKET_CALL_FLAGS
  :                            965 	$endif
  :                            966 
  :                            967 send16to16
00:007752 28000D              +968 	sb	q
00:007753 300014              +969 	z	RDATAC
00:007754 050020              +970 	on	b$stream16r
00:007755 FF0AD3              +971 	call	(tcp_addx)
00:007756 350000              +972 	lret	0
  :                            973 
  :                            974 counted_send_opaque
                                	$head_near	 params(connexiopaque,	int		;	
                                				opaque_bytes,	int		;
                                				opaque_string,	int		;
                                				opaque_flags,	int	)	;
                                								;
                                			scalars(opaque_count,	long		;
00:007757 9F0A6B              +981 				opaque_pad,	int	)
00:007758 FD0000              +981 
  :                            982 
00:007759 50F005              +983 	lx	connexiopaque
  :                            984 
00:00775A 60F006              +985 	la	opaque_bytes
00:00775B 20F002              +986 	sa	opaque_count+1
00:00775C 650004              +987 	la	4,,xi
00:00775D 6CF001              +988 	lb	opaque_count,,i
00:00775E 3E0751              +989 	lcal	send16to16i
  :                            990 
  :                            991 	$if	0
  :                            992 
  :                            993 .	lb	05010,,xi
  :                            994 .	sb	SOCKET_CALL_FLAGS
  :                            995 
  :                            996 	$else
00:00775F 4D5010              +997 	lk	05010,,xi
  :                            998 	$endif
  :                            999 
00:007760 60F006              +1000 	la	opaque_bytes
00:007761 68F007              +1001 	lb	opaque_string
  :                            1002 .	sb	q
00:007762 FF0ACD              +1003 	call	(tcp_tx)
  :                            1004 
  :                            1005 
  :                            1006 	$if	0
  :                            1007 .	lb	opaque_flags
  :                            1008 .	sb	SOCKET_CALL_FLAGS
  :                            1009 	$else
  :                            1010 
00:007763 48F008              +1011 	lk	opaque_flags
  :                            1012 	$endif
  :                            1013 
00:007764 650004              +1014 	la	4,,xi
00:007765 D0F006              +1015 	ana	opaque_bytes
00:007766 A50003              +1016 	and	3,,xi
  :                            1017 
00:007767 6CF000              +1018 	lb	opaque_pad,,i
  :                            1019 .	sb	q
00:007768 FF0ACD              +1020 	call	(tcp_tx)
  :                            1021 	
00:007769 FCF003              +1022 	$ret
00:00776A 38000F              +1022 
00:00776B 350000              +1022 
  :                            1023 
  :                            1024 send_string
                                	$head_near	 params(connexionstring,int		;
                                				string_bytes,	int		;
                                				stringp,	int		;
  :                            1028 				string_flags,	int		)
  :                            1029 
00:00776C 50F002              +1030 	lx	connexionstring
  :                            1031 
00:00776D 48F005              +1032 	lk	string_flags
  :                            1033 .	lb	string_flags
  :                            1034 .	sb	SOCKET_CALL_FLAGS
00:00776E 68F004              +1035 	lb	stringp
  :                            1036 .	sa	q
00:00776F 60F003              +1037 	la	string_bytes
00:007770 FF0ACD              +1038 	call	(tcp_tx)
  :                            1039 
00:007771 350000              +1040 	$ret	0
  :                            1041 
  :                            1042 deliver_fhandle3			. also usable to copy auth structure
  :                            1043 
  :                            1044 c4*	$proc
  :                            1045 	qpush	32-?*4+2, y
  :                            1046 	qpop	32-?*4+2, x
  :                            1047 	$end
  :                            1048 
00:007772 CFB000              +1049 	dl	0, y			. second half longword as ever
00:007773 C7A000              +1050 	ds	0, x
  :                            1051 
00:007774 CE078B              +1052 	jzb	none
00:007775 CDFFFF              +1053 	ab	-1,,xi
  :                            1054 
00:007776 0E0003              +1055 	sbr	3
00:007777 AD0007              +1056 	andB	7,,xi
  :                            1057 
00:007778 BD0007              +1058 	xorB	7,,xi
00:007779 2E0001              +1059 	sbl	1
00:00777A B6D77B              +1060 	j	jump2it, b
  :                            1061 	
  :                            1062 jump2it
00:00777B 8FB01E              +1063 ?	$do	8,	c4
00:00777C 87A01E              +1063 
00:00777D 8FB01A              +1063 
00:00777E 87A01A              +1063 
00:00777F 8FB016              +1063 
00:007780 87A016              +1063 
00:007781 8FB012              +1063 
00:007782 87A012              +1063 
00:007783 8FB00E              +1063 
00:007784 87A00E              +1063 
00:007785 8FB00A              +1063 
00:007786 87A00A              +1063 
00:007787 8FB006              +1063 
00:007788 87A006              +1063 
00:007789 8FB002              +1063 
00:00778A 87A002              +1063 
  :                            1064 
00:00778B 350000              +1065 none	lret	0
  :                            1066 
  :                            1067 deliver_auth
  :                            1068 
  :                            1069 c2*	$proc
  :                            1070 	dl	32-?*2+4, y
  :                            1071 	ds	32-?*2+4, x
  :                            1072 	$end
  :                            1073 
00:00778C 4FB000              +1074 	ql	0, y
00:00778D 47A000              +1075 	qs	0, x
  :                            1076 
00:00778E 600007              +1077 	la	7
00:00778F C607B6              +1078 	jza	none_more
  :                            1079 
00:007790 C5FFFF              +1080 	aa	-1,,xi
00:007791 060002              +1081 	sar	2			. 4-byte blocks
00:007792 A5000F              +1082 	and	15,,xi
00:007793 B5000F              +1083 	xor	15,,xi
00:007794 260001              +1084 	sal	1			. for the macro is an instruction pair
00:007795 B6C796              +1085 	j	jump2auth, a
  :                            1086 
  :                            1087 jump2auth
00:007796 CFB022              +1088 ?	$do	16,	c2
00:007797 C7A022              +1088 
00:007798 CFB020              +1088 
00:007799 C7A020              +1088 
00:00779A CFB01E              +1088 
00:00779B C7A01E              +1088 
00:00779C CFB01C              +1088 
00:00779D C7A01C              +1088 
00:00779E CFB01A              +1088 
00:00779F C7A01A              +1088 
00:0077A0 CFB018              +1088 
00:0077A1 C7A018              +1088 
00:0077A2 CFB016              +1088 
00:0077A3 C7A016              +1088 
00:0077A4 CFB014              +1088 
00:0077A5 C7A014              +1088 
00:0077A6 CFB012              +1088 
00:0077A7 C7A012              +1088 
00:0077A8 CFB010              +1088 
00:0077A9 C7A010              +1088 
00:0077AA CFB00E              +1088 
00:0077AB C7A00E              +1088 
00:0077AC CFB00C              +1088 
00:0077AD C7A00C              +1088 
00:0077AE CFB00A              +1088 
00:0077AF C7A00A              +1088 
00:0077B0 CFB008              +1088 
00:0077B1 C7A008              +1088 
00:0077B2 CFB006              +1088 
00:0077B3 C7A006              +1088 
00:0077B4 CFB004              +1088 
00:0077B5 C7A004              +1088 
  :                            1089 
  :                            1090 none_more
00:0077B6 600007              +1091 	la	7
00:0077B7 060001              +1092 	sar	1			. point to data words after aux opaque bytes
00:0077B8 84C004              +1093 	ax	4, a, i
00:0077B9 8CC004              +1094 	ay	4, a, i
00:0077BA 4FB000              +1095 	ql	0, y			. write default verification
00:0077BB 47A000              +1096 	qs	0, x
  :                            1097 
00:0077BC 350000              +1098 	lret	0
  :                            1099 
  :                            1100 
  :                            1101 	$if	1
  :                            1102 
  :                            1103 	.	an unrolled function of 22 instructions is not justified
  :                            1104 	.	because this only happens on file open
  :                            1105 	.	but to avoid fooling about
  :                            1106 	.	the long-int boolean before result attributes
  :                            1107 	.	is copied with the attributes to make a multiple of 4 words 
  :                            1108 	.	and to avoid needing to point past the boolean
  :                            1109 
  :                            1110 capture_fileinfo
  :                            1111 	$do	FS$NFS3RESULT_WORDS**3^=0,	$flag	change this
  :                            1112 
00:0077BD 45000A              +1113 	lr	FS$NFS3RESULT_WORDS/4-1,,xi
  :                            1114 
  :                            1115 capture_fileinfo_quad
00:0077BE 8FB000              +1116 	qpush	0, y
00:0077BF 87A000              +1117 	qpop	0, x
00:0077C0 850004              +1118 	ax	4,,xi
00:0077C1 8D0004              +1119 	ay	4,,xi
00:0077C2 1E07BE              +1120 	jdr	capture_fileinfo_quad
  :                            1121 
00:0077C3 350000              +1122 	lret	0
  :                            1123 
  :                            1124 	.	that's the job done generating 7 instructions instead of 22
  :                            1125 	.	and executing 5 instructions 11 times each
  :                            1126 	.	instead of 22 instructions once each
  :                            1127 	.	use unrolled lightning for datagrams and arrays. We do
  :                            1128 
  :                            1129 	$else
  :                            1130 
  :                            1131 capture_fileinfo
                                	$do	FS$NFS3RESULT_WORDS**3^=0,	;
  :                            1133 	$flag	do this differently
  :                            1134 
  :                            1135 qover*	$proc
  :                            1136 	qpush	?*4-4, y
  :                            1137 	qpop	?*4-4, x
  :                            1138 	$end
  :                            1139 
  :                            1140 ?	$do	FS$NFS3RESULT_WORDS/*2,		qover
  :                            1141 
  :                            1142 	lret	0
  :                            1143 
  :                            1144 	$endif
  :                            1145 
  :                            1146 	$root
  :                            1147 
  :                            1148 .	routines mostly about xdr format data in tree nfs 
  :                            1149 .	routines about compression and expansion in tree nfs3
  :                            1150 
  :                            1151 nfs3	$tree
  :                            1152 .	$path		../
  :                            1153 	$list	3
  :                            1154: 	$include	rpc/dataread
  :                            1 data_read
00:0077C4 C5FFFF              +2 	aa	-1,,xi		. round # byte quads down
00:0077C5 5E07D1              +3 	jnc	data_read_z
00:0077C6 060002              +4 	sar	2		. because jdr stops @ -1
00:0077C7 400004              +5 	lr	a
  :                            6 
00:0077C8 050020              +7 	on	b$stream16r
00:0077C9 0D0050              +8 	off	b$stream16w++b$streamZR
  :                            9 
00:0077CA CFB000              +10 data	dl	0, y		. read 2 socket format words
00:0077CB 8D0002              +11 	ay	2,,xi
00:0077CC 360008              +12 	dsl	8
00:0077CD 1D0010              +13 	wsr	16
00:0077CE 600005              +14 	la	b
00:0077CF 1D0010              +15 	wsr	16		. input 4 octets 
00:0077D0 1E07CA              +16 	jdr	data		. to 24-bit memory
  :                            17 
  :                            18 data_read_z
00:0077D1 0D0020              +19 	off	b$stream16r
00:0077D2 350000              +20 	lret	0
  :                            21 
  :                            1155: 	$include	rpc/position
  :                            1 .	lseek for remote files where
  :                            2 .	you are updating the locally held file open block
  :                            3 .	without any external operation taking place
  :                            4 .	the file position in the in the file open block
  :                            5 .	is sent to the server with every read and every write
  :                            6 .	for SEEK_END you use file size
  :                            7 .	which server returns on every access
  :                            8 
  :                            9 .	for now we'll say a 48-bit pointer is enough for one file
  :                            10 .	even though it's signed
  :                            11 
  :                            12 seek72	$tree
                                	$head_near	 params(seek_source,	int		;
                                				options,	int		;
                                				actualp,	int		;
                                				newkey,		long		;
                                				sizep,		int)		;
                                								;
                                			scalars(impression,	long, newkey	;
00:0077D3 9FF005              +20 				high_orderw,	int		)
00:0077D4 FD0000              +20 
  :                            21 
00:0077D5 78F001              +22 	tp	impression
00:0077D6 0FF000              +23 	n	high_orderw
  :                            24 
00:0077D7 60F006              +25 	la	options
00:0077D8 A54000              +26 	and	O_OCTET,,xi		. opened the file as...
00:0077D9 D60801              +27 	jnza	octet_pointer		. octet array
  :                            28 					. 24-bit word array
00:0077DA CFF001              +29 	dl	impression		. triple the word pointer
00:0077DB 40F000              +30 	lr	high_orderw
00:0077DC 0D0001              +31 	off	carry$
00:0077DD 3FF002              +32 	slc	impression+1		. double it
00:0077DE 3FF001              +33 	slc	impression
00:0077DF 3FF000              +34 	slc	high_orderw
00:0077E0 D7F001              +35 	da	impression		. add the number
00:0077E1 C7F001              +36 	ds	impression		. you first thought of
00:0077E2 B70005              +37 	sc	b
00:0077E3 C80000              +38 	ab	r
00:0077E4 C8F000              +39 	ab	high_orderw
00:0077E5 28F000              +40 	sb	high_orderw
  :                            41 	
00:0077E6 60F005              +42 	la	seek_source
00:0077E7 D607EA              +43 	jnza	seek_?			. not SEEK_SET
00:0077E8 CFF008              +44 	dl	newkey			. yes SEEK_SET
00:0077E9 B60816              +45 	j	store_x			. simple to do
  :                            46 
00:0077EA C5FFFE              +47 seek_?	aa	-SEEK_END,,xi
00:0077EB C607F0              +48 	jza	seek_end
00:0077EC C50001              +49 	aa	SEEK_END-SEEK_CUR,,xi
00:0077ED D6081B              +50 	jnza	abandon			. that's simple too
  :                            51 
00:0077EE 50F007              +52 	lx	actualp			. relative current position
00:0077EF B607F7              +53 	j	seek_relative
  :                            54 
  :                            55 seek_end
00:0077F0 50F00A              +56 	lx	sizep			. file size last updated
00:0077F1 4FA000              +57 	ql	0, x			. pack down from network format
00:0077F2 470010              +58 	qs	d$save
00:0077F3 550009              +59 	lx	9,,xi
00:0077F4 3E04E6              +60 	lcal	quantum:compress
00:0077F5 4F0010              +61 	ql	d$save
00:0077F6 3E04D8              +62 	lcal	quantum:align		. relative to 1st unwritten data word
  :                            63 
  :                            64 seek_relative
00:0077F7 CFF001              +65 	dl	impression		. stack top value in octets
00:0077F8 D7A001              +66 	da	1, x			. offset change
00:0077F9 C7F001              +67 	ds	impression		. receiving side of sum
  :                            68 
00:0077FA B70005              +69 	sc	b			. calculate bits 71..48 of outcome
00:0077FB C8F000              +70 	ab	high_orderw
00:0077FC C8A000              +71 	ab	0, x
00:0077FD 28F000              +72 	sb	high_orderw		. complete the stack top update
00:0077FE EE081B              +73 	jnb	abandon			. but only store it if you like it
  :                            74 
00:0077FF 3E04ED              +75 	lcal	quantum:retell		. word quantum result in [ 6 a b ]
00:007800 B60816              +76 	j	store_x
  :                            77 	
  :                            78 octet_pointer
00:007801 60F005              +79 	la	seek_source
00:007802 C60815              +80 	jza	store_hee		. SEEK_SET
  :                            81 
00:007803 C5FFFE              +82 	aa	-SEEK_END,,xi
00:007804 C60809              +83 	jza	relative_highest_write	. written size +- offset
00:007805 C50001              +84 	aa	SEEK_END-SEEK_CUR,,xi
00:007806 D6081B              +85 	jnza	abandon
00:007807 50F007              +86 	lx	actualp			. here +- offset
00:007808 B6080D              +87 	j	relative
  :                            88 
  :                            89 relative_highest_write
00:007809 50F00A              +90 	lx	sizep			. read & compress 64-bit file size
00:00780A 4FA000              +91 	ql	0, x
00:00780B 550009              +92 	lx	9,,xi
00:00780C 3E04E6              +93 	lcal	quantum:compress
  :                            94 
  :                            95 relative				. compose 3 words relative result
00:00780D CFA001              +96 	dl	1, x			. in stack top
00:00780E D7F001              +97 	da	impression
00:00780F C7F001              +98 	ds	impression
00:007810 B70005              +99 	sc	b
00:007811 C8A000              +100 	ab	0, x
00:007812 C8F000              +101 	ab	high_orderw
00:007813 28F000              +102 	sb	high_orderw
00:007814 EE081B              +103 	jnb	abandon
  :                            104 
  :                            105 store_hee
00:007815 CFF001              +106 	dl	impression		. 48-bit result
  :                            107 					. if files get larger than 256 teraquanta
  :                            108 					. a function lseek64 with 72-bit argument will be needed
00:007816 50F007              +109 store_x	lx	actualp
  :                            110 
  :                            111 					. write from internal stack top
00:007817 38A000              +112 	dpop	0, x			. to file open state descriptor
00:007818 38A001              +112 
00:007819 38A002              +113 	pop	2, x
00:00781A 350000              +114 	lret	0
  :                            115 
00:00781B 64F003              +116 abandon	la	3,sp,i
00:00781C 20000F              +117 	sa	sp
00:00781D 65FFFF              +118 	la	-1,,xi
00:00781E 6DFFEA              +119 	lb	-BAD_ARGUMENT,,xi
00:00781F 350000              +120 	lret	0
  :                            121 
  :                            122 	$root
  :                            1156 .	$path
  :                            1157 
  :                            1158 	$root
  :                            236: 	$include	rpc/nfswrite
  :                            1 
  :                            2 .	vector name nfswrite
  :                            3 .	arrived as go from socket wrote
  :                            4 .	keeps params identical
  :                            5 .	borrows some dynamic internal stack & gives it back
  :                            6 .	READ_SOCKET$ has just happened and b -> file open state desciptor
  :                            7 
  :                            8 nfs_data_write	$tree
                                	$head_far	 params(handle,			int	;
                                				bufferp,		int	;
                                				bytes,			int)	;
                                								;
                                			scalars(connectionp,	long,	openfile_bloc:socket, b	;
                                				foblocp,	int,	b	;
                                				result,		int		;
00:007820 9FD004              +16 				stream_registers,  float, RDATAC)
00:007821 F80005              +16 
00:007822 FD0000              +16 
00:007823 8F0014              +16 
  :                            17 
[+0009]10
00:007824 750000              +18 	ii	ON_NETB$
00:007825 60F006              +19 	la	connectionp
00:007826 34002F              +20 	sabr	BSOCKET			
  :                            21 
00:007827 58F005              +22 	ly	foblocp
00:007828 60B035              +23 	la	openfile_bloc:nfs_handle+1	. opaque16 byte count
00:007829 68B059              +24 	lb	openfile_bloc:auth_blank+3		. opaque16 byte count
00:00782A C0F00D              +25 	aa	bytes
  :                            26 
                                	lc	nfs:startrq	connectionp+1	;
                                				24, a, i	; will need changing, output data
                                				(xdri(NFSD)d),,long	;
                                				(NFS_VERS:d),,long	;
                                				(NFSPROC3_WRITE:d),,long	;
                                				4*4, b, i		;
00:00782B FCB056              +33 				openfile_bloc:auth_blank,,i
00:00782C FCD010              +33 
00:00782D 9F0AD4              +33 
00:00782E 9F0AA5              +33 
00:00782F 9F0ACB              +33 
00:007830 FCC018              +33 
00:007831 F8F010              +33 
00:007832 FCF00A              +33 
00:007833 3E070F              +33 
00:007834 38000F              +33 
  :                            34 
  :                            35 	. 1: handle
  :                            36 
00:007835 58F005              +37 	ly	foblocp
00:007836 60B035              +38 	la	openfile_bloc:nfs_handle+1
                                	lc	nfs:send_opaque16	connectionp+1	;
                                					4, a, i		;
00:007837 FCB034              +41 					openfile_bloc:nfs_handle,,i
00:007838 FCC004              +41 
00:007839 F8F009              +41 
00:00783A FCF003              +41 
00:00783B 3E074E              +41 
00:00783C 38000F              +41 
  :                            42 
  :                            43 	. 2: offset
  :                            44 
00:00783D 58F005              +45 	ly	foblocp
                                	lc	nfs:add_uhyper72	connectionp+1				;
                                					openfile_bloc:quantum_pointer,,i	;
00:00783E FD5000              +48 					05000,,xi
00:00783F FCB001              +48 
00:007840 F8F009              +48 
00:007841 FCF003              +48 
00:007842 3E0738              +48 
00:007843 38000F              +48 
  :                            49 
  :                            50 	. 3: count
  :                            51 
00:007844 58F005              +52 	ly	foblocp
00:007845 68F00D              +53 	lb	bytes
  :                            54 
00:007846 60B007              +55 	la	openfile_bloc:o:flags
00:007847 A54000              +56 	and	O_OCTET,,xi
00:007848 D6084A              +57 	jnza	api_octets		. the API for a # octets
00:007849 ED0003              +58 	mf	3,,xi			. the API got a # words
  :                            59  
  :                            60 api_octets
  :                            61 
                                	lc	nfs:add_uinteger	connectionp+1	;
                                					b		;
00:00784A FD5000              +64 					05000,,xi
00:00784B F80005              +64 
00:00784C F8F009              +64 
00:00784D FCF003              +64 
00:00784E 3E072B              +64 
00:00784F 38000F              +64 
  :                            65 
  :                            66 
  :                            67 	. 4: stability guide
  :                            68 
                                	lc	nfs:add_uinteger	connectionp+1	;
                                					1,,xi		;
00:007850 FD5000              +71 					05000,,xi
00:007851 FD0001              +71 
00:007852 F8F009              +71 
00:007853 FCF003              +71 
00:007854 3E072B              +71 
00:007855 38000F              +71 
  :                            72 
  :                            73 	. 5: data
  :                            74 
  :                            75 
                                	lc	nfs:counted_send_opaque	connectionp+1	;
                                					bytes		;
                                					bufferp		;
00:007856 F80AD6              +79 					(05000++TCP_PSH++TCP_ACK)
00:007857 F8F00D              +79 
00:007858 F8F00F              +79 
00:007859 F8F00A              +79 
00:00785A FCF004              +79 
00:00785B 3E0757              +79 
00:00785C 38000F              +79 
  :                            80 
00:00785D 50F007              +81 	lx	connectionp+1
  :                            82 
  :                            83 sense_response
00:00785E 750041              +84 	ii	YIELD$
00:00785F 60A010              +85 	la	transmission:receiveq:head
  :                            86 
00:007860 D60867              +87 	jnza	unpack_response
00:007861 60A001              +88 	la	transmission:state
00:007862 C5FFFB              +89 	aa	-TCP_ESTABLISHED,,xi
00:007863 C6085E              +90 	jza	sense_response
00:007864 45FFE0              +91 	lr	-FILE_NOT_OPEN,,xi
00:007865 00F004              +92 	sr	result
00:007866 B6087E              +93 	j	eoxmit
  :                            94 
  :                            95 $(66::,x)
  :                            96 response3	xdr_write3res
  :                            97 
  :                            98 $(0)
  :                            99 unpack_response
00:007867 50C006              +100 	lx	descriptor:apdata, a
00:007868 60A007              +101 	la	response:rstat+1, x
00:007869 D6087A              +102 	jnza	damaged
00:00786A 60A00F              +103 	la	response:yes:astat+1, x
00:00786B D6087A              +104 	jnza	damaged
00:00786C 54A010              +105 	lx	response:yes:response, x, i
  :                            106 
00:00786D CFA03A              +107 	dl	response3:count
00:00786E 2E0008              +108 	sbl	8
00:00786F 160008              +109 	dsr	8
00:007870 28F004              +110 	sb	result
00:007871 58F005              +111 	ly	foblocp
00:007872 D7B002              +112 	da	openfile_bloc:quantum_pointer+1
00:007873 C7B002              +113 	ds	openfile_bloc:quantum_pointer+1
00:007874 B70005              +114 	sc	b
00:007875 C8B001              +115 	ab	openfile_bloc:quantum_pointer
00:007876 28B001              +116 	sb	openfile_bloc:quantum_pointer
  :                            117 
00:007877 4FA01A              +118 	ql	response3:after:attr:size
00:007878 47B014              +119 	qs	openfile_bloc:dimensions:attr:size
  :                            120 
00:007879 B6087C              +121 	j	clear
  :                            122 
00:00787A 65FFEE              +123 damaged	la	-18,,xi
00:00787B 20F004              +124 	sa	result
  :                            125 
00:00787C 50F007              +126 clear	lx	connectionp+1
00:00787D FF0AA9              +127 	call	(tcp_release_rxline)
  :                            128 
[+000e]10
00:00787E 750000              +129 eoxmit	ii	FREE_NETB$
[+000f]10
00:00787F 750000              +130 	ii	FREE_SOCKB$
  :                            131 .	la	(0C00001s)		. B32 won't have been opened 
  :                            132 .	ii	XBASE$32		. for I/O that's all in TCP
00:007880 60F004              +133 	la	result
00:007881 870014              +134 	qpop	RDATAC		. stream register need to be nonvolatile
  :                            135 "$$frame" $set	$$frame-4
  :                            136 
  :                            137 .	USTREAM				. defaults -> b$stream / SIMD registers
00:007882 FCF004              +138 	$ret				
00:007883 38000F              +138 
00:007884 3D0000              +138 
  :                            139 
  :                            140 	$root	
  :                            237 	$path
  :                            238: 	$include	../remotefs/remotefs
  :                            1 remotefs $tree
  :                            2 
  :                            3 .	local name load
  :                            4 .	load dialplan if not already loaded
  :                            5 
00:007885 2F6E66732F6D6F756E747300
                              +6 defaultpath	"/nfs/mounts"
  :                            7 
  :                            8: 	$include	../dialplan/dialkey.def
  :                            1 dialplan_dependency_key*	$equ	202305032315
  :                            9 
                                load	$head_near	scalars(indexp,	int			;
                                				fspax,	6			;
00:007889 FD0000              +12 				path,	4, defaultpath	)
00:00788A 8F0A6D              +12 
00:00788B 9FF000              +12 
00:00788C 8F0885              +12 
  :                            13 
00:00788D 60207A              +14 	la	NFS_MOUNTS
00:00788E D608B1              +15 	jnza	load_z
  :                            16 
00:00788F 052000              +17 	on	see$2
00:007890 60207A              +18 	la	NFS_MOUNTS			. does the kernel have it?
00:007891 0D2000              +19 	off	see$2
  :                            20 
00:007892 20F00A              +21 	sa	indexp
00:007893 D608AB              +22 	jnza	include_me_in
  :                            23 
00:007894 651000              +24 	la	4096,,xi
00:007895 55207A              +25 	lx	NFS_MOUNTS,,xi
00:007896 75004A              +26 	ii	ASSIGN_XVECTOR$
00:007897 C608AF              +27 	jza	load_x			. by default no table
00:007898 20F00A              +28 	sa	indexp
00:007899 340022              +29 	sabr	NFS_BDIAL
00:00789A 308A8D              +30 	z	*(NFS_BDIAL*/12)		. by default nothing in table
00:00789B FCF000              +31 	c	(fspath)	path,,i
00:00789C FCF001              +31 
00:00789D FF0A75              +31 
00:00789E 38000F              +31 
00:00789F C608AF              +32 	jza	load_x
00:0078A0 9F0004              +33 	c	(fs24_open)	fspax,,i	a,,long
00:0078A1 FCF006              +33 
00:0078A2 FCF003              +33 
00:0078A3 FF0A78              +33 
00:0078A4 38000F              +33 
00:0078A5 FD1000              +34 	c	(fs24_read)	fspax,,i	(NFS_BDIAL*/12)	4096,,xi
00:0078A6 F80A8D              +34 
00:0078A7 FCF006              +34 
00:0078A8 FCF003              +34 
00:0078A9 FF0A7B              +34 
00:0078AA 38000F              +34 
  :                            35 
  :                            36 include_me_in
00:0078AB 040002              +37 	inA	2
00:0078AC 340022              +38 	sabr	NFS_BDIAL
00:0078AD 60F00A              +39 	la	indexp
00:0078AE 208AD7              +40 	sa	*(NFS_BDIAL*/12++NFS_MOUNTS-02000)	
  :                            41 
00:0078AF 600A9F              +42 load_x	la	(0C00001s)			. just so it doesn't	
00:0078B0 750062              +43 	ii	XBASE$34			. get wrecked by accident
  :                            44 
00:0078B1 60F00A              +45 load_z	la	indexp
00:0078B2 FCF00B              +46 	$ret
00:0078B3 38000F              +46 
00:0078B4 350000              +46 
  :                            47 
  :                            48 .	vector name speed_dial
  :                            49 
                                dial	$head_far	 params(name,		long		;
                                				callpathp,	int		;
  :                            52 				planp,		int		)	
  :                            53 
00:0078B5 40F002              +54 	lr	name-1				. how much is on the stack?
00:0078B6 54F006              +55 	lx	planp,,i
00:0078B7 F608BA              +56 	jxge	global_dialplan			. only 3 words 
00:0078B8 50F006              +57 	lx	planp				. 4+ words
00:0078B9 B608C3              +58 	j	planp_given			. yes
  :                            59 
  :                            60 global_dialplan					. no
00:0078BA 60207A              +61 	la	NFS_MOUNTS
00:0078BB D608C1              +62 	jnza	dialplan_bound
00:0078BC 3E0889              +63 	lcal	load
00:0078BD 60207A              +64 	la	NFS_MOUNTS
00:0078BE D608C1              +65 	jnza	dialplan_bound
  :                            66 
00:0078BF 65FFFB              +67 	la	-IO_ERROR,,xi
00:0078C0 C608E1              +68 	jza	xdial
  :                            69 
  :                            70 dialplan_bound
00:0078C1 340022              +71 	sabr	NFS_BDIAL
  :                            72 
00:0078C2 500A8D              +73 	lx	(NFS_BDIAL*/12)
  :                            74 
  :                            75 planp_given
00:0078C3 40A000              +76 	lr	0, x
00:0078C4 800000              +77 	ax	r
00:0078C5 800000              +78 	ax	r
00:0078C6 850001              +79 	ax	1,,xi
00:0078C7 B608CD              +80 	j	next?
  :                            81 
00:0078C8 85FFFE              +82 next!	ax	-2,,xi
00:0078C9 60A001              +83 	la	1, x
00:0078CA CFC000              +84 	dl	0, a
00:0078CB DFF003              +85 	dan	name
00:0078CC 7C08D0              +86 	jdz	retrieved
  :                            87 
00:0078CD 1E08C8              +88 next?	jdr	next!
  :                            89 
00:0078CE 65FFFA              +90 	la	-NO_DEVICE,,xi
00:0078CF B608E1              +91 	j	xdial
  :                            92 
  :                            93 retrieved
00:0078D0 58A000              +94 	ly	0, x
00:0078D1 50F005              +95 	lx	callpathp
00:0078D2 4FB000              +96 	ql	0, y				. socket information into path
00:0078D3 47A000              +97 	qs	0, x
00:0078D4 CFB004              +98 	dl	4, y
00:0078D5 C7A004              +99 	ds	4, x
  :                            100 
00:0078D6 FCA006              +101 	c	(strlenx)	6,x,i		. complete the header word
00:0078D7 FCF001              +101 
00:0078D8 FF0AD8              +101 
00:0078D9 38000F              +101 
00:0078DA 260008              +102 	sal	8				. bytes length text part of path
00:0078DB 90A000              +103 	or	0, x
00:0078DC C00005              +104 	aa	b				. containing words
00:0078DD 20A000              +105 	sa	0, x				. write path header word back
  :                            106 
00:0078DE 600A9F              +107 	la	(0C00001s)
00:0078DF 750062              +108 	ii	XBASE$34
  :                            109 
00:0078E0 650000              +110 	la	0,,xi
  :                            111 
00:0078E1 3D0000              +112 xdial	$ret
  :                            113 
  :                            114 .	vector name dialplan_online
  :                            115 .	called when not using speed_dial for a search
  :                            116 .	to check the application's direct links to mount paths are not out of date
  :                            117 .	if OK load dialplan if not already loaded, local routine load
  :                            118 
00:0078E2 DF0AD9              +119 online	dan	(dialplan_dependency_key:L)
00:0078E3 E608E6              +120 	jna	caller_key_outdated
00:0078E4 3E0889              +121 	lcal	load
00:0078E5 3D0001              +122 	fret	1				. good mate
  :                            123 
  :                            124 caller_key_outdated
00:0078E6 3D0000              +125 	fret	0				. caller needs rebuild
  :                            126 
  :                            127 	$root
  :                            239 
  :                            240 	$path		../stream
  :                            241: 	$include	sscan
  :                            1 	$if		0
  :                            2 	$list		0
  :                            3 	$path		../
  :                            4 	$include	def/rta.def
  :                            5 	$include	language/stack.def
  :                            6 	$include	lib/alib.def
  :                            7 	$list
  :                            8 	$path
  :                            9 	$endif
  :                            10 
  :                            11 $(0)
  :                            12 	.	vector name scanform
  :                            13 
  :                            14 scanfor* $tree
                                scan	$head_far	 params(targetp,	int		;
                                				formatp,	int	)	;
                                								;
00:0078E7 8F0014              +18 			scalars(stream_registers,  float, RDATAC)
  :                            19 
00:0078E8 6503E8              +20 	la	1000,,xi
00:0078E9 68F007              +21 	lb	targetp
00:0078EA FF0A71              +22 	call	(rstream_starta)
  :                            23 
                                	c	(rstream_scana)		targetp-1	;	. limit of pointers
00:0078EB FCF008              +25 					formatp,,i		. address of pointers
00:0078EC F8F007              +25 
00:0078ED FCF002              +25 
00:0078EE FF0ADB              +25 
00:0078EF 38000F              +25 
  :                            26 
  :                            27 
00:0078F0 870014              +28 	qpop	RDATAC
00:0078F1 3D0000              +29 	fret
  :                            30 	$root
  :                            31 
  :                            32 	.	vector name editform
  :                            33 editfor* $tree
                                edit	$head_far	 params(targetp,	int		;
                                				formatp,	int	)	;
                                								;
                                			scalars(save_rkxy,	float,	r	;
                                				save_ab67,	float,	a	;
00:0078F2 8F0000              +39 				stream_registers,  float, RDATAC)
00:0078F3 8F0004              +39 
00:0078F4 8F0014              +39 
  :                            40 
00:0078F5 50F00F              +41 	lx	targetp
00:0078F6 FF0ADC              +42 	c	(wstream_starta)
  :                            43 
                                	c	(wstream_composea)	targetp-1	;	. limit of arguments
00:0078F7 FCF010              +45 					formatp,,i		. address of pointers
00:0078F8 F8F00F              +45 
00:0078F9 FCF002              +45 
00:0078FA FF0ADD              +45 
00:0078FB 38000F              +45 
  :                            46 
00:0078FC 20F004              +47 	sa	save_ab67
00:0078FD 870014              +48 	qpop	RDATAC
00:0078FE 870004              +49 	qpop	a
00:0078FF 870000              +50 	qpop	r
00:007900 3D0000              +51 	fret
  :                            52 	$root
  :                            53 
  :                            242: 	$include	fscan
  :                            1 	$if		0
  :                            2 	$list		0
  :                            3 	$path		../
  :                            4 	$include	def/rta.def
  :                            5 	$include	def/ii.def
  :                            6 	$include	fs/response.def
  :                            7 	$include	language/stack.def
  :                            8 	$include	t77.4/socket.def
  :                            9 	$list
  :                            10 	$path
  :                            11 	$endif
  :                            12 	
  :                            13 $(0)
  :                            14 
  :                            15 	. vector name fscanform
  :                            16 
  :                            17 f_scanform* $tree	
  :                            18 	$head_far	 params(handle,	int)
  :                            19 
00:007901 60F003              +20 	la	handle
00:007902 750055              +21 	ii	READ_SOCKET$
  :                            22 
00:007903 480A60              +23 	lk	(255*/16s)
  :                            24 
00:007904 AF0A94              +25 	mtane	(TCP_TCB*/16)
00:007905 B60907              +25 
00:007906 F70ADE              +26 	go	(net_scan_tcp)
  :                            27 
00:007907 AF0A79              +28 	mta	(FS$DEVICE$ARRAY*/16s)
00:007908 B6090B              +29 	j	no_file_type
  :                            30 
00:007909 28F003              +31 	sb	handle			. replace handle in arguments
00:00790A F70ADF              +32 	go	(fscan_datafile)	. with open file block pointer
  :                            33 
  :                            34 	. more media go here
  :                            35 	
  :                            36 no_file_type
00:00790B 65FFF7              +37 	la	-NO_FILE_TYPE,,xi
00:00790C 3D0000              +38 	fret	0
  :                            39 	$root
  :                            40 
  :                            41 
  :                            42 	. vector name fprintf
  :                            43 	. format in program space
  :                            44 	. same for all media types
  :                            45 
  :                            46 FORMAT_FRAME	$equ	1012
  :                            47 
  :                            48 f_editform* $tree
                                			$head_far params(handle,			int		;
                                					formatp,		int	)	;
                                										;
                                				 xframe(save_rkxy,		float,	r	;
                                					save_ab67,		float,	a	;
                                					stream_registers,	float, RDATAC	;
                                										;
00:00790D FDFC00              +56 			 		o_frame,		FORMAT_FRAME	)
00:00790E 2F000E              +56 
00:00790F 8F0000              +56 
00:007910 87E000              +56 
00:007911 47E004              +56 
00:007912 8F0014              +56 
00:007913 87E008              +56 
  :                            57 
00:007914 54E00C              +58 	lx	o_frame,,i
00:007915 FF0ADC              +59 	call	(wstream_starta)
  :                            60 
                                	c	(wstream_composea)	handle-1		;	. stack walkback word = args limit
00:007916 FCF004              +62 					formatp,,i			. address of 1st **pointer
00:007917 F8F003              +62 
00:007918 FCF002              +62 
00:007919 FF0ADD              +62 
00:00791A 38000F              +62 
  :                            63 
00:00791B E60926              +64 	jna	no_write					. if the format call went wrong
  :                            65 
00:00791C F80004              +66 	c	(write)	handle	o_frame,,i	a		. a = columns in frame
00:00791D FCE00C              +66 
00:00791E F8F005              +66 
00:00791F FCF003              +66 
00:007920 FF0AE0              +66 
00:007921 38000F              +66 
00:007922 F8F003              +67 	c	(fsync)	handle
00:007923 FCF001              +67 
00:007924 FF0AE1              +67 
00:007925 38000F              +67 
  :                            68 
  :                            69 no_write
00:007926 20E004              +70 	sa	save_ab67
00:007927 4FE000              +71 	ql	save_rkxy
00:007928 470000              +72 	qs	r
00:007929 4FE008              +73 	ql	stream_registers
00:00792A 470014              +74 	qs	RDATAC
00:00792B 4FE004              +75 	ql	save_ab67
00:00792C FCE400              +76 	$ret
00:00792D 38000E              +76 
00:00792E 3D0000              +76 
  :                            77 	
  :                            78 	$if	0
  :                            79 	qpop	RDATAC	. stream registers now need to be nonvolatile
  :                            80 	qpop	r						. recover the shielded caller registers
  :                            81 	push	FORMAT_FRAME, fp, i				. sell the external stack composition frame
  :                            82 	pop	fp
  :                            83 .	USTREAM		. defaults -> b$stream / SIMD registers
  :                            84 	fret	0
  :                            85 	$endif
  :                            86 
  :                            87 	$root
  :                            243: 	$include	net_scan
  :                            1 	$if		0
  :                            2 	$path		../
  :                            3 	$list		0
  :                            4 	$include	def/rta.def
  :                            5 	$include	def/ii.def
  :                            6 	$include	def.sys/base.def
  :                            7 	$include,$void	rta.gen/syslabel
  :                            8 	$include	language/stack.def
  :                            9 	$list
  :                            10 	$include	lib/alib.def
  :                            11 	$include	fs/response.def
  :                            12 	$include	t77.4/dq.def
  :                            13 	$include	t77.4/ip.def
  :                            14 	$include	t77.4/socket.def
  :                            15 	$include	t77.4/tcp.def
  :                            16 	$path
  :                            17 	$endif
  :                            18 
  :                            19 $(70::0,fp)
  :                            20 descriptor	acw
  :                            21 $(66::0,x)
42:000000                     +22 transmissionp	tcp_connection
42:000001                     +22 
42:000002                     +22 
42:000003                     +22 
42:000004                     +22 
42:000005                     +22 
42:000006                     +22 
42:000008                     +22 
42:00000A                     +22 
42:00000C                     +22 
42:00000E                     +22 
42:000010                     +22 
42:000011                     +22 
42:000012                     +22 
42:000013                     +22 
42:000014                     +22 
42:000015                     +22 
42:000016                     +22 
42:000017                     +22 
  :                            23 
  :                            24 
  :                            25 $(0)
  :                            26 	. vector name net_scan_tcp
  :                            27 	. socket handle at argument 1 is already decoded in a:b
  :                            28 	. format string pointer is at location before target pointers
  :                            29 	. stack walkback pointer at arguments - 1 is limit of arguments
  :                            30 
  :                            31 scan_tcp* $tree
                                	$head_far	 params(sotcp,	int			;
                                				formap,	int		)	;
                                								;
00:00792F 8F0014              +35 			scalars(stream_registers,  float, RDATAC)
  :                            36 
00:007930 3E0954              +37 	lcal	derive_tcp_tcb		. handle tuple is already expanded in a:b
  :                            38 					. base the containing block of connections
  :                            39 					. and calculate connection pointer in x
00:007931 60A001              +40 open?	la	transmissionp:state
00:007932 C5FFFB              +41 	aa	-TCP_ESTABLISHED,,xi
00:007933 D6094E              +42 	jnza	file_not_open
00:007934 60A010              +43 	la	transmissionp:receiveq:head
00:007935 D60938              +44 	jnza	data
00:007936 750041              +45 	ii	YIELD$
00:007937 B60931              +46 	j	open?
  :                            47 
[+0009]10
00:007938 750000              +48 data	ii	ON_NETB$
  :                            49 
00:007939 580004              +50 	ly	a
00:00793A 60B003              +51 	la	descriptor:bytes,y
00:00793B 68B006              +52 	lb	descriptor:apdata,y
00:00793C FF0AE2              +53 	call	(rstream_start_net)
  :                            54 
00:00793D 60800D              +55 	la	*q
00:00793E 480AE3              +56 	lk	(00FF00)
00:00793F AF0001              +57 	mtane	k
00:007940 B60942              +57 
00:007941 B6094B              +58 	j	keyboard_eof
  :                            59 
                                	c	(rstream_scana)		sotcp-1		; 	. param stream limit
00:007942 FCF008              +61 					formap,,i		. param stream address 
00:007943 F8F007              +61 
00:007944 FCF002              +61 
00:007945 FF0ADB              +61 
00:007946 38000F              +61 
  :                            62 								. other than socket
00:007947 20F007              +63 	sa	sotcp						. borrow a stack location
00:007948 FF0AA9              +64 	call	(tcp_release_rxline)
00:007949 60F007              +65 	la	sotcp						. until after tcp_release_rxline
00:00794A B60950              +66 	j	nexitx
  :                            67 
  :                            68 keyboard_eof
00:00794B FF0AA9              +69 	call	(tcp_release_rxline)
00:00794C 65FFA0              +70 	la	-NO_DATA,,xi
00:00794D B60950              +71 	j	nexitx
  :                            72 
  :                            73 file_not_open
00:00794E 65FFE0              +74 	la	-FILE_NOT_OPEN,,xi
00:00794F B60951              +75 	j	nexity
  :                            76 
  :                            77 .	USTREAM					. defaults -> b$stream / SIMD registers
  :                            78 
[+000e]10
00:007950 750000              +79 nexitx	ii	FREE_NETB$
[+000f]10
00:007951 750000              +80 nexity	ii	FREE_SOCKB$
  :                            81 
00:007952 870014              +82 nexitz	qpop	RDATAC				. stream registers need to be nonvolatile
00:007953 3D0000              +83 	fret	0
  :                            84 	$root
  :                            85 
  :                            86 derive_tcp_tcb
00:007954 500AE4              +87 	lx	(BSOCKET*/12)
00:007955 A50FF8              +88 	and	0FF8,,xi
00:007956 800004              +89 	ax	a
00:007957 600005              +90 	la	b
00:007958 34002F              +91 	sabr	BSOCKET
00:007959 350000              +92 	lret	0
  :                            93 
  :                            244: 	$include	fgets
  :                            1 
  :                            2 
  :                            3 fgets_by_handle		. vector name fgets
  :                            4 
                                	$head_far	 params(handle1,	int		;
                                				bufferp1,	int		;
  :                            7 				bytes1,		int		)
  :                            8 
00:00795A 60F003              +9 	la	handle1
00:00795B 750055              +10 	ii	READ_SOCKET$
00:00795C 480A60              +11 	lk	(255*/16s)
00:00795D AF0A94              +12 	mtane	(TCP_TCB*/16s)
00:00795E B60960              +12 
00:00795F F70AE5              +13 	go	(read)
00:007960 AF0A95              +14 	mtane	(IPPROTO_UDP*/16s)
00:007961 B60963              +14 
00:007962 F70AE5              +15 	go	(read)
00:007963 AF0A79              +16 	mta	(FS$DEVICE$ARRAY*/16s)
00:007964 B60967              +17 	j	fgets_null
  :                            18 
00:007965 28F003              +19 	sb	handle1		. replace handle in arguments
00:007966 B60969              +20 	j	fgets24		. with file open block pointer
  :                            21 
  :                            22 fgets_null
00:007967 650000              +23 	la	0,,xi		. null device
00:007968 3D0000              +24 	fret	0
  :                            25 
  :                            26 
  :                            27 				. vector name fgets_datafile
  :                            28 				. argument 1 is -> file open block
  :                            29 				. not a handle
  :                            30 
  :                            31 FGETS_DIRECT	$equ	1
  :                            32 
  :                            33 fgets24	$tree
  :                            34 
                                	$head_far	 params(file_openp,	int		;
                                				bufferp,	int		;
                                				bytes,		int	)	;
                                								;
                                			scalars(data_sampled,	long		;
                                				transfer,	int		;
                                				final_count,	int		;
                                				bytes_delivered,int		;
                                				extentp,	int		;
                                				share,		int		;
00:007969 9F0A6B              +45 				stream_registers,  float, RDATAC)
00:00796A FD0000              +45 
00:00796B FD0000              +45 
00:00796C FD0000              +45 
00:00796D FD0000              +45 
00:00796E FD0000              +45 
00:00796F 8F0014              +45 
  :                            46 
00:007970 600AE6              +47 	la	(B_FS2*/12)
00:007971 480AE7              +48 	lk	(63*/12)
00:007972 AFF00E              +49 	mta	file_openp
00:007973 B60976              +50 	j	noshare
00:007974 FF0AE8              +51 	call	(fileshare_space_open)
00:007975 0FF004              +52 	n	share
  :                            53 noshare
  :                            54 
00:007976 50F00F              +55 	lx	bufferp
00:007977 FF0ADC              +56 	call	(wstream_starta)
  :                            57 
  :                            58 	. the extent is in memory word addressable filestore or otherwise cached
  :                            59 	. extent size is known to the file system
  :                            60 	. only words split across read requests are accessed twice
  :                            61 
00:007978 9F0A6B              +62 	c	(fs24_advance)	file_openp	(0L),,long	. describe current extent
00:007979 F8F010              +62 
00:00797A FCF003              +62 
00:00797B FF0A7F              +62 
00:00797C 38000F              +62 
00:00797D E609C8              +63 	jna	break
00:00797E 7C09C1              +64 	jdz	away			. a is just as zero as b is. Nothing more to read
  :                            65 	
00:00797F C7F009              +66 sample	ds	data_sampled
  :                            67 
  :                            68 	.	fs24_window is zero-copy read on part of a file extent
  :                            69 	.	at seek location per open / previous reads / fs24_advance
  :                            70 
00:007980 F8F00E              +71 	c	(fs24_window)	file_openp
00:007981 FCF001              +71 
00:007982 FF0AE9              +71 
00:007983 38000F              +71 
  :                            72 								
00:007984 28F005              +73 	sb	extentp
00:007985 CFF009              +74 	dl	data_sampled
  :                            75 
  :                            76 					. b = words remaining in extent
00:007986 ED0003              +77 	mf	$word/$byte,,xi		. from actual position. Translate for bytes
  :                            78 
00:007987 60F010              +79 	la	bytes			. posit outstanding maximum bytes
00:007988 20F008              +80 	sa	transfer		. are fewer that available cached bytes
00:007989 20F007              +81 	sa	final_count		. then change that if necessary
  :                            82 
00:00798A 50F00E              +83 	lx	file_openp		. net of any part of 1st word already consumed
00:00798B D8A006              +84 	anb	fspaxq:o:column		. chip away bytes already taken from 1st word
  :                            85 
00:00798C 600005              +86 	la	b			. a = net bytes cached
00:00798D D0F010              +87 	ana	bytes			. b = net bytes - caller maximum
00:00798E 7E0991              +88 	jc	transfer_decided	. transfer + final_count are already caller maximum
00:00798F 28F008              +89 	sb	transfer		. change them to available = less
00:007990 28F007              +90 	sb	final_count		. this is the decrementing loop count
  :                            91 
  :                            92 transfer_decided
  :                            93 
  :                            94 	$if	FGETS_DIRECT
00:007991 68F005              +95 	lb	extentp			. point to the extent
  :                            96 	$else
  :                            97 	lb	text,,i			. point to the pool	
  :                            98 	$endif
  :                            99 
00:007992 FF0A71              +100 	call	(rstream_starta)	. this restarts RDATAC
00:007993 0D0020              +101         off     b$stream16r
00:007994 050040              +102 	on	b$streamZR
00:007995 4D00FF              +103 	lk	+(1*/$byte)-1,,xi
  :                            104 
00:007996 50F00E              +105 	lx	file_openp		. are there some consumed bytes
00:007997 58A006              +106 	ly	fspaxq:o:column		. in the 1st word?
00:007998 97B9D5              +107 	ex	realign, y
  :                            108 
  :                            109 
00:007999 150008              +110 along	rsr	$byte
00:00799A 680004              +111 	lb	a			. easy to interrogated in register b
  :                            112 
00:00799B 260010              +113 	sal	$word-$byte
00:00799C 1D0008              +114 	wsr	$byte
00:00799D 1FF007              +115 	dec	final_count
  :                            116 
00:00799E BD000A              +117 	xorB	LF,,xi			. end of line ?
00:00799F CE09B1              +118 	jzb	eoline
  :                            119 
00:0079A0 70F007              +120 	tz	final_count		. end of this cached sample?
00:0079A1 B60999              +121 	j	along			. replace all of it if so
  :                            122 
00:0079A2 60F010              +123 	la	bytes
00:0079A3 D0F008              +124 	ana	transfer
00:0079A4 20F010              +125 	sa	bytes
00:0079A5 C609B1              +126 	jza	eoline
  :                            127 
00:0079A6 50F00E              +128 	lx	file_openp
00:0079A7 30A006              +129 	z	fspaxq:o:column		. we want all the bytes of the next frame
00:0079A8 9FF009              +130 	c	(fs24_advance)	file_openp	data_sampled,,long
00:0079A9 F8F010              +130 
00:0079AA FCF003              +130 
00:0079AB FF0A7F              +130 
00:0079AC 38000F              +130 
00:0079AD 7C09B1              +131 	jdz	eoline			. no more data in the file
00:0079AE 70F006              +132 	tz	bytes_delivered		. if bytes have been delivered report them
00:0079AF E609C8              +133 	jna	break			. nothing read yet report any error from fs24_advance
00:0079B0 A6097F              +134 	jpa	sample			. this is normal, keep scanning
  :                            135 
00:0079B1 3E09CE              +136 eoline	lcal	pointerise
00:0079B2 50F00E              +137 	lx	file_openp
00:0079B3 20A006              +138 	sa	fspaxq:o:column
  :                            139 
00:0079B4 60000D              +140 	la	q
00:0079B5 D0A005              +141 	ana	fspaxq:serialp:absolute_pointer+1	. pointerise already rounded q
00:0079B6 A00AEA              +142 	and	(262143)		. remove window tag
  :                            143 
00:0079B7 68F008              +144 	lb	transfer		. the file advance is words delivered rounded down
00:0079B8 D8F007              +145 	anb	final_count		. this is the real byte count delivered
  :                            146 
00:0079B9 C8F006              +147 	ab	bytes_delivered
00:0079BA 28F006              +148 	sb	bytes_delivered
  :                            149 
00:0079BB 160018              +150 	dsr	24			. data words advance
  :                            151 
00:0079BC 9F0004              +152 	c	(fs24_advance)	file_openp	 a,,long
00:0079BD F8F010              +152 
00:0079BE FCF003              +152 
00:0079BF FF0A7F              +152 
00:0079C0 38000F              +152 
  :                            153 
00:0079C1 68F006              +154 away	lb	bytes_delivered		. this result goes back to the macro
00:0079C2 CE09C7              +155 	jzb	deliver_eofs
00:0079C3 650000              +156 	la	0,,xi			. the macro changes it to pointer -> rx
00:0079C4 1D0018              +157 	wsr	24			. if it's good
00:0079C5 600005              +158 	la	b
00:0079C6 B609C8              +159 	j	break
  :                            160 
  :                            161 deliver_eofs
00:0079C7 65FFFF              +162 	la	-1,,xi
  :                            163 	 
00:0079C8 78F004              +164 break	tp	share
00:0079C9 FF0AEB              +165 	call	(fileshare_space_close)
  :                            166 
00:0079CA 870014              +167 	qpop	RDATAC			. stream registers need to be nonvolatile
  :                            168 "$$frame" $set	$$frame-4
00:0079CB FCF007              +169 	$ret				. return whatever result has been placed in a
00:0079CC 38000F              +169 
00:0079CD 3D0000              +169 
  :                            170 
  :                            171 pointerise
00:0079CE 600014              +172 	la	RDATAC
00:0079CF C609D4              +173 	jza	pointerised
00:0079D0 650018              +174 	la	24,,xi
00:0079D1 D00014              +175 	ana	RDATAC
00:0079D2 060003              +176 	sar	3
00:0079D3 1F000D              +177 	dec	q			. read partially consumed word again
  :                            178 pointerised
00:0079D4 350000              +179 	lret	0	
  :                            180 
  :                            181 realign
00:0079D5 150000              +182 ?	$do	$word/$byte,	rsr	?*$byte-$byte
00:0079D6 150008              +182 
00:0079D7 150010              +182 
  :                            183 
  :                            184 	$root
  :                            245: 	$include	fscan24
  :                            1 
  :                            2 fscan24	$tree
  :                            3 
  :                            4 FSCAN_LWINDOW	$equ	1024
  :                            5 
  :                            6 	$if	FSCAN_LWINDOW
                                	$head_far	 params(file_openp,	int			;
                                				formap,		int		)	;
                                									;
                                			scalars(data_sampled,	long			;
                                				fields,		int			;
                                				share,		int			;
                                				stream_registers,  float, RDATAC)	;
                                									;
00:0079D8 9F0A6B              +15 			 xframe(text,		FSCAN_LWINDOW		)
00:0079D9 FD0000              +15 
00:0079DA FD0000              +15 
00:0079DB 8F0014              +15 
00:0079DC FDFC00              +15 
00:0079DD 2F000E              +15 
  :                            16 
00:0079DE 600AE6              +17 	la	(B_FS2*/12)
00:0079DF 480AE7              +18 	lk	(63*/12)
00:0079E0 AFF00B              +19 	mta	file_openp
00:0079E1 B609E4              +20 	j	noshare
00:0079E2 FF0AE8              +21 	call	(fileshare_space_open)
00:0079E3 0FF004              +22 	n	share
  :                            23 noshare
  :                            24 
  :                            25 	. the extent is in memory word addressable filestore or otherwise cached
  :                            26 	. extent size is known to the file system
  :                            27 	. only words split across read requests are accessed twice
  :                            28 
00:0079E4 9F0A6B              +29 	c	(fs24_advance)	file_openp	(0L),,long	. describe current extent
00:0079E5 F8F00D              +29 
00:0079E6 FCF003              +29 
00:0079E7 FF0A7F              +29 
00:0079E8 38000F              +29 
00:0079E9 E60A18              +30 	jna	break
00:0079EA 7C0A17              +31 	jdz	away			. a is just as zero as b is. Nothing more to read
  :                            32 	
  :                            33 sample			. ds	data_sampled	. that's only what's in extent
  :                            34 
  :                            35 	.	fs24_window is zero-copy read on part of a file extent
  :                            36 	.	at seek location per open / previous reads / fs24_advance
  :                            37 
00:0079EB FD0400              +38 	c	(fs24_snoop)	file_openp	text,,i	FSCAN_LWINDOW,,xi
00:0079EC FCE000              +38 
00:0079ED F8F00D              +38 
00:0079EE FCF003              +38 
00:0079EF FF0AEC              +38 
00:0079F0 38000F              +38 
00:0079F1 E60A18              +39 	jna	break
00:0079F2 C60A17              +40 	jza	away
  :                            41 							
00:0079F3 160018              +42 	dsr	24
00:0079F4 C7F006              +43 	ds	data_sampled
  :                            44 
  :                            45 	$else
  :                            46 
                                	$head_far	 params(file_openp,	int		;
                                				formap,		int	)	;
                                			scalars(data_sampled,	long		;
                                				fields,		int		;
                                				share,		int		;
                                				text,		8		;
  :                            53 				stream_registers,  float, RDATAC)
  :                            54 
  :                            55 	la	(B_FS2*/12)
  :                            56 	lk	(63*/12)
  :                            57 	mta	file_openp
  :                            58 	j	noshare
  :                            59 	call	(sharefile_space_open)
  :                            60 	n	share
  :                            61 
  :                            62 noshare
  :                            63 
  :                            64 	. the objective of a sample cached read is to straddle extents transparently
  :                            65 	. this method is more portable if filestore is not memory word addressable
  :                            66 	. and if extents are not buffered in memory
  :                            67 
  :                            68 	. 1 get a format command or stop
  :                            69 	. 
  :                            70 	. 1 buffer some data
  :                            71 
  :                            72 sample	c	(fs24_snoop)	file_openp	text,,i		8,,xi
  :                            73 
  :                            74 	jza	break		. there isn't any data
  :                            75 	jna	break
  :                            76 
  :                            77 	jna	away
  :                            78 	jza	away
  :                            79 	dsr	24
  :                            80 	ds	data_sampled
  :                            81 	$endif
  :                            82 					. b = words remaining in extent
00:0079F5 ED0003              +83 	mf	$word/$byte,,xi		. from actual position. Translate for bytes
  :                            84 
00:0079F6 50F00B              +85 	lx	file_openp
00:0079F7 58A006              +86 	ly	fspaxq:o:column
00:0079F8 D80003              +87 	anb	y
00:0079F9 280010              +88 	sb	BYTES
00:0079FA 60A007              +89 	la	fspaxq:o:flags
00:0079FB 200013              +90 	sa	LAST_BYTE_READ
00:0079FC 050040              +91 	on	b$streamZR
00:0079FD 0D00A0              +92 	off	b$stream16r++half$w
00:0079FE 300014              +93 	z	RDATAC			. that's compensated with o:column
  :                            94 
00:0079FF 6CE000              +95 	lb	text,,i
00:007A00 28000D              +96 	sb	q
  :                            97 
  :                            98 .	lr	LAST_BYTE_READ
  :                            99 .	call	(rstream_starta)
  :                            100 .	sr	LAST_BYTE_READ
  :                            101 
00:007A01 97B9D5              +102 	ex	fgets24:realign, y
  :                            103 
00:007A02 FCF00C              +104 	c	(rstream_scana)		file_openp-1	formap,,i
00:007A03 F8F00B              +104 
00:007A04 FCF002              +104 
00:007A05 FF0ADB              +104 
00:007A06 38000F              +104 
00:007A07 20F005              +105 	sa	fields
  :                            106 
00:007A08 600013              +107 	la	LAST_BYTE_READ
00:007A09 50F00B              +108 	lx	file_openp
00:007A0A 20A007              +109 	sa	fspaxq:o:flags
  :                            110 
00:007A0B 3E09CE              +111 eoline	lcal	fgets24:pointerise
00:007A0C 50F00B              +112 	lx	file_openp
00:007A0D 20A006              +113 	sa	fspaxq:o:column
  :                            114 
00:007A0E 60000D              +115 	la	q
00:007A0F D4E000              +116 	ana	text,,i			. pointerise already rounded q
00:007A10 A00AEA              +117 	and	(262143)		. remove window tag
  :                            118 
00:007A11 160018              +119 	dsr	24			. data words advance
  :                            120 
00:007A12 9F0004              +121 	c	(fs24_advance)	file_openp	 a,,long
00:007A13 F8F00D              +121 
00:007A14 FCF003              +121 
00:007A15 FF0A7F              +121 
00:007A16 38000F              +121 
  :                            122 
00:007A17 60F005              +123 away	la	fields
00:007A18 78F004              +124 break	tp	share
00:007A19 FF0AEB              +125 	call	(fileshare_space_close)
  :                            126 .	USTREAM				. defaults -> b$stream / SIMD registers
00:007A1A 870014              +127 	qpop	RDATAC			. stream register need to be nonvolatile
  :                            128 "$$frame" $set	$$frame-4
00:007A1B FCF004              +129 	$ret				. return whatever result has been placed in a
00:007A1C 38000F              +129 
00:007A1D FCE400              +129 
00:007A1E 38000E              +129 
00:007A1F 3D0000              +129 
  :                            130 
  :                            131 	$if	0
  :                            132 
  :                            133 .	include this file in the same iframe as stream/fgets
  :                            134 .	these routines are locally addressed as
  :                            135 .
  :                            136 .		fgets24:pointerise
  :                            137 .		fgets24:realign
  :                            138 
  :                            139 pointerise
  :                            140 	la	RDATAC
  :                            141 	jza	pointerised
  :                            142 	la	24,,xi
  :                            143 	ana	RDATAC
  :                            144 	sar	3
  :                            145 	dec	q			. read partially consumed word again
  :                            146 pointerised
  :                            147 	lret	0	
  :                            148 
  :                            149 realign
  :                            150 ?	$do	$word/$byte,	rsr	?*$byte-$byte
  :                            151 
  :                            152 	$endif
  :                            153 
  :                            154 	$root
  :                            246 	$path
  :                            247 
  :                            248: 	$include	fshare
  :                            1 fileshare	$tree
  :                            2 
  :                            3 .	vector	fileshare_space_open
  :                            4 
00:007A20 60207B              +5 open	la	FILESHARE_TABLE
00:007A21 C60A25              +6 	jza	not_configured
00:007A22 340021              +7 	sabr	B_FS2
00:007A23 650000              +8 	la	0,,xi
00:007A24 3D0000              +9 	fret	0
  :                            10 
  :                            11 not_configured
00:007A25 65FFFE              +12 	la	-NOT_THERE,,xi
00:007A26 3D0000              +13 	fret	0
  :                            14 
  :                            15 
  :                            16 .	vector	fileshare_space_close
  :                            17 
00:007A27 F80004              +18 close	push	a				. save function result in a
00:007A28 600A9F              +19 	la	(0C00001s)			. that's a device
00:007A29 750061              +20 	ii	XBASE$33			. so interrupt code must do it
00:007A2A 380004              +21 	pop	a				. restore result
00:007A2B 3D0000              +22 	fret	0
  :                            23 
  :                            24 .	vector	fileshare_assign
  :                            25 .	first call initialises the fileshare heap
  :                            26 .	shared in this table are file open states
  :                            27 
  :                            28 assign	$head_far	params(file_type,	int)
  :                            29 
00:007A2C 60207B              +30 	la	FILESHARE_TABLE
00:007A2D D60A32              +31 	jnza	ahead1				. application has FILESHARE_TABLE
  :                            32 						. application has not
00:007A2E 55207B              +33 	lx	FILESHARE_TABLE,,xi
00:007A2F 750053              +34 	ii	READ_XVECTOR$
00:007A30 C60A34              +35 	jza	obtain				. neither has kernel
00:007A31 75004D              +36 	ii	WRITE_AVECTOR$			. plant that in application vectors
00:007A32 340021              +37 ahead1	sabr	B_FS2				. place it in window
00:007A33 B60A3C              +38 	j	ahead2
  :                            39 	
00:007A34 651000              +40 obtain	la	4096,,xi
00:007A35 55207B              +41 	lx	FILESHARE_TABLE,,xi
00:007A36 75004A              +42 	ii	ASSIGN_XVECTOR$			. obtain for brand new
00:007A37 C60A51              +43 	jza	no_slot
00:007A38 75004D              +44 	ii	WRITE_AVECTOR$			. plant that in application vectors
00:007A39 340021              +45 	sabr	B_FS2
  :                            46 	
00:007A3A CF0AED              +47 	dl	(B_FS2*/12++2, B_FS2*/12++2d)	. initialise shared files-open heap
00:007A3B C78AE6              +48 	ds	*(B_FS2*/12)
  :                            49 
00:007A3C 508AEF              +50 ahead2	lx	*(B_FS2*/12++1)			. 1st descriptor in array
00:007A3D 408AE6              +51 	lr	*(B_FS2*/12)			. heap top
00:007A3E 60F003              +52 	la	file_type
00:007A3F A500FF              +53 	and	255,,xi				. only keep its length
00:007A40 4DFFFF              +54 	lk	-1,,xi				. the whole word must match that
  :                            55 
00:007A41 F60A48              +56 search	jxge	new
00:007A42 58A000              +57 	ly	0, x
00:007A43 AF0003              +58 	mtane	y
00:007A44 B60A46              +58 
00:007A45 B60A4E              +59 	j	hit
00:007A46 84B001              +60 	ax	1, y, i
00:007A47 B60A41              +61 	j	search
  :                            62 
00:007A48 500000              +63 new	lx	r				. heap top
00:007A49 400A8D              +64 	lr	(B_FS2+1*/12)			. limit of space
00:007A4A 580004              +65 	ly	a
00:007A4B 8CA001              +66 	ay	1, x, i
00:007A4C FE0A51              +67 	jyge	no_slot
00:007A4D 188AE6              +68 	sy	*(B_FS2*/12)			. new heap top
  :                            69 	
00:007A4E 60F003              +70 hit	la	file_type
00:007A4F 20A000              +71 	sa	0, x
00:007A50 B60A52              +72 	j	slot
  :                            73 
00:007A51 550000              +74 no_slot	lx	0,,xi				. none assigned
00:007A52 3D0000              +75 slot	$ret	0
  :                            76 
  :                            77 		$root
  :                            249 
  :                            250 app_emergency_stop	. do this if stop needed before normal printf would work
  :                            251 			. call ($HALT) so location of decision is on internal stack
  :                            252 
00:007A53 FDFFFC              +253 	push	-4,,xi
00:007A54 2F000E              +254 	popA	fp
  :                            255 
00:007A55 8F0AF0              +256 	qpush	("HALT %x:%x":10:0)	. character string must be in memory
00:007A56 87E000              +257 	qpop	0, fp			. so the external stack
  :                            258 
00:007A57 F8F001              +259 	c	(__fprintf)     1,,xi	0, fp, i        0, sp   1, sp
00:007A58 F8F001              +259 
00:007A59 FCE000              +259 
00:007A5A FD0001              +259 
00:007A5B FCF004              +259 
00:007A5C FF0AF4              +259 
00:007A5D 38000F              +259 
  :                            260 
00:007A5E 750046              +261 	ii	EXIT$
  :                            262 
  :                            263 	$do	$<256,$(0:256)
  :                            264 	$do	$zenith>4096,	$flag	fs block overruns expected high address
  :                            265 
*EOF*
00:007a5f+800000
00:007a60+FF0000
00:007a61+440000
00:007a62+0001C1
00:007a63+460000
00:007a64+450000
00:007a65+560000
00:007a66+000000
00:007a67+5A0000
00:007a68+40003F
00:007a69+580000
00:007a6a+00FFFF
00:007a6b+000000000000
00:007a6d+000000000000000000000000
00:007a71+[0000]18:000000
00:007a72+0001C2
00:007a73+0001C3
00:007a74+00002F
00:007a75+0001C5
00:007a76+03000B
00:007a77+0001DD
00:007a78+0001C7
00:007a79+030000
00:007a7a+[0002]18:000000
00:007a7b+0001C8
00:007a7c+3FFFFF
00:007a7d+000000000040
00:007a7f+0001C9
00:007a80+FFFFFFFFFFFFFFFFFFFFFFFF
00:007a84+008000
00:007a85+0001ED
00:007a86+000000000002
00:007a88+0001CA
00:007a89+500000
00:007a8a+4C0000
00:007a8b+020000
00:007a8c+0001CB
00:007a8d+022000
00:007a8e+0001CC
00:007a8f+FFFF00
00:007a90+4C4700
00:007a91+0001DF
00:007a92+2F0000
00:007a93+0001C6
00:007a94+3F0000
00:007a95+110000
00:007a96+0001E0
00:007a97+[0003]18:000000
00:007a98+0001F0
00:007a99+[0004]18:000000
00:007a9a+0001E1
00:007a9b+0001EB
00:007a9c+[0005]18:000000
00:007a9d+060000
00:007a9e+0001E2
00:007a9f+C00001
00:007aa0+FF00FF
00:007aa1+0003FF
00:007aa2+[0007]18:000000
00:007aa3+000000000001
00:007aa5+000000000003
00:007aa7+0000010086A5
00:007aa9+[0008]18:000000
00:007aaa+000000000001000000000000
00:007aae+0000000000010000000001A4
00:007ab2+02006D
00:007ab3+000000000001
000000000018
000000000000
000000000000
000000000000
000000000000
000000000001
000000000000
000000000000000000000000
00:007ac7+[000A]18:000000
00:007ac8+0001DE
00:007ac9+000000000008
00:007acb+0000010086A3
00:007acd+[000C]18:000000
00:007ace+[000D]18:000000
00:007acf+[0010]18:000000
00:007ad0+000000000006
00:007ad2+555556
00:007ad3+[0011]18:000000
00:007ad4+000000000007
00:007ad6+005018
00:007ad7+02207A
00:007ad8+[0012]18:000000
00:007ad9+002F1A51D07B
00:007adb+[0013]18:000000
00:007adc+[0014]18:000000
00:007add+[0015]18:000000
00:007ade+0001DC
00:007adf+0001EA
00:007ae0+0001D4
00:007ae1+0001D6
00:007ae2+[0016]18:000000
00:007ae3+00FF00
00:007ae4+02F000
00:007ae5+0001D3
00:007ae6+021000
00:007ae7+03F000
00:007ae8+0001E7
00:007ae9+0001E6
00:007aea+03FFFF
00:007aeb+0001E8
00:007aec+0001E3
00:007aed+021002021002
00:007aef+021001
00:007af0+48414C542025783A25780A00
00:007af4+0001DB
$$call_space=000003
$$frame=000000
$$list=000004
$$params=000001
$$xframe=$46:000000
$$zero_stack=000000
$1=$01:000007
$ACTIVATE=400000
$FINESSE=000001
$HALT+=$00:0001F3
$K_WPROTECT=000001
$MCAST_THREAD_HALT=000000800000
$TEST_WPROTECT=000000
$bits=000060
$bypass=:N129:P:0:000000
$extent1=:N129:P:0:000000
$extent2=:N129:P:0:000000
$filetag=:N129:P:0:000000
$filetree=:N129:P:0:000000
$head_far=:N131:P:0:000003
$head_near=:N131:P:0:000002
$link=:N129:P:0:00004C
$mount=:N129:P:0:00004D
$net_ipv4=:N65:F:0:000000
$net_socket=:N129:P:0:000000
$neta=:F1:00002A
$netp=.32.16
$page_control=:N129:P:0:000000
$page_end=:N129:P:0:000000
$ret=:P1:0:00001C
$sockaddr=:N129:P:0:000000
$socket=:N129:P:0:000000
$stack_macro_remarks=000000
$vector=:P1:0:00001E
$volume_label=:N129:P:0:000000
A$IDX
ACW_SIZE=$46:000008
AFFINITY$=00004C
AF_INET=000002
ALREADY_CONNECTED=000038
ANYNET=000000
APP1_BANK=00E000
APPLICATION_BASE=00A000
APPLICATION_HEADER_WORDS=080000
APP_BSHARE=000023
ARRAY$=000044
ASCII_LIB1=008000
ASSIGN_XVECTOR$=00004A
A_PROTOS_B3_INITIAL_BANK=003800
A_PROTOS_BANK1=005000
A_PROTOS_BANK2=009000
B1$=000058
BAD_ADDRESS=00000E
BAD_ARGUMENT=000016
BANK$=000043
BANK$FREE=000045
BOORPARAMD=0186BA
BOOT$FILE=000042
BSOCKET=00002F
BVOLATILE_I=00002C
BY$PASS=000080
BYTES=000010
BYTES_RECIPROCAL=:F1:000061
B_FS1=000020
B_FS2=000021
B_TEMP=000029
CHAINS=000020
CHAINS_LOG=000005
CHAINS_MASK=00001F
CONTROL_WORDS$=000004
CORE_FS1_BANK=00F000
COULD_NOT=000023
CR=00000D
DATAFILE_NAME_OFFSET$=000009
DAYCLOCK$=000097
DAYCLOCK$U=000096
DAYCLOCK$W=00005A
DBSESSIONMGR=0186B0
DBXD=0186A6
DIRECTORY=000015
DIRECTORY$BLOCK=000400
DIRECTORY_NAME_OFFSET$=000004
DISALLOWED=000001
DRIVERS_BANK1=004000
DRIVERS_BANK2=00C000
ESC=00001B
ETHERNET_CSMACD=000006
ETHERRSTATD=0186AA
EVENT_FREE$=00005D
EVENT_WAIT$=00005C
EXISTS=000011
EXIT$=000046
EXTENT$=000058
EXTENT1_WORDS$=000003
EXTENT2_WORDS$=000006
FGETS_DIRECT=000001
FILE$=000046
FILE$HANDLE
FILE_NOT_OPEN=000020
FO$FRAME
FORMAT_FRAME=0003F4
FP_GUARD$=00005E
FP_XPO$FLAG=00004E
FREE_HANDLE$=000051
FREE_NETB$
FREE_SOCKB$
FS$CORE=000001
FS$CORE_WORDS=00000B
FS$DEVICE$ARRAY=000003
FS$DEVICE_WORDS=00000B
FS$FILE_WORDS=000005
FS$NFS=000002
FS$NFS3ATTRIBUTE_WORDS=00002A
FS$NFS3RESULT_WORDS=00002C
FS$NFS_WORDS=00006D
FS$NONE=000000
FS$STREAM_WORDS=000007
FS24$_BANK_HIGH_INDEX=00FFFF
FS24_BANK=007000
GATE$=004700
GRANULE$=000040
GUARD$=00005F
HANDLE$=000050
HORIZONTAL_TAB=000009
HT=000009
HVBANK=000000
HVSOCKET=000001
I$TABLE=00004B
IFGW=000004
INTERFACES=000008
INT_SYSCALL=000004
IO_ERROR=000005
IPPROTO_ICMP=000001
IPPROTO_TCP=000006
IPPROTO_UDP=000011
IPV4_B1_INITIAL_BANK=003000
IPV4_BANK=002000
IPV4_FRAGMENTED_DGRAMS=000000
IPV4_OVERHAUL=0000A0
IP_DEFAULT_TTL=003C00
IP_DNF=004000
IP_MORE=002000
IP_OFFSET_MASK=001FFF
KERNEL$B1=000057
KERNEL$B1_1=000059
LAST_BYTE_READ=000013
LF=00000A
LIBRARY_XDR=006000
LINK$=00004C
LINK_NAME_OFFSET$=000004
LINK_WORDS$=000003
LIST$END=00005A
LOCKD=0186B5
LOCKDK=0186B4
LOG=:F1:000021
LOG1BIT=:F1:000033
LOG24=:N65:F:0:000000
MAX_INT_MASK=000007
MICRO_IMAGE=000001
MOUNT$=00004D
MOUNTD=0186A5
MOUNTD_PORT=0003FF
MOUNTPROC3_DUMP=000002
MOUNTPROC3_EXPORT=000005
MOUNTPROC3_MNT=000001
MOUNTPROC3_NULL=000000
MOUNTPROC3_UMNT=000003
MOUNTPROC3_UMNTALL=000004
MOUNTPROC_DUMP=000002
MOUNTPROC_EXPORT=000005
MOUNTPROC_MNT=000001
MOUNTPROC_NULL=000000
MOUNTPROC_UMNT=000003
MOUNTPROC_UMNTALL=000004
MOUNT_NAME_OFFSET$=000004
MOUNT_VERS=000003
MOUNT_WORDS$=000003
MSG_NONBLOCK=000004
MTU=000011
NETBUF_MAX=002020
NET_ADDRESSES=000018
NET_FREECHAINS=000101
NET_GRANULE=000020
NET_LOG=000005
NET_XBANK=00A000
NFBLK=000003
NFCHR=000004
NFDIR=000002
NFLNK=000005
NFNON=000000
NFREG=000001
NFSD=0186A3
NFSERR_ACCESS=00000D
NFSERR_DQOT=000045
NFSERR_EXIST=000011
NFSERR_FBIG=00001B
NFSERR_IO=000005
NFSERR_ISDIR=000015
NFSERR_NAMETOOLONG=00003F
NFSERR_NODEV=000013
NFSERR_NOENT=000002
NFSERR_NOSPC=00001C
NFSERR_NOTDIR=000014
NFSERR_NOTEMPTY=000042
NFSERR_NXIO=000006
NFSERR_PERM=000001
NFSERR_ROFS=00001E
NFSERR_STALE=000046
NFSERR_WFLUSH=000063
NFSPROC3_ACCESS=000004
NFSPROC3_COMMIT=000015
NFSPROC3_CREATE=000008
NFSPROC3_FSINFO=000013
NFSPROC3_FSSTAT=000012
NFSPROC3_GETATTR=000001
NFSPROC3_LINK=00000F
NFSPROC3_LOOKUP=000003
NFSPROC3_MKDIR=000009
NFSPROC3_MKNOD=00000B
NFSPROC3_NULL=000000
NFSPROC3_PATHCONF=000014
NFSPROC3_READ=000006
NFSPROC3_READDIR=000010
NFSPROC3_READDIRPLUS=000011
NFSPROC3_READLINK=000005
NFSPROC3_REMOVE=00000C
NFSPROC3_RENAME=00000E
NFSPROC3_RMDIR=00000D
NFSPROC3_SETATTR=000002
NFSPROC3_SYMLINK=00000A
NFSPROC3_WRITE=000007
NFSPROC_CREATE=000009
NFSPROC_GETATTR=000001
NFSPROC_LINK=00000C
NFSPROC_LOOKUP=000004
NFSPROC_MKDIR=00000E
NFSPROC_NULL=000000
NFSPROC_READ=000006
NFSPROC_READDIR=000010
NFSPROC_READLINK=000005
NFSPROC_REMOVE=00000A
NFSPROC_RENAME=00000B
NFSPROC_RMDIR=00000F
NFSPROC_ROOT=000003
NFSPROC_SETATTR=000002
NFSPROC_STATFS=000011
NFSPROC_SYMLINK=00000D
NFSPROC_WRITE=000008
NFSPROC_WRITECACHE=000007
NFS_BDIAL=000022
NFS_OK=000000
NFS_SERVERPORT=000801
NFS_VERS=000003
NOT_DEVICE=000013
NOT_DIRECTORY=000014
NOT_THERE=000002
NOT_YOU=00000D
NO_CONNECTION=000020
NO_DATA=000060
NO_DEVICE=000006
NO_FILE_TYPE=000009
NO_HANDLE=000016
NO_PATH=000041
NO_PIPE=000020
NO_PROTOCOL=00002A
NO_STORAGE=00000C
OFFICEAUTO=0186B2
ON_NETB$
OVERSIZE=000028
O_APPEND=000008
O_CREAT=000200
O_NONBLOCK=000004
O_OCTET=004000
O_RDONLY=000000
O_RDWR=000002
O_TRUNC=000400
O_WRONLY=000001
PAGE$CONTROL=000050
PAGE$END=000045
PCNFSD=0249F1
PD_INET=000800
PF_INET=000002
PLATFORM_RELAY=000064
PLATFORM_RELAY2=000065
PMAPPROC_CALLIT=000005
PMAPPROC_DUMP=000004
PMAPPROC_GETPORT=000003
PMAPPROC_NULL=000000
PMAPPROC_SET=000001
PMAPPROC_UNSET=000002
PMAP_PROGRAM=0186A0
PMAP_VERS=000002
PORTBIAS=017EA0
PORTMAPPER_PORT=00006F
PORT_ALREADY_BOUND=00003A
PORT_NOT_BOUND=000039
PRIORITY$=000095
PUSHBACK=:P1:0:000020
QUAD=000008
READ_HANDLE$=000052
READ_SOCKET$=000055
READ_XVECTOR$=000053
REALTIME$_CLOCK=000094
RELAY_ROUTE=000800
REMOTE_REFUSED=00003D
REXD=0186B1
ROUTES=000018
RPAGES=000080
RPAGEW=000400
RPCADAPT=:N65:F:0:000000
RPC_UDP=000000
RQUOTAD=0186AB
RSTATD=0186A1
RSTATD_=0186A4
RSTATD__=0186AE
RUNAWAY$=00005F
RUSERSD=0186A2
RX_BASE=000020
RX_FRAGMENTS=000000
SCALE=000012
SCALE_TRIPPED=000012
SEEK_CUR=000001
SEEK_END=000002
SEEK_SET=000000
SEGMENT_QL=:P1:0:00001F
SELECTION_SVC=0186AF
SIGNS=000011
SOCKET_CALL_FLAGS=00001B
SOCKET_ENGAGED=FFFFFE
SOCKET_NO_PROTOCOL=FFFFFF
SOFTWARELOOPBACK=000018
SOFTWARE_I_F=000001
SOFT_I_F_CAPACITY=004000
SPAWN$=000042
SPRAYD=0186AC
STACK_LIMIT$=00005F
STATD=0186B8
SUB=00001A
T$LOG=:F1:00001A
T$SLICE=004E20
TAG$=000049
TARGET_MOUNTD=0000010086A5
TCP_5WORDH=005000
TCP_6WORDH=006000
TCP_ACK=000010
TCP_CLOSED=000001
TCP_CLOSEWAIT=000008
TCP_CLOSING=00000A
TCP_DELETETCB=00000C
TCP_ESTABLISHED=000005
TCP_FIN=000001
TCP_FINWAIT1=000006
TCP_FINWAIT2=000007
TCP_FLAGS=000FFF
TCP_HL=00F000
TCP_LASTACK=000009
TCP_LISTEN=000002
TCP_NOQ=000001
TCP_PSH=000008
TCP_RELINQUISHED=000040
TCP_RST=000004
TCP_STATES_BEAT=00000A
TCP_SYN=000002
TCP_SYNRECEIVED=000004
TCP_SYNSENT=000003
TCP_TCB=00003F
TCP_TIMER1=0927C0
TCP_TIMER2=000BB8
TCP_TIMEWAIT=00000B
TCP_TIMEWAIT_MS=002710
TCP_URG=000020
THREAD$=000047
THRESHOLD_PACKETS=005DC0
TIMED_OUT=00003C
TOTAL$FREE=000048
TPORTCHAIN=:F1:000035
TREE$=000044
TRIPLE=000009
TWAIT$=00005B
TX_AXW=000008
TX_BASE=000020
TX_DATAGRAM=000013
TX_DATAGRAML=00000B
TX_FRAGMENTS=000000
TX_FRAME=000009
UDP_AUTO_CONNECT=100000
UDP_NOSOURCENET=000027
UDP_NO_CHECKSUM=200000
UDP_TX_KEEP=000000800000
USOCKET$C=000056
USTREAM=:P1:0:00006B
VOLUME$=000056
VOLUME_NAME_OFFSET$=000004
VOLUME_WORDS$=000003
WALLD=0186A8
WORKTANK_I=00002A
WORKTANK_J=00002B
WRITE_AVECTOR$=00004D
WRITE_XVECTOR$=000054
XBASE$32=000060
XBASE$33=000061
XBASE$34=000062
XBASE$35=000063
XBASE_U$=00005F
XDR_ATTRSTAT_OCTETS=000004
XDR_AUTH_VOID_OCTETS=00000C
XDR_DIROPARGS_OCTETS_BASE=000020
XDR_DIRPATH_OCTETS_BASE=000004
XDR_DISOPRES_OCTETS=000004
XDR_FATTR_OCTETS=000003
XDR_FHANDLE_OCTETS=000020
XDR_FHSTATUS_OCTETS=000004
XDR_FSINFO_OCTETS=000018
XDR_MAPLISTELT_OCTETS=000004
XDR_PMAPPING_OCTETS=000010
XDR_RDRES_OCTETS_BASE=000004
XDR_READARGS_OCTETS=000020
XDR_READDIRARGS_OCTETS=000020
XDR_READDIRRES_OCTETS_BASE=000004
XDR_RPCREQ_OCTETS=000018
XDR_RPCRESP_OCTETS_BASE=000018
XDR_SATTRARGS_OCTETS=000020
XDR_SATTR_OCTETS=000010
XDR_TIMEVAL_OCTETS=000008
XDR_TXINT=:N129:P:0:000000
XDR_TXLONG=:N129:P:0:000000
XDR_WRITEARGS_OCTETS_BASE=000020
XINT$BIND=00004F
XIOBASES=000004
X_DEVICE=000012
YIELD$=000041
YPASSWDD=0186A9
YPBIND=0186A7
__PAD=000004
__bind
__connect
__disconnect_free_tcp
__fd_zero_timeout+=$00:0001F2
__fgets+=$00:0001E4
__fprintf+=$00:0001DB
__free_tcp_port
__fscanf+=$00:0001DA
__net_disengage
__sprintf+=$00:0001D9
__sscanf+=$00:0001D8
absolute_pointer=000000,00000F
acw=:P1:0:000026
app_emergency_stop=$00:000A53
appdata_share+=$00:0001F1
appdata_vector+=$00:000472
appdata_vector:vector_index=000003,00000F
appdata_vector:data_words=000004,00000F
appdata_vector:zero_out=$00:000477
appdata_vector:in_order=$00:000479
appdata_vector:acquire=$00:000482
appdata_vector:remove=$00:000484
appdata_vector:end_of=$00:000485
appdata_vector:qualify=$00:000486
array$seg$load+=$00:0001CF
array_seg_load=$00:000391
aseg_fsfound=$00:000398
aseg_loadx=$00:0003B5
aseg_lstring=$00:00039E
asegload_bank=00000D,00000F
asegload_base=00000F,00000F
asegload_buffer=000000,00000F
asegload_file=00000E,00000F
asegload_fpax=000004,00000F
authunix=:N131:P:0:000000
authunix_blank=:N129:P:0:000000
axw=$42:000000,000002
axw:next=$42:000000,000002
axw:frame=$42:000001,000002
axw:i_f=$42:000002,000002
axw:bytes=$42:000003,000002
axw:dgram=$42:000004,000002
axw:uproto=$42:000005,000002
axw:sobdi=$42:000006,000002
axw:apdata=$42:000006,000002
axw:tcbloc=$42:000007,000002
axw:ifql=$42:000007,000002
axw:lso=$42:000007,000002
axw:total_bytes=$42:000007,000002
axw:readpoint=$42:000007,000002
axw:next_bdi=$42:000007,000002
buffer=000006,00000F
bufferp1=000004,00000F
bytes1=000005,00000F
c=:N129:P:0:000001
claim_fob+=$00:0001DD
claimfob=$00:0004C3
claimfob:claim=$00:0004C3
claimfob:rcformatw=000003,00000F
claimfob:reclaim=$00:0004CB
claimfob:claim_new=$00:0004D3
claimfob:claimed=$00:0004D5
claimfob:x_claim=$00:0004D7
client_port=$01:000042
close+=$00:0001D7
close_handle=000003,00000F
component=$00:000137
component:targetp=000002,00000F
component:sentinel=000003,00000F
create3res=:N129:P:0:000000
createhow3=:N129:P:0:000000
datagram=:N129:P:0:000000
derive_tcp_tcb=$00:000954
descriptor=$46:000000,00000E
descriptor:next=$46:000000,00000E
descriptor:frame=$46:000001,00000E
descriptor:i_f=$46:000002,00000E
descriptor:bytes=$46:000003,00000E
descriptor:dgram=$46:000004,00000E
descriptor:uproto=$46:000005,00000E
descriptor:sobdi=$46:000006,00000E
descriptor:apdata=$46:000006,00000E
descriptor:tcbloc=$46:000007,00000E
descriptor:ifql=$46:000007,00000E
descriptor:lso=$46:000007,00000E
descriptor:total_bytes=$46:000007,00000E
descriptor:readpoint=$46:000007,00000E
descriptor:next_bdi=$46:000007,00000E
dgram=$43:000000,000003
dgram:vers_ihl_tos=$43:000000,000003
dgram:bytes=$43:000001,000003
dgram:id=$43:000002,000003
dgram:flags_fragment=$43:000003,000003
dgram:ttl_protocol=$43:000004,000003
dgram:checksum=$43:000005,000003
dgram:ipsource=$43:000006,000003
dgram:ipdest=$43:000008,000003
dialplan_online+=$00:0001EE
dq=:P1:0:000022
editfor+=$00:0008F2
editfor:edit=$00:0008F2
editfor:targetp=00000F,00000F
editfor:formatp=000010,00000F
editfor:save_rkxy=000008,00000F
editfor:save_ab67=000004,00000F
editfor:stream_registers=000000,00000F
ethernet_relay=000006
f_editform+=$00:00090D
f_editform:handle=000003,00000F
f_editform:formatp=000004,00000F
f_editform:save_rkxy=$46:000000,00000E
f_editform:save_ab67=$46:000004,00000E
f_editform:stream_registers=$46:000008,00000E
f_editform:o_frame=$46:00000C,00000E
f_editform:no_write=$00:000926
f_s(1)=$01:000001
f_s(10)=$01:00000A
f_s(11)=$01:00000B
f_s(12)=$01:00000C
f_s(13)=$01:00000D
f_s(14)=$01:00000E
f_s(15)=$01:00000F
f_s(16)=$01:000010
f_s(17)=$01:000011
f_s(18)=$01:000012
f_s(19)=$01:000013
f_s(2)=$01:000002
f_s(20)=$01:000014
f_s(21)=$01:000015
f_s(22)=$01:000016
f_s(23)=$01:000017
f_s(24)=$01:000018
f_s(25)=$01:000019
f_s(26)=$01:00001A
f_s(27)=$01:00001B
f_s(28)=$01:00001C
f_s(29)=$01:00001D
f_s(3)=$01:000003
f_s(30)=$01:00001E
f_s(31)=$01:00001F
f_s(32)=$01:000020
f_s(33)=$01:000021
f_s(34)=$01:000022
f_s(35)=$01:000023
f_s(36)=$01:000024
f_s(37)=$01:000025
f_s(38)=$01:000026
f_s(39)=$01:000027
f_s(4)=$01:000004
f_s(40)=$01:000028
f_s(41)=$01:000029
f_s(42)=$01:00002A
f_s(43)=$01:00002B
f_s(44)=$01:00002C
f_s(45)=$01:00002D
f_s(46)=$01:00002E
f_s(47)=$01:00002F
f_s(48)=$01:000030
f_s(49)=$01:000031
f_s(5)=$01:000005
f_s(50)=$01:000032
f_s(51)=$01:000033
f_s(52)=$01:000034
f_s(53)=$01:000035
f_s(54)=$01:000036
f_s(55)=$01:000037
f_s(56)=$01:000038
f_s(57)=$01:000039
f_s(58)=$01:00003A
f_s(59)=$01:00003B
f_s(6)=$01:000006
f_s(60)=$01:00003C
f_s(61)=$01:00003D
f_s(62)=$01:00003E
f_s(63)=$01:00003F
f_s(7)=$01:000007
f_s(8)=$01:000008
f_s(9)=$01:000009
f_s_pointer_array=$01:000000
f_scanform+=$00:000901
f_scanform:handle=000003,00000F
f_scanform:no_file_type=$00:00090B
fblocp_b=000003,00000F
fblocp_w=000003,00000F
fgets24=$00:000969
fgets24:file_openp=00000E,00000F
fgets24:bufferp=00000F,00000F
fgets24:bytes=000010,00000F
fgets24:data_sampled=000009,00000F
fgets24:transfer=000008,00000F
fgets24:final_count=000007,00000F
fgets24:bytes_delivered=000006,00000F
fgets24:extentp=000005,00000F
fgets24:share=000004,00000F
fgets24:stream_registers=000000,00000F
fgets24:noshare=$00:000976
fgets24:sample=$00:00097F
fgets24:transfer_decided=$00:000991
fgets24:along=$00:000999
fgets24:eoline=$00:0009B1
fgets24:away=$00:0009C1
fgets24:deliver_eofs=$00:0009C7
fgets24:break=$00:0009C8
fgets24:pointerise=$00:0009CE
fgets24:pointerised=$00:0009D4
fgets24:realign=$00:0009D5
fgets_by_handle=$00:00095A
fgets_datafile+=$00:0001E5
fgets_null=$00:000967
filenfs=:N129:P:0:000000
filep=:N129:P:0:000000
fileq=:N129:P:0:000000
files=$00:0003EB
files:open=$00:0003EB
files:opath=000003,00000F
files:oflags=000004,00000F
files:read_by_handle=$00:0003F5
files:rhandle=000003,00000F
files:rbufferp=000004,00000F
files:rbytes=000005,00000F
files:fs24_handle_read=$00:000406
files:fs24_handle_readx=$00:000413
files:read_socket=$00:000414
files:write_by_handle=$00:00041C
files:whandle=000003,00000F
files:wbufferp=000004,00000F
files:wbytes=000005,00000F
files:write_socket=$00:00042A
files:seek_by_handle=$00:000432
files:seek_handle=000003,00000F
files:seek_position=000004,00000F
files:seek_from=000006,00000F
files:fs24_handle_seek=$00:00043D
files:sync_by_handle=$00:00043F
files:sync_handle=000003,00000F
files:sync_socket=$00:000449
files:sync_ok=$00:000451
files:close_by_handle=$00:000453
files:close_handle=000003,00000F
files:close_return_open_status=$00:000463
files:no_timeout=$00:000464
files:zero_timeout_handle=000003,00000F
files:no_timeout_no_action=$00:000471
fileshare=$00:000A20
fileshare:open=$00:000A20
fileshare:not_configured=$00:000A25
fileshare:close=$00:000A27
fileshare:assign=$00:000A2C
fileshare:file_type=000003,00000F
fileshare:ahead1=$00:000A32
fileshare:obtain=$00:000A34
fileshare:ahead2=$00:000A3C
fileshare:search=$00:000A41
fileshare:new=$00:000A48
fileshare:hit=$00:000A4E
fileshare:no_slot=$00:000A51
fileshare:slot=$00:000A52
fileshare_assign+=$00:0001E9
fileshare_space_close+=$00:0001E8
fileshare_space_open+=$00:0001E7
fs24=$00:00013B
fs24:fs24_aim=$00:00013B
fs24:fspp=000003,00000F
fs24:data_extent=000004,00000F
fs24:fs24_words=$00:000146
fs24:fsp=000005,00000F
fs24:buffer=000006,00000F
fs24:words_requested=000007,00000F
fs24:absolute_pointer=000000,00000F
fs24:fs24_repoint=$00:000153
fs24:fs24_transferinb=$00:000159
fs24:fs24_next_extent?=$00:00016F
fs24:fs24_next_extent!=$00:000172
fs24:fs24_anomaly1=$00:00018C
fs24:fs24_exit=$00:00018E
fs24:fs24_exit1=$00:00018F
fs24:fs24_fsnoop=$00:000192
fs24:fs_pacp=000009,00000F
fs24:fs_tractp=00000A,00000F
fs24:fs_tractl=00000B,00000F
fs24:fs_pacq=000000,00000F
fs24_advance+=$00:0001C9
fs24_bytes_on_file=$00:00029D
fs24_bytes_written+=$00:0001EC
fs24_lseek+=$00:0001EB
fs24_octets_on_file=$00:0002A0
fs24_octets_unresolved=$00:0002A7
fs24_open+=$00:0001C7
fs24_read+=$00:0001C8
fs24_seek=$00:00026D
fs24_seek:fblocp=000003,00000F
fs24_seek:seek_position=000004,00000F
fs24_seek:seek_from=000006,00000F
fs24_seek:fs24_not_enough=$00:000278
fs24_seek:fs24_seek_set=$00:00027A
fs24_seek:fs24_seek_set_on=$00:00027B
fs24_seek:fs24_seek_restart_roll=$00:00027D
fs24_seek:fs24_seek_roll_forward=$00:000283
fs24_seek:fs24_seek_cur=$00:000289
fs24_seek:fs24_seek_end=$00:00028F
fs24_seek:fs24_seek_z=$00:000295
fs24_snoop+=$00:0001E3
fs24_window+=$00:0001E6
fs24_words_on_file=$00:000296
fs24_words_written+=$00:0001ED
fs24position=$00:00019E
fs24position:fs24_forward=$00:00019E
fs24position:fsp=000007,00000F
fs24position:distance=000008,00000F
fs24position:absolute_pointer=000002,00000F
fs24position:extent_remainder=000000,00000F
fs24position:fs24_repoint=$00:0001AB
fs24position:fs24_zero_distance=$00:0001B7
fs24position:fs24_next_extent?=$00:0001B9
fs24position:fs24_next_extent!=$00:0001B9
fs24position:fs24_hard_eof=$00:0001D0
fs24position:fs24_anomaly1=$00:0001D7
fs24position:fs24_arrived=$00:0001D9
fs24position:fs24_exit=$00:0001DC
fs24position:fs24_exit1=$00:0001DD
fs24position:view=$00:0001E0
fs24position:fspacp=000003,00000F
fs_1st+=$00:0001C0
fs_base_extent_advance=$00:00009B
fs_directory_page=$00:000086
fs_directory_search=$00:000047
fs_dsearch+=$00:0001C3
fs_entity=$00:000075
fs_entity_directory=$00:000072
fs_entity_file=$00:000074
fs_entity_volume=$00:000070
fs_eofnext=$00:0000C8
fs_extent=$00:0000A9
fs_extent_x=$00:0000C9
fs_find+=$00:0001C2
fs_first=$00:000040
fs_found=$00:000094
fs_next=$00:000044
fs_next_directory_page=$00:000083
fs_nogo=$00:000093
fs_nohit=$00:000092
fs_read+=$00:0001C1
fs_record_lengthA=$00:0000CC
fs_record_lengthA:rfw_8=$00:0000CF
fs_record_lengthB=$00:0000D1
fs_record_lengthB:rfw_8=$00:0000D4
fs_search=$00:000054
fs_search1=$00:000059
fs_search_again=$00:000090
fs_testw=$00:00007C
fs_wrong_type=$00:000052
fs_xbase+=$00:0001C4
fs_xfer=$00:00048B
fs_xfer1!=$00:0004BD
fs_xfer1?=$00:0004C1
fs_xfer4!=$00:0004B5
fs_xfer4?=$00:0004B9
fs_xfer4w=:P1:0:00006C
fs_xfer64!=$00:00048E
fs_xfer64?=$00:0004B0
fscan24=$00:0009D8
fscan24:FSCAN_LWINDOW=000400
fscan24:file_openp=00000B,00000F
fscan24:formap=00000C,00000F
fscan24:data_sampled=000006,00000F
fscan24:fields=000005,00000F
fscan24:share=000004,00000F
fscan24:stream_registers=000000,00000F
fscan24:text=$46:000000,00000E
fscan24:noshare=$00:0009E4
fscan24:sample=$00:0009EB
fscan24:eoline=$00:000A0B
fscan24:away=$00:000A17
fscan24:break=$00:000A18
fscan_datafile+=$00:0001EA
fsp=000005,00000F
fspath+=$00:0001C5
fspath_open+=$00:0001C6
fspath_openfile=$00:00010F
fspath_openfile:inputp=000006,00000F
fspath_openfile:flags=000007,00000F
fspath_openfile:media_pointer=000001,00000F
fspath_openfile:state_block=000000,00000F
fspath_openfile:no_state_block=$00:000131
fspath_openfile:no_file=$00:000133
fspath_openfile:file_ok=$00:000134
fspath_openfile:file_not_ok=$00:000134
fspath_walk=$00:0000D6
fspath_walk:inputp=000021,00000F
fspath_walk:directory=00001C,00000F
fspath_walk:extract=000004,00000F
fspath_walk:stream_registers=000000,00000F
fspath_walk:root=$00:0000E6
fspath_walk:next=$00:0000F2
fspath_walk:no_next=$00:0000FF
fspath_walk:test_forward=$00:000104
fspax=$42:000000,000002
fspax:fs_type=$42:000000,000002
fspax:device=$42:000001,000002
fspax:bank=$42:000001,000002
fspax:extent=$42:000002,000002
fspax:absolute_pointer=$42:000004,000002
fspaxq=$42:000000,000002
fspaxq:serialp=$42:000000,000002
fspaxq:serialp:fs_type=$42:000000,000002
fspaxq:serialp:device=$42:000001,000002
fspaxq:serialp:bank=$42:000001,000002
fspaxq:serialp:extent=$42:000002,000002
fspaxq:serialp:absolute_pointer=$42:000004,000002
fspaxq:o=$42:000006,000002
fspaxq:o:column=$42:000006,000002
fspaxq:o:flags=$42:000007,000002
fspaxq:rewind_extentp=$42:000008,000002
fspaxq:quantum_pointer=$42:00000A,000002
fspp=000003,00000F
fsrom_anomaly1=$00:0002FA
fsrom_da+=$00:0001CA
fsrom_direct=$00:0002A8
fsrom_direct_name=000005,00000F
fsrom_exit=$00:0002FC
fsrom_exit1=$00:0002FD
fsrom_find+=$00:0001CC
fsrom_locate=$00:000300
fsrom_locate_deliver=$00:000340
fsrom_locate_forward=$00:000332
fsrom_locate_hit=$00:00033D
fsrom_locate_miss=$00:00033B
fsrom_locate_next=$00:00030E
fsrom_locate_search=$00:00030C
fsrom_locate_string=$00:000334
fsrom_locate_testl=$00:00032A
fsrom_locate_typed=$00:000322
fsrom_locate_typef=$00:000324
fsrom_locate_typel=$00:00031E
fsrom_locate_typev=$00:000320
fsrom_locate_typex=$00:000325
fsrom_next_extent!=$00:0002E1
fsrom_next_extent?=$00:0002DE
fsrom_read+=$00:0001CB
fsrom_repoint=$00:0002C3
fsrom_start_bank=000004,00000F
fsrom_transferinb=$00:0002C9
fsrom_words=$00:0002B6
fsromloc_doffset=000005,00000F
fsromloc_fpaxp=000003,00000F
fsromloc_fsid=000004,00000F
fsromloc_namep=000009,00000F
fsromloc_typesought=000007,00000F
fsromloc_words=000008,00000F
fsync+=$00:0001D6
fsys=$43:000000,000003
fsys:e=$43:000000,000003
fsys:e:rfw=$43:000000,000003
fsys:e:granules=$43:000001,000003
fsys:e:granule=$43:000002,000003
fsys:e:next=$43:000004,000003
fsys:e:next_offset=$43:000006,000003
fsys:quanta=$43:000007,000003
fsys:name=$43:000009,000003
handle1=000003,00000F
hvdq=:P1:0:000024
i_f=:P3:0:000027
iframe_load+=$00:0001D0
lc=:N129:P:0:000000
lseek+=$00:0001D5
lvp=:P1:0:000023
mountres=$43:000000,000003
mountres:fhandle=$43:000000,000003
mountres:fhandle:bytes=$43:000000,000003
mountres:fhandle:encoding=$43:000002,000003
mountres:auth_flavours=$43:00000E,000003
mountres:auth=$43:000010,000003
mpool=:P1:0:000025
net_scan_tcp+=$00:0001DC
netv4=:N129:P:0:000000
nfs=$00:00070F
nfs:startrq=$00:00070F
nfs:connectionp=000010,00000F
nfs:size=000011,00000F
nfs:rqprogram=000012,00000F
nfs:programversion=000014,00000F
nfs:nfspro=000016,00000F
nfs:auth_bytes=000018,00000F
nfs:authp=000019,00000F
nfs:procedure_l=00000C,00000F
nfs:programvers_l=00000A,00000F
nfs:program_l=000008,00000F
nfs:rpcvers=000006,00000F
nfs:req_resp=000004,00000F
nfs:tid=000002,00000F
nfs:count=000001,00000F
nfs:container=000000,00000F
nfs:add_uinteger=$00:00072B
nfs:connectpiu=000004,00000F
nfs:uinteger=000005,00000F
nfs:uiflags=000006,00000F
nfs:format2=000000,00000F
nfs:add_uhyper72=$00:000738
nfs:connectphy=000006,00000F
nfs:hyperp=000007,00000F
nfs:uyflags=000008,00000F
nfs:format4=000000,00000F
nfs:send_opaque16=$00:00074E
nfs:tcp_tcbp=000002,00000F
nfs:bytes2go=000003,00000F
nfs:fromp=000004,00000F
nfs:send16to16i=$00:000751
nfs:send16to16=$00:000752
nfs:counted_send_opaque=$00:000757
nfs:connexiopaque=000005,00000F
nfs:opaque_bytes=000006,00000F
nfs:opaque_string=000007,00000F
nfs:opaque_flags=000008,00000F
nfs:opaque_count=000001,00000F
nfs:opaque_pad=000000,00000F
nfs:send_string=$00:00076C
nfs:connexionstring=000002,00000F
nfs:string_bytes=000003,00000F
nfs:stringp=000004,00000F
nfs:string_flags=000005,00000F
nfs:deliver_fhandle3=$00:000772
nfs:c4=:P1:0:00006E
nfs:jump2it=$00:00077B
nfs:none=$00:00078B
nfs:deliver_auth=$00:00078C
nfs:c2=:P1:0:00006F
nfs:jump2auth=$00:000796
nfs:none_more=$00:0007B6
nfs:capture_fileinfo=$00:0007BD
nfs:capture_fileinfo_quad=$00:0007BE
nfs3=$00:0007C4
nfs3:data_read=$00:0007C4
nfs3:data=$00:0007CA
nfs3:data_read_z=$00:0007D1
nfs3:seek72=$00:0007D3
nfs3:seek72:seek_source=000005,00000F
nfs3:seek72:options=000006,00000F
nfs3:seek72:actualp=000007,00000F
nfs3:seek72:newkey=000008,00000F
nfs3:seek72:sizep=00000A,00000F
nfs3:seek72:impression=000001,00000F
nfs3:seek72:high_orderw=000000,00000F
nfs3:seek72:seek_?=$00:0007EA
nfs3:seek72:seek_end=$00:0007F0
nfs3:seek72:seek_relative=$00:0007F7
nfs3:seek72:octet_pointer=$00:000801
nfs3:seek72:relative_highest_write=$00:000809
nfs3:seek72:relative=$00:00080D
nfs3:seek72:store_hee=$00:000815
nfs3:seek72:store_x=$00:000816
nfs3:seek72:abandon=$00:00081B
nfs3_lookup3res=:N129:P:0:000000
nfs_close_path=$00:000658
nfs_data_read=$00:000664
nfs_data_read:handle=000013,00000F
nfs_data_read:bufferp=000014,00000F
nfs_data_read:bytes=000015,00000F
nfs_data_read:connectionp=00000E,00000F
nfs_data_read:foblocp=00000D,00000F
nfs_data_read:segment_axw=00000C,00000F
nfs_data_read:wdatac_wdata=00000A,00000F
nfs_data_read:total=000008,00000F
nfs_data_read:record_mark=000006,00000F
nfs_data_read:record_net_bytes=000004,00000F
nfs_data_read:stream_registers=000000,00000F
nfs_data_read:read_octets=$00:000695
nfs_data_read:sample=$00:00069D
nfs_data_read:request_issue_fail=$00:0006A3
nfs_data_read:data=$00:0006A5
nfs_data_read:data?=$00:0006AE
nfs_data_read:net_response_fail=$00:0006B0
nfs_data_read:nfs_data_read_z=$00:0006B2
nfs_data_read:data!=$00:0006B9
nfs_data_read:next_net_segment=$00:0006CA
nfs_data_read:next_segment=$00:0006E0
nfs_data_read:next_segment_in=$00:0006E7
nfs_data_read:complete_record=$00:0006EA
nfs_data_read:nfs_data_read_x=$00:0006FD
nfs_data_write=$00:000820
nfs_data_write:handle=00000B,00000F
nfs_data_write:bufferp=00000C,00000F
nfs_data_write:bytes=00000D,00000F
nfs_data_write:connectionp=000006,00000F
nfs_data_write:foblocp=000005,00000F
nfs_data_write:result=000004,00000F
nfs_data_write:stream_registers=000000,00000F
nfs_data_write:api_octets=$00:00084A
nfs_data_write:sense_response=$00:00085E
nfs_data_write:response3=$42:000000,000002
nfs_data_write:response3:before=$42:000000,000002
nfs_data_write:response3:before:yes=$42:000000,000002
nfs_data_write:response3:before:yes:yes=$42:000000,000002
nfs_data_write:response3:before:yes:size=$42:000002,000002
nfs_data_write:response3:before:yes:mtime=$42:000006,000002
nfs_data_write:response3:before:yes:ctime=$42:00000A,000002
nfs_data_write:response3:before:no=$42:000000,000002
nfs_data_write:response3:before:no:no=$42:000000,000002
nfs_data_write:response3:after=$42:00000E,000002
nfs_data_write:response3:after:status=$42:00000E,000002
nfs_data_write:response3:after:attr=$42:000010,000002
nfs_data_write:response3:after:attr:type=$42:000010,000002
nfs_data_write:response3:after:attr:mode=$42:000012,000002
nfs_data_write:response3:after:attr:nlink=$42:000014,000002
nfs_data_write:response3:after:attr:uid=$42:000016,000002
nfs_data_write:response3:after:attr:gid=$42:000018,000002
nfs_data_write:response3:after:attr:size=$42:00001A,000002
nfs_data_write:response3:after:attr:used=$42:00001E,000002
nfs_data_write:response3:after:attr:rdev=$42:000022,000002
nfs_data_write:response3:after:attr:fsid=$42:000026,000002
nfs_data_write:response3:after:attr:fileid=$42:00002A,000002
nfs_data_write:response3:after:attr:atime=$42:00002E,000002
nfs_data_write:response3:after:attr:atime:seconds=$42:00002E,000002
nfs_data_write:response3:after:attr:atime:usecs=$42:000030,000002
nfs_data_write:response3:after:attr:mtime=$42:000032,000002
nfs_data_write:response3:after:attr:mtime:seconds=$42:000032,000002
nfs_data_write:response3:after:attr:mtime:usecs=$42:000034,000002
nfs_data_write:response3:after:attr:ctime=$42:000036,000002
nfs_data_write:response3:after:attr:ctime:seconds=$42:000036,000002
nfs_data_write:response3:after:attr:ctime:usecs=$42:000038,000002
nfs_data_write:response3:count=$42:00003A,000002
nfs_data_write:response3:write_stability=$42:00003C,000002
nfs_data_write:response3:verf=$42:00003E,000002
nfs_data_write:unpack_response=$00:000867
nfs_data_write:damaged=$00:00087A
nfs_data_write:clear=$00:00087C
nfs_data_write:eoxmit=$00:00087E
nfs_file_position=$00:000703
nfs_file_position:handle=000003,00000F
nfs_file_position:position=000004,00000F
nfs_file_position:source=000006,00000F
nfs_fsmount=$00:000513
nfs_fsmount:local_port=000006,00000F
nfs_fsmount:mount_pathp=000007,00000F
nfs_fsmount:fobloc=000008,00000F
nfs_fsmount:mname_bytes=000002,00000F
nfs_fsmount:connectionp=000001,00000F
nfs_fsmount:status_final=000000,00000F
nfs_fsmount:_COUNT=000004
nfs_fsmount:nfs_mount_?=$00:00053D
nfs_fsmount:nfs_mount_deliver=$00:000545
nfs_fsmount:nfs_astat?=$00:00054B
nfs_fsmount:nfs_copyback_fh=$00:000550
nfs_fsmount:nfs_mount_y=$00:000555
nfs_fsmount:nfs_mount_x=$00:00055B
nfs_open_path+=$00:00055E
nfs_open_path:pathp=00001C,00000F
nfs_open_path:flags=00001D,00000F
nfs_open_path:string_bytes=000018,00000F
nfs_open_path:connectionp=000017,00000F
nfs_open_path:request_port=000016,00000F
nfs_open_path:fobloc=000015,00000F
nfs_open_path:sattr_3=000013,00000F
nfs_open_path:g_3=00000F,00000F
nfs_open_path:u_3=00000B,00000F
nfs_open_path:mode_3=000007,00000F
nfs_open_path:createmode_3=000005,00000F
nfs_open_path:status=000004,00000F
nfs_open_path:stream_registers=000000,00000F
nfs_open_path:common_mounts_hidden=$00:00056D
nfs_open_path:forward=$00:000575
nfs_open_path:connection_launch=$00:000595
nfs_open_path:connection_running=$00:00059B
nfs_open_path:fs_mounted=$00:0005A6
nfs_open_path:open_create_unguarded=$00:0005BC
nfs_open_path:auth_another_family?=$00:0005DE
nfs_open_path:obtain_existing_handle=$00:0005EB
nfs_open_path:readsocket=$00:000606
nfs_open_path:data=$00:00060E
nfs_open_path:data?=$00:000614
nfs_open_path:data!=$00:000619
nfs_open_path:handle_retrieve=$00:000626
nfs_open_path:splice_handle=$00:00063A
nfs_open_path:nfs_open_path_s=$00:000640
nfs_open_path:nfs_open_path_u=$00:000646
nfs_open_path:nfs_open_path_v=$00:000648
nfs_open_path:nfs_open_path_w=$00:00064A
nfs_open_path:nfs_open_path_e=$00:00064E
nfs_open_path:nfs_open_path_x=$00:00064F
nfs_seek+=$00:0001E1
nfsclose+=$00:0001E2
nfsmount+=$00:0001DE
nfsopen+=$00:0001DF
nfsread+=$00:0001E0
nfswrite+=$00:0001F0
open+=$00:0001D2
openfile_bloc=$43:000000,000003
openfile_bloc:fs_type=$43:000000,000003
openfile_bloc:quantum_pointer=$43:000001,000003
openfile_bloc:socket=$43:000004,000003
openfile_bloc:o=$43:000006,000003
openfile_bloc:o:column=$43:000006,000003
openfile_bloc:o:flags=$43:000007,000003
openfile_bloc:dimensions=$43:000008,000003
openfile_bloc:dimensions:status=$43:000008,000003
openfile_bloc:dimensions:attr=$43:00000A,000003
openfile_bloc:dimensions:attr:type=$43:00000A,000003
openfile_bloc:dimensions:attr:mode=$43:00000C,000003
openfile_bloc:dimensions:attr:nlink=$43:00000E,000003
openfile_bloc:dimensions:attr:uid=$43:000010,000003
openfile_bloc:dimensions:attr:gid=$43:000012,000003
openfile_bloc:dimensions:attr:size=$43:000014,000003
openfile_bloc:dimensions:attr:used=$43:000018,000003
openfile_bloc:dimensions:attr:rdev=$43:00001C,000003
openfile_bloc:dimensions:attr:fsid=$43:000020,000003
openfile_bloc:dimensions:attr:fileid=$43:000024,000003
openfile_bloc:dimensions:attr:atime=$43:000028,000003
openfile_bloc:dimensions:attr:atime:seconds=$43:000028,000003
openfile_bloc:dimensions:attr:atime:usecs=$43:00002A,000003
openfile_bloc:dimensions:attr:mtime=$43:00002C,000003
openfile_bloc:dimensions:attr:mtime:seconds=$43:00002C,000003
openfile_bloc:dimensions:attr:mtime:usecs=$43:00002E,000003
openfile_bloc:dimensions:attr:ctime=$43:000030,000003
openfile_bloc:dimensions:attr:ctime:seconds=$43:000030,000003
openfile_bloc:dimensions:attr:ctime:usecs=$43:000032,000003
openfile_bloc:nfs_handle=$43:000034,000003
openfile_bloc:auth_blank=$43:000056,000003
openfile_bloc:auth_unix=$43:000056,000003
openfile_bloc:auth_unix:auth=$43:000056,000003
openfile_bloc:auth_unix:auth:family=$43:000056,000003
openfile_bloc:auth_unix:auth:octets=$43:000058,000003
openfile_bloc:auth_unix:auth:stamp=$43:00005A,000003
openfile_bloc:auth_unix:auth:name=$43:00005C,000003
openfile_bloc:auth_unix:auth:uid=$43:00005E,000003
openfile_bloc:auth_unix:auth:gid=$43:000060,000003
openfile_bloc:auth_unix:auth:gids=$43:000062,000003
openfile_bloc:auth_unix:auth:solong=$43:000064,000003
openfile_bloc:auth_unix:auth:verf=$43:000064,000003
part(1)=000004
part(2)=000000
part(3)=$46:000400
paxp=000002,00000F
platform_relay=000064
platform_relay2=000065
post_op_attr=:N129:P:0:000000
post_op_fh3=:N129:P:0:000000
pre_op_attr=:N129:P:0:000000
qstart+=$00:0001D1
qstart_buffer=000000,00000F
qstart_doffset=000012,00000F
qstart_fsid=000011,00000F
qstart_go=$00:0003E8
qstart_launch=$00:0003E2
qstart_name=$00:0003B8
qstart_namep=000015,00000F
qstart_nane=$00:0003E7
qstart_pax=000008,00000F
qstart_words=000014,00000F
quantum=$00:0004D8
quantum:align=$00:0004D8
quantum:aligned=$00:0004E5
quantum:compress=$00:0004E6
quantum:retell=$00:0004ED
read+=$00:0001D3
read_launch_gate=$00:0003DE
read_launch_gate?=$00:0003D2
readrespo=$43:000000,000003
readrespo:file_attributes=$43:000000,000003
readrespo:file_attributes:status=$43:000000,000003
readrespo:file_attributes:attr=$43:000002,000003
readrespo:file_attributes:attr:type=$43:000002,000003
readrespo:file_attributes:attr:mode=$43:000004,000003
readrespo:file_attributes:attr:nlink=$43:000006,000003
readrespo:file_attributes:attr:uid=$43:000008,000003
readrespo:file_attributes:attr:gid=$43:00000A,000003
readrespo:file_attributes:attr:size=$43:00000C,000003
readrespo:file_attributes:attr:used=$43:000010,000003
readrespo:file_attributes:attr:rdev=$43:000014,000003
readrespo:file_attributes:attr:fsid=$43:000018,000003
readrespo:file_attributes:attr:fileid=$43:00001C,000003
readrespo:file_attributes:attr:atime=$43:000020,000003
readrespo:file_attributes:attr:atime:seconds=$43:000020,000003
readrespo:file_attributes:attr:atime:usecs=$43:000022,000003
readrespo:file_attributes:attr:mtime=$43:000024,000003
readrespo:file_attributes:attr:mtime:seconds=$43:000024,000003
readrespo:file_attributes:attr:mtime:usecs=$43:000026,000003
readrespo:file_attributes:attr:ctime=$43:000028,000003
readrespo:file_attributes:attr:ctime:seconds=$43:000028,000003
readrespo:file_attributes:attr:ctime:usecs=$43:00002A,000003
readrespo:count=$43:00002C,000003
readrespo:eof=$43:00002E,000003
readrespo:data=$43:000030,000003
recursive$seg$load+=$00:0001CE
recursive_seg_load=$00:00036E
recv
remotefs=$00:000885
remotefs:defaultpath=$00:000885
remotefs:dialplan_dependency_key+=002F1A51D07B
remotefs:load=$00:000889
remotefs:indexp=00000A,00000F
remotefs:fspax=000004,00000F
remotefs:path=000000,00000F
remotefs:include_me_in=$00:0008AB
remotefs:load_x=$00:0008AF
remotefs:load_z=$00:0008B1
remotefs:dial=$00:0008B5
remotefs:name=000003,00000F
remotefs:callpathp=000005,00000F
remotefs:planp=000006,00000F
remotefs:global_dialplan=$00:0008BA
remotefs:dialplan_bound=$00:0008C1
remotefs:planp_given=$00:0008C3
remotefs:next!=$00:0008C8
remotefs:next?=$00:0008CD
remotefs:retrieved=$00:0008D0
remotefs:xdial=$00:0008E1
remotefs:online=$00:0008E2
remotefs:caller_key_outdated=$00:0008E6
remotefs:dialplan_dependency_key+=002F1A51D07B
request=$46:000002,00000E
request:txid=$46:000002,00000E
request:call=$46:000004,00000E
request:rpcvers=$46:000006,00000E
request:program=$46:000008,00000E
request:programvers=$46:00000A,00000E
request:procedure=$46:00000C,00000E
request:auth=$46:00000E,00000E
request:auth:flavour=$46:00000E,00000E
request:auth:opaquel=$46:000010,00000E
request:auth:opaque=$46:000012,00000E
request:request=$46:000014,00000E
request:diropargs=$46:000014,00000E
request:diropargs:args=$46:000014,00000E
request:diropargs:args:fh=$46:000014,00000E
request:diropargs:args:fh:encoding=$46:000014,00000E
request:diropargs:args:fh:fsn=$46:000020,00000E
request:diropargs:args:fh:fn=$46:000022,00000E
request:diropargs:args:name=$46:000024,00000E
request:diropargs:args:name:nlen=$46:000024,00000E
request:diropargs:args:name:name=$46:000026,00000E
request:readargs=$46:000014,00000E
request:readargs:args=$46:000014,00000E
request:readargs:args:fh=$46:000014,00000E
request:readargs:args:fh:encoding=$46:000014,00000E
request:readargs:args:fh:fsn=$46:000020,00000E
request:readargs:args:fh:fn=$46:000022,00000E
request:readargs:args:offset=$46:000024,00000E
request:readargs:args:count=$46:000026,00000E
request:readargs:args:totalcount=$46:000028,00000E
request:writeargs=$46:000014,00000E
request:writeargs:args=$46:000014,00000E
request:writeargs:args:fh=$46:000014,00000E
request:writeargs:args:fh:encoding=$46:000014,00000E
request:writeargs:args:fh:fsn=$46:000020,00000E
request:writeargs:args:fh:fn=$46:000022,00000E
request:writeargs:args:bgo=$46:000024,00000E
request:writeargs:args:offset=$46:000026,00000E
request:writeargs:args:totalcount=$46:000028,00000E
request:writeargs:args:data=$46:00002A,00000E
response=$46:000002,00000E
response:txid=$46:000002,00000E
response:resp=$46:000004,00000E
response:rstat=$46:000006,00000E
response:no=$46:000008,00000E
response:no:why=$46:000008,00000E
response:no:in_detail=$46:00000A,00000E
response:yes=$46:000008,00000E
response:yes:auth_verf=$46:000008,00000E
response:yes:astat=$46:00000E,00000E
response:yes:response=$46:000010,00000E
result_attr=$43:000000,000003
result_attr:status=$43:000000,000003
result_attr:attr=$43:000002,000003
result_attr:attr:type=$43:000002,000003
result_attr:attr:mode=$43:000004,000003
result_attr:attr:nlink=$43:000006,000003
result_attr:attr:uid=$43:000008,000003
result_attr:attr:gid=$43:00000A,000003
result_attr:attr:size=$43:00000C,000003
result_attr:attr:used=$43:000010,000003
result_attr:attr:rdev=$43:000014,000003
result_attr:attr:fsid=$43:000018,000003
result_attr:attr:fileid=$43:00001C,000003
result_attr:attr:atime=$43:000020,000003
result_attr:attr:atime:seconds=$43:000020,000003
result_attr:attr:atime:usecs=$43:000022,000003
result_attr:attr:mtime=$43:000024,000003
result_attr:attr:mtime:seconds=$43:000024,000003
result_attr:attr:mtime:usecs=$43:000026,000003
result_attr:attr:ctime=$43:000028,000003
result_attr:attr:ctime:seconds=$43:000028,000003
result_attr:attr:ctime:usecs=$43:00002A,000003
romfs_offsetw=$00:000343
rpc=$00:0004F8
rpc:getunique=$00:0004F8
rpc:get_client_port=$00:000505
rseg_fsfound=$00:000375
rseg_loadx=$00:00038E
rseg_lstring=$00:00037B
rsegload_bank=00000D,00000F
rsegload_buffer=000000,00000F
rsegload_file=00000E,00000F
rsegload_fpax=000004,00000F
rstream_scana
rstream_start_net
rstream_starta
s=$42:000000,000002
s:socket_address=$42:000000,000002
s:remote_address=$42:000002,000002
s:flags=$42:000004,000002
s:udp=$42:000005,000002
s:udp:tsq=$42:000005,000002
s:udp:socket_inq=$42:000006,000002
s:udp:socket_inq:head=$42:000006,000002
s:udp:socket_inq:tail=$42:000007,000002
s:tcp=$42:000005,000002
s:tcp:tbase=$42:000005,000002
s:tcp:tcbs=$42:000006,000002
s:tcp:rxbu_p=$42:000006,000002
s:tcp:rxowner=$42:000007,000002
s:tcp:txbu_p=$42:000007,000002
sattr3=:N129:P:0:000000
scan_tcp+=$00:00092F
scan_tcp:sotcp=000007,00000F
scan_tcp:formap=000008,00000F
scan_tcp:stream_registers=000000,00000F
scan_tcp:open?=$00:000931
scan_tcp:data=$00:000938
scan_tcp:keyboard_eof=$00:00094B
scan_tcp:file_not_open=$00:00094E
scan_tcp:nexitx=$00:000950
scan_tcp:nexity=$00:000951
scan_tcp:nexitz=$00:000952
scanfor+=$00:0008E7
scanfor:scan=$00:0008E7
scanfor:targetp=000007,00000F
scanfor:formatp=000008,00000F
scanfor:stream_registers=000000,00000F
seg$load+=$00:0001CD
seg_fsfound=$00:000354
seg_load=$00:00034C
seg_loadx=$00:00036B
seg_lstring=$00:00035A
segload_bank=00000D,00000F
segload_buffer=000000,00000F
segload_file=00000E,00000F
segload_fpax=000004,00000F
segment=:N129:P:0:000000
send
server_response=$43:000000,000003
server_response:txid=$43:000000,000003
server_response:resp=$43:000002,000003
server_response:rstat=$43:000004,000003
server_response:no=$43:000006,000003
server_response:no:why=$43:000006,000003
server_response:no:in_detail=$43:000008,000003
server_response:yes=$43:000006,000003
server_response:yes:auth_verf=$43:000006,000003
server_response:yes:astat=$43:00000C,000003
server_response:yes:response=$43:00000E,000003
socket=:N129:P:0:000000
softwareLoopback=000018
speed_dial+=$00:0001EF
string_scana_sentinel
strlenx
tbank=:N129:P:0:000000
tcp_addx
tcp_connection=:N129:P:0:000000
tcp_release_rxline
tcp_tx
tcpa=$46:000000,00000E
tcpresp=$46:000000,00000E
tpage=$45:000000,000005
tpage:rfw=$45:000000,000005
tpage:write_point=$45:000001,000005
tpage:write_space=$45:000002,000005
tpage:next_page_granule=$45:000003,000005
transmission=$42:000000,000002
transmission:next=$42:000000,000002
transmission:automatic_fin=$42:000001,000002
transmission:state=$42:000001,000002
transmission:mss=$42:000002,000002
transmission:tsq=$42:000003,000002
transmission:timer(1)=$42:000004,000002
transmission:timer(2)=$42:000005,000002
transmission:socket_address=$42:000006,000002
transmission:remote_address=$42:000008,000002
transmission:remote_ack_window=$42:00000A,000002
transmission:sequence_ackx=$42:00000C,000002
transmission:ack_window=$42:00000E,000002
transmission:receiveq=$42:000010,000002
transmission:receiveq:head=$42:000010,000002
transmission:receiveq:tail=$42:000011,000002
transmission:deferq=$42:000012,000002
transmission:deferq:head=$42:000012,000002
transmission:deferq:tail=$42:000013,000002
transmission:q4window=$42:000014,000002
transmission:q4window:head=$42:000014,000002
transmission:q4window:tail=$42:000015,000002
transmission:q4ack=$42:000016,000002
transmission:q4ack:head=$42:000016,000002
transmission:q4ack:tail=$42:000017,000002
transmissionp=$42:000000,000002
transmissionp:next=$42:000000,000002
transmissionp:automatic_fin=$42:000001,000002
transmissionp:state=$42:000001,000002
transmissionp:mss=$42:000002,000002
transmissionp:tsq=$42:000003,000002
transmissionp:timer(1)=$42:000004,000002
transmissionp:timer(2)=$42:000005,000002
transmissionp:socket_address=$42:000006,000002
transmissionp:remote_address=$42:000008,000002
transmissionp:remote_ack_window=$42:00000A,000002
transmissionp:sequence_ackx=$42:00000C,000002
transmissionp:ack_window=$42:00000E,000002
transmissionp:receiveq=$42:000010,000002
transmissionp:receiveq:head=$42:000010,000002
transmissionp:receiveq:tail=$42:000011,000002
transmissionp:deferq=$42:000012,000002
transmissionp:deferq:head=$42:000012,000002
transmissionp:deferq:tail=$42:000013,000002
transmissionp:q4window=$42:000014,000002
transmissionp:q4window:head=$42:000014,000002
transmissionp:q4window:tail=$42:000015,000002
transmissionp:q4ack=$42:000016,000002
transmissionp:q4ack:head=$42:000016,000002
transmissionp:q4ack:tail=$42:000017,000002
txid=$01:000040
udgram=:N129:P:0:000000
uframe=$00:0001E9
uframe:load=$00:0001E9
uframe:extent1=00000D,00000F
uframe:profilep=00000F,00000F
uframe:transfer_gate=000006,00000F
uframe:accessw=000000,00000F
uframe:tuple=$00:000203
uframe:trialz=$00:000206
uframe:trialx=$00:000208
uframe:eotrial=$00:00020C
uframe:geometry=$00:00020F
uframe:lean_in=$00:000212
uframe:storage_size=00000B
uframe:save_sp=000013
uframe:fs_pac=000012
uframe:window_bias=000011
uframe:storep=000010
uframe:load_string=$00:000231
uframe:stack_tuple=$00:000233
uframe:window=$00:00024F
uframe:window_open=$00:000255
uframe:fixup?=$00:00025E
uframe:fixed=$00:000267
uframe:too_much=$00:000269
uframe:clear=$00:00026A
words_requested=000007,00000F
write+=$00:0001D4
wstream_composea
wstream_starta
xdr_attrstat=:N129:P:0:000000
xdr_auth=:N129:P:0:000000
xdr_diropargs=:N129:P:0:000000
xdr_diropres=:N129:P:0:000000
xdr_dirpath=:N129:P:0:000000
xdr_fattr=:N129:P:0:000000
xdr_fattr3=:N129:P:0:000000
xdr_fhandle=:N129:P:0:000000
xdr_fhandle3=:N129:P:0:000000
xdr_fhstatus=:N129:P:0:000000
xdr_fsinfo=:N129:P:0:000000
xdr_maplist=:N129:P:0:000000
xdr_maplistelt=:N129:P:0:000000
xdr_mountres3=:N129:P:0:000000
xdr_pmapping=:N129:P:0:000000
xdr_rdres=:N129:P:0:000000
xdr_read3args=:N129:P:0:000000
xdr_read3res=:N129:P:0:000000
xdr_readargs=:N129:P:0:000000
xdr_readdirargs=:N129:P:0:000000
xdr_readdirres=:N129:P:0:000000
xdr_rpcreq=:N129:P:0:000000
xdr_rpcresp=:N129:P:0:000000
xdr_sattr=:N129:P:0:000000
xdr_sattrargs=:N129:P:0:000000
xdr_timeval=:N129:P:0:000000
xdr_write3args=:N129:P:0:000000
xdr_write3res=:N129:P:0:000000
xdr_writeargs=:N129:P:0:000000
xdri=:N65:F:0:010004
fshare.msm=1<000005
../stream/fscan24.msm=1<000005
../stream/fgets.msm=1<000005
../stream/net_scan.msm=1<000005
../stream/fscan.msm=1<000005
../stream/sscan.msm=1<000005
../dialplan/dialkey.def=2<000006
../remotefs/remotefs.msm=1<000005
..//rpc/nfswrite.msm=1<000005
..//rpc/position.msm=2<000006
..//rpc/dataread.msm=2<000006
..//rpc/nfsclien.msm=1<000005
align.msm=1<000005
claimfob.msm=1<000005
share_v.msm=1<000005
rwhandle.msm=1<000005
qstart.msm=1<000005
arraylod.msm=1<000005
recursld.msm=1<000005
seg_load.msm=1<000005
fsrom.msm=1<000005
lseekf24.msm=1<000005
loader.msm=1<000005
seekfs24.msm=1<000005
readfs24.msm=1<000005
fsopen.msm=1<000005
fs24.msm=1<000005
ustream.def=1<000005
response.def=1<000005
fs24.def=1<000005
fs.def=1<000005
file_io.def=1<000005
..//lib/ascii.def=1<000005
..//lib/register.def=1<000005
..//rpc/rpcadapt.def=1<000005
..//rpc/rpc.def=1<000005
..//t77.4/pointers.def=1<000005
..//t77.4/socket.def=1<000005
..//t77.4/tcp.def=1<000005
..//t77.4/udp.def=1<000005
..//t77.4/ipv4.def=1<000005
..//t77.4/ip.def=1<000005
..//t77.4/i_f.def=1<000005
..//t77.4/dq.def=1<000005
..//language/stack.def=1<000005
..//def.sys/base.def=1<000005
..//def.sys/banks.def=1<000005
..//def/ii.def=1<000005
..//def/vector.def=1<000005
..//def/rta.def=1<000005
fs.msm=0<000003
:$(00):007000:007AF5 :$(01):000000:000044 :$(02):002000:003000 :$(42):000000:000018 :$(43):000000:00002C :$(45):000000:000005 
fs.msm: object code 23954 bytes: 0 errors: 23 undefined labels

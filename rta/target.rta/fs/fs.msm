.
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

	$path		../

	$list	0
	$include	def/rta.def
	$include	def/vector.def
.	$include	def/map1.def
	$list

	$include	def/ii.def
	$include	def.sys/banks.def
	$include	def.sys/base.def
	$include	language/stack.def
	$include	t77.4/dq.def
	$include	t77.4/i_f.def
	$include	t77.4/ip.def
	$include	t77.4/ipv4.def
	$include	t77.4/udp.def
	$include	t77.4/tcp.def
	$include	t77.4/socket.def
	$include	t77.4/pointers.def
.	$include	t77.4/b1_view.def
	$include	rpc/rpc.def
	$include	rpc/rpcadapt.def
	$include	lib/register.def
	$include	lib/ascii.def
	$path

	$include	file_io.def
	$include	fs.def			. defines file-open application state blocks
	$include	fs24.def		. defines directory structures on FS media
	$include	response.def
	$include	ustream.def

	$list		2

$(66::,x)
fspax	filep

$(66::,x)
fspaxq	fileq

$(67::,y)
fsys	$filetag

$(69::,b)
tpage	$page_control

$(66::,x)
s	$socket

$(66::,x)
axw	acw

$(67::,y)
dgram	datagram


$(0::FS24_BANK)
fs_1st*		$vector	fs_first		. low level extent-view commands
fs_read*	$vector	fs_next			. 256K-maxextent device-array FS
fs_find*	$vector	fs_search
fs_dsearch*	$vector	fs_directory_search
fs_xbase*	$vector	fs_base_extent_advance

fspath*		$vector	fspath_walk
fspath_open*	$vector	fspath_openfile
fs24_open*	$vector	fs24:fs24_aim
fs24_read*	$vector	fs24:fs24_words
fs24_advance*	$vector	fs24position:fs24_forward

fsrom_da*	$vector	fsrom_direct		. word-oriented R/W data transfer routines,
fsrom_read*	$vector	fsrom_words		. 4K-maxextent FS in executable space
fsrom_find*	$vector	fsrom_locate

seg$load*	$vector	seg_load
recursive$seg$load* $vector recursive_seg_load
array$seg$load*	$vector	array_seg_load
iframe_load*	$vector	uframe:load

qstart*		$vector	qstart_name

open*		$vector	files:open
read*		$vector files:read_by_handle
write*		$vector	files:write_by_handle
lseek*		$vector	files:seek_by_handle
fsync*		$vector	files:sync_by_handle
close*		$vector	files:close_by_handle

__sscanf*	$vector	scanfor			. sscanf
__sprintf*	$vector	editfor			. sprintf
__fscanf*	$vector	f_scanform		. fscanf
__fprintf*	$vector	f_editform		. fprintf
net_scan_tcp*	$vector	scan_tcp		. fscanf socket

claim_fob*	$vector	claimfob

		$if	RPC_UDP
rpc_rqport*	$vector	rpc_request_port
		$endif

nfsmount*	$vector	nfs_fsmount
nfsopen*	$vector	nfs_open_path
nfsread*	$vector	nfs_data_read
nfs_seek*	$vector	nfs_file_position
nfsclose*	$vector	nfs_close_path

fs24_snoop*	$vector	fs24:fs24_fsnoop
__fgets*	$vector	fgets_by_handle
fgets_datafile*	$vector	fgets24
fs24_window*	$vector	fs24position:view

fileshare_space_open*	$vector	fileshare:open
fileshare_space_close*	$vector	fileshare:close
fileshare_assign*	$vector	fileshare:assign
fscan_datafile*		$vector	fscan24

fs24_lseek*	$vector	fs24_seek
fs24_bytes_written*	$vector	fs24_bytes_on_file
fs24_words_written*	$vector	fs24_words_on_file

dialplan_online*	$vector	remotefs:online
speed_dial*		$vector	remotefs:dial
nfswrite*		$vector	nfs_data_write
appdata_share*		$vector	appdata_vector
__fd_zero_timeout*	$vector	files:no_timeout

"$HALT"*	$vector	app_emergency_stop

	$list	0
	$do	64-$,	fret	0
	$do	$>64,	$flag	too many vectors in fs iframe
	$list	2

	$include	fs24			. routines, 256K-maxextent device-array FS
	$include	fsopen
	$include	readfs24
	$include	seekfs24
	$include	loader
	$include	lseekf24
	$include	fsrom			. routines, 4K-maxextent FS in executable space
	$include	seg_load
	$include	recursld
	$include	arraylod
	$include	qstart
	$include	rwhandle
	$include	share_v

fs_xfer4w* $proc
	qpush	4*?-4, y
	qpop	4*?-4, x
	$end

$(0)
fs_xfer	dsr		6
	lr		a
	j		fs_xfer64?

fs_xfer64!
?	$do	16,	fs_xfer4w
	ax, xi		64
	ay, xi		64
fs_xfer64?
	jdr		fs_xfer64!

	la, xi		0
	dsl		4
	lr		a
	j		fs_xfer4?

fs_xfer4!
	qpush		0, y
	qpop		0, x
	ax, xi		4
	ay, xi		4
fs_xfer4?
	jdr		fs_xfer4!

	sbr		22
	lr		b
	j		fs_xfer1?

fs_xfer1!
	push		0, y
	pop		0, x
	ax, xi		1
	ay, xi		1
fs_xfer1?
	jdr		fs_xfer1!

	lret		0

	$include	claimfob
	$include	align

	$path		../
	$include	rpc/nfsclien
	$include	rpc/nfswrite
	$path
	$include	../remotefs/remotefs

	$path		../stream
	$include	sscan
	$include	fscan
	$include	net_scan
	$include	fgets
	$include	fscan24
	$path

	$include	fshare

app_emergency_stop	. do this if stop needed before normal printf would work
			. call ($HALT) so location of decision is on internal stack

	push	-4,,xi
	popA	fp

	qpush	("HALT %x:%x":10:0)	. character string must be in memory
	qpop	0, fp			. so the external stack

	c	(__fprintf)     1,,xi	0, fp, i        0, sp   1, sp

	ii	EXIT$

	$do	$<256,$(0:256)
	$do	$zenith>4096,	$flag	fs block overruns expected high address


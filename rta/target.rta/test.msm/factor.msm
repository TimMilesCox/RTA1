.
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.


.	Integer Library Code, Numeral String to Binary
.	______________________________________________


.	this code is shared by 2 string->integer scan routines
.		the free-format integer.msm
.	and	the fixed-format digitrow.msm

.	the three multiply+add routines are called successively.
.	They write/update an integer which may reach the size of
.	four words or 96 bits in registers 8:9:10:11

.	not all conversions call all three routines.
.	Over 12 numerals must be encountered before even the
.	first of the three is called

.	the hardest work only happens with the longest numeral
.	strings, whatever size binary integer is required

.	If more significands than required are encountered, the
.	high-order positions of registers 8:9:10:11 contain them
.	for diagnostic

.	integer truncation is of course on the left. The whole
.	available integer must be scanned for the low-order part
.	to be a true truncated value, if truncation there is

.	It's the opposite principle to floating fractions
.	where extra trailing digits can be discarded with
.	a rounding on the first of them


FACTOR	$equ	k

raise48	z	6	. add the value in b to [FACTOR] * 10:11
	sb	7
	lb	TRIPLE+2
	mf	FACTOR
	da	6
	sb	TRIPLE+2
	sa	7
	sc	6
	lb	TRIPLE+1
	mf	FACTOR
	da	6
	ds	TRIPLE
	lret	0

raise72	z	6	. add the value in b to [FACTOR] * 9:10:11
	sb	7
	lb	TRIPLE+2
	mf	FACTOR
	da	6
	sb	TRIPLE+2
	sa	7
	sc	6
	lb	TRIPLE+1
	mf	FACTOR
	da	6
	sb	TRIPLE+1
	sa	7
	sc	6
	lb	TRIPLE
	mf	FACTOR
	da	6
	ds	QUAD
	lret	0

raise96	z	6	. add the value in b to [FACTOR] * 8:9:10:11
	sb	7
	lb	TRIPLE+2
	mf	FACTOR
	da	6
	sb	TRIPLE+2
	sa	7
	sc	6
	lb	TRIPLE+1
	mf	FACTOR
	da	6
	sb	TRIPLE+1
	sa	7
	sc	6
	lb	TRIPLE
	mf	FACTOR
	da	6
	sb	TRIPLE
	sa	7
	lb	QUAD
	mf	FACTOR
	ab	7
	sb	QUAD
	lret	0


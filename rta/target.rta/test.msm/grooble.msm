	$path		../
	$include	language/types.def
	$path

$(3:03000/$3)
yard	$tree
foot(1)	$tree
?	$do	12,inch(?)	int	12*1+?-1
	$root
foot(2)	$tree
?	$do	12,inch(?)	long	12*2+?-1
	$root
foot(3)	$tree
?	$do	12,inch(?)	triple	12*3+?-1
	$root
	$root

f	$func
pluck*	$name
f	$func
shave*	$name
	$note	cast
	$trace	f(1, 1:!)
	$do	!=9,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3):f(1,1:4):f(1,1:5):f(1,1:6):f(1,1:7):f(1,1:8)"
	$do	!=8,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3):f(1,1:4):f(1,1:5):f(1,1:6):f(1,1:7)"
	$do	!=7,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3):f(1,1:4):f(1,1:5):f(1,1:6)"
	$do	!=6,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3):f(1,1:4):f(1,1:5)"
	$do	!=5,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3):f(1,1:4)"
	$do	!=4,	$return	+"f(1,1:1):f(1,1:2):f(1,1:3)"
	$do	!=3,	$return	+"f(1,1:1):f(1,1:2))"
	$return	f(1:1)	
	$end
!	$set	f(1, 1:)
	$do	!>1,	$do	$t(f(1, 1:!))=$name,	$return	shave(f(1, 1))
	$return	f(1, 1)
	$end

	+	pluck(yard:foot(2))
	+	pluck(yard:foot(3):inch(9)
	+	pluck(yard:foot(1):inch(8):quad)


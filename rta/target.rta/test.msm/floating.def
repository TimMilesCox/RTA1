"$keyword" $equ 192
to	$equ, $keyword	1
giving	$equ, $keyword	2
from	$equ, $keyword	3
by	$equ, $keyword	4
into	$equ, $keyword	5

f	$func
"$key"*	$name
	$do	$t(f(1, 1))=$keyword,	$return	f(1, 1)
	$return	0
	$end

p	$proc
fadd*	$name
tokens	$set	p()
	$if	$key(p(tokens-1, 1))=to
	ql	p(tokens)
?	$do	tokens-2,	fa	p(?)
	qs	p(tokens)
	$elseif	$key(p(tokens-1, 1))=giving
	ql	p(1)
?	$do	tokens-3,	fa	p(?+1)
	qs	p(tokens)
	$else
	$note	all numbers in list added to existing register value
?	$do	p(),	fa	p(?)
	$endif
	$end

p	$proc
fsub*	$name
tokens	$set	p()
reach	$set	tokens
	$do	$key(p(tokens-1, 1))=giving,;
reach	$set	tokens-2

	$if	$key(p(1, 1))=from
	ql	p(2)
?	$do	reach-2,	fan	p(?+2)
	$if	tokens>reach
	qs	p(tokens)
	$else
	qs	p(2)
	$endif
	$elseif	$key(p(reach-1, 1))=from
	ql	p(reach)
?	$do	reach-2,	fan	p(?)
	qs	p(tokens)
	$else
	$flag	subtrahend not identified
	$endif
	$end

p	$proc
fmul*	$name
tokens	$set	p()
	$if	$key(p(2, 1))=by
	ql	p(1)
?	$do	tokens-2,	fm	p(?+2)
	qs	p(1)
	$elseif	$key(p(tokens-1, 1))=giving
	ql	p(1)
?	$do	tokens-3,	fm	p(?+1)
	qs	p(tokens)
	$else
	$note	existing register value multiplied by each number in list
?	$do	p(),	fm	p(?)
	$endif
	$end

p	$proc
fdiv*	$name
tokens	$set	p()
reach	$set	tokens

	$do	p(tokens-1, 1)=giving,reach	$set	tokens-2

	$if	$key(p(reach-1, 1))=into
	ql	p(reach)
?	$do	reach-2,	fd	p(?)
	qs	p(tokens)
	$elseif	$key(p(2, 1))=by
	ql	p(1)
?	$do	reach-2,	fd	p(?+2)
	$if	tokens>reach
	qs	p(tokens)
	$else
	qs	p(1)
	$endif
	$else
	$flag	dividend not identified
	$endif
	$end

p	$proc
freckon* $name
fcompute* $name
tokens	$set	p()
	$xqt_fp	p(tokens, 1)
	qs	p(1)
	$end

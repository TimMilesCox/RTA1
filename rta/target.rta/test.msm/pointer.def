p	$proc

__*	$name	push

f	$func	*
__column* $name

p	$proc	$(64)
__xlist* $name
*
?	$do	p(2,1),	p(1, 1)	+(?-1)/3, x, t1+(?-1)///3
	$end
	$list	0
	$do	$t(f(1, 1)__)=0,"f(1, 1)__"****	__xlist f(1, 1) f(2, 1)
	$list
	$return	"f(1, 1)__"
	$end

	$if	p(1, *3)
	$if	p(1, *1)
	lx	p(1, 1:1), p(1, 2)
	p(0, 2)	p(1, 1:2)/3, x, p(1, 1:2)///3+t1
	$else
	p(0, 2)	p(1, 1:1)+p(1, 1:2)/3, p(1, 2), p(1, 1:2)///3+t1
	$endif
	$else
	$if	p(1, 1:)>1
	$if	p(1, *1)
	lx	p(1, 1:1), p(1, 2)
	$else
	lx	p(1, 1:1), p(1, 2), i
	$endif
	ly	p(1, 1:2)
	$else
	lx	p(1)
	ly	p(1)+1
	$endif
	$if	p(2)>1
	$do	p(2)<3,	$flag	escape address required with maximum count
	lr	p(2, 2),,xi
	jyge	p(2, 3)
	$endif
	ex	__column(p(0, 2) p(2)), y
	$endif

	$end

p	$proc
pnormalise* $name 105
"$reference" $set p(1, 1)
	la	$reference+1, p(1, 2)
	dsa	24
	d	3,,xi
	aa	p(1)
	$end

f	$func
columnp* $name
	$return	f(1, 1:1)+f(1, 1:2)/3*/24++f(1, 1:2)///3
	$end

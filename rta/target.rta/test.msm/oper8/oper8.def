
"$chex3"	$set	0
"$chey3"	$set	0

f	$func
"$boxs"*	$name
	$return	f(1)
"$box1"*	$name
	$return	f(1, 1)
"$boxt1"*	$name
	$do	$t(f(1, 1))=127,	$return	1
	$do	$t(f(1, 1))=$equf,	$return	1
	$return	0
"$box"*		$name
	$return	f(1, ?)
"$boxt"*	$name
	$do	$t(f(1, ?))=127,	$return	1
	$do	$t(f(1, ?))=$equf,	$return	1
	$return	0
	$end

f	$func
"$trax"* $name
p	$proc
"$rax"*	$name
	$if	($t(p(1, 1))=127)++($t(p(1, 1))=$equf)
	ax	p(1)
	$endif
	$end

	$rax	f(1, ?)
	$return	0
	$end

f	$func
"$trux"* $name
p	$proc
"$rux"*	$name
	$if	($t(p(1, 1))=127)++($t(p(1, 1))=$equf)
	ax	p(1)
	$else
	ax	p(1),,xi
	$endif
	$end

	$rux	f(1, ?)
	$return	0
	$end

p	$proc
oper8x*	$name	0

"$pactionx"* $proc
	ex	($op*/19++t1*/16++1*/15++$pad+1,	;
		 $op*/19++t2*/16++1*/15++$pad+1,	;
		 $op*/19++t3*/16++1*/15++$pad+1:t), x
	$end

_AX	$equ	"ax"*/19
_XI	$equ	xi*/16
_LCAL	$equ	"lcal"*/19++6*/16
_LX	$equ	"lx"*/19
_INC	$equ	"inc"*/19++7*/16
_DEC	$equ	"dec"*/19++7*/16
_LRET	$equ	"lret"*/19++5*/16

"$advancex"* $proc
	ex	(_AX++_XI++1, _AX++_XI++1, _LCAL++$0(_LX++_XI, _INC++$pad+1, _LRET++0t)t)
	$end


"$advancexleft"* $proc
	ex	(_LCAL++$0(_LX++_XI++2, _DEC++$pad+1, _LRET++0t), _AX++_XI++0FFFF, _AX++_XI++0FFFFt)
	$end

"$actionx"* $proc
	ex	($op*/19++t1*/16++1*/15++$dynamicp_x+1, ;
		 $op*/19++t2*/16++1*/15++$dynamicp_x+1, ;
		 $op*/19++t3*/16++1*/15++$dynamicp_x+1:t), x
	$end

"$psymbol"	$equ	144
"$pointer"	$equ	1
"$pplus"	$equ	2
"$pminus"	$equ	3

"*"	$equ,$psymbol	$pointer
"*++"	$equ,$psymbol	$pplus
"*--"	$equ,$psymbol	$pminus


"$op"	$equ	p(1, 1)

	$if	$t("p(1, 1)")=$psymbol
	$do	$o('V'),	$note	unary

"$pad"	$equ	p(2, 1)
	lx	$pad
	$do	$chex3,	call	($chx3)

	$if	"p(1, 1"=$pplus
	$do	$o('V'),	$note	++
	$advancex
	$elseif	"p(1, 1"=$pminus
	$do	$o('V'),	$note	--
	$advancexleft
	$else	no unary pointer operation
	$endif

	sx	$pad

	$elseif	$t("p(2, 1)")=$psymbol

"$pad"	$equ	p(3, 1)

	$if	"p(2, 1)"=$pointer
	$do	$o('V'),	$note	xpointer



	$if	$boxs\p(3, 1)
	lx	p(3, 1)

?	$do	$boxs\p(3, 1),	$do	$trux\p(3, 1),	.


.	$if	$boxt1\p(3, 1)
.	ax	$box1\p(3, 1)			. signed variable pointer offset
.	$else
.	ax	$box1\p(3, 1),,xi		. signed immediate pointer offset
.	$endif
	push	p(3, 1)+1
	call	($pointer8_offset_x)
	pop	$dynamicp_x+1
	sx	$dynamicp_x

	$actionx

	$else
	lx	$pad
	$do	$chex3,	call	($chx3)
	$pactionx
	$endif

	$elseif	"p(2, 1)"=$pplus
	$do	$o('V'),	$note	preplus

	lx	$pad
	$do	$chex3,	call	($chx3)
	$advancex
	sx	$pad
	$pactionx

	$elseif	"p(2, 1)"=$pminus
	$do	$o('V'),	$note	preminus

	lx	$pad
	$do	$chex3,	call	($chx3)
	$advancexleft
	sx	$pad
	$pactionx

	$endif

	$elseif	$t("p(3, 1)")=$psymbol

"$pad"	$equ	p(2, 1)

	$if	"p(3, 1"=$pointer
	$do	$o('V'),	$note	pointer

	$if	$boxs\p(2, 1)
	lx	p(2, 1)
?	$do	$boxs\p(2, 1),	$do	$trux\p(2, 1),	.

.	$if	$boxt1\p(2, 1)
.	ax	$box1\p(2, 1)			. signed variable pointer offset
.	$else
.	ax	$box1\p(2, 1),,xi		. signed immediate pointer offset
.	$endif
	push	p(2, 1)+1
	call	($pointer8_offset_x)
	pop	$dynamicp_x+1
	sx	$dynamicp_x

	$actionx

	$else
	lx	$pad
	$do	$chex3,	call	($chx3)
	$pactionx
	$endif

	$elseif	"p(3, 1)"=$pplus
	$do	$o('V'),	$note	postplus

	lx	$pad
	$do	$chex3,	call	($chx3)
	$pactionx
	$advancex
	sx	$pad

	$elseif	"p(3, 1)"=$pminus
	$do	$o('V'),	$note	postminus	

	lx	$pad
	$do	$chex3,	call	($chx3)
	$pactionx
	$advancexleft
	sx	$pad

	$endif		. 	pointer types
	$else
	$do	$o('V'),	$note	location

	.	this is a location and may be subscripted severally
	.	with variable and literal subscripts 

bytes_offset	$set	0

	$do	p(2, 4)**7^=0,	$note	target not at octet position, bit positions overstepped
bytes_offset		$set	p(2, 4)+7/*3
array_octets		$set	p(2, 5)+7/*3

subscript_variables	$set	0

?	$do	$boxs\p(2, 1),	$do	$boxt\p(2, 1)=0,;
bytes_offset	$set	bytes_offset+$box\p(2, 1)

?	$do	$boxs\p(2, 1),	$do	$boxt\p(2, 1)^=0,;
subscript_variables	$set	subscript_variables+1

basis	$equf	p(2, 1)+bytes_offset/3
bytes_offset $set bytes_offset///3

	$do	$o('V'),	$trace	$boxs\p(2, 1)
	$do	$o('V'),	$trace	basis
	$do	$o('V'),	$trace	bytes_offset
	$do	$o('V'),	$trace	subscript_variables
	$do	$o('V'),	$trace	array_octets

	$if	subscript_variables
	push	basis,,i
	lx	bytes_offset,,xi

?	$do	$boxs\p(2, 1),	$do	$trax\p(2, 1),	.

	call	($table8_offset_x)
	pop	$dynamicp_x+1
	sx	$dynamicp_x

	$actionx

	$else
	p(1, 1)	basis,,t1+bytes_offset
	$endif
	$endif
	$end

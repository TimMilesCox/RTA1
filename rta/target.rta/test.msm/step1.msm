 $list 0
 $path ../
.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

r       $equ    0
k       $equ    1
x       $equ    2
y       $equ    3
a       $equ    4
b       $equ    5
p $equ 12
q $equ 13
fp $equ 14
sp      $equ    15


d$save $equ 16
d$save1 $equ 17
d$save2 $equ 18
d$save3 $equ 19

RDATAC $equ 20
RDATA $equ 21
WDATAC $equ 22
WDATA $equ 23

r_x $equ 128+r
k_x $equ 128+k
x_x $equ 128+x
y_x $equ 128+y
a_x $equ 128+a
b_x $equ 128+b

p_x $equ 128+p
q_x $equ 128+q
fp_x $equ 128+fp
sp_x $equ 128+sp


x$save	$equ 128+d$save
x$save1 $equ 128+d$save1
fp$xpo	$equ 128+d$save2
fp$guard $equ 128+d$save3

X_RDATAC $equ 128+RDATAC
X_RDATA  $equ 128+RDATA
X_WDATAC $equ 128+WDATAC
X_WDATA  $equ 128+WDATA


w0      $equ    0
t1      $equ    1
t2      $equ    2
t3      $equ    3
i       $equ    4
xi      $equ    5

h1      $equ    t2
h2      $equ    t3

i$      $form   5, 3, 1, 15
i$x     $form   5, 3, 1, 3, 12
i$a $form 5, 3, 16

p       $proc
sr*     $name   0
sk*     $name   1
sx*     $name   2
sy*     $name   3
sa*     $name   4
sb*     $name   5
z*      $name   6
pop* $name   7

lr*     $name   8
lk*     $name   9
lx*     $name   10
ly*     $name   11
la*     $name   12
lb*     $name   13
tz* $name   14
tp* $name 15

ax* $name 16
ay* $name 17
or*     $name   18
orB*    $name   19
and*    $name   20
andB*   $name   21
xor*    $name   22
xorB* $name 23

aa*     $name   24
ab*     $name   25
ana*    $name   26
anb*    $name   27
m*      $name   28
mf*     $name   29
d*      $name   30
push*   $name   31

operand $set p(1, 1)
jdesignator $set p(0, 2)++p(1, 3)
indirection $set p(1, *1)

 $if jdesignator=xi
  $if p(1, 2)
   $flag indexing not allowed with sign extended immediate
  $endif
  $if indirection
   $flag indirection not allowed with sign extended immediate
  $endif
  $do $net(operand)<-32768, $flag sign extended immediate too low
  $do $net(operand)>65535, $flag sign extended immediate too high
  i$a $n, xi, operand
        $elseif p(1, 2)
        i$x     $n, jdesignator, 1, $index(p(1, 2)), $address12(operand)
        $else
        i$      $n, jdesignator, indirection, $address15(p(1, 1))
        $endif
        $end

p       $proc
inA*    $name   0
inB*    $name   1
outA*   $name   2
outB*   $name   3

reload* $name 4 
emulator_cool* $name 5

sabr* $name 6
jdz* $name 15

        $if     p(1, 2)
        i$x     $n, i, 1, $index(p(1, 2)), $address12(p(1, 1))
        $else
        i$      $n, i, p(1, *1), $address15(p(1, 1))
        $endif
        $end


see$1   $equ    1*/14
see$2   $equ    1*/13
see$3   $equ    1*/12
see$4   $equ    1*/11
see$5   $equ    1*/10
see$6   $equ    1*/9
see$7   $equ    1*/8

half$w  $equ    1*/7

b$streamZR  $equ 1*/6
b$stream16r $equ 1*/5
b$stream16w $equ 1*/4

carry$ $equ 1

see$all $equ see$1++see$2++see$3++see$4++see$5++see$6++see$7

f $func
see$allbut* $name
? $set see$all
! $do f(1),? $set ?--f(1, !)
 $return ?
 $end

p       $proc
on*     $name   0
off*    $name   1

rsr* $name 2
wsr* $name 3

lret*   $name   6
fret*   $name   7

ii* $name 14
ir* $name   15

        $if p(1, 2)++p(1, *1)
        $flag no indexing or indirection with this instruction
        $note only sign extended immediate 16-bit operand possible
        $endif
        i$a     $n, xi, p(1, 1)
        $end

p       $proc

sar*    $name   0
sbr*    $name   1
dsr*    $name   2
jdr* $name 3

sal* $name 4
sbl*    $name   5
dsl*    $name   6
lcal* $name 7

rar*    $name   8
rbr*    $name   9
drr*    $name   10
jnc* $name 11

ral*    $name   12
rbl*    $name   13
drl*    $name   14
jc* $name 15

saa*    $name   16
sba*    $name   17
dsa*    $name   18
jao* $name 19

jpa*    $name   20
jpb*    $name   21

j* $name 22
jpo* $name 23

jza*    $name   24
jzb*    $name   25

jnza*   $name   26
jnzb*   $name   27

jna*    $name   28
jnb*    $name   29

jxge*    $name   30
jyge*    $name   31

        $if     p(1, 2)
        i$x     $n, 6, 1, $index(p(1, 2)), $address12(p(1, 1))
        $else
        i$      $n, 6, p(1, *1), $address15(p(1, 1))
        $endif
        $end


p       $proc

ts*     $name   0
n*      $name   1
inc* $name 2
dec* $name 3
sim* $name 4
popA* $name 5
src* $name 6
slc* $name 7

qs*     $name   8
ql*     $name   9
fpp*    $name   10
fpx*    $name   11

fa*     $name   12
fan*    $name   13
fm*     $name   14
fd*     $name   15

qpop* $name 16
qpush* $name 17
ex* $name 18
dpush* $name 19

lsc*   $name   20
mta*    $name   21
sc*     $name   22
mlb* $name   23

ds*     $name   24
dl*     $name   25
da*     $name   26
dan*    $name   27

dlsc*    $name   28

go*    $name   30
call*    $name   31

operand $set p(1, 1)

        $if     p(1, 2)
        i$x     $n, 7, 1, $index(p(1, 2)), $address12(operand)
        $else
        i$      $n, 7, p(1, *1), $address15(operand)
        $endif
        $end

f $func
"$address15"* $name

offset $set f(1, 1)
.	$do	$t(f(1,1))=$equf,;
. offset	$set	offset**((1*/31)-1)


 $if f(1, *1)

 $do $net(offset)>8191, $flag  indirection only on words 0 to 8191
        $else
        $do $net(offset)>32767, $flag  direct addressing only 0 to 32767
        $endif
        $return offset

 $end
        
f $func
"$address12"* $name
offset $set f(1, 1)
 $do $net(offset)>4095, $flag  base+displacement addressing only index + 0 to 4095
        $return offset
 $end

f $func
"$index"* $name

 $do f(1,*1),  $note  *flag on index value has no effect
 $do (f(1,1)>15)++(f(1,1)<2)++((f(1,1)>5)**(f(1,1)<14)), $flag only registers x,y,a,b,fp,sp (2,3,4,5,14,15) may be used for indexing
 $return f(1, 1) 
 $end

        $set_option "a"

f $func
"$bank_address"* $name

 $if f(1,1)<262144
base $set f(1,1)/*12
offset $set f(1,1)**4095
 $else
 $return f(1,1)
 $endif

 $return base*/18++offset
 $end
 
tnz* $proc
 tz tnz(1, 1), tnz(1, 2), tnz(0, 2)++tnz(1, 3)
 j $+2
 $end

tn* $proc
 tp tn(1, 1), tn(1, 2), tn(0, 2)++tn(1, 3)
 j $+2
 $end

mtane* $proc
 mta mtane(1, 1), mtane(1, 2)
 j $+2
 $end

jae* $proc
 jao $+2
 j jae(1, 1), jae(1, 2)
 $end

jpe* $proc
 jpo $+2
 j jpe(1, 1), jpe(1, 2)
 $end

anu* $proc
 lb a
 anb anu(1, 1), anu(1, 2), anu(1, 3)++anu(0, 2)
 $end

anuba* $proc
 la b
 ana anuba(1, 1), anuba(1, 2), anuba(1, 3)++anuba(0, 2)
 $end

tanu* $proc
 $note this tests a_x not a
 lb a_x
 anb tanu(1, 1), tanu(1, 2), tanu(1, 3)++tanu(0, 2)
 $end

tanuba* $proc
 $note this tests b_x not b
 la b_x
 ana tanuba(1, 1), tanuba(1, 2), tanuba(1, 3)++tanuba(0, 2)
 $end


.
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.



p  $proc
"$aax"*  $name

"$u"  $set p(1, 1)  . drop any indirection bit
"$ix"  $set p(0, 2)
"$iy"  $set $ix**1

  $if p(1, *1)**(p(1, 2)^=0)
  $if $ix**x
  lx++$iy $u, p(1, 2)
"$aaa"*  $equf 0, $ix
  $else
  lr++$iy $u, p(1, 2)
"$aaa"*  $equf *$ix
  $endif

  $elseif p(1, *1)**($u>8191)

  $if $ix**x
  $if $u>32767
  lx++$iy *($u:s)
  $else
  lx++$iy $u
  $endif
"$aaa"*  $equf 0, $ix
  $else
  $if $u>32767
  lr++$iy *($u:s)
  $else
  lr++$iy $u
  $endif
"$aaa"*  $equf *$ix
  $endif

  $elseif ($u>32767)**(p(1, 2)=0)**(p(1, *1)=0)

  $if $ix**x
  lx++$iy $0($u:s)
"$aaa"*  $equf 0, $ix
  $else
"$aaa"*  $equf *$0($u:s)
  $endif

  $else

"$aaa"*  $equf p(1)
  $endif
  $end

p  $proc
"$x_add"* $name
  $aax  p(1)
  fa  $aaa
  $return

"$x_subtract"* $name
  $aax  p(1)
  fan  $aaa
  $return

"$x_multiply"* $name
  $aax  p(1)
  fm  $aaa
  $return

"$x_divide"* $name
  $aax  p(1)
  fd  $aaa
  $return

"$x_load"* $name
  $aax  p(1)
  ql  $aaa
  $return

"$x_load_negative"* $name
  $aax  p(1)
  ql  (0.0)
  fan  $aaa
  $return

"$x_reserve"* $name
  qs  8
  $return

"$x_retrieve_add"* $name
  fa  8
  $return

"$x_retrieve_subtract"* $name
  fan  8
  $return

"$x_retrieve_multiply"* $name
  fm  8
  $return

"$x_retrieve_divide"* $name
  fd  8
  $end

.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

p  $proc *
"$head_far"* $name 3
"$head_near"* $name 2
"$$list" $set p(0, 0)

"$zero_stack" $equ 1

"$$zero_stack"* $set 0
  $do p(0, 2)=$zero_stack,"$$zero_stack"* $set 1
"$$call_space"* $set p(0,0)
"$$params"* $set 0

"$$minimum"* $proc $(0)
 la $$call_space-1, sp
 ana, i $$list, sp
 jc $+2
 ii 95
 $do $o('V'), $note check minimum arguments -O
 $end

"$$exact"* $proc $(0)
 la $$call_space-1, sp
 ana, i $$list, sp
 jza $+2
 ii 95
 $do $o('V'), $note check absolute arguments -U
 $end

int $equ  1
long $equ  2
float $equ  4
floating_packed $equ 4

params* $func
param* $func

 $if  $$zero_stack
"param(1, 1)"*** $equf $$list, fp
 $else
"param(1, 1)"*** $equf $$list+iframe, sp
 $endif
 $return  param(1, 2)
 $end

? $do  params(),"$$list"* $set $$list+param(params(?))
"$$params"** $set params()
 $if $$params
 $do $o('O'), $$minimum
 $do $o('U'), $$exact
 $endif
 $return  $$list
 $end


scalars* $func

scalar* $proc  $(0)
floating_packed $equ -4

   $if  scalar(1, 4)=sp
"$$extra" $set  frame
   $else
"$$extra" $set  0

   $endif
 $if  scalar(1, 2)=floating_packed
frame*   $set  frame-4
   $if  scalar(1)>2
  fpx scalar(1, 3)+$$extra, scalar(1, 4)
   $else
  fpx (-0.0:d)
   $endif
 $else
   $if  scalar(1, 2)=int
     $if  scalar(1)>2
  push scalar(1, 3)+$$extra, scalar(1, 4), scalar(1, 5)
     $else
  push,xi 0
     $endif
   $elseif  scalar(1, 2)=long
     $if  scalar(1)>2
  dpush scalar(1, 3)+$$extra, scalar(1, 4)
     $else
  dpush (0:d)
     $endif
   $elseif  scalar(1, 2)=float
     $if  scalar(1)>2
  qpush scalar(1, 3)+$$extra, scalar(1, 4)
    
     $else
  fpx (-0.0:d)
     $endif
   $elseif  (scalar(1, 2)>0)**(scalar(1, 2)<25)
     $do scalar(1, 2)**3, push, xi 0
     $do scalar(1, 2)>3,  fpx  (0.0:d)
     $do scalar(1, 2)/4-1, qpush  0, sp
   $else
     $flag  internal stack item size of of range
     $return
   $endif
frame* $set  frame-scalar(1, 2)
 $endif


"scalar(1, 1)"***  $equf   frame, sp

 $end


frame $set  0
? $do scalars(),frame $set frame+scalars(?, 2)

iframe* $set frame
 $if  frame
 $do     $o('V'), $note buy internal $$frame

$(71)
? $do scalars(), scalar scalars(?)
 $endif
 $return frame
 $end

xframe* $func

p $proc  $(70)
load_string* $name

word1 $set  $

 $if  ($t(p(1, 2))=$name)++($t(p(1, 2))=$proc)
"p(1, 1)"***  p(1, 2)
 $else
"p(1, 1)"*** $res p(1, 2)
 $endif


words $set  $(70)-word1

$(0)
 $if  p(1)>2
   $if  words=1
  push p(1, 3), p(1, 4), p(1, 5)
  pop p(1, 1),, p(1, 6)
   $elseif words=2
  dpush p(1, 3), p(1, 4)
  pop p(1, 1)
  pop p(1, 1)+1
   $elseif words=4
  qpush p(1, 3), p(1, 4)
  qpop p(1, 1)
   $else
  dpush x
  push r
  lx, i p(1, 1)

  ly, i p(1, 3), p(1, 4)

  $if words/4
  lr, xi words/4-1
  lcal segment_ql
  $endif
  $if words///4
  lr, xi words///4-1
  lcal segment_sl
  $endif
  pop r
  pop x
  pop y
   $endif
 $endif
  
 $end


$(70)
 $do $$params=0,"$$list"* $set $$list-1
 $do $$zero_stack,  $res $$list
$(0)
 $do $o('V'), $note buy external $$xframe
 push, xi -lframe
 popA  fp

 $if $$zero_stack
 $do     $o('V'), $note internal stack zero net demand
 $do iframe^=0, $flag scalars() not possible before xframe() with $zero_stack
? $do $$list///4, pop +?-1, fp
? $do $$list/4, qpop $$list///4+?*4-4, fp

 $endif

$(71)
? $do xframe(), load_string xframe(?)
 $return  $(70)
 $end

 

$(70::,fp)

$(71)

 $do $t(iframe)=0,iframe $set 0

? $do p(),part(?)* $set p(?, 1)
lframe  $set $(70)
$(0)
"$$frame"* $set iframe
"$$xframe"* $set $(70)
"$$list"* $set $$list
 $end

"$ret"* $proc
 $if $$frame
 $do     $o('V'), $note sell internal $$frame
 push, i $$frame, sp
 pop sp
 $endif

 $if $$zero_stack
 $do     $o('V'), $note internal stack zero net use
 $if $o('S')**$$params
 $do $o('V'), $note restore internal stack $$list -S
? $do $$list/4, qpush $$list-?*4, fp
 $do $$list**2=2, dpush   $$list**1, fp
 $do $$list**1, push 0, fp
 $else
 $if $$call_space=$head_near
 $if $$params
 $do     $o('V'), $note parameter list walkback
 dpush 0, fp
 $else 
 push 0, fp
 $endif
 $elseif $$call_space=$head_far
 $if $$params
 $do     $o('V'), $note parameter list walkback
 push 2, fp
 $endif
 dpush 0, fp
 $else
 $flag surely some mistake
 $endif
 $endif
 $endif

 $if $$xframe
 $do     $o('V'), $note  sell external $$xframe
 push, i $$xframe, fp
 pop fp
 $endif

 $if $$call_space=$head_near
 $do $o('V'), $note near return
 lret $ret(1, 1)
 $elseif $$call_space=$head_far
 $do $o('V'), $note far return
 fret $ret(1, 1)
 $else
 $flag routine neither $head_near nor $head_far
 ii 31
 $endif
 $end

p $proc
c* $name 1
lc* $name 0


INT $equ 101  . these keyword values
LONG $equ 102  . must not be the same as
PACKED_FLOATING  $equ 103 . ,,i ,,xi ,,h1 ,,h2
FLOATING $equ 104  . ,,t1 ,,t2 ,,t3


p $proc
vpush* $name

int     $equ    INT
long    $equ    LONG
floating_packed $equ PACKED_FLOATING
float   $equ    FLOATING


 $if p(1, 2)=sp
"$$extra" $set $$dispo
 $else
"$$extra" $set 0
 $endif

 $if p(1, 3)=FLOATING
 qpush p(1, 1)+$$extra, p(1, 2)
"$$dispo"* $set $$dispo+4
 $elseif p(1, 3)=PACKED_FLOATING
 fpx p(1, 1)+$$extra, p(1, 2)
"$$dispo"* $set $$dispo+4
 $elseif p(1, 3)=LONG
 dpush p(1, 1)+$$extra, p(1, 2)
"$$dispo"* $set $$dispo+2
 $else
 push p(1, 1)+$$extra, p(1, 2), p(1, 3)
"$$dispo"* $set $$dispo+1
 $endif

 $end

alist $set p()

"$$dispo" $set 0

.	la	sp
? $do alist-1, vpush p(alist+1-?)

 $do alist>1, push $$dispo, sp, i

 $do p(0, 0)=c, call p(1)
 $do p(0, 0)=lc, lcal p(1)

 $do alist>1, pop sp
 $end


"$vector"* $proc
 $do $bank_index**4095^=0, $flag bank misaligned
 $do $>63,   $flag vector outside bank locations 0..63
* $equ $bank_index/*6++$
 j $vector(1)
 $end

SEGMENT_QL* $proc

"segment_ql"*
 qpush 0, y
 qpop 0, x
 ax, xi 4
 ay, xi 4
 jdr segment_ql
 lret 0

segment_sl*
 push 0, y
 pop 0, x
 ax, xi 1
 ay, xi 1
 jdr segment_sl
 lret 0

 $end

"$stack_macro_remarks" $set 0
 $path
 $list
$(0:0)

floating_algorithm*  $vector fp_routine

$(0:64)

fp_routine 
 $head_far  params(one, float  two, float  three, float)

 $xqt_fp  one*1.75*+1200000*two/3.0*-625000-three


 fret  0

 $do  $<256,$(0:256)
 $end

.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is development and test material for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.       
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.       
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.                               
.                                               
                        


	$path	../def
	$include	rta.def
	$path
	$include	stack.def
	$include	iconsta.def
	$include	fpxpress.def
	$include	../test.msm/i_xpress.def

$(3:03000)
slendred $res	8
	+	x$iii(555)
$(0:64)
william	$head_near	 params(one,	long	;
				two,	long	;
				three,	long)	;
						;
			scalars(first,	long	;
				second,	long	;
				third,	long)

SIXTY_FIVE	$equf	65,,xi
FIELD2		$equf	slendred,,h2
DISTANCE	$equf	2, x
SUBSCRIPT	$equf	third+1

__RADIX	$set	48
	$xqt_i,$iii	one + two * three:L - (100 * 8 / 40 - 1d)

	$xqt_i,$iii	one + two * three:L - 100 * 8 / 40 - 1
	$xqt_i,$iii	one + two * three:L - 100 * 8 / 40d - 1d

	$xqt_i,$iii	12 * 9 / 5 + (0999999999999 -- 0333333333333)L

	$xqt_i,$iii	12 * 9 / 5 + (one -- two)

	$xqt_i,$iii	three - one * two:L

	$xqt_i,$iii	third */ 12 ++ 1

	$xqt_i,$iii	0aa55aa55 */ two + 1
	$xqt_i,$iii	'monkey' */ 1 + two
	$xqt_i,$iii	'ladder' */ 1 + (*two)
	$xqt_i,$iii	'trampo' /* (*two) + 1

	$xqt_i,$iii	three /* (*4096)

	$xqt_i,$iii	two * SIXTY_FIVE + 20
	$xqt_i,$iii	three * FIELD2

	$xqt_i,$iii	FIELD2,,h2 / SIXTY_FIVE
	$xqt_i,$iii	-FIELD2,,h2 /* 3

	$xqt_i,$iii	second */ (*third+1)
	$xqt_i,$iii	second */ (*SUBSCRIPT) + 1
	$xqt_i,$iii	second /* 5
	$xqt_i,$iii	second /* 2, x				. DISTANCE

	$xqt_i,$iii	FIELD2:S * 30
	$xqt_i,$iii	FIELD2:S + 48
	$xqt_i,$iii	FIELD2:S - 30 - 3
	$xqt_i,$iii	FIELD2:S * 3 * 3
	$xqt_i,$iii	FIELD2:S / 9

	$xqt_i,$iii	third * 3 * 3
	$xqt_i,$iii	third / (3 * 3)
	$xqt_i,$iii	third / 9d
	$xqt_i,$iii	third / 40000000
	$xqt_i,$iii	third / FIELD2
	$xqt_i,$iii	one + third / 40000000

near_here
	$do	$<256,$(0:256)

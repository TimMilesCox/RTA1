.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is development and test material for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    The masmx target-independent meta-asembler delivered here
.    is free software whether it is used for constructing RTA1 code
.    or any other code. masmx is a separate free program by the
.    same author and included with this software to save searching for it
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.       
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.       
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.                               
.                                               
                        


	$path		../../def
	$include	rta.def
	$path		../
	$include	stack.def
	$include	fpxpress.def
	$path

	$include	floating.def

$(0:64)

context	$head_near	 params(one,	float	;
				two,	float	;
				three,	float)	;
						;
			scalars(sum1,	float	;
				sum2,	float	;
				sum3,	float, three)

	fadd	one two three	giving sum1
	fadd	(3.0*+1200000) (4.0*-900000) (12345678901234567890.0) to sum3
	fadd	sum1 sum3 giving sum2
	fadd	sum1 sum2 (1.0*+6) to sum3

	fsub	(16*+1) from sum1 giving sum2
	fsub	one two three from sum3
	fsub	from sum2 sum3 sum1 giving three

	fmul	sum1 by one two three
	fmul	sum1 sum2 (1.875) giving sum2

	fdiv	one two three into sum1
	fdiv	sum2 by one two three giving sum3

	$xqt_fp	one*18.8*two/1.1

	$xqt_fp	5.0+2.5+125*+1+sum1*3.0

	freckon	sum3 = one*18.8*two/1.1

	fcompute sum2 15.5*one/1*-1200000+1234567890123456789.0

	push, i	$$frame, sp
	pop	sp
	lret	0

	$do	$<256,$(0:256)

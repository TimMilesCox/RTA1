.
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

fp$aside(1)	$equ	8
fp$aside(2)	$equ	d$save
fp$aside(3)	$equ	24
fp$aside(4)	$equ	28
fp$aside(5)	$equ	32

"$$aside"	$set	1

p		$proc
"$aax"*		$name

f       $func
"$iii"* $name
	$if	$$significands>48
"$iiw"** $set	72
pointer	$equf	(f(1:):T)
	$elseif	$$significands>24
"$iiw"** $set	48
pointer	$equf	(f(1:):L)
	$else
"$iiw"** $set   imeasure(f(1:))
	$sterm	':'
	$do	$o('C'),	$sterm	'.'
pointer $equf   (f(1:))
	$endif
        $return pointer
        $end

	$if	p(1, 1:)>1
"$u"		$set	p(1, 1:1)
nsize		$set	"p(1, 1:1)"\5
	$else
"$u"		$set	p(1, 1)		. drop any indirection bit
nsize		$set	p(1, 5)
	$endif

"$ix"		$set	p(0, 2)
"$iy"		$set	$ix**1
"$indirect"	$set	p(1, *1)

		$if	($t(p(1, 3))=$name)**(p(1, 3)=111)
		p(1,3)	p(1, 1), p(1, 2)
"$aaa"*		$equf	fp$aside($$aside)
		$else
		$nop	not via subfield 3 macro / [subroutine]

	$do	nsize^=0,size*	$set	nsize	. typed size

	$if	p(1, 1:2)
	$if	nsize
	$nop			there is a typed size

	$if	p(1, 1:2)>nsize
	$nop			cast is extend on load
"$$cast"* $set	p(1, 1:2)
	$elseif	p(1, 1:2)<nsize
	$nop			cast is load low order part
"$u"	$set	$u+(size-p(1, 1:2))//24 . EA advanced word[s]
size*	$set	p(1, 1:2)
	$else
	$nop			keep type size
	$endif
	$else
	$nop			cast no typing
size*	$set	p(1, 1:2)
	$endif
	$endif

		$if	$indirect**(p(1, 2)^=0)

		$if	$ix**x
		lx++$iy	$u, p(1, 2)
"$aaa"*		$equf	0, $ix
		$else
		lr++$iy	$u, p(1, 2)
"$aaa"*		$equf	*$ix
		$endif

		$elseif	$indirect**($net($u)>8191)

		$if	$ix**x
		$if	$u>32767
		lx++$iy	*(+($u)s)
		$else
		lx++$iy	$u
		$endif
"$aaa"*		$equf	0, $ix
		$else
		$if	$u>32767
		lr++$iy	*(+($u)s)
		$else
		lr++$iy	$u
		$endif
"$aaa"*		$equf	*$ix
		$endif

		$elseif	($net($u)>32767)**(p(1, 2)=0)**($indirect=0)

		$if	$ix**x
		lx++$iy	$0(+($u)s)
"$aaa"*		$equf	0, $ix
		$else

"$aaa"*		$equf	*$0(+($u)s)
		$endif

		$elseif	p(1, 1:)>1

"$aaa"*		$equf	p(1, 1:1), p(1, 2), p(1, 3)

		$else

"$aaa"*		$equf	p(1)
		$endif
		$endif

		$end

p		$proc
"$x_add"*	$name
		$do $o('V'),	$note	ADD
		$aax		p(1)
		fa		$aaa
		$return

"$x_subtract"*	$name
		$do $o('V'),	$note	ADD_NEGATIVE
		$aax		p(1)
		fan		$aaa
		$return

"$x_multiply"*	$name
		$do $o('V'),	$note	MULTIPLY
		$aax		p(1)
		fm		$aaa
		$return

"$x_divide"*	$name
		$do $o('V'),	$note	DIVIDE
		$aax		p(1)
		fd		$aaa
		$return

"$x_load"*	$name
		$do $o('V'),	$note	LOAD
		$if		($t(p(1, 3))=$name)**(p(1, 3)=111)
		p(1, 3),63	p(1, 1), p(1, 2)
		$else
		$aax		p(1)
		ql		$aaa
		$endif
		$return

"$x_load_negative"* $name
		$do $o('V'),	$note	LOAD_NEGATIVE
		$if		($t(p(1, 3))=$name)**(p(1, 3)=111)
		p(1, 3),63	p(1, 1), p(1, 2)
		qs		fp$aside($$aside)
		ql		(0.0)
		fan		fp$aside($$aside)
		$else
		$aax		p(1)
		ql		(0.0)
		fan		$aaa
		$endif
		$return

"$x_reserve"*	$name
		$do $o('V'),	$note	PUSH
		$do	$$aside>5,	$flag	floating lookaside overflow
		qs		fp$aside($$aside)
"$$aside"**********************	$set	$$aside+1
		$return

"$unstac"*	$name
		$do $o('V'),	$note	POP
"$$aside"**********************	$set	$$aside-1
		$do	$$aside<1,	$flag	floating lookaside underflow
		$return

"$x_reverse"*	$name
		$do $o('V'),	$note	REVERSE
		n	a
		n	b
		n	6
		n	7
		$return

"$x_retrieve_add"*	$name
		$do $o('V'),	$note	POP_ADD
		$unstac
		fa		fp$aside($$aside)
		$return

"$x_retrieve_subtract"*	$name
		$do $o('V'),	$note	POP_ADD_NEGATIVE
		$unstac
		fan		fp$aside($$aside)
		$return

"$x_retrieve_multiply"*	$name
		$do $o('V'),	$note	POP_MULTIPLY
		$unstac
		fm		fp$aside($$aside)
		$return

"$x_retrieve_divide"*	$name
		$do $o('V'),	$note	POP_DIVIDE
		$unstac
		fd		fp$aside($$aside)
		$end


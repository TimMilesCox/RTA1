	$set_option	"cC"

	$lterm		';'
	$sterm		'.'
	$cont_char	'\\'

	$text,3		|__FILE|
;	$text	|?| __EITHER? |
;	$text	|:| __OR? |

	$text	|{|__LBRACE|
	$text	|}|__RBRACE|
	$text	|==|=|
;	$text	|>=| __GE? |
	$text	|*=| __TIMES! |
	$text	|/=| __OVER! |
	$text	|%=| __REMAINDER! |
	$text	|+=| __PLUS! |
	$text	|-=| __MINUS! |
	$text	,|=, __OR! ,
	$text	|&=| __AND! |
	$text	|~=| __NE? |
;	$text	|<=| __LE?|
	$text	|&|**|
	$text	|^=| __XOR! |
		
	$text	|^|--|
	$text	|~|^|
	$text	|!=|^=|
	$text	|>=|^<|
	$text	|<=|^>|

	$text	|!| __NOT_SO? |
	$text	|^^|--|
	$text	,|,++,
	$text	|>>|/*|
	$text	|<<|*/|
	$text	|~|^|

	$text	|#define|	adapt	|
	$text	|#|	$nop	|

__OP	$equ	128
"="	$equ,__OP	1
"?"	$set,__OP	2
":"	$equ,__OP	3

;	everything up to here is coded with rta native syntax and operators
;	after here code is written using c language syntax and operators
;	where they are different, whether c or assembler is being written

__LBRACE*	$func
start_point	$tree
	$end

__RBRACE*	$func
end_point	$root
	$end

return*	$proc
	$do	return(1)>0,	la	return(1, 1)
	$ret
	$end

p	$proc
static*	$name	1
	$note	i see request
        p(1, 1) p(2:)
;	p(1, 1)	p(2) p(3) p(4) p(5) p(6) p(7) p(8) p(9) p(10) p(11) p(12) p(13) p(14) p(15) p(16) p(17) p(18)
	$end

f	$func
$enclos* $name
	$trace	f()
	$return	f()
	$end

f	$func
"$extract"* $name
	$return	f(1, 1)
	$end

	$if	0
p	$proc
int*	$name	2
	$trace	$enclos\p()
	$note	requested int

p	$proc	$(3)
"$arrange"* $name
__SUBFIELDS $set	p(1)-__INDEX
	$do	__SUBFIELDS<1,	$return
?	$do	__SUBFIELDS-1,"p(1, ?+__INDEX)"***	+	0
	$if	p(2, 1)="="

	$plist	6
"p(1, __SUBFIELDS+__INDEX)"***	+	$extract(p(3, 1)p(4, 1)p(5, 1)p(6, 1)p(7, 1))
	$plist

__RANGE* $set	__RANGE+p()-2
__INDEX* $set	1
	$else
"p(1, __SUBFIELDS+__INDEX)"***	+	0
	$endif
	$end

__INDEX	$set	0
__RANGE	$do	p(),	$arrange	p(__RANGE) p(__RANGE+1, 1) p(__RANGE+2:1)

	$end
	$endif

.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is development and test material for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.       
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.       
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.                               
.                                               
                        


		$path		../def
		$include	rta.def
		$path		../language
		$include	stack.def
		$path

routine1        $head_near       params(left,	long			;
                                        right,	long)			;
									;
                                scalars(down,	int,	0		;
                                        up,	int,	2048//3-1)	;
									;
                                 xframe(sorting_buffer, 2048//3		;
					midpoint_cursor, int, 2048//3/2, fp, i)

.
.



                push, i         $$xframe, fp
                pop             fp
                push, i         $$frame, sp
                pop             sp

                lret            0


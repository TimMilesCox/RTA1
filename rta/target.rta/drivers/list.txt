MASMX 7r3A Build 12
3/drivers.msm
*EOF*
  :                            29 	$list
  :                            30 
  :                            31 	
  :                            32 $(66::,x)
  :                            33 ?	$set	1
42:000000                     +34 this_if i_f
42:000001                     +34 
42:000002                     +34 
42:000003                     +34 
42:000004                     +34 
42:000005                     +34 
42:000006                     +34 
42:000008                     +34 
42:00000A                     +34 
42:00000C                     +34 
42:00000E                     +34 
42:000010                     +34 
42:000012                     +34 
42:000014                     +34 
42:000016                     +34 
42:000018                     +34 
42:00001A                     +34 
42:00001C                     +34 
42:00001E                     +34 
42:000020                     +34 
42:000022                     +34 
42:000023                     +34 
42:000024                     +34 
42:000025                     +34 
42:000026                     +34 
42:000027                     +34 
42:000028                     +34 
42:000029                     +34 
42:00002A                     +34 
42:00002B                     +34 
42:00002C                     +34 
42:00002D                     +34 
42:00002E                     +34 
42:00002F                     +34 
42:000030                     +34 
42:000031                     +34 
42:000032                     +34 
42:000033                     +34 
42:000034                     +34 
42:000035                     +34 
42:000036                     +34 
42:000037                     +34 
42:000038                     +34 
42:000039                     +34 
42:00003A                     +34 
42:00003B                     +34 
42:00003C                     +34 
42:00003D                     +34 
42:00003E                     +34 
42:00003F                     +34 
42:000040                     +34 
42:000041                     +34 
42:000042                     +34 
42:000043                     +34 
42:000044                     +34 
42:000045                     +34 
42:000046                     +34 
42:000047                     +34 
  :                            35 __IF_SIZE	$set	$
  :                            36 
  :                            37 $(70::,fp)
  :                            38 descriptor	acw
  :                            39 
  :                            40 $(67::,y)
43:000000                     +41 rxq2		dq
43:000001                     +41 
  :                            42 
  :                            43 $(67::,y)
43:000000                     +44 xmit_list	dq
43:000001                     +44 
  :                            45 
  :                            46 $(66::,x)
42:000000                     +47 pool		mpool
42:000001                     +47 
42:000002                     +47 
42:000003                     +47 
42:000004                     +47 
42:000005                     +47 
42:000006                     +47 
42:000007                     +47 
42:000008                     +47 
42:000009                     +47 
42:00000A                     +47 
42:00000B                     +47 
42:00000C                     +47 
42:00000D                     +47 
42:00000E                     +47 
42:00000F                     +47 
42:000010                     +47 
42:000011                     +47 
42:000012                     +47 
42:000013                     +47 
42:000014                     +47 
42:000015                     +47 
42:000016                     +47 
42:000017                     +47 
42:000018                     +47 
42:000019                     +47 
42:00001A                     +47 
42:00001B                     +47 
42:00001C                     +47 
42:00001D                     +47 
42:00001E                     +47 
42:00001F                     +47 
42:000020                     +47 
42:000021                     +47 
42:000022                     +47 
42:000023                     +47 
42:000024                     +47 
42:000025                     +47 
42:000026                     +47 
42:000027                     +47 
42:000028                     +47 
42:000029                     +47 
42:00002A                     +47 
42:00002B                     +47 
42:00002C                     +47 
42:00002D                     +47 
42:00002E                     +47 
42:00002F                     +47 
42:000030                     +47 
42:000031                     +47 
42:000032                     +47 
42:000033                     +47 
42:000034                     +47 
42:000035                     +47 
42:000036                     +47 
42:000037                     +47 
42:000038                     +47 
42:000039                     +47 
42:00003A                     +47 
42:00003B                     +47 
42:00003C                     +47 
42:00003D                     +47 
42:00003E                     +47 
42:00003F                     +47 
42:000040                     +47 
42:000041                     +47 
42:000042                     +47 
42:000043                     +47 
42:000044                     +47 
42:000045                     +47 
42:000046                     +47 
42:000047                     +47 
42:000048                     +47 
42:000049                     +47 
42:00004A                     +47 
42:00004B                     +47 
42:00004C                     +47 
42:00004D                     +47 
42:00004E                     +47 
42:00004F                     +47 
42:000050                     +47 
42:000051                     +47 
42:000052                     +47 
42:000053                     +47 
42:000054                     +47 
42:000055                     +47 
42:000056                     +47 
42:000057                     +47 
42:000058                     +47 
42:000059                     +47 
42:00005A                     +47 
42:00005B                     +47 
42:00005C                     +47 
42:00005D                     +47 
42:00005E                     +47 
42:00005F                     +47 
42:000060                     +47 
42:000061                     +47 
42:000062                     +47 
42:000063                     +47 
42:000064                     +47 
42:000065                     +47 
42:000066                     +47 
42:000067                     +47 
42:000068                     +47 
42:000069                     +47 
42:00006A                     +47 
42:00006B                     +47 
42:00006C                     +47 
42:00006D                     +47 
42:00006E                     +47 
42:00006F                     +47 
42:000070                     +47 
42:000071                     +47 
42:000072                     +47 
42:000073                     +47 
42:000074                     +47 
42:000075                     +47 
42:000076                     +47 
42:000077                     +47 
42:000078                     +47 
42:000079                     +47 
42:00007A                     +47 
42:00007B                     +47 
42:00007C                     +47 
42:00007D                     +47 
42:00007E                     +47 
42:00007F                     +47 
42:000080                     +47 
42:000081                     +47 
42:000082                     +47 
42:000083                     +47 
42:000084                     +47 
42:000085                     +47 
42:000086                     +47 
42:000087                     +47 
42:000088                     +47 
42:000089                     +47 
42:00008A                     +47 
42:00008B                     +47 
42:00008C                     +47 
42:00008D                     +47 
42:00008E                     +47 
42:00008F                     +47 
42:000090                     +47 
42:000091                     +47 
42:000092                     +47 
42:000093                     +47 
42:000094                     +47 
42:000095                     +47 
42:000096                     +47 
42:000097                     +47 
42:000098                     +47 
42:000099                     +47 
42:00009A                     +47 
42:00009B                     +47 
42:00009C                     +47 
42:00009D                     +47 
42:00009E                     +47 
42:00009F                     +47 
42:0000A0                     +47 
42:0000A1                     +47 
42:0000A2                     +47 
42:0000A3                     +47 
42:0000A4                     +47 
42:0000A5                     +47 
42:0000A6                     +47 
42:0000A7                     +47 
42:0000A8                     +47 
42:0000A9                     +47 
42:0000AA                     +47 
42:0000AB                     +47 
42:0000AC                     +47 
42:0000AD                     +47 
42:0000AE                     +47 
42:0000AF                     +47 
42:0000B0                     +47 
42:0000B1                     +47 
42:0000B2                     +47 
42:0000B3                     +47 
42:0000B4                     +47 
42:0000B5                     +47 
42:0000B6                     +47 
42:0000B7                     +47 
42:0000B8                     +47 
42:0000B9                     +47 
42:0000BA                     +47 
42:0000BB                     +47 
42:0000BC                     +47 
42:0000BD                     +47 
42:0000BE                     +47 
42:0000BF                     +47 
42:0000C0                     +47 
42:0000C1                     +47 
42:0000C2                     +47 
42:0000C3                     +47 
42:0000C4                     +47 
42:0000C5                     +47 
42:0000C6                     +47 
42:0000C7                     +47 
42:0000C8                     +47 
42:0000C9                     +47 
42:0000CA                     +47 
42:0000CB                     +47 
42:0000CC                     +47 
42:0000CD                     +47 
42:0000CE                     +47 
42:0000CF                     +47 
42:0000D0                     +47 
42:0000D1                     +47 
42:0000D2                     +47 
42:0000D3                     +47 
42:0000D4                     +47 
42:0000D5                     +47 
42:0000D6                     +47 
42:0000D7                     +47 
42:0000D8                     +47 
42:0000D9                     +47 
42:0000DA                     +47 
42:0000DB                     +47 
42:0000DC                     +47 
42:0000DD                     +47 
42:0000DE                     +47 
42:0000DF                     +47 
42:0000E0                     +47 
42:0000E1                     +47 
42:0000E2                     +47 
42:0000E3                     +47 
42:0000E4                     +47 
42:0000E5                     +47 
42:0000E6                     +47 
42:0000E7                     +47 
42:0000E8                     +47 
42:0000E9                     +47 
42:0000EA                     +47 
42:0000EB                     +47 
42:0000EC                     +47 
42:0000ED                     +47 
42:0000EE                     +47 
42:0000EF                     +47 
42:0000F0                     +47 
42:0000F1                     +47 
42:0000F2                     +47 
42:0000F3                     +47 
42:0000F4                     +47 
42:0000F5                     +47 
42:0000F6                     +47 
42:0000F7                     +47 
42:0000F8                     +47 
42:0000F9                     +47 
42:0000FA                     +47 
42:0000FB                     +47 
42:0000FC                     +47 
42:0000FD                     +47 
42:0000FE                     +47 
42:0000FF                     +47 
42:000100                     +47 
42:000101                     +47 
42:000102                     +47 
  :                            48 
  :                            49 $(66::, x)
  :                            50 nframe  	netframe
  :                            51 
  :                            52 $(66::, x)
42:000000                     +53 ro		route
42:000001                     +53 
42:000002                     +53 
42:000003                     +53 
42:000005                     +53 
42:000007                     +53 
42:000009                     +53 
  :                            54 
  :                            55 $(66::, x)
42:000000                     +56 transmission	tcp_connection
42:000001                     +56 
42:000002                     +56 
42:000003                     +56 
42:000004                     +56 
42:000005                     +56 
42:000006                     +56 
42:000008                     +56 
42:00000A                     +56 
42:00000C                     +56 
42:00000E                     +56 
42:000010                     +56 
42:000011                     +56 
42:000012                     +56 
42:000013                     +56 
42:000014                     +56 
42:000015                     +56 
42:000016                     +56 
42:000017                     +56 
  :                            57 
  :                            58 $(66::, x)	
42:000000                     +59 transfer	segment
42:000001                     +59 
42:000002                     +59 
42:000004                     +59 
42:000006                     +59 
42:000007                     +59 
42:000008                     +59 
42:000009                     +59 
42:00000A                     +59 
  :                            60 
  :                            61 $(66::, x)
42:000000                     +62 tlist		tbank
42:000001                     +62 
42:000002                     +62 
42:000003                     +62 
42:000004                     +62 
42:000005                     +62 
42:000006                     +62 
42:000007                     +62 
42:000008                     +62 
42:000009                     +62 
42:00000A                     +62 
42:00000B                     +62 
42:00000C                     +62 
42:00000D                     +62 
42:00000E                     +62 
42:00000F                     +62 
42:000010                     +62 
42:000011                     +62 
42:000012                     +62 
42:000013                     +62 
42:000014                     +62 
42:000015                     +62 
42:000016                     +62 
42:000017                     +62 
42:000018                     +62 
42:000019                     +62 
42:00001A                     +62 
42:00001B                     +62 
42:00001C                     +62 
42:00001D                     +62 
42:00001E                     +62 
42:00001F                     +62 
42:000020                     +62 
42:000021                     +62 
42:000022                     +62 
42:000023                     +62 
42:000024                     +62 
42:000025                     +62 
42:000026                     +62 
42:000027                     +62 
42:000028                     +62 
42:000029                     +62 
42:00002A                     +62 
42:00002B                     +62 
42:00002C                     +62 
42:00002D                     +62 
42:00002E                     +62 
42:000030                     +62 
42:000032                     +62 
42:000034                     +62 
42:000036                     +62 
42:000038                     +62 
42:000039                     +62 
42:00003A                     +62 
42:00003B                     +62 
42:00003C                     +62 
42:00003D                     +62 
42:00003E                     +62 
42:00003F                     +62 
42:000040                     +62 
42:000041                     +62 
42:000042                     +62 
42:000043                     +62 
42:000044                     +62 
42:000045                     +62 
42:000046                     +62 
42:000048                     +62 
42:00004A                     +62 
42:00004C                     +62 
42:00004E                     +62 
42:000050                     +62 
42:000051                     +62 
42:000052                     +62 
42:000053                     +62 
42:000054                     +62 
42:000055                     +62 
42:000056                     +62 
42:000057                     +62 
  :                            63 
  :                            64 $(0::DRIVERS_BANK1)
  :                            65 
00:004000 B60040              +66 "$rxtx_lo"*	$vector		rxtx_softwareloopback
00:004001 B6005B              +67 "$rxtx_ift1"*	$vector		ift1_rxtx
00:004002 B600D6              +68 "$initial_ift1"* $vector	start_ift1
00:004003 B600A7              +69 "$light_flight"* $vector	mplex_tx
  :                            70 . "$qo2_relay"*	$vector		output_relay
00:004004 B601B6              +71 if_dualport_txwrite* $vector    if_dportw
00:004005 B60199              +72 dlt_null*       $vector         ifw_dlt_null
00:004006 B601A2              +73 dlt_loop*       $vector         ifw_dlt_loop
00:004007 B601AB              +74 dlt_e10mb*      $vector         ifw_dlt_e10mb
00:004008 B601CB              +75 __ifconfig*	$vector		ifconfig
  :                            76 
00:004009 B60383              +77 arp_ether_reso* $vector         ethernet_arp:resolve
00:00400A B603BB              +78 arp_ether_xmit* $vector         ethernet_arp:xmit
00:00400B B6034C              +79 xarp_ethernet*  $vector         ethernet_arp:xarp
00:00400C B6036A              +80 arp_ether_rx*   $vector         ethernet_arp:arp_rx
  :                            81 
00:00400D B6016F              +82 xrelay_reset*	$vector		restart_device2	. restart_xrelay_interface
00:00400E B6025F              +83 __route_config*	$vector		route_insert
  :                            84 
00:00400F B602DE              +85 write_ifqlist*	$vector		q2txL_tail
  :                            86 . "$ift1_inband"*	$vector		write_ift1_direct
00:004010 B60295              +87 write_ifq*	$vector		q2if
  :                            88 
00:004011 B600DC              +89 __initial_ift2*	$vector		__ift2:initial
00:004012 B60104              +90 __rxtx_ift2*	$vector		__ift2:rxtx
00:004013 B600F3              +91 __ift2_align*	$vector		__ift2:restart_cursors
00:004014 B600EE              +92 __ift2_mirror*	$vector		__ift2:swap_initial
  :                            93 
00:004015 B602FE              +94 __buy6_bytes*	$vector		soc_data:buy6
00:004016 B60307              +95 __buy12_bytes*	$vector		soc_data:buy12
00:004017 B602C7              +96 write_ifqlist_head*	$vector	q2txL_head
00:004018 B60324              +97 __recheck*	$vector		recheck
  :                            98 
00:004019 B60342              +99 tx_mib_update*	$vector		mib_scope_update:variable48
  :                            100 
  :                            101 .	frame handling at interface
  :                            102 
00:00401A 3D0000              +103 	$do	48-$,	fret	0
00:00401B 3D0000              +103 
00:00401C 3D0000              +103 
00:00401D 3D0000              +103 
00:00401E 3D0000              +103 
00:00401F 3D0000              +103 
00:004020 3D0000              +103 
00:004021 3D0000              +103 
00:004022 3D0000              +103 
00:004023 3D0000              +103 
00:004024 3D0000              +103 
00:004025 3D0000              +103 
00:004026 3D0000              +103 
00:004027 3D0000              +103 
00:004028 3D0000              +103 
00:004029 3D0000              +103 
00:00402A 3D0000              +103 
00:00402B 3D0000              +103 
00:00402C 3D0000              +103 
00:00402D 3D0000              +103 
00:00402E 3D0000              +103 
00:00402F 3D0000              +103 
  :                            104 
  :                            105 .	protocol stack extras
  :                            106 
  :                            107 	$if	HVSOCKET
00:004030 B60481              +108 hvsocket_storage* $vector       hvsocket:storage
00:004031 B60467              +109 hvsockets_bind* $vector         hvsocket:bind
00:004032 B604D3              +110 hvsocket_rx*	$vector		hvsocket:rx
00:004033 B604F2              +111 hvsocket_tx*	$vector		hvsocket:tx
00:004034 B60531              +112 hvsocket_readq*	$vector		hvsocket:readq
00:004035 B6053E              +113 connection_array* $vector	hvsocket:locate
00:004036 B60548              +114 hvsocket_xbind*	$vector		hvsocket:xbind
00:004037 B60507              +115 hvsocket_close*	$vector		hvsocket:close
00:004038 B60562              +116 hvsocket_write_rxq* $vector	hvsocket:write_rxq
00:004039 B6057D              +117 tcp_window*	$vector		window
  :                            118 	$endif
  :                            119 
  :                            120 
00:00403A B6058E              +121 tnet_callstring*	$vector	net_callstring
  :                            122 
00:00403B 3D0000              +123 	$do	64-$,	fret	0
00:00403C 3D0000              +123 
00:00403D 3D0000              +123 
00:00403E 3D0000              +123 
00:00403F 3D0000              +123 
  :                            124 
  :                            125 	$list		2
  :                            126: 	$include	irelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 .	the protocols allowed in here are only IPv4 and IPv6
  :                            41 .	the discriminator is the 4-bit version at the
  :                            42 .	start of the datagram
  :                            43 
  :                            44 .	until it's decided to have ip6 we'll just assume
  :                            45 .	software loopback output is ip4
  :                            46 
  :                            47 
  :                            48 rxtx_softwareloopback
00:004040 3D0000              +49 	fret	0
  :                            50 
  :                            51 			. x -> interface
  :                            52 
00:004041 60A031              +53 	la	this_if:oq:head
00:004042 C6005A              +54 	jza	rxxx_software_loopback
  :                            55 
00:004043 58C001              +56 	ly	descriptor:frame, a
  :                            57 	
00:004044 6CB00D              +58 	lb, i	nframe:stack_index, y
00:004045 60B006              +59 	la	nframe:llh:generic:protocol, y
00:004046 C8D000              +60 	ab	0, b
  :                            61 
00:004047 58D001              +62 	ly	1, b
00:004048 40D000              +63 	lr	0, b	
  :                            64 
00:004049 F80002              +65 	push	x
00:00404A FF0597              +66 	call	(frame_to_protocol)
00:00404B 380002              +67 	pop	x
  :                            68 
00:00404C 3E02AB              +69 	lcal	readifq
  :                            70 
00:00404D F8000B              +71         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
00:00404E 2FA00F              +71 
00:00404F 5E0051              +71 
00:004050 17A00E              +71 
00:004051 FD0001              +72         MIB_ICOUNT48    this_if:outpackets
00:004052 2FA013              +72 
00:004053 5E0055              +72 
00:004054 17A012              +72 
  :                            73 	
00:004055 78C003              +74 	tp	descriptor:bytes, a
00:004056 B60040              +75 	j	rxtx_softwareloopback
  :                            76 
00:004057 502180              +77 	lx	rx_buffers
00:004058 FF0598              +78 	call	(if_sell1)		. this is just until something wants
  :                            79 					. to read the datagram
  :                            80 
  :                            81 					. The sender must take TCP segments
  :                            82 					. off the ACK queue when they are ACKED
  :                            83 					. but leave the receiver to pool them
  :                            84 
  :                            85 					. UDPgrams simply pooled by the receiver
  :                            86 					. after consume
  :                            87 
  :                            88 					. might as well turn the retain bit off
  :                            89 					. at this point so it won't confuse TCP
  :                            90 					. receive. And to signal the sender not
  :                            91 					. to pool the buffer on ACK, just to
  :                            92 					. unlink it from the ACK queue
  :                            93 
00:004059 B60040              +94 	j	rxtx_softwareloopback
  :                            95 
  :                            96 rxxx_software_loopback
00:00405A 3D0000              +97 	fret	0
  :                            98 
  :                            127: 	$include	xrelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 IFT1_RX_BASE	$equ	32
  :                            41 IFT1_TX_BASE	$equ	32
  :                            42 
  :                            43 IFT1_RPAGEW	$equ	1024
  :                            44 IFT1_TPAGEW	$equ	1024
  :                            45 
  :                            46 IFT1_RPAGES	$equ	128
  :                            47 IFT1_TPAGES	$equ	128
  :                            48 
  :                            49 
  :                            50 $(67::, y)
  :                            51 networkframe	delivery
  :                            52 
  :                            53 
  :                            54 $(0)
  :                            55 
  :                            56 ift1_rxtx
00:00405B 60A044              +57 	la	this_if:ift1:base_rx
00:00405C 750060              +58 	ii	XBASE$32
00:00405D 58A045              +59 	ly	this_if:ift1:rx_cursor
  :                            60 	
00:00405E CFB000              +61 frames?	dl	networkframe:flag	. 2nd word in B is total frame length
  :                            62 				. this may include the length of
  :                            63 				. a 2-byte protocol family tag
  :                            64 				. appended to the front of a dgram
  :                            65 				. which has no MAC header
  :                            66 
00:00405F A00599              +67 	and	(008000)
  :                            68 
00:004060 C60082              +69 	jza	next_interface	. capture not complete
  :                            70 
00:004061 60B002              +71 	la	networkframe:ll_hl	. link layer header length
  :                            72 
00:004062 F80005              +73 	MIB_ACOUNT48	this_if:inoctets	b
00:004063 2FA00D              +73 
00:004064 5E0066              +73 
00:004065 17A00C              +73 
00:004066 FD0001              +74 	MIB_ICOUNT48	this_if:inpackets
00:004067 2FA011              +74 
00:004068 5E006A              +74 
00:004069 17A010              +74 
  :                            75 
00:00406A 18000E              +76 	sy	fp
00:00406B 5CB005              +77 	ly	networkframe:frame,,i	. offset descriptor->frame
  :                            78 
00:00406C D80004              +79 	anb	a		. net datagram length
00:00406D 5E007B              +80 	jnc	frame_complete	. less than llh length!
00:00406E 400005              +81 	lr	b		. datagram length bytes
  :                            82 
  :                            83 				. the protocol family tag
  :                            84 				. is mostly the word
  :                            85 				. before the datagram
  :                            86 
  :                            87 				. either because there is
  :                            88 				. a DIX MAC header, or
  :                            89 				. a similar encapsulation
00:00406F 64C001              +90 	la	1,a,i		. round up
00:004070 060001              +91 	sar	1		. byte count to word count
  :                            92 				. only two bytes per word
  :                            93 				. in packet data
  :                            94 
  :                            95 				. MAC header / TAG must
  :                            96 				. be even # bytes
  :                            97 
00:004071 880004              +98 	ay	a
  :                            99 
00:004072 60E004              +100 	la	networkframe:protocol, fp		. load the protocol TAG
  :                            101 
  :                            102 
00:004073 F8000E              +103 	push	fp
00:004074 F80002              +104 	push	x
  :                            105 
00:004075 50E003              +106 	lx	networkframe:interface, fp	. whatever sort of frame this is
[+0002]10
00:004076 850000              +107 	ax	$if2p,,xi
00:004077 50A000              +108 	lx	0, x			. it goes to this logical interface
  :                            109 
00:004078 FF0597              +110 	call	(frame_to_protocol)
  :                            111 
00:004079 380002              +112 	dpop	x
00:00407A 380003              +112 
  :                            113 
  :                            114 frame_complete
00:00407B 30B000              +115 	z	networkframe:flag
00:00407C 8D0400              +116 	ay, xi	RPAGEW
00:00407D 600003              +117 	la	y
  :                            118 
  :                            119 
  :                            120 	$if	RPAGEW*RPAGES>262144
  :                            121 
  :                            122 	ana	(RX_BASE+1*/18:s)
  :                            123 	jnc	frames?
  :                            124 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            125 
  :                            126 	la	base_rx
  :                            127 	aa, xi	64
  :                            128 
  :                            129 	lk	(03FFFC0)
  :                            130 	mta	(RPAGEW*RPAGES/*18-6:s)
  :                            131 	j	$+2
  :                            132 	and	(0C0003F)
  :                            133 	sa	base_rx
  :                            134 	sabr	RX_BASE
  :                            135 	
  :                            136 	$else
  :                            137 
00:00407E D0059A              +138 	ana	(RX_BASE*/18++RPAGEW*RPAGES:s)
00:00407F 5E005E              +139 	jnc	frames?
00:004080 58059B              +140 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            141 
  :                            142 	$endif
  :                            143 
00:004081 B6005E              +144 	j	frames?
  :                            145 	
  :                            146 next_interface
00:004082 18A045              +147 	sy	this_if:ift1:rx_cursor
  :                            148 
  :                            149 
  :                            150 txq_ift1_relay
00:004083 CFA046              +151 	dl	this_if:ift1:base_tx, x
00:004084 750060              +152 	ii	XBASE$32
00:004085 60A004              +153 	la	this_if:mtu, x
00:004086 200011              +154 	sa	MTU
  :                            155 
00:004087 28000E              +156 	sb	fp
  :                            157 
  :                            158 txq_ift1_otraffic?		
00:004088 70E000              +159 	tz	networkframe:flag, fp	. assure an interface slot
00:004089 B600A6              +160 	j	txq_next_interface	. not yet, next device array
  :                            161 
  :                            162 
00:00408A 3E02AB              +163 	lcal	readifq			. dequeue a TX frame
00:00408B C60097              +164 	jza	txq_next_queue		. from default socket buffer pool
00:00408C F80004              +165 	push	a			. completely detach descriptor from queue before
  :                            166 
00:00408D 3E00A8              +167 	lcal	txq_ift1_oframe
00:00408E 3E00C6              +168 	lcal	txq_ift1_next_frame
  :                            169 
00:00408F 380004              +170 	pop	a			. recover descriptor
  :                            171 
00:004090 78C003              +172 	tp	descriptor:bytes, a
00:004091 B60088              +173 	j	txq_ift1_otraffic?
  :                            174 
00:004092 F80002              +175 	push	x
00:004093 502181              +176 	lx	tx_buffers
00:004094 FF0598              +177 	call	(if_sell1)
00:004095 380002              +178 	pop	x
  :                            179 
00:004096 B60088              +180 	j	txq_ift1_otraffic?
  :                            181 
  :                            182 txq_next_queue				. always an interface slot
  :                            183 					. free when arriving here
  :                            184 	$if	HVSOCKET
  :                            185 
00:004097 3E02B7              +186 	lcal	rqtxL			. dequeue a TX frame
00:004098 C600A6              +187 	jza	txq_next_interface	. if there is one
00:004099 F80004              +188 	push	a
00:00409A 3E00A8              +189 	lcal	txq_ift1_oframe
00:00409B 3E00C6              +190 	lcal	txq_ift1_next_frame
00:00409C 380004              +191 	pop	a
00:00409D 78C003              +192 	tp	descriptor:bytes, a	. protocol wants to keep buffer?
00:00409E B600A3              +193 	j	txq_next_if_space?	. yes
00:00409F F80002              +194 	push	x
00:0040A0 50859C              +195 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:0040A1 FF0598              +196 	call	(if_sell1)
00:0040A2 380002              +197 	pop	x
  :                            198 
  :                            199 txq_next_if_space?
00:0040A3 70E000              +200 	tz	networkframe:flag, fp	. is another interface slot free?
00:0040A4 B600A6              +201 	j	txq_next_interface	. if not
00:0040A5 B60097              +202 	j	txq_next_queue		. but if so dequeue another TX frame
  :                            203 
  :                            204 	$endif	. HVSOCKET
  :                            205 
  :                            206 txq_next_interface
  :                            207 
00:0040A6 3D0000              +208 	fret	0
  :                            209 
  :                            210 mplex_tx				. just in case
00:0040A7 3D0000              +211 	fret	0			. a call is made by mistake
  :                            212 
  :                            213 
  :                            214 txq_ift1_oframe
  :                            215 				
00:0040A8 68C002              +216 	lb	descriptor:i_f, a	. translate RTA  interface number to osserv interface number
  :                            217 
00:0040A9 CDFFFE              +218 	ab	-2,,xi			. xlate RTA1 i_f:id to trunk i_f:i_d in frame descriptor
00:0040AA AE00AF              +219 	jpb	txq_ift1_oframe_ahead	. ift2 sometimes loses this id. mark it for repeat route / send
00:0040AB 75005F              +220 	$do	1,	ii	GUARD$
00:0040AC 68C001              +221 	lb	descriptor:frame, a	. mark it transmitted
00:0040AD 30D00D              +222 	z	nframe:stack_index, b	. so it may be retransmitted
00:0040AE 350001              +223 	lret	1			. skip call to update interface buffer pointer
  :                            224 
  :                            225 txq_ift1_oframe_ahead 
00:0040AF 28E003              +226 	sb	networkframe:interface, fp
  :                            227 
00:0040B0 60C001              +228 	la	descriptor:frame, a	. transfer protocol tag to interface buffer header
  :                            229 
00:0040B1 F8C007              +230 	push	nframe:frame_axw(1):bytes, a
00:0040B2 38E002              +231 	pop	networkframe:ll_hl, fp
  :                            232 
00:0040B3 F8C006              +233 	push	nframe:llh:generic:protocol, a
00:0040B4 38E004              +234 	pop	networkframe:protocol, fp	. leaving frame pointer in a
  :                            235 
00:0040B5 F80002              +236 	push	x				. save interface pointer
00:0040B6 54E005              +237 	lx	networkframe:frame, fp, i	. write pointer in interface slot
00:0040B7 FF059D              +238 	call	(if_dualport_txwrite)
00:0040B8 380002              +239 	pop	x				. retrieve  interface pointer
  :                            240 
00:0040B9 F8000B              +241 	push	TX_DATAGRAML		. release interface buffer for transmission
00:0040BA 38E001              +242 	pop	networkframe:frame_length, fp
00:0040BB F80599              +243 	push	(008000)
00:0040BC 38E000              +244 	pop	networkframe:flag, fp
  :                            245 
00:0040BD F8000B              +246         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
00:0040BE 2FA00F              +246 
00:0040BF 5E00C1              +246 
00:0040C0 17A00E              +246 
00:0040C1 FD0001              +247         MIB_ICOUNT48    this_if:outpackets
00:0040C2 2FA013              +247 
00:0040C3 5E00C5              +247 
00:0040C4 17A012              +247 
  :                            248 
  :                            249 txq_ift1_2x
00:0040C5 350000              +250 	lret	0
  :                            251 
  :                            252 txq_ift1_next_frame
00:0040C6 6D0400              +253 	lb, xi	IFT1_TPAGEW
00:0040C7 C8000E              +254 	ab	fp
00:0040C8 A8059E              +255 	andB	(IFT1_TPAGES*IFT1_TPAGEW-IFT1_TPAGEW:s)
00:0040C9 98059A              +256 	orB	(IFT1_TX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
  :                            257 	
00:0040CA 28000E              +258 	sb	fp
00:0040CB 28A047              +259 	sb	this_if:ift1:tx_cursor, x
00:0040CC 350000              +260 	lret	0
  :                            261 
  :                            262 rxq_ift1_next_frame
00:0040CD 5D0400              +263 	ly, xi	IFT1_RPAGEW
00:0040CE 88000E              +264 	ay	fp
00:0040CF 680003              +265 	lb	y
00:0040D0 D8059A              +266 	anb	(IFT1_RX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
00:0040D1 5E00D3              +267 	jnc	$+2
00:0040D2 58059B              +268 	ly	(IFT1_RX_BASE*/18:s)
00:0040D3 18000E              +269 	sy	fp
00:0040D4 18A045              +270 	sy	this_if:ift1:rx_cursor, x
00:0040D5 350000              +271 	lret	0
  :                            272 
  :                            273 start_ift1
00:0040D6 20A001              +274 	sa	this_if:flags
00:0040D7 68059F              +275 	lb	(0400000)
00:0040D8 980003              +276 	orB	y
00:0040D9 28A044              +277 	sb	this_if:ift1:base_rx
00:0040DA 28A046              +278 	sb	this_if:ift1:base_tx
00:0040DB 3D0000              +279 	fret	0
  :                            280 
  :                            281 .	called only on system restart
  :                            282 .	so no settings are saved
  :                            283 .	requests external interface service to restart
  :                            284 .	to match automatic resynchronisation at this end
  :                            285 
  :                            286 .	it's the only time a CONFIGURATION_PROTOCOL frame is output
  :                            287 .	so it doesn't need much detail
  :                            288 
  :                            128: 	$include	ift2
  :                            1 .	vector name __initial_ift2
  :                            2 
  :                            3 __ift2	$tree
  :                            4 
00:0040DC 20A001              +5 initial	sa	this_if:flags
00:0040DD 64C001              +6 	la	1, a, i			. change high index 256K block
00:0040DE 260006              +7 	sal	6			.  -> I / F buffer page limit
00:0040DF 900003              +8 	or	y			. add device index
00:0040E0 90059F              +9 	or	(0400000)
00:0040E1 20A043              +10 	sa	this_if:ift1:tx_limit	. switch the interface on
  :                            11 					. this is also page high index
  :                            12 					. TX side
  :                            13 
00:0040E2 68059B              +14 	lb	(32*/18s)
  :                            15 
00:0040E3 060001              +16 	sar	1			. halve banks #
00:0040E4 A005A0              +17 	and	(01FFFC0)					
00:0040E5 900003              +18 	or	y
00:0040E6 90059F              +19 	or	(0400000)
00:0040E7 C7A046              +20 	ds	this_if:ift1:base_tx	. TX restart is RX limit
00:0040E8 20A042              +21 	sa	this_if:ift1:tx_restart
00:0040E9 20A041              +22 	sa	this_if:ift1:rx_limit	. TX limit is this_if:
00:0040EA A005A1              +23 	and	(040003F)
00:0040EB C7A044              +24 	ds	this_if:ift1:base_rx
00:0040EC 20A040              +25 	sa	this_if:ift1:rx_restart
  :                            26 
00:0040ED 3D0000              +27 	fret	0
  :                            28 
  :                            29 swap_initial				. mirror the trunk TX / RX
[+0003]10
00:0040EE 850000              +30 	ax	$if0p,,xi
00:0040EF 50A000              +31 	lx	0, x
  :                            32 
00:0040F0 3E00F7              +33 	lcal	swap_around
00:0040F1 3E00FE              +34 	lcal	rewind
00:0040F2 3D0000              +35 	fret	0
  :                            36 
  :                            37 restart_cursors
[+0003]10
00:0040F3 850000              +38 	ax	$if0p,,xi
00:0040F4 50A000              +39 	lx	0, x
  :                            40 
00:0040F5 3E00FE              +41 	lcal	rewind
00:0040F6 3D0000              +42 	fret	0
  :                            43 
  :                            44 swap_around
00:0040F7 9FA040              +45 	dpush	this_if:ift1:rx_restart
00:0040F8 9FA042              +46 	dpush	this_if:ift1:tx_restart
00:0040F9 87A040              +47 	qpop	this_if:ift1:rx_restart
  :                            48 
00:0040FA 9FA044              +49 	dpush	this_if:ift1:base_rx
00:0040FB 9FA046              +50 	dpush	this_if:ift1:base_tx
00:0040FC 87A044              +51 	qpop	this_if:ift1:base_rx
00:0040FD 350000              +52 	lret	0
  :                            53 
00:0040FE 68059B              +54 rewind	lb	(32*/18s)
00:0040FF 60A040              +55 	la	this_if:ift1:rx_restart
00:004100 C7A044              +56 	ds	this_if:ift1:base_rx
00:004101 60A042              +57 	la	this_if:ift1:tx_restart
00:004102 C7A046              +58 	ds	this_if:ift1:base_tx
00:004103 350000              +59 	lret	0	
  :                            60 
00:004104 CFA044              +61 rxtx	dl	this_if:ift1:base_rx
00:004105 750060              +62 	ii	XBASE$32
00:004106 580005              +63 	ly	b
  :                            64 
  :                            65 rx_next_page
00:004107 CFB000              +66 	dl	networkframe:flag
00:004108 C60126              +67 	jza	tx1?
  :                            68 
00:004109 F80005              +69 	MIB_ACOUNT48	this_if:inoctets	b
00:00410A 2FA00D              +69 
00:00410B 5E010D              +69 
00:00410C 17A00C              +69 
00:00410D FD0001              +70 	MIB_ICOUNT48	this_if:inpackets
00:00410E 2FA011              +70 
00:00410F 5E0111              +70 
00:004110 17A010              +70 
  :                            71 
00:004111 60B002              +72 	la	networkframe:ll_hl
  :                            73 
00:004112 18000E              +74 	sy	fp
00:004113 5CB005              +75 	ly	networkframe:frame,,i	. -> frame from network
00:004114 D80004              +76 	anb	a			. datagram length without link header
  :                            77 
00:004115 5E0123              +78 	jnc	frame_complete		. frame size < link header size
00:004116 400005              +79 	lr	b			. datagram net bytes = frame minus llh
00:004117 64C001              +80 	la	1, a, i			. advance pointer to datagram
00:004118 060001              +81 	sar	1			. add llh bytes / 2
00:004119 880004              +82 	ay	a
  :                            83 
00:00411A 60E004              +84 	la	networkframe:protocol, fp
00:00411B F8000E              +85 	push	fp			. frame in interface buffer
00:00411C F80002              +86 	push	x			. trunk multiplexing interface named in call
  :                            87 	
00:00411D 50E003              +88 	lx	networkframe:interface, fp	. RX interface this frame
[+0002]10
00:00411E 850000              +89 	ax	$if2p,,xi
00:00411F 50A000              +90 	lx	0, x
  :                            91 
00:004120 FF0597              +92 	call	(frame_to_protocol)
00:004121 380002              +93 	pop	x			. y gets pointer from saved fp
00:004122 38000E              +94 	pop	fp
  :                            95 frame_complete
00:004123 30E000              +96 	z	networkframe:flag, fp
  :                            97 
00:004124 3E014A              +98 	lcal	update_rx_cursor
  :                            99 
00:004125 B60107              +100 	j	rx_next_page
  :                            101 
00:004126 CFA046              +102 tx1?	dl	this_if:ift1:base_tx
00:004127 750060              +103 	ii	XBASE$32
00:004128 60A004              +104 	la	this_if:mtu, x
00:004129 200011              +105 	sa	MTU
00:00412A 28000E              +106 	sb	fp
  :                            107 
  :                            108 tx_space1?
00:00412B 70E000              +109 	tz	networkframe:flag, fp	. outgoing slot clear to write?
00:00412C B60149              +110 	j	txz
  :                            111 
  :                            112 tx_data1?
00:00412D 3E02AB              +113 	lcal	readifq			. anything on default output queue?
00:00412E C6013A              +114 	jza	tx_data2?		. separate descriptor from queue
  :                            115 
00:00412F F80004              +116 	push	a
  :                            117 
00:004130 3E00A8              +118 	lcal	txq_ift1_oframe
00:004131 3E015C              +119 	lcal	update_tx_cursor	
  :                            120 
00:004132 380004              +121 	pop	a			. recover descriptor
00:004133 78C003              +122 	tp	descriptor:bytes, a
00:004134 B6012B              +123 	j	tx_space1?
  :                            124 
00:004135 F80002              +125 	push	x
00:004136 502181              +126 	lx	tx_buffers
00:004137 FF0598              +127 	call	(if_sell1)
00:004138 380002              +128 	pop	x
  :                            129 
00:004139 B6012B              +130 	j	tx_space1?
  :                            131 
  :                            132 tx_data2?				. there is always a free interface slot
  :                            133 					. when arriving here
00:00413A 3E02B7              +134 	lcal	rqtxL			. dequeue a TX frame
00:00413B C60149              +135 	jza	txz			. if there are any
00:00413C F80004              +136 	push	a
00:00413D 3E00A8              +137 	lcal	txq_ift1_oframe
00:00413E 3E015C              +138 	lcal	update_tx_cursor
00:00413F 380004              +139 	pop	a
00:004140 78C003              +140 	tp	descriptor:bytes, a	. does protocol want to keep the buffer?
00:004141 B60146              +141 	j	tx_space2?		. yes
  :                            142 
00:004142 F80002              +143 	push	x			. no
00:004143 50859C              +144 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:004144 FF0598              +145 	call	(if_sell1)
00:004145 380002              +146 	pop	x
  :                            147 
  :                            148 tx_space2?
00:004146 70E000              +149 	tz	networkframe:flag, fp	. is the next I/F slot free?
00:004147 B60149              +150 	j	txz			. no
  :                            151 
  :                            152 	$if	THRESHOLD_QUANTUM_MS_IFT2
  :                            153 	lcal	if2media?
  :                            154 	j	txz
  :                            155 	$endif
  :                            156 
00:004148 B6013A              +157 	j	tx_data2?
  :                            158 
00:004149 3D0000              +159 txz	fret	0				. because that's used to test
  :                            160 						. if already in chain
  :                            161 update_rx_cursor
00:00414A 5D0400              +162 	ly	RPAGEW,,xi
00:00414B 88000E              +163 	ay	fp
00:00414C 4005A2              +164 	lr	(33*/18s)
00:00414D FE0151              +165 	jyge	update_rx_page
00:00414E 18000E              +166 	sy	fp
00:00414F 18A045              +167 	sy	this_if:ift1:rx_cursor
00:004150 350000              +168 	lret	0
  :                            169 
  :                            170 update_rx_page
00:004151 60A044              +171 	la	this_if:ift1:base_rx
00:004152 C50040              +172 	aa	1*/6,,xi
00:004153 680004              +173 	anu	this_if:ift1:rx_limit	. upper limit rx pages
00:004154 D8A041              +173 
00:004155 5E0157              +174 	jnc	update_rx_page_store
00:004156 60A040              +175 	la	this_if:ift1:rx_restart
  :                            176 
  :                            177 update_rx_page_store
00:004157 68059B              +178 	lb	(32*/18s)
00:004158 580005              +179 	ly	b
00:004159 C7A044              +180 	ds	this_if:ift1:base_rx
00:00415A 750060              +181 	ii	XBASE$32
00:00415B 350000              +182 	lret	0
  :                            183 
  :                            184 update_tx_cursor
00:00415C 5D0400              +185 	ly	RPAGEW,,xi
00:00415D 88000E              +186 	ay	fp
00:00415E 4005A2              +187 	lr	(33*/18s)
00:00415F 18000E              +188 	sy	fp
00:004160 FE0163              +189 	jyge	update_tx_cursor_next_page
00:004161 18A047              +190 	sy	this_if:ift1:tx_cursor, x
00:004162 350000              +191 	lret	0	
  :                            192 
  :                            193 update_tx_cursor_next_page
00:004163 60A046              +194 	la	this_if:ift1:base_tx
00:004164 C50040              +195 	aa	1*/6,,xi
00:004165 680004              +196 	anu	this_if:ift1:tx_limit	. upper limit pages 262144 words
00:004166 D8A043              +196 
00:004167 5E0169              +197 	jnc	update_tx_cursor_store
00:004168 60A042              +198 	la	this_if:ift1:tx_restart
  :                            199 
  :                            200 update_tx_cursor_store
00:004169 68059B              +201 	lb	(32*/18s)
00:00416A C7A046              +202 	ds	this_if:ift1:base_tx
00:00416B 28000E              +203 	sb	fp
00:00416C 750060              +204 	ii	XBASE$32
00:00416D 580005              +205 	ly	b
00:00416E 350000              +206 	lret	0
  :                            207 	
  :                            208 	$root
  :                            209 
  :                            129: 	$include	restart2
  :                            1 
  :                            2 restart_device2	$tree
00:00416F 3E0174              +3 	lcal	restart_iftxx		. whichever type it is
00:004170 CF05A3              +4 	dl	(CHILLDOWN++LOCKSTEP, 5000000d)
00:004171 1C0067              +5 	outB	chill$down
00:004172 140066              +6 	outA	INDICATION$		. wait 5 seconds
00:004173 3D0000              +7 	fret	0			. so operator can see
  :                            8 					. if it's the same crash cyclimg
  :                            9 
  :                            10 restart_iftxx
  :                            11 
  :                            12 .	change all output frame headers in device 2
  :                            13 .	to configuration protocol trunk restart	
  :                            14 .	whether device 2 is I / F type 1 or 2
  :                            15 .	this is the only configuration protocol PDU
  :                            16 .	which goes outward from RTA1 machine toward I / F
  :                            17 
00:004174 040082              +18 	inA	128+2
00:004175 4805A5              +19 	lk	(03FFFFF)
00:004176 AF05A6              +20 	mta	(0)			. banks 0 = 1 = iftype1 ?
00:004177 B6017E              +21 	j	iftype2			. no
  :                            22 					. yes, set high half of bank
00:004178 6005A7              +23 	la	(0400002)		. device 2 : bank 0
00:004179 340020              +24 	sabr	32
00:00417A 5005A8              +25 	lx	(32*/18++03FC00s)	. highest frame
00:00417B 40059A              +26 	lr	(32*/18++020000s)	. stop halfway down one bank
00:00417C 3E018B              +27 	lcal	write_restarts
  :                            28 
00:00417D 350000              +29 	lret	0
  :                            30 					. set higher complete banks
00:00417E 6CC000              +31 iftype2	lb	0, a, i			. or a_x (called from ISR)
00:00417F 0E0001              +32 	sbr	1			. / 2 rounded down
00:004180 A805A9              +33 	andB	(01FFFFF)
00:004181 260006              +34 	sal	6			. bank high index	
00:004182 9005A7              +35 	or	(0400002)
  :                            36 
  :                            37 next_bank_down
00:004183 340020              +38 	sabr	32
00:004184 5005A8              +39 	lx	(32*/18++03FC00s)		. highest frame in bank
00:004185 40059B              +40 	lr	(32*/18s)		. stop after all frames in bank
  :                            41 
00:004186 3E018B              +42 	lcal	write_restarts
  :                            43 
00:004187 C5FFC0              +44 	aa	-64,,xi			. down a bank
00:004188 CDFFFF              +45 	ab	-1,,xi			. his goes negative
00:004189 AE0183              +46 	jpb	next_bank_down		. after half the banks
00:00418A 350000              +47 	lret	0			. = the output buffers
  :                            48 
  :                            49 write_restarts
00:00418B 9F0084              +50 	dpush	a_x
00:00418C 4F05AA              +51 	ql	(008000, 0, 0, 0q)
00:00418D 4805AE              +52 	lk	(IFCONFIG)
  :                            53 
  :                            54 write_restart
00:00418E 08A004              +55 	sk	4, x			. protocol discriminator
00:00418F 47A000              +56 	qs	0, x			. 
00:004190 85FC00              +57 	ax	-1024,,xi		. down 1 frame
00:004191 F6018E              +58 	jxge	write_restart
  :                            59 
00:004192 380084              +60 	dpop	a_x
00:004193 380085              +60 
00:004194 350000              +61 	lret	0
  :                            62 
  :                            63 	$root
  :                            130: 	$include	lladdres
  :                            1 					. axw in fp
  :                            2 ifw_llh_space				. bytes size of link header in a
  :                            3 .	lb	TX_FRAME		. prepare the llh space / descriptor
00:004195 FDFFFA              +4 	push	-6,,xi
00:004196 38D00D              +5 	pop	nframe:stack_index, b
00:004197 C7D007              +6 	ds	nframe:frame_axw(1),b
00:004198 350000              +7 	lret	0
  :                            8 
  :                            9 ifw_dlt_null
00:004199 F80004              +10 	push	a
00:00419A 68C001              +11 	lb	descriptor:frame, a
00:00419B 650004              +12 	la, xi	4
00:00419C 3E0195              +13 	lcal	ifw_llh_space
00:00419D 650200              +14 	la, xi	0200
00:00419E 20D000              +15 	sa	0, b
00:00419F 30D001              +16 	z	1, b
00:0041A0 380004              +17 	pop	a
00:0041A1 3D0000              +18 	fret	0
  :                            19 
  :                            20 ifw_dlt_loop
00:0041A2 F80004              +21 	push	a
00:0041A3 68C001              +22 	lb	descriptor:frame, a
00:0041A4 650004              +23 	la, xi	4
00:0041A5 3E0195              +24 	lcal	ifw_llh_space
00:0041A6 650002              +25 	la, xi	2
00:0041A7 30D000              +26 	z	0, b
00:0041A8 20D001              +27 	sa	1, b
00:0041A9 380004              +28 	pop	a
00:0041AA 3D0000              +29 	fret	0
  :                            30 
  :                            31 
  :                            32 ifw_dlt_e10mb			. generic handling already has
  :                            33 				. the resolved destination at the frame start
00:0041AB F80004              +34 	push	a		. and the protocol at word 6
00:0041AC 68C001              +35 	lb	descriptor:frame, a
00:0041AD 65000E              +36 	la, xi	14
00:0041AE 3E0195              +37 	lcal	ifw_llh_space
  :                            38 
00:0041AF F8A00A              +39 	push	this_if:physa+2
00:0041B0 9FA008              +40 	dpush	this_if:physa
00:0041B1 38D003              +41 	pop	nframe:llh:ethernet:from, b
00:0041B2 38D004              +42 	dpop	nframe:llh:ethernet:from+1, b
00:0041B3 38D005              +42 
00:0041B4 380004              +43 	pop	a
00:0041B5 3D0000              +44 	fret	0
  :                            45 
  :                            131: 	$include	dualport
  :                            1 
  :                            2 if_dportw	. vector name is if_dualport_txwrite
  :                            3 
00:0041B6 F80004              +4 	push	a
00:0041B7 30000B              +5         z       TX_DATAGRAML
00:0041B8 64C00D              +6         la, i   nframe:stack_index, a
  :                            7 
00:0041B9 68C000              +8         lb      0, a
00:0041BA C00005              +9         aa      b
  :                            10 
00:0041BB AE01C8              +11         jpb     if_osentq
  :                            12 
  :                            13 if_osendq
00:0041BC 9F0004              +14         dpush   a
00:0041BD 58C001              +15         ly      1, a
00:0041BE 60C000              +16         la      0, a
  :                            17 
00:0041BF C601C3              +18         jza	if_oblank
00:0041C0 F80004              +19         push    a
00:0041C1 2F000B              +20         popA    TX_DATAGRAML
  :                            21 
00:0041C2 FF05AF              +22         call	(if_tx_nocheck)
  :                            23 if_oblank
00:0041C3 380004              +24         dpop     a
00:0041C4 380005              +24 
00:0041C5 C50002              +25         aa, xi  2
00:0041C6 CD0002              +26         ab, xi  2
00:0041C7 EE01BC              +27         jnb     if_osendq
  :                            28 
  :                            29 if_osentq
00:0041C8 380004              +30 	pop	a
00:0041C9 30C00D              +31 	z	nframe:stack_index, a
00:0041CA 3D0000              +32 	fret	0
  :                            33 
  :                            132: 	$include	ifconfig
  :                            1 $(67::, y)
  :                            2 ifco	ifconfig_frame
  :                            3 
  :                            4 $(0)
  :                            5 ifconfig
00:0041CB 60B000              +6 	la	ifco:ifclass_llhl
00:0041CC 68B001              +7 	lb	ifco:oqif
00:0041CD 7C01CF              +8 	jdz	ixconfig
00:0041CE 3E01D4              +9 	lcal	ifconfigure
  :                            10 ixconfig
  :                            11 
  :                            12 	$if	HVSOCKET
00:0041CF 60B011              +13 	la	ifco:protocol_part:protocol
00:0041D0 B50006              +14 	xor	IPPROTO_TCP,,xi
00:0041D1 D601D3              +15 	jnza	izconfig
00:0041D2 3E024D              +16 	lcal	hvtraffic_configure
  :                            17 izconfig
  :                            18 	$endif
  :                            19 
00:0041D3 3D0000              +20 	fret	0
  :                            21 
  :                            22 ifconfigure
00:0041D4 F80002              +23 	push	x
00:0041D5 50A000              +24 	lx	this_if:id
00:0041D6 450008              +25 	lr	INTERFACES,,xi		. 2 + index must <= INTERFACES
00:0041D7 F60225              +26 	jxge	ixconfigure
00:0041D8 50F000              +27 	lx	0, sp
  :                            28 
00:0041D9 C60202              +29 	jza	if_setrelay		. default routine is already tabled
  :                            30 					. just set the relay destination
00:0041DA 4D00FF              +31 	lk	255,,xi
00:0041DB 160008              +32 	dsr	8
00:0041DC 0E0010              +33 	sbr	16
00:0041DD C7A039              +34 	ds	this_if:class		. and llhl
  :                            35 
00:0041DE AF05A6              +36 	mtane	(DLT_NULL)
00:0041DF B601E1              +36 
00:0041E0 B601E8              +37 	j	if_dlt_null
00:0041E1 AF05B0              +38 	mtane	(DLT_LOOP)
00:0041E2 B601E4              +38 
00:0041E3 B601ED              +39 	j	if_dlt_loop
00:0041E4 AF05B1              +40 	mtane	(DLT_E10MB)
00:0041E5 B601E7              +40 
00:0041E6 B601F2              +41 	j	if_dlt_e10mb
00:0041E7 B60225              +42 	j	ixconfigure
  :                            43 
  :                            44 if_dlt_null
00:0041E8 6507F0              +45 	la, xi	2048-10-4**-4
00:0041E9 20A004              +46 	sa	this_if:mtu
00:0041EA 4005B2              +47 	lr	(dlt_null)
00:0041EB 4F05B3              +48 	ql	(0:q)
00:0041EC B601FF              +49 	j	if_storecall_llh
  :                            50 if_dlt_loop
00:0041ED 6507F0              +51 	la, xi	2048-10-4**-4
00:0041EE 20A004              +52 	sa	this_if:mtu
00:0041EF 4005B7              +53 	lr	(dlt_loop)
00:0041F0 4F05B3              +54 	ql	(0:q)
00:0041F1 B601FF              +55 	j	if_storecall_llh
  :                            56 if_dlt_e10mb
00:0041F2 6505DC              +57         la, xi	1500
00:0041F3 20A004              +58 	sa	this_if:mtu
00:0041F4 CFB005              +59 	dl	ifco:phys_address	. store the link layer address
00:0041F5 C7A008              +60 	ds	this_if:physa		. in the interface block
00:0041F6 980004              +61 	orB	a			. is there any physical address?
00:0041F7 60B007              +62 	la	ifco:phys_address+2
00:0041F8 20A00A              +63 	sa	this_if:physa+2
00:0041F9 980004              +64 	orB	a
00:0041FA 480005              +65 	lk	b
00:0041FB 4005B8              +66 	lr	(dlt_e10mb)
  :                            67 
00:0041FC 4F05B3              +68 	ql	(0:q)			. zero address = ethernet-shaped loopback
  :                            69 					. with 0800 etype, as Linux emulator platform
00:0041FD 700001              +70 	tz	k			. broadcast or p2p medium = ARP or not
00:0041FE 4F05B9              +71 	ql	(arp_ether_rx, arp_ether_xmit, arp_ether_reso, xarp_ethernet:q)
  :                            72 if_storecall_llh
00:0041FF 00A03B              +73 	sr	this_if:write_llh
00:004200 47A03C              +74 	qs	this_if:arp_rx
  :                            75 
  :                            76 					. jump to ifconfigure_addresses
00:004201 68B001              +77 	lb	ifco:oqif		. if you have placed anything different
  :                            78 					. in this_if:flags or in rxtx
  :                            79 
  :                            80 if_setrelay
00:004202 CE0209              +81 	jzb	ifconfigure_addresses
00:004203 600005              +82 	anuba	INTERFACES+1,,xi
00:004204 D50009              +82 
00:004205 7E0225              +83 	jc	ixconfigure
[+0003]10
00:004206 CD0000              +84 	ab	$if0p,,xi		. i_f_pointer_array,,xi
00:004207 68D000              +85 	lb	0, b
00:004208 28A02E              +86 	sb	this_if:q2
  :                            87 
  :                            88 ifconfigure_addresses
00:004209 CFB002              +89 	dl	ifco:protocol_addr
00:00420A C70006              +90 	ds	6			. cache the new address
00:00420B 180008              +91 	sy	8
00:00420C 50A002              +92 	lx	this_if:address_list
00:00420D 70A003              +93 	tz	ifaddr:net		. the first address tuple is present from compile time
00:00420E 3E0228              +94 	lcal	ifconfigure_add_address	. and may or may not have the first address written in
00:00420F C7A003              +95 	ds	ifaddr:net
00:004210 3E023F              +96 	lcal	ifconfigure_lexically
00:004211 58F000              +97 	ly	0, sp
00:004212 60B000              +98 	la	this_if:id, y
00:004213 20A002              +99 	sa	ifaddr:i_f
00:004214 580008              +100 	ly	8
00:004215 68B004              +101 	lb	ifco:maskbits_physaoctets
  :                            102 
00:004216 3E0256              +103 	lcal	ifconfigure_log2netmask
  :                            104 
00:004217 C7A005              +105 	ds	ifaddr:mask
00:004218 B005BD              +106 	xor	(65535)			. compose directed broadcast address
00:004219 B805BD              +107 	xorB	(65535)
00:00421A 90A003              +108 	or	ifaddr:net
00:00421B 98A004              +109 	orB	ifaddr:net+1
00:00421C C7A007              +110 	ds	ifaddr:broadcast
00:00421D 50F000              +111 	lx	0, sp
  :                            112 
  :                            113 ifconfig_store_high_index
[+0005]0f
00:00421E 400000              +114 	lr	$ifzp			. don't move it backwards
00:00421F F60222              +115 	jxge	ifconfig_at_highest
00:004220 500000              +116 	lx	r
[+0005]0f
00:004221 100000              +117 	sx	$ifzp			. i_f_last
  :                            118 
  :                            119 ifconfig_at_highest
00:004222 60A000              +120 	la	this_if:id
[+0003]0f
00:004223 200000              +121 	sa	$if0p			. i_f_pointer_array
[+0006]0f
00:004224 200000              +122 	sa	IFNUMBER_I		. ifNumber:i
  :                            123 
  :                            124 ixconfigure
00:004225 380002              +125 	pop	x
00:004226 350000              +126 	lret	0
  :                            127 
  :                            128 
  :                            129 
  :                            130 ifconfigure_advance
00:004227 500003              +131 	lx	y
  :                            132 
  :                            133 ifconfigure_add_address			. you get here because the default slot is populated
00:004228 CF0006              +134 	dl	6
00:004229 DFA003              +135 	dan	ifaddr:net
00:00422A 7C023D              +136 	jdz	ifconfigured_already	. well maybe you wanted to keep the address with  
  :                            137 					. with changed settings
  :                            138 
00:00422B 58A000              +139 	ly	ifaddr:next		. if default slot is populated then so are any more you have
00:00422C 700003              +140 	tz	y
00:00422D B60227              +141 	j	ifconfigure_advance
  :                            142 
  :                            143 
[+0007]0f
00:00422E 070000              +144 	ts	net_alock
00:00422F B6022E              +145 	j	$-1
  :                            146 
[+0008]0f
00:004230 580000              +147 	ly	net_afree
00:004231 700003              +148 	tz	y
00:004232 B60237              +149 	j	ifconfigure_take_slot
[+0007]0f
00:004233 300000              +150 	z	net_alock		. let go the address slots list
00:004234 5D0225              +151 	ly	ixconfigure,,xi		. just have to dance dirty here
00:004235 18F000              +152 	sy	0, sp			. short-circuit the add_address operation
00:004236 350000              +153 	lret	0
  :                            154 
  :                            155 ifconfigure_take_slot
00:004237 18A000              +156 	sy	ifaddr:next		. set the new next
00:004238 500003              +157 	lx	y			. and move to it
00:004239 58A000              +158 	ly	ifaddr:next		. and write the next next
[+0008]0f
00:00423A 180000              +159 	sy	net_afree		. to the free chain head
  :                            160 
00:00423B 30A000              +161 	z	ifaddr:next		. cap the interface chain
  :                            162 
[+0007]0f
00:00423C 300000              +163 	z	net_alock		. free the address slots list
  :                            164 ifconfigured_already
00:00423D CF0006              +165 	dl	6
00:00423E 350000              +166 	lret	0
  :                            167 
  :                            168 
  :                            169 ifconfigure_lexically
[+0009]0f
00:00423F 440000              +170 	lr	net_alexical,,i		. update pointer: a scalar not structure member
  :                            171 
  :                            172 configure_lexically			. entry point for other tables like ifAddrTable
00:004240 588000              +173 	ly	*r			. r is **
00:004241 B60248              +174 	j	ifconfigure_eolexical?
  :                            175 
  :                            176 ifconfigure_compare
00:004242 CF0006              +177 	dl	6
00:004243 DFB003              +178 	dan	ifaddr:net, y
00:004244 7C024C              +179 	jdz	ifconfigure_listed	. built and run-time configured with the same address
  :                            180 					. but possibly with other settings changed
00:004245 5E024A              +181 	jnc	ifconfigure_insert_lexically
00:004246 44B001              +182 	lr	ifaddr:lexical, y, i	. update pointer word in structure, not structure
00:004247 58B001              +183 	ly	ifaddr:lexical, y
  :                            184 
  :                            185 ifconfigure_eolexical?
00:004248 700003              +186 	tz	y			. end of chain = higher
00:004249 B60242              +187 	j	ifconfigure_compare
  :                            188 
  :                            189 ifconfigure_insert_lexically
00:00424A 18A001              +190 	sy	ifaddr:lexical
00:00424B 108000              +191 	sx	*r			. either lexical chain head or link pointer
  :                            192 
  :                            193 ifconfigure_listed
00:00424C 350000              +194 	lret	0
  :                            195 
  :                            196 	$if	HVSOCKET
  :                            197 hvtraffic_configure
                                	c	(hvsockets_bind)	ifco:protocol_part:ports	;
                                					ifco:protocol_part:port		;
                                					ifco:protocol_part:density	;
00:00424D 9FB002              +201 					ifco:protocol_addr,,long
00:00424E F8B014              +201 
00:00424F F8B012              +201 
00:004250 F8B013              +201 
00:004251 FCF005              +201 
00:004252 FF05BE              +201 
00:004253 38000F              +201 
00:004254 350000              +202 	lret	0
  :                            203 	$endif
  :                            133: 	$include	log2mask
  :                            1 route_configure_log2netmask
00:004255 160010              +2 	dsr	16			. [a] -> b 23..8
  :                            3 ifconfigure_log2netmask
00:004256 9D00FF              +4 	orB	255,,xi			. compose netmask from bits width 15..8
00:004257 650000              +5 	la	0,,xi
00:004258 560008              +6 	drr	8			. place 1111 1111  at a: 23..16
00:004259 AD00FF              +7 	andB	255,,xi			.   and mask width in b
00:00425A 96D000              +8 	dsa	0, b			. propagate 1s [mask width] times
00:00425B 360008              +9 	dsl	8			. take away the 1s bits you first thought of
00:00425C 160008              +10 	dsr	8			. place 16 bits of mask in a: 0.x.x
00:00425D 0E0008              +11 	sbr	8			.   and 16 bits of mask in b: 0.y.y
00:00425E 350000              +12 	lret	0
  :                            134: 	$include	route_in
  :                            1 $(67::,y)
  :                            2 roco	route_config_frame
  :                            3 
  :                            4 $(0)
  :                            5 
  :                            6 route_insert	$tree			. this part is called like configuration protocol
00:00425F 750059              +7 	ii	KERNEL$B1_1
[+000a]0f
00:004260 500000              +8 	lx	route_lexical		. first are we replacing a route?
00:004261 CFB002              +9 	dl	roco:net
00:004262 C70006              +10 	ds	6
00:004263 B60268              +11 	j	route_ahead?
  :                            12 route_ahead!
00:004264 CFA003              +13 	dl	ro:net
00:004265 DF0006              +14 	dan	6
00:004266 7C026F              +15 	jdz	route_overlay
00:004267 50A001              +16 	lx	ro:lexical		. next route
  :                            17 route_ahead?
00:004268 700002              +18 	tz	x			. is this a route?
00:004269 B60264              +19 	j	route_ahead!		. yes, examine
  :                            20 					. no, fall thru, it's a new route
[+000b]0f
00:00426A 500000              +21 	lx	route_free
00:00426B 700002              +22 	tz	x			. no free slot = no store
00:00426C 3E0281              +23 	lcal	insert			. free slot = store
00:00426D 750058              +24 	ii	B1$
00:00426E 3D0000              +25 	fret	0
  :                            26 
  :                            27 route_overlay
00:00426F 3E0272              +28 	lcal	route_store
00:004270 750058              +29 	ii	B1$
00:004271 3D0000              +30 	fret	0
  :                            31 
  :                            32 route_store				. switch configuration tuple into route cache
00:004272 60B000              +33 	la	roco:flag_ifidx		. indirect_flag ++ interface_index
00:004273 64C002              +34 	la	2, a, i
00:004274 760009              +35 	drl	9			. net interface sends indirect flag as bit 15
00:004275 060008              +36 	sar	8			. RTA routing prefers it at bit 23
00:004276 560001              +37 	drr	1
00:004277 20A002              +38 	sa	ro:i_f
00:004278 CFB002              +39 	dl	roco:net		. route destination
00:004279 C7A003              +40 	ds	ro:net
00:00427A 60B001              +41 	la	roco:mask_log		. mask width
00:00427B 20A009              +42 	sa	ro:mask_log		. used newer route MIBs
00:00427C 3E0255              +43 	lcal	route_configure_log2netmask
00:00427D C7A005              +44 	ds	ro:mask			. to stored mask
00:00427E CFB004              +45 	dl	roco:next_hop
00:00427F C7A007              +46 	ds	ro:next_hop
00:004280 350000              +47 	lret	0
  :                            48 
  :                            49 .	6-word input y ->
  :                            50 .		_________________________________________________
  :                            51 .		| [*]i/f|masklog|  destination	|   next hop	|
  :                            52 .		|_______|_______|_______|_______|_______|_______|
  :                            53 
  :                            54 .	9-word stored route
  :                            55 .	_________________________________________________________________________
  :                            56 .	| search| list	| [*]i/f|  destination	|      mask	|   next hop	|
  :                            57 .	|_chain_|_chain_|_______|_______|_______|_______|_______|_______|_______|
  :                            58 
  :                            59 
00:004281 3E0272              +60 insert	lcal	route_store		. switch configuration tuple into route cache
00:004282 58A000              +61 	ly	ro:next
[+000b]0f
00:004283 180000              +62 	sy	route_free		. free chain updated
  :                            63 
[+000c]10
00:004284 5D0000              +64 	ly	route_list,,xi		. find insert point in  search chain
  :                            65 
  :                            66 search_down				. 1st in chain is FFFF FFFF anyway
00:004285 400003              +67 	lr	y			. prior <--
00:004286 58B000              +68 	ly	ro:next, y		. next in chain
00:004287 CFA005              +69 	dl	ro:mask
00:004288 DFB005              +70 	dan	ro:mask, y
00:004289 5E0285              +71 	jnc	search_down		. new route mask is < i.e. less wide
  :                            72 					. new route mask is >= 
00:00428A 18A000              +73 	sy	ro:next			. forward pointer of new
00:00428B 108000              +74 	sx	*r			. forward pointer of prior
  :                            75 
[+000a]10
00:00428C 450000              +76 	lr	route_lexical,,xi
00:00428D CFA003              +77 	dl	ro:net
00:00428E C70006              +78 	ds	6
00:00428F 3E0240              +79 	lcal	configure_lexically
00:004290 350000              +80 	lret	0
  :                            81 	$root
  :                            135: 	$include	queue
  :                            1 
  :                            2 .	descriptors are short-term on two chains
  :                            3 .	so that TCP segments awaiting ACK
  :                            4 .	can be on the interface queue and the
  :                            5 .	connection's ACK wait queue at the same time
  :                            6 
  :                            7 .	IP / TCP / UDP uses chain link descriptor:next
  :                            8 
  :                            9 .	interface queues use chain link descriptor:ifql
  :                            10 
  :                            11 .	ifql is a reuse of descriptor:readpoint which
  :                            12 .	which points TCP past consumed / duplicate
  :                            13 .	payload in incoming segments
  :                            14 
  :                            15 .	in high-volume space where certain TCP ports
  :                            16 .	have private buffer pools [HVSOCKET], the buffer
  :                            17 .	and its descriptor are in the same bank
  :                            18 
  :                            19 .	descriptors are located by chain head pointer
  :                            20 .	or previous descriptor forward pointer
  :                            21 
  :                            22 .	during HVSOCKET operations the bank containing
  :                            23 .	the segment is in address space whenever the socket
  :                            24 .	is in address space	
  :                            25 
  :                            26 .	high-volume private buffer pools are only used
  :                            27 .	in some TCP traffic which is expected to be of
  :                            28 .	extreme volume or confidential. The private buffer
  :                            29 .	arrangement enables millions of transmitted segments
  :                            30 .	awaiting remote acknowledgement to remain buffered
  :                            31 
  :                            32 .	interface device drivers drop transmitted datagrams
  :                            33 .	from protocols which do not resend
  :                            34 
  :                            35 .	TCP flags bit 23 of descriptor:bytes and interface
  :                            36 .	drivers do not drop those buffers after transmission
  :                            37 
  :                            38 .	vector name write_ifq
  :                            39 
  :                            40 
00:004291 27F001              +41 rewindq	sim	1, sp
00:004292 750041              +42 	ii	YIELD$
00:004293 27F001              +43 	sim	1, sp
00:004294 35FFFE              +44 	lret	-2
  :                            45 
00:004295 F80002              +46 q2if	push	x
00:004296 70A02E              +47 	tz	this_if:q2		. diversion to trunk handling
00:004297 50A02E              +48 	lx	this_if:q2		. at another logical interface
  :                            49 
00:004298 FD0007              +50 	LOCK	this_if:lock_cell_q1	. rewindq
00:004299 27F000              +50 
00:00429A 07A02F              +50 
00:00429B B6029A              +50 
  :                            51 
00:00429C 70A031              +52 	tz	this_if:oq:head
00:00429D B602A2              +53 	j	q2ifz
00:00429E 20A031              +54 	sa	this_if:oq:head
00:00429F 20A032              +55 	sa	this_if:oq:tail
00:0042A0 30C007              +56 	z	descriptor:ifql, a
00:0042A1 B602A6              +57 	j	q2ifzx
  :                            58 
00:0042A2 68A032              +59 q2ifz	lb	this_if:oq:tail
00:0042A3 20D007              +60 	sa	descriptor:ifql, b
00:0042A4 20A032              +61 	sa	this_if:oq:tail
00:0042A5 30C007              +62 	z	descriptor:ifql, a
  :                            63 
00:0042A6 30A02F              +64 q2ifzx	FREE	this_if:lock_cell_q1
00:0042A7 27F000              +64 
00:0042A8 17000F              +64 
00:0042A9 380002              +65 	pop	x
00:0042AA 3D0000              +66 	fret	0
  :                            67 
  :                            68 					. local call only visible from this page
  :                            69 					. only drivers call it in IP thread
  :                            70 					. for physical transmission queued frames
  :                            71 
00:0042AB FD0007              +72 readifq	LOCK	this_if:lock_cell_q1	. rewindq
00:0042AC 27F000              +72 
00:0042AD 07A02F              +72 
00:0042AE B602AD              +72 
00:0042AF 60A031              +73 	la	this_if:oq:head
  :                            74 readifq2
00:0042B0 C602B3              +75 	jza	rqifz
00:0042B1 68C007              +76 	lb	descriptor:ifql, a
00:0042B2 28A031              +77 	sb	this_if:oq:head
00:0042B3 30A02F              +78 rqifz	FREE	this_if:lock_cell_q1
00:0042B4 27F000              +78 
00:0042B5 17000F              +78 
00:0042B6 350000              +79 	lret	0
  :                            80 
  :                            81 	. long address (inter bank) queues
  :                            82 
  :                            83 					. local call only visible from this page
  :                            84 					. only drivers call it in IP thread
  :                            85 					. for physical transmission queued frames
  :                            86 
00:0042B7 FD0007              +87 rqtxL	LOCK	this_if:lock_cell_q2	. rewindq
00:0042B8 27F000              +87 
00:0042B9 07A030              +87 
00:0042BA B602B9              +87 
00:0042BB CFA033              +88 	dl	this_if:oq2:head
00:0042BC C602C3              +89 	jza	rqtxL_z
00:0042BD 34002F              +90 	sabr	BSOCKET			. base containing memory
00:0042BE 9FD006              +91 	dpush	descriptor:sobdi, b
00:0042BF 38A033              +92 	dpop	this_if:oq2:head
00:0042C0 38A034              +92 
00:0042C1 30D006              +93 	z	descriptor:sobdi, b	. prevent delayed wrong updates along chain
00:0042C2 600005              +94 	la	b			. return containing pointer
00:0042C3 30A030              +95 rqtxL_z	FREE	this_if:lock_cell_q2
00:0042C4 27F000              +95 
00:0042C5 17000F              +95 
00:0042C6 350000              +96 	lret	0			. called from this iframe = drivers
  :                            97 
  :                            98 q2txL_head
00:0042C7 F80002              +99 	push	x
00:0042C8 70A02E              +100 	tz	this_if:q2
00:0042C9 50A02E              +101 	lx	this_if:q2
  :                            102 
00:0042CA FD0007              +103 	LOCK	this_if:lock_cell_q2	. rewindq
00:0042CB 27F000              +103 
00:0042CC 07A030              +103 
00:0042CD B602CC              +103 
  :                            104 
  :                            105 					. socket memory is based
00:0042CE 9FA033              +106 	dpush	this_if:oq2:head	. and stays based
00:0042CF 680004              +107 	lb	a
00:0042D0 054000              +108 	on	see$1
00:0042D1 60106F              +109 	la	ABT+BSOCKET
00:0042D2 0D4000              +110 	off	see$1
00:0042D3 70F000              +111 	tnz	0, sp			. anything already on this queue?
00:0042D4 B602D6              +111 
00:0042D5 C7A035              +112 	ds	this_if:oq2:tail	. if not the new object is head + tail
00:0042D6 C7A033              +113 	ds	this_if:oq2:head	. new becomes 1st
00:0042D7 38D006              +114 	dpop	descriptor:sobdi, b	. 1st becomes 2nd if any
00:0042D8 38D007              +114 
  :                            115 
00:0042D9 30A030              +116 	FREE	this_if:lock_cell_q2
00:0042DA 27F000              +116 
00:0042DB 17000F              +116 
  :                            117 
00:0042DC 380002              +118 	pop	x			. I / F pointer at call
00:0042DD 3D0000              +119 	fret	0			. called from protocol iframe
  :                            120 
  :                            121 q2txL_tail
00:0042DE F80002              +122 	push	x
00:0042DF 70A02E              +123 	tz	this_if:q2
00:0042E0 50A02E              +124 	lx	this_if:q2
  :                            125 
00:0042E1 FD0007              +126 	LOCK	this_if:lock_cell_q2	. rewindq
00:0042E2 27F000              +126 
00:0042E3 07A030              +126 
00:0042E4 B602E3              +126 
  :                            127 
00:0042E5 680004              +128 	lb	a
00:0042E6 054000              +129 	on	see$1
00:0042E7 60106F              +130 	la	ABT+BSOCKET
00:0042E8 0D4000              +131 	off	see$1
00:0042E9 30D006              +132 	z	descriptor:sobdi, b
00:0042EA 30D007              +133 	z	descriptor:ifql, b	. always up to here
  :                            134 	
00:0042EB 70A033              +135 	tz	this_if:oq2:head:bx
00:0042EC B602EF              +136 	j	q2txL_catenate
00:0042ED C7A033              +137 	ds	this_if:oq2:head	. 1st on queue
00:0042EE B602F8              +138 	j	q2txL_final		. and last
  :                            139 	
  :                            140 q2txL_catenate
00:0042EF 9F0004              +141 	dpush	a			. 2 copies of long pointer
00:0042F0 9F0004              +142 	dpush	a			. connections_block:connection
00:0042F1 CFA035              +143 	dl	this_if:oq2:tail
00:0042F2 34002F              +144 	sabr	BSOCKET			. memory index heretofore last on chain
00:0042F3 38D006              +145 	dpop	descriptor:sobdi, b	. 1st copy previous last -> last 
00:0042F4 38D007              +145 
00:0042F5 380004              +146 	dpop	a			. 2nd copy to write to queue tail
00:0042F6 380005              +146 
00:0042F7 34002F              +147 	sabr	BSOCKET			. caller certainly needs that restored
  :                            148 
  :                            149 q2txL_final
00:0042F8 C7A035              +150 	ds	this_if:oq2:tail	. always from here
  :                            151 
00:0042F9 30A030              +152 	FREE	this_if:lock_cell_q2
00:0042FA 27F000              +152 
00:0042FB 17000F              +152 
00:0042FC 380002              +153 	pop	x			. I / F pointer at call
00:0042FD 3D0000              +154 	fret	0			. called from protocol iframe
  :                            136: 	$include	soc_data
  :                            1 soc_data	$tree
  :                            2 
  :                            3 .	vector name __buy6_bytes
  :                            4 .	at entry a -> socket buffer [ + offset ]
  :                            5 .	packs 3 socket buffer words
  :                            6 .	to 2 application data words [ a b ]
  :                            7 
00:0042FE F80002              +8 buy6	push	x
00:0042FF 4805BD              +9 	lk	(00FFFF)
00:004300 500004              +10 	lx	a
00:004301 CFA000              +11 	dl	0, x
00:004302 2E0008              +12 	sbl	8
00:004303 360008              +13 	dsl	8
00:004304 BFA002              +14 	mlb	2, x
00:004305 380002              +15 	pop	x
00:004306 3D0000              +16 	fret	0
  :                            17 
  :                            18 .	vector name __buy12_bytes
  :                            19 .	at entry a -> socket buffer [ + offset ]
  :                            20 .	packs 6 socket buffer words
  :                            21 .	to 4 application data words [ a b 6 7 ]
  :                            22 
00:004307 F80002              +23 buy12	push	x
00:004308 4805BD              +24 	lk	(00FFFF)
00:004309 500004              +25 	lx	a
00:00430A CFA003              +26 	dl	3, x
00:00430B 2E0008              +27 	sbl	8
00:00430C 360008              +28 	dsl	8
00:00430D BFA005              +29 	mlb	5, x
00:00430E C70006              +30 	ds	6
00:00430F CFA000              +31 	dl	0, x
00:004310 2E0008              +32 	sbl	8
00:004311 360008              +33 	dsl	8
00:004312 BFA002              +34 	mlb	2, x
00:004313 380002              +35 	pop	x
00:004314 3D0000              +36 	fret	0
  :                            37 	
  :                            38 		$root
  :                            137: 	$include	if2media
  :                            1 if2media? $tree
  :                            2 
00:004315 60A023              +3 	la	this_if:oqremaining	. hold traffic from medium?
00:004316 A60321              +4 	jpa	cleared
  :                            5 	
00:004317 68A024              +6 	lb	this_if:threshold_time
00:004318 CE031D              +7 	jzb	restart_clear		. initial
00:004319 600097              +8 	la	DAYCLOCK$
00:00431A D00005              +9 	ana	b
00:00431B A6031D              +10 	jpa	restart_clear		. time has reached restart allowance
  :                            11 				
00:00431C 350000              +12 	lret	0			. time has not. Output must wait
  :                            13 
  :                            14 restart_clear
00:00431D 600097              +15 	la	DAYCLOCK$
00:00431E C50000              +16 	aa	THRESHOLD_QUANTUM_MS_IFT2,,xi
00:00431F 20A024              +17 	sa	this_if:threshold_time
  :                            18 
00:004320 60A022              +19 	la	this_if:oqlen
  :                            20 
00:004321 C5FFFF              +21 cleared	aa	-1,,xi
00:004322 20A023              +22 	sa	this_if:oqremaining
00:004323 350001              +23 	lret	1			. clear to send
  :                            24 
  :                            25 	$root
  :                            138: 	$include	recheck
  :                            1 .	diagnostic call to see if parts of an IP header
  :                            2 .	heve got overwritten
  :                            3 
  :                            4 .	if it goes to GUARD$ interrupt
  :                            5 .	8 caller registers [ r k x y a b 6 7 ]
  :                            6 .	are on the application internal stack
  :                            7 .	otherwise no registers are changed
  :                            8 
  :                            9 .	$do	1,	c	(__recheck)	address[,,i]
  :                            10 
  :                            11 
  :                            12 recheck	$tree
                                	$head_far	 params(datagram_p,	int)		;
                                								;
                                			scalars(caller_ab67,	float,	a	;
00:004324 8F0004              +16 				caller_rkxy,	float,	r	)
00:004325 8F0000              +16 
  :                            17 
00:004326 50F00B              +18 	lx	datagram_p		. pointer
00:004327 60A000              +19 	la	0, x
00:004328 160008              +20 	dsr	8
00:004329 4DFFF0              +21 	lk	-16,,xi
00:00432A AF05BF              +22 	mta	(000040)		. 1st quartet 4 ?
00:00432B B60341              +23 	j	recheck_reject
00:00432C A5000F              +24 	and	15,,xi
00:00432D C5FFFC              +25 	aa	-5+2-1,,xi		. enough longwords
00:00432E 5E0341              +26 	jnc	recheck_reject		. to be an IP header?
00:00432F 400004              +27 	lr	a
  :                            28 	
00:004330 CFA000              +29 	dl	0, x			. version_hl_tos : size
00:004331 D7A002              +30 	da	2, x			. dgram_id : dnf+ 
  :                            31 
00:004332 D7A006              +32 addons	da	6, x			. word pairs
00:004333 850002              +33 	ax	2,,xi			. starting addresses
00:004334 1E0332              +34 	jdr	addons			. + up to 10 more pairs
  :                            35 
00:004335 50F00B              +36 	lx	datagram_p		. reload pointer
00:004336 C0A004              +37 	aa	4, x			. include  ttl_protocol
  :                            38 
  :                            39 addaround
00:004337 C00005              +40 	aa	b
00:004338 160010              +41 	dsr	16
00:004339 0E0008              +42 	sbr	8
00:00433A D60337              +43 	jnza	addaround
  :                            44 
00:00433B B805BD              +45 	xorB	(00FFFF)
00:00433C B8A005              +46 	xorB	5, x
  :                            47 
00:00433D DE0341              +48 	jnzb	recheck_reject
  :                            49 
00:00433E 870000              +50 	qpop	r
00:00433F 870004              +51 	qpop	a
00:004340 3D0000              +52 	fret	0
  :                            53 
  :                            54 recheck_reject
00:004341 75005F              +55 	ii	GUARD$
  :                            56 
  :                            57 	$root
  :                            58 
  :                            139: 	$include	mcapsule
  :                            1 
  :                            2 mib_scope_update	$tree
  :                            3 
  :                            4 .	these call[s] are on diagnostic mib objects
  :                            5 	
  :                            6 .	$vector name tx_mib_update
  :                            7 
  :                            8 .	caller has address of data part of managed object
  :                            9 .	but has his own B1 in address space not mib variables in kernel B1
  :                            10 .	just be sure it'a a 48-bit object
  :                            11 .	and you name its data part :i
  :                            12 
  :                            13 .	c	(tx_mib_update)	thing:i,,xi	some_number_like_1[,,xi]
  :                            14 
  :                            15 variable48
  :                            16 	$if	1
                                	$head_far	 params(object_p,	int	;
                                				increment,	int)	;
                                							;
00:004342 F80002              +20 			scalars(caller_x,	int,	x)
  :                            21 
00:004343 750059              +22 	ii	KERNEL$B1_1		. map onto MIB data
00:004344 50F004              +23 	lx	object_p		. pointer -> data part managed object
00:004345 F8F005              +24 	push	increment		. stack names are momentarily curved
00:004346 2FA001              +25 	popA	1, x			. until here
00:004347 5E0349              +26 	jnc	in_range		. 48 bits += 24 bits unsigned
00:004348 17A000              +27 	inc	0, x
  :                            28 
  :                            29 in_range
00:004349 750058              +30 	ii	B1$			. map onto caller data
00:00434A 380002              +31 	pop	x
  :                            32 	$endif
  :                            33 
00:00434B 3D0000              +34 	fret	0
  :                            35 
  :                            36 	$root	
  :                            140 	$list
  :                            141 
  :                            142 	$path		../arp.ext
  :                            153 	$list		3
  :                            154: 	$include	arp_enet
  :                            1 ethernet_arp	$tree
  :                            2 ETHERNET_ARP_ARPQ_HEAD*	$set	arpq.head
  :                            3 
  :                            4 .	ARP for
  :                            5 .		48-bit physical addresses
  :                            6 .	and	32-bit protocol addresses
  :                            7 
  :                            8 .	this may be the only ARP needed
  :                            9 .	if another ARP is needed
  :                            10 .	for different size addresses
  :                            11 .	include arp.msm again
  :                            12 
  :                            13 .	netspace	$tree
  :                            14 .	SETTINGS	$set	values
  :                            15 .			$include arp
  :                            16 .			$root
  :                            17 .
  :                            18 .	whatever storage bank that is in
  :                            19 .	needs four vectors at the front
  :                            20 
  :                            21 .	netspa_arp_rx* $vector	netspace:arp_rx
  :                            22 .	netspa_arp_reso* $vector netspace:resolve
  :                            23 .	netspa_arp_xmit* $vector netspace:xmit
  :                            24 .	xarp_netspace*	$vector	netspace:xarp
  :                            25 
  :                            26 .	these vectors go in the interface descriptor
  :                            27 
  :                            28 .	this_if:arp_rx
  :                            29 .	this_if:arp_tx
  :                            30 .	this_if:arp_resolve
  :                            31 .	this_if:xarp
  :                            32 
  :                            33 .		ql	(netspa_arp_rx, netspa_arp_tx, netspa_arp_reso, xarp_netspace:q)
  :                            34 .		qs	this_if:arp_rx
  :                            35 
  :                            36 .	this would usually happen in ifconfigure.msm  where 
  :                            37 .	the vector pointer to the routine for constructing
  :                            38 .	link layer header is also written to this_if:write_llh
  :                            39 
  :                            40 
  :                            41 .	the settings and and generation of ethernet ARP follow here
  :                            42 
  :                            43 
  :                            44 ARP_STORE $set	50	. however many ARP cache rows are required
  :                            45 
  :                            46 HTYPE	$set	ETHERNET_SPACE
  :                            47 HLEN	$set	6
  :                            48 PLEN	$set	4
  :                            49 PROTOCOL_SUITE	$set	0800
  :                            50 LINK_PROTOCOL	$set	0806
  :                            51 
  :                            52 ARP_XMIT	$set	arp_ether_xmit
  :                            53 
  :                            54: 		$include	arp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(1:*1)
  :                            41 
01:000000 000000              +42 arpq	dq
01:000001 000000              +42 
  :                            43 
  :                            44 arp_hash
01:000002 000000              +45 	$do	arp_store(ARP_STORE),	0
01:000003 000000              +45 
01:000004 000000              +45 
01:000005 000000              +45 
01:000006 000000              +45 
01:000007 000000              +45 
01:000008 000000              +45 
01:000009 000000              +45 
01:00000A 000000              +45 
01:00000B 000000              +45 
01:00000C 000000              +45 
01:00000D 000000              +45 
01:00000E 000000              +45 
01:00000F 000000              +45 
01:000010 000000              +45 
01:000011 000000              +45 
  :                            46 ?	$do	ARP_STORE,arp_line(?)	arp_cache
  :                            47 
(+01)18
01:0001A2 000012              +48 arp_next	+	arp_line(1)
  :                            49 
  :                            50 	$if	T77_DRIVERS_THREADED
  :                            51 arpq_tscell	+	0
  :                            52 	$endif
  :                            53 
01:0001A3 000000              +54 arp_free	+	0
  :                            55 
01:0001A4 000000              +56 broadcast_line	broadcast_cache
01:0001A5 000000              +56 
01:0001A6 000000              +56 
01:0001A7 00FFFF              +56 
01:0001A8 00FFFF              +56 
01:0001A9 00FFFF              +56 
01:0001AA 00FFFF              +56 
01:0001AB 00FFFF              +56 
  :                            57 
  :                            58 $(67::,y)
  :                            59 arp_row	arp_cache
  :                            60 ARP_CACHE_WORDS	$set	$
  :                            61 
  :                            62 $(67::,y)
  :                            63 arp_msg	arp_dgram
  :                            64 ARP_MSG_WORDS	$set	$
  :                            65 
  :                            66 $(0)
  :                            67 
00:00434C 8F0000              +68 xarp	qpush	r
  :                            69 xarp_next
(+01)10
00:00434D 5D0000              +70 	ly, xi	arpq
  :                            71 
  :                            72 	$if	T77_DRIVERS_THREADED	. if device drivers are not in IP main thread
  :                            73 	LOCK	arpq_tscell		. it must be done this way
  :                            74 	call	(far_readq)
  :                            75 	FREE	arpq_tscell
  :                            76 	$else				. otherwise it can be done this way
00:00434E FF05C0              +77 	call	(far_readq)
  :                            78 	$endif
  :                            79 
00:00434F C6035E              +80 	jza	xarp_timers
00:004350 20000E              +81 	sa	fp
00:004351 3E0419              +82 	lcal	glean_and_push
  :                            83 
00:004352 58E004              +84 	ly	descriptor:dgram
00:004353 CFB007              +85 	dl	arp_msg:spa
00:004354 7C035A              +86 	jdz	xarp_clear		. don't respond to ZeroConf
00:004355 60B003              +87 	la	arp_msg:oper
00:004356 D50001              +88 	ana	ARP_REQUEST,,xi
00:004357 D6035A              +89 	jnza	xarp_clear
00:004358 50F002              +90 	lx	2, sp
00:004359 3E043B              +91 	lcal	search_and_indicate	. is this address here?
  :                            92 
  :                            93 xarp_clear
00:00435A 60000E              +94 	la	fp
00:00435B 502180              +95 	lx	rx_buffers
00:00435C FF0598              +96 	call	(if_sell1)
00:00435D B6034D              +97 	j	xarp_next
  :                            98 
  :                            99 xarp_timers
00:00435E 45000F              +100 	lr	arp_store(ARP_STORE)-1,,xi
(+01)10
00:00435F 550002              +101 	lx	arp_hash,,xi
  :                            102 xarp_walk
00:004360 58A000              +103 	ly	0, x
00:004361 850001              +104 	ax	1,,xi
00:004362 B60365              +105 	j	xarp_walk_chain
  :                            106 xarp_walk_next
00:004363 3E044F              +107 	lcal	time_test
00:004364 58B000              +108 	ly	arp_row:next
  :                            109 xarp_walk_chain
00:004365 700003              +110 	tz	y
00:004366 B60363              +111 	j	xarp_walk_next
00:004367 1E0360              +112 	jdr	xarp_walk
00:004368 870000              +113 xarpx	qpop	r
  :                            114 
00:004369 3D0000              +115 	fret	0
  :                            116 
00:00436A 9F0002              +117 arp_rx	dpush	x
00:00436B 600000              +118 	la	r
00:00436C D5001C              +119 	ana	ARP_MSG_WORDS*2,,xi	. must have this many octets
00:00436D 5E0380              +120 	jnc	arp_rxz			. to be complete
00:00436E 502180              +121 	lx	rx_buffers		. move some of it away from i/f buffers
00:00436F 650010              +122 	la, xi	ARP_MSG_WORDS+3**-4	. that's how much we'll look at
00:004370 FF05C1              +123 	call	(if_buy1)
00:004371 C60380              +124 	jza	arp_rxz
00:004372 50C001              +125 	lx	descriptor:frame, a
00:004373 10C004              +126 	sx	descriptor:dgram, a
  :                            127 
00:004374 58F001              +128 	ly	1, sp
00:004375 450003              +129 	lr	ARP_MSG_WORDS//4-1,,xi
  :                            130 arp_rx_store
00:004376 8FB000              +131 	qpush	0, y
00:004377 87A000              +132 	qpop	0, x
00:004378 8D0004              +133 	ay	4,,xi
00:004379 850004              +134 	ax	4,,xi
00:00437A 1E0376              +135 	jdr	arp_rx_store
  :                            136 
(+01)10
00:00437B 5D0000              +137 	ly	arpq,,xi
  :                            138 
  :                            139 	$if	T77_DRIVERS_THREADED
  :                            140 	LOCK	arpq_tscell
  :                            141 	call	(far_q2)
  :                            142 	FREE	arpq_tscell
  :                            143 	$else
00:00437C FF05C2              +144 	call	(far_q2)
  :                            145 	$endif
  :                            146 
00:00437D 50F000              +147 	lx	0, sp
00:00437E 68A000              +148 	lb	this_if:id
00:00437F 28C002              +149 	sb	descriptor:i_f, a
  :                            150 
00:004380 380002              +151 arp_rxz	dpop	x
00:004381 380003              +151 
00:004382 3D0000              +152 	fret	0
  :                            153 	
00:004383 8F0010              +154 resolve	qpush	d$save
00:004384 8F0008              +155 	qpush	8
00:004385 65FFFF              +156 	la	-1,,xi			. hasn't until it has
00:004386 8F0004              +157 	qpush	a
00:004387 8F0000              +158 	qpush	r
  :                            159 
  :                            160 caller_i_f	$equf	2, sp		. still in x as well so far
  :                            161 NET_ADDR	$set	6
  :                            162 LL_H		$set	TX_FRAME
  :                            163 CHAIN_HEAD	$set	10
  :                            164 BLANK		$set	9		. spare slot pointer
  :                            165 AXW		$set	8		. it was where we are called from
  :                            166 
  :                            167 					. find the hash chain
00:004388 600009              +168 	la	TX_FRAME
00:004389 CFC00E              +169 	dl	nframe:next_hop, a
00:00438A 40A000              +170 	lr	this_if:id		. the calling xmit routine has the I/F
00:00438B 3E03F4              +171 	lcal	find_in_cache		. entry point precaches target protocol address
00:00438C 700003              +172 	tz	y
00:00438D B60395              +173 	j	consider		. found in ARP cache
00:00438E 580009              +174 	ly	BLANK
00:00438F 700003              +175 	tz	y
00:004390 B6039E              +176 	j	construct_request	. found a cache row in same # chain
00:004391 3E0411              +177 	lcal	search_heap
00:004392 700003              +178 	tz	y
00:004393 B60399              +179 	j	insert_construct_request . found a new cache row
  :                            180 
00:004394 B603B6              +181 	j	return
  :                            182 
  :                            183 consider				. remote physa may be requested but not responded
00:004395 CFB003              +184 	dl	arp_row:tha
                                ?	$do	HLEN//2-2,	;
00:004396 98B005              +186 	orB	arp_row:tha+2+?-1
00:004397 7C03B6              +187 	jdz	return
00:004398 B603B0              +188 	j	deliver
  :                            189 
  :                            190 insert_construct_request
00:004399 60800A              +191 	la	*CHAIN_HEAD		. read address of 1st in chain by pointer
00:00439A 20B000              +192 	sa	arp_row:next		. write next of new 1st
00:00439B 18800A              +193 	sy	*CHAIN_HEAD		. write chain head location by pointer
  :                            194 
00:00439C 60A000              +195 	la	this_if:id		. this is a necessary identification
00:00439D 20B002              +196 	sa	arp_row:i_f		. otherwise this ARP row is not used
  :                            197 					. and blows up the timer test
  :                            198 construct_request
00:00439E 30B003              +199 	z	arp_row:tha
00:00439F 30B004              +200 	z	arp_row:tha+1
00:0043A0 30B005              +201 	z	arp_row:tha+2
  :                            202 
00:0043A1 CF0006              +203 	dl	NET_ADDR
00:0043A2 C7B006              +204 	ds	arp_row:tpa
  :                            205 
00:0043A3 600097              +206 	la	DAYCLOCK$
00:0043A4 C005C3              +207 	aa	(ARP_REFRESH)
00:0043A5 20B001              +208 	sa	arp_row:refresh
  :                            209 
00:0043A6 600013              +210 	la	TX_DATAGRAM
  :                            211 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				caller_i_f		;
                                				0,,xi			;
                                				NET_ADDR,,long		;
00:0043A7 9FC006              +216 				dgram:ipsource,a,long
00:0043A8 9F0006              +216 
00:0043A9 FD0000              +216 
00:0043AA F8F007              +216 
00:0043AB FD0001              +216 
00:0043AC FCF007              +216 
00:0043AD FF05C4              +216 
00:0043AE 38000F              +216 
  :                            217 
00:0043AF B603B6              +218 	j	return
  :                            219 
00:0043B0 50F009              +220 deliver	lx	TX_FRAME, sp
00:0043B1 CFB003              +221 	wphysa	0, x	arp_row:tha, y
00:0043B2 C7A000              +221 
00:0043B3 60B005              +221 
00:0043B4 20A002              +221 
00:0043B5 30F004              +222 	z	4, sp	. now it has
  :                            223 
00:0043B6 870000              +224 return	qpop	r
00:0043B7 870004              +225 	qpop	a
00:0043B8 870008              +226 	qpop	8
00:0043B9 870010              +227 	qpop	d$save
00:0043BA 3D0000              +228 	fret	0
  :                            229 
  :                            230 
  :                            231 phy_target1	$equf	arp_msg:tha
  :                            232 phy_target2	$equf	nframe:llh:generic:address, y
  :                            233 phy_sourcex	$equf	0, x
  :                            234 
                                xmit	$head_far	 params(operation,	int	  ;
                                				i_fp,		int	  ;
                                				ha_pointer,	int	  ;
                                				dnet_addr,	long	  ;
                                				snet_addr,	long	) ;
                                							  ;
                                			scalars(caller_rkxy,	float, r  ;
00:0043BB 8F0000              +242 				caller_fp,	int,  fp)
00:0043BC F8000E              +242 
  :                            243 
00:0043BD 65001E              +244 	la	ROUTING_HEADER+ARP_MSG_WORDS,,xi
00:0043BE 502181              +245 	lx	tx_buffers
00:0043BF FF05C1              +246 	call	(if_buy1)
00:0043C0 C603F1              +247 	jza	xmitx
00:0043C1 20000E              +248 	sa	fp
  :                            249 
00:0043C2 58E001              +250 	ly	descriptor:frame
00:0043C3 6CB010              +251 	lb	ROUTING_HEADER,y,i
00:0043C4 28E004              +252 	sb	descriptor:dgram
00:0043C5 65001C              +253 	la	ARP_MSG_WORDS*2,,xi
00:0043C6 C7B009              +254 	ds	nframe:frame_axw(2), y
00:0043C7 30B00B              +255 	z	nframe:frame_axw(3), y		. no third buffer needed
00:0043C8 30B00E              +256 	z	nframe:next_hop, y		. a value here is irrelevant
00:0043C9 30B00F              +257 	z	nframe:next_hop+1, y		. so clear residual value
  :                            258 
00:0043CA 400003              +259 	lr	y				. save the frame pointer
00:0043CB 580005              +260 	ly	b				. dgram pointer
  :                            261 
00:0043CC CF05C5              +262 	dl	(HTYPE, PROTOCOL_SUITE:d)	. hardware space, protocol set
00:0043CD C7B000              +263 	ds	arp_msg:htype
  :                            264 
00:0043CE 6005C7              +265 	la	(0, HLEN, PLEN)
00:0043CF 68F008              +266 	lb	operation
00:0043D0 C7B002              +267 	ds	arp_msg:hl_pl			. address lengths, type of request
  :                            268 
00:0043D1 50F009              +269 	lx	i_fp
  :                            270 
00:0043D2 CFA008              +271 	wphysa	arp_msg:sha this_if:physa
00:0043D3 C7B004              +271 
00:0043D4 60A00A              +271 
00:0043D5 20B006              +271 
  :                            272 
00:0043D6 CFF00D              +273 	dl	snet_addr
00:0043D7 C7B007              +274 	ds	arp_msg:spa
  :                            275 
00:0043D8 CFF00B              +276 	dl	dnet_addr
00:0043D9 C7B00C              +277 	ds	arp_msg:tpa
  :                            278 
  :                            279 
00:0043DA 50F00A              +280 	lx	ha_pointer			. bespoke physa destination?
00:0043DB 700002              +281 	tnz	x
00:0043DC B603DE              +281 
00:0043DD 5505C8              +282 	lx	(0o),,xi
00:0043DE CFA000              +283 	wphysa	arp_msg:tha phy_sourcex
00:0043DF C7B009              +283 
00:0043E0 60A002              +283 
00:0043E1 20B00B              +283 
  :                            284 						. arp dgram is built
  :                            285 						. now the link layer header
  :                            286 
00:0043E2 580000              +287 	ly	r				. recover the frame pointer
00:0043E3 50F00A              +288 	lx	ha_pointer			. bespoke physa destination?
00:0043E4 700002              +289 	tnz	x
00:0043E5 B603E7              +289 
00:0043E6 5505D0              +290 	lx, xi	(00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF:o)
  :                            291 						. don't know = broadcast
  :                            292 						. most i/f use 3 of these 8 words !
00:0043E7 CFA000              +293 	wphysa	nframe:llh:generic:address,y phy_sourcex
00:0043E8 C7B000              +293 
00:0043E9 60A002              +293 
00:0043EA 20B002              +293 
  :                            294 
00:0043EB 6D0806              +295 	lb	LINK_PROTOCOL,,xi
00:0043EC 28B006              +296 	sb	nframe:llh:generic:protocol, y
00:0043ED 50F009              +297 	lx	i_fp
00:0043EE 60000E              +298 	la	fp
  :                            299 
  :                            300 	$if	0			. seems to be called from q2
  :                            301 	call	this_if:write_llh	. format generic parameters		
  :                            302 	$endif				. to ll header for this i/f
  :                            303 
00:0043EF 60000E              +304 	la	fp
00:0043F0 FF05D8              +305 	call	(if_q2ifree)
  :                            306 
00:0043F1 38000E              +307 xmitx	pop	fp
00:0043F2 870000              +308 	qpop	r
00:0043F3 3D0000              +309 	fret	0
  :                            310 
  :                            311 find_in_cache
00:0043F4 C70006              +312 	ds	NET_ADDR
  :                            313 
  :                            314 find_in_cacheq
00:0043F5 AD000F              +315 	andB	arp_store(ARP_STORE)-1,,xi
(+01)10
00:0043F6 5D0002              +316 	ly	arp_hash,,xi
00:0043F7 880005              +317 	ay	b
00:0043F8 18000A              +318 	sy	CHAIN_HEAD
00:0043F9 300009              +319 	z	BLANK
  :                            320 
00:0043FA 4D7FFF              +321 	lk	32767,,xi
  :                            322 	
00:0043FB 60B000              +323 forward	la	arp_row:next
00:0043FC 580004              +324 	ly	a
00:0043FD C6040A              +325 	jza	miss
00:0043FE 60B002              +326 	la	arp_row:i_f		. no use resolving on the wrong network
00:0043FF AF0000              +327 	mta	r			. with ideas like autoconf being used
00:004400 B603FB              +328 	j	forward			. and platforms all multihomed
00:004401 CFB006              +329 	dl	arp_row:tpa		
00:004402 7C0406              +330 	jdz	spare
00:004403 DF0006              +331 	dan	NET_ADDR
00:004404 7C040D              +332 	jdz	hit
00:004405 B603FB              +333 	j	forward
  :                            334 
00:004406 700009              +335 spare	tnz	BLANK			. 1st spare in chain is best
00:004407 B60409              +335 
00:004408 180009              +336 	sy	BLANK
00:004409 B603FB              +337 	j	forward
  :                            338 
00:00440A CF0006              +339 miss	dl	NET_ADDR
00:00440B DF05D9              +340 	dan	(00FFFF00FFFF)		. test for broadast last
00:00440C 7C040E              +341 	jdz	big_hit			. unicast traffic is more RT-urgent
00:00440D 350000              +342 hit	lret	0			. return with or without a hit
  :                            343 
(+01)10
00:00440E 5D01A4              +344 big_hit	ly	broadcast_line,,xi
00:00440F 600003              +345 	la	y
00:004410 350000              +346 	lret	0
  :                            347 	
  :                            348 search_heap				. is the heap used up?
(+01)0f
00:004411 5801A2              +349 	ly	arp_next
(+01)10
00:004412 4501A2              +350 	lr	arp_line(ARP_STORE)+ARP_CACHE_WORDS,,xi
00:004413 FE0417              +351 	jyge	eoheap
00:004414 44B008              +352 	lr	ARP_CACHE_WORDS, y, i
(+01)0f
00:004415 0001A2              +353 	sr	arp_next
00:004416 350000              +354 	lret	0
00:004417 5D0000              +355 eoheap	ly	0,,xi
00:004418 350000              +356 	lret	0
  :                            357 
  :                            358 glean_and_push
00:004419 50E004              +359 	lx	descriptor:dgram
00:00441A CFA007              +360 	dl	arp_msg:spa, x
00:00441B 7C043A              +361 	jdz	gleanx		. don't process ZeroConf as ARP
  :                            362 
00:00441C C70006              +363 	ds	NET_ADDR
  :                            364 
00:00441D CFA004              +365 	dl	arp_msg:sha, x	. if there is an accidental zero HA
                                ?	$do	HLEN//2-2,	;
00:00441E 98A006              +367 	orB	arp_msg:sha+2+?-1, x
00:00441F 7C043A              +368 	jdz	gleanx		. don't cache it: it can't help you
  :                            369 
00:004420 40E002              +370 	lr	descriptor:i_f
00:004421 CF0006              +371 	dl	NET_ADDR
00:004422 3E03F5              +372 	lcal	find_in_cacheq	. target protocol address already in 6:7
00:004423 700003              +373 	tz	y
00:004424 B6042F              +374 	j	update
00:004425 580009              +375 	ly	BLANK		. it's free information if
  :                            376 				. we have a slot to store it
00:004426 700003              +377 	tz	y
00:004427 B6042F              +378 	j	update		. found a spare row same # chain
00:004428 3E0411              +379 	lcal	search_heap
00:004429 700003              +380 	tz	y
00:00442A B6042C              +381 	j	insert_update
  :                            382 
00:00442B B6043A              +383 	j	gleanx		. can't keep this information until
  :                            384 				. a cache row times out
  :                            385 
  :                            386 insert_update
00:00442C 60800A              +387 	la	*CHAIN_HEAD	. read address of 1st in chain by pointer
00:00442D 20B000              +388 	sa	arp_row:next	. make that next of new 1st
00:00442E 18800A              +389 	sy	*CHAIN_HEAD	. write new 1st to chain head by pointer
  :                            390 
00:00442F CF0006              +391 update	dl	NET_ADDR
00:004430 C7B006              +392 	ds	arp_row:tpa
00:004431 CFA004              +393 	wphysa	arp_row:tha arp_msg:sha, x
00:004432 C7B003              +393 
00:004433 60A006              +393 
00:004434 20B005              +393 
00:004435 600097              +394 	la	DAYCLOCK$
00:004436 C005C3              +395 	aa	(ARP_REFRESH)
00:004437 20B001              +396 	sa	arp_row:refresh
00:004438 60E002              +397 	la	descriptor:i_f
00:004439 20B002              +398 	sa	arp_row:i_f
  :                            399 
00:00443A 350000              +400 gleanx	lret	0
  :                            401 
  :                            402 
  :                            403 	$if	1
  :                            404 
  :                            405 search_and_indicate
  :                            406 	.	some lousey network boxes
  :                            407 	.	deliver ARP requests on a medium where the sender is not homed
  :                            408 	.	so respond on the interface where it is
  :                            409 
  :                            410 	.	ANYNET replicated addresses aren't replicated in one host
  :                            411 	.	only among attached autoconf networks
  :                            412 
  :                            413 
[+0003]10
00:00443B 550000              +414 	lx	$if0p,,xi
00:00443C 80E002              +415 	ax	descriptor:i_f		. requesting i/f id
00:00443D 40A000              +416 	lr	0, x			. requesting interface
00:00443E 500000              +417 	lx	r
  :                            418 
00:00443F CFB00C              +419 	dl	arp_msg:tpa
00:004440 FF05DB              +420 	call	(ipv4_this_if?)		. found on the shorter list? most frequent case
00:004441 B60446              +421 	j	respond_yes		. the interface is already pointed
  :                            422 
  :                            423 	$if	0
  :                            424 	call	(ipv4_this_host?)	. only search the chain of this interface
  :                            425 	$endif
  :                            426 
00:004442 350000              +427 	lret	0			. not on this interface
  :                            428 
00:004443 50A002              +429 	lx	ifaddr:i_f		. point to the interface where the address is found
[+0003]10
00:004444 850000              +430 	ax	$if0p,,xi
00:004445 40A000              +431 	lr	0, x
  :                            432 
  :                            433 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				r			;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
00:004446 9FB00C              +438 				arp_msg:tpa,,long
00:004447 9FB007              +438 
00:004448 FCB004              +438 
00:004449 F80000              +438 
00:00444A FD0002              +438 
00:00444B FCF007              +438 
00:00444C FF05C4              +438 
00:00444D 38000F              +438 
00:00444E 350000              +439 	lret	0
  :                            440 
  :                            441 	$else
  :                            442 
  :                            443 search_and_indicate		. process a request from outside
  :                            444 	$head_near	scalars(i_f_of_request,	int)
  :                            445 
  :                            446 	lx	descriptor:i_f	. get the interface where the request is
  :                            447 	ax	$if0p,,xi
  :                            448 	lx	0, x		. even if forwarding, we must answer that way
  :                            449 	sx	i_f_of_request
  :                            450 	dl	arp_msg:tpa
  :                            451 	call	(ipv4_4us?)
  :                            452 	j	respond_yes	
  :                            453 	j	respond_no
  :                            454 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				i_f_of_request		;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
  :                            459 				arp_msg:tpa,,long
  :                            460 respond_no
  :                            461 	inc	sp
  :                            462 	lret	0
  :                            463 
  :                            464 	$endif
  :                            465 
  :                            466 
  :                            467 time_test			. y -> ARP cache row for time test
00:00444F 8F0000              +468 	qpush	r
00:004450 CFB006              +469 	dl	arp_row:tpa	. not in use
00:004451 7C0465              +470 	jdz	time_tex
00:004452 C70006              +471 	ds	6
  :                            472 
00:004453 60B001              +473 	la	arp_row:refresh
00:004454 D00097              +474 	ana	DAYCLOCK$	. 24 bits is enough for this timer
00:004455 A60465              +475 	jpa	time_tex
  :                            476 
00:004456 600097              +477 	la	DAYCLOCK$	. restart the refresh timer
00:004457 C005C3              +478 	aa	(ARP_REFRESH)	. before register y gets re-used
00:004458 20B001              +479 	sa	arp_row:refresh
  :                            480 
00:004459 50B002              +481 	lx	arp_row:i_f
[+0003]0f
00:00445A 840000              +482 	ax	$if0p,,i
00:00445B 50A000              +483 	lx	0, x
00:00445C 60A002              +484 	la	this_if:address_list, x
  :                            485 
  :                            486 				. advertise we would like a refresh
  :                            487 				. and restart the timer
  :                            488 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				x			;
                                				0,,xi			;
                                				arp_row:tpa,,long	;
00:00445D 9FC003              +493 				ifaddr:net,a,long
00:00445E 9FB006              +493 
00:00445F FD0000              +493 
00:004460 F80002              +493 
00:004461 FD0001              +493 
00:004462 FCF007              +493 
00:004463 FF05C4              +493 
00:004464 38000F              +493 
  :                            494 time_tex
00:004465 870000              +495 	qpop	r
00:004466 350000              +496 	lret	0
  :                            497 
  :                            55 		$root
  :                            155 	$list		2
  :                            156 	$path
  :                            157 
  :                            158 $(0)
  :                            159 
  :                            160 	$if		HVSOCKET
  :                            167 	$list		2
  :                            168: 	$include	t77.4/hvsocket
  :                            1 SOCKET_LPOINTER $equ	d$save2
  :                            2 
  :                            3 hvsocket	$tree
  :                            4 
  :                            5 $(69::,b)
45:000000                     +6 so	$socket
45:000002                     +6 
45:000004                     +6 
45:000005                     +6 
45:000006                     +6 
45:000007                     +6 
45:000005                     +6 
45:000006                     +6 
45:000007                     +6 
  :                            7 
  :                            8 $(0)
  :                            9 
                                bind	$head_far		 params(sockets,	int	;
                                					port1,		int	;
                                					transmissions,	int	;
  :                            13 					net_address,	long	)
00:004467 CFF006              +14 	dl	net_address
00:004468 2E0008              +15 	sbl	8
00:004469 360008              +16 	dsl	8
00:00446A C7F006              +17 	ds	net_address
  :                            18 
00:00446B 40F003              +19 	lr	sockets
00:00446C B6047F              +20 	j	more?
  :                            21 
00:00446D 00F003              +22 more	sr	sockets
00:00446E 4805BD              +23 	lk	(00FFFF)
00:00446F CFF006              +24 	dl	net_address
00:004470 BFF004              +25 	mlb	port1
00:004471 9F0004              +26 	c	(__bind)	(IPPROTO_TCP*/16)	a,,long
00:004472 F805DC              +26 
00:004473 FCF003              +26 
00:004474 FF05DD              +26 
00:004475 38000F              +26 
00:004476 E60480              +27 	jna	no_more
  :                            28 
00:004477 60059B              +29 	la	(0800000s)
00:004478 20B004              +30 	sa	so:flags, y		. flag uses private buffers
00:004479 30B005              +31 	z	so:tcp:tbase, y		. and does not yet have them
00:00447A 30B007              +32 	z	so:tcp:rxowner, y	. no thread claims the port yet
  :                            33 
00:00447B 60F005              +34 	la	transmissions		. and will have this many
00:00447C 20B006              +35 	sa	so:tcp:tcbs, y		. transmission control blocks
  :                            36 
00:00447D 17F004              +37 	inc	port1
00:00447E 40F003              +38 	lr	sockets
00:00447F 1E046D              +39 more?	jdr	more
  :                            40 no_more
00:004480 3D0000              +41 	$ret
  :                            42 
                                storage	$head_far	scalars(connections,	int			;
                                				caller_ab67,	float,	a		;
                                				caller_rkxy,	float,	r		;
00:004481 FD0000              +46 				bound_address,	float, *SOCKET_LPOINTER+1)
00:004482 8F0004              +46 
00:004483 8F0000              +46 
00:004484 500013              +46 
00:004485 8FA000              +46 
  :                            47 
00:004486 580013              +48 	ly	SOCKET_LPOINTER+1
00:004487 68B006              +49 	lb	so:tcp:tcbs, y		. connections
00:004488 28F00C              +50 	sb	connections		. save max connections
00:004489 2E0003              +51 	sbl	3
00:00448A 600005              +52 	la	b
00:00448B 260001              +53 	sal	1			. * 24 + CHAINS + 8
00:00448C 54D028              +54 	lx	CHAINS+8, b, i		. connections * 24w + 40w
00:00448D 800004              +55 	ax	a
  :                            56 
  :                            57 					. rx buffer start
00:00448E 8005DE              +58 	ax	(BSOCKET*/18s)		. offset by connections tank
  :                            59 
  :                            60 	$if	1
00:00448F 65003F              +61 	la	63,,xi			. this call favours array devices
[+0013]10
00:004490 750000              +62 	ii	TERAFRAME$		. specify PAGES - 1
  :                            63 	$else
  :                            64 	la	(262144)		. specify WORDS - nothing
  :                            65 	ii	BANK$			. with system memoryy as final choice
  :                            66 	$endif
  :                            67 
00:004491 20F008              +68 	sa	caller_ab67		. and that's where is is on return
00:004492 C604C9              +69 	jza	data_x			. zero result
  :                            70 
00:004493 68059F              +71 	lb	(0400000s)		. now has port-dedicated segment+tcb storage
00:004494 98B004              +72 	orB	so:flags, y
00:004495 28B004              +73 	sb	so:flags, y
  :                            74 
00:004496 48B007              +75 	lk	so:tcp:rxowner, y	. waiting socket owner thread if any
00:004497 20B005              +76 	sa	so:tcp:tbase, y
00:004498 10B006              +77 	sx	so:tcp:rxbu_p, y
00:004499 6805DF              +78 	lb	(BSOCKET*/18++131072:s)
00:00449A 28B007              +79 	sb	so:tcp:txbu_p, y
  :                            80 
00:00449B 580004              +81 	ly	a			. drop port socket address window
00:00449C 602185              +82 	la	tcx_v4(1)		. open 1st transmissions table
00:00449D 34002F              +83 	sabr	BSOCKET			. get maintenance chain head pointer
00:00449E 4085E0              +84 	lr	*(BSOCKET*/12++tlist:link)	. from 1st transmissions table
00:00449F 1885E0              +85 	sy	*(BSOCKET*/12++tlist:link)	. replace chain head pointer
00:0044A0 600003              +86 	la	y
  :                            87 					. drop addressing to 1st transmissions table
00:0044A1 34002F              +88 	sabr	BSOCKET			. prime the new connections + buffers array
00:0044A2 0085E0              +89 	sr	*(BSOCKET*/12++tlist:link)	. maintenance chain point forward
00:0044A3 1085E1              +90 	sx	*(BSOCKET*/18++tlist:rxbu_p:s)	. upper limit transmission blocks
00:0044A4 2885E2              +91 	sb	*(BSOCKET*/18++tlist:txbu_p:s)	. + rx + tx buffer pointers
00:0044A5 0885E3              +92 	sk	*(BSOCKET*/18++tlist:rxowner:s)	. thread control block waiting socket owner
00:0044A6 10F006              +93 	sx	caller_rkxy+2
  :                            94 
00:0044A7 3085E4              +95 	z	*(BSOCKET*/12++tlist:txchain)	. zero forward pointer
  :                            96 						. in frames transmission list
  :                            97 
00:0044A8 600005              +98 	la	b			. start of tx buffer
00:0044A9 D00002              +99 	ana	x			. minus start of rx buffer
00:0044AA FF05E5              +100 	call	(far_initpool)
  :                            101 
00:0044AB 5005DF              +102 	lx	(BSOCKET*/18++131072:s)
00:0044AC 6005E6              +103 	la	(131072)
00:0044AD FF05E5              +104 	call	(far_initpool)
  :                            105 
00:0044AE 5005DE              +106 	lx	(BSOCKET*/18s)
00:0044AF 30A001              +107 	z	tlist:free
  :                            108 
  :                            109 .	z	tlist:link		. original ->null is rippled forward from 1st block
  :                            110 
00:0044B0 64A040              +111 	la	tlist:connection_block(2),,i		. 1st in block is q-concentrator
00:0044B1 20A002              +112 	sa	tlist:top
00:0044B2 60059B              +113 	la	(0800000s)
00:0044B3 20A006              +114 	sa	tlist:flags
  :                            115 
  :                            116 
  :                            117 					. this part configures the guideline segment size
  :                            118 					. for assignment if high-volume socket does
  :                            119 					. a stream transmit, i.e. without TCP_PSH
  :                            120 					. in order to construct output serially
  :                            121 					. the derived figure is stored in concentrator connection
  :                            122 					. (a transmission control block which is not a connection):
  :                            123 
  :                            124 					. 	tlist:connection_block(1):mss
  :                            125 
  :                            126 					. and is not the MSS derived as a function of MTU
  :                            127 
00:0044B4 68F00C              +128 	lb	connections		. retrieve maximum connections
00:0044B5 2E0004              +129 	sbl	4			. let each connection occupy 2 descriptors
00:0044B6 6005E7              +130 	la	(131072-264)		. TX block minus management chains
00:0044B7 D00005              +131 	ana	b			. minus estimated frame descriptors
00:0044B8 16001D              +132 	dsr	24+5			. available words / 32 = avaliable blocks
00:0044B9 F0F00C              +133 	d	connections		. / maximum connections
00:0044BA 260006              +134 	sal	6			. bytes * blocks 
00:0044BB C5FFB8              +135 	aa	-20-20-32,,xi		. protocol headers frame header / preamble
  :                            136 
00:0044BC 2085E8              +137 	sa	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            138 
00:0044BD 450007              +139 	lr	CHAINS//4-1,,xi
00:0044BE 160030              +140 	dsr	48
00:0044BF C70006              +141 	ds	6
  :                            142 
00:0044C0 47A008              +143 data_qz	qs	tlist:chain(1)
00:0044C1 850004              +144 	ax	4,,xi
00:0044C2 1E04C0              +145 	jdr	data_qz
  :                            146 
00:0044C3 5005DE              +147 	lx	(BSOCKET*/18s)
  :                            148 
00:0044C4 4FF000              +149 	ql	bound_address
00:0044C5 47A02E              +150 	qs	tlist:connection_block(1):socket_address
00:0044C6 30A02B              +151 	z	tlist:connection_block(1):tsq
00:0044C7 30A038              +152 	z	tlist:connection_block(1):receiveq:head
00:0044C8 30A03E              +153 	z	tlist:connection_block(1):q4ack:head
  :                            154 
00:0044C9 87F000              +155 data_x	qpop	0, sp
00:0044CA 870000              +156 	qpop	r
00:0044CB 870004              +157 	qpop	a
00:0044CC 17000F              +158 	inc	sp			. drop connections word
00:0044CD 3D0000              +159 	fret	0
  :                            160 
  :                            161 $(67::,y)
43:000000                     +162 array	$socket_array
43:000001                     +162 
43:000002                     +162 
43:000003                     +162 
43:000004                     +162 
  :                            163 
  :                            164 $(66::,x)
42:000000                     +165 transmission tcp_connection
42:000001                     +165 
42:000002                     +165 
42:000003                     +165 
42:000004                     +165 
42:000005                     +165 
42:000006                     +165 
42:000008                     +165 
42:00000A                     +165 
42:00000C                     +165 
42:00000E                     +165 
42:000010                     +165 
42:000011                     +165 
42:000012                     +165 
42:000013                     +165 
42:000014                     +165 
42:000015                     +165 
42:000016                     +165 
42:000017                     +165 
  :                            166 
  :                            167 $(0)
  :                            168 
00:0044CE FF05E9              +169 qreadq	call	(hvsocket_readq)
00:0044CF 5085EA              +170 	lx	*(BSOCKET*/12++tlist:rxbu_p)
00:0044D0 700004              +171 	tz	a
00:0044D1 FF0598              +172 	call	(if_sell1)
00:0044D2 350000              +173 	lret	0
  :                            174 
  :                            175 .	vector name hvsocket:rx
  :                            176 
                                rx	$head_far	 params(sockets_p,	int	;
                                				tcb_p,		int	;
                                				buffer,		int	;
                                				data_bytes,	int	;
  :                            181 				rx_flags,	int	)
  :                            182 
00:0044D3 60F003              +183 	la	sockets_p		. the port number
00:0044D4 FF05EB              +184 	call	(connection_array)
00:0044D5 B604EB              +185 	j	rx_type_wrong		. port wrong for this operation
  :                            186 
00:0044D6 6085EC              +187 	la	*(BSOCKET*/12++tlist:connection_block(1)+transmission:receiveq.head)
00:0044D7 C604EB              +188 	jza	rx_all_read
00:0044D8 58C007              +189 	ly	descriptor:tcbloc, a
00:0044D9 18F004              +190 	sy	tcb_p			. for now the parameter is wildcard
00:0044DA 58C006              +191 	ly	descriptor:apdata, a
00:0044DB 68C003              +192 	lb	descriptor:bytes, a
00:0044DC A805A5              +193 	andB	(03FFFFF)
00:0044DD DE04E0              +194 	jnzb	rx_nonzero
00:0044DE 3E04CE              +195 	lcal	qreadq
00:0044DF B604EC              +196 	j	rx_zero
  :                            197 
  :                            198 rx_nonzero
00:0044E0 400005              +199 	lr	b
00:0044E1 50F006              +200 	lx	data_bytes
00:0044E2 F604E4              +201 	jxge	space_allowed
00:0044E3 40F006              +202 	lr	data_bytes		. accept less than the message
  :                            203 
  :                            204 space_allowed
00:0044E4 00F006              +205 	sr	data_bytes
00:0044E5 50F005              +206 	lx	buffer
00:0044E6 3E0510              +207 	lcal	block_read
  :                            208 
00:0044E7 78F007              +209 	tp	rx_flags
00:0044E8 B604ED              +210 	j	rx_result		. don't drop the input
  :                            211 
00:0044E9 3E04CE              +212 	lcal	qreadq			. do drop the input
00:0044EA B604ED              +213 	j	rx_result
  :                            214 
  :                            215 rx_type_wrong
  :                            216 rx_all_read
00:0044EB 30F004              +217 	z	tcb_p			. tell caller no traffic these connections
00:0044EC 30F006              +218 rx_zero	z	data_bytes		. tell caller no traffic or remote close
  :                            219 
  :                            220 rx_result
00:0044ED 650000              +221 	la	0,,xi
00:0044EE 34002F              +222 	sabr	BSOCKET			. close the gate
00:0044EF 60F006              +223 	la	data_bytes		. report how many bytes
00:0044F0 68F004              +224 	lb	tcb_p			. connection identifier
00:0044F1 3D0000              +225 	$ret
  :                            226 
  :                            227 .	vector name hvsocket_tx
  :                            228 
                                tx	$head_far	 params(socket_p,	int	;
                                				socket_q,	int	;
                                				response,	int	;
                                				bytes,		int	;
                                				xmit_flags,	int)	;
                                							;
00:0044F2 8F0014              +235 			scalars(caller_rdatac,	float,	RDATAC)
  :                            236 
  :                            237 
00:0044F3 60F007              +238 	la	socket_p	. port #
00:0044F4 FF05EB              +239 	call	(connection_array)
00:0044F5 B60505              +240 	j	tx_mismatch
  :                            241 
00:0044F6 50F008              +242 	lx	socket_q	. connection->
00:0044F7 60A007              +243 	la	transmission:socket_address+1
00:0044F8 A005BD              +244 	and	(00FFFF)
00:0044F9 B0F007              +245 	xor	socket_p
00:0044FA D60505              +246 	jnza	tx_mismatch	. well it should be the same
  :                            247 
  :                            248 .	lb	response
  :                            249 .	sb	q
  :                            250 	$do	0,	lcal	wherefore
  :                            251 
00:0044FB 60F00B              +252 	la	xmit_flags
00:0044FC A50008              +253 	and	TCP_PSH,,xi
00:0044FD 955010              +254 	or	05000++TCP_ACK,,xi
00:0044FE 480004              +255 	lk	a
00:0044FF 68F009              +256 	lb	response
  :                            257 .	sb	SOCKET_CALL_FLAGS
  :                            258 .	jnza	txx		. segment size is transmission size @ socket
  :                            259 				. mss allows some accumulation instead
  :                            260 
  :                            261 .	la	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            262 .	sa	transmission:mss
  :                            263 
00:004500 60F00A              +264 txx	la	bytes
00:004501 FF05ED              +265 	call	(tcp_tx)
  :                            266 	$do	0,	lcal	wherefore
00:004502 C60504              +267 	jza	tx_zero
00:004503 A60505              +268 	jpa	tx_complete
  :                            269 
  :                            270 tx_zero
  :                            271 tx_minus
  :                            272 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outerrs,0,xi	1,,xi
  :                            273 
00:004504 B60505              +274 	j	tx_complete
  :                            275 
  :                            276 tx_mismatch	
  :                            277 	$do	0,	lcal	wherefore
  :                            278 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outdrops,0,xi	1,,xi
  :                            279 
  :                            280 tx_complete
00:004505 870014              +281 	qpop	RDATAC		. stream / simd registers saved at function head
00:004506 3D0000              +282 	fret	0
  :                            283 
  :                            284 .	vector name hvsocket_close closes a connection
  :                            285 
                                close	$head_far	 params(close_hvport,		int	;
  :                            287 				close_connection,	int	)
  :                            288 
00:004507 60F003              +289 	la	close_hvport
00:004508 FF05EB              +290 	call	(connection_array)
00:004509 B6050E              +291 	j	close_y
00:00450A 50F004              +292 	lx	close_connection
00:00450B 0FA001              +293 	n	transmission:state
00:00450C 650000              +294 	la	0,,xi
00:00450D B6050F              +295 	j	close_z
  :                            296 
00:00450E 65FFEA              +297 close_y	la	-BAD_ARGUMENT,,xi
00:00450F 3D0000              +298 close_z	$ret
  :                            299 
  :                            300 	$if	0
  :                            301 wherefore
  :                            302 	lb     -061,,xi
  :                            303 	ab     sp
  :                            304 	jnzb   weh
  :                            305 	lb     -0a6,,xi
  :                            306 	ab     6, sp
  :                            307 	jnzb    weh
  :                            308 	lret	0
  :                            309 weh	ii     GUARD$
  :                            310 	$endif
  :                            311 
  :                            312 block_read
00:004510 680000              +313 	lb	r
00:004511 6CD001              +314 	lb	1, b, i		. containing transfer size
00:004512 0E0001              +315 	sbr	1		. in socket buffer words
00:004513 F80005              +316 	push	b		. save containing network words
00:004514 F80003              +317 	push	y		. save network string start
  :                            318 
00:004515 4805BD              +319 	lk	(00FFFF)
00:004516 E805EE              +320 	mf	(0555556)	. one third downrounded
  :                            321 				. words in socket buffer
  :                            322 
00:004517 400004              +323 	lr	a
00:004518 B60520              +324 	j	read6?
  :                            325 
00:004519 CFB000              +326 read6	dl	0, y		. compress 3 socket buffer words
00:00451A 2E0008              +327 	sbl	8
00:00451B 360008              +328 	dsl	8
00:00451C BFB002              +329 	mlb	2, y
00:00451D C7A000              +330 	ds	0, x
00:00451E 850002              +331 	ax	2,,xi
00:00451F 8D0003              +332 	ay	3,,xi
00:004520 1E0519              +333 read6?	jdr	read6
  :                            334 
00:004521 380000              +335 	pop	r		.   socket buffer containing words
00:004522 2F0000              +336 	popA	r		. + socket buffer start = rx limit
  :                            337 
00:004523 FE052F              +338 	jyge	read_0		. all rx words are read
00:004524 1F0000              +339 	dec	r		. already read
00:004525 FE052B              +340 	jyge	read_1		. to 1 word less than transfer?
  :                            341 
00:004526 CFB000              +342 	dl	0, y		. not zero words and not 1 word
00:004527 2E0008              +343 	sbl	8		. = 2 words
00:004528 360008              +344 	dsl	8		. compress them
00:004529 C7A000              +345 	ds	0, x		. that leaves 2 trailing zero bytes
00:00452A 350000              +346 	lret	0		. whether data is string text or not
  :                            347 
00:00452B 60B000              +348 read_1	la	0, y		. 1 more input word
00:00452C 260008              +349 	sal	8		. align to packed input
00:00452D 20A000              +350 	sa	0, x		. that leaves 1 trailing zero byte
00:00452E 350000              +351 	lret	0		. whether data is string text or not
  :                            352 
00:00452F 30A000              +353 read_0	z	0, x		. guarantee at least 1 zero byte
00:004530 350000              +354 	lret	0		. whether data is string text or not
  :                            355 
  :                            356 .	vector name	hvsocket_readq
  :                            357 .	does not release the buffer
  :                            358 .	hvsocket_rx without flag 800000 calls this then sell1
  :                            359 
00:004531 5005EF              +360 readq	lx	(BSOCKET*/12++tlist:connection_block(1))
00:004532 FD0007              +361 	LOCK	transmission:tsq
00:004533 27F000              +361 
00:004534 07A003              +361 
00:004535 B60534              +361 
00:004536 60A010              +362 	la	transmission:receiveq.head
00:004537 C6053A              +363 	jza	readq_clear
00:004538 F8C000              +364 	push	descriptor:next, a
00:004539 38A010              +365 	pop	transmission:receiveq.head
  :                            366 
  :                            367 readq_clear
00:00453A 30A003              +368 	FREE	transmission:tsq
00:00453B 27F000              +368 
00:00453C 17000F              +368 
00:00453D 3D0000              +369 	fret	0
  :                            370 
  :                            371 .	vector name	connection_array
  :                            372 
00:00453E FF05F0              +373 locate	call	(__tcp_socket)
00:00453F C60547              +374 	jza	not_assigned
00:004540 60D004              +375 	la	so:flags			. high volume port?
00:004541 A60547              +376 	jpa	not_high_volume			. no
00:004542 A0059F              +377 	and	(0400000)			. memory assigned?
00:004543 C60547              +378 	jza	not_initialised			. no
00:004544 60D005              +379 	la	so:tcp:tbase
00:004545 34002F              +380 	sabr	BSOCKET
00:004546 3D0001              +381 	fret	1				. available and based
  :                            382 
  :                            383 not_assigned
  :                            384 not_high_volume
  :                            385 not_initialised
00:004547 3D0000              +386 	fret	0				. not available
  :                            387 
                                xbind	$head_far	 params(xbind_port1,	int	;
                                				xbind_portz,	int	;
  :                            390 				xbind_spring_q,	int	)
  :                            391 
  :                            392 xbind_next
00:004548 50F003              +393 	lx	xbind_port1
00:004549 40F004              +394 	lr	xbind_portz
00:00454A F60561              +395 	jxge	xbindx
00:00454B 600002              +396 	la	x
00:00454C 17F003              +397 	inc	xbind_port1
  :                            398 		
00:00454D FF05F0              +399 	call	(__tcp_socket)
00:00454E C60548              +400 	jza	xbind_next
00:00454F 60D004              +401 	la	so:flags
00:004550 A60548              +402 	jpa	xbind_next
00:004551 A0059F              +403 	and	(0400000)			. dedicated storage assigned?
00:004552 580005              +404 	ly	b
00:004553 C6055C              +405 	jza	pending_1st_traffic		. not yet
00:004554 60D005              +406 	la	so:tcp:tbase		
00:004555 34002F              +407 	sabr	BSOCKET
00:004556 040041              +408 	inA	65				. thread control block <- connection array
  :                            409 
00:004557 5005DE              +410 	lx	(BSOCKET*/18s)
  :                            411 
00:004558 20A007              +412 	sa	tlist:rxowner, x
00:004559 60F005              +413 	la	xbind_spring_q
00:00455A 20A031              +414 	sa	tlist:connection_block(1):remote_address+1
  :                            415 
00:00455B B60548              +416 	j	xbind_next
  :                            417 
  :                            418 pending_1st_traffic			. dedicated storage first assigned on traffic
00:00455C 040041              +419 	inA	65			. thread control block
00:00455D 20B007              +420 	sa	so:tcp:rxowner, y	. cached in socket structure until then
  :                            421 
00:00455E 60F005              +422 	la	xbind_spring_q
00:00455F 20B003              +423 	sa	so:remote_address+1, y
  :                            424 
00:004560 B60548              +425 	j	xbind_next
  :                            426 	
00:004561 3D0000              +427 xbindx	$ret
  :                            428 
  :                            429 write_rxq
00:004562 F80002              +430         push    x
00:004563 10C007              +431         sx      descriptor:tcbloc, a    . needed later
00:004564 5005EF              +432         lx      (BSOCKET*/12++tlist:connection_block(1)
  :                            433 
00:004565 FD0007              +434         LOCK    transmission:tsq
00:004566 27F000              +434 
00:004567 07A003              +434 
00:004568 B60567              +434 
00:004569 5CA010              +435         ly      transmission:receiveq,,i
  :                            436 
00:00456A 30C000              +437 	z	descriptor:next, a
00:00456B 70B000              +438         tz	rxq2:head
00:00456C B6056F              +439 	j	write_rxq_tail
00:00456D 20B000              +440 	sa	rxq2:head 
00:00456E B60571              +441 	j	write_after_rxq_tail
  :                            442 write_rxq_tail
00:00456F 68B001              +443 	lb	rxq2:tail
00:004570 20D000              +444 	sa	descriptor:next, b
  :                            445 write_after_rxq_tail
00:004571 20B001              +446 	sa	rxq2:tail
  :                            447 
00:004572 6085F1              +448         la      *(BSOCKET*/12++tlist:rxowner)
00:004573 C60575              +449         jza     tcp_free_rxq            . no-one asked to know
00:004574 3E057A              +450         lcal    notify			. new receiveq:head this connection array
  :                            451 
  :                            452 tcp_free_rxq
00:004575 30A003              +453         FREE    transmission:tsq
00:004576 27F000              +453 
00:004577 17000F              +453 
00:004578 380002              +454         pop     x
00:004579 3D0000              +455 	fret	0
  :                            456 					. inbound segment queue-write
  :                            457 					. calls notify under lock
  :                            458 					. x -> connection block(1) of connnection table
00:00457A 6805F2              +459 notify	lb	(TIME_WAIT++ACTIVATE:s)
00:00457B 75005D              +460 	ii	EVENT_FREE$
  :                            461 
  :                            462 	$if	__SPRING_LOAD
  :                            463 	la	transmission:remote_address+1
  :                            464 	jza	notification_not_listed
  :                            465 	tp	transmission:state
  :                            466 	j	notification_queued
  :                            467 	n	transmission:state
  :                            468 	c	(spring_load)	a	0,,BASE_SOCKET	. [ tumble_page connections_table ]
  :                            469 
  :                            470 notification_queued
  :                            471 notification_not_listed
  :                            472 	$endif
  :                            473 
00:00457C 350000              +474 	lret	0
  :                            475 
  :                            476 	$root
  :                            169: 	$include	t77.4/window
  :                            1 
  :                            2 window	$tree
00:00457D 8F0000              +3 	qpush	r				. calulate in b
  :                            4 						. return calculated window in b
  :                            5 	$if	0
  :                            6 	tz	transmission:receiveq:head	. dont get above 2 segments
  :                            7 	j	zero				. waiting pro connection
  :                            8 	$endif
  :                            9 
00:00457E 5885E1              +10 	ly	*(+(BSOCKET*/18++tlist:rxbu_p)s)
00:00457F 68B001              +11 	lb	pool:next, y
00:004580 D8D001              +12 	anb	descriptor:frame, b		. free buffer above heap top
  :                            13 
  :                            14 						. the more stringent path for
  :                            15 						. for better service durability
  :                            16 						. read log MAXIMUM connections
  :                            17 
00:004581 6085F3              +18 	la	*(+(BSOCKET*/18++tlist:connection_block(1):timer(2))s)
00:004582 0EC005              +19 	sbr	5, a				. convert to blocks / maximum connections
00:004583 2E0006              +20 	sbl	6				. -> bytes / maximum connections
00:004584 CDFF28              +21 	ab	-40*3-32*3,,xi			. subtract likely overheads
00:004585 5E058B              +22 	jnc	zero				. carry is zero+
  :                            23 
00:004586 400005              +24 	lr	b				. is the allowed window larger than MSS for i / f ?
00:004587 5085E8              +25 	lx	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)	. this isn't likely based on
  :                            26 						.			. MAXIMUM connections
00:004588 F6058C              +27 	jxge	final				. not larger, no
00:004589 680002              +28 	lb	x
00:00458A B6058C              +29 	j	final
  :                            30 
  :                            31 						. forget counting freechains
  :                            32 						. you have a buffer pool free-heap compressor
  :                            33 						. working hard to do that			
  :                            34 
00:00458B 6D0000              +35 zero	lb	0,,xi
00:00458C 870000              +36 final	qpop	r				. calculation returns in b
00:00458D 3D0000              +37 	fret	0
  :                            38 
  :                            39 	$root
  :                            170 
  :                            171 	$path
  :                            172 	$endif
  :                            173 
  :                            174 
  :                            175 
  :                            176 net_callstring
  :                            177 
  :                            178 .	vector name	tnet_callstring
  :                            179 
00:00458E F80004              +180 	push		a
00:00458F 340020              +181 	sabr		32
00:004590 50A010              +182 	lx		transmission:receiveq:head
00:004591 40A003              +183 	lr		descriptor:bytes, x
00:004592 58A006              +184 	ly		descriptor:apdata, x
00:004593 5005F4              +185 	lx		(32*/12++APP_CALL_STRING-01000)
  :                            186 	
00:004594 3E0510              +187 	lcal		hvsocket:block_read
  :                            188 
00:004595 380004              +189 	pop		a
00:004596 3D0000              +190 	fret		0
  :                            191 
  :                            192 	$do	$<256,$(0:256)
  :                            193 	$do	$zenith>4096,	$flag	driver bank literal table partly invisible
  :                            194 
*EOF*
00:004597+[0000]18:000000
00:004598+[0001]18:000000
00:004599+008000
00:00459a+820000
00:00459b+800000
00:00459c+02F004
00:00459d+000104
00:00459e+01FC00
00:00459f+400000
00:0045a0+1FFFC0
00:0045a1+40003F
00:0045a2+840000
00:0045a3+00000A4C4B40
00:0045a5+3FFFFF
00:0045a6+000000
00:0045a7+400002
00:0045a8+83FC00
00:0045a9+1FFFFF
00:0045aa+008000000000000000000000
00:0045ae+006969
00:0045af+[0004]18:000000
00:0045b0+00006C
00:0045b1+000001
00:0045b2+000105
00:0045b3+000000000000000000000000
00:0045b7+000106
00:0045b8+000107
00:0045b9+00010C00010A00010900010B
00:0045bd+00FFFF
00:0045be+000131
00:0045bf+000040
00:0045c0+[000D]18:000000
00:0045c1+[000E]18:000000
00:0045c2+[000F]18:000000
00:0045c3+124F80
00:0045c4+00010A
00:0045c5+000001000800
00:0045c7+000604
00:0045c8+000000000000000000000000000000000000000000000000
00:0045d0+00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF
00:0045d8+[0010]18:000000
00:0045d9+00FFFF00FFFF
00:0045db+[0011]18:000000
00:0045dc+060000
00:0045dd+[0012]18:000000
00:0045de+BC0000
00:0045df+BE0000
00:0045e0+02F000
00:0045e1+BC0003
00:0045e2+BC0004
00:0045e3+BC0007
00:0045e4+02F005
00:0045e5+[0014]18:000000
00:0045e6+020000
00:0045e7+01FEF8
00:0045e8+BC002A
00:0045e9+000134
00:0045ea+02F003
00:0045eb+000135
00:0045ec+02F038
00:0045ed+[0015]18:000000
00:0045ee+555556
00:0045ef+02F028
00:0045f0+[0016]18:000000
00:0045f1+02F007
00:0045f2+800020
00:0045f3+BC002D
00:0045f4+020C00
:$(00):004000:0045F5 :$(01):000000:0001AC :$(02):002000:003000 :$(42):000000:000018 :$(43):000000:000005 :$(45):000000:000008 :$(47):000000:00000A 
drivers.msm: object code 13038 bytes: 0 errors: 23 undefined labels

MASMX 7r3A Build 12
3/drivers.msm
*EOF*
  :                            33 	$list
  :                            34 
  :                            35 $(66::,x)
  :                            36 ?	$set	1
42:000000                     +37 this_if i_f
42:000001                     +37 
42:000002                     +37 
42:000003                     +37 
42:000004                     +37 
42:000005                     +37 
42:000006                     +37 
42:000008                     +37 
42:00000A                     +37 
42:00000C                     +37 
42:00000E                     +37 
42:000010                     +37 
42:000012                     +37 
42:000014                     +37 
42:000016                     +37 
42:000018                     +37 
42:00001A                     +37 
42:00001C                     +37 
42:00001E                     +37 
42:000020                     +37 
42:000022                     +37 
42:000023                     +37 
42:000024                     +37 
42:000025                     +37 
42:000026                     +37 
42:000027                     +37 
42:000028                     +37 
42:000029                     +37 
42:00002A                     +37 
42:00002B                     +37 
42:00002C                     +37 
42:00002D                     +37 
42:00002E                     +37 
42:00002F                     +37 
42:000030                     +37 
42:000031                     +37 
42:000032                     +37 
42:000033                     +37 
42:000034                     +37 
42:000035                     +37 
42:000036                     +37 
42:000037                     +37 
42:000038                     +37 
42:000039                     +37 
42:00003A                     +37 
42:00003B                     +37 
42:00003C                     +37 
42:00003D                     +37 
42:00003E                     +37 
42:00003F                     +37 
42:000040                     +37 
42:000041                     +37 
42:000042                     +37 
42:000043                     +37 
  :                            38 __IF_SIZE	$set	$
  :                            39 
  :                            40 $(70::,fp)
  :                            41 descriptor	acw
  :                            42 
  :                            43 $(67::,y)
43:000000                     +44 rxq2		dq
43:000001                     +44 
  :                            45 
  :                            46 $(67::,y)
43:000000                     +47 xmit_list	dq
43:000001                     +47 
  :                            48 
  :                            49 $(66::,x)
42:000000                     +50 pool		mpool
42:000001                     +50 
42:000002                     +50 
42:000003                     +50 
42:000004                     +50 
42:000005                     +50 
42:000006                     +50 
42:000007                     +50 
42:000008                     +50 
42:000009                     +50 
42:00000A                     +50 
42:00000B                     +50 
42:00000C                     +50 
42:00000D                     +50 
42:00000E                     +50 
42:00000F                     +50 
42:000010                     +50 
42:000011                     +50 
42:000012                     +50 
42:000013                     +50 
42:000014                     +50 
42:000015                     +50 
42:000016                     +50 
42:000017                     +50 
42:000018                     +50 
42:000019                     +50 
42:00001A                     +50 
42:00001B                     +50 
42:00001C                     +50 
42:00001D                     +50 
42:00001E                     +50 
42:00001F                     +50 
42:000020                     +50 
42:000021                     +50 
42:000022                     +50 
42:000023                     +50 
42:000024                     +50 
42:000025                     +50 
42:000026                     +50 
42:000027                     +50 
42:000028                     +50 
42:000029                     +50 
42:00002A                     +50 
42:00002B                     +50 
42:00002C                     +50 
42:00002D                     +50 
42:00002E                     +50 
42:00002F                     +50 
42:000030                     +50 
42:000031                     +50 
42:000032                     +50 
42:000033                     +50 
42:000034                     +50 
42:000035                     +50 
42:000036                     +50 
42:000037                     +50 
42:000038                     +50 
42:000039                     +50 
42:00003A                     +50 
42:00003B                     +50 
42:00003C                     +50 
42:00003D                     +50 
42:00003E                     +50 
42:00003F                     +50 
42:000040                     +50 
42:000041                     +50 
42:000042                     +50 
42:000043                     +50 
42:000044                     +50 
42:000045                     +50 
42:000046                     +50 
42:000047                     +50 
42:000048                     +50 
42:000049                     +50 
42:00004A                     +50 
42:00004B                     +50 
42:00004C                     +50 
42:00004D                     +50 
42:00004E                     +50 
42:00004F                     +50 
42:000050                     +50 
42:000051                     +50 
42:000052                     +50 
42:000053                     +50 
42:000054                     +50 
42:000055                     +50 
42:000056                     +50 
42:000057                     +50 
42:000058                     +50 
42:000059                     +50 
42:00005A                     +50 
42:00005B                     +50 
42:00005C                     +50 
42:00005D                     +50 
42:00005E                     +50 
42:00005F                     +50 
42:000060                     +50 
42:000061                     +50 
42:000062                     +50 
42:000063                     +50 
42:000064                     +50 
42:000065                     +50 
42:000066                     +50 
42:000067                     +50 
42:000068                     +50 
42:000069                     +50 
42:00006A                     +50 
42:00006B                     +50 
42:00006C                     +50 
42:00006D                     +50 
42:00006E                     +50 
42:00006F                     +50 
42:000070                     +50 
42:000071                     +50 
42:000072                     +50 
42:000073                     +50 
42:000074                     +50 
42:000075                     +50 
42:000076                     +50 
42:000077                     +50 
42:000078                     +50 
42:000079                     +50 
42:00007A                     +50 
42:00007B                     +50 
42:00007C                     +50 
42:00007D                     +50 
42:00007E                     +50 
42:00007F                     +50 
42:000080                     +50 
42:000081                     +50 
42:000082                     +50 
42:000083                     +50 
42:000084                     +50 
42:000085                     +50 
42:000086                     +50 
42:000087                     +50 
42:000088                     +50 
42:000089                     +50 
42:00008A                     +50 
42:00008B                     +50 
42:00008C                     +50 
42:00008D                     +50 
42:00008E                     +50 
42:00008F                     +50 
42:000090                     +50 
42:000091                     +50 
42:000092                     +50 
42:000093                     +50 
42:000094                     +50 
42:000095                     +50 
42:000096                     +50 
42:000097                     +50 
42:000098                     +50 
42:000099                     +50 
42:00009A                     +50 
42:00009B                     +50 
42:00009C                     +50 
42:00009D                     +50 
42:00009E                     +50 
42:00009F                     +50 
42:0000A0                     +50 
42:0000A1                     +50 
42:0000A2                     +50 
42:0000A3                     +50 
42:0000A4                     +50 
42:0000A5                     +50 
42:0000A6                     +50 
42:0000A7                     +50 
42:0000A8                     +50 
42:0000A9                     +50 
42:0000AA                     +50 
42:0000AB                     +50 
42:0000AC                     +50 
42:0000AD                     +50 
42:0000AE                     +50 
42:0000AF                     +50 
42:0000B0                     +50 
42:0000B1                     +50 
42:0000B2                     +50 
42:0000B3                     +50 
42:0000B4                     +50 
42:0000B5                     +50 
42:0000B6                     +50 
42:0000B7                     +50 
42:0000B8                     +50 
42:0000B9                     +50 
42:0000BA                     +50 
42:0000BB                     +50 
42:0000BC                     +50 
42:0000BD                     +50 
42:0000BE                     +50 
42:0000BF                     +50 
42:0000C0                     +50 
42:0000C1                     +50 
42:0000C2                     +50 
42:0000C3                     +50 
42:0000C4                     +50 
42:0000C5                     +50 
42:0000C6                     +50 
42:0000C7                     +50 
42:0000C8                     +50 
42:0000C9                     +50 
42:0000CA                     +50 
42:0000CB                     +50 
42:0000CC                     +50 
42:0000CD                     +50 
42:0000CE                     +50 
42:0000CF                     +50 
42:0000D0                     +50 
42:0000D1                     +50 
42:0000D2                     +50 
42:0000D3                     +50 
42:0000D4                     +50 
42:0000D5                     +50 
42:0000D6                     +50 
42:0000D7                     +50 
42:0000D8                     +50 
42:0000D9                     +50 
42:0000DA                     +50 
42:0000DB                     +50 
42:0000DC                     +50 
42:0000DD                     +50 
42:0000DE                     +50 
42:0000DF                     +50 
42:0000E0                     +50 
42:0000E1                     +50 
42:0000E2                     +50 
42:0000E3                     +50 
42:0000E4                     +50 
42:0000E5                     +50 
42:0000E6                     +50 
42:0000E7                     +50 
42:0000E8                     +50 
42:0000E9                     +50 
42:0000EA                     +50 
42:0000EB                     +50 
42:0000EC                     +50 
42:0000ED                     +50 
42:0000EE                     +50 
42:0000EF                     +50 
42:0000F0                     +50 
42:0000F1                     +50 
42:0000F2                     +50 
42:0000F3                     +50 
42:0000F4                     +50 
42:0000F5                     +50 
42:0000F6                     +50 
42:0000F7                     +50 
42:0000F8                     +50 
42:0000F9                     +50 
42:0000FA                     +50 
42:0000FB                     +50 
42:0000FC                     +50 
42:0000FD                     +50 
42:0000FE                     +50 
42:0000FF                     +50 
42:000100                     +50 
42:000101                     +50 
42:000102                     +50 
42:000103                     +50 
  :                            51 
  :                            52 $(66::, x)
  :                            53 nframe  	netframe
  :                            54 
  :                            55 	$if	0
  :                            56 $(66::,x)
  :                            57 ifaddr		netv4
  :                            58 
  :                            59 $(71::,sp)
  :                            60 dgram		datagram
  :                            61 	$endif
  :                            62 
  :                            63 $(66::, x)
42:000000                     +64 ro		route
42:000001                     +64 
42:000002                     +64 
42:000003                     +64 
42:000005                     +64 
42:000007                     +64 
42:000009                     +64 
42:00000A                     +64 
  :                            65 
  :                            66 $(69::,b)
45:000000                     +67 so		$socket
45:000002                     +67 
45:000004                     +67 
45:000005                     +67 
45:000006                     +67 
45:000007                     +67 
45:000005                     +67 
45:000006                     +67 
45:000007                     +67 
  :                            68 
  :                            69 $(66::, x)
42:000000                     +70 uugram	udgram
42:000001                     +70 
42:000002                     +70 
42:000003                     +70 
  :                            71 
  :                            72 $(66::, x)
42:000000                     +73 transmission	tcp_connection
42:000001                     +73 
42:000002                     +73 
42:000003                     +73 
42:000004                     +73 
42:000005                     +73 
42:000006                     +73 
42:000008                     +73 
42:00000A                     +73 
42:00000C                     +73 
42:00000E                     +73 
42:000010                     +73 
42:000011                     +73 
42:000012                     +73 
42:000013                     +73 
42:000014                     +73 
42:000015                     +73 
42:000016                     +73 
42:000017                     +73 
  :                            74 
  :                            75 $(66::, x)	
42:000000                     +76 transfer	segment
42:000001                     +76 
42:000002                     +76 
42:000004                     +76 
42:000006                     +76 
42:000007                     +76 
42:000008                     +76 
42:000009                     +76 
42:00000A                     +76 
  :                            77 
  :                            78 $(66::, x)
42:000000                     +79 tlist		tbank
42:000001                     +79 
42:000002                     +79 
42:000003                     +79 
42:000004                     +79 
42:000005                     +79 
42:000006                     +79 
42:000007                     +79 
42:000008                     +79 
42:000009                     +79 
42:00000A                     +79 
42:00000B                     +79 
42:00000C                     +79 
42:00000D                     +79 
42:00000E                     +79 
42:00000F                     +79 
42:000010                     +79 
42:000011                     +79 
42:000012                     +79 
42:000013                     +79 
42:000014                     +79 
42:000015                     +79 
42:000016                     +79 
42:000017                     +79 
42:000018                     +79 
42:000019                     +79 
42:00001A                     +79 
42:00001B                     +79 
42:00001C                     +79 
42:00001D                     +79 
42:00001E                     +79 
42:00001F                     +79 
42:000020                     +79 
42:000021                     +79 
42:000022                     +79 
42:000023                     +79 
42:000024                     +79 
42:000025                     +79 
42:000026                     +79 
42:000027                     +79 
42:000028                     +79 
42:000029                     +79 
42:00002A                     +79 
42:00002B                     +79 
42:00002C                     +79 
42:00002D                     +79 
42:00002E                     +79 
42:000030                     +79 
42:000032                     +79 
42:000034                     +79 
42:000036                     +79 
42:000038                     +79 
42:000039                     +79 
42:00003A                     +79 
42:00003B                     +79 
42:00003C                     +79 
42:00003D                     +79 
42:00003E                     +79 
42:00003F                     +79 
42:000040                     +79 
42:000041                     +79 
42:000042                     +79 
42:000043                     +79 
42:000044                     +79 
42:000045                     +79 
42:000046                     +79 
42:000048                     +79 
42:00004A                     +79 
42:00004C                     +79 
42:00004E                     +79 
42:000050                     +79 
42:000051                     +79 
42:000052                     +79 
42:000053                     +79 
42:000054                     +79 
42:000055                     +79 
42:000056                     +79 
42:000057                     +79 
  :                            80 
  :                            81 $(0::DRIVERS_BANK1/$0)
  :                            82 
00:004000 B60040              +83 "$rxtx_lo"*	$vector		rxtx_softwareloopback
00:004001 B6005A              +84 "$rxtx_ift1"*	$vector		ift1_rxtx
00:004002 B600D9              +85 "$initial_ift1"* $vector	start_ift1
00:004003 B600A6              +86 "$light_flight"* $vector	mplex_tx
  :                            87 . "$qo2_relay"*	$vector		output_relay
00:004004 B601B9              +88 if_dualport_txwrite* $vector    if_dportw
00:004005 B6019C              +89 dlt_null*       $vector         ifw_dlt_null
00:004006 B601A5              +90 dlt_loop*       $vector         ifw_dlt_loop
00:004007 B601AE              +91 dlt_e10mb*      $vector         ifw_dlt_e10mb
00:004008 B601FD              +92 __ifconfig*	$vector		ifconfig
  :                            93 
00:004009 B603E3              +94 arp_ether_reso* $vector         ethernet_arp:resolve
00:00400A B60403              +95 arp_ether_xmit* $vector         ethernet_arp:xmit
00:00400B B603AC              +96 xarp_ethernet*  $vector         ethernet_arp:xarp
00:00400C B603CA              +97 arp_ether_rx*   $vector         ethernet_arp:arp_rx
  :                            98 
00:00400D B60172              +99 xrelay_reset*	$vector		restart_device2	. restart_xrelay_interface
00:00400E B60295              +100 __route_config*	$vector		route_insert
  :                            101 
00:00400F B60312              +102 write_ifqlist*	$vector		q2txL_tail
  :                            103 . "$ift1_inband"*	$vector		write_ift1_direct
00:004010 B602C9              +104 write_ifq*	$vector		q2if
  :                            105 
00:004011 B600DF              +106 __initial_ift2*	$vector		__ift2:initial
00:004012 B60107              +107 __rxtx_ift2*	$vector		__ift2:rxtx
00:004013 B600F6              +108 __ift2_align*	$vector		__ift2:restart_cursors
00:004014 B600F1              +109 __ift2_mirror*	$vector		__ift2:swap_initial
  :                            110 
00:004015 B60332              +111 __buy6_bytes*	$vector		soc_data:buy6
00:004016 B6033B              +112 __buy12_bytes*	$vector		soc_data:buy12
00:004017 B602FB              +113 write_ifqlist_head*	$vector	q2txL_head
00:004018 B60358              +114 __recheck*	$vector		recheck
  :                            115 
00:004019 B60376              +116 tx_mib_update*	$vector		mib_scope_update:variable48
00:00401A B60380              +117 locate_interfaces* $vector	i_locate
  :                            118 
00:00401B B605EC              +119 rasmgram*	$vector		rx_jumbo
00:00401C B607E3              +120 jumboq2*	$vector		jumbo_txq:q2oq
00:00401D B60870              +121 g_checksum*	$vector		gchecksum
00:00401E B60794              +122 rasm_time*	$vector		rx_jumbo:reassembly_time?
  :                            123 
00:00401F B601FB              +124 tx_nocheck*	$vector		if_write
  :                            125 rx_nocheck*	$equ		tx_nocheck
  :                            126 
00:004020 B607CF              +127 jumbo_drive*	$vector		jumbo_txq		
  :                            128 
  :                            129 		$do	$>48,	$flag	driver vectors too many
  :                            130 
  :                            131 .	frame handling at interface
  :                            132 
00:004021 3D0000              +133 	$do	48-$,	fret	0
00:004022 3D0000              +133 
00:004023 3D0000              +133 
00:004024 3D0000              +133 
00:004025 3D0000              +133 
00:004026 3D0000              +133 
00:004027 3D0000              +133 
00:004028 3D0000              +133 
00:004029 3D0000              +133 
00:00402A 3D0000              +133 
00:00402B 3D0000              +133 
00:00402C 3D0000              +133 
00:00402D 3D0000              +133 
00:00402E 3D0000              +133 
00:00402F 3D0000              +133 
  :                            134 
  :                            135 .	protocol stack extras
  :                            136 
  :                            137 	$if	HVSOCKET
00:004030 B604DC              +138 hvsocket_storage* $vector       hvsocket:storage
00:004031 B604C2              +139 hvsockets_bind* $vector         hvsocket:bind
00:004032 B6052E              +140 hvsocket_rx*	$vector		hvsocket:rx
00:004033 B6054D              +141 hvsocket_tx*	$vector		hvsocket:tx
00:004034 B6058C              +142 hvsocket_readq*	$vector		hvsocket:readq
00:004035 B60599              +143 connection_array* $vector	hvsocket:locate
00:004036 B605A3              +144 hvsocket_xbind*	$vector		hvsocket:xbind
00:004037 B60562              +145 hvsocket_close*	$vector		hvsocket:close
00:004038 B605BD              +146 hvsocket_write_rxq* $vector	hvsocket:write_rxq
  :                            147 	$endif
  :                            148 
00:004039 3D0000              +149 	fret	0		. spare
00:00403A B6087A              +150 tnet_callstring*	$vector	net_callstring
00:00403B B605D8              +151 tcp_timer(1)*	$vector		tmetric:timer(1)
  :                            152 
00:00403C 3D0000              +153 	$do	64-$,	fret	0
00:00403D 3D0000              +153 
00:00403E 3D0000              +153 
00:00403F 3D0000              +153 
  :                            154 
  :                            155 	$list		2
  :                            156: 	$include	irelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 .	the protocols allowed in here are only IPv4 and IPv6
  :                            41 .	the discriminator is the 4-bit version at the
  :                            42 .	start of the datagram
  :                            43 
  :                            44 .	until it's decided to have ip6 we'll just assume
  :                            45 .	software loopback output is ip4
  :                            46 
  :                            47 
  :                            48 rxtx_softwareloopback
  :                            49 
  :                            50 			. x -> interface
  :                            51 
  :                            52 	$if	1
00:004040 F80002              +53 	push	x
00:004041 3E02DF              +54 	lcal	readifq
00:004042 C60050              +55 	jza	rxtx_regain_i_f_pointer
  :                            56 
00:004043 78C002              +57 	tp	descriptor:i_f, a		. the original dgram
00:004044 B6004C              +58 	j	rxtx_drop_supergram?		. 
  :                            59 
00:004045 68C001              +60 	lb	descriptor:frame, a
00:004046 58C004              +61 	ly	descriptor:dgram, a
  :                            62 
00:004047 F80004              +63 	push	a
  :                            64 
00:004048 40B001              +65 	lr	dgram:bytes, y
  :                            66 
00:004049 60D006              +67 	la	nframe:llh:generic:protocol, b
  :                            68 
00:00404A FF0883              +69 	call	(frame_to_protocol)
00:00404B 380004              +70 	pop	a
  :                            71 
  :                            72 rxtx_drop_supergram?				. you get here when a dgram is copied to RX or declined
  :                            73 						. you don't need to know when RX app has consumed data
00:00404C 502181              +74 	lx	tx_buffers
00:00404D 78C003              +75 	tn	descriptor:bytes, a		. high order bit = resending protocol
00:00404E B60050              +75 
00:00404F FF0884              +76 	call	(if_sell1)			. usually tcp, which drops segment on remote ack
  :                            77 						. only flagged on original unfragmented datagram
  :                            78 						. the dynamic fragment wrappers are dropped here
  :                            79 rxtx_regain_i_f_pointer
00:004050 380002              +80 	pop	x
00:004051 F8000B              +81 	MIB_ACOUNT48	this_if:outoctets	TX_DATAGRAML
00:004052 2FA00F              +81 
00:004053 5E0055              +81 
00:004054 17A00E              +81 
00:004055 FD0001              +82 	MIB_ICOUNT48	this_if:outpackets
00:004056 2FA013              +82 
00:004057 5E0059              +82 
00:004058 17A012              +82 
  :                            83 						. instead of looping back here
00:004059 3D0000              +84 	fret	0				. await next pass of protocol stack
  :                            85 
  :                            86 	$else
  :                            87 
  :                            88 	fret	0				. so the rest of it never had to work
  :                            89 	la	this_if:oq:head
  :                            90 	jza	rxxx_software_loopback
  :                            91 
  :                            92 	ly	descriptor:frame, a
  :                            93 	
  :                            94 	lb, i	nframe:stack_index, y
  :                            95 	la	nframe:llh:generic:protocol, y
  :                            96 	ab	0, b
  :                            97 
  :                            98 	ly	1, b
  :                            99 	lr	0, b
  :                            100 
  :                            101 	push	a
  :                            102 	push	x
  :                            103 	call	(frame_to_protocol)
  :                            104 	pop	x
  :                            105 	pop	a
  :                            106 
  :                            107 .	lcal	readifq
  :                            108 
  :                            109         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
  :                            110         MIB_ICOUNT48    this_if:outpackets
  :                            111 	
  :                            112 	tp	descriptor:bytes, a
  :                            113 	j	rxtx_softwareloopback
  :                            114 
  :                            115 	lx	strx_buffers
  :                            116 	call	(if_sell1)		. this is just until something wants
  :                            117 					. to read the datagram
  :                            118 
  :                            119 					. The sender must take TCP segments
  :                            120 					. off the ACK queue when they are ACKED
  :                            121 					. but leave the receiver to pool them
  :                            122 
  :                            123 					. UDPgrams simply pooled by the receiver
  :                            124 					. after consume
  :                            125 
  :                            126 					. might as well turn the retain bit off
  :                            127 					. at this point so it won't confuse TCP
  :                            128 					. receive. And to signal the sender not
  :                            129 					. to pool the buffer on ACK, just to
  :                            130 					. unlink it from the ACK queue
  :                            131 
  :                            132 	j	rxtx_softwareloopback
  :                            133 
  :                            134 rxxx_software_loopback
  :                            135 	fret	0
  :                            136 
  :                            137 	$endif
  :                            138 
  :                            157: 	$include	xrelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 IFT1_RX_BASE	$equ	32
  :                            41 IFT1_TX_BASE	$equ	32
  :                            42 
  :                            43 IFT1_RPAGEW	$equ	1024
  :                            44 IFT1_TPAGEW	$equ	1024
  :                            45 
  :                            46 IFT1_RPAGES	$equ	128
  :                            47 IFT1_TPAGES	$equ	128
  :                            48 
  :                            49 
  :                            50 $(67::, y)
  :                            51 networkframe	delivery
  :                            52 
  :                            53 
  :                            54 $(0)
  :                            55 
  :                            56 ift1_rxtx
00:00405A 60A040              +57 	la	this_if:ift1:base_rx
00:00405B 750060              +58 	ii	XBASE$32
00:00405C 58A041              +59 	ly	this_if:ift1:rx_cursor
  :                            60 	
00:00405D CFB000              +61 frames?	dl	networkframe:flag	. 2nd word in B is total frame length
  :                            62 				. this may include the length of
  :                            63 				. a 2-byte protocol family tag
  :                            64 				. appended to the front of a dgram
  :                            65 				. which has no MAC header
  :                            66 
00:00405E A00885              +67 	and	(008000)
  :                            68 
00:00405F C60081              +69 	jza	next_interface	. capture not complete
  :                            70 
00:004060 60B002              +71 	la	networkframe:ll_hl	. link layer header length
  :                            72 
00:004061 F80005              +73 	MIB_ACOUNT48	this_if:inoctets	b
00:004062 2FA00D              +73 
00:004063 5E0065              +73 
00:004064 17A00C              +73 
00:004065 FD0001              +74 	MIB_ICOUNT48	this_if:inpackets
00:004066 2FA011              +74 
00:004067 5E0069              +74 
00:004068 17A010              +74 
  :                            75 
00:004069 18000E              +76 	sy	fp
00:00406A 5CB005              +77 	ly	networkframe:frame,,i	. offset descriptor->frame
  :                            78 
00:00406B D80004              +79 	anb	a		. net datagram length
00:00406C 5E007A              +80 	jnc	frame_complete	. less than llh length!
00:00406D 400005              +81 	lr	b		. datagram length bytes
  :                            82 
  :                            83 				. the protocol family tag
  :                            84 				. is mostly the word
  :                            85 				. before the datagram
  :                            86 
  :                            87 				. either because there is
  :                            88 				. a DIX MAC header, or
  :                            89 				. a similar encapsulation
00:00406E 64C001              +90 	la	1,a,i		. round up
00:00406F 060001              +91 	sar	1		. byte count to word count
  :                            92 				. only two bytes per word
  :                            93 				. in packet data
  :                            94 
  :                            95 				. MAC header / TAG must
  :                            96 				. be even # bytes
  :                            97 
00:004070 880004              +98 	ay	a
  :                            99 
00:004071 60E004              +100 	la	networkframe:protocol, fp		. load the protocol TAG
  :                            101 
  :                            102 
00:004072 F8000E              +103 	push	fp
00:004073 F80002              +104 	push	x
  :                            105 
00:004074 50E003              +106 	lx	networkframe:interface, fp	. whatever sort of frame this is
[+0003]10
00:004075 850000              +107 	ax	$if2p,,xi
00:004076 50A000              +108 	lx	0, x			. it goes to this logical interface
  :                            109 
00:004077 FF0883              +110 	call	(frame_to_protocol)
  :                            111 
00:004078 380002              +112 	dpop	x
00:004079 380003              +112 
  :                            113 
  :                            114 frame_complete
00:00407A 30B000              +115 	z	networkframe:flag
00:00407B 8D0400              +116 	ay, xi	RPAGEW
00:00407C 600003              +117 	la	y
  :                            118 
  :                            119 
  :                            120 	$if	RPAGEW*RPAGES>262144
  :                            121 
  :                            122 	ana	(RX_BASE+1*/18:s)
  :                            123 	jnc	frames?
  :                            124 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            125 
  :                            126 	la	base_rx
  :                            127 	aa, xi	64
  :                            128 
  :                            129 	lk	(03FFFC0)
  :                            130 	mta	(RPAGEW*RPAGES/*18-6:s)
  :                            131 	j	$+2
  :                            132 	and	(0C0003F)
  :                            133 	sa	base_rx
  :                            134 	sabr	RX_BASE
  :                            135 	
  :                            136 	$else
  :                            137 
00:00407D D00886              +138 	ana	(RX_BASE*/18++RPAGEW*RPAGES:s)
00:00407E 5E005D              +139 	jnc	frames?
00:00407F 580887              +140 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            141 
  :                            142 	$endif
  :                            143 
00:004080 B6005D              +144 	j	frames?
  :                            145 	
  :                            146 next_interface
00:004081 18A041              +147 	sy	this_if:ift1:rx_cursor
  :                            148 
  :                            149 
  :                            150 txq_ift1_relay
00:004082 CFA042              +151 	dl	this_if:ift1:base_tx, x
00:004083 750060              +152 	ii	XBASE$32
00:004084 60A004              +153 	la	this_if:mtu, x
00:004085 200011              +154 	sa	MTU
  :                            155 
00:004086 28000E              +156 	sb	fp
  :                            157 
  :                            158 txq_ift1_otraffic?		
00:004087 70E000              +159 	tz	networkframe:flag, fp	. assure an interface slot
00:004088 B600A5              +160 	j	txq_next_interface	. not yet, next device array
  :                            161 
  :                            162 
00:004089 3E02DF              +163 	lcal	readifq			. dequeue a TX frame
00:00408A C60096              +164 	jza	txq_next_queue		. from default socket buffer pool
00:00408B F80004              +165 	push	a			. completely detach descriptor from queue before
  :                            166 
00:00408C 3E00A7              +167 	lcal	txq_ift1_oframe
00:00408D 3E00C9              +168 	lcal	txq_ift1_next_frame
  :                            169 
00:00408E 380004              +170 	pop	a			. recover descriptor
  :                            171 
00:00408F 78C003              +172 	tp	descriptor:bytes, a
00:004090 B60087              +173 	j	txq_ift1_otraffic?
  :                            174 
00:004091 F80002              +175 	push	x
00:004092 502181              +176 	lx	tx_buffers
00:004093 FF0884              +177 	call	(if_sell1)
00:004094 380002              +178 	pop	x
  :                            179 
00:004095 B60087              +180 	j	txq_ift1_otraffic?
  :                            181 
  :                            182 txq_next_queue				. always an interface slot
  :                            183 					. free when arriving here
  :                            184 	$if	HVSOCKET
  :                            185 
00:004096 3E02EB              +186 	lcal	rqtxL			. dequeue a TX frame
00:004097 C600A5              +187 	jza	txq_next_interface	. if there is one
00:004098 F80004              +188 	push	a
00:004099 3E00A7              +189 	lcal	txq_ift1_oframe
00:00409A 3E00C9              +190 	lcal	txq_ift1_next_frame
00:00409B 380004              +191 	pop	a
00:00409C 78C003              +192 	tp	descriptor:bytes, a	. protocol wants to keep buffer?
00:00409D B600A2              +193 	j	txq_next_if_space?	. yes
00:00409E F80002              +194 	push	x
00:00409F 508888              +195 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:0040A0 FF0884              +196 	call	(if_sell1)
00:0040A1 380002              +197 	pop	x
  :                            198 
  :                            199 txq_next_if_space?
00:0040A2 70E000              +200 	tz	networkframe:flag, fp	. is another interface slot free?
00:0040A3 B600A5              +201 	j	txq_next_interface	. if not
00:0040A4 B60096              +202 	j	txq_next_queue		. but if so dequeue another TX frame
  :                            203 
  :                            204 	$endif	. HVSOCKET
  :                            205 
  :                            206 txq_next_interface
  :                            207 
00:0040A5 3D0000              +208 	fret	0
  :                            209 
  :                            210 mplex_tx				. just in case
00:0040A6 3D0000              +211 	fret	0			. a call is made by mistake
  :                            212 
  :                            213 
  :                            214 txq_ift1_oframe
  :                            215 				
00:0040A7 68C002              +216 	lb	descriptor:i_f, a	. translate RTA  interface number to osserv interface number
00:0040A8 EE00AC              +217 	jnb	txq_ift1_jumbo_master	. datagram has been transmitted in fragments
  :                            218 
00:0040A9 CDFFFE              +219 	ab	-2,,xi			. xlate RTA1 i_f:id to trunk i_f:i_d in frame descriptor
00:0040AA AE00B2              +220 	jpb	txq_ift1_oframe_ahead	. ift2 sometimes loses this id. mark it for repeat route / send
00:0040AB 75005F              +221 	$do	1,	ii	GUARD$
  :                            222 
  :                            223 txq_ift1_jumbo_master
00:0040AC 68C001              +224 	lb	descriptor:frame, a	. mark it transmitted
00:0040AD 78D00D              +225 	 tn	nframe:stack_index, b
00:0040AE B600B0              +225 
00:0040AF 75005F              +226 	 ii	GUARD$
00:0040B0 30D00D              +227 	z	nframe:stack_index, b	. so it may be retransmitted
00:0040B1 350001              +228 	lret	1			. skip call to update interface buffer pointer
  :                            229 
  :                            230 txq_ift1_oframe_ahead 
00:0040B2 28E003              +231 	sb	networkframe:interface, fp
  :                            232 
00:0040B3 60C001              +233 	la	descriptor:frame, a	. transfer protocol tag to interface buffer header
  :                            234 
00:0040B4 F8C007              +235 	push	nframe:frame_axw(1):bytes, a
00:0040B5 38E002              +236 	pop	networkframe:ll_hl, fp
  :                            237 
00:0040B6 F8C006              +238 	push	nframe:llh:generic:protocol, a
00:0040B7 38E004              +239 	pop	networkframe:protocol, fp	. leaving frame pointer in a
  :                            240 
00:0040B8 F80002              +241 	push	x				. save interface pointer
00:0040B9 54E005              +242 	lx	networkframe:frame, fp, i	. write pointer in interface slot
00:0040BA FF0889              +243 	call	(if_dualport_txwrite)
00:0040BB 380002              +244 	pop	x				. retrieve  interface pointer
  :                            245 
00:0040BC F8000B              +246 	push	TX_DATAGRAML		. release interface buffer for transmission
00:0040BD 38E001              +247 	pop	networkframe:frame_length, fp
00:0040BE F80885              +248 	push	(008000)
00:0040BF 38E000              +249 	pop	networkframe:flag, fp
  :                            250 
00:0040C0 F8000B              +251         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
00:0040C1 2FA00F              +251 
00:0040C2 5E00C4              +251 
00:0040C3 17A00E              +251 
00:0040C4 FD0001              +252         MIB_ICOUNT48    this_if:outpackets
00:0040C5 2FA013              +252 
00:0040C6 5E00C8              +252 
00:0040C7 17A012              +252 
  :                            253 
  :                            254 txq_ift1_2x
00:0040C8 350000              +255 	lret	0
  :                            256 
  :                            257 txq_ift1_next_frame
00:0040C9 6D0400              +258 	lb, xi	IFT1_TPAGEW
00:0040CA C8000E              +259 	ab	fp
00:0040CB A8088A              +260 	andB	(IFT1_TPAGES*IFT1_TPAGEW-IFT1_TPAGEW:s)
00:0040CC 980886              +261 	orB	(IFT1_TX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
  :                            262 	
00:0040CD 28000E              +263 	sb	fp
00:0040CE 28A043              +264 	sb	this_if:ift1:tx_cursor, x
00:0040CF 350000              +265 	lret	0
  :                            266 
  :                            267 rxq_ift1_next_frame
00:0040D0 5D0400              +268 	ly, xi	IFT1_RPAGEW
00:0040D1 88000E              +269 	ay	fp
00:0040D2 680003              +270 	lb	y
00:0040D3 D80886              +271 	anb	(IFT1_RX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
00:0040D4 5E00D6              +272 	jnc	$+2
00:0040D5 580887              +273 	ly	(IFT1_RX_BASE*/18:s)
00:0040D6 18000E              +274 	sy	fp
00:0040D7 18A041              +275 	sy	this_if:ift1:rx_cursor, x
00:0040D8 350000              +276 	lret	0
  :                            277 
  :                            278 start_ift1
00:0040D9 20A001              +279 	sa	this_if:flags
00:0040DA 68088B              +280 	lb	(0400000)
00:0040DB 980003              +281 	orB	y
00:0040DC 28A040              +282 	sb	this_if:ift1:base_rx
00:0040DD 28A042              +283 	sb	this_if:ift1:base_tx
00:0040DE 3D0000              +284 	fret	0
  :                            285 
  :                            286 .	called only on system restart
  :                            287 .	so no settings are saved
  :                            288 .	requests external interface service to restart
  :                            289 .	to match automatic resynchronisation at this end
  :                            290 
  :                            291 .	it's the only time a CONFIGURATION_PROTOCOL frame is output
  :                            292 .	so it doesn't need much detail
  :                            293 
  :                            158: 	$include	ift2
  :                            1 .	vector name __initial_ift2
  :                            2 
  :                            3 __ift2	$tree
  :                            4 
00:0040DF 20A001              +5 initial	sa	this_if:flags
00:0040E0 64C001              +6 	la	1, a, i			. change high index 256K block
00:0040E1 260006              +7 	sal	6			.  -> I / F buffer page limit
00:0040E2 900003              +8 	or	y			. add device index
00:0040E3 90088B              +9 	or	(0400000)
00:0040E4 20A03F              +10 	sa	this_if:ift1:tx_limit	. switch the interface on
  :                            11 					. this is also page high index
  :                            12 					. TX side
  :                            13 
00:0040E5 680887              +14 	lb	(32*/18s)
  :                            15 
00:0040E6 060001              +16 	sar	1			. halve banks #
00:0040E7 A0088C              +17 	and	(01FFFC0)					
00:0040E8 900003              +18 	or	y
00:0040E9 90088B              +19 	or	(0400000)
00:0040EA C7A042              +20 	ds	this_if:ift1:base_tx	. TX restart is RX limit
00:0040EB 20A03E              +21 	sa	this_if:ift1:tx_restart
00:0040EC 20A03D              +22 	sa	this_if:ift1:rx_limit	. TX limit is this_if:
00:0040ED A0088D              +23 	and	(040003F)
00:0040EE C7A040              +24 	ds	this_if:ift1:base_rx
00:0040EF 20A03C              +25 	sa	this_if:ift1:rx_restart
  :                            26 
00:0040F0 3D0000              +27 	fret	0
  :                            28 
  :                            29 swap_initial				. mirror the trunk TX / RX
[+0004]10
00:0040F1 850000              +30 	ax	$if0p,,xi
00:0040F2 50A000              +31 	lx	0, x
  :                            32 
00:0040F3 3E00FA              +33 	lcal	swap_around
00:0040F4 3E0101              +34 	lcal	rewind
00:0040F5 3D0000              +35 	fret	0
  :                            36 
  :                            37 restart_cursors
[+0004]10
00:0040F6 850000              +38 	ax	$if0p,,xi
00:0040F7 50A000              +39 	lx	0, x
  :                            40 
00:0040F8 3E0101              +41 	lcal	rewind
00:0040F9 3D0000              +42 	fret	0
  :                            43 
  :                            44 swap_around
00:0040FA 9FA03C              +45 	dpush	this_if:ift1:rx_restart
00:0040FB 9FA03E              +46 	dpush	this_if:ift1:tx_restart
00:0040FC 87A03C              +47 	qpop	this_if:ift1:rx_restart
  :                            48 
00:0040FD 9FA040              +49 	dpush	this_if:ift1:base_rx
00:0040FE 9FA042              +50 	dpush	this_if:ift1:base_tx
00:0040FF 87A040              +51 	qpop	this_if:ift1:base_rx
00:004100 350000              +52 	lret	0
  :                            53 
00:004101 680887              +54 rewind	lb	(32*/18s)
00:004102 60A03C              +55 	la	this_if:ift1:rx_restart
00:004103 C7A040              +56 	ds	this_if:ift1:base_rx
00:004104 60A03E              +57 	la	this_if:ift1:tx_restart
00:004105 C7A042              +58 	ds	this_if:ift1:base_tx
00:004106 350000              +59 	lret	0	
  :                            60 
00:004107 CFA040              +61 rxtx	dl	this_if:ift1:base_rx
00:004108 750060              +62 	ii	XBASE$32
00:004109 580005              +63 	ly	b
  :                            64 
  :                            65 rx_next_page
00:00410A CFB000              +66 	dl	networkframe:flag
00:00410B C60129              +67 	jza	tx1?
  :                            68 
00:00410C F80005              +69 	MIB_ACOUNT48	this_if:inoctets	b
00:00410D 2FA00D              +69 
00:00410E 5E0110              +69 
00:00410F 17A00C              +69 
00:004110 FD0001              +70 	MIB_ICOUNT48	this_if:inpackets
00:004111 2FA011              +70 
00:004112 5E0114              +70 
00:004113 17A010              +70 
  :                            71 
00:004114 60B002              +72 	la	networkframe:ll_hl
  :                            73 
00:004115 18000E              +74 	sy	fp
00:004116 5CB005              +75 	ly	networkframe:frame,,i	. -> frame from network
00:004117 D80004              +76 	anb	a			. datagram length without link header
  :                            77 
00:004118 5E0126              +78 	jnc	frame_complete		. frame size < link header size
00:004119 400005              +79 	lr	b			. datagram net bytes = frame minus llh
00:00411A 64C001              +80 	la	1, a, i			. advance pointer to datagram
00:00411B 060001              +81 	sar	1			. add llh bytes / 2
00:00411C 880004              +82 	ay	a
  :                            83 
00:00411D 60E004              +84 	la	networkframe:protocol, fp
00:00411E F8000E              +85 	push	fp			. frame in interface buffer
00:00411F F80002              +86 	push	x			. trunk multiplexing interface named in call
  :                            87 	
00:004120 50E003              +88 	lx	networkframe:interface, fp	. RX interface this frame
[+0003]10
00:004121 850000              +89 	ax	$if2p,,xi
00:004122 50A000              +90 	lx	0, x
  :                            91 
00:004123 FF0883              +92 	call	(frame_to_protocol)
00:004124 380002              +93 	pop	x			. y gets pointer from saved fp
00:004125 38000E              +94 	pop	fp
  :                            95 frame_complete
00:004126 30E000              +96 	z	networkframe:flag, fp
  :                            97 
00:004127 3E014D              +98 	lcal	update_rx_cursor
  :                            99 
00:004128 B6010A              +100 	j	rx_next_page
  :                            101 
00:004129 CFA042              +102 tx1?	dl	this_if:ift1:base_tx
00:00412A 750060              +103 	ii	XBASE$32
00:00412B 60A004              +104 	la	this_if:mtu, x
00:00412C 200011              +105 	sa	MTU
00:00412D 28000E              +106 	sb	fp
  :                            107 
  :                            108 tx_space1?
00:00412E 70E000              +109 	tz	networkframe:flag, fp	. outgoing slot clear to write?
00:00412F B6014C              +110 	j	txz
  :                            111 
  :                            112 tx_data1?
00:004130 3E02DF              +113 	lcal	readifq			. anything on default output queue?
00:004131 C6013D              +114 	jza	tx_data2?		. separate descriptor from queue
  :                            115 
00:004132 F80004              +116 	push	a
  :                            117 
00:004133 3E00A7              +118 	lcal	txq_ift1_oframe
00:004134 3E015F              +119 	lcal	update_tx_cursor	
  :                            120 
00:004135 380004              +121 	pop	a			. recover descriptor
00:004136 78C003              +122 	tp	descriptor:bytes, a
00:004137 B6012E              +123 	j	tx_space1?
  :                            124 
00:004138 F80002              +125 	push	x
00:004139 502181              +126 	lx	tx_buffers
00:00413A FF0884              +127 	call	(if_sell1)
00:00413B 380002              +128 	pop	x
  :                            129 
00:00413C B6012E              +130 	j	tx_space1?
  :                            131 
  :                            132 tx_data2?				. there is always a free interface slot
  :                            133 					. when arriving here
00:00413D 3E02EB              +134 	lcal	rqtxL			. dequeue a TX frame
00:00413E C6014C              +135 	jza	txz			. if there are any
00:00413F F80004              +136 	push	a
00:004140 3E00A7              +137 	lcal	txq_ift1_oframe
00:004141 3E015F              +138 	lcal	update_tx_cursor
00:004142 380004              +139 	pop	a
00:004143 78C003              +140 	tp	descriptor:bytes, a	. does protocol want to keep the buffer?
00:004144 B60149              +141 	j	tx_space2?		. yes
  :                            142 
00:004145 F80002              +143 	push	x			. no
00:004146 508888              +144 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:004147 FF0884              +145 	call	(if_sell1)
00:004148 380002              +146 	pop	x
  :                            147 
  :                            148 tx_space2?
00:004149 70E000              +149 	tz	networkframe:flag, fp	. is the next I/F slot free?
00:00414A B6014C              +150 	j	txz			. no
  :                            151 
  :                            152 	$if	THRESHOLD_QUANTUM_MS_IFT2
  :                            153 	lcal	if2media?
  :                            154 	j	txz
  :                            155 	$endif
  :                            156 
00:00414B B6013D              +157 	j	tx_data2?
  :                            158 
00:00414C 3D0000              +159 txz	fret	0				. because that's used to test
  :                            160 						. if already in chain
  :                            161 update_rx_cursor
00:00414D 5D0400              +162 	ly	RPAGEW,,xi
00:00414E 88000E              +163 	ay	fp
00:00414F 40088E              +164 	lr	(33*/18s)
00:004150 FE0154              +165 	jyge	update_rx_page
00:004151 18000E              +166 	sy	fp
00:004152 18A041              +167 	sy	this_if:ift1:rx_cursor
00:004153 350000              +168 	lret	0
  :                            169 
  :                            170 update_rx_page
00:004154 60A040              +171 	la	this_if:ift1:base_rx
00:004155 C50040              +172 	aa	1*/6,,xi
00:004156 680004              +173 	anu	this_if:ift1:rx_limit	. upper limit rx pages
00:004157 D8A03D              +173 
00:004158 5E015A              +174 	jnc	update_rx_page_store
00:004159 60A03C              +175 	la	this_if:ift1:rx_restart
  :                            176 
  :                            177 update_rx_page_store
00:00415A 680887              +178 	lb	(32*/18s)
00:00415B 580005              +179 	ly	b
00:00415C C7A040              +180 	ds	this_if:ift1:base_rx
00:00415D 750060              +181 	ii	XBASE$32
00:00415E 350000              +182 	lret	0
  :                            183 
  :                            184 update_tx_cursor
00:00415F 5D0400              +185 	ly	RPAGEW,,xi
00:004160 88000E              +186 	ay	fp
00:004161 40088E              +187 	lr	(33*/18s)
00:004162 18000E              +188 	sy	fp
00:004163 FE0166              +189 	jyge	update_tx_cursor_next_page
00:004164 18A043              +190 	sy	this_if:ift1:tx_cursor, x
00:004165 350000              +191 	lret	0	
  :                            192 
  :                            193 update_tx_cursor_next_page
00:004166 60A042              +194 	la	this_if:ift1:base_tx
00:004167 C50040              +195 	aa	1*/6,,xi
00:004168 680004              +196 	anu	this_if:ift1:tx_limit	. upper limit pages 262144 words
00:004169 D8A03F              +196 
00:00416A 5E016C              +197 	jnc	update_tx_cursor_store
00:00416B 60A03E              +198 	la	this_if:ift1:tx_restart
  :                            199 
  :                            200 update_tx_cursor_store
00:00416C 680887              +201 	lb	(32*/18s)
00:00416D C7A042              +202 	ds	this_if:ift1:base_tx
00:00416E 28000E              +203 	sb	fp
00:00416F 750060              +204 	ii	XBASE$32
00:004170 580005              +205 	ly	b
00:004171 350000              +206 	lret	0
  :                            207 	
  :                            208 	$root
  :                            209 
  :                            159: 	$include	restart2
  :                            1 
  :                            2 restart_device2	$tree
00:004172 3E0177              +3 	lcal	restart_iftxx		. whichever type it is
00:004173 CF088F              +4 	dl	(CHILLDOWN++LOCKSTEP, 5000000d)
00:004174 1C0067              +5 	outB	chill$down
00:004175 140066              +6 	outA	INDICATION$		. wait 5 seconds
00:004176 3D0000              +7 	fret	0			. so operator can see
  :                            8 					. if it's the same crash cyclimg
  :                            9 
  :                            10 restart_iftxx
  :                            11 
  :                            12 .	change all output frame headers in device 2
  :                            13 .	to configuration protocol trunk restart	
  :                            14 .	whether device 2 is I / F type 1 or 2
  :                            15 .	this is the only configuration protocol PDU
  :                            16 .	which goes outward from RTA1 machine toward I / F
  :                            17 
00:004177 040082              +18 	inA	128+2
00:004178 480891              +19 	lk	(03FFFFF)
00:004179 AF0892              +20 	mta	(0)			. banks 0 = 1 = iftype1 ?
00:00417A B60181              +21 	j	iftype2			. no
  :                            22 					. yes, set high half of bank
00:00417B 600893              +23 	la	(0400002)		. device 2 : bank 0
00:00417C 340020              +24 	sabr	32
00:00417D 500894              +25 	lx	(32*/18++03FC00s)	. highest frame
00:00417E 400886              +26 	lr	(32*/18++020000s)	. stop halfway down one bank
00:00417F 3E018E              +27 	lcal	write_restarts
  :                            28 
00:004180 350000              +29 	lret	0
  :                            30 					. set higher complete banks
00:004181 6CC000              +31 iftype2	lb	0, a, i			. or a_x (called from ISR)
00:004182 0E0001              +32 	sbr	1			. / 2 rounded down
00:004183 A80895              +33 	andB	(01FFFFF)
00:004184 260006              +34 	sal	6			. bank high index	
00:004185 900893              +35 	or	(0400002)
  :                            36 
  :                            37 next_bank_down
00:004186 340020              +38 	sabr	32
00:004187 500894              +39 	lx	(32*/18++03FC00s)		. highest frame in bank
00:004188 400887              +40 	lr	(32*/18s)		. stop after all frames in bank
  :                            41 
00:004189 3E018E              +42 	lcal	write_restarts
  :                            43 
00:00418A C5FFC0              +44 	aa	-64,,xi			. down a bank
00:00418B CDFFFF              +45 	ab	-1,,xi			. his goes negative
00:00418C AE0186              +46 	jpb	next_bank_down		. after half the banks
00:00418D 350000              +47 	lret	0			. = the output buffers
  :                            48 
  :                            49 write_restarts
00:00418E 9F0084              +50 	dpush	a_x
00:00418F 4F0896              +51 	ql	(008000, 0, 0, 0q)
00:004190 48089A              +52 	lk	(IFCONFIG)
  :                            53 
  :                            54 write_restart
00:004191 08A004              +55 	sk	4, x			. protocol discriminator
00:004192 47A000              +56 	qs	0, x			. 
00:004193 85FC00              +57 	ax	-1024,,xi		. down 1 frame
00:004194 F60191              +58 	jxge	write_restart
  :                            59 
00:004195 380084              +60 	dpop	a_x
00:004196 380085              +60 
00:004197 350000              +61 	lret	0
  :                            62 
  :                            63 	$root
  :                            160: 	$include	lladdres
  :                            1 					. axw in fp
  :                            2 ifw_llh_space				. bytes size of link header in a
  :                            3 .	lb	TX_FRAME		. prepare the llh space / descriptor
00:004198 FDFFFA              +4 	push	-6,,xi
00:004199 38D00D              +5 	pop	nframe:stack_index, b
00:00419A C7D007              +6 	ds	nframe:frame_axw(1),b
00:00419B 350000              +7 	lret	0
  :                            8 
  :                            9 ifw_dlt_null
00:00419C F80004              +10 	push	a
00:00419D 68C001              +11 	lb	descriptor:frame, a
00:00419E 650004              +12 	la, xi	4
00:00419F 3E0198              +13 	lcal	ifw_llh_space
00:0041A0 650200              +14 	la, xi	0200
00:0041A1 20D000              +15 	sa	0, b
00:0041A2 30D001              +16 	z	1, b
00:0041A3 380004              +17 	pop	a
00:0041A4 3D0000              +18 	fret	0
  :                            19 
  :                            20 ifw_dlt_loop
00:0041A5 F80004              +21 	push	a
00:0041A6 68C001              +22 	lb	descriptor:frame, a
00:0041A7 650004              +23 	la, xi	4
00:0041A8 3E0198              +24 	lcal	ifw_llh_space
00:0041A9 650002              +25 	la, xi	2
00:0041AA 30D000              +26 	z	0, b
00:0041AB 20D001              +27 	sa	1, b
00:0041AC 380004              +28 	pop	a
00:0041AD 3D0000              +29 	fret	0
  :                            30 
  :                            31 
  :                            32 ifw_dlt_e10mb			. generic handling already has
  :                            33 				. the resolved destination at the frame start
00:0041AE F80004              +34 	push	a		. and the protocol at word 6
00:0041AF 68C001              +35 	lb	descriptor:frame, a
00:0041B0 65000E              +36 	la, xi	14
00:0041B1 3E0198              +37 	lcal	ifw_llh_space
  :                            38 
00:0041B2 F8A00A              +39 	push	this_if:physa+2
00:0041B3 9FA008              +40 	dpush	this_if:physa
00:0041B4 38D003              +41 	pop	nframe:llh:ethernet:from, b
00:0041B5 38D004              +42 	dpop	nframe:llh:ethernet:from+1, b
00:0041B6 38D005              +42 
00:0041B7 380004              +43 	pop	a
00:0041B8 3D0000              +44 	fret	0
  :                            45 
  :                            161: 	$include	dualport
  :                            1 
  :                            2 if_dportw	. vector name is if_dualport_txwrite
  :                            3 
00:0041B9 F80004              +4 	push	a				. frame
00:0041BA 30000B              +5         z       TX_DATAGRAML
00:0041BB 64C00D              +6         la, i   nframe:stack_index, a		. -> [ FFFFFA .. FFFFFE ]
  :                            7 
00:0041BC 68C000              +8         lb      0, a
00:0041BD C00005              +9         aa      b				. + frame = -> tuple
  :                            10 
00:0041BE AE01CB              +11         jpb     if_osentq			. mistakenly queued, no action
  :                            12 
  :                            13 if_osendq
00:0041BF 9F0004              +14         dpush   a				. [ tuple -> : stack_index ]
00:0041C0 58C001              +15         ly      1, a				. data from -> 
00:0041C1 60C000              +16         la      0, a				. octets
  :                            17 
00:0041C2 C601C6              +18         jza	if_oblank			. void tuple
00:0041C3 F80004              +19         push    a
00:0041C4 2F000B              +20         popA    TX_DATAGRAML
  :                            21 
  :                            22 	$if	0
  :                            23 	lr	256,,xi		. destination not somehow zeroed ?
  :                            24 	jxge	$+2
  :                            25 	ii	GUARD$		. stop and inspect
  :                            26 	$endif
  :                            27 
00:0041C5 3E01CE              +28         lcal	i_f_write			. x must -> to
  :                            29 if_oblank
00:0041C6 380004              +30         dpop     a
00:0041C7 380005              +30 
00:0041C8 C50002              +31         aa, xi  2				. up stack index
00:0041C9 CD0002              +32         ab, xi  2				. tuple ++
00:0041CA EE01BF              +33         jnb     if_osendq			. while stack index < 0 = itself
  :                            34 
  :                            35 if_osentq
00:0041CB 380004              +36 	pop	a				. mark the frame
00:0041CC 30C00D              +37 	z	nframe:stack_index, a		. written to i / f or buffer
00:0041CD 3D0000              +38 	fret	0
  :                            162: 	$include	../t77.4/if_write
  :                            1 i_f_write $tree
  :                            2 
00:0041CE 160006              +3 	dsr	6
00:0041CF 400004              +4 	lr	a	
00:0041D0 360003              +5 	dsl	3
00:0041D1 A50007              +6 	and, xi	7
00:0041D2 B601E5              +7 	j	rx64?
  :                            8 rx64!
00:0041D3 8FB000              +9 ?	$do	8,	in8nocheck
00:0041D4 87A000              +9 
00:0041D5 8FB004              +9 
00:0041D6 87A004              +9 
00:0041D7 8FB008              +9 
00:0041D8 87A008              +9 
00:0041D9 8FB00C              +9 
00:0041DA 87A00C              +9 
00:0041DB 8FB010              +9 
00:0041DC 87A010              +9 
00:0041DD 8FB014              +9 
00:0041DE 87A014              +9 
00:0041DF 8FB018              +9 
00:0041E0 87A018              +9 
00:0041E1 8FB01C              +9 
00:0041E2 87A01C              +9 
00:0041E3 850020              +10 	ax, xi	32
00:0041E4 8D0020              +11 	ay, xi	32
00:0041E5 1E01D3              +12 rx64?	jdr	rx64!
00:0041E6 400004              +13 	lr	a
00:0041E7 B601EC              +14 	j	rx8?
00:0041E8 8FB000              +15 rx8!	qpush	0, y
00:0041E9 87A000              +16 	qpop	0, x
00:0041EA 850004              +17 	ax, xi	4
00:0041EB 8D0004              +18 	ay, xi	4
00:0041EC 1E01E8              +19 rx8?	jdr	rx8!
00:0041ED 360002              +20 	dsl	2
00:0041EE A50003              +21 	and, xi	3
00:0041EF 400004              +22 	lr	a
00:0041F0 B601F5              +23 	j	rx2?
00:0041F1 F8B000              +24 rx2!	push	0, y
00:0041F2 38A000              +25 	pop	0, x
00:0041F3 850001              +26 	ax, xi	1
00:0041F4 8D0001              +27 	ay, xi	1
00:0041F5 1E01F1              +28 rx2?	jdr	rx2!
00:0041F6 AE01FA              +29 	jpb	rxnocheckZ
00:0041F7 60B000              +30 	la	0, y
00:0041F8 A0089B              +31 	and	(00FF00)
00:0041F9 20A000              +32 	sa	0, x
  :                            33 rxnocheckZ
00:0041FA 350000              +34 	lret	0
  :                            35 
  :                            36 	$root
  :                            37 
  :                            38 if_write $tree				. call from udp/ip or another iframe
00:0041FB 3E01CE              +39 	lcal	i_f_write
00:0041FC 3D0000              +40 	fret	0
  :                            41 	$root
  :                            163: 	$include	ifconfig
  :                            1 $(67::, y)
  :                            2 ifco	ifconfig_frame
  :                            3 
  :                            4 $(0)
  :                            5 ifconfig
00:0041FD 60B000              +6 	la	ifco:ifclass_llhl
00:0041FE 68B001              +7 	lb	ifco:oqif
00:0041FF 7C0201              +8 	jdz	ixconfig
00:004200 3E0206              +9 	lcal	ifconfigure
  :                            10 ixconfig
  :                            11 
  :                            12 	$if	HVSOCKET
00:004201 60B011              +13 	la	ifco:protocol_part:protocol
00:004202 B50006              +14 	xor	IPPROTO_TCP,,xi
00:004203 D60205              +15 	jnza	izconfig
00:004204 3E0283              +16 	lcal	hvtraffic_configure
  :                            17 izconfig
  :                            18 	$endif
  :                            19 
00:004205 3D0000              +20 	fret	0
  :                            21 
  :                            22 ifconfigure
00:004206 F80002              +23 	push	x
00:004207 50A000              +24 	lx	this_if:id
00:004208 450008              +25 	lr	INTERFACES,,xi		. 2 + index must <= INTERFACES
00:004209 F6025B              +26 	jxge	ixconfigure
00:00420A 50F000              +27 	lx	0, sp
  :                            28 
00:00420B C60238              +29 	jza	if_setrelay		. default routine is already tabled
  :                            30 					. just set the relay destination
00:00420C 4D00FF              +31 	lk	255,,xi
00:00420D 160008              +32 	dsr	8
00:00420E 0E0010              +33 	sbr	16
00:00420F C7A035              +34 	ds	this_if:class		. and llhl
  :                            35 
00:004210 AF0892              +36 	mtane	(DLT_NULL)		. got here by shifting 0004 = macOS
00:004211 B60213              +36 
00:004212 B6021E              +37 	j	if_dlt_null		. platform loopback "address" size >> 8
00:004213 AF089C              +38 	mtane	(DLT_LOOP)		. to become ifPhysAddress size
00:004214 B60216              +38 
00:004215 B60223              +39 	j	if_dlt_loop
00:004216 AF089D              +40 	mtane	(DLT_E10MB)
00:004217 B60219              +40 
00:004218 B60228              +41 	j	if_dlt_e10mb
  :                            42 
00:004219 30A035              +43 	z	this_if:class		. no link layer encapsulation
00:00421A 30A036              +44 	z	this_if:llhl		. so code DLT_anything not already tested
00:00421B 450000              +45 	lr	0,,xi
00:00421C 4F089E              +46 	ql	(0q)
  :                            47 
00:00421D B60235              +48 	j	if_storecall_llh
  :                            49 
  :                            50 if_dlt_null				. this option has accidentally come to mean
00:00421E 6507F0              +51 	la, xi	2048-10-4**-4		. macOS platform loopback and is used a lot
00:00421F 20A004              +52 	sa	this_if:mtu		. 32bit "address" AF_INET platform-endian
00:004220 4008A2              +53 	lr	(dlt_null)
00:004221 4F089E              +54 	ql	(0:q)
00:004222 B60235              +55 	j	if_storecall_llh
  :                            56 if_dlt_loop
00:004223 6507F0              +57 	la, xi	2048-10-4**-4
00:004224 20A004              +58 	sa	this_if:mtu
00:004225 4008A3              +59 	lr	(dlt_loop)
00:004226 4F089E              +60 	ql	(0:q)
00:004227 B60235              +61 	j	if_storecall_llh
  :                            62 if_dlt_e10mb
00:004228 6505DC              +63         la, xi	1500
00:004229 20A004              +64 	sa	this_if:mtu
00:00422A CFB005              +65 	dl	ifco:phys_address	. store the link layer address
00:00422B C7A008              +66 	ds	this_if:physa		. in the interface block
00:00422C 980004              +67 	orB	a			. is there any physical address?
00:00422D 60B007              +68 	la	ifco:phys_address+2
00:00422E 20A00A              +69 	sa	this_if:physa+2
00:00422F 980004              +70 	orB	a
00:004230 480005              +71 	lk	b
00:004231 4008A4              +72 	lr	(dlt_e10mb)
  :                            73 
00:004232 4F089E              +74 	ql	(0:q)			. zero address = ethernet-shaped loopback
  :                            75 					. with 0800 etype, as Linux emulator platform
00:004233 700001              +76 	tz	k			. broadcast or p2p medium = ARP or not
00:004234 4F08A5              +77 	ql	(arp_ether_rx, arp_ether_xmit, arp_ether_reso, xarp_ethernet:q)
  :                            78 if_storecall_llh
00:004235 00A037              +79 	sr	this_if:write_llh
00:004236 47A038              +80 	qs	this_if:arp_rx
  :                            81 
  :                            82 					. jump to ifconfigure_addresses
00:004237 68B001              +83 	lb	ifco:oqif		. if you have placed anything different
  :                            84 					. in this_if:flags or in rxtx
  :                            85 
  :                            86 if_setrelay
00:004238 CE023F              +87 	jzb	ifconfigure_addresses
00:004239 600005              +88 	anuba	INTERFACES+1,,xi
00:00423A D50009              +88 
00:00423B 7E025B              +89 	jc	ixconfigure
[+0004]10
00:00423C CD0000              +90 	ab	$if0p,,xi		. i_f_pointer_array,,xi
00:00423D 68D000              +91 	lb	0, b
00:00423E 28A027              +92 	sb	this_if:q2
  :                            93 
  :                            94 ifconfigure_addresses
00:00423F CFB002              +95 	dl	ifco:protocol_addr
00:004240 C70006              +96 	ds	6			. cache the new address
00:004241 180008              +97 	sy	8
00:004242 50A002              +98 	lx	this_if:address_list
00:004243 70A003              +99 	tz	ifaddr:net		. the first address tuple is present from compile time
00:004244 3E025E              +100 	lcal	ifconfigure_add_address	. and may or may not have the first address written in
00:004245 C7A003              +101 	ds	ifaddr:net
00:004246 3E0275              +102 	lcal	ifconfigure_lexically
00:004247 58F000              +103 	ly	0, sp
00:004248 60B000              +104 	la	this_if:id, y
00:004249 20A002              +105 	sa	ifaddr:i_f
00:00424A 580008              +106 	ly	8
00:00424B 68B004              +107 	lb	ifco:maskbits_physaoctets
  :                            108 
00:00424C 3E028C              +109 	lcal	ifconfigure_log2netmask
  :                            110 
00:00424D C7A005              +111 	ds	ifaddr:mask
00:00424E B008A9              +112 	xor	(65535)			. compose directed broadcast address
00:00424F B808A9              +113 	xorB	(65535)
00:004250 90A003              +114 	or	ifaddr:net
00:004251 98A004              +115 	orB	ifaddr:net+1
00:004252 C7A007              +116 	ds	ifaddr:broadcast
00:004253 50F000              +117 	lx	0, sp
  :                            118 
  :                            119 ifconfig_store_high_index
[+0005]0f
00:004254 400000              +120 	lr	$ifzp			. don't move it backwards
00:004255 F60258              +121 	jxge	ifconfig_at_highest
00:004256 500000              +122 	lx	r
[+0005]0f
00:004257 100000              +123 	sx	$ifzp			. i_f_last
  :                            124 
  :                            125 ifconfig_at_highest
00:004258 60A000              +126 	la	this_if:id
[+0004]0f
00:004259 200000              +127 	sa	$if0p			. i_f_pointer_array
[+0006]0f
00:00425A 200000              +128 	sa	IFNUMBER_I		. ifNumber:i
  :                            129 
  :                            130 ixconfigure
00:00425B 380002              +131 	pop	x
00:00425C 350000              +132 	lret	0
  :                            133 
  :                            134 
  :                            135 
  :                            136 ifconfigure_advance
00:00425D 500003              +137 	lx	y
  :                            138 
  :                            139 ifconfigure_add_address			. you get here because the default slot is populated
00:00425E CF0006              +140 	dl	6
00:00425F DFA003              +141 	dan	ifaddr:net
00:004260 7C0273              +142 	jdz	ifconfigured_already	. well maybe you wanted to keep the address with  
  :                            143 					. with changed settings
  :                            144 
00:004261 58A000              +145 	ly	ifaddr:next		. if default slot is populated then so are any more you have
00:004262 700003              +146 	tz	y
00:004263 B6025D              +147 	j	ifconfigure_advance
  :                            148 
  :                            149 
[+0007]0f
00:004264 070000              +150 	ts	net_alock
00:004265 B60264              +151 	j	$-1
  :                            152 
[+0008]0f
00:004266 580000              +153 	ly	net_afree
00:004267 700003              +154 	tz	y
00:004268 B6026D              +155 	j	ifconfigure_take_slot
[+0007]0f
00:004269 300000              +156 	z	net_alock		. let go the address slots list
00:00426A 5D025B              +157 	ly	ixconfigure,,xi		. just have to dance dirty here
00:00426B 18F000              +158 	sy	0, sp			. short-circuit the add_address operation
00:00426C 350000              +159 	lret	0
  :                            160 
  :                            161 ifconfigure_take_slot
00:00426D 18A000              +162 	sy	ifaddr:next		. set the new next
00:00426E 500003              +163 	lx	y			. and move to it
00:00426F 58A000              +164 	ly	ifaddr:next		. and write the next next
[+0008]0f
00:004270 180000              +165 	sy	net_afree		. to the free chain head
  :                            166 
00:004271 30A000              +167 	z	ifaddr:next		. cap the interface chain
  :                            168 
[+0007]0f
00:004272 300000              +169 	z	net_alock		. free the address slots list
  :                            170 ifconfigured_already
00:004273 CF0006              +171 	dl	6
00:004274 350000              +172 	lret	0
  :                            173 
  :                            174 
  :                            175 ifconfigure_lexically
[+0009]0f
00:004275 440000              +176 	lr	net_alexical,,i		. update pointer: a scalar not structure member
  :                            177 
  :                            178 configure_lexically			. entry point for other tables like ifAddrTable
00:004276 588000              +179 	ly	*r			. r is **
00:004277 B6027E              +180 	j	ifconfigure_eolexical?
  :                            181 
  :                            182 ifconfigure_compare
00:004278 CF0006              +183 	dl	6
00:004279 DFB003              +184 	dan	ifaddr:net, y
00:00427A 7C0282              +185 	jdz	ifconfigure_listed	. built and run-time configured with the same address
  :                            186 					. but possibly with other settings changed
00:00427B 5E0280              +187 	jnc	ifconfigure_insert_lexically
00:00427C 44B001              +188 	lr	ifaddr:lexical, y, i	. update pointer word in structure, not structure
00:00427D 58B001              +189 	ly	ifaddr:lexical, y
  :                            190 
  :                            191 ifconfigure_eolexical?
00:00427E 700003              +192 	tz	y			. end of chain = higher
00:00427F B60278              +193 	j	ifconfigure_compare
  :                            194 
  :                            195 ifconfigure_insert_lexically
00:004280 18A001              +196 	sy	ifaddr:lexical
00:004281 108000              +197 	sx	*r			. either lexical chain head or link pointer
  :                            198 
  :                            199 ifconfigure_listed
00:004282 350000              +200 	lret	0
  :                            201 
  :                            202 	$if	HVSOCKET
  :                            203 hvtraffic_configure
                                	c	(hvsockets_bind)	ifco:protocol_part:ports	;
                                					ifco:protocol_part:port		;
                                					ifco:protocol_part:density	;
00:004283 9FB002              +207 					ifco:protocol_addr,,long
00:004284 F8B014              +207 
00:004285 F8B012              +207 
00:004286 F8B013              +207 
00:004287 FCF005              +207 
00:004288 FF08AA              +207 
00:004289 38000F              +207 
00:00428A 350000              +208 	lret	0
  :                            209 	$endif
  :                            164: 	$include	log2mask
  :                            1 route_configure_log2netmask
00:00428B 160010              +2 	dsr	16			. [a] -> b 23..8
  :                            3 ifconfigure_log2netmask
00:00428C 9D00FF              +4 	orB	255,,xi			. compose netmask from bits width 15..8
00:00428D 650000              +5 	la	0,,xi
00:00428E 560008              +6 	drr	8			. place 1111 1111  at a: 23..16
00:00428F AD00FF              +7 	andB	255,,xi			.   and mask width in b
00:004290 96D000              +8 	dsa	0, b			. propagate 1s [mask width] times
00:004291 360008              +9 	dsl	8			. take away the 1s bits you first thought of
00:004292 160008              +10 	dsr	8			. place 16 bits of mask in a: 0.x.x
00:004293 0E0008              +11 	sbr	8			.   and 16 bits of mask in b: 0.y.y
00:004294 350000              +12 	lret	0
  :                            165: 	$include	route_in
  :                            1 $(67::,y)
  :                            2 roco	route_config_frame
  :                            3 
  :                            4 $(0)
  :                            5 
  :                            6 route_insert	$tree			. this part is called like configuration protocol
00:004295 750059              +7 	ii	KERNEL$B1_1
[+000a]0f
00:004296 500000              +8 	lx	route_lexical		. first are we replacing a route?
00:004297 CFB002              +9 	dl	roco:net
00:004298 C70006              +10 	ds	6
00:004299 B6029E              +11 	j	route_ahead?
  :                            12 route_ahead!
00:00429A CFA003              +13 	dl	ro:net
00:00429B DF0006              +14 	dan	6
00:00429C 7C02A5              +15 	jdz	route_overlay
00:00429D 50A001              +16 	lx	ro:lexical		. next route
  :                            17 route_ahead?
00:00429E 700002              +18 	tz	x			. is this a route?
00:00429F B6029A              +19 	j	route_ahead!		. yes, examine
  :                            20 					. no, fall thru, it's a new route
[+000b]0f
00:0042A0 500000              +21 	lx	route_free
00:0042A1 700002              +22 	tz	x			. no free slot = no store
00:0042A2 3E02B9              +23 	lcal	insert			. free slot = store
00:0042A3 750058              +24 	ii	B1$
00:0042A4 3D0000              +25 	fret	0
  :                            26 
  :                            27 route_overlay
00:0042A5 3E02A8              +28 	lcal	route_store
00:0042A6 750058              +29 	ii	B1$
00:0042A7 3D0000              +30 	fret	0
  :                            31 
  :                            32 route_store				. switch configuration tuple into route cache
00:0042A8 60B000              +33 	la	roco:flag_ifidx		. indirect_flag ++ interface_index
00:0042A9 64C002              +34 	la	2, a, i
00:0042AA 760009              +35 	drl	9			. net interface sends indirect flag as bit 15
00:0042AB 060008              +36 	sar	8			. RTA routing prefers it at bit 23
00:0042AC 560001              +37 	drr	1
00:0042AD 20A002              +38 	sa	ro:i_f
00:0042AE CFB002              +39 	dl	roco:net		. route destination
00:0042AF C7A003              +40 	ds	ro:net
00:0042B0 60B001              +41 	la	roco:mask_log		. mask width
00:0042B1 20A009              +42 	sa	ro:mask_log		. used newer route MIBs
00:0042B2 3E028B              +43 	lcal	route_configure_log2netmask
00:0042B3 C7A005              +44 	ds	ro:mask			. to stored mask
00:0042B4 CFB004              +45 	dl	roco:next_hop
00:0042B5 C7A007              +46 	ds	ro:next_hop
00:0042B6 60B006              +47 	la	roco:mtu
00:0042B7 20A00A              +48 	sa	ro:mtu
00:0042B8 350000              +49 	lret	0
  :                            50 
  :                            51 .	7-word input y ->
  :                            52 .		_________________________________________________ _ _ _ _
  :                            53 .		| [*]i/f|masklog|  destination	|   next hop	|  mtu	|
  :                            54 .		|_______|_______|_______|_______|_______|_______| _ _ _ |
  :                            55 
  :                            56 .	11-word stored route
  :                            57 .	_________________________________________________________________________________________
  :                            58 .	| search| list	| [*]i/f|  mtu	|  destination	|      mask	|   next hop	|masklog|
  :                            59 .	|_chain_|_chain_|_______|_______|_______|_______|_______|_______|_______|_______|_______|
  :                            60 
  :                            61 
00:0042B9 3E02A8              +62 insert	lcal	route_store		. switch configuration tuple into route cache
00:0042BA 58A000              +63 	ly	ro:next
[+000b]0f
00:0042BB 180000              +64 	sy	route_free		. free chain updated
  :                            65 
[+000c]10
00:0042BC 5D0000              +66 	ly	route_list,,xi		. find insert point in  search chain
  :                            67 
  :                            68 search_down				. 1st in chain is FFFF FFFF anyway
00:0042BD 400003              +69 	lr	y			. prior <--
00:0042BE 58B000              +70 	ly	ro:next, y		. next in chain
00:0042BF CFA005              +71 	dl	ro:mask
00:0042C0 DFB005              +72 	dan	ro:mask, y
00:0042C1 5E02BD              +73 	jnc	search_down		. new route mask is < i.e. less wide
  :                            74 					. new route mask is >= 
00:0042C2 18A000              +75 	sy	ro:next			. forward pointer of new
00:0042C3 108000              +76 	sx	*r			. forward pointer of prior
  :                            77 
[+000a]10
00:0042C4 450000              +78 	lr	route_lexical,,xi
00:0042C5 CFA003              +79 	dl	ro:net
00:0042C6 C70006              +80 	ds	6
00:0042C7 3E0276              +81 	lcal	configure_lexically
00:0042C8 350000              +82 	lret	0
  :                            83 	$root
  :                            166: 	$include	queue
  :                            1 
  :                            2 .	descriptors are short-term on two chains
  :                            3 .	so that TCP segments awaiting ACK
  :                            4 .	can be on the interface queue and the
  :                            5 .	connection's ACK wait queue at the same time
  :                            6 
  :                            7 .	IP / TCP / UDP uses chain link descriptor:next
  :                            8 
  :                            9 .	interface queues use chain link descriptor:ifql
  :                            10 
  :                            11 .	ifql is a reuse of descriptor:readpoint which
  :                            12 .	which points TCP past consumed / duplicate
  :                            13 .	payload in incoming segments
  :                            14 
  :                            15 .	in high-volume space where certain TCP ports
  :                            16 .	have private buffer pools [HVSOCKET], the buffer
  :                            17 .	and its descriptor are in the same bank
  :                            18 
  :                            19 .	descriptors are located by chain head pointer
  :                            20 .	or previous descriptor forward pointer
  :                            21 
  :                            22 .	during HVSOCKET operations the bank containing
  :                            23 .	the segment is in address space whenever the socket
  :                            24 .	is in address space	
  :                            25 
  :                            26 .	high-volume private buffer pools are only used
  :                            27 .	in some TCP traffic which is expected to be of
  :                            28 .	extreme volume or confidential. The private buffer
  :                            29 .	arrangement enables millions of transmitted segments
  :                            30 .	awaiting remote acknowledgement to remain buffered
  :                            31 
  :                            32 .	interface device drivers drop transmitted datagrams
  :                            33 .	from protocols which do not resend
  :                            34 
  :                            35 .	TCP flags bit 23 of descriptor:bytes and interface
  :                            36 .	drivers do not drop those buffers after transmission
  :                            37 
  :                            38 .	vector name write_ifq
  :                            39 
  :                            40 .	these sequences only lock off interrupts
  :                            41 .	there is no object locking because
  :                            42 .	only ip thread touches interface queues
  :                            43 
  :                            44 	$if	__IFLOCQ
  :                            45 
  :                            46 QLOCK*	$proc
  :                            47 	LOCK	QLOCK()
  :                            48 	$end
  :                            49 
  :                            50 QFREE*	$proc
  :                            51 	FREE	QFREE()
  :                            52 	$end
  :                            53 
  :                            54 	$else
  :                            55 
  :                            56 QLOCK*	$proc
  :                            57 	push	MAX_INT_MASK,,xi
  :                            58 	sim	0, sp
  :                            59 	$end
  :                            60 
  :                            61 QFREE*	$proc
  :                            62 	sim	0, sp
  :                            63 	inc	sp
  :                            64 	$end
  :                            65 
  :                            66 	$endif
  :                            67 
  :                            68 	$if	0
  :                            69 rewindq	sim	1, sp
  :                            70 	ii	YIELD$
  :                            71 	sim	1, sp
  :                            72 	lret	-2
  :                            73 	$endif
  :                            74 
00:0042C9 F80002              +75 q2if	push	x
00:0042CA 70A027              +76 	tz	this_if:q2		. diversion to trunk handling
00:0042CB 50A027              +77 	lx	this_if:q2		. at another logical interface
  :                            78 
00:0042CC FD0007              +79 	QLOCK	this_if:lock_cell_q1	. rewindq
00:0042CD 27F000              +79 
00:0042CE 07A028              +79 
00:0042CF B602CE              +79 
  :                            80 
00:0042D0 70A02D              +81 	tz	this_if:oq:head
00:0042D1 B602D6              +82 	j	q2ifz
00:0042D2 20A02D              +83 	sa	this_if:oq:head
00:0042D3 20A02E              +84 	sa	this_if:oq:tail
00:0042D4 30C007              +85 	z	descriptor:ifql, a
00:0042D5 B602DA              +86 	j	q2ifzx
  :                            87 
00:0042D6 68A02E              +88 q2ifz	lb	this_if:oq:tail
00:0042D7 20D007              +89 	sa	descriptor:ifql, b
00:0042D8 20A02E              +90 	sa	this_if:oq:tail
00:0042D9 30C007              +91 	z	descriptor:ifql, a
  :                            92 
00:0042DA 30A028              +93 q2ifzx	QFREE	this_if:lock_cell_q1
00:0042DB 27F000              +93 
00:0042DC 17000F              +93 
00:0042DD 380002              +94 	pop	x
00:0042DE 3D0000              +95 	fret	0
  :                            96 
  :                            97 					. local call only visible from this page
  :                            98 					. only drivers call it in IP thread
  :                            99 					. for physical transmission queued frames
  :                            100 
00:0042DF FD0007              +101 readifq	QLOCK	this_if:lock_cell_q1	. rewindq
00:0042E0 27F000              +101 
00:0042E1 07A028              +101 
00:0042E2 B602E1              +101 
00:0042E3 60A02D              +102 	la	this_if:oq:head
  :                            103 readifq2
00:0042E4 C602E7              +104 	jza	rqifz
00:0042E5 68C007              +105 	lb	descriptor:ifql, a
00:0042E6 28A02D              +106 	sb	this_if:oq:head
00:0042E7 30A028              +107 rqifz	QFREE	this_if:lock_cell_q1
00:0042E8 27F000              +107 
00:0042E9 17000F              +107 
00:0042EA 350000              +108 	lret	0
  :                            109 
  :                            110 	. long address (inter bank) queues
  :                            111 
  :                            112 					. local call only visible from this page
  :                            113 					. only drivers call it in IP thread
  :                            114 					. for physical transmission queued frames
  :                            115 
00:0042EB FD0007              +116 rqtxL	QLOCK	this_if:lock_cell_q2	. rewindq
00:0042EC 27F000              +116 
00:0042ED 07A029              +116 
00:0042EE B602ED              +116 
00:0042EF CFA02F              +117 	dl	this_if:oq2:head
00:0042F0 C602F7              +118 	jza	rqtxL_z
00:0042F1 34002F              +119 	sabr	BSOCKET			. base containing memory
00:0042F2 9FD006              +120 	dpush	descriptor:sobdi, b
00:0042F3 38A02F              +121 	dpop	this_if:oq2:head
00:0042F4 38A030              +121 
00:0042F5 30D006              +122 	z	descriptor:sobdi, b	. prevent delayed wrong updates along chain
00:0042F6 600005              +123 	la	b			. return containing pointer
00:0042F7 30A029              +124 rqtxL_z	QFREE	this_if:lock_cell_q2
00:0042F8 27F000              +124 
00:0042F9 17000F              +124 
00:0042FA 350000              +125 	lret	0			. called from this iframe = drivers
  :                            126 
  :                            127 q2txL_head
00:0042FB F80002              +128 	push	x
00:0042FC 70A027              +129 	tz	this_if:q2
00:0042FD 50A027              +130 	lx	this_if:q2
  :                            131 
00:0042FE FD0007              +132 	QLOCK	this_if:lock_cell_q2	. rewindq
00:0042FF 27F000              +132 
00:004300 07A029              +132 
00:004301 B60300              +132 
  :                            133 
  :                            134 					. socket memory is based
00:004302 9FA02F              +135 	dpush	this_if:oq2:head	. and stays based
00:004303 680004              +136 	lb	a
00:004304 054000              +137 	on	see$1
00:004305 60106F              +138 	la	ABT+BSOCKET
00:004306 0D4000              +139 	off	see$1
00:004307 70F001              +140 	tnz	1, sp			. anything already on this queue?
00:004308 B6030A              +140 
00:004309 C7A031              +141 	ds	this_if:oq2:tail	. if not the new object is head + tail
00:00430A C7A02F              +142 	ds	this_if:oq2:head	. new becomes 1st
00:00430B 38D006              +143 	dpop	descriptor:sobdi, b	. 1st becomes 2nd if any
00:00430C 38D007              +143 
  :                            144 
00:00430D 30A029              +145 	QFREE	this_if:lock_cell_q2
00:00430E 27F000              +145 
00:00430F 17000F              +145 
  :                            146 
00:004310 380002              +147 	pop	x			. I / F pointer at call
00:004311 3D0000              +148 	fret	0			. called from protocol iframe
  :                            149 
  :                            150 q2txL_tail
00:004312 F80002              +151 	push	x
00:004313 70A027              +152 	tz	this_if:q2
00:004314 50A027              +153 	lx	this_if:q2
  :                            154 
00:004315 FD0007              +155 	QLOCK	this_if:lock_cell_q2	. rewindq
00:004316 27F000              +155 
00:004317 07A029              +155 
00:004318 B60317              +155 
  :                            156 
00:004319 680004              +157 	lb	a
00:00431A 054000              +158 	on	see$1
00:00431B 60106F              +159 	la	ABT+BSOCKET
00:00431C 0D4000              +160 	off	see$1
00:00431D 30D006              +161 	z	descriptor:sobdi, b
00:00431E 30D007              +162 	z	descriptor:ifql, b	. always up to here
  :                            163 	
00:00431F 70A02F              +164 	tz	this_if:oq2:head:bx
00:004320 B60323              +165 	j	q2txL_catenate
00:004321 C7A02F              +166 	ds	this_if:oq2:head	. 1st on queue
00:004322 B6032C              +167 	j	q2txL_final		. and last
  :                            168 	
  :                            169 q2txL_catenate
00:004323 9F0004              +170 	dpush	a			. 2 copies of long pointer
00:004324 9F0004              +171 	dpush	a			. connections_block:connection
00:004325 CFA031              +172 	dl	this_if:oq2:tail
00:004326 34002F              +173 	sabr	BSOCKET			. memory index heretofore last on chain
00:004327 38D006              +174 	dpop	descriptor:sobdi, b	. 1st copy previous last -> last 
00:004328 38D007              +174 
00:004329 380004              +175 	dpop	a			. 2nd copy to write to queue tail
00:00432A 380005              +175 
00:00432B 34002F              +176 	sabr	BSOCKET			. caller certainly needs that restored
  :                            177 
  :                            178 q2txL_final
00:00432C C7A031              +179 	ds	this_if:oq2:tail	. always from here
  :                            180 
00:00432D 30A029              +181 	QFREE	this_if:lock_cell_q2
00:00432E 27F000              +181 
00:00432F 17000F              +181 
00:004330 380002              +182 	pop	x			. I / F pointer at call
00:004331 3D0000              +183 	fret	0			. called from protocol iframe
  :                            167: 	$include	soc_data
  :                            1 soc_data	$tree
  :                            2 
  :                            3 .	vector name __buy6_bytes
  :                            4 .	at entry a -> socket buffer [ + offset ]
  :                            5 .	packs 3 socket buffer words
  :                            6 .	to 2 application data words [ a b ]
  :                            7 
00:004332 F80002              +8 buy6	push	x
00:004333 4808A9              +9 	lk	(00FFFF)
00:004334 500004              +10 	lx	a
00:004335 CFA000              +11 	dl	0, x
00:004336 2E0008              +12 	sbl	8
00:004337 360008              +13 	dsl	8
00:004338 BFA002              +14 	mlb	2, x
00:004339 380002              +15 	pop	x
00:00433A 3D0000              +16 	fret	0
  :                            17 
  :                            18 .	vector name __buy12_bytes
  :                            19 .	at entry a -> socket buffer [ + offset ]
  :                            20 .	packs 6 socket buffer words
  :                            21 .	to 4 application data words [ a b 6 7 ]
  :                            22 
00:00433B F80002              +23 buy12	push	x
00:00433C 4808A9              +24 	lk	(00FFFF)
00:00433D 500004              +25 	lx	a
00:00433E CFA003              +26 	dl	3, x
00:00433F 2E0008              +27 	sbl	8
00:004340 360008              +28 	dsl	8
00:004341 BFA005              +29 	mlb	5, x
00:004342 C70006              +30 	ds	6
00:004343 CFA000              +31 	dl	0, x
00:004344 2E0008              +32 	sbl	8
00:004345 360008              +33 	dsl	8
00:004346 BFA002              +34 	mlb	2, x
00:004347 380002              +35 	pop	x
00:004348 3D0000              +36 	fret	0
  :                            37 	
  :                            38 		$root
  :                            168: 	$include	if2media
  :                            1 if2media? $tree
  :                            2 
00:004349 60A023              +3 	la	this_if:oqremaining	. hold traffic from medium?
00:00434A A60355              +4 	jpa	cleared
  :                            5 	
00:00434B 68A024              +6 	lb	this_if:threshold_time
00:00434C CE0351              +7 	jzb	restart_clear		. initial
00:00434D 600097              +8 	la	DAYCLOCK$
00:00434E D00005              +9 	ana	b
00:00434F A60351              +10 	jpa	restart_clear		. time has reached restart allowance
  :                            11 				
00:004350 350000              +12 	lret	0			. time has not. Output must wait
  :                            13 
  :                            14 restart_clear
00:004351 600097              +15 	la	DAYCLOCK$
00:004352 C50000              +16 	aa	THRESHOLD_QUANTUM_MS_IFT2,,xi
00:004353 20A024              +17 	sa	this_if:threshold_time
  :                            18 
00:004354 60A022              +19 	la	this_if:oqlen
  :                            20 
00:004355 C5FFFF              +21 cleared	aa	-1,,xi
00:004356 20A023              +22 	sa	this_if:oqremaining
00:004357 350001              +23 	lret	1			. clear to send
  :                            24 
  :                            25 	$root
  :                            169: 	$include	recheck
  :                            1 .	diagnostic call to see if parts of an IP header
  :                            2 .	heve got overwritten
  :                            3 
  :                            4 .	if it goes to GUARD$ interrupt
  :                            5 .	8 caller registers [ r k x y a b 6 7 ]
  :                            6 .	are on the application internal stack
  :                            7 .	otherwise no registers are changed
  :                            8 
  :                            9 .	$do	1,	c	(__recheck)	address[,,i]
  :                            10 
  :                            11 
  :                            12 recheck	$tree
                                	$head_far	 params(datagram_p,	int)		;
                                								;
                                			scalars(caller_ab67,	float,	a	;
00:004358 8F0004              +16 				caller_rkxy,	float,	r	)
00:004359 8F0000              +16 
  :                            17 
00:00435A 50F00B              +18 	lx	datagram_p		. pointer
00:00435B 60A000              +19 	la	0, x
00:00435C 160008              +20 	dsr	8
00:00435D 4DFFF0              +21 	lk	-16,,xi
00:00435E AF08AB              +22 	mta	(000040)		. 1st quartet 4 ?
00:00435F B60375              +23 	j	recheck_reject
00:004360 A5000F              +24 	and	15,,xi
00:004361 C5FFFC              +25 	aa	-5+2-1,,xi		. enough longwords
00:004362 5E0375              +26 	jnc	recheck_reject		. to be an IP header?
00:004363 400004              +27 	lr	a
  :                            28 	
00:004364 CFA000              +29 	dl	0, x			. version_hl_tos : size
00:004365 D7A002              +30 	da	2, x			. dgram_id : dnf+ 
  :                            31 
00:004366 D7A006              +32 addons	da	6, x			. word pairs
00:004367 850002              +33 	ax	2,,xi			. starting addresses
00:004368 1E0366              +34 	jdr	addons			. + up to 10 more pairs
  :                            35 
00:004369 50F00B              +36 	lx	datagram_p		. reload pointer
00:00436A C0A004              +37 	aa	4, x			. include  ttl_protocol
  :                            38 
  :                            39 addaround
00:00436B C00005              +40 	aa	b
00:00436C 160010              +41 	dsr	16
00:00436D 0E0008              +42 	sbr	8
00:00436E D6036B              +43 	jnza	addaround
  :                            44 
00:00436F B808A9              +45 	xorB	(00FFFF)
00:004370 B8A005              +46 	xorB	5, x
  :                            47 
00:004371 DE0375              +48 	jnzb	recheck_reject
  :                            49 
00:004372 870000              +50 	qpop	r
00:004373 870004              +51 	qpop	a
00:004374 3D0000              +52 	fret	0
  :                            53 
  :                            54 recheck_reject
00:004375 75005F              +55 	ii	GUARD$
  :                            56 
  :                            57 	$root
  :                            58 
  :                            170: 	$include	mcapsule
  :                            1 
  :                            2 mib_scope_update	$tree
  :                            3 
  :                            4 .	these call[s] are on diagnostic mib objects
  :                            5 	
  :                            6 .	$vector name tx_mib_update
  :                            7 
  :                            8 .	caller has address of data part of managed object
  :                            9 .	but has his own B1 in address space not mib variables in kernel B1
  :                            10 .	just be sure it'a a 48-bit object
  :                            11 .	and you name its data part :i
  :                            12 
  :                            13 .	c	(tx_mib_update)	thing:i,,xi	some_number_like_1[,,xi]
  :                            14 
  :                            15 variable48
  :                            16 	$if	1
                                	$head_far	 params(object_p,	int	;
                                				increment,	int)	;
                                							;
00:004376 F80002              +20 			scalars(caller_x,	int,	x)
  :                            21 
00:004377 750059              +22 	ii	KERNEL$B1_1		. map onto MIB data
00:004378 50F004              +23 	lx	object_p		. pointer -> data part managed object
00:004379 F8F005              +24 	push	increment		. stack names are momentarily curved
00:00437A 2FA001              +25 	popA	1, x			. until here
00:00437B 5E037D              +26 	jnc	in_range		. 48 bits += 24 bits unsigned
00:00437C 17A000              +27 	inc	0, x
  :                            28 
  :                            29 in_range
00:00437D 750058              +30 	ii	B1$			. map onto caller data
00:00437E 380002              +31 	pop	x
  :                            32 	$endif
  :                            33 
00:00437F 3D0000              +34 	fret	0
  :                            35 
  :                            36 	$root	
  :                            171: 	$include	../t77.4/i_locate
  :                            1 i_locate	$tree
  :                            2 
  :                            3 .	vector name locate_interfaces
  :                            4 
  :                            5 locate_interfaces
[+000d]10
00:004380 450000              +6 	lr, xi	INTERFACES_HIGH_INDEX		. interface(INTERFACES)
00:004381 5D0002              +7 	ly, xi	2
[+0003]0f
00:004382 500000              +8 	lx	$if2p				. interface(2) pointer
  :                            9 						. interface(1) is software loopback
00:004383 4808AC              +10 	lk	(0C00000s)
  :                            11 
  :                            12 locate_interfaces_again
00:004384 04B080              +13 	inA	128, y
00:004385 AF088B              +14 	mta	(IF16)
00:004386 B60395              +15 	j	locate_interfaces_next_device
[+0005]0f
00:004387 100000              +16 	sx	$ifzp				. i_f_last
00:004388 3E039F              +17 	lcal	locate_primed_interface?
00:004389 B60399              +18 	j	thats_enough_interfaces		. no
  :                            19 						. yes
00:00438A 68A003              +20 	lb	this_if:type
00:00438B CDFF9C              +21 	ab	-platform_relay,,xi		. if it's ift1
00:00438C DE0391              +22 	jnzb	type_as_marked
00:00438D 680004              +23 	lb	a				. descriptor from I/O port
00:00438E A80891              +24 	andB	(03FFFFF)			. is it really just 1 bank?
00:00438F CE0391              +25 	jzb	type_as_marked			. yes
  :                            26 						. no
00:004390 3E03A5              +27 	lcal	revise_interface_class		. it needs this driver
  :                            28 
  :                            29 type_as_marked
00:004391 FFA033              +30 	call	this_if:initial			. yes
[+0005]0f
00:004392 100000              +31 	sx	$ifzp				. i_f_last, so far
  :                            32 
00:004393 F60399              +33 	jxge	thats_enough_interfaces
00:004394 850044              +34 	ax, xi	__IF_SIZE			. interface(2)-interface(1)
  :                            35 
  :                            36 locate_interfaces_next_device
00:004395 8D0001              +37 	ay, xi	1
00:004396 600003              +38 	la	y
00:004397 C5FFC0              +39 	aa, xi	-64
00:004398 5E0384              +40 	jnc	locate_interfaces_again
  :                            41 
  :                            42 thats_enough_interfaces
[+0005]0f
00:004399 500000              +43 	lx	$ifzp				. i_f_last
00:00439A F8A000              +44 	push	this_if:id
00:00439B F8F000              +45 	push	0, sp
[+0004]0f
00:00439C 380000              +46 	pop	$if0p				. i_f_pointer_array
[+0006]0f
00:00439D 380000              +47 	pop	IFNUMBER_I
00:00439E 3D0000              +48 	fret	0
  :                            49 
  :                            50 locate_primed_interface?
00:00439F 70A033              +51 	tz	this_if:initial
00:0043A0 350001              +52 	lret	1				. interface is trunk master
00:0043A1 F603A4              +53 	jxge	located_no_primed_interface
00:0043A2 850044              +54 	ax	__IF_SIZE,,xi			. interface(2)-interface(1),,xi
00:0043A3 B6039F              +55 	j	locate_primed_interface?
  :                            56 located_no_primed_interface
00:0043A4 350000              +57 	lret	0
  :                            58 	
  :                            59 revise_interface_class
00:0043A5 F80004              +60 	push	a
00:0043A6 6D0065              +61 	lb	platform_relay2,,xi
00:0043A7 28A003              +62 	sb	this_if:type
00:0043A8 CF08AD              +63 	dl	( __initial_ift2, __rxtx_ift2:d)
00:0043A9 C7A033              +64 	ds	this_if:initial
00:0043AA 380004              +65 	pop	a
00:0043AB 350000              +66 	lret	0
  :                            67 
  :                            68 	$root
  :                            172 	$list
  :                            173 
  :                            174 	$path		../arp.ext
  :                            188 	$list		3
  :                            189: 	$include	arp_enet
  :                            1 ethernet_arp	$tree
  :                            2 
  :                            3: 	$include	arp_enet.def
  :                            1 HLEN		$set	6
  :                            2 PLEN		$set	4
  :                            3 HTYPE		$set	ETHERNET_SPACE
  :                            4 PROTOCOL_SUITE  $set    0800
  :                            5 LINK_PROTOCOL   $set    0806
  :                            6 
                                		$do	ARP_POINTER_ARRAY()^=0,;
  :                            8 ENET_POINTER_ARRAY*	$set	ARP_POINTER_ARRAY(1)
  :                            9 
  :                            10 AT_POINTER_ARRAY	$set	ENET_POINTER_ARRAY
  :                            11 
                                		$do	ARP_HASH_LIST()^=0,;
  :                            13 ENET_HASH_LIST*		$set	ARP_HASH_LIST(1)
  :                            14 
  :                            15 AT_HASH_LIST	$set	ENET_HASH_LIST
  :                            16 
  :                            17 ARP_HASH	$set	16
  :                            18 ARP_STORE	$set	3 . 50
  :                            4 
  :                            5 ETHERNET_ARP_ARPQ_HEAD*	$set	arpq.head
  :                            6 
  :                            7 .	ARP for
  :                            8 .		48-bit physical addresses
  :                            9 .	and	32-bit protocol addresses
  :                            10 
  :                            11 .	this may be the only ARP needed
  :                            12 .	if another ARP is needed
  :                            13 .	for different size addresses
  :                            14 .	include arp.msm again
  :                            15 
  :                            16 .	netspace	$tree
  :                            17 .	SETTINGS	$set	values
  :                            18 .			$include arp
  :                            19 .			$root
  :                            20 .
  :                            21 .	whatever storage bank that is in
  :                            22 .	needs four vectors at the front
  :                            23 
  :                            24 .	netspa_arp_rx* $vector	netspace:arp_rx
  :                            25 .	netspa_arp_reso* $vector netspace:resolve
  :                            26 .	netspa_arp_xmit* $vector netspace:xmit
  :                            27 .	xarp_netspace*	$vector	netspace:xarp
  :                            28 
  :                            29 .	these vectors go in the interface descriptor
  :                            30 
  :                            31 .	this_if:arp_rx
  :                            32 .	this_if:arp_tx
  :                            33 .	this_if:arp_resolve
  :                            34 .	this_if:xarp
  :                            35 
  :                            36 .		ql	(netspa_arp_rx, netspa_arp_tx, netspa_arp_reso, xarp_netspace:q)
  :                            37 .		qs	this_if:arp_rx
  :                            38 
  :                            39 .	this would usually happen in ifconfigure.msm  where 
  :                            40 .	the vector pointer to the routine for constructing
  :                            41 .	link layer header is also written to this_if:write_llh
  :                            42 
  :                            43 
  :                            44 .	the settings and and generation of ethernet ARP follow here
  :                            45 
  :                            46 
  :                            47 	$if	0		. moved to arp_enet.def
  :                            48 
  :                            49 ARP_HASH	$set	16	. # hash chains
  :                            50 ARP_STORE	$set	50	. however many ARP cache rows are required
  :                            51 
  :                            52 HTYPE	$set	ETHERNET_SPACE
  :                            53 HLEN	$set	6
  :                            54 PLEN	$set	4
  :                            55 PROTOCOL_SUITE	$set	0800
  :                            56 LINK_PROTOCOL	$set	0806
  :                            57 
  :                            58 	$endif
  :                            59 
  :                            60 ARP_XMIT	$set	arp_ether_xmit
  :                            61 
  :                            62: 		$include	arp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(1:*1)
  :                            41 
01:000000 000000              +42 arpq	dq
01:000001 000000              +42 
  :                            43 
  :                            44 arp_hash
01:000002 000000              +45 	$do	ARP_HASH,	0
01:000003 000000              +45 
01:000004 000000              +45 
01:000005 000000              +45 
01:000006 000000              +45 
01:000007 000000              +45 
01:000008 000000              +45 
01:000009 000000              +45 
01:00000A 000000              +45 
01:00000B 000000              +45 
01:00000C 000000              +45 
01:00000D 000000              +45 
01:00000E 000000              +45 
01:00000F 000000              +45 
01:000010 000000              +45 
01:000011 000000              +45 
  :                            46 
  :                            47 ?	$do	ARP_STORE,arp_line(?)	arp_cache
  :                            48 
(+01)18
01:00002A 000012              +49 arp_next	+	arp_line(1)
  :                            50 
  :                            51 	$if	T77_DRIVERS_THREADED
  :                            52 arpq_tscell	+	0
  :                            53 	$endif
  :                            54 
01:00002B 000000              +55 broadcast_line	broadcast_cache
01:00002C 000000              +55 
01:00002D 000000              +55 
01:00002E 00FFFF              +55 
01:00002F 00FFFF              +55 
01:000030 00FFFF              +55 
01:000031 00FFFF              +55 
01:000032 00FFFF              +55 
  :                            56 
  :                            57 ARP_HASH_LIST(1)	$set	arp_hash
  :                            58 
  :                            59 $(67::,y)
  :                            60 arp_row	arp_cache
  :                            61 ARP_CACHE_WORDS	$set	$
  :                            62 
  :                            63 $(67::,y)
  :                            64 arp_msg	arp_dgram
  :                            65 ARP_MSG_WORDS	$set	$
  :                            66 
  :                            67 $(0)
  :                            68 
00:0043AC 8F0000              +69 xarp	qpush	r
  :                            70 xarp_next
(+01)10
00:0043AD 5D0000              +71 	ly, xi	arpq
  :                            72 
  :                            73 	$if	T77_DRIVERS_THREADED	. if device drivers are not in IP main thread
  :                            74 	LOCK	arpq_tscell		. it must be done this way
  :                            75 	call	(far_readq)
  :                            76 	FREE	arpq_tscell
  :                            77 	$else				. otherwise it can be done this way
00:0043AE FF08AF              +78 	call	(far_readq)
  :                            79 	$endif
  :                            80 
00:0043AF C603BE              +81 	jza	xarp_timers
00:0043B0 20000E              +82 	sa	fp
00:0043B1 3E0468              +83 	lcal	glean_and_push
  :                            84 
00:0043B2 58E004              +85 	ly	descriptor:dgram
00:0043B3 CFB007              +86 	dl	arp_msg:spa
00:0043B4 7C03BA              +87 	jdz	xarp_clear		. don't respond to ZeroConf
00:0043B5 60B003              +88 	la	arp_msg:oper
00:0043B6 D50001              +89 	ana	ARP_REQUEST,,xi
00:0043B7 D603BA              +90 	jnza	xarp_clear
00:0043B8 50F002              +91 	lx	2, sp
00:0043B9 3E0485              +92 	lcal	search_and_indicate	. is this address here?
  :                            93 
  :                            94 xarp_clear
00:0043BA 60000E              +95 	la	fp
00:0043BB 502180              +96 	lx	rx_buffers
00:0043BC FF0884              +97 	call	(if_sell1)
00:0043BD B603AD              +98 	j	xarp_next
  :                            99 
  :                            100 xarp_timers
00:0043BE 45000F              +101 	lr	ARP_HASH-1,,xi
(+01)10
00:0043BF 550002              +102 	lx	arp_hash,,xi
  :                            103 xarp_walk
00:0043C0 58A000              +104 	ly	0, x
00:0043C1 850001              +105 	ax	1,,xi
00:0043C2 B603C5              +106 	j	xarp_walk_chain
  :                            107 xarp_walk_next
00:0043C3 3E0499              +108 	lcal	time_test
00:0043C4 58B000              +109 	ly	arp_row:next
  :                            110 xarp_walk_chain
00:0043C5 700003              +111 	tz	y
00:0043C6 B603C3              +112 	j	xarp_walk_next
00:0043C7 1E03C0              +113 	jdr	xarp_walk
00:0043C8 870000              +114 xarpx	qpop	r
  :                            115 
00:0043C9 3D0000              +116 	fret	0
  :                            117 
00:0043CA 9F0002              +118 arp_rx	dpush	x
00:0043CB 600000              +119 	la	r
00:0043CC D5001C              +120 	ana	ARP_MSG_WORDS*2,,xi	. must have this many octets
00:0043CD 5E03E0              +121 	jnc	arp_rxz			. to be complete
00:0043CE 502180              +122 	lx	rx_buffers		. move some of it away from i/f buffers
00:0043CF 650010              +123 	la, xi	ARP_MSG_WORDS+3**-4	. that's how much we'll look at
00:0043D0 FF08B0              +124 	call	(if_buy1)
00:0043D1 C603E0              +125 	jza	arp_rxz
00:0043D2 50C001              +126 	lx	descriptor:frame, a
00:0043D3 10C004              +127 	sx	descriptor:dgram, a
  :                            128 
00:0043D4 58F001              +129 	ly	1, sp
00:0043D5 450003              +130 	lr	ARP_MSG_WORDS//4-1,,xi
  :                            131 arp_rx_store
00:0043D6 8FB000              +132 	qpush	0, y
00:0043D7 87A000              +133 	qpop	0, x
00:0043D8 8D0004              +134 	ay	4,,xi
00:0043D9 850004              +135 	ax	4,,xi
00:0043DA 1E03D6              +136 	jdr	arp_rx_store
  :                            137 
(+01)10
00:0043DB 5D0000              +138 	ly	arpq,,xi
  :                            139 
  :                            140 	$if	T77_DRIVERS_THREADED
  :                            141 	LOCK	arpq_tscell
  :                            142 	call	(far_q2)
  :                            143 	FREE	arpq_tscell
  :                            144 	$else
00:0043DC FF08B1              +145 	call	(far_q2)
  :                            146 	$endif
  :                            147 
00:0043DD 50F000              +148 	lx	0, sp
00:0043DE 68A000              +149 	lb	this_if:id
00:0043DF 28C002              +150 	sb	descriptor:i_f, a
  :                            151 
00:0043E0 380002              +152 arp_rxz	dpop	x
00:0043E1 380003              +152 
00:0043E2 3D0000              +153 	fret	0
  :                            154 	
00:0043E3 8F0010              +155 resolve	qpush	d$save
00:0043E4 8F0008              +156 	qpush	8
00:0043E5 65FFFF              +157 	la	-1,,xi			. hasn't until it has
00:0043E6 8F0004              +158 	qpush	a
00:0043E7 8F0000              +159 	qpush	r
  :                            160 
  :                            161 caller_i_f	$equf	2, sp		. still in x as well so far
  :                            162 NET_ADDR	$set	6
  :                            163 LL_H		$set	TX_FRAME
  :                            164 CHAIN_HEAD	$set	10
  :                            165 AXW		$set	8		. it was where we are called from
  :                            166 
  :                            167 					. find the hash chain
00:0043E8 600009              +168 	la	TX_FRAME
00:0043E9 CFC00E              +169 	dl	nframe:next_hop, a
00:0043EA 40A000              +170 	lr	this_if:id		. the calling xmit routine has the I/F
00:0043EB 3E043D              +171 	lcal	find_in_cache		. entry point precaches target protocol address
00:0043EC 700003              +172 	tz	y
00:0043ED B603F8              +173 	j	deliver			. consider found in ARP cache
  :                            174 
00:0043EE 600013              +175 	la	TX_DATAGRAM
  :                            176 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				caller_i_f		;
                                				0,,xi			;
                                				NET_ADDR,,long		;
00:0043EF 9FC006              +181 				dgram:ipsource,a,long
00:0043F0 9F0006              +181 
00:0043F1 FD0000              +181 
00:0043F2 F8F007              +181 
00:0043F3 FD0001              +181 
00:0043F4 FCF007              +181 
00:0043F5 FF08B2              +181 
00:0043F6 38000F              +181 
  :                            182 
00:0043F7 B603FE              +183 	j	return
  :                            184 
00:0043F8 50F009              +185 deliver	lx	TX_FRAME, sp
00:0043F9 CFB003              +186 	wphysa	0, x	arp_row:tha, y
00:0043FA C7A000              +186 
00:0043FB 60B005              +186 
00:0043FC 20A002              +186 
00:0043FD 30F004              +187 	z	4, sp	. now it has
  :                            188 
00:0043FE 870000              +189 return	qpop	r
00:0043FF 870004              +190 	qpop	a
00:004400 870008              +191 	qpop	8
00:004401 870010              +192 	qpop	d$save
00:004402 3D0000              +193 	fret	0
  :                            194 
  :                            195 
  :                            196 phy_target1	$equf	arp_msg:tha
  :                            197 phy_target2	$equf	nframe:llh:generic:address, y
  :                            198 phy_sourcex	$equf	0, x
  :                            199 
                                xmit	$head_far	 params(operation,	int	  ;
                                				i_fp,		int	  ;
                                				ha_pointer,	int	  ;
                                				dnet_addr,	long	  ;
                                				snet_addr,	long	) ;
                                							  ;
                                			scalars(caller_rkxy,	float, r  ;
00:004403 8F0000              +207 				caller_fp,	int,  fp)
00:004404 F8000E              +207 
  :                            208 
00:004405 650022              +209 	la	ROUTING_HEADER+ARP_MSG_WORDS,,xi
00:004406 502181              +210 	lx	tx_buffers
00:004407 FF08B0              +211 	call	(if_buy1)
00:004408 C6043A              +212 	jza	xmitx
00:004409 20000E              +213 	sa	fp
  :                            214 
00:00440A 58E001              +215 	ly	descriptor:frame
00:00440B 6CB014              +216 	lb	ROUTING_HEADER,y,i
00:00440C 28E004              +217 	sb	descriptor:dgram
00:00440D 65001C              +218 	la	ARP_MSG_WORDS*2,,xi
00:00440E C7B009              +219 	ds	nframe:frame_axw(2), y
00:00440F 20000B              +220 	sa	TX_DATAGRAML
00:004410 30B00B              +221 	z	nframe:frame_axw(3), y		. no third buffer needed
00:004411 30B00E              +222 	z	nframe:next_hop, y		. a value here is irrelevant
00:004412 30B00F              +223 	z	nframe:next_hop+1, y		. so clear residual value
  :                            224 
00:004413 400003              +225 	lr	y				. save the frame pointer
00:004414 580005              +226 	ly	b				. dgram pointer
  :                            227 
00:004415 CF08B3              +228 	dl	(HTYPE, PROTOCOL_SUITE:d)	. hardware space, protocol set
00:004416 C7B000              +229 	ds	arp_msg:htype
  :                            230 
00:004417 6008B5              +231 	la	(0, HLEN, PLEN)
00:004418 68F008              +232 	lb	operation
00:004419 C7B002              +233 	ds	arp_msg:hl_pl			. address lengths, type of request
  :                            234 
00:00441A 50F009              +235 	lx	i_fp
  :                            236 
00:00441B CFA008              +237 	wphysa	arp_msg:sha this_if:physa
00:00441C C7B004              +237 
00:00441D 60A00A              +237 
00:00441E 20B006              +237 
  :                            238 
00:00441F CFF00D              +239 	dl	snet_addr
00:004420 C7B007              +240 	ds	arp_msg:spa
  :                            241 
00:004421 CFF00B              +242 	dl	dnet_addr
00:004422 C7B00C              +243 	ds	arp_msg:tpa
  :                            244 
  :                            245 
00:004423 50F00A              +246 	lx	ha_pointer			. bespoke physa destination?
00:004424 700002              +247 	tnz	x
00:004425 B60427              +247 
00:004426 5508B6              +248 	lx	(0o),,xi
00:004427 CFA000              +249 	wphysa	arp_msg:tha phy_sourcex
00:004428 C7B009              +249 
00:004429 60A002              +249 
00:00442A 20B00B              +249 
  :                            250 						. arp dgram is built
  :                            251 						. now the link layer header
  :                            252 
00:00442B 580000              +253 	ly	r				. recover the frame pointer
00:00442C 50F00A              +254 	lx	ha_pointer			. bespoke physa destination?
00:00442D 700002              +255 	tnz	x
00:00442E B60430              +255 
00:00442F 5508BE              +256 	lx, xi	(00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF:o)
  :                            257 						. don't know = broadcast
  :                            258 						. most i/f use 3 of these 8 words !
00:004430 CFA000              +259 	wphysa	nframe:llh:generic:address,y phy_sourcex
00:004431 C7B000              +259 
00:004432 60A002              +259 
00:004433 20B002              +259 
  :                            260 
00:004434 6D0806              +261 	lb	LINK_PROTOCOL,,xi
00:004435 28B006              +262 	sb	nframe:llh:generic:protocol, y
00:004436 50F009              +263 	lx	i_fp
00:004437 60000E              +264 	la	fp
  :                            265 
  :                            266 	$if	0			. seems to be called from q2
  :                            267 	call	this_if:write_llh	. format generic parameters		
  :                            268 	$endif				. to ll header for this i/f
  :                            269 
00:004438 60000E              +270 	la	fp
00:004439 FF08C6              +271 	call	(if_q2ifree)
  :                            272 
00:00443A 38000E              +273 xmitx	pop	fp
00:00443B 870000              +274 	qpop	r
00:00443C 3D0000              +275 	fret	0
  :                            276 
  :                            277 find_in_cache
00:00443D C70006              +278 	ds	NET_ADDR
  :                            279 
  :                            280 find_in_cacheq
00:00443E AD000F              +281 	andB	ARP_HASH-1,,xi
  :                            282 
(+01)10
00:00443F 5D0002              +283 	ly	arp_hash,,xi
00:004440 880005              +284 	ay	b
00:004441 18000A              +285 	sy	CHAIN_HEAD
  :                            286 
00:004442 4D7FFF              +287 	lk	32767,,xi
  :                            288 	
00:004443 60B000              +289 forward	la	arp_row:next
00:004444 580004              +290 	ly	a
00:004445 C6044D              +291 	jza	miss
00:004446 60B002              +292 	la	arp_row:i_f		. no use resolving on the wrong network
00:004447 AF0000              +293 	mta	r			. with ideas like autoconf being used
00:004448 B60443              +294 	j	forward			. and platforms all multihomed
00:004449 CFB006              +295 	dl	arp_row:tpa		
  :                            296 
00:00444A DF0006              +297 	dan	NET_ADDR
00:00444B 7C0450              +298 	jdz	hit
00:00444C B60443              +299 	j	forward
  :                            300 
00:00444D CF0006              +301 miss	dl	NET_ADDR
00:00444E DF08C7              +302 	dan	(00FFFF00FFFF)		. test for broadast last
00:00444F 7C0451              +303 	jdz	big_hit			. unicast traffic is more RT-urgent
00:004450 350000              +304 hit	lret	0			. return with or without a hit
  :                            305 
(+01)10
00:004451 5D002B              +306 big_hit	ly	broadcast_line,,xi
00:004452 600003              +307 	la	y
00:004453 350000              +308 	lret	0
  :                            309 	
  :                            310 search_heap				. is the heap used up?
(+01)0f
00:004454 58002A              +311 	ly	arp_next
  :                            312 search_heap_again
(+01)10
00:004455 45002A              +313 	lr	arp_line(ARP_STORE)+ARP_CACHE_WORDS,,xi
00:004456 FE045B              +314 	jyge	eoheap
00:004457 44B008              +315 	lr	ARP_CACHE_WORDS, y, i
(+01)0f
00:004458 00002A              +316 	sr	arp_next
00:004459 3E04B1              +317 	lcal	at_pointer_array:insert
00:00445A 350000              +318 	lret	0
(+01)10
00:00445B 5D0034              +319 eoheap	ly	at_pointer_array:arp_pointer_array,,xi	. start building the heap again
(+01)0f
00:00445C 180033              +320 	sy	at_pointer_array:arp_next_insert
(+01)10
00:00445D 5D0012              +321 	ly	arp_line(1),,xi
  :                            322 
00:00445E 160030              +323 	dsr	48
  :                            324 	$do	ARP_HASH///2,	$flag	ARP_HASH must be power 2
(+01)0f
00:00445F 470002              +325 ?	$do	ARP_HASH/2,	qs	arp_hash+2*?-2
(+01)0f
00:004460 470004              +325 
(+01)0f
00:004461 470006              +325 
(+01)0f
00:004462 470008              +325 
(+01)0f
00:004463 47000A              +325 
(+01)0f
00:004464 47000C              +325 
(+01)0f
00:004465 47000E              +325 
(+01)0f
00:004466 470010              +325 
  :                            326 
00:004467 B60455              +327 	j	search_heap_again
  :                            328 
  :                            329 glean_and_push
00:004468 50E004              +330 	lx	descriptor:dgram
00:004469 CFA007              +331 	dl	arp_msg:spa, x
00:00446A 7C0484              +332 	jdz	gleanx		. don't process ZeroConf as ARP
  :                            333 
00:00446B C70006              +334 	ds	NET_ADDR
  :                            335 
00:00446C CFA004              +336 	dl	arp_msg:sha, x	. if there is an accidental zero HA
                                ?	$do	HLEN//2-2,	;
00:00446D 98A006              +338 	orB	arp_msg:sha+2+?-1, x
00:00446E 7C0484              +339 	jdz	gleanx		. don't cache it: it can't help you
  :                            340 
00:00446F 40E002              +341 	lr	descriptor:i_f
00:004470 CF0006              +342 	dl	NET_ADDR
00:004471 3E043E              +343 	lcal	find_in_cacheq	. target protocol address already in 6:7
00:004472 700003              +344 	tz	y
00:004473 B60479              +345 	j	update
00:004474 3E0454              +346 	lcal	search_heap
  :                            347 
  :                            348 insert_update
00:004475 50E004              +349 	lx	descriptor:dgram . because search_heap
  :                            350 				. does at:pointer_array:insert
  :                            351 
00:004476 60800A              +352 	la	*CHAIN_HEAD	. read address of 1st in chain by pointer
00:004477 20B000              +353 	sa	arp_row:next	. make that next of new 1st
00:004478 18800A              +354 	sy	*CHAIN_HEAD	. write new 1st to chain head by pointer
  :                            355 
00:004479 CF0006              +356 update	dl	NET_ADDR
00:00447A C7B006              +357 	ds	arp_row:tpa
00:00447B CFA004              +358 	wphysa	arp_row:tha arp_msg:sha, x
00:00447C C7B003              +358 
00:00447D 60A006              +358 
00:00447E 20B005              +358 
00:00447F 600097              +359 	la	DAYCLOCK$
00:004480 C008C9              +360 	aa	(ARP_REFRESH)
00:004481 20B001              +361 	sa	arp_row:refresh
00:004482 60E002              +362 	la	descriptor:i_f
00:004483 20B002              +363 	sa	arp_row:i_f
  :                            364 
00:004484 350000              +365 gleanx	lret	0
  :                            366 
  :                            367 
  :                            368 	$if	1
  :                            369 
  :                            370 search_and_indicate
  :                            371 	.	some lousey network boxes
  :                            372 	.	deliver ARP requests on a medium where the sender is not homed
  :                            373 	.	so respond on the interface where it is
  :                            374 
  :                            375 	.	ANYNET replicated addresses aren't replicated in one host
  :                            376 	.	only among attached autoconf networks
  :                            377 
  :                            378 
[+0004]10
00:004485 550000              +379 	lx	$if0p,,xi
00:004486 80E002              +380 	ax	descriptor:i_f		. requesting i/f id
00:004487 40A000              +381 	lr	0, x			. requesting interface
00:004488 500000              +382 	lx	r
  :                            383 
00:004489 CFB00C              +384 	dl	arp_msg:tpa
00:00448A FF08CA              +385 	call	(ipv4_this_if?)		. found on the shorter list? most frequent case
00:00448B B60490              +386 	j	respond_yes		. the interface is already pointed
  :                            387 
  :                            388 	$if	0
  :                            389 	call	(ipv4_this_host?)	. only search the chain of this interface
  :                            390 	$endif
  :                            391 
00:00448C 350000              +392 	lret	0			. not on this interface
  :                            393 
00:00448D 50A002              +394 	lx	ifaddr:i_f		. point to the interface where the address is found
[+0004]10
00:00448E 850000              +395 	ax	$if0p,,xi
00:00448F 40A000              +396 	lr	0, x
  :                            397 
  :                            398 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				r			;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
00:004490 9FB00C              +403 				arp_msg:tpa,,long
00:004491 9FB007              +403 
00:004492 FCB004              +403 
00:004493 F80000              +403 
00:004494 FD0002              +403 
00:004495 FCF007              +403 
00:004496 FF08B2              +403 
00:004497 38000F              +403 
00:004498 350000              +404 	lret	0
  :                            405 
  :                            406 	$else
  :                            407 
  :                            408 search_and_indicate		. process a request from outside
  :                            409 	$head_near	scalars(i_f_of_request,	int)
  :                            410 
  :                            411 	lx	descriptor:i_f	. get the interface where the request is
  :                            412 	ax	$if0p,,xi
  :                            413 	lx	0, x		. even if forwarding, we must answer that way
  :                            414 	sx	i_f_of_request
  :                            415 	dl	arp_msg:tpa
  :                            416 	call	(ipv4_4us?)
  :                            417 	j	respond_yes	
  :                            418 	j	respond_no
  :                            419 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				i_f_of_request		;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
  :                            424 				arp_msg:tpa,,long
  :                            425 respond_no
  :                            426 	inc	sp
  :                            427 	lret	0
  :                            428 
  :                            429 	$endif
  :                            430 
  :                            431 
  :                            432 time_test			. y -> ARP cache row for time test
00:004499 8F0000              +433 	qpush	r
00:00449A CFB006              +434 	dl	arp_row:tpa	. not in use
00:00449B 7C04AF              +435 	jdz	time_tex
00:00449C C70006              +436 	ds	6
  :                            437 
00:00449D 60B001              +438 	la	arp_row:refresh
00:00449E D00097              +439 	ana	DAYCLOCK$	. 24 bits is enough for this timer
00:00449F A604AF              +440 	jpa	time_tex
  :                            441 
00:0044A0 600097              +442 	la	DAYCLOCK$	. restart the refresh timer
00:0044A1 C008C9              +443 	aa	(ARP_REFRESH)	. before register y gets re-used
00:0044A2 20B001              +444 	sa	arp_row:refresh
  :                            445 
00:0044A3 50B002              +446 	lx	arp_row:i_f
[+0004]0f
00:0044A4 840000              +447 	ax	$if0p,,i
00:0044A5 50A000              +448 	lx	0, x
00:0044A6 60A002              +449 	la	this_if:address_list, x
  :                            450 
  :                            451 				. advertise we would like a refresh
  :                            452 				. and restart the timer
  :                            453 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				x			;
                                				0,,xi			;
                                				arp_row:tpa,,long	;
00:0044A7 9FC003              +458 				ifaddr:net,a,long
00:0044A8 9FB006              +458 
00:0044A9 FD0000              +458 
00:0044AA F80002              +458 
00:0044AB FD0001              +458 
00:0044AC FCF007              +458 
00:0044AD FF08B2              +458 
00:0044AE 38000F              +458 
  :                            459 time_tex
00:0044AF 870000              +460 	qpop	r
00:0044B0 350000              +461 	lret	0
  :                            462 
  :                            63: 		$include	arparray
  :                            1 
  :                            2 $(1)
  :                            3 at_pointer_array	$tree
  :                            4 
(+01)18
01:000033 000034              +5 arp_next_insert	+	arp_pointer_array
  :                            6 arp_pointer_array
01:000034 000000              +7 	$do	ARP_STORE+1,	0
01:000035 000000              +7 
01:000036 000000              +7 
01:000037 000000              +7 
  :                            8 
  :                            9 ARP_POINTER_ARRAY(1)	$set	arp_pointer_array
  :                            10 
  :                            11 $(66::,x)
  :                            12 arpo	arp_cache
  :                            13 
  :                            14 $(0)
  :                            15 
  :                            16 insert
  :                            17 	.	y -> new cache line @ ARP head top
  :                            18 	.	6 : 7 = protocol address format 00.AA.BB.00.CC.DD
  :                            19 
00:0044B1 8F0000              +20 	qpush	r
(+01)10
00:0044B2 450034              +21 	lr	arp_pointer_array,,xi
  :                            22 
(+01)0f
00:0044B3 580033              +23 	ly	arp_next_insert		. pointer to highest pointer
(+01)0f
00:0044B4 170033              +24 	inc	arp_next_insert		. increase that
  :                            25 
00:0044B5 B604BC              +26 	j	down
  :                            27 
00:0044B6 50B000              +28 again	lx	0, y
  :                            29 		
00:0044B7 CF0006              +30 	dl	6
00:0044B8 DFA006              +31 	dan	arpo:tpa
00:0044B9 7C04C0              +32 	jdz	no_action		. already in pointer array
  :                            33 					. already checked
  :                            34 					. but there's no such thing
  :                            35 					. as Sanity Claus (Harpo Marx)
  :                            36 
00:0044BA A604BE              +37 	jpa	insert_point		. higher than tabled net address
  :                            38 					. otherwise
00:0044BB 10B001              +39 	sx	1, y			. write back pointer one place higher
00:0044BC 8DFFFF              +40 down	ay	-1,,xi
  :                            41 
00:0044BD FE04B6              +42 	jyge	again
  :                            43 					. got to cache_line(-1)
  :                            44 insert_point				. insert at the line above y -> 
00:0044BE 60F003              +45 	la	3, sp			. save y
00:0044BF 20B001              +46 	sa	1, y
  :                            47 
  :                            48 no_action
00:0044C0 870000              +49 	qpop	r
00:0044C1 350000              +50 	lret	0
  :                            51 
  :                            52 	$root
  :                            64 		$root
  :                            190 	$list		2
  :                            191 	$path
  :                            192 
  :                            193 $(0)
  :                            194 
  :                            195 	$if		HVSOCKET
  :                            202 	$list		2
  :                            203: 	$include	t77.4/hvsocket
  :                            1 SOCKET_LPOINTER $equ	d$save2
  :                            2 
  :                            3 hvsocket	$tree
  :                            4 
  :                            5 	$if	0	. moved to containing assembly drivers.msm
  :                            6 $(69::,b)
  :                            7 so	$socket
  :                            8 	$endif
  :                            9 
  :                            10 $(0)
  :                            11 
                                bind	$head_far		 params(sockets,	int	;
                                					port1,		int	;
                                					transmissions,	int	;
  :                            15 					net_address,	long	)
00:0044C2 CFF006              +16 	dl	net_address
00:0044C3 2E0008              +17 	sbl	8
00:0044C4 360008              +18 	dsl	8
00:0044C5 C7F006              +19 	ds	net_address
  :                            20 
00:0044C6 40F003              +21 	lr	sockets
00:0044C7 B604DA              +22 	j	more?
  :                            23 
00:0044C8 00F003              +24 more	sr	sockets
00:0044C9 4808A9              +25 	lk	(00FFFF)
00:0044CA CFF006              +26 	dl	net_address
00:0044CB BFF004              +27 	mlb	port1
00:0044CC 9F0004              +28 	c	(__bind)	(IPPROTO_TCP*/16)	a,,long
00:0044CD F808CB              +28 
00:0044CE FCF003              +28 
00:0044CF FF08CC              +28 
00:0044D0 38000F              +28 
00:0044D1 E604DB              +29 	jna	no_more
  :                            30 
00:0044D2 600887              +31 	la	(0800000s)
00:0044D3 20B004              +32 	sa	so:flags, y		. flag uses private buffers
00:0044D4 30B005              +33 	z	so:tcp:tbase, y		. and does not yet have them
00:0044D5 30B007              +34 	z	so:tcp:rxowner, y	. no thread claims the port yet
  :                            35 
00:0044D6 60F005              +36 	la	transmissions		. and will have this many
00:0044D7 20B006              +37 	sa	so:tcp:tcbs, y		. transmission control blocks
  :                            38 
00:0044D8 17F004              +39 	inc	port1
00:0044D9 40F003              +40 	lr	sockets
00:0044DA 1E04C8              +41 more?	jdr	more
  :                            42 no_more
00:0044DB 3D0000              +43 	$ret
  :                            44 
                                storage	$head_far	scalars(connections,	int			;
                                				caller_ab67,	float,	a		;
                                				caller_rkxy,	float,	r		;
00:0044DC FD0000              +48 				bound_address,	float, *SOCKET_LPOINTER+1)
00:0044DD 8F0004              +48 
00:0044DE 8F0000              +48 
00:0044DF 500013              +48 
00:0044E0 8FA000              +48 
  :                            49 
00:0044E1 580013              +50 	ly	SOCKET_LPOINTER+1
00:0044E2 68B006              +51 	lb	so:tcp:tcbs, y		. connections
00:0044E3 28F00C              +52 	sb	connections		. save max connections
00:0044E4 2E0003              +53 	sbl	3
00:0044E5 600005              +54 	la	b
00:0044E6 260001              +55 	sal	1			. * 24 + CHAINS + 8
00:0044E7 54D028              +56 	lx	CHAINS+8, b, i		. connections * 24w + 40w
00:0044E8 800004              +57 	ax	a
  :                            58 
  :                            59 					. rx buffer start
00:0044E9 8008CD              +60 	ax	(BSOCKET*/18s)		. offset by connections tank
  :                            61 
  :                            62 	$if	1
00:0044EA 65003F              +63 	la	63,,xi			. this call favours array devices
[+0014]10
00:0044EB 750000              +64 	ii	TERAFRAME$		. specify PAGES - 1
  :                            65 	$else
  :                            66 	la	(262144)		. specify WORDS - nothing
  :                            67 	ii	BANK$			. with system memoryy as final choice
  :                            68 	$endif
  :                            69 
00:0044EC 20F008              +70 	sa	caller_ab67		. and that's where is is on return
00:0044ED C60524              +71 	jza	data_x			. zero result
  :                            72 
00:0044EE 68088B              +73 	lb	(0400000s)		. now has port-dedicated segment+tcb storage
00:0044EF 98B004              +74 	orB	so:flags, y
00:0044F0 28B004              +75 	sb	so:flags, y
  :                            76 
00:0044F1 48B007              +77 	lk	so:tcp:rxowner, y	. waiting socket owner thread if any
00:0044F2 20B005              +78 	sa	so:tcp:tbase, y
00:0044F3 10B006              +79 	sx	so:tcp:rxbu_p, y
00:0044F4 6808CE              +80 	lb	(BSOCKET*/18++131072:s)
00:0044F5 28B007              +81 	sb	so:tcp:txbu_p, y
  :                            82 
00:0044F6 580004              +83 	ly	a			. drop port socket address window
00:0044F7 602184              +84 	la	tcx_v4(1)		. open 1st transmissions table
00:0044F8 34002F              +85 	sabr	BSOCKET			. get maintenance chain head pointer
00:0044F9 4088CF              +86 	lr	*(BSOCKET*/12++tlist:link)	. from 1st transmissions table
00:0044FA 1888CF              +87 	sy	*(BSOCKET*/12++tlist:link)	. replace chain head pointer
00:0044FB 600003              +88 	la	y
  :                            89 					. drop addressing to 1st transmissions table
00:0044FC 34002F              +90 	sabr	BSOCKET			. prime the new connections + buffers array
00:0044FD 0088CF              +91 	sr	*(BSOCKET*/12++tlist:link)	. maintenance chain point forward
00:0044FE 1088D0              +92 	sx	*(BSOCKET*/18++tlist:rxbu_p:s)	. upper limit transmission blocks
00:0044FF 2888D1              +93 	sb	*(BSOCKET*/18++tlist:txbu_p:s)	. + rx + tx buffer pointers
00:004500 0888D2              +94 	sk	*(BSOCKET*/18++tlist:rxowner:s)	. thread control block waiting socket owner
00:004501 10F006              +95 	sx	caller_rkxy+2
  :                            96 
00:004502 3088D3              +97 	z	*(BSOCKET*/12++tlist:txchain)	. zero forward pointer
  :                            98 						. in frames transmission list
  :                            99 
00:004503 600005              +100 	la	b			. start of tx buffer
00:004504 D00002              +101 	ana	x			. minus start of rx buffer
00:004505 FF08D4              +102 	call	(far_initpool)
  :                            103 
00:004506 5008CE              +104 	lx	(BSOCKET*/18++131072:s)
00:004507 6008D5              +105 	la	(131072)
00:004508 FF08D4              +106 	call	(far_initpool)
  :                            107 
00:004509 5008CD              +108 	lx	(BSOCKET*/18s)
00:00450A 30A001              +109 	z	tlist:free
  :                            110 
  :                            111 .	z	tlist:link		. original ->null is rippled forward from 1st block
  :                            112 
00:00450B 64A040              +113 	la	tlist:connection_block(2),,i		. 1st in block is q-concentrator
00:00450C 20A002              +114 	sa	tlist:top
00:00450D 600887              +115 	la	(0800000s)
00:00450E 20A006              +116 	sa	tlist:flags
  :                            117 
  :                            118 
  :                            119 					. this part configures the guideline segment size
  :                            120 					. for assignment if high-volume socket does
  :                            121 					. a stream transmit, i.e. without TCP_PSH
  :                            122 					. in order to construct output serially
  :                            123 					. the derived figure is stored in concentrator connection
  :                            124 					. (a transmission control block which is not a connection):
  :                            125 
  :                            126 					. 	tlist:connection_block(1):mss
  :                            127 
  :                            128 					. and is not the MSS derived as a function of MTU
  :                            129 
00:00450F 68F00C              +130 	lb	connections		. retrieve maximum connections
00:004510 2E0004              +131 	sbl	4			. let each connection occupy 2 descriptors
00:004511 6008D6              +132 	la	(131072-264)		. TX block minus management chains
00:004512 D00005              +133 	ana	b			. minus estimated frame descriptors
00:004513 16001D              +134 	dsr	24+5			. available words / 32 = avaliable blocks
00:004514 F0F00C              +135 	d	connections		. / maximum connections
00:004515 260006              +136 	sal	6			. bytes * blocks 
00:004516 C5FFB8              +137 	aa	-20-20-32,,xi		. protocol headers frame header / preamble
  :                            138 
00:004517 2088D7              +139 	sa	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            140 
00:004518 450007              +141 	lr	CHAINS//4-1,,xi
00:004519 160030              +142 	dsr	48
00:00451A C70006              +143 	ds	6
  :                            144 
00:00451B 47A008              +145 data_qz	qs	tlist:chain(1)
00:00451C 850004              +146 	ax	4,,xi
00:00451D 1E051B              +147 	jdr	data_qz
  :                            148 
00:00451E 5008CD              +149 	lx	(BSOCKET*/18s)
  :                            150 
00:00451F 4FF000              +151 	ql	bound_address
00:004520 47A02E              +152 	qs	tlist:connection_block(1):socket_address
00:004521 30A02B              +153 	z	tlist:connection_block(1):tsq
00:004522 30A038              +154 	z	tlist:connection_block(1):receiveq:head
00:004523 30A03E              +155 	z	tlist:connection_block(1):q4ack:head
  :                            156 
00:004524 87F000              +157 data_x	qpop	0, sp
00:004525 870000              +158 	qpop	r
00:004526 870004              +159 	qpop	a
00:004527 17000F              +160 	inc	sp			. drop connections word
00:004528 3D0000              +161 	fret	0
  :                            162 
  :                            163 $(67::,y)
43:000000                     +164 array	$socket_array
43:000001                     +164 
43:000002                     +164 
43:000003                     +164 
43:000004                     +164 
  :                            165 
  :                            166 $(66::,x)
42:000000                     +167 transmission tcp_connection
42:000001                     +167 
42:000002                     +167 
42:000003                     +167 
42:000004                     +167 
42:000005                     +167 
42:000006                     +167 
42:000008                     +167 
42:00000A                     +167 
42:00000C                     +167 
42:00000E                     +167 
42:000010                     +167 
42:000011                     +167 
42:000012                     +167 
42:000013                     +167 
42:000014                     +167 
42:000015                     +167 
42:000016                     +167 
42:000017                     +167 
  :                            168 
  :                            169 $(0)
  :                            170 
00:004529 FF08D8              +171 qreadq	call	(hvsocket_readq)
00:00452A 5088D9              +172 	lx	*(BSOCKET*/12++tlist:rxbu_p)
00:00452B 700004              +173 	tz	a
00:00452C FF0884              +174 	call	(if_sell1)
00:00452D 350000              +175 	lret	0
  :                            176 
  :                            177 .	vector name hvsocket:rx
  :                            178 
                                rx	$head_far	 params(sockets_p,	int	;
                                				tcb_p,		int	;
                                				buffer,		int	;
                                				data_bytes,	int	;
  :                            183 				rx_flags,	int	)
  :                            184 
00:00452E 60F003              +185 	la	sockets_p		. the port number
00:00452F FF08DA              +186 	call	(connection_array)
00:004530 B60546              +187 	j	rx_type_wrong		. port wrong for this operation
  :                            188 
00:004531 6088DB              +189 	la	*(BSOCKET*/12++tlist:connection_block(1)+transmission:receiveq.head)
00:004532 C60546              +190 	jza	rx_all_read
00:004533 58C007              +191 	ly	descriptor:tcbloc, a
00:004534 18F004              +192 	sy	tcb_p			. for now the parameter is wildcard
00:004535 58C006              +193 	ly	descriptor:apdata, a
00:004536 68C003              +194 	lb	descriptor:bytes, a
00:004537 A80891              +195 	andB	(03FFFFF)
00:004538 DE053B              +196 	jnzb	rx_nonzero
00:004539 3E0529              +197 	lcal	qreadq
00:00453A B60547              +198 	j	rx_zero
  :                            199 
  :                            200 rx_nonzero
00:00453B 400005              +201 	lr	b
00:00453C 50F006              +202 	lx	data_bytes
00:00453D F6053F              +203 	jxge	space_allowed
00:00453E 40F006              +204 	lr	data_bytes		. accept less than the message
  :                            205 
  :                            206 space_allowed
00:00453F 00F006              +207 	sr	data_bytes
00:004540 50F005              +208 	lx	buffer
00:004541 3E056B              +209 	lcal	block_read
  :                            210 
00:004542 78F007              +211 	tp	rx_flags
00:004543 B60548              +212 	j	rx_result		. don't drop the input
  :                            213 
00:004544 3E0529              +214 	lcal	qreadq			. do drop the input
00:004545 B60548              +215 	j	rx_result
  :                            216 
  :                            217 rx_type_wrong
  :                            218 rx_all_read
00:004546 30F004              +219 	z	tcb_p			. tell caller no traffic these connections
00:004547 30F006              +220 rx_zero	z	data_bytes		. tell caller no traffic or remote close
  :                            221 
  :                            222 rx_result
00:004548 650000              +223 	la	0,,xi
00:004549 34002F              +224 	sabr	BSOCKET			. close the gate
00:00454A 60F006              +225 	la	data_bytes		. report how many bytes
00:00454B 68F004              +226 	lb	tcb_p			. connection identifier
00:00454C 3D0000              +227 	$ret
  :                            228 
  :                            229 .	vector name hvsocket_tx
  :                            230 
                                tx	$head_far	 params(socket_p,	int	;
                                				socket_q,	int	;
                                				response,	int	;
                                				bytes,		int	;
                                				xmit_flags,	int)	;
                                							;
00:00454D 8F0014              +237 			scalars(caller_rdatac,	float,	RDATAC)
  :                            238 
  :                            239 
00:00454E 60F007              +240 	la	socket_p	. port #
00:00454F FF08DA              +241 	call	(connection_array)
00:004550 B60560              +242 	j	tx_mismatch
  :                            243 
00:004551 50F008              +244 	lx	socket_q	. connection->
00:004552 60A007              +245 	la	transmission:socket_address+1
00:004553 A008A9              +246 	and	(00FFFF)
00:004554 B0F007              +247 	xor	socket_p
00:004555 D60560              +248 	jnza	tx_mismatch	. well it should be the same
  :                            249 
  :                            250 .	lb	response
  :                            251 .	sb	q
  :                            252 	$do	0,	lcal	wherefore
  :                            253 
00:004556 60F00B              +254 	la	xmit_flags
00:004557 A50008              +255 	and	TCP_PSH,,xi
00:004558 955010              +256 	or	05000++TCP_ACK,,xi
00:004559 480004              +257 	lk	a
00:00455A 68F009              +258 	lb	response
  :                            259 .	sb	SOCKET_CALL_FLAGS
  :                            260 .	jnza	txx		. segment size is transmission size @ socket
  :                            261 				. mss allows some accumulation instead
  :                            262 
  :                            263 .	la	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            264 .	sa	transmission:mss
  :                            265 
00:00455B 60F00A              +266 txx	la	bytes
00:00455C FF08DC              +267 	call	(tcp_tx)
  :                            268 	$do	0,	lcal	wherefore
00:00455D C6055F              +269 	jza	tx_zero
00:00455E A60560              +270 	jpa	tx_complete
  :                            271 
  :                            272 tx_zero
  :                            273 tx_minus
  :                            274 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outerrs,0,xi	1,,xi
  :                            275 
00:00455F B60560              +276 	j	tx_complete
  :                            277 
  :                            278 tx_mismatch	
  :                            279 	$do	0,	lcal	wherefore
  :                            280 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outdrops,0,xi	1,,xi
  :                            281 
  :                            282 tx_complete
00:004560 870014              +283 	qpop	RDATAC		. stream / simd registers saved at function head
00:004561 3D0000              +284 	fret	0
  :                            285 
  :                            286 .	vector name hvsocket_close closes a connection
  :                            287 
                                close	$head_far	 params(close_hvport,		int	;
  :                            289 				close_connection,	int	)
  :                            290 
00:004562 60F003              +291 	la	close_hvport
00:004563 FF08DA              +292 	call	(connection_array)
00:004564 B60569              +293 	j	close_y
00:004565 50F004              +294 	lx	close_connection
00:004566 0FA001              +295 	n	transmission:state
00:004567 650000              +296 	la	0,,xi
00:004568 B6056A              +297 	j	close_z
  :                            298 
00:004569 65FFEA              +299 close_y	la	-BAD_ARGUMENT,,xi
00:00456A 3D0000              +300 close_z	$ret
  :                            301 
  :                            302 	$if	0
  :                            303 wherefore
  :                            304 	lb     -061,,xi
  :                            305 	ab     sp
  :                            306 	jnzb   weh
  :                            307 	lb     -0a6,,xi
  :                            308 	ab     6, sp
  :                            309 	jnzb    weh
  :                            310 	lret	0
  :                            311 weh	ii     GUARD$
  :                            312 	$endif
  :                            313 
  :                            314 block_read
00:00456B 680000              +315 	lb	r
00:00456C 6CD001              +316 	lb	1, b, i		. containing transfer size
00:00456D 0E0001              +317 	sbr	1		. in socket buffer words
00:00456E F80005              +318 	push	b		. save containing network words
00:00456F F80003              +319 	push	y		. save network string start
  :                            320 
00:004570 4808A9              +321 	lk	(00FFFF)
00:004571 E808DD              +322 	mf	(0555556)	. one third downrounded
  :                            323 				. words in socket buffer
  :                            324 
00:004572 400004              +325 	lr	a
00:004573 B6057B              +326 	j	read6?
  :                            327 
00:004574 CFB000              +328 read6	dl	0, y		. compress 3 socket buffer words
00:004575 2E0008              +329 	sbl	8
00:004576 360008              +330 	dsl	8
00:004577 BFB002              +331 	mlb	2, y
00:004578 C7A000              +332 	ds	0, x
00:004579 850002              +333 	ax	2,,xi
00:00457A 8D0003              +334 	ay	3,,xi
00:00457B 1E0574              +335 read6?	jdr	read6
  :                            336 
00:00457C 380000              +337 	pop	r		.   socket buffer containing words
00:00457D 2F0000              +338 	popA	r		. + socket buffer start = rx limit
  :                            339 
00:00457E FE058A              +340 	jyge	read_0		. all rx words are read
00:00457F 1F0000              +341 	dec	r		. already read
00:004580 FE0586              +342 	jyge	read_1		. to 1 word less than transfer?
  :                            343 
00:004581 CFB000              +344 	dl	0, y		. not zero words and not 1 word
00:004582 2E0008              +345 	sbl	8		. = 2 words
00:004583 360008              +346 	dsl	8		. compress them
00:004584 C7A000              +347 	ds	0, x		. that leaves 2 trailing zero bytes
00:004585 350000              +348 	lret	0		. whether data is string text or not
  :                            349 
00:004586 60B000              +350 read_1	la	0, y		. 1 more input word
00:004587 260008              +351 	sal	8		. align to packed input
00:004588 20A000              +352 	sa	0, x		. that leaves 1 trailing zero byte
00:004589 350000              +353 	lret	0		. whether data is string text or not
  :                            354 
00:00458A 30A000              +355 read_0	z	0, x		. guarantee at least 1 zero byte
00:00458B 350000              +356 	lret	0		. whether data is string text or not
  :                            357 
  :                            358 .	vector name	hvsocket_readq
  :                            359 .	does not release the buffer
  :                            360 .	hvsocket_rx without flag 800000 calls this then sell1
  :                            361 
00:00458C 5008DE              +362 readq	lx	(BSOCKET*/12++tlist:connection_block(1))
00:00458D FD0007              +363 	LOCK	transmission:tsq
00:00458E 27F000              +363 
00:00458F 07A003              +363 
00:004590 B6058F              +363 
00:004591 60A010              +364 	la	transmission:receiveq.head
00:004592 C60595              +365 	jza	readq_clear
00:004593 F8C000              +366 	push	descriptor:next, a
00:004594 38A010              +367 	pop	transmission:receiveq.head
  :                            368 
  :                            369 readq_clear
00:004595 30A003              +370 	FREE	transmission:tsq
00:004596 27F000              +370 
00:004597 17000F              +370 
00:004598 3D0000              +371 	fret	0
  :                            372 
  :                            373 .	vector name	connection_array
  :                            374 
00:004599 FF08DF              +375 locate	call	(__tcp_socket)
00:00459A C605A2              +376 	jza	not_assigned
00:00459B 60D004              +377 	la	so:flags			. high volume port?
00:00459C A605A2              +378 	jpa	not_high_volume			. no
00:00459D A0088B              +379 	and	(0400000)			. memory assigned?
00:00459E C605A2              +380 	jza	not_initialised			. no
00:00459F 60D005              +381 	la	so:tcp:tbase
00:0045A0 34002F              +382 	sabr	BSOCKET
00:0045A1 3D0001              +383 	fret	1				. available and based
  :                            384 
  :                            385 not_assigned
  :                            386 not_high_volume
  :                            387 not_initialised
00:0045A2 3D0000              +388 	fret	0				. not available
  :                            389 
                                xbind	$head_far	 params(xbind_port1,	int	;
                                				xbind_portz,	int	;
  :                            392 				xbind_spring_q,	int	)
  :                            393 
  :                            394 xbind_next
00:0045A3 50F003              +395 	lx	xbind_port1
00:0045A4 40F004              +396 	lr	xbind_portz
00:0045A5 F605BC              +397 	jxge	xbindx
00:0045A6 600002              +398 	la	x
00:0045A7 17F003              +399 	inc	xbind_port1
  :                            400 		
00:0045A8 FF08DF              +401 	call	(__tcp_socket)
00:0045A9 C605A3              +402 	jza	xbind_next
00:0045AA 60D004              +403 	la	so:flags
00:0045AB A605A3              +404 	jpa	xbind_next
00:0045AC A0088B              +405 	and	(0400000)			. dedicated storage assigned?
00:0045AD 580005              +406 	ly	b
00:0045AE C605B7              +407 	jza	pending_1st_traffic		. not yet
00:0045AF 60D005              +408 	la	so:tcp:tbase		
00:0045B0 34002F              +409 	sabr	BSOCKET
00:0045B1 040041              +410 	inA	65				. thread control block <- connection array
  :                            411 
00:0045B2 5008CD              +412 	lx	(BSOCKET*/18s)
  :                            413 
00:0045B3 20A007              +414 	sa	tlist:rxowner, x
00:0045B4 60F005              +415 	la	xbind_spring_q
00:0045B5 20A031              +416 	sa	tlist:connection_block(1):remote_address+1
  :                            417 
00:0045B6 B605A3              +418 	j	xbind_next
  :                            419 
  :                            420 pending_1st_traffic			. dedicated storage first assigned on traffic
00:0045B7 040041              +421 	inA	65			. thread control block
00:0045B8 20B007              +422 	sa	so:tcp:rxowner, y	. cached in socket structure until then
  :                            423 
00:0045B9 60F005              +424 	la	xbind_spring_q
00:0045BA 20B003              +425 	sa	so:remote_address+1, y
  :                            426 
00:0045BB B605A3              +427 	j	xbind_next
  :                            428 	
00:0045BC 3D0000              +429 xbindx	$ret
  :                            430 
  :                            431 write_rxq
00:0045BD F80002              +432         push    x
00:0045BE 10C007              +433         sx      descriptor:tcbloc, a    . needed later
00:0045BF 5008DE              +434         lx      (BSOCKET*/12++tlist:connection_block(1)
  :                            435 
00:0045C0 FD0007              +436         LOCK    transmission:tsq
00:0045C1 27F000              +436 
00:0045C2 07A003              +436 
00:0045C3 B605C2              +436 
00:0045C4 5CA010              +437         ly      transmission:receiveq,,i
  :                            438 
00:0045C5 30C000              +439 	z	descriptor:next, a
00:0045C6 70B000              +440         tz	rxq2:head
00:0045C7 B605CA              +441 	j	write_rxq_tail
00:0045C8 20B000              +442 	sa	rxq2:head 
00:0045C9 B605CC              +443 	j	write_after_rxq_tail
  :                            444 write_rxq_tail
00:0045CA 68B001              +445 	lb	rxq2:tail
00:0045CB 20D000              +446 	sa	descriptor:next, b
  :                            447 write_after_rxq_tail
00:0045CC 20B001              +448 	sa	rxq2:tail
  :                            449 
00:0045CD 6088E0              +450         la      *(BSOCKET*/12++tlist:rxowner)
00:0045CE C605D0              +451         jza     tcp_free_rxq            . no-one asked to know
00:0045CF 3E05D5              +452         lcal    notify			. new receiveq:head this connection array
  :                            453 
  :                            454 tcp_free_rxq
00:0045D0 30A003              +455         FREE    transmission:tsq
00:0045D1 27F000              +455 
00:0045D2 17000F              +455 
00:0045D3 380002              +456         pop     x
00:0045D4 3D0000              +457 	fret	0
  :                            458 					. inbound segment queue-write
  :                            459 					. calls notify under lock
  :                            460 					. x -> connection block(1) of connnection table
00:0045D5 6808E1              +461 notify	lb	(TIME_WAIT++ACTIVATE:s)
00:0045D6 75005D              +462 	ii	EVENT_FREE$
  :                            463 
  :                            464 	$if	__SPRING_LOAD
  :                            465 	la	transmission:remote_address+1
  :                            466 	jza	notification_not_listed
  :                            467 	tp	transmission:state
  :                            468 	j	notification_queued
  :                            469 	n	transmission:state
  :                            470 	c	(spring_load)	a	0,,BASE_SOCKET	. [ tumble_page connections_table ]
  :                            471 
  :                            472 notification_queued
  :                            473 notification_not_listed
  :                            474 	$endif
  :                            475 
00:0045D7 350000              +476 	lret	0
  :                            477 
  :                            478 	$root
  :                            204 .	$include	t77.4/new_mark
  :                            205: 	$include	t77.4/tcp_lib1
  :                            1 tmetric	$tree			. param 1 <- handle
  :                            2 				. param 2 zero:suppress timeout
  :                            3 				.	/ nonzero:  run timeout
  :                            4 timer(1)
                                	$head_far	 params(tsocket,	int	;
  :                            6 				ttimer,		int	)
  :                            7 
00:0045D8 60F003              +8 	la	tsocket
00:0045D9 750055              +9 	ii	READ_SOCKET$
00:0045DA 4808E2              +10 	lk	(0FF0000s)
00:0045DB AF08E3              +11 	mta	(TCP_TCB*/16s)
00:0045DC B605EB              +12 	j	not			. not a connection
00:0045DD A008A9              +13 	and	(00FFFF)
00:0045DE 5008CD              +14 	lx	(BSOCKET*/18s)		. place connection
00:0045DF 800004              +15 	ax	a
00:0045E0 600005              +16 	la	b
00:0045E1 34002F              +17 	sabr	BSOCKET			. in address space
00:0045E2 70F004              +18 	tz	ttimer
00:0045E3 B605E6              +19 	j	switch_on
00:0045E4 30A004              +20 	z	transmission:timer(1)
00:0045E5 B605EA              +21 	j	switch_over
  :                            22 
  :                            23 switch_on
00:0045E6 600097              +24 	la	DAYCLOCK$		. timer(1) nonzero -> run timeout
00:0045E7 C008E4              +25 	aa	(TCP_TIMER1)		. initially then continuously
00:0045E8 950001              +26 	or	1,,xi			. timer(1) may not = 0
00:0045E9 20A004              +27 	sa	transmission:timer(1)	. nonzero keeps it running
  :                            28 
  :                            29 switch_over
[+0018]10
00:0045EA 750000              +30 	ii	FREE_SOCKB$
00:0045EB 3D0000              +31 not	$ret
  :                            32 	$root
  :                            206 
  :                            207: 	$include	t77.4/rx_jumbo
  :                            1 
  :                            2 rx_jumbo	$tree
  :                            3 
  :                            4 $(1)						. B1 page objects used serially per RX fragment
01:000038 000000              +5 reassembly_chain_head	0
01:000039 000000              +6 reassembly_chain_tail	0
01:00003A 000000              +7 ip_payload_bytes	0
01:00003B 000000              +8 prior_descriptor	0
01:00003C 000000              +9 fragment_engine_lookaside	0
01:00003D 000000              +10 tag_lookaside		0
01:00003E 000000              +11 ip_header_bytes		0
01:00003F 000000              +12 i_f_buffer_cursor	0
  :                            13 
  :                            14 $(66::,x)
42:000000                     +15 tag	fragment_tag				. reassembly control structure
42:000001                     +15 
42:000002                     +15 
42:000004                     +15 
42:000006                     +15 
  :                            16 						. tuples collection -> 1 total dgram
  :                            17 $(67::,y)
43:000000                     +18 payload		payload_token			. tuple describing recombined fragment
43:000001                     +18 
43:000002                     +18 
  :                            19 
  :                            20 
  :                            21 						. structure rassembly resource
  :                            22 $(66::,x)					. assigned to interface as required + permitted
  :                            23 
42:000000                     +24 ?	$do	IP4_RASMGRAMS_IF,ttag(?)	fragment_tag	. interface -> reassembly structures[]
42:000001                     +24 
42:000002                     +24 
42:000004                     +24 
42:000006                     +24 
42:000008                     +24 
42:000009                     +24 
42:00000A                     +24 
42:00000C                     +24 
42:00000E                     +24 
42:000010                     +24 
42:000011                     +24 
42:000012                     +24 
42:000014                     +24 
42:000016                     +24 
42:000018                     +24 
42:000019                     +24 
42:00001A                     +24 
42:00001C                     +24 
42:00001E                     +24 
  :                            25 free_payload_token	$res	1				. interface -> availabe fragment tuple
42:000021                     +26 ?	$do	PAYLOAD_BANDS,payload_band(?)	payload_token	. interface -> fragment tuples []
42:000022                     +26 
42:000023                     +26 
42:000024                     +26 
42:000025                     +26 
42:000026                     +26 
42:000027                     +26 
42:000028                     +26 
42:000029                     +26 
42:00002A                     +26 
42:00002B                     +26 
42:00002C                     +26 
42:00002D                     +26 
42:00002E                     +26 
42:00002F                     +26 
42:000030                     +26 
42:000031                     +26 
42:000032                     +26 
42:000033                     +26 
42:000034                     +26 
42:000035                     +26 
42:000036                     +26 
42:000037                     +26 
42:000038                     +26 
42:000039                     +26 
42:00003A                     +26 
42:00003B                     +26 
42:00003C                     +26 
42:00003D                     +26 
42:00003E                     +26 
42:00003F                     +26 
42:000040                     +26 
42:000041                     +26 
42:000042                     +26 
42:000043                     +26 
42:000044                     +26 
42:000045                     +26 
42:000046                     +26 
42:000047                     +26 
42:000048                     +26 
42:000049                     +26 
42:00004A                     +26 
42:00004B                     +26 
42:00004C                     +26 
42:00004D                     +26 
42:00004E                     +26 
42:00004F                     +26 
42:000050                     +26 
42:000051                     +26 
42:000052                     +26 
42:000053                     +26 
42:000054                     +26 
42:000055                     +26 
42:000056                     +26 
42:000057                     +26 
42:000058                     +26 
42:000059                     +26 
42:00005A                     +26 
42:00005B                     +26 
42:00005C                     +26 
42:00005D                     +26 
42:00005E                     +26 
42:00005F                     +26 
42:000060                     +26 
42:000061                     +26 
42:000062                     +26 
42:000063                     +26 
42:000064                     +26 
42:000065                     +26 
42:000066                     +26 
42:000067                     +26 
42:000068                     +26 
42:000069                     +26 
42:00006A                     +26 
42:00006B                     +26 
42:00006C                     +26 
42:00006D                     +26 
42:00006E                     +26 
42:00006F                     +26 
42:000070                     +26 
42:000071                     +26 
42:000072                     +26 
42:000073                     +26 
42:000074                     +26 
42:000075                     +26 
42:000076                     +26 
42:000077                     +26 
42:000078                     +26 
42:000079                     +26 
42:00007A                     +26 
42:00007B                     +26 
42:00007C                     +26 
42:00007D                     +26 
42:00007E                     +26 
42:00007F                     +26 
42:000080                     +26 
42:000081                     +26 
42:000082                     +26 
42:000083                     +26 
42:000084                     +26 
42:000085                     +26 
42:000086                     +26 
42:000087                     +26 
42:000088                     +26 
42:000089                     +26 
42:00008A                     +26 
42:00008B                     +26 
42:00008C                     +26 
42:00008D                     +26 
42:00008E                     +26 
42:00008F                     +26 
42:000090                     +26 
42:000091                     +26 
42:000092                     +26 
42:000093                     +26 
42:000094                     +26 
42:000095                     +26 
42:000096                     +26 
42:000097                     +26 
42:000098                     +26 
42:000099                     +26 
42:00009A                     +26 
42:00009B                     +26 
42:00009C                     +26 
42:00009D                     +26 
42:00009E                     +26 
42:00009F                     +26 
42:0000A0                     +26 
42:0000A1                     +26 
42:0000A2                     +26 
42:0000A3                     +26 
42:0000A4                     +26 
42:0000A5                     +26 
42:0000A6                     +26 
42:0000A7                     +26 
42:0000A8                     +26 
42:0000A9                     +26 
42:0000AA                     +26 
42:0000AB                     +26 
42:0000AC                     +26 
42:0000AD                     +26 
42:0000AE                     +26 
42:0000AF                     +26 
42:0000B0                     +26 
42:0000B1                     +26 
42:0000B2                     +26 
42:0000B3                     +26 
42:0000B4                     +26 
42:0000B5                     +26 
42:0000B6                     +26 
42:0000B7                     +26 
42:0000B8                     +26 
42:0000B9                     +26 
42:0000BA                     +26 
42:0000BB                     +26 
42:0000BC                     +26 
42:0000BD                     +26 
42:0000BE                     +26 
42:0000BF                     +26 
  :                            27 
  :                            28 FRAGMENT_ENGINE	$equ	$			. interface -> size of reassembly resource
  :                            29 
  :                            30 $(71::,sp)					. view of internal stack both sides of caller -> return
  :                            31 scope_w		$res	1
  :                            32 new_p		$res	1
  :                            33 i_f_pointer	$res	1			. 4
  :                            34 calling_iframe	$res	1			. caller instruction frame ->
  :                            35 calling_offset	$res	1			. caller return address offset
  :                            36 lookaside_proto	$res	2
  :                            37 return2_ip	$res	1
  :                            38 
47:000008                     +39 __dgram		datagram			. rx datagram leading byte pairs[] in register stack
47:000009                     +39 
47:00000A                     +39 
47:00000B                     +39 
47:00000C                     +39 
47:00000D                     +39 
47:00000E                     +39 
47:000010                     +39 
  :                            40 
  :                            41 $(0)
                                	$head_far	scalars(interface_pointer8_11,	int,	8	;	. 
                                				dgramp,			int,__dgram,,i	;	. location stacked dgram
00:0045EC F80008              +44 				scope_before,		int		)	. previous coverage when
00:0045ED FCF006              +44 
00:0045EE FD0000              +44 
  :                            45 										. walking fragment tuples
  :                            46 . i_f_buffer_cursor	$equf	interface_pointer8_11+1
  :                            47 . y_forward		$equf   interface_pointer8_11+1
  :                            48 . x_ifid			$equf	interface_pointer8_11+2
  :                            49 
(+01)0f
00:0045EF 18003F              +50 	sy	i_f_buffer_cursor		. -> interface dualport window fragment read point
  :                            51 
00:0045F0 500008              +52 	lx	8				. -> interface
00:0045F1 78A02A              +53 	tn	this_if:iq_rxfragments		. fragments accepted this I / F ?
00:0045F2 B605F4              +53 
  :                            54 not_allowed
  :                            55 not_feasible
00:0045F3 B60740              +56 	j	interface_escape		. not just now
  :                            57 
00:0045F4 50A02C              +58 	lx	this_if:iq_buffer		. storage obtained?
(+01)0f
00:0045F5 10003C              +59 	sx	fragment_engine_lookaside
00:0045F6 700002              +60 	tz	x
00:0045F7 B60613              +61 	j	configured			. yes
  :                            62 
00:0045F8 6500C0              +63 	la	FRAGMENT_ENGINE,,xi		. obtain a cache for tags =
  :                            64 						. RASMGRAM_WORDS*IP4_RASMGRAMS_IF+1+3*PAYLOAD_BANDS,,xi
  :                            65 
00:0045F9 502180              +66 	lx	rx_buffers			. from rx packet storage
00:0045FA FF08B0              +67 	call	(if_buy1)
  :                            68 
00:0045FB C60740              +69 	jza	no_storage_escape 		. can't always have resources
  :                            70 						. don't begin to assign resources. Drop the RX fragment
00:0045FC 68C001              +71 	lb	descriptor:frame, a		. capture new resource -> interface
00:0045FD 500008              +72 	lx	8				. <- interface
00:0045FE C7A02B              +73 	ds	this_if:fragment_engine_descriptor	. b -> structure
(+01)0f
00:0045FF 28003C              +74 	sb	fragment_engine_lookaside	. cache * in B1 memory
00:004600 500005              +75 	lx	b
  :                            76 						. initialise [] total datagram slots
00:004601 4F089E              +77 	ql	(0q)				. as vacant + available
00:004602 47A000              +78 ?	$do	2*IP4_RASMGRAMS_IF,	qs	?*4-4, x
00:004603 47A004              +78 
00:004604 47A008              +78 
00:004605 47A00C              +78 
00:004606 47A010              +78 
00:004607 47A014              +78 
00:004608 47A018              +78 
00:004609 47A01C              +78 
  :                            79 
00:00460A 64A021              +80 	la	payload_band(1),,i		. free chain <- all tuples
00:00460B 20A020              +81 	sa	free_payload_token
  :                            82 
00:00460C 44A0BD              +83 	lr	payload_band(PAYLOAD_BANDS),,i
00:00460D 308000              +84 	z	*r				. no forward pointer from last tuple
  :                            85 
  :                            86 free_token
00:00460E 500004              +87 	lx	a
00:00460F F60613              +88 	jxge	configured			. stop when this == last
00:004610 64A003              +89 	la	3, x, i				. forward 1 tuple
00:004611 20A000              +90 	sa	payload:next, x			. this -> next = this[+1]
00:004612 B6060E              +91 	j	free_token
  :                            92 
  :                            93 configured
00:004613 4FF00E              +94 	ql	__dgram:ipsource		. construct the tag netsource.dgramid.netdest.protocol
00:004614 2E0008              +95 	sbl	8
00:004615 360008              +96 	dsl	8
00:004616 4808A9              +97 	lk	(00FFFF)
00:004617 BFF00A              +98 	mlb	__dgram:id
00:004618 C70008              +99 	ds	8
  :                            100 
00:004619 CF0006              +101 	dl	6
00:00461A 2E0008              +102 	sbl	8
00:00461B 360008              +103 	dsl	8
00:00461C BFF005              +104 	mlb	lookaside_proto
00:00461D C7000A              +105 	ds	10				. [ 8..11 ] <- netsource.dgramid.netdest.protocol
  :                            106 
00:00461E 60F00B              +107 	la	__dgram:flags_fragment		. is this fragment zero ?
00:00461F 4D3FFF              +108 	lk	03FFF,,xi			. because the following ones have no tproto header
00:004620 AF08E5              +109 	mta	(02000)				. so SOCKET_LPOINTER is not generated for this packet
00:004621 B60627              +110 	j	fragments_plus
  :                            111 						. this is tpdu fragment zero and SOCKET_LPOINTER counts
00:004622 CF0012              +112 	dl	SOCKET_LPOINTER			. ...or doesn't: protocol port storage?
00:004623 C60740              +113 	jza	socket_escape			. drop
  :                            114 						. let timing drop any fragments aready received
00:004624 60D001              +115 	la	so:socket_address+1, b
00:004625 A008A9              +116 	and	(00FFFF)			. is an application bound to this port ?
00:004626 C60740              +117 	jza	socket_escape			. drop
  :                            118 						. let timing drop any fragments aready received
  :                            119 fragments_plus					. find = or free slot
00:004627 50F002              +120 	lx	interface_pointer8_11		. -> interface
00:004628 3E0777              +121 	lcal	search				. new or existing chains which are OK
00:004629 B60740              +122 	j	limits_escape			. or will be if fragment zero is OK when it arrives
  :                            123 
00:00462A 4F0008              +124 	ql	8
00:00462B 47A004              +125 	qs	tag:source_id
00:00462C CF0012              +126 	dl	SOCKET_LPOINTER
00:00462D C6062F              +127 	jza	not_1st_fragment		. avoid out of date SOCKET_LPOINTER
  :                            128 
00:00462E C7A002              +129 	ds	tag:socket_lpointer
  :                            130 
  :                            131 not_1st_fragment
  :                            132 
00:00462F 5CF008              +133 	ly	__dgram,,i
  :                            134 
  :                            135 	$if	0
  :                            136 	j	store_and_link
  :                            137 	$endif
  :                            138 
  :                            139 store_and_link					. y -> dgram
(+01)0f
00:004630 60003C              +140 	la	fragment_engine_lookaside
  :                            141 
  :                            142 	$if	0
  :                            143 	jza	no_storage_escape		. resource not awarded to interface
  :                            144 	$endif					. just been assigned / checked
  :                            145 
00:004631 60C020              +146 	la	free_payload_token, a		. within permitted total fragments?
00:004632 C6073F              +147 	jza	storage_escape			. before committing any other resource
  :                            148 						. extend time but necessarily drop fragment
(+01)0f
00:004633 10003D              +149 	sx	tag_lookaside
00:004634 600010              +150 	la	HEADER_LONGWORDS
00:004635 260002              +151 	sal	2
(+01)0f
00:004636 20003E              +152 	sa	ip_header_bytes
  :                            153 
00:004637 60A000              +154 	la	tag:chain
00:004638 20000E              +155 	sa	fp
00:004639 D60675              +156 	jnza	add_reassemble			. reassembly is buffered
  :                            157 						. 1 or more RX framents are in
00:00463A 60A007              +158 	la	tag:dest_protocol+1
00:00463B A500FF              +159 	and	255,,xi
00:00463C C5FFEF              +160 	aa	-IPPROTO_UDP,,xi
00:00463D C60646              +161 	jza	regroup_udp
00:00463E C5000B              +162 	aa	IPPROTO_UDP-IPPROTO_TCP,,xi
00:00463F D60740              +163 	jnza	no_protocol_escape
  :                            164 
  :                            165 TCP_MAXTEST $equ 0
  :                            166 
  :                            167 	$if	TCP_MAXTEST
  :                            168 	lr	258*64,,xi
  :                            169 	$else
00:004640 60F002              +170 	la	interface_pointer8_11		. it's tcp
00:004641 40C004              +171 	lr	this_if:mtu, a			. mss is governed by local i / f mtu
  :                            172 	$endif
  :                            173 
00:004642 58F001              +174 	ly	dgramp
00:004643 60B003              +175 	la	dgram:flags_fragment, y
00:004644 A51FFF              +176 	and	8191,,xi
00:004645 B60658              +177 	j	first_size_test
  :                            178 
  :                            179 regroup_udp
00:004646 58F001              +180 	ly	dgramp
00:004647 60B003              +181 	la	dgram:flags_fragment, y
00:004648 680004              +182 	lb	a
00:004649 A51FFF              +183 	and	8191,,xi			. it's udp
00:00464A D6064F              +184 	jnza	subsequent			
00:00464B 580011              +185 	ly	TP_HEADER			. and initial fragment
00:00464C 58B002              +186 	ly	uugram:udgraml, y			. with header
  :                            187 						. UDP header byte count is IP payload size
00:00464D 44B014              +188 	lr	20, y, i			. plus buffer needs one minimal ip header  
00:00464E B60658              +189 	j	first_size_test
  :                            190 
  :                            191 subsequent					. 1st rx fragment is not initial fragment
00:00464F AD2000              +192 	andB	IP_MORE,,xi				. is it last fragment ?
00:004650 CE0653              +193 	jzb	final_fragment
00:004651 454080              +194 	lr	258*64,,xi			. assign a superjumbo buffer
00:004652 B60658              +195 	j	first_size_test			. if possible
  :                            196 
  :                            197 final_fragment
00:004653 260003              +198 	sal	3
00:004654 C0B001              +199 	aa	dgram:bytes, y
(+01)0f
00:004655 D0003E              +200 	ana	ip_header_bytes
00:004656 44C014              +201 	lr	20, a, i			. allow minimal IP header
00:004657 B6065E              +202 	j	first_size_test_passed
  :                            203 
  :                            204 first_size_test
00:004658 58F001              +205 	ly	dgramp
00:004659 260003              +206 	sal	3
00:00465A 58B001              +207 	ly	dgram:bytes, y
(+01)0f
00:00465B D0003E              +208 	ana	ip_header_bytes			. a -= actual ip header bytes
00:00465C 8CC014              +209 	ay	20, a, i			. plus minimal IP header			
  :                            210 
  :                            211 	$if	1
00:00465D FE0734              +212 	jyge	drop_nothing			. clear tag entry
  :                            213 	$else
  :                            214 	jyge	no_storage_escape		. 1st encountered fragment
  :                            215 	$endif
  :                            216 					. is overboard, it's a wreck, ram it
  :                            217 first_size_test_passed
  :                            218 
00:00465E 600000              +219 	la	r				. buy the buffer
00:00465F F80000              +220 	push	r
00:004660 64C001              +221 	la	1, a, i
00:004661 060001              +222 	sar	1
00:004662 502180              +223 	lx	rx_buffers
00:004663 FF08B0              +224 	call	(if_buy1)
00:004664 C60740              +225 	jza	no_storage_escape		. unless it's not for sale
00:004665 FDFFEC              +226 	push	-20,,xi				. write payload length to descriptor
00:004666 2FF001              +227 	popA	1, sp
00:004667 38C003              +228 	pop	descriptor:bytes, a
(+01)0f
00:004668 50003D              +229 	lx	tag_lookaside
00:004669 20A000              +230 	sa	tag:chain			. x must still -> tag
00:00466A 20000E              +231 	sa	fp
00:00466B 30E000              +232 	z	descriptor:next			. initialise chain -> end
00:00466C 60E001              +233 	la	descriptor:frame
00:00466D 20E004              +234 	sa	descriptor:dgram
00:00466E 64C00A              +235 	la	10, a, i			. retain minimum IP header for net addresses
00:00466F 20E005              +236 	sa	descriptor:uproto		. for when initial fragment arrives
  :                            237 
00:004670 50F002              +238 	lx	i_f_pointer
00:004671 60A000              +239 	la	this_if:id
00:004672 20E002              +240 	sa	descriptor:i_f
  :                            241 
00:004673 58F001              +242 	ly	dgramp
  :                            243 .	la	dgram:flags_fragment, y
  :                            244 .	and	8192,,xi
00:004674 B6067F              +245 	j	impress
  :                            246 
  :                            247 add_reassemble					. storage for reassembly already obtained
00:004675 20000E              +248 	sa	fp				. fragment to add
00:004676 68E003              +249 	lb	descriptor:bytes
00:004677 50F001              +250 	lx	dgramp
00:004678 60B003              +251 	la	dgram:flags_fragment, y
00:004679 A51FFF              +252 	and	8191,,xi
00:00467A 260003              +253 	sal	3
00:00467B C0B001              +254 	aa	dgram:bytes, y
(+01)0f
00:00467C D0003E              +255 	ana	ip_header_bytes
00:00467D D80004              +256 	anb	a
  :                            257 
  :                            258 	$if	1				. buffer, tokens assigned
00:00467E 5E0739              +259 	jnc	drop_discard			. drop reassembling resource
  :                            260 	$else
  :                            261 	jc	impress				. out of expected range
  :                            262 	lx	tag_lookaside
  :                            263 	lcal	tag_free
  :                            264 	j	escape
  :                            265 	$endif
  :                            266 
00:00467F 60B001              +267 impress	la	dgram:bytes, y
(+01)0f
00:004680 D0003E              +268 	ana	ip_header_bytes
(+01)0f
00:004681 20003A              +269 	sa	ip_payload_bytes
00:004682 60B003              +270 	la	dgram:flags_fragment, y
00:004683 680004              +271 	lb	a
00:004684 AD2000              +272 	andB	IP_MORE,,xi
00:004685 2E000A              +273 	sbl	10				. more flag in sign position
00:004686 280007              +274 	sb	7	
00:004687 A51FFF              +275 	and	8191,,xi
00:004688 260003              +276 	sal	3
00:004689 5CE000              +277 	ly	descriptor:next,,i		. forward pointer -> 1st cover tuple
  :                            278 
00:00468A 180006              +279 slink	sy	6				
00:00468B 68B000              +280 	lb	 descriptor:next, y
00:00468C 580005              +281 	ly	b
00:00468D CE0698              +282 	jzb	not_more
  :                            283 
00:00468E 40B001              +284 	lr	payload:bytes, y
00:00468F 68B002              +285 	lb	payload:offset, y
  :                            286 
00:004690 A808E6              +287 	andB	(00FFF8)
00:004691 F80005              +288 	push	b
00:004692 D80004              +289 	anb	a
00:004693 380005              +290 	pop	b
00:004694 7E0698              +291 	jc	not_more
  :                            292 
00:004695 C80000              +293 	ab	r				. +  bytes previous = high extent previous
00:004696 28F000              +294 	sb	scope_before			.
00:004697 B6068A              +295 	j	slink
  :                            296 
  :                            297 not_more
  :                            298 .	sal	3				. offset
00:004698 680004              +299 	lb	a
(+01)0f
00:004699 C0003A              +300 	aa	ip_payload_bytes		. scope of new fragment
00:00469A D0F000              +301 	ana	scope_before
00:00469B 5E072D              +302 	jnc	replication_escape		. adds nothing
00:00469C C6072D              +303 	jza	replication_escape
  :                            304 
  :                            305 .	sy	7
(+01)0f
00:00469D 60003C              +306 	la	fragment_engine_lookaside
00:00469E 50C020              +307 	lx	free_payload_token, a
00:00469F F8A000              +308 	push	payload:next, x
00:0046A0 38C020              +309 	pop	free_payload_token, a
  :                            310 
(+01)0f
00:0046A1 60003A              +311 	la	ip_payload_bytes
00:0046A2 980007              +312 	orB	7				. more bit
00:0046A3 C7A001              +313 	ds	payload:bytes, x
00:0046A4 A808E6              +314 	andB	(00FFF8)
00:0046A5 108006              +315 	sx	*6
00:0046A6 18A000              +316 	sy	payload:next, x
  :                            317 
00:0046A7 50F001              +318 	lx	dgramp
00:0046A8 10000F              +319 	sx	sp				. params + dynamic variables now out of scope
00:0046A9 400011              +320 	lr	TP_HEADER			. point r beyond IP header
00:0046AA DE06B0              +321 	jnzb	non_initial			. if RX fragment is initial save IP header
  :                            322 
00:0046AB 50E004              +323 	lx	descriptor:dgram		. transcribe ip header + internet adresses
00:0046AC 87A000              +324 	qpop	0, x				. no ip header options needed
00:0046AD 87A004              +325 	qpop	4, x
00:0046AE 38A008              +326 	dpop	8, x
00:0046AF 38A009              +326 
  :                            327 
  :                            328 non_initial
00:0046B0 00000F              +329 	sr	sp				. forward sp to start of payload
00:0046B1 50E005              +330 	lx	descriptor:uproto
00:0046B2 400091              +331 	lr	ONE_TIME_SAVE1			. limit of internal stacked part
00:0046B3 0E0001              +332 	sbr	1				. offset in data words
00:0046B4 800005              +333 	ax	b
  :                            334 
00:0046B5 5CF003              +335 pop4w?	ly	4-1, sp, i			. would another quad pop overtake itself ?
00:0046B6 FE06BA              +336 	jyge	pop2w?				. yes
  :                            337 						. no
00:0046B7 87A000              +338 	qpop	0, x
00:0046B8 850004              +339 	ax	4,,xi
00:0046B9 B606B5              +340 	j	pop4w?
  :                            341 
00:0046BA 58000F              +342 pop2w?	ly	sp				. 1 more  longword in internal stack ?
00:0046BB FE06BF              +343 	jyge	internal_stacked_part_received	. no
00:0046BC 38A000              +344 	dpop	0, x				. yes
00:0046BD 38A001              +344 
00:0046BE 850002              +345 	ax	2,,xi
  :                            346 
  :                            347 internal_stacked_part_received
  :                            348 
(+01)0f
00:0046BF 58003F              +349 	ly	i_f_buffer_cursor		. remainder dgram is in i/f frame page
  :                            350 
(+01)0f
00:0046C0 60003A              +351 	la	ip_payload_bytes		. datagram bytes
(+01)0f
00:0046C1 C0003E              +352 	aa	ip_header_bytes
  :                            353 
00:0046C2 680004              +354 	lb	a				. bytes in fragment + 1
  :                            355 
00:0046C3 A5FFF8              +356 	and	-8,,xi				. round down 8-byte frames
00:0046C4 060001              +357 	sar	1				. / 2 = quadwords
00:0046C5 C00003              +358 	aa	y				. + interface frame window
00:0046C6 400004              +359 	lr	a				. = range check
  :                            360  
00:0046C7 8D0050              +361 	ay	IPV4_OVERHAUL/2,,xi		. interface frame windows
  :                            362 
00:0046C8 FE06CE              +363 include	jyge	complete
00:0046C9 8FB000              +364 	qpush	0, y
00:0046CA 87A000              +365 	qpop	0, x
00:0046CB 8D0004              +366 	ay	4,,xi
00:0046CC 850004              +367 	ax	4,,xi
00:0046CD B606C8              +368 	j	include
  :                            369 
  :                            370 complete
00:0046CE AD0007              +371 	andB	7,,xi				. last fragment last bytes?
00:0046CF CE06E2              +372 	jzb	span				. complete and separate any foundry flash
00:0046D0 650000              +373 	la	0,,xi
00:0046D1 560001              +374 	drr	1				. words count in b : byte flag in a
  :                            375 
00:0046D2 400005              +376 	lr	b
00:0046D3 B606D8              +377 	j	trailing_word?
  :                            378 
  :                            379 trailing_word!
00:0046D4 F8B000              +380 	push	0, y
00:0046D5 38A000              +381 	pop	0, x
00:0046D6 8D0001              +382 	ay	1,,xi
00:0046D7 850001              +383 	ax	1,,xi
  :                            384 
  :                            385 trailing_word?
00:0046D8 1E06D4              +386 	jdr	trailing_word!
  :                            387 
00:0046D9 A606DE              +388 	jpa	pad?				. trailing byte  ?
00:0046DA 60B000              +389 	la	0, y
00:0046DB A0089B              +390 	and	(00FF00)
00:0046DC 20A000              +391 	sa	0, x
00:0046DD 850001              +392 	ax	1,,xi
  :                            393 
00:0046DE 600002              +394 pad?	la	x				. odd address ?
00:0046DF 9E06E1              +395 	jae	span
00:0046E0 B606E2              +395 
00:0046E1 30C000              +396 	z	0, a				. smooth the way for checksums
  :                            397 
  :                            398 						. walk for remaining gaps + count total
00:0046E2 550000              +399 span	lx	0,,xi				. initialise octet count comparator
00:0046E3 58E000              +400 	ly	descriptor:next			. 1st payload token, per declaration
  :                            401 						. y -> default base register
00:0046E4 60B002              +402 spanner	la	payload:offset
00:0046E5 680004              +403 	lb	a				. save for
00:0046E6 A008A9              +404 	and	(00FFFF)			. more flag 1 */ 23
00:0046E7 400004              +405 	lr	a
00:0046E8 F606EA              +406 	jxl	await_escape				. a gap (offset > accumulated)
00:0046E9 B6072D              +406 
00:0046EA 500004              +407 	lx	a				. restart byte count per fragment
  :                            408 						. total does not need overlaps
00:0046EB 80B001              +409 	ax	payload:bytes
00:0046EC AE06F1              +410 	jpb	unspan				. more flag ?
  :                            411 
00:0046ED 58B000              +412 	ly	payload:next			. next payload token
00:0046EE 700003              +413 	tz	y				. Sanity Claus doan exist none
00:0046EF B606E4              +414 	j	spanner
00:0046F0 B6072D              +415 	j	await_escape			. end chain not end dgram
  :                            416 
00:0046F1 100007              +417 unspan	sx	7				. tpdu byte count for checksum inclusion
00:0046F2 10E003              +418 	sx	descriptor:bytes		. keep reassembly last payload token y ->
  :                            419 
00:0046F3 68E004              +420 	lb	descriptor:dgram
(+01)0f
00:0046F4 80003E              +421 	ax	ip_header_bytes
00:0046F5 10D001              +422 	sx	dgram:bytes, b
00:0046F6 30D003              +423 	z	dgram:flags_fragment, b
  :                            424 
  :                            425 .	la	payload:bytes
  :                            426 .	and	7,,xi
  :                            427 .	jza	sum
  :                            428 
(+01)0f
00:0046F7 50003D              +429 sum	lx	tag_lookaside			. base register tag <- per declaration
00:0046F8 68A007              +430 	lb	tag:dest_protocol+1
00:0046F9 AD00FF              +431 	andB	255,,xi
00:0046FA 280006              +432 	sb	6				. protocol for checksum inclusion
  :                            433 
00:0046FB 9F0006              +434 	dpush	6
00:0046FC 9FA002              +435 	dpush	tag:socket_lpointer		. user datagram descriptor needs this
  :                            436 
00:0046FD 60A000              +437 	la	tag:chain
00:0046FE 20000E              +438 	sa	fp
  :                            439 
00:0046FF 4F089E              +440 	ql	(0q)				. fragment tag is freed
00:004700 47A000              +441 	qs	0, x				. by writing zero all over it
00:004701 47A004              +442 	qs	4, x				. free the tag
00:004702 870004              +443 	qpop	a
00:004703 C70012              +444 	ds	 SOCKET_LPOINTER
  :                            445 
00:004704 F8E000              +446 	push	descriptor:next			. payload tokens chain head this reassembly
(+01)0f
00:004705 60003C              +447 	la	fragment_engine_lookaside	. reassembly machine this interface 
00:004706 F8C020              +448 	push	free_payload_token, a		. payload tokens free chain this interface
  :                            449 						. y -> lookinat last tuple reassembled chain
00:004707 38B000              +450 	pop	payload:next			. becomes y -> next after freed chain
00:004708 38C020              +451 	pop	free_payload_token, a		. freed chain -> front of free chain
  :                            452 
00:004709 50E005              +453 	lx	descriptor:uproto		. destination delivered IP payload
00:00470A 600006              +454 	la	6				. cached protocol name awaiting checksum
00:00470B C5FFFA              +455 	aa	-IPPROTO_TCP,,xi
00:00470C C6071F              +456 	jza	sum_tcp				. checksum per TCP and deliver
  :                            457 
00:00470D 60A003              +458 	la	uugram:checksum			. user datagram bearing checksum?
00:00470E C60717              +459 	jza	deliver_udp			. OK... big reassembled udgram no checksum
00:00470F F80004              +460 	push	a				. otherwise save RX checksum
00:004710 30A003              +461 	z	uugram:checksum			. do not add the checksum to the checksum
00:004711 3E0749              +462 	lcal	uchecksum			. when generating to compare
00:004712 DE0714              +463 	jnzb	udpcksu				. a zero result on generation
00:004713 B808A9              +464 	xorB	(00FFFF)			. is for UDP reflipped
  :                            465 						. to distinguish from optional non-checksum
00:004714 B8F000              +466 udpcksu	xorB	0, sp				. compare generated sum with RX sum
00:004715 38A003              +467 	pop	uugram:checksum			. put RX sum back in RX header
00:004716 DE072F              +468 	jnzb	drop_completed			. drop it if it's wrong
  :                            469 						. deliver it if it's right
  :                            470 deliver_udp
00:004717 CF0012              +471 	dl	SOCKET_LPOINTER
  :                            472 .	dte	(000029,02f090L)			.	jnza	$+2
  :                            473 .	ii	GUARD$
00:004718 C7E006              +474 	ds	descriptor:sobdi
00:004719 FDFFF8              +475 	push	-8,,xi
00:00471A 2FE003              +476 	popA	descriptor:bytes
00:00471B 60000E              +477 	la	fp
[+0019]10
00:00471C 5D0000              +478 	ly	udpq,,xi
00:00471D FF08B1              +479 	call	(far_q2)
00:00471E B60748              +480 	j	escape
  :                            481 
00:00471F F8A008              +482 sum_tcp	push	transfer:checksum		. RX checksum -> internal stack
00:004720 30A008              +483 	z	transfer:checksum		. do not add the checksum to the checksum
00:004721 3E0749              +484 	lcal	uchecksum			. when generating to compare
00:004722 B8F000              +485 	xorB	0, sp				. compare generated sum with RX sum
00:004723 38A008              +486 	pop	transfer:checksum		. put RX sum back in RX header
00:004724 DE072F              +487 	jnzb	drop_completed			. drop it if it's wrong
  :                            488 						. deliver it if it's right
00:004725 60000E              +489 	la	fp				. deliver tcp
00:004726 FF08E7              +490 	call	(tcp_rx_ready)
00:004727 B60748              +491 	j	escape
  :                            492 	
  :                            493 restart_rasm_timer
00:004728 600097              +494 	la	DAYCLOCK$
00:004729 C54000              +495 	aa	IP4_RASM_RETAIN_MS,,xi
(+01)0f
00:00472A 50003D              +496 	lx	tag_lookaside
00:00472B 20A001              +497 	sa	tag:runout
00:00472C 350000              +498 	lret	0
  :                            499 
  :                            500 replication_escape
  :                            501 await_escape					. restart target reassembly timeout
00:00472D 3E0728              +502 	lcal	restart_rasm_timer		. for next fragment
00:00472E B60748              +503 	j	escape
  :                            504 
  :                            505 drop_completed					. tag already cleared
00:00472F 60000E              +506 	la	fp				. tokens already pooled
00:004730 502180              +507 	lx	rx_buffers			. did not check out
00:004731 FF0884              +508 	call	(if_sell1)
[+001b]10
00:004732 550000              +509 	lx	IPINDISCARDS_I,,xi
00:004733 B60741              +510 	j	drop_count48
  :                            511 
  :                            512 drop_nothing					. this entry does not start reassembling
00:004734 4F089E              +513 	ql	(0q)				. x -> tag
00:004735 47A000              +514 	qs	0, x
00:004736 47A004              +515 	qs	4, x
[+001c]10
00:004737 550000              +516 	lx	IPREASMFAILS_I,,xi
00:004738 B60741              +517 	j	drop_count48
  :                            518 
  :                            519 drop_discard					. this entry cancels a reassembly
(+01)0f
00:004739 50003C              +520 	lx	fragment_engine_lookaside
00:00473A 44A020              +521 	lr	free_payload_token,,i
(+01)0f
00:00473B 50003D              +522 	lx	tag_lookaside			. tag -> buffer -> tokens_chain
00:00473C 3E07BA              +523 	lcal	tag_free			. x -> a reassembling resource
[+001c]10
00:00473D 550000              +524 	lx	IPREASMFAILS_I,,xi
00:00473E B60741              +525 	j	drop_count48
  :                            526 
  :                            527 storage_escape					. bypass rx fragment which can't be used
00:00473F 3E0728              +528 	lcal	restart_rasm_timer		. and restart target reassembly timeout 
  :                            529 
  :                            530 no_storage_escape				. these entries bypass an RX fragment
  :                            531 interface_escape				. which can't be used and don't relate
  :                            532 limits_escape					. to a reassembly already in progress
  :                            533 no_protocol_escape
  :                            534 socket_escape
  :                            535 drop_rasm
[+001c]10
00:004740 550000              +536 	lx	IPREASMFAILS_I,,xi		. do not drop any reassembling resource
  :                            537 
  :                            538 drop_count48
00:004741 CFA000              +539 	dl	0, x
00:004742 D708E8              +540 	da	(1L)
00:004743 C7A000              +541 	ds	0, x
  :                            542 
  :                            543 	$if	0
  :                            544 drop	lx	rx_buffers
  :                            545 	la	fp
  :                            546 	call	(if_sell1)
  :                            547 	$endif
  :                            548 
00:004744 B60748              +549 	j	escape
  :                            550 
00:004745 FCF003              +551 	$ret
00:004746 38000F              +551 
00:004747 3D0000              +551 
  :                            552 
  :                            553 	$if	0
  :                            554 replication_escape
  :                            555 storage_escape
  :                            556 await_escape
  :                            557 	la	DAYCLOCK$
  :                            558 	aa	IP4_RASM_RETAIN_MS,,xi
  :                            559 	lx	tag_lookaside	
  :                            560 	sa	tag:runout
  :                            561 
  :                            562 no_storage_escape
  :                            563 interface_escape
  :                            564 limits_escape
  :                            565 no_protocol_escape
  :                            566 socket_escape
  :                            567 	$endif
  :                            568 						. all fragment rx gets to here
00:004748 F708EC              +569 escape	 go	(0800000++$0(ipv4_rxz, 2L)s)	. gated jump to drop RX fragment at interface
  :                            570 						. and clear internal stack
  :                            571 uchecksum
00:004749 F80002              +572 	push	x				. this is used after
00:00474A 58E004              +573 	ly	descriptor:dgram
00:00474B CFB006              +574 	dl	dgram:ipsource, y
00:00474C D7B008              +575 	da	dgram:ipdest, y
00:00474D D70006              +576 	da	6				. protocol : octets
  :                            577 
00:00474E 8F08ED              +578 	SIMD_CONTROL	(-1, 0, 128-1, 2q)	. 1 accumulator, 128 adds,  memory increment +2
00:00474F 870014              +578 
  :                            579 
00:004750 9F0004              +580 	dpush	a				. into SIMD space
00:004751 600007              +581 	la	7
00:004752 060009              +582 	sar	9				. each pass adds 128 * 4 octets
00:004753 400004              +583 	lr	a				. passes
00:004754 B6075B              +584 	j	pass?				. x -> protocol unit already 
  :                            585 
00:004755 7408F1              +586 pass!	rex	(da	0, x)			. add 128 word pairs
00:004756 CFF000              +587 	dl	0, sp				. to internal stack top word pair
00:004757 C00005              +588 	aa	b				. fold the value
00:004758 160010              +589 	dsr	16
00:004759 0E0008              +590 	sbr	8
00:00475A C7F000              +591 	ds	0, sp
00:00475B 1E0755              +592 pass?	jdr	pass!
  :                            593 
00:00475C 600007              +594 	la	7
00:00475D 060002              +595 	sar	2
00:00475E A5007F              +596 	and	127,,xi
00:00475F C60763              +597 	jza	remainder?			. no remaining part > 3 octets
  :                            598 
00:004760 C5FFFF              +599 	aa	-1,,xi				. restart count is 1 less than objects
00:004761 200016              +600 	sa	SIMD_RESTARTC			. and final count is -1
  :                            601 
00:004762 7408F1              +602 	rex	(da	0, x)
  :                            603 
  :                            604 remainder?
00:004763 600007              +605 	la	7				. final octets ?
00:004764 A50003              +606 	and	3,,xi
00:004765 C6076C              +607 	jza	repass
  :                            608 						. 1..3 more octets to sum
00:004766 58C8F2              +609 	ly	(48, 24+8, 24, 8q), a		. bits to clear
00:004767 CFA000              +610 	dl	0, x				. 2 more words 00XXXX:00YYYY
00:004768 16B000              +611 	dsr	0, y
00:004769 36B000              +612 	dsl	0, y
00:00476A D7F000              +613 	da	0, sp				. add to SIMD result
00:00476B C7F000              +614 	ds	0, sp
  :                            615 
00:00476C 380004              +616 repass	dpop	a
00:00476D 380005              +616 
00:00476E C00005              +617 refold	aa	b
00:00476F 160010              +618 	dsr	16
00:004770 0E0008              +619 	sbr	8
00:004771 D6076E              +620 	jnza	refold
00:004772 B808A9              +621 	xorB	(00FFFF)
  :                            622 
00:004773 300016              +623 	z	SIMD_RESTARTC			. restore ip thread SIMD defaults
00:004774 300017              +624 	z	SIMD_INDEXU
00:004775 380002              +625 	pop	x				. uproto pointer
00:004776 350000              +626 	lret	0
  :                            627 
  :                            628 free	$equ	6
  :                            629 
00:004777 50A02C              +630 search	lx	this_if:iq_buffer		. x preloaded -> interface
  :                            631 
00:004778 44A020              +632 	lr	RASMGRAM_WORDS*IP4_RASMGRAMS_IF, x, i
00:004779 300006              +633 	z	free
  :                            634 
00:00477A 70A000              +635 next	tz	tag:chain			. if this tag is free remember it
00:00477B B6077D              +636 	j	linked				. because a new one is always needed
00:00477C 100006              +637 	sx	free				. if the tag being searched is not there
  :                            638 		
00:00477D CF0008              +639 linked	dl	8				. good. linked to us?
00:00477E 57A004              +640 	dte	tag:source_id
00:00477F B60784              +641 	j	next?
00:004780 CF000A              +642 	dl	10
00:004781 57A006              +643 	dte	tag:dest_protocol
00:004782 B60784              +644 	j	next?
00:004783 350001              +645 	lret	1				. tag equals search pattern return + 1
  :                            646 
00:004784 850008              +647 next?	ax	RASMGRAM_WORDS,,xi
00:004785 F60787              +648 	jxl	next
00:004786 B6077A              +648 
  :                            649 
00:004787 500006              +650 	lx	free
00:004788 700002              +651 	tz	x
00:004789 350001              +652 	lret	1				. free tag available return + 1
00:00478A 350000              +653 	lret	0				. no tag available return
  :                            654 
  :                            655 payload_size_b					. extract size ip payload to r
00:00478B 9F0004              +656 	dpush	a				. b -> datagram
00:00478C 600005              +657 	la	b				
00:00478D D0B005              +658 	ana	descriptor:uproto, y		. minus ip payload address -> minus ip header words
00:00478E 260001              +659 	sal	1				. negative address offset -> minus bytes difference
00:00478F C0D001              +660 	aa	dgram:bytes, b	
00:004790 400004              +661 	lr	a				. deliver
00:004791 380004              +662 	dpop	a				. restore b -> datagram + data in a
00:004792 380005              +662 
00:004793 350000              +663 	lret	0
  :                            664 
  :                            665 reassembly_time?
[+0004]10
00:004794 550000              +666 	lx	$if0p,,xi				. points to tally
00:004795 10000B              +667 	sx	11
  :                            668 
00:004796 17000B              +669 rasm?	inc	11				. point into pointer array
00:004797 50800B              +670 	lx	*11				. pointer interface(_)
00:004798 70A02C              +671 	tz	this_if:iq_buffer		. has fraction token table?
00:004799 3E079E              +672 	lcal	rasm				. yes
[+0005]0f
00:00479A 400000              +673 	lr	$ifzp				. was this interface(highest_active) ?
00:00479B F6079D              +674 	jxge	rasm!				. yes
00:00479C B60796              +675 	j	rasm?				. no
00:00479D 3D0000              +676 rasm!	fret	0
  :                            677 
00:00479E F80002              +678 rasm	push	x
00:00479F 50A02C              +679 	lx	this_if:iq_buffer
00:0047A0 3E07A3              +680 	lcal	tag_4_tag
00:0047A1 380002              +681 	pop	x
00:0047A2 350000              +682 	lret	0
  :                            683 
  :                            684 tag_4_tag
                                	$head_near	scalars(tag_high_index,	int,	free_payload_token,,i	;
00:0047A3 FCA020              +686 				this_tag,	int,	x			)
00:0047A4 F80002              +686 
  :                            687 next_tag
  :                            688 	$if	1
00:0047A5 CFA000              +689 	dl	tag:chain			. storage ++ timeout
  :                            690 	$else
  :                            691 	dl	tag:dest_protocol
  :                            692 	$endif
  :                            693 
00:0047A6 7C07B1              +694 	jdz	no_tag				. not in use
00:0047A7 20000E              +695 	sa	fp				. descriptor if any
00:0047A8 60A001              +696 	la	tag:runout
00:0047A9 D00097              +697 	ana	DAYCLOCK$
00:0047AA A607B1              +698 	jpa	not_timeout
  :                            699 
00:0047AB 40F001              +700 	lr	tag_high_index			. **pointer &free_payload_token		.
00:0047AC 3E07BA              +701 	lcal	tag_free			. release resources + forget
  :                            702 
00:0047AD FD0001              +703 	push	1,,xi
[+001c]0f
00:0047AE 2F0001              +704 	popA	IPREASMFAILS_I+1
00:0047AF 5E07B1              +705 	jnc	no_carry
[+001c]0f
00:0047B0 170000              +706 	inc	IPREASMFAILS_I
  :                            707 
  :                            708 no_carry
  :                            709 no_tag
  :                            710 not_timeout
00:0047B1 40F001              +711 	lr	tag_high_index			. free_payload_token is after last tag
00:0047B2 50F000              +712 	lx	this_tag
00:0047B3 850008              +713 	ax	RASMGRAM_WORDS,,xi
00:0047B4 10F000              +714 	sx	this_tag
00:0047B5 F607B7              +715 	jxl	next_tag
00:0047B6 B607A5              +715 
00:0047B7 FCF002              +716 	$ret
00:0047B8 38000F              +716 
00:0047B9 350000              +716 
  :                            717 
  :                            718 tag_free
  :                            719 	$if	1
00:0047BA 60000E              +720 	la	fp
00:0047BB C607CB              +721 	jza	tag_void
  :                            722 	$else
  :                            723 	la	tag:chain			. buffer?
  :                            724 	jza	tag_void
  :                            725 	sa	fp
  :                            726 	$endif
  :                            727 
00:0047BC 68E000              +728 	lb	descriptor:next			. fragment tokens?
00:0047BD CE07C6              +729 	jzb	free_rasm_storage
00:0047BE 580005              +730 	ly	b				. 1st token
  :                            731 
  :                            732 tag_walk_tokens					. includes case timeout
  :                            733 	$if	0				. so may not have final fragiola
  :                            734 	tn	2, y				. more flag?
  :                            735 	j	tag_relink 			. no 
  :                            736 	$endif
  :                            737 
00:0047BF 60B000              +738 	la	0, y
00:0047C0 C607C3              +739 	jza	tag_relink			. token after this token ?
00:0047C1 580004              +740 	ly	a
00:0047C2 B607BF              +741 	j	tag_walk_tokens
  :                            742 
  :                            743 tag_relink
00:0047C3 F88000              +744 	push	*r				. free tokens head -> until now
00:0047C4 38B000              +745 	pop	0, y				. to tail of freed tokens chain
00:0047C5 288000              +746 	sb	*r				. new free tokens chain head
  :                            747 
  :                            748 free_rasm_storage
  :                            749 .	push	x				. reassembly tag pointer
00:0047C6 60000E              +750 	la	fp				. retrieve descriptor
00:0047C7 10000E              +751 	sx	fp
00:0047C8 502180              +752 	lx	rx_buffers
00:0047C9 FF0884              +753 	call	(if_sell1)
00:0047CA 50000E              +754 	lx	fp
  :                            755 .	pop	x				. reassembly tag pointer
  :                            756 						. about to get written void = free
  :                            757 tag_void
00:0047CB 4F089E              +758 	ql	(0q)
00:0047CC 47A000              +759 	qs	0, x
00:0047CD 47A004              +760 	qs	4, x
00:0047CE 350000              +761 	lret	0
  :                            762 
  :                            763 	$root
  :                            208: 	$include	t77.4/tx_jumbo
  :                            1 
  :                            2 .	source fragmentation device driver
  :                            3 .	in ip threa so no queue locking
  :                            4 
  :                            5 jumbo_txq*	$tree
  :                            6 
  :                            7 $(1)
  :                            8 
01:000040 000000              +9 oq	dq		. datagram queue from ip
01:000041 000000              +9 
01:000042 000000              +10 index	0		. cursor in partially transmitted payload
  :                            11 
  :                            12 $(0)
(+01)0f
00:0047CF 600040              +13 next	la	oq:head
00:0047D0 C607DB              +14 	jza	clear
  :                            15 
00:0047D1 F8C007              +16 	push	descriptor:ifql, a	. the queue must be popped
(+01)0f
00:0047D2 380040              +17 	pop	oq:head			. q2 -> i_f loses forward link
  :                            18 
00:0047D3 50C002              +19 	lx	descriptor:i_f, a	. pick up interface address
00:0047D4 0F0002              +20 	n	x			. inverted when on this queue
[+0004]10
00:0047D5 850000              +21 	ax	$if0p,,xi
00:0047D6 50A000              +22 	lx	0, x
  :                            23 
00:0047D7 3E07F4              +24 	lcal	tx_jumbo
  :                            25 
(+01)0f
00:0047D8 780042              +26 	tp	index			. all transmitted ?
00:0047D9 B607DC              +27 	j	resume			. no
00:0047DA B607CF              +28 	$do	1,	j	next	. yes
00:0047DB 3D0000              +29 clear	fret	0			. 1 total dgram per pass to allow
  :                            30 					. fragment wrapper dgrams to clear
  :                            31 
(+01)0f
00:0047DC 680040              +32 resume	lb	oq:head			. unfinished: b < - queue head
00:0047DD DE07DF              +33 	jnzb	first			. queue populated ?
(+01)0f
00:0047DE 200041              +34 	sa	oq:tail			. no: a -> queue tail
(+01)0f
00:0047DF 200040              +35 first	sa	oq:head			.     a -> queue head
00:0047E0 28C007              +36 	sb	descriptor:ifql, a	. should still be identical
  :                            37 
  :                            38 	$if	0
  :                            39 	sa	oq:head			. next datagram link not changed
  :                            40 	tnz	descriptor:ifql, a	. this thread also writes this queue
  :                            41 	sa	oq:tail
  :                            42 	$endif
  :                            43 
(+01)0f
00:0047E1 0F0042              +44 	n	index			. change index back
00:0047E2 3D0000              +45 	fret	0			. to magnitude sent
  :                            46 
  :                            47 .	a -> datagram descriotor
  :                            48 .	x -> interace
  :                            49 
00:0047E3 68A000              +50 q2oq	lb	this_if:id		. mark within fragmentation
00:0047E4 DE07E6              +51 	 jnzb	$+2
00:0047E5 75005F              +52 	 ii	GUARD$
00:0047E6 BDFFFF              +53 	xorB	-1,,xi
00:0047E7 28C002              +54 	sb	descriptor:i_f, a
  :                            55 
00:0047E8 F80011              +56 	push	MTU			. save in descriptor:mtu which is also
00:0047E9 38C006              +57 	pop	descriptor:mtu, a	. app data pointer or high volume page index
  :                            58 
  :                            59 	$do	0,	c	(g_checksum)	IPPROTO_TCP,,xi	bytes**03FFFFF	a
  :                            60 					. if SIMD checksumming is preferred to
  :                            61 					. incrementing checksum in w2buffer routine
(+01)0f
00:0047EA 700040              +62 	tz	oq:head
00:0047EB B607EE              +63 	j	append
(+01)0f
00:0047EC 200040              +64 	sa	oq:head
00:0047ED B607F0              +65 	j	conclude
(+01)0f
00:0047EE 680041              +66 append	lb	oq:tail			. queue tail so far
00:0047EF 20D007              +67 	sa	descriptor:ifql, b	. new queue tail <-
  :                            68 conclude
(+01)0f
00:0047F0 200041              +69 	sa	oq:tail			. new queue tail
00:0047F1 30C007              +70 	z	descriptor:ifql, a
00:0047F2 FF08F6              +71 	$do	1,	call	(jumbo_drive)
00:0047F3 3D0000              +72 	fret	0
  :                            73 
  :                            74 		$root
  :                            75 
  :                            76 .	precisely a jumbo-size TPDU goes to a smaller MTU I / F in fragments
  :                            77 .	the TPDU buffer is app data up to 16384 octets + TPDU header + IP header
  :                            78 .	temp (LL headers + IP headers) get injected as the TPDU goes past
  :                            79 .	interface drivers pool the temp buffers on transmit
  :                            80 .	the input big buffer should be pooled here if it's not marked for resends
  :                            81 
  :                            82 tx_jumbo	$tree
                                		$head_near						;
                                		scalars(more,		int,	(IP_MORE)		;
                                			frame_p,	int,	descriptor:frame, a	;
                                			routing_buffer,	int				;
                                			iph_words,	int				;
                                			i_f,		int,	x			;
                                			ifidx,		int,	this_if:id		;
                                			jumbo_axw,	int,	a			;
                                			jumbo_dgram,	int,	descriptor:dgram, a	;
                                			jumbo_uproto,	int,	descriptor:uproto, a	;
                                			mtu,		int,	descriptor:mtu, a 	;
                                			final_count,	int				;
                                			ipdu_offset,	int,	jumbo_txq:index		;
                                			fragment_payload,	int			;
00:0047F4 F808E5              +97 			caller_fp,	int,	fp			)
00:0047F5 F8C001              +97 
00:0047F6 FD0000              +97 
00:0047F7 FD0000              +97 
00:0047F8 F80002              +97 
00:0047F9 F8A000              +97 
00:0047FA F80004              +97 
00:0047FB F8C004              +97 
00:0047FC F8C005              +97 
00:0047FD F8C006              +97 
00:0047FE FD0000              +97 
(+01)0f
00:0047FF F80042              +97 
00:004800 FD0000              +97 
00:004801 F8000E              +97 
  :                            98 
00:004802 58F006              +99 	ly	jumbo_dgram
  :                            100 
00:004803 60B000              +101 	la	0, y
00:004804 060007              +102 	sar	8-1			. data words from IP header longs
00:004805 A5001E              +103 	and	30,,xi
00:004806 20F00A              +104 	sa	iph_words		. ***
  :                            105 					. before looping back
  :                            106 					. load current ip header words in a ***
  :                            107 
00:004807 260001              +108 	sal	1			. input dgram header bytes
00:004808 68B001              +109 	lb	dgram:bytes, y
00:004809 D80004              +110 	anb	a			. payload only this counter
  :                            111 
00:00480A EE0856              +112 	jnb	no_more
00:00480B CE0856              +113 	jzb	no_more
  :                            114 
00:00480C 28F003              +115 	sb	final_count
  :                            116 	
00:00480D 60F00A              +117 acquire	la	iph_words		. data words ip header
00:00480E 6CC014              +118 	lb	ROUTING_HEADER, a, i	. routing buffer + IP header
00:00480F 28F00B              +119 	sb	routing_buffer
  :                            120 
  :                            121 .	lx	i_f			. not doing anything
00:004810 68F004              +122 	lb	mtu
00:004811 60F00A              +123 	la	iph_words
00:004812 260001              +124 	sal	1			. ip header words -> bytes
00:004813 D80004              +125 	anb	a
00:004814 ADFFF8              +126 	andB	-8,,xi			. * blocks of 8 octets
00:004815 28F001              +127 	sb	fragment_payload
  :                            128 	
  :                            129 .	get tx temp routing buffer + ip header
  :                            130 .	fragment payload  = mtu - ip header ** -8
  :                            131 .	microstack = physaL:physa, iphl:ipheader, fragmentL:fragment
  :                            132 
00:004816 502181              +133 request	lx	tx_buffers
00:004817 60F00B              +134 	la	routing_buffer
00:004818 FF08B0              +135 	call	(if_buy1)
00:004819 D6081D              +136 	jnza	qfragment
  :                            137 
(+01)0f
00:00481A 0F0042              +138 	n	jumbo_txq:index		. it might still be zero
00:00481B 60F007              +139 	la	jumbo_axw		. descriptor needed again
00:00481C B60859              +140 	j	return
  :                            141 
  :                            142 	$if	0
  :                            143 	dl	(10d)			. xmit is not in an application thread
  :                            144 	ii	TWAIT$			. which could pause for effect
  :                            145 
  :                            146 					. test socket
  :                            147 	j	acquire
  :                            148 	$endif
  :                            149 					. descriptor is the from here the temp axw
  :                            150 
  :                            151 qfragment				. construct routing buffer + ip header
00:00481D 20000E              +152 	sa	fp			. first copy all original routing buffer
  :                            153 
  :                            154 					. address limit of copy
00:00481E 58F00C              +155 	ly	frame_p			. address the come-from headers
00:00481F 88F00A              +156 	ay	iph_words
00:004820 44B014              +157 	lr	ROUTING_HEADER, y, i
00:004821 58F00C              +158 	ly	frame_p
  :                            159 
00:004822 50E001              +160 	lx	descriptor:frame
  :                            161 	
  :                            162 headers1_2
00:004823 FE0829              +163 	jyge	headers_template_acquired
  :                            164 
00:004824 CFB000              +165 	dl	0, y
00:004825 C7A000              +166 	ds	0, x			. copy longwords routing header + ip header
00:004826 850002              +167 	ax	2,,xi		
00:004827 8D0002              +168 	ay	2,,xi
00:004828 B60823              +169 	j	headers1_2
  :                            170 
  :                            171 headers_template_acquired
00:004829 58F005              +172 	ly	jumbo_uproto
00:00482A 18E005              +173 	sy	descriptor:uproto	. address in the original buffer
  :                            174 
00:00482B 50E001              +175 	lx	descriptor:frame
00:00482C 5CA014              +176 	ly	ROUTING_HEADER, x, i		. new dgram
  :                            177 
00:00482D 18E004              +178 	sy	descriptor:dgram	. write for 1st time
  :                            179 
  :                            180 	$if	0			. done b4 you ask
  :                            181 	la	iph_words		. not certain to be same every datagram
  :                            182 	sal	1			. ip header bytes
  :                            183 	lb	mtu
  :                            184 	andB	-8,,xi			. in case MTU is not / 8
  :                            185 	anb	a			. wrong. Round the payload part
  :                            186 	sb	fragment_payload
  :                            187 	$endif
  :                            188 
00:00482E 60F003              +189 	la	final_count		. remaining total payload
00:00482F 680004              +190 	anu	fragment_payload	. proposed fraction payload
00:004830 D8F001              +190 
00:004831 28F003              +191 	sb	final_count		. that can be [ - 0 + ]
00:004832 7E0835              +192 	jc	more?			. at least that much data on hand
00:004833 20F001              +193 	sa	fragment_payload	. but if final count < 0
  :                            194 					. then previous final count -> last send
00:004834 30F00D              +195 	z	more			. and this shall be last fragment
  :                            196 
00:004835 60F002              +197 more?	la	ipdu_offset		. talking of more
00:004836 060003              +198 	sar	3			. mark out fragment offset
00:004837 90F00D              +199 	or	more
00:004838 20B003              +200 	sa	dgram:flags_fragment, y
  :                            201 
00:004839 60F00A              +202 	la	iph_words
00:00483A 260001              +203 	sal	1			. words -> bytes
00:00483B 680003              +204 	lb	y
  :                            205 .					. x -> new frame y -> new datagram
  :                            206 .	lx	descriptor:frame	. construct microstack channel program (2) *
  :                            207 .	ly	16, x, i		. y -> 
  :                            208 
00:00483C C7A009              +209 	ds	nframe:frame_axw(2)
  :                            210 
00:00483D C0F001              +211 	aa	fragment_payload
00:00483E 20B001              +212 	sa	dgram:bytes,	y
00:00483F 20E003              +213 	sa	descriptor:bytes
  :                            214 
00:004840 60F00A              +215 	la	iph_words
00:004841 3E085F              +216 	lcal	ip_checksum		. returns y -> ip header
  :                            217 
  :                            218 	$if	1			. fragment needs an interface number
00:004842 60F008              +219 	la	ifidx
00:004843 20E002              +220 	sa	descriptor:i_f
  :                            221 	$endif
  :                            222 					. de-comment next line if x changed since (2) *
  :                            223 .	lx	descriptor:frame	. construct microstack channel program (3)
00:004844 60F001              +224 	la	fragment_payload	. MTU - ip header bytes
00:004845 68F005              +225 	lb	jumbo_uproto		. incrementing pointer
00:004846 C7A00B              +226 	ds	nframe:frame_axw(3)
  :                            227 
  :                            228 	$if	0
  :                            229 	la	iph_words
  :                            230 	sal	1			. these tuples contain a byte count
  :                            231 	lb	y
  :                            232 	ds	nframe:frame_axw(2)
  :                            233 	$endif
  :                            234 
00:004847 65FFFA              +235 	la	-6,,xi
00:004848 20A00D              +236 	sa	nframe:stack_index
  :                            237 
00:004849 60000E              +238 	la	fp			. axw ->
00:00484A 50F009              +239 	lx	i_f			. q2 i/f
00:00484B FF08F7              +240 	call	(write_ifq)	
  :                            241 
00:00484C 60F001              +242 	la	fragment_payload	. add to fragment index in bytes
00:00484D 68F002              +243 	lb	ipdu_offset
00:00484E C80004              +244 	ab	a
00:00484F 28F002              +245 	sb	ipdu_offset
(+01)0f
00:004850 280042              +246 	sb	jumbo_txq:index
  :                            247 
00:004851 060001              +248 	sar	1			. add to address in media words
00:004852 C0F005              +249 	aa	jumbo_uproto
00:004853 20F005              +250 	sa	jumbo_uproto
  :                            251 					. remove non-repeat header options
  :                            252 					. not from the original
  :                            253 					. it might be a resending protocol
  :                            254 					. recalculate dynamic variable iph_words
00:004854 70F00D              +255 	tz	more
00:004855 B6080D              +256 	j	acquire
  :                            257 
(+01)0f
00:004856 300042              +258 no_more	z	jumbo_txq:index		. signal dequeue
00:004857 60F007              +259 	la	jumbo_axw		. chain jumbo to the last fragment
00:004858 FF08F7              +260 	call	(write_ifq)		. (write_ifq) returns x as supplied
  :                            261 
00:004859 50F000              +262 return	lx	caller_fp		
00:00485A 10000E              +263 	sx	fp
00:00485B 50F009              +264 	lx	i_f			. as it was
  :                            265 
00:00485C FCF00E              +266 	$ret
00:00485D 38000F              +266 
00:00485E 350000              +266 
  :                            267 
  :                            268 ip_checksum
00:00485F F80003              +269 	push	y
00:004860 30B005              +270 	z	dgram:checksum, y
  :                            271 
00:004861 C00003              +272 	aa	y			. ip header words
00:004862 400004              +273 	lr	a			. range high index
  :                            274 
00:004863 CFB000              +275 	dl	0, y
  :                            276 
  :                            277 ip_check_more?
00:004864 8D0002              +278 	ay	2,,xi
00:004865 FE0868              +279 	jyge	ip_compress_check
00:004866 D7B000              +280 	da	0, y
00:004867 B60864              +281 	j	ip_check_more?
  :                            282 
  :                            283 ip_compress_check
00:004868 C00005              +284 	aa	b
00:004869 160010              +285 	dsr	16
00:00486A 0E0008              +286 	sbr	8
00:00486B D60868              +287 	jnza	ip_compress_check
  :                            288 
00:00486C B808A9              +289 	xorB	(00FFFF)
00:00486D 380003              +290 	pop	y
  :                            291 
00:00486E 28B005              +292 	sb	dgram:checksum, y
00:00486F 350000              +293 	lret	0
  :                            294 
  :                            295 	$root
  :                            209: 	$include	t77.4/gchecksum
  :                            1 
  :                            2 gchecksum	$tree
  :                            3 
                                	$head_far	 params(protocol,	int		;
                                				dgram_bytes,	int		;
                                				acwp,		int	)	;
                                								;
00:004870 F8000E              +8 			scalars(caller_fp,	int,	fp	)
  :                            9 
00:004871 60F006              +10 	la	acwp			. buffer decriptor
00:004872 20000E              +11 	sa	fp
00:004873 CFF004              +12 	dl	protocol
00:004874 A80891              +13 	andB	(03FFFFF)		. strip any sticky bit on byte count
00:004875 C70006              +14 	ds	6			. protocol:bytes
00:004876 50E005              +15 	lx	descriptor:uproto
00:004877 3E0749              +16 	lcal	rx_jumbo:uchecksum
00:004878 38000E              +17 	pop	fp			. restore fp as at call
00:004879 3D0000              +18 	fret	0
  :                            19 
  :                            20 		$root	
  :                            210 
  :                            211 	$path
  :                            212 	$endif
  :                            213 
  :                            214 net_callstring
  :                            215 
  :                            216 .	vector name	tnet_callstring
  :                            217 
00:00487A F80004              +218 	push		a
00:00487B 340020              +219 	sabr		32
00:00487C 50A010              +220 	lx		transmission:receiveq:head
00:00487D 40A003              +221 	lr		descriptor:bytes, x
00:00487E 58A006              +222 	ly		descriptor:apdata, x
00:00487F 5008F8              +223 	lx		(32*/12++APP_CALL_STRING-01000)
  :                            224 	
00:004880 3E056B              +225 	lcal		hvsocket:block_read
  :                            226 
00:004881 380004              +227 	pop		a
00:004882 3D0000              +228 	fret		0
  :                            229 
  :                            230 	$do	$<256,$(0:256)
  :                            231 	$do	$zenith>4096,	$flag	driver bank literal table partly invisible
  :                            232 
*EOF*
00:004883+[0001]18:000000
00:004884+[0002]18:000000
00:004885+008000
00:004886+820000
00:004887+800000
00:004888+02F004
00:004889+000104
00:00488a+01FC00
00:00488b+400000
00:00488c+1FFFC0
00:00488d+40003F
00:00488e+840000
00:00488f+00000A4C4B40
00:004891+3FFFFF
00:004892+000000
00:004893+400002
00:004894+83FC00
00:004895+1FFFFF
00:004896+008000000000000000000000
00:00489a+006969
00:00489b+00FF00
00:00489c+00006C
00:00489d+000001
00:00489e+000000000000000000000000
00:0048a2+000105
00:0048a3+000106
00:0048a4+000107
00:0048a5+00010C00010A00010900010B
00:0048a9+00FFFF
00:0048aa+000131
00:0048ab+000040
00:0048ac+C00000
00:0048ad+000111000112
00:0048af+[000E]18:000000
00:0048b0+[000F]18:000000
00:0048b1+[0010]18:000000
00:0048b2+00010A
00:0048b3+000001000800
00:0048b5+000604
00:0048b6+000000000000000000000000000000000000000000000000
00:0048be+00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF
00:0048c6+[0011]18:000000
00:0048c7+00FFFF00FFFF
00:0048c9+124F80
00:0048ca+[0012]18:000000
00:0048cb+060000
00:0048cc+[0013]18:000000
00:0048cd+BC0000
00:0048ce+BE0000
00:0048cf+02F000
00:0048d0+BC0003
00:0048d1+BC0004
00:0048d2+BC0007
00:0048d3+02F005
00:0048d4+[0015]18:000000
00:0048d5+020000
00:0048d6+01FEF8
00:0048d7+BC002A
00:0048d8+000134
00:0048d9+02F003
00:0048da+000135
00:0048db+02F038
00:0048dc+[0016]18:000000
00:0048dd+555556
00:0048de+02F028
00:0048df+[0017]18:000000
00:0048e0+02F007
00:0048e1+800020
00:0048e2+FF0000
00:0048e3+3F0000
00:0048e4+0927C0
00:0048e5+002000
00:0048e6+00FFF8
00:0048e7+[001A]18:000000
00:0048e8+000000000001
00:0048ea+[001D]18*/18:000000000002
00:0048ec+8008EA
00:0048ed+FFFFFF00000000007F000002
00:0048f1+D7A000
00:0048f2+000030000020000018000008
00:0048f6+000120
00:0048f7+000110
00:0048f8+020C00
:$(00):004000:0048F9 :$(01):000000:000043 :$(02):002000:003000 :$(42):000000:0000C0 :$(43):000000:000003 :$(45):000000:000008 :$(47):000000:000012 
drivers.msm: object code 19824 bytes: 0 errors: 30 undefined labels

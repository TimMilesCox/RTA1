MASMX 7r3A Build 12
3/drivers.msm
*EOF*
  :                            29 	$list
  :                            30 
  :                            31 	
  :                            32 $(66::,x)
  :                            33 ?	$set	1
42:000000                     +34 this_if i_f
42:000001                     +34 
42:000002                     +34 
42:000003                     +34 
42:000004                     +34 
42:000005                     +34 
42:000006                     +34 
42:000008                     +34 
42:00000A                     +34 
42:00000C                     +34 
42:00000E                     +34 
42:000010                     +34 
42:000012                     +34 
42:000014                     +34 
42:000016                     +34 
42:000018                     +34 
42:00001A                     +34 
42:00001C                     +34 
42:00001E                     +34 
42:000020                     +34 
42:000022                     +34 
42:000023                     +34 
42:000024                     +34 
42:000025                     +34 
42:000026                     +34 
42:000027                     +34 
42:000028                     +34 
42:000029                     +34 
42:00002A                     +34 
42:00002B                     +34 
42:00002C                     +34 
42:00002D                     +34 
42:00002E                     +34 
42:00002F                     +34 
42:000030                     +34 
42:000031                     +34 
42:000032                     +34 
42:000033                     +34 
42:000034                     +34 
42:000035                     +34 
42:000036                     +34 
42:000037                     +34 
42:000038                     +34 
42:000039                     +34 
42:00003A                     +34 
42:00003B                     +34 
42:00003C                     +34 
42:00003D                     +34 
42:00003E                     +34 
42:00003F                     +34 
42:000040                     +34 
42:000041                     +34 
42:000042                     +34 
42:000043                     +34 
42:000044                     +34 
42:000045                     +34 
42:000046                     +34 
42:000047                     +34 
  :                            35 __IF_SIZE	$set	$
  :                            36 
  :                            37 $(70::,fp)
  :                            38 descriptor	acw
  :                            39 
  :                            40 $(67::,y)
43:000000                     +41 rxq2		dq
43:000001                     +41 
  :                            42 
  :                            43 $(67::,y)
43:000000                     +44 xmit_list	dq
43:000001                     +44 
  :                            45 
  :                            46 $(66::,x)
42:000000                     +47 pool		mpool
42:000001                     +47 
42:000002                     +47 
42:000003                     +47 
42:000004                     +47 
42:000005                     +47 
42:000006                     +47 
42:000007                     +47 
42:000008                     +47 
42:000009                     +47 
42:00000A                     +47 
42:00000B                     +47 
42:00000C                     +47 
42:00000D                     +47 
42:00000E                     +47 
42:00000F                     +47 
42:000010                     +47 
42:000011                     +47 
42:000012                     +47 
42:000013                     +47 
42:000014                     +47 
42:000015                     +47 
42:000016                     +47 
42:000017                     +47 
42:000018                     +47 
42:000019                     +47 
42:00001A                     +47 
42:00001B                     +47 
42:00001C                     +47 
42:00001D                     +47 
42:00001E                     +47 
42:00001F                     +47 
42:000020                     +47 
42:000021                     +47 
42:000022                     +47 
42:000023                     +47 
42:000024                     +47 
42:000025                     +47 
42:000026                     +47 
42:000027                     +47 
42:000028                     +47 
42:000029                     +47 
42:00002A                     +47 
42:00002B                     +47 
42:00002C                     +47 
42:00002D                     +47 
42:00002E                     +47 
42:00002F                     +47 
42:000030                     +47 
42:000031                     +47 
42:000032                     +47 
42:000033                     +47 
42:000034                     +47 
42:000035                     +47 
42:000036                     +47 
42:000037                     +47 
42:000038                     +47 
42:000039                     +47 
42:00003A                     +47 
42:00003B                     +47 
42:00003C                     +47 
42:00003D                     +47 
42:00003E                     +47 
42:00003F                     +47 
42:000040                     +47 
42:000041                     +47 
42:000042                     +47 
42:000043                     +47 
42:000044                     +47 
42:000045                     +47 
42:000046                     +47 
42:000047                     +47 
42:000048                     +47 
42:000049                     +47 
42:00004A                     +47 
42:00004B                     +47 
42:00004C                     +47 
42:00004D                     +47 
42:00004E                     +47 
42:00004F                     +47 
42:000050                     +47 
42:000051                     +47 
42:000052                     +47 
42:000053                     +47 
42:000054                     +47 
42:000055                     +47 
42:000056                     +47 
42:000057                     +47 
42:000058                     +47 
42:000059                     +47 
42:00005A                     +47 
42:00005B                     +47 
42:00005C                     +47 
42:00005D                     +47 
42:00005E                     +47 
42:00005F                     +47 
42:000060                     +47 
42:000061                     +47 
42:000062                     +47 
42:000063                     +47 
42:000064                     +47 
42:000065                     +47 
42:000066                     +47 
42:000067                     +47 
42:000068                     +47 
42:000069                     +47 
42:00006A                     +47 
42:00006B                     +47 
42:00006C                     +47 
42:00006D                     +47 
42:00006E                     +47 
42:00006F                     +47 
42:000070                     +47 
42:000071                     +47 
42:000072                     +47 
42:000073                     +47 
42:000074                     +47 
42:000075                     +47 
42:000076                     +47 
42:000077                     +47 
42:000078                     +47 
42:000079                     +47 
42:00007A                     +47 
42:00007B                     +47 
42:00007C                     +47 
42:00007D                     +47 
42:00007E                     +47 
42:00007F                     +47 
42:000080                     +47 
42:000081                     +47 
42:000082                     +47 
42:000083                     +47 
42:000084                     +47 
42:000085                     +47 
42:000086                     +47 
42:000087                     +47 
42:000088                     +47 
42:000089                     +47 
42:00008A                     +47 
42:00008B                     +47 
42:00008C                     +47 
42:00008D                     +47 
42:00008E                     +47 
42:00008F                     +47 
42:000090                     +47 
42:000091                     +47 
42:000092                     +47 
42:000093                     +47 
42:000094                     +47 
42:000095                     +47 
42:000096                     +47 
42:000097                     +47 
42:000098                     +47 
42:000099                     +47 
42:00009A                     +47 
42:00009B                     +47 
42:00009C                     +47 
42:00009D                     +47 
42:00009E                     +47 
42:00009F                     +47 
42:0000A0                     +47 
42:0000A1                     +47 
42:0000A2                     +47 
42:0000A3                     +47 
42:0000A4                     +47 
42:0000A5                     +47 
42:0000A6                     +47 
42:0000A7                     +47 
42:0000A8                     +47 
42:0000A9                     +47 
42:0000AA                     +47 
42:0000AB                     +47 
42:0000AC                     +47 
42:0000AD                     +47 
42:0000AE                     +47 
42:0000AF                     +47 
42:0000B0                     +47 
42:0000B1                     +47 
42:0000B2                     +47 
42:0000B3                     +47 
42:0000B4                     +47 
42:0000B5                     +47 
42:0000B6                     +47 
42:0000B7                     +47 
42:0000B8                     +47 
42:0000B9                     +47 
42:0000BA                     +47 
42:0000BB                     +47 
42:0000BC                     +47 
42:0000BD                     +47 
42:0000BE                     +47 
42:0000BF                     +47 
42:0000C0                     +47 
42:0000C1                     +47 
42:0000C2                     +47 
42:0000C3                     +47 
42:0000C4                     +47 
42:0000C5                     +47 
42:0000C6                     +47 
42:0000C7                     +47 
42:0000C8                     +47 
42:0000C9                     +47 
42:0000CA                     +47 
42:0000CB                     +47 
42:0000CC                     +47 
42:0000CD                     +47 
42:0000CE                     +47 
42:0000CF                     +47 
42:0000D0                     +47 
42:0000D1                     +47 
42:0000D2                     +47 
42:0000D3                     +47 
42:0000D4                     +47 
42:0000D5                     +47 
42:0000D6                     +47 
42:0000D7                     +47 
42:0000D8                     +47 
42:0000D9                     +47 
42:0000DA                     +47 
42:0000DB                     +47 
42:0000DC                     +47 
42:0000DD                     +47 
42:0000DE                     +47 
42:0000DF                     +47 
42:0000E0                     +47 
42:0000E1                     +47 
42:0000E2                     +47 
42:0000E3                     +47 
42:0000E4                     +47 
42:0000E5                     +47 
42:0000E6                     +47 
42:0000E7                     +47 
42:0000E8                     +47 
42:0000E9                     +47 
42:0000EA                     +47 
42:0000EB                     +47 
42:0000EC                     +47 
42:0000ED                     +47 
42:0000EE                     +47 
42:0000EF                     +47 
42:0000F0                     +47 
42:0000F1                     +47 
42:0000F2                     +47 
42:0000F3                     +47 
42:0000F4                     +47 
42:0000F5                     +47 
42:0000F6                     +47 
42:0000F7                     +47 
42:0000F8                     +47 
42:0000F9                     +47 
42:0000FA                     +47 
42:0000FB                     +47 
42:0000FC                     +47 
42:0000FD                     +47 
42:0000FE                     +47 
42:0000FF                     +47 
42:000100                     +47 
42:000101                     +47 
42:000102                     +47 
  :                            48 
  :                            49 $(66::, x)
  :                            50 nframe  	netframe
  :                            51 
  :                            52 $(66::, x)
42:000000                     +53 ro		route
42:000001                     +53 
42:000002                     +53 
42:000003                     +53 
42:000005                     +53 
42:000007                     +53 
42:000009                     +53 
  :                            54 
  :                            55 $(66::, x)
42:000000                     +56 transmission	tcp_connection
42:000001                     +56 
42:000002                     +56 
42:000003                     +56 
42:000004                     +56 
42:000005                     +56 
42:000006                     +56 
42:000008                     +56 
42:00000A                     +56 
42:00000C                     +56 
42:00000E                     +56 
42:000010                     +56 
42:000011                     +56 
42:000012                     +56 
42:000013                     +56 
42:000014                     +56 
42:000015                     +56 
42:000016                     +56 
42:000017                     +56 
  :                            57 
  :                            58 $(66::, x)	
42:000000                     +59 transfer	segment
42:000001                     +59 
42:000002                     +59 
42:000004                     +59 
42:000006                     +59 
42:000007                     +59 
42:000008                     +59 
42:000009                     +59 
42:00000A                     +59 
  :                            60 
  :                            61 $(66::, x)
42:000000                     +62 tlist		tbank
42:000001                     +62 
42:000002                     +62 
42:000003                     +62 
42:000004                     +62 
42:000005                     +62 
42:000006                     +62 
42:000007                     +62 
42:000008                     +62 
42:000009                     +62 
42:00000A                     +62 
42:00000B                     +62 
42:00000C                     +62 
42:00000D                     +62 
42:00000E                     +62 
42:00000F                     +62 
42:000010                     +62 
42:000011                     +62 
42:000012                     +62 
42:000013                     +62 
42:000014                     +62 
42:000015                     +62 
42:000016                     +62 
42:000017                     +62 
42:000018                     +62 
42:000019                     +62 
42:00001A                     +62 
42:00001B                     +62 
42:00001C                     +62 
42:00001D                     +62 
42:00001E                     +62 
42:00001F                     +62 
42:000020                     +62 
42:000021                     +62 
42:000022                     +62 
42:000023                     +62 
42:000024                     +62 
42:000025                     +62 
42:000026                     +62 
42:000027                     +62 
42:000028                     +62 
42:000029                     +62 
42:00002A                     +62 
42:00002B                     +62 
42:00002C                     +62 
42:00002D                     +62 
42:00002E                     +62 
42:000030                     +62 
42:000032                     +62 
42:000034                     +62 
42:000036                     +62 
42:000038                     +62 
42:000039                     +62 
42:00003A                     +62 
42:00003B                     +62 
42:00003C                     +62 
42:00003D                     +62 
42:00003E                     +62 
42:00003F                     +62 
42:000040                     +62 
42:000041                     +62 
42:000042                     +62 
42:000043                     +62 
42:000044                     +62 
42:000045                     +62 
42:000046                     +62 
42:000048                     +62 
42:00004A                     +62 
42:00004C                     +62 
42:00004E                     +62 
42:000050                     +62 
42:000051                     +62 
42:000052                     +62 
42:000053                     +62 
42:000054                     +62 
42:000055                     +62 
42:000056                     +62 
42:000057                     +62 
  :                            63 
  :                            64 $(0::DRIVERS_BANK1)
  :                            65 
00:004000 B60040              +66 "$rxtx_lo"*	$vector		rxtx_softwareloopback
00:004001 B6005B              +67 "$rxtx_ift1"*	$vector		ift1_rxtx
00:004002 B600D5              +68 "$initial_ift1"* $vector	start_ift1
00:004003 B600A7              +69 "$light_flight"* $vector	mplex_tx
  :                            70 . "$qo2_relay"*	$vector		output_relay
00:004004 B601B9              +71 if_dualport_txwrite* $vector    if_dportw
00:004005 B6019C              +72 dlt_null*       $vector         ifw_dlt_null
00:004006 B601A5              +73 dlt_loop*       $vector         ifw_dlt_loop
00:004007 B601AE              +74 dlt_e10mb*      $vector         ifw_dlt_e10mb
00:004008 B601CE              +75 __ifconfig*	$vector		ifconfig
  :                            76 
00:004009 B60386              +77 arp_ether_reso* $vector         ethernet_arp:resolve
00:00400A B603BE              +78 arp_ether_xmit* $vector         ethernet_arp:xmit
00:00400B B6034F              +79 xarp_ethernet*  $vector         ethernet_arp:xarp
00:00400C B6036D              +80 arp_ether_rx*   $vector         ethernet_arp:arp_rx
  :                            81 
00:00400D B600DB              +82 xrelay_reset*	$vector		restart_xrelay_interface
00:00400E B60262              +83 __route_config*	$vector		route_insert
  :                            84 
00:00400F B602E1              +85 write_ifqlist*	$vector		q2txL_tail
  :                            86 . "$ift1_inband"*	$vector		write_ift1_direct
00:004010 B60298              +87 write_ifq*	$vector		q2if
  :                            88 
00:004011 B60105              +89 __initial_ift2*	$vector		__ift2:initial
00:004012 B6012D              +90 __rxtx_ift2*	$vector		__ift2:rxtx
00:004013 B6011C              +91 __ift2_align*	$vector		__ift2:restart_cursors
00:004014 B60117              +92 __ift2_mirror*	$vector		__ift2:swap_initial
  :                            93 
00:004015 B60301              +94 __buy6_bytes*	$vector		soc_data:buy6
00:004016 B6030A              +95 __buy12_bytes*	$vector		soc_data:buy12
00:004017 B602CA              +96 write_ifqlist_head*	$vector	q2txL_head
00:004018 B60327              +97 __recheck*	$vector		recheck
  :                            98 
00:004019 B60345              +99 tx_mib_update*	$vector		mib_scope_update:variable48
  :                            100 
  :                            101 .	frame handling at interface
  :                            102 
00:00401A 3D0000              +103 	$do	48-$,	fret	0
00:00401B 3D0000              +103 
00:00401C 3D0000              +103 
00:00401D 3D0000              +103 
00:00401E 3D0000              +103 
00:00401F 3D0000              +103 
00:004020 3D0000              +103 
00:004021 3D0000              +103 
00:004022 3D0000              +103 
00:004023 3D0000              +103 
00:004024 3D0000              +103 
00:004025 3D0000              +103 
00:004026 3D0000              +103 
00:004027 3D0000              +103 
00:004028 3D0000              +103 
00:004029 3D0000              +103 
00:00402A 3D0000              +103 
00:00402B 3D0000              +103 
00:00402C 3D0000              +103 
00:00402D 3D0000              +103 
00:00402E 3D0000              +103 
00:00402F 3D0000              +103 
  :                            104 
  :                            105 .	protocol stack extras
  :                            106 
  :                            107 	$if	HVSOCKET
00:004030 B60484              +108 hvsocket_storage* $vector       hvsocket:storage
00:004031 B6046A              +109 hvsockets_bind* $vector         hvsocket:bind
00:004032 B604D6              +110 hvsocket_rx*	$vector		hvsocket:rx
00:004033 B604F5              +111 hvsocket_tx*	$vector		hvsocket:tx
00:004034 B60534              +112 hvsocket_readq*	$vector		hvsocket:readq
00:004035 B60541              +113 connection_array* $vector	hvsocket:locate
00:004036 B6054B              +114 hvsocket_xbind*	$vector		hvsocket:xbind
00:004037 B6050A              +115 hvsocket_close*	$vector		hvsocket:close
00:004038 B60565              +116 hvsocket_write_rxq* $vector	hvsocket:write_rxq
00:004039 B60580              +117 tcp_window*	$vector		window
  :                            118 	$endif
  :                            119 
  :                            120 
00:00403A B60591              +121 tnet_callstring*	$vector	net_callstring
  :                            122 
00:00403B 3D0000              +123 	$do	64-$,	fret	0
00:00403C 3D0000              +123 
00:00403D 3D0000              +123 
00:00403E 3D0000              +123 
00:00403F 3D0000              +123 
  :                            124 
  :                            125 	$list		2
  :                            126: 	$include	irelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 .	the protocols allowed in here are only IPv4 and IPv6
  :                            41 .	the discriminator is the 4-bit version at the
  :                            42 .	start of the datagram
  :                            43 
  :                            44 .	until it's decided to have ip6 we'll just assume
  :                            45 .	software loopback output is ip4
  :                            46 
  :                            47 
  :                            48 rxtx_softwareloopback
00:004040 3D0000              +49 	fret	0
  :                            50 
  :                            51 			. x -> interface
  :                            52 
00:004041 60A031              +53 	la	this_if:oq:head
00:004042 C6005A              +54 	jza	rxxx_software_loopback
  :                            55 
00:004043 58C001              +56 	ly	descriptor:frame, a
  :                            57 	
00:004044 6CB00D              +58 	lb, i	nframe:stack_index, y
00:004045 60B006              +59 	la	nframe:llh:generic:protocol, y
00:004046 C8D000              +60 	ab	0, b
  :                            61 
00:004047 58D001              +62 	ly	1, b
00:004048 40D000              +63 	lr	0, b	
  :                            64 
00:004049 F80002              +65 	push	x
00:00404A FF059A              +66 	call	(frame_to_protocol)
00:00404B 380002              +67 	pop	x
  :                            68 
00:00404C 3E02AE              +69 	lcal	readifq
  :                            70 
00:00404D F8000B              +71         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
00:00404E 2FA00F              +71 
00:00404F 5E0051              +71 
00:004050 17A00E              +71 
00:004051 FD0001              +72         MIB_ICOUNT48    this_if:outpackets
00:004052 2FA013              +72 
00:004053 5E0055              +72 
00:004054 17A012              +72 
  :                            73 	
00:004055 78C003              +74 	tp	descriptor:bytes, a
00:004056 B60040              +75 	j	rxtx_softwareloopback
  :                            76 
00:004057 502180              +77 	lx	rx_buffers
00:004058 FF059B              +78 	call	(if_sell1)		. this is just until something wants
  :                            79 					. to read the datagram
  :                            80 
  :                            81 					. The sender must take TCP segments
  :                            82 					. off the ACK queue when they are ACKED
  :                            83 					. but leave the receiver to pool them
  :                            84 
  :                            85 					. UDPgrams simply pooled by the receiver
  :                            86 					. after consume
  :                            87 
  :                            88 					. might as well turn the retain bit off
  :                            89 					. at this point so it won't confuse TCP
  :                            90 					. receive. And to signal the sender not
  :                            91 					. to pool the buffer on ACK, just to
  :                            92 					. unlink it from the ACK queue
  :                            93 
00:004059 B60040              +94 	j	rxtx_softwareloopback
  :                            95 
  :                            96 rxxx_software_loopback
00:00405A 3D0000              +97 	fret	0
  :                            98 
  :                            127: 	$include	xrelay
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 IFT1_RX_BASE	$equ	32
  :                            41 IFT1_TX_BASE	$equ	32
  :                            42 
  :                            43 IFT1_RPAGEW	$equ	1024
  :                            44 IFT1_TPAGEW	$equ	1024
  :                            45 
  :                            46 IFT1_RPAGES	$equ	128
  :                            47 IFT1_TPAGES	$equ	128
  :                            48 
  :                            49 
  :                            50 $(67::, y)
  :                            51 networkframe	delivery
  :                            52 
  :                            53 
  :                            54 $(0)
  :                            55 
  :                            56 ift1_rxtx
00:00405B 60A044              +57 	la	this_if:ift1:base_rx
00:00405C 750060              +58 	ii	XBASE$32
00:00405D 58A045              +59 	ly	this_if:ift1:rx_cursor
  :                            60 	
00:00405E CFB000              +61 frames?	dl	networkframe:flag	. 2nd word in B is total frame length
  :                            62 				. this may include the length of
  :                            63 				. a 2-byte protocol family tag
  :                            64 				. appended to the front of a dgram
  :                            65 				. which has no MAC header
  :                            66 
00:00405F A0059C              +67 	and	(008000)
  :                            68 
00:004060 C60082              +69 	jza	next_interface	. capture not complete
  :                            70 
00:004061 60B002              +71 	la	networkframe:ll_hl	. link layer header length
  :                            72 
00:004062 F80005              +73 	MIB_ACOUNT48	this_if:inoctets	b
00:004063 2FA00D              +73 
00:004064 5E0066              +73 
00:004065 17A00C              +73 
00:004066 FD0001              +74 	MIB_ICOUNT48	this_if:inpackets
00:004067 2FA011              +74 
00:004068 5E006A              +74 
00:004069 17A010              +74 
  :                            75 
00:00406A 18000E              +76 	sy	fp
00:00406B 5CB005              +77 	ly	networkframe:frame,,i	. offset descriptor->frame
  :                            78 
00:00406C D80004              +79 	anb	a		. net datagram length
00:00406D 5E007B              +80 	jnc	frame_complete	. less than llh length!
00:00406E 400005              +81 	lr	b		. datagram length bytes
  :                            82 
  :                            83 				. the protocol family tag
  :                            84 				. is mostly the word
  :                            85 				. before the datagram
  :                            86 
  :                            87 				. either because there is
  :                            88 				. a DIX MAC header, or
  :                            89 				. a similar encapsulation
00:00406F 64C001              +90 	la	1,a,i		. round up
00:004070 060001              +91 	sar	1		. byte count to word count
  :                            92 				. only two bytes per word
  :                            93 				. in packet data
  :                            94 
  :                            95 				. MAC header / TAG must
  :                            96 				. be even # bytes
  :                            97 
00:004071 880004              +98 	ay	a
  :                            99 
00:004072 60E004              +100 	la	networkframe:protocol, fp		. load the protocol TAG
  :                            101 
  :                            102 
00:004073 F8000E              +103 	push	fp
00:004074 F80002              +104 	push	x
  :                            105 
00:004075 50E003              +106 	lx	networkframe:interface, fp	. whatever sort of frame this is
[+0002]10
00:004076 850000              +107 	ax	$if2p,,xi
00:004077 50A000              +108 	lx	0, x			. it goes to this logical interface
  :                            109 
00:004078 FF059A              +110 	call	(frame_to_protocol)
  :                            111 
00:004079 380002              +112 	dpop	x
00:00407A 380003              +112 
  :                            113 
  :                            114 frame_complete
00:00407B 30B000              +115 	z	networkframe:flag
00:00407C 8D0400              +116 	ay, xi	RPAGEW
00:00407D 600003              +117 	la	y
  :                            118 
  :                            119 
  :                            120 	$if	RPAGEW*RPAGES>262144
  :                            121 
  :                            122 	ana	(RX_BASE+1*/18:s)
  :                            123 	jnc	frames?
  :                            124 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            125 
  :                            126 	la	base_rx
  :                            127 	aa, xi	64
  :                            128 
  :                            129 	lk	(03FFFC0)
  :                            130 	mta	(RPAGEW*RPAGES/*18-6:s)
  :                            131 	j	$+2
  :                            132 	and	(0C0003F)
  :                            133 	sa	base_rx
  :                            134 	sabr	RX_BASE
  :                            135 	
  :                            136 	$else
  :                            137 
00:00407E D0059D              +138 	ana	(RX_BASE*/18++RPAGEW*RPAGES:s)
00:00407F 5E005E              +139 	jnc	frames?
00:004080 58059E              +140 	ly	(RX_BASE*/18++RPAGEW*0:s)
  :                            141 
  :                            142 	$endif
  :                            143 
00:004081 B6005E              +144 	j	frames?
  :                            145 	
  :                            146 next_interface
00:004082 18A045              +147 	sy	this_if:ift1:rx_cursor
  :                            148 
  :                            149 
  :                            150 txq_ift1_relay
00:004083 CFA046              +151 	dl	this_if:ift1:base_tx, x
00:004084 750060              +152 	ii	XBASE$32
00:004085 60A004              +153 	la	this_if:mtu, x
00:004086 200011              +154 	sa	MTU
  :                            155 
00:004087 28000E              +156 	sb	fp
  :                            157 
  :                            158 txq_ift1_otraffic?		
00:004088 70E000              +159 	tz	networkframe:flag, fp	. interface buffer available
00:004089 B600A6              +160 	j	txq_next_interface	. not yet, next device array
  :                            161 
  :                            162 
00:00408A 3E02AE              +163 	lcal	readifq			. frames in this queue are in
00:00408B C60097              +164 	jza	txq_next_queue		. default socket buffer pool
00:00408C F80004              +165 	push	a			. completely detach descriptor from queue before
  :                            166 					. dualport_write clears frame-gather microstac
00:00408D 3E00A8              +167 	lcal	txq_ift1_oframe
00:00408E 3E00C5              +168 	lcal	txq_ift1_next_frame
  :                            169 
00:00408F 380004              +170 	pop	a			. recover descriptor
  :                            171 
00:004090 78C003              +172 	tp	descriptor:bytes, a
00:004091 B60088              +173 	j	txq_ift1_otraffic?
  :                            174 
00:004092 F80002              +175 	push	x
00:004093 502181              +176 	lx	tx_buffers
00:004094 FF059B              +177 	call	(if_sell1)
00:004095 380002              +178 	pop	x
  :                            179 
00:004096 B60088              +180 	j	txq_ift1_otraffic?
  :                            181 
  :                            182 txq_next_queue
  :                            183 
  :                            184 	$if	HVSOCKET
  :                            185 
  :                            186 	$if	1
00:004097 3E02BA              +187 	lcal	rqtxL
00:004098 C600A6              +188 	jza	txq_next_interface
00:004099 F80004              +189 	push	a
00:00409A 3E00A8              +190 	lcal	txq_ift1_oframe
00:00409B 3E00C5              +191 	lcal	txq_ift1_next_frame
00:00409C 380004              +192 	pop	a
00:00409D 78C003              +193 	tp	descriptor:bytes, a	. protocol wants to keep buffer?
00:00409E B600A3              +194 	j	txq_next_if_space?	. yes
00:00409F F80002              +195 	push	x
00:0040A0 50859F              +196 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:0040A1 FF059B              +197 	call	(if_sell1)
00:0040A2 380002              +198 	pop	x
  :                            199 
  :                            200 txq_next_if_space?
00:0040A3 70E000              +201 	tz	networkframe:flag, fp
00:0040A4 B600A6              +202 	j	txq_next_interface
00:0040A5 B60097              +203 	j	txq_next_queue
  :                            204 
  :                            205 	$else
  :                            206 
  :                            207 	la	this_if:portP		. large connections table output chain head
  :                            208 	jza	txq_next_interface
  :                            209 
  :                            210 txq_block
  :                            211 	sabr	BSOCKET
  :                            212 	ly	(BSOCKET*/12++tlist:connection_block(1)+transmission:q4ack)
  :                            213 
  :                            214 txq_next_frame?
  :                            215 	la	xmit_list.head
  :                            216 	jza	txq_no_waiting_frames
  :                            217 
  :                            218 	lb	descriptor:ifql, a	. completely separated from queue before
  :                            219 	sb	xmit_list.head		. dualport_write clears frame-gather microstac
  :                            220 
  :                            221 	dpush	y			. [ y : a ]
  :                            222 	lcal	txq_ift1_oframe		. 1st time thru there is an I/F trunk buffer
  :                            223 	lcal	txq_ift1_next_frame
  :                            224 	dpop	y			. [ y . a ]
  :                            225 
  :                            226 	tp	descriptor:bytes, a	. TCP only so far
  :                            227 	j	txq_ift1_next_frame_slot?
  :                            228 
  :                            229 	dpush	x			. but let's plan ahead
  :                            230 	lx	*(BSOCKET*/12++tlist:txbu_p)
  :                            231 	call	(if_sell1)
  :                            232 	dpop	x
  :                            233 
  :                            234 txq_ift1_next_frame_slot?
  :                            235 	tz	networkframe:flag, fp
  :                            236 	j	txq_next_interface
  :                            237 
  :                            238 	j	txq_next_frame?
  :                            239 
  :                            240 txq_no_waiting_frames
  :                            241 	la	*(BSOCKET*/12++tlist:txchain)	. next connections buffer
  :                            242 	z	*(BSOCKET*/12++tlist:txchain)	. out of chain
  :                            243 	sa	this_if:portP			. next = new chain head
  :                            244 	jnza	txq_block			. if there is any
  :                            245 	z	this_if:portQ			. there is no last because that is
  :                            246 	$endif					. a test of being already in the chain
  :                            247 	$endif
  :                            248 txq_next_interface
  :                            249 
00:0040A6 3D0000              +250 	fret	0
  :                            251 
  :                            252 mplex_tx				. just in case
00:0040A7 3D0000              +253 	fret	0			. a call is made by mistake
  :                            254 
  :                            255 
  :                            256 txq_ift1_oframe
  :                            257 	$if	0
  :                            258 	push	x			. save interface pointer a moment
  :                            259 	lx, i	networkframe:frame, fp	. point x to frame buffer after control header
  :                            260 	$endif
  :                            261 				
00:0040A8 68C002              +262 	lb	descriptor:i_f, a	. translate RTA  interface number to osserv interface number
  :                            263 
00:0040A9 CDFFFE              +264 	ab	-2,,xi			. xlate RTA1 i_f:id to trunk i_f:i_d in frame descriptor
00:0040AA AE00AE              +265 	jpb	txq_ift1_oframe_ahead	. ift2 sometimes loses this id. mark it for repeat route / send
  :                            266 	$do	0,	ii	GUARD$
00:0040AB 68C001              +267 	lb	descriptor:frame, a	. mark it transmitted
00:0040AC 30D00D              +268 	z	nframe:stack_index, b	. so it may be retransmitted
00:0040AD 350001              +269 	lret	1			. skip call to update interface buffer pointer
  :                            270 
  :                            271 txq_ift1_oframe_ahead 
00:0040AE 28E003              +272 	sb	networkframe:interface, fp
  :                            273 
00:0040AF 60C001              +274 	la	descriptor:frame, a	. transfer protocol tag to interface buffer header
  :                            275 
00:0040B0 F8C007              +276 	push	nframe:frame_axw(1):bytes, a
00:0040B1 38E002              +277 	pop	networkframe:ll_hl, fp
  :                            278 
00:0040B2 F8C006              +279 	push	nframe:llh:generic:protocol, a
00:0040B3 38E004              +280 	pop	networkframe:protocol, fp	. leaving frame pointer in a
  :                            281 
00:0040B4 F80002              +282 	push	x				. save interface pointer
00:0040B5 54E005              +283 	lx	networkframe:frame, fp, i	. write pointer in interface slot
00:0040B6 FF05A0              +284 	call	(if_dualport_txwrite)
00:0040B7 380002              +285 	pop	x				. retrieve  interface pointer
  :                            286 
  :                            287 	$if	0
  :                            288 	lb	networkframe:protocol, fp
  :                            289 	ab	-0800,,xi
  :                            290 	jnzb	not_ip
  :                            291 
  :                            292         push    networkframe:frame, fp, i
  :                            293         push    this_if:llhl
  :                            294         off     carry$
  :                            295         src     0, sp
  :                            296         popA    1, sp
  :                            297 
  :                            298 	c	(__recheck)	0, sp
  :                            299 	inc	sp
  :                            300 not_ip
  :                            301 
  :                            302 	$endif
  :                            303 
00:0040B8 F8000B              +304 	push	TX_DATAGRAML		. release interface buffer for transmission
00:0040B9 38E001              +305 	pop	networkframe:frame_length, fp
00:0040BA F8059C              +306 	push	(008000)
00:0040BB 38E000              +307 	pop	networkframe:flag, fp
  :                            308 
00:0040BC F8000B              +309         MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
00:0040BD 2FA00F              +309 
00:0040BE 5E00C0              +309 
00:0040BF 17A00E              +309 
00:0040C0 FD0001              +310         MIB_ICOUNT48    this_if:outpackets
00:0040C1 2FA013              +310 
00:0040C2 5E00C4              +310 
00:0040C3 17A012              +310 
  :                            311 
  :                            312 txq_ift1_2x
00:0040C4 350000              +313 	lret	0
  :                            314 
  :                            315 	$if	0
  :                            316 txq_oframe_bypass
  :                            317 	pop	x			. inelegant but safe. ift2 frame has lost target i_f id
  :                            318 	z	nframe:stack_index, a	. clear xmit staclet = qualify it for repeat route + retransmit if tcp
  :                            319 					. calling routine already decoupled it from I / F queue
  :                            320 					. note it is no use copying i_f:id from interface structure
  :                            321 					. in ift1 that is always logical interface 2
  :                            322 					. multiplexing all attached physical interfaces. For emulated RTA1
  :                            323 					. copying i_f(2) identity indicates platform loopback to the trunk
  :                            324 	$do	0,	ii	GUARD$	. change the 0 to 1 to get a diagnostic halt
  :                            325 	push	-1,,xi
  :                            326 	popA	this_if:outdrops+1	. log it to i_f(2) because interface identity is the problem
  :                            327 	jnc	$+2			. unless this->i_f is pointing to the logical ift2 interface
  :                            328 	inc	this_if:outdrops	. where this frame is intended, which is even better
  :                            329 	lret	0
  :                            330 	$endif
  :                            331 
  :                            332 txq_ift1_next_frame
00:0040C5 6D0400              +333 	lb, xi	IFT1_TPAGEW
00:0040C6 C8000E              +334 	ab	fp
00:0040C7 A805A1              +335 	andB	(IFT1_TPAGES*IFT1_TPAGEW-IFT1_TPAGEW:s)
00:0040C8 98059D              +336 	orB	(IFT1_TX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
  :                            337 	
00:0040C9 28000E              +338 	sb	fp
00:0040CA 28A047              +339 	sb	this_if:ift1:tx_cursor, x
00:0040CB 350000              +340 	lret	0
  :                            341 
  :                            342 rxq_ift1_next_frame
00:0040CC 5D0400              +343 	ly, xi	IFT1_RPAGEW
00:0040CD 88000E              +344 	ay	fp
00:0040CE 680003              +345 	lb	y
00:0040CF D8059D              +346 	anb	(IFT1_RX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
00:0040D0 5E00D2              +347 	jnc	$+2
00:0040D1 58059E              +348 	ly	(IFT1_RX_BASE*/18:s)
00:0040D2 18000E              +349 	sy	fp
00:0040D3 18A045              +350 	sy	this_if:ift1:rx_cursor, x
00:0040D4 350000              +351 	lret	0
  :                            352 
  :                            353 start_ift1
00:0040D5 20A001              +354 	sa	this_if:flags
00:0040D6 6805A2              +355 	lb	(0400000)
00:0040D7 980003              +356 	orB	y
00:0040D8 28A044              +357 	sb	this_if:ift1:base_rx
00:0040D9 28A046              +358 	sb	this_if:ift1:base_tx
00:0040DA 3D0000              +359 	fret	0
  :                            360 
  :                            361 .	called only on system restart
  :                            362 .	so no settings are saved
  :                            363 .	requests external interface service to restart
  :                            364 .	to match automatic resynchronisation at this end
  :                            365 
  :                            366 .	it's the only time a CONFIGURATION_PROTOCOL frame is output
  :                            367 .	so it doesn't need much detail
  :                            368 
  :                            369 p	$proc
  :                            370 restart_frame* $name
  :                            371 	qs	1, x
  :                            372 	sk	0, x
  :                            373 	ax	0400,,xi
  :                            374 	$end
  :                            375 
  :                            376 restart_xrelay_interface
00:0040DB 040042              +377 	inA	66				. kernel vector list
00:0040DC C600F7              +378 	jza	restart_emergency		. system is not configured
00:0040DD E600F7              +379 	jna	restart_emergency		. or has got deconfigured
  :                            380 
  :                            381 restart_from_configuration			. system appears to be configured
  :                            382 						. soft restart attempt
00:0040DE 052000              +383 	on	see$2				. IP vector list
00:0040DF 602073              +384 	la	VECTOR_B1(1)			. IP B1 1st frame
00:0040E0 140001              +385 	outA	1
00:0040E1 0D4000              +386 	off	see$1				. make sure 1 and not 65
00:0040E2 501002              +387 	lx	01002				. ifxpointer(2)
  :                            388 
00:0040E3 CFA046              +389 	dl	this_if:ift1:base_tx, x		. pick up the network trunk position
  :                            390 						. and send restart requests from there
  :                            391 restart_xrelay
00:0040E4 D600E6              +392 	jnza	restart_base_configured
00:0040E5 6005A3              +393 	la	(0400002)			. must be before interface configuration
  :                            394 
  :                            395 restart_base_configured
00:0040E6 340020              +396 	sabr	32				. this is already interrupt code
00:0040E7 500085              +397 	lx	b_x				. interrupt code, remember?
  :                            398 
00:0040E8 4F05A4              +399 	ql	(0, 0, 0, IFCONFIG:q)
00:0040E9 48059C              +400 	lk	(008000)
  :                            401 
00:0040EA 450005              +402 	lr	5,,xi
00:0040EB 000088              +403 	sr	8+128				. scratch register counter
00:0040EC 4005A8              +404 	lr	(33*/18s)
00:0040ED B600EF              +405 	j	restart_frame_xmit
  :                            406 
  :                            407 restart_bank
00:0040EE 50059D              +408 	lx	(32*/18++131072s)
  :                            409 restart_frame_xmit
00:0040EF F600EE              +410 	jxge	restart_bank
00:0040F0 47A001              +411 	restart_frame
00:0040F1 08A000              +411 
00:0040F2 850400              +411 
  :                            412 	
00:0040F3 1F0088              +413 	dec	8+128
00:0040F4 700088              +414 	tz	8+128
00:0040F5 B600EF              +415 	j	restart_frame_xmit
  :                            416 	
00:0040F6 3D0000              +417 	fret	0
  :                            418 
  :                            419 
  :                            420 restart_emergency				. trouble before initialisation
00:0040F7 6005A3              +421 	la	(0400002)			. but we know really anyway
00:0040F8 340020              +422 	sabr	32
00:0040F9 50059D              +423 	lx	(32*/18++131072s)
00:0040FA 4F05A4              +424 	ql	(0, 0, 0, IFCONFIG:q)
00:0040FB 48059C              +425 	lk	(008000)
  :                            426 
00:0040FC 450004              +427 	lr	5-1,,xi
  :                            428 
  :                            429 restart_base_frame				. pump out some reconfigure frames
00:0040FD 47A001              +430 	restart_frame				. at the start location of network trunk
00:0040FE 08A000              +430 
00:0040FF 850400              +430 
00:004100 1E00FD              +431 	jdr	restart_base_frame
  :                            432 
  :                            433 .	having done that it's likely the startup fault will fault again on restart
  :                            434 .	so try to pull an intervention interface up in single step (LOCKSTEP)
  :                            435 
  :                            436 .	if that isn't featured do a 5-second processor sleep
  :                            437 
00:004101 CF05A9              +438 	dl	(CHILLDOWN++LOCKSTEP, 5000000d)
00:004102 1C0067              +439 	outB	chill$down
00:004103 140066              +440 	outA	INDICATION$
  :                            441 
00:004104 3D0000              +442 	fret	0
  :                            443 
  :                            128: 	$include	ift2
  :                            1 .	vector name __initial_ift2
  :                            2 
  :                            3 __ift2	$tree
  :                            4 
00:004105 20A001              +5 initial	sa	this_if:flags
00:004106 64C001              +6 	la	1, a, i			. change high index 256K block
00:004107 260006              +7 	sal	6			.  -> I / F buffer page limit
00:004108 900003              +8 	or	y			. add device index
00:004109 9005A2              +9 	or	(0400000)
00:00410A 20A043              +10 	sa	this_if:ift1:tx_limit	. switch the interface on
  :                            11 					. this is also page high index
  :                            12 					. TX side
  :                            13 
00:00410B 68059E              +14 	lb	(32*/18s)
  :                            15 
00:00410C 060001              +16 	sar	1			. halve banks #
00:00410D A005AB              +17 	and	(01FFFC0)					
00:00410E 900003              +18 	or	y
00:00410F 9005A2              +19 	or	(0400000)
00:004110 C7A046              +20 	ds	this_if:ift1:base_tx	. TX restart is RX limit
00:004111 20A042              +21 	sa	this_if:ift1:tx_restart
00:004112 20A041              +22 	sa	this_if:ift1:rx_limit	. TX limit is this_if:
00:004113 A005AC              +23 	and	(040003F)
00:004114 C7A044              +24 	ds	this_if:ift1:base_rx
00:004115 20A040              +25 	sa	this_if:ift1:rx_restart
  :                            26 
00:004116 3D0000              +27 	fret	0
  :                            28 
  :                            29 swap_initial				. mirror the trunk TX / RX
[+0003]10
00:004117 850000              +30 	ax	$if0p,,xi
00:004118 50A000              +31 	lx	0, x
  :                            32 
00:004119 3E0120              +33 	lcal	swap_around
00:00411A 3E0127              +34 	lcal	rewind
00:00411B 3D0000              +35 	fret	0
  :                            36 
  :                            37 restart_cursors
[+0003]10
00:00411C 850000              +38 	ax	$if0p,,xi
00:00411D 50A000              +39 	lx	0, x
  :                            40 
00:00411E 3E0127              +41 	lcal	rewind
00:00411F 3D0000              +42 	fret	0
  :                            43 
  :                            44 swap_around
00:004120 9FA040              +45 	dpush	this_if:ift1:rx_restart
00:004121 9FA042              +46 	dpush	this_if:ift1:tx_restart
00:004122 87A040              +47 	qpop	this_if:ift1:rx_restart
  :                            48 
00:004123 9FA044              +49 	dpush	this_if:ift1:base_rx
00:004124 9FA046              +50 	dpush	this_if:ift1:base_tx
00:004125 87A044              +51 	qpop	this_if:ift1:base_rx
00:004126 350000              +52 	lret	0
  :                            53 
00:004127 68059E              +54 rewind	lb	(32*/18s)
00:004128 60A040              +55 	la	this_if:ift1:rx_restart
00:004129 C7A044              +56 	ds	this_if:ift1:base_rx
00:00412A 60A042              +57 	la	this_if:ift1:tx_restart
00:00412B C7A046              +58 	ds	this_if:ift1:base_tx
00:00412C 350000              +59 	lret	0	
  :                            60 
00:00412D CFA044              +61 rxtx	dl	this_if:ift1:base_rx
00:00412E 750060              +62 	ii	XBASE$32
00:00412F 580005              +63 	ly	b
  :                            64 
  :                            65 rx_next_page
00:004130 CFB000              +66 	dl	networkframe:flag
00:004131 C6014F              +67 	jza	tx1?
  :                            68 
00:004132 F80005              +69 	MIB_ACOUNT48	this_if:inoctets	b
00:004133 2FA00D              +69 
00:004134 5E0136              +69 
00:004135 17A00C              +69 
00:004136 FD0001              +70 	MIB_ICOUNT48	this_if:inpackets
00:004137 2FA011              +70 
00:004138 5E013A              +70 
00:004139 17A010              +70 
  :                            71 
00:00413A 60B002              +72 	la	networkframe:ll_hl
  :                            73 
00:00413B 18000E              +74 	sy	fp
00:00413C 5CB005              +75 	ly	networkframe:frame,,i	. -> frame from network
00:00413D D80004              +76 	anb	a			. datagram length without link header
  :                            77 
00:00413E 5E014C              +78 	jnc	frame_complete		. frame size < link header size
00:00413F 400005              +79 	lr	b			. datagram net bytes = frame minus llh
00:004140 64C001              +80 	la	1, a, i			. advance pointer to datagram
00:004141 060001              +81 	sar	1			. add llh bytes / 2
00:004142 880004              +82 	ay	a
  :                            83 
00:004143 60E004              +84 	la	networkframe:protocol, fp
00:004144 F8000E              +85 	push	fp			. frame in interface buffer
00:004145 F80002              +86 	push	x			. trunk multiplexing interface named in call
  :                            87 	
00:004146 50E003              +88 	lx	networkframe:interface, fp	. RX interface this frame
[+0002]10
00:004147 850000              +89 	ax	$if2p,,xi
00:004148 50A000              +90 	lx	0, x
  :                            91 
00:004149 FF059A              +92 	call	(frame_to_protocol)
00:00414A 380002              +93 	pop	x			. y gets pointer from saved fp
00:00414B 38000E              +94 	pop	fp
  :                            95 frame_complete
00:00414C 30E000              +96 	z	networkframe:flag, fp
  :                            97 
00:00414D 3E0173              +98 	lcal	update_rx_cursor
  :                            99 
00:00414E B60130              +100 	j	rx_next_page
  :                            101 
00:00414F CFA046              +102 tx1?	dl	this_if:ift1:base_tx
00:004150 750060              +103 	ii	XBASE$32
00:004151 60A004              +104 	la	this_if:mtu, x
00:004152 200011              +105 	sa	MTU
00:004153 28000E              +106 	sb	fp
  :                            107 
  :                            108 tx_space1?
00:004154 70E000              +109 	tz	networkframe:flag, fp	. outgoing slot clear to write?
00:004155 B60172              +110 	j	txz
  :                            111 
  :                            112 tx_data1?
00:004156 3E02AE              +113 	lcal	readifq			. anything on default output queue?
00:004157 C60163              +114 	jza	tx_data2?		. separate descriptor from queue
00:004158 F80004              +115 	push	a			. before dualport_write clears frame-gather microstac
  :                            116 
00:004159 3E00A8              +117 	lcal	txq_ift1_oframe
00:00415A 3E0185              +118 	lcal	update_tx_cursor	
  :                            119 
00:00415B 380004              +120 	pop	a			. recover descriptor
00:00415C 78C003              +121 	tp	descriptor:bytes, a
00:00415D B60154              +122 	j	tx_space1?
  :                            123 
00:00415E F80002              +124 	push	x
00:00415F 502181              +125 	lx	tx_buffers
00:004160 FF059B              +126 	call	(if_sell1)
00:004161 380002              +127 	pop	x
  :                            128 
00:004162 B60154              +129 	j	tx_space1?
  :                            130 
  :                            131 tx_data2?
  :                            132 	$if	1
  :                            133 
00:004163 3E02BA              +134 	lcal	rqtxL
00:004164 C60172              +135 	jza	txz
00:004165 F80004              +136 	push	a
00:004166 3E00A8              +137 	lcal	txq_ift1_oframe
00:004167 3E0185              +138 	lcal	update_tx_cursor
00:004168 380004              +139 	pop	a
00:004169 78C003              +140 	tp	descriptor:bytes, a	. does protocol want to keep the buffer?
00:00416A B6016F              +141 	j	tx_space2?		. yes
  :                            142 
00:00416B F80002              +143 	push	x			. no
00:00416C 50859F              +144 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:00416D FF059B              +145 	call	(if_sell1)
00:00416E 380002              +146 	pop	x
  :                            147 
  :                            148 tx_space2?
00:00416F 70E000              +149 	tz	networkframe:flag, fp
00:004170 B60172              +150 	j	txz
  :                            151 
  :                            152 	$if	THRESHOLD_QUANTUM_MS_IFT2
  :                            153 	lcal	if2media?
  :                            154 	j	txz
  :                            155 	$endif
  :                            156 
00:004171 B60163              +157 	j	tx_data2?
  :                            158 
  :                            159 	$else
  :                            160 
  :                            161 	la	this_if:portP
  :                            162 	jza	txz
  :                            163 tx_block
  :                            164 
  :                            165 	sabr	BSOCKET
  :                            166 	ly	(BSOCKET*/12++tlist:connection_block(1):q4ack:head)
  :                            167 
  :                            168 tx_data2_on_q?
  :                            169 	la	xmit_list:head
  :                            170 	jza	tx_next_transmissions_block
  :                            171 
  :                            172 	lb	descriptor:ifql, a	. separate descriptor from queue
  :                            173 	sb	xmit_list:head		. before dualport_write clears frame_gather microstac
  :                            174 
  :                            175 	dpush	y			. [ y : a ]
  :                            176 	lcal	txq_ift1_oframe
  :                            177 	lcal	update_tx_cursor
  :                            178 	dpop	y			. [ y . a ]
  :                            179 
  :                            180 	tp	descriptor:bytes, a	. upper protocol decides when to drop
  :                            181 
  :                            182 	j	tx_space2?
  :                            183 
  :                            184 	dpush	x
  :                            185 	lx	*(BSOCKET*/12++tlist:txbu_p)
  :                            186 	call	(if_sell1)
  :                            187 	dpop	x
  :                            188 
  :                            189 
  :                            190 tx_space2?
  :                            191 	$if	0
  :                            192 	lcal	if2media?		. is it also within safe demands on volume?
  :                            193 	j	txz			. no
  :                            194 	$endif
  :                            195 
  :                            196 	tz	networkframe:flag, fp	. can you practically?
  :                            197 	j	txz			. no
  :                            198 
  :                            199 	$if	THRESHOLD_QUANTUM_MS_IFT2
  :                            200 	lcal	if2media?		. is it also within safe traffic volume?
  :                            201 	j	txz			. no
  :                            202 	$endif
  :                            203 		
  :                            204 	j	tx_data2_on_q?		. is there any to send?
  :                            205 
  :                            206 tx_next_transmissions_block
  :                            207 	
  :                            208 	la	*(BSOCKET*/12++tlist:txchain)	. chain next
  :                            209 	sa	this_if:portP			. is chain head
  :                            210 	z	*(BSOCKET*/12++tlist:txchain)	. mark out of chain
  :                            211 	jnza	tx_block
  :                            212 	z	this_if:portQ			. mark there is no last
  :                            213 
  :                            214 	$endif
  :                            215 
00:004172 3D0000              +216 txz	fret	0				. because that's used to test
  :                            217 						. if already in chain
  :                            218 update_rx_cursor
00:004173 5D0400              +219 	ly	RPAGEW,,xi
00:004174 88000E              +220 	ay	fp
00:004175 4005A8              +221 	lr	(33*/18s)
00:004176 FE017A              +222 	jyge	update_rx_page
00:004177 18000E              +223 	sy	fp
00:004178 18A045              +224 	sy	this_if:ift1:rx_cursor
00:004179 350000              +225 	lret	0
  :                            226 
  :                            227 update_rx_page
00:00417A 60A044              +228 	la	this_if:ift1:base_rx
00:00417B C50040              +229 	aa	1*/6,,xi
00:00417C 680004              +230 	anu	this_if:ift1:rx_limit	. upper limit rx pages
00:00417D D8A041              +230 
00:00417E 5E0180              +231 	jnc	update_rx_page_store
00:00417F 60A040              +232 	la	this_if:ift1:rx_restart
  :                            233 
  :                            234 update_rx_page_store
00:004180 68059E              +235 	lb	(32*/18s)
00:004181 580005              +236 	ly	b
00:004182 C7A044              +237 	ds	this_if:ift1:base_rx
00:004183 750060              +238 	ii	XBASE$32
00:004184 350000              +239 	lret	0
  :                            240 
  :                            241 update_tx_cursor
00:004185 5D0400              +242 	ly	RPAGEW,,xi
00:004186 88000E              +243 	ay	fp
00:004187 4005A8              +244 	lr	(33*/18s)
00:004188 18000E              +245 	sy	fp
00:004189 FE018C              +246 	jyge	update_tx_cursor_next_page
00:00418A 18A047              +247 	sy	this_if:ift1:tx_cursor, x
00:00418B 350000              +248 	lret	0	
  :                            249 
  :                            250 update_tx_cursor_next_page
00:00418C 60A046              +251 	la	this_if:ift1:base_tx
00:00418D C50040              +252 	aa	1*/6,,xi
00:00418E 680004              +253 	anu	this_if:ift1:tx_limit	. upper limit pages 262144 words
00:00418F D8A043              +253 
00:004190 5E0192              +254 	jnc	update_tx_cursor_store
00:004191 60A042              +255 	la	this_if:ift1:tx_restart
  :                            256 
  :                            257 update_tx_cursor_store
00:004192 68059E              +258 	lb	(32*/18s)
00:004193 C7A046              +259 	ds	this_if:ift1:base_tx
00:004194 28000E              +260 	sb	fp
00:004195 750060              +261 	ii	XBASE$32
00:004196 580005              +262 	ly	b
00:004197 350000              +263 	lret	0
  :                            264 	
  :                            265 	$root
  :                            266 
  :                            129: 	$include	lladdres
  :                            1 					. axw in fp
  :                            2 ifw_llh_space				. bytes size of link header in a
  :                            3 .	lb	TX_FRAME		. prepare the llh space / descriptor
00:004198 FDFFFA              +4 	push	-6,,xi
00:004199 38D00D              +5 	pop	nframe:stack_index, b
00:00419A C7D007              +6 	ds	nframe:frame_axw(1),b
00:00419B 350000              +7 	lret	0
  :                            8 
  :                            9 ifw_dlt_null
00:00419C F80004              +10 	push	a
00:00419D 68C001              +11 	lb	descriptor:frame, a
00:00419E 650004              +12 	la, xi	4
00:00419F 3E0198              +13 	lcal	ifw_llh_space
00:0041A0 650200              +14 	la, xi	0200
00:0041A1 20D000              +15 	sa	0, b
00:0041A2 30D001              +16 	z	1, b
00:0041A3 380004              +17 	pop	a
00:0041A4 3D0000              +18 	fret	0
  :                            19 
  :                            20 ifw_dlt_loop
00:0041A5 F80004              +21 	push	a
00:0041A6 68C001              +22 	lb	descriptor:frame, a
00:0041A7 650004              +23 	la, xi	4
00:0041A8 3E0198              +24 	lcal	ifw_llh_space
00:0041A9 650002              +25 	la, xi	2
00:0041AA 30D000              +26 	z	0, b
00:0041AB 20D001              +27 	sa	1, b
00:0041AC 380004              +28 	pop	a
00:0041AD 3D0000              +29 	fret	0
  :                            30 
  :                            31 
  :                            32 ifw_dlt_e10mb			. generic handling already has
  :                            33 				. the resolved destination at the frame start
00:0041AE F80004              +34 	push	a		. and the protocol at word 6
00:0041AF 68C001              +35 	lb	descriptor:frame, a
00:0041B0 65000E              +36 	la, xi	14
00:0041B1 3E0198              +37 	lcal	ifw_llh_space
  :                            38 
00:0041B2 F8A00A              +39 	push	this_if:physa+2
00:0041B3 9FA008              +40 	dpush	this_if:physa
00:0041B4 38D003              +41 	pop	nframe:llh:ethernet:from, b
00:0041B5 38D004              +42 	dpop	nframe:llh:ethernet:from+1, b
00:0041B6 38D005              +42 
00:0041B7 380004              +43 	pop	a
00:0041B8 3D0000              +44 	fret	0
  :                            45 
  :                            130: 	$include	dualport
  :                            1 
  :                            2 if_dportw	. vector name is if_dualport_txwrite
  :                            3 
00:0041B9 F80004              +4 	push	a
00:0041BA 30000B              +5         z       TX_DATAGRAML
00:0041BB 64C00D              +6         la, i   nframe:stack_index, a
  :                            7 
00:0041BC 68C000              +8         lb      0, a
00:0041BD C00005              +9         aa      b
  :                            10 
00:0041BE AE01CB              +11         jpb     if_osentq
  :                            12 
  :                            13 if_osendq
00:0041BF 9F0004              +14         dpush   a
00:0041C0 58C001              +15         ly      1, a
00:0041C1 60C000              +16         la      0, a
  :                            17 
00:0041C2 C601C6              +18         jza	if_oblank
00:0041C3 F80004              +19         push    a
00:0041C4 2F000B              +20         popA    TX_DATAGRAML
  :                            21 
00:0041C5 FF05AD              +22         call	(if_tx_nocheck)
  :                            23 if_oblank
00:0041C6 380004              +24         dpop     a
00:0041C7 380005              +24 
00:0041C8 C50002              +25         aa, xi  2
00:0041C9 CD0002              +26         ab, xi  2
00:0041CA EE01BF              +27         jnb     if_osendq
  :                            28 
  :                            29 if_osentq
00:0041CB 380004              +30 	pop	a
00:0041CC 30C00D              +31 	z	nframe:stack_index, a
00:0041CD 3D0000              +32 	fret	0
  :                            33 
  :                            131: 	$include	ifconfig
  :                            1 $(67::, y)
  :                            2 ifco	ifconfig_frame
  :                            3 
  :                            4 $(0)
  :                            5 ifconfig
00:0041CE 60B000              +6 	la	ifco:ifclass_llhl
00:0041CF 68B001              +7 	lb	ifco:oqif
00:0041D0 7C01D2              +8 	jdz	ixconfig
00:0041D1 3E01D7              +9 	lcal	ifconfigure
  :                            10 ixconfig
  :                            11 
  :                            12 	$if	HVSOCKET
00:0041D2 60B011              +13 	la	ifco:protocol_part:protocol
00:0041D3 B50006              +14 	xor	IPPROTO_TCP,,xi
00:0041D4 D601D6              +15 	jnza	izconfig
00:0041D5 3E0250              +16 	lcal	hvtraffic_configure
  :                            17 izconfig
  :                            18 	$endif
  :                            19 
00:0041D6 3D0000              +20 	fret	0
  :                            21 
  :                            22 ifconfigure
00:0041D7 F80002              +23 	push	x
00:0041D8 50A000              +24 	lx	this_if:id
00:0041D9 450008              +25 	lr	INTERFACES,,xi		. 2 + index must <= INTERFACES
00:0041DA F60228              +26 	jxge	ixconfigure
00:0041DB 50F000              +27 	lx	0, sp
  :                            28 
00:0041DC C60205              +29 	jza	if_setrelay		. default routine is already tabled
  :                            30 					. just set the relay destination
00:0041DD 4D00FF              +31 	lk	255,,xi
00:0041DE 160008              +32 	dsr	8
00:0041DF 0E0010              +33 	sbr	16
00:0041E0 C7A039              +34 	ds	this_if:class		. and llhl
  :                            35 
00:0041E1 AF05AE              +36 	mtane	(DLT_NULL)
00:0041E2 B601E4              +36 
00:0041E3 B601EB              +37 	j	if_dlt_null
00:0041E4 AF05AF              +38 	mtane	(DLT_LOOP)
00:0041E5 B601E7              +38 
00:0041E6 B601F0              +39 	j	if_dlt_loop
00:0041E7 AF05B0              +40 	mtane	(DLT_E10MB)
00:0041E8 B601EA              +40 
00:0041E9 B601F5              +41 	j	if_dlt_e10mb
00:0041EA B60228              +42 	j	ixconfigure
  :                            43 
  :                            44 if_dlt_null
00:0041EB 6507F0              +45 	la, xi	2048-10-4**-4
00:0041EC 20A004              +46 	sa	this_if:mtu
00:0041ED 4005B1              +47 	lr	(dlt_null)
00:0041EE 4F05B2              +48 	ql	(0:q)
00:0041EF B60202              +49 	j	if_storecall_llh
  :                            50 if_dlt_loop
00:0041F0 6507F0              +51 	la, xi	2048-10-4**-4
00:0041F1 20A004              +52 	sa	this_if:mtu
00:0041F2 4005B6              +53 	lr	(dlt_loop)
00:0041F3 4F05B2              +54 	ql	(0:q)
00:0041F4 B60202              +55 	j	if_storecall_llh
  :                            56 if_dlt_e10mb
00:0041F5 6505DC              +57         la, xi	1500
00:0041F6 20A004              +58 	sa	this_if:mtu
00:0041F7 CFB005              +59 	dl	ifco:phys_address	. store the link layer address
00:0041F8 C7A008              +60 	ds	this_if:physa		. in the interface block
00:0041F9 980004              +61 	orB	a			. is there any physical address?
00:0041FA 60B007              +62 	la	ifco:phys_address+2
00:0041FB 20A00A              +63 	sa	this_if:physa+2
00:0041FC 980004              +64 	orB	a
00:0041FD 480005              +65 	lk	b
00:0041FE 4005B7              +66 	lr	(dlt_e10mb)
  :                            67 
00:0041FF 4F05B2              +68 	ql	(0:q)			. zero address = ethernet-shaped loopback
  :                            69 					. with 0800 etype, as Linux emulator platform
00:004200 700001              +70 	tz	k			. broadcast or p2p medium = ARP or not
00:004201 4F05B8              +71 	ql	(arp_ether_rx, arp_ether_xmit, arp_ether_reso, xarp_ethernet:q)
  :                            72 if_storecall_llh
00:004202 00A03B              +73 	sr	this_if:write_llh
00:004203 47A03C              +74 	qs	this_if:arp_rx
  :                            75 
  :                            76 					. jump to ifconfigure_addresses
00:004204 68B001              +77 	lb	ifco:oqif		. if you have placed anything different
  :                            78 					. in this_if:flags or in rxtx
  :                            79 
  :                            80 if_setrelay
00:004205 CE020C              +81 	jzb	ifconfigure_addresses
00:004206 600005              +82 	anuba	INTERFACES+1,,xi
00:004207 D50009              +82 
00:004208 7E0228              +83 	jc	ixconfigure
[+0003]10
00:004209 CD0000              +84 	ab	$if0p,,xi		. i_f_pointer_array,,xi
00:00420A 68D000              +85 	lb	0, b
00:00420B 28A02E              +86 	sb	this_if:q2
  :                            87 
  :                            88 ifconfigure_addresses
00:00420C CFB002              +89 	dl	ifco:protocol_addr
00:00420D C70006              +90 	ds	6			. cache the new address
00:00420E 180008              +91 	sy	8
00:00420F 50A002              +92 	lx	this_if:address_list
00:004210 70A003              +93 	tz	ifaddr:net		. the first address tuple is present from compile time
00:004211 3E022B              +94 	lcal	ifconfigure_add_address	. and may or may not have the first address written in
00:004212 C7A003              +95 	ds	ifaddr:net
00:004213 3E0242              +96 	lcal	ifconfigure_lexically
00:004214 58F000              +97 	ly	0, sp
00:004215 60B000              +98 	la	this_if:id, y
00:004216 20A002              +99 	sa	ifaddr:i_f
00:004217 580008              +100 	ly	8
00:004218 68B004              +101 	lb	ifco:maskbits_physaoctets
  :                            102 
00:004219 3E0259              +103 	lcal	ifconfigure_log2netmask
  :                            104 
00:00421A C7A005              +105 	ds	ifaddr:mask
00:00421B B005BC              +106 	xor	(65535)			. compose directed broadcast address
00:00421C B805BC              +107 	xorB	(65535)
00:00421D 90A003              +108 	or	ifaddr:net
00:00421E 98A004              +109 	orB	ifaddr:net+1
00:00421F C7A007              +110 	ds	ifaddr:broadcast
00:004220 50F000              +111 	lx	0, sp
  :                            112 
  :                            113 ifconfig_store_high_index
[+0005]0f
00:004221 400000              +114 	lr	$ifzp			. don't move it backwards
00:004222 F60225              +115 	jxge	ifconfig_at_highest
00:004223 500000              +116 	lx	r
[+0005]0f
00:004224 100000              +117 	sx	$ifzp			. i_f_last
  :                            118 
  :                            119 ifconfig_at_highest
00:004225 60A000              +120 	la	this_if:id
[+0003]0f
00:004226 200000              +121 	sa	$if0p			. i_f_pointer_array
[+0006]0f
00:004227 200000              +122 	sa	IFNUMBER_I		. ifNumber:i
  :                            123 
  :                            124 ixconfigure
00:004228 380002              +125 	pop	x
00:004229 350000              +126 	lret	0
  :                            127 
  :                            128 
  :                            129 
  :                            130 ifconfigure_advance
00:00422A 500003              +131 	lx	y
  :                            132 
  :                            133 ifconfigure_add_address			. you get here because the default slot is populated
00:00422B CF0006              +134 	dl	6
00:00422C DFA003              +135 	dan	ifaddr:net
00:00422D 7C0240              +136 	jdz	ifconfigured_already	. well maybe you wanted to keep the address with  
  :                            137 					. with changed settings
  :                            138 
00:00422E 58A000              +139 	ly	ifaddr:next		. if default slot is populated then so are any more you have
00:00422F 700003              +140 	tz	y
00:004230 B6022A              +141 	j	ifconfigure_advance
  :                            142 
  :                            143 
[+0007]0f
00:004231 070000              +144 	ts	net_alock
00:004232 B60231              +145 	j	$-1
  :                            146 
[+0008]0f
00:004233 580000              +147 	ly	net_afree
00:004234 700003              +148 	tz	y
00:004235 B6023A              +149 	j	ifconfigure_take_slot
[+0007]0f
00:004236 300000              +150 	z	net_alock		. let go the address slots list
00:004237 5D0228              +151 	ly	ixconfigure,,xi		. just have to dance dirty here
00:004238 18F000              +152 	sy	0, sp			. short-circuit the add_address operation
00:004239 350000              +153 	lret	0
  :                            154 
  :                            155 ifconfigure_take_slot
00:00423A 18A000              +156 	sy	ifaddr:next		. set the new next
00:00423B 500003              +157 	lx	y			. and move to it
00:00423C 58A000              +158 	ly	ifaddr:next		. and write the next next
[+0008]0f
00:00423D 180000              +159 	sy	net_afree		. to the free chain head
  :                            160 
00:00423E 30A000              +161 	z	ifaddr:next		. cap the interface chain
  :                            162 
[+0007]0f
00:00423F 300000              +163 	z	net_alock		. free the address slots list
  :                            164 ifconfigured_already
00:004240 CF0006              +165 	dl	6
00:004241 350000              +166 	lret	0
  :                            167 
  :                            168 
  :                            169 ifconfigure_lexically
[+0009]0f
00:004242 440000              +170 	lr	net_alexical,,i		. update pointer: a scalar not structure member
  :                            171 
  :                            172 configure_lexically			. entry point for other tables like ifAddrTable
00:004243 588000              +173 	ly	*r			. r is **
00:004244 B6024B              +174 	j	ifconfigure_eolexical?
  :                            175 
  :                            176 ifconfigure_compare
00:004245 CF0006              +177 	dl	6
00:004246 DFB003              +178 	dan	ifaddr:net, y
00:004247 7C024F              +179 	jdz	ifconfigure_listed	. built and run-time configured with the same address
  :                            180 					. but possibly with other settings changed
00:004248 5E024D              +181 	jnc	ifconfigure_insert_lexically
00:004249 44B001              +182 	lr	ifaddr:lexical, y, i	. update pointer word in structure, not structure
00:00424A 58B001              +183 	ly	ifaddr:lexical, y
  :                            184 
  :                            185 ifconfigure_eolexical?
00:00424B 700003              +186 	tz	y			. end of chain = higher
00:00424C B60245              +187 	j	ifconfigure_compare
  :                            188 
  :                            189 ifconfigure_insert_lexically
00:00424D 18A001              +190 	sy	ifaddr:lexical
00:00424E 108000              +191 	sx	*r			. either lexical chain head or link pointer
  :                            192 
  :                            193 ifconfigure_listed
00:00424F 350000              +194 	lret	0
  :                            195 
  :                            196 	$if	HVSOCKET
  :                            197 hvtraffic_configure
                                	c	(hvsockets_bind)	ifco:protocol_part:ports	;
                                					ifco:protocol_part:port		;
                                					ifco:protocol_part:density	;
00:004250 9FB002              +201 					ifco:protocol_addr,,long
00:004251 F8B014              +201 
00:004252 F8B012              +201 
00:004253 F8B013              +201 
00:004254 FCF005              +201 
00:004255 FF05BD              +201 
00:004256 38000F              +201 
00:004257 350000              +202 	lret	0
  :                            203 	$endif
  :                            132: 	$include	log2mask
  :                            1 route_configure_log2netmask
00:004258 160010              +2 	dsr	16			. [a] -> b 23..8
  :                            3 ifconfigure_log2netmask
00:004259 9D00FF              +4 	orB	255,,xi			. compose netmask from bits width 15..8
00:00425A 650000              +5 	la	0,,xi
00:00425B 560008              +6 	drr	8			. place 1111 1111  at a: 23..16
00:00425C AD00FF              +7 	andB	255,,xi			.   and mask width in b
00:00425D 96D000              +8 	dsa	0, b			. propagate 1s [mask width] times
00:00425E 360008              +9 	dsl	8			. take away the 1s bits you first thought of
00:00425F 160008              +10 	dsr	8			. place 16 bits of mask in a: 0.x.x
00:004260 0E0008              +11 	sbr	8			.   and 16 bits of mask in b: 0.y.y
00:004261 350000              +12 	lret	0
  :                            133: 	$include	route_in
  :                            1 $(67::,y)
  :                            2 roco	route_config_frame
  :                            3 
  :                            4 $(0)
  :                            5 
  :                            6 route_insert	$tree			. this part is called like configuration protocol
00:004262 750059              +7 	ii	KERNEL$B1_1
[+000a]0f
00:004263 500000              +8 	lx	route_lexical		. first are we replacing a route?
00:004264 CFB002              +9 	dl	roco:net
00:004265 C70006              +10 	ds	6
00:004266 B6026B              +11 	j	route_ahead?
  :                            12 route_ahead!
00:004267 CFA003              +13 	dl	ro:net
00:004268 DF0006              +14 	dan	6
00:004269 7C0272              +15 	jdz	route_overlay
00:00426A 50A001              +16 	lx	ro:lexical		. next route
  :                            17 route_ahead?
00:00426B 700002              +18 	tz	x			. is this a route?
00:00426C B60267              +19 	j	route_ahead!		. yes, examine
  :                            20 					. no, fall thru, it's a new route
[+000b]0f
00:00426D 500000              +21 	lx	route_free
00:00426E 700002              +22 	tz	x			. no free slot = no store
00:00426F 3E0284              +23 	lcal	insert			. free slot = store
00:004270 750058              +24 	ii	B1$
00:004271 3D0000              +25 	fret	0
  :                            26 
  :                            27 route_overlay
00:004272 3E0275              +28 	lcal	route_store
00:004273 750058              +29 	ii	B1$
00:004274 3D0000              +30 	fret	0
  :                            31 
  :                            32 route_store				. switch configuration tuple into route cache
00:004275 60B000              +33 	la	roco:flag_ifidx		. indirect_flag ++ interface_index
00:004276 64C002              +34 	la	2, a, i
00:004277 760009              +35 	drl	9			. net interface sends indirect flag as bit 15
00:004278 060008              +36 	sar	8			. RTA routing prefers it at bit 23
00:004279 560001              +37 	drr	1
00:00427A 20A002              +38 	sa	ro:i_f
00:00427B CFB002              +39 	dl	roco:net		. route destination
00:00427C C7A003              +40 	ds	ro:net
00:00427D 60B001              +41 	la	roco:mask_log		. mask width
00:00427E 20A009              +42 	sa	ro:mask_log		. used newer route MIBs
00:00427F 3E0258              +43 	lcal	route_configure_log2netmask
00:004280 C7A005              +44 	ds	ro:mask			. to stored mask
00:004281 CFB004              +45 	dl	roco:next_hop
00:004282 C7A007              +46 	ds	ro:next_hop
00:004283 350000              +47 	lret	0
  :                            48 
  :                            49 .	6-word input y ->
  :                            50 .		_________________________________________________
  :                            51 .		| [*]i/f|masklog|  destination	|   next hop	|
  :                            52 .		|_______|_______|_______|_______|_______|_______|
  :                            53 
  :                            54 .	9-word stored route
  :                            55 .	_________________________________________________________________________
  :                            56 .	| search| list	| [*]i/f|  destination	|      mask	|   next hop	|
  :                            57 .	|_chain_|_chain_|_______|_______|_______|_______|_______|_______|_______|
  :                            58 
  :                            59 
00:004284 3E0275              +60 insert	lcal	route_store		. switch configuration tuple into route cache
00:004285 58A000              +61 	ly	ro:next
[+000b]0f
00:004286 180000              +62 	sy	route_free		. free chain updated
  :                            63 
[+000c]10
00:004287 5D0000              +64 	ly	route_list,,xi		. find insert point in  search chain
  :                            65 
  :                            66 search_down				. 1st in chain is FFFF FFFF anyway
00:004288 400003              +67 	lr	y			. prior <--
00:004289 58B000              +68 	ly	ro:next, y		. next in chain
00:00428A CFA005              +69 	dl	ro:mask
00:00428B DFB005              +70 	dan	ro:mask, y
00:00428C 5E0288              +71 	jnc	search_down		. new route mask is < i.e. less wide
  :                            72 					. new route mask is >= 
00:00428D 18A000              +73 	sy	ro:next			. forward pointer of new
00:00428E 108000              +74 	sx	*r			. forward pointer of prior
  :                            75 
[+000a]10
00:00428F 450000              +76 	lr	route_lexical,,xi
00:004290 CFA003              +77 	dl	ro:net
00:004291 C70006              +78 	ds	6
00:004292 3E0243              +79 	lcal	configure_lexically
00:004293 350000              +80 	lret	0
  :                            81 	$root
  :                            134: 	$include	queue
  :                            1 
  :                            2 .	descriptors are short-term on two chains
  :                            3 .	so that TCP segments awaiting ACK
  :                            4 .	can be on the interface queue and the
  :                            5 .	connection's ACK wait queue at the same time
  :                            6 
  :                            7 .	IP / TCP / UDP uses chain link descriptor:next
  :                            8 
  :                            9 .	interface queues use chain link descriptor:ifql
  :                            10 
  :                            11 .	ifql is a reuse of descriptor:readpoint which
  :                            12 .	which points TCP past consumed / duplicate
  :                            13 .	payload in incoming segments
  :                            14 
  :                            15 .	in high-volume space where certain TCP ports
  :                            16 .	have private buffer pools [HVSOCKET], the buffer
  :                            17 .	and its descriptor are in the same bank
  :                            18 
  :                            19 .	descriptors are located by chain head pointer
  :                            20 .	or previous descriptor forward pointer
  :                            21 
  :                            22 .	during HVSOCKET operations the bank containing
  :                            23 .	the segment is in address space whenever the socket
  :                            24 .	is in address space	
  :                            25 
  :                            26 .	high-volume private buffer pools are only used
  :                            27 .	in some TCP traffic which is expected to be of
  :                            28 .	extreme volume or confidential. The private buffer
  :                            29 .	arrangement enables millions of transmitted segments
  :                            30 .	awaiting remote acknowledgement to remain buffered
  :                            31 
  :                            32 .	interface device drivers drop transmitted datagrams
  :                            33 .	from protocols which do not resend
  :                            34 
  :                            35 .	TCP flags bit 23 of descriptor:bytes and interface
  :                            36 .	drivers do not drop those buffers after transmission
  :                            37 
  :                            38 .	vector name write_ifq
  :                            39 
  :                            40 
00:004294 27F001              +41 rewindq	sim	1, sp
00:004295 750041              +42 	ii	YIELD$
00:004296 27F001              +43 	sim	1, sp
00:004297 35FFFE              +44 	lret	-2
  :                            45 
00:004298 F80002              +46 q2if	push	x
00:004299 70A02E              +47 	tz	this_if:q2		. diversion to trunk handling
00:00429A 50A02E              +48 	lx	this_if:q2		. at another logical interface
  :                            49 
00:00429B FD0007              +50 	LOCK	this_if:lock_cell_q1	. rewindq
00:00429C 27F000              +50 
00:00429D 07A02F              +50 
00:00429E B6029D              +50 
  :                            51 
00:00429F 70A031              +52 	tz	this_if:oq:head
00:0042A0 B602A5              +53 	j	q2ifz
00:0042A1 20A031              +54 	sa	this_if:oq:head
00:0042A2 20A032              +55 	sa	this_if:oq:tail
00:0042A3 30C007              +56 	z	descriptor:ifql, a
00:0042A4 B602A9              +57 	j	q2ifzx
  :                            58 
00:0042A5 68A032              +59 q2ifz	lb	this_if:oq:tail
00:0042A6 20D007              +60 	sa	descriptor:ifql, b
00:0042A7 20A032              +61 	sa	this_if:oq:tail
00:0042A8 30C007              +62 	z	descriptor:ifql, a
  :                            63 
00:0042A9 30A02F              +64 q2ifzx	FREE	this_if:lock_cell_q1
00:0042AA 27F000              +64 
00:0042AB 17000F              +64 
00:0042AC 380002              +65 	pop	x
00:0042AD 3D0000              +66 	fret	0
  :                            67 
  :                            68 					. local call only visible from this page
  :                            69 					. only drivers call it in IP thread
  :                            70 					. for physical transmission queued frames
  :                            71 
00:0042AE FD0007              +72 readifq	LOCK	this_if:lock_cell_q1	. rewindq
00:0042AF 27F000              +72 
00:0042B0 07A02F              +72 
00:0042B1 B602B0              +72 
00:0042B2 60A031              +73 	la	this_if:oq:head
  :                            74 readifq2
00:0042B3 C602B6              +75 	jza	rqifz
00:0042B4 68C007              +76 	lb	descriptor:ifql, a
00:0042B5 28A031              +77 	sb	this_if:oq:head
00:0042B6 30A02F              +78 rqifz	FREE	this_if:lock_cell_q1
00:0042B7 27F000              +78 
00:0042B8 17000F              +78 
00:0042B9 350000              +79 	lret	0
  :                            80 
  :                            81 	. long address (inter bank) queues
  :                            82 
  :                            83 					. local call only visible from this page
  :                            84 					. only drivers call it in IP thread
  :                            85 					. for physical transmission queued frames
  :                            86 
00:0042BA FD0007              +87 rqtxL	LOCK	this_if:lock_cell_q2	. rewindq
00:0042BB 27F000              +87 
00:0042BC 07A030              +87 
00:0042BD B602BC              +87 
00:0042BE CFA033              +88 	dl	this_if:oq2:head
00:0042BF C602C6              +89 	jza	rqtxL_z
00:0042C0 34002F              +90 	sabr	BSOCKET			. base containing memory
00:0042C1 9FD006              +91 	dpush	descriptor:sobdi, b
00:0042C2 38A033              +92 	dpop	this_if:oq2:head
00:0042C3 38A034              +92 
00:0042C4 30D006              +93 	z	descriptor:sobdi, b	. prevent delayed wrong updates along chain
00:0042C5 600005              +94 	la	b			. return containing pointer
00:0042C6 30A030              +95 rqtxL_z	FREE	this_if:lock_cell_q2
00:0042C7 27F000              +95 
00:0042C8 17000F              +95 
00:0042C9 350000              +96 	lret	0			. called from this iframe = drivers
  :                            97 
  :                            98 q2txL_head
00:0042CA F80002              +99 	push	x
00:0042CB 70A02E              +100 	tz	this_if:q2
00:0042CC 50A02E              +101 	lx	this_if:q2
  :                            102 
00:0042CD FD0007              +103 	LOCK	this_if:lock_cell_q2	. rewindq
00:0042CE 27F000              +103 
00:0042CF 07A030              +103 
00:0042D0 B602CF              +103 
  :                            104 
  :                            105 					. socket memory is based
00:0042D1 9FA033              +106 	dpush	this_if:oq2:head	. and stays based
00:0042D2 680004              +107 	lb	a
00:0042D3 054000              +108 	on	see$1
00:0042D4 60106F              +109 	la	ABT+BSOCKET
00:0042D5 0D4000              +110 	off	see$1
00:0042D6 70F000              +111 	tnz	0, sp			. anything already on this queue?
00:0042D7 B602D9              +111 
00:0042D8 C7A035              +112 	ds	this_if:oq2:tail	. if not the new object is head + tail
00:0042D9 C7A033              +113 	ds	this_if:oq2:head	. new becomes 1st
00:0042DA 38D006              +114 	dpop	descriptor:sobdi, b	. 1st becomes 2nd if any
00:0042DB 38D007              +114 
  :                            115 
00:0042DC 30A030              +116 	FREE	this_if:lock_cell_q2
00:0042DD 27F000              +116 
00:0042DE 17000F              +116 
  :                            117 
00:0042DF 380002              +118 	pop	x			. I / F pointer at call
00:0042E0 3D0000              +119 	fret	0			. called from protocol iframe
  :                            120 
  :                            121 q2txL_tail
00:0042E1 F80002              +122 	push	x
00:0042E2 70A02E              +123 	tz	this_if:q2
00:0042E3 50A02E              +124 	lx	this_if:q2
  :                            125 
00:0042E4 FD0007              +126 	LOCK	this_if:lock_cell_q2	. rewindq
00:0042E5 27F000              +126 
00:0042E6 07A030              +126 
00:0042E7 B602E6              +126 
  :                            127 
00:0042E8 680004              +128 	lb	a
00:0042E9 054000              +129 	on	see$1
00:0042EA 60106F              +130 	la	ABT+BSOCKET
00:0042EB 0D4000              +131 	off	see$1
00:0042EC 30D006              +132 	z	descriptor:sobdi, b
00:0042ED 30D007              +133 	z	descriptor:ifql, b	. always up to here
  :                            134 	
00:0042EE 70A033              +135 	tz	this_if:oq2:head:bx
00:0042EF B602F2              +136 	j	q2txL_catenate
00:0042F0 C7A033              +137 	ds	this_if:oq2:head	. 1st on queue
00:0042F1 B602FB              +138 	j	q2txL_final		. and last
  :                            139 	
  :                            140 q2txL_catenate
00:0042F2 9F0004              +141 	dpush	a			. 2 copies of long pointer
00:0042F3 9F0004              +142 	dpush	a			. connections_block:connection
00:0042F4 CFA035              +143 	dl	this_if:oq2:tail
00:0042F5 34002F              +144 	sabr	BSOCKET			. memory index heretofore last on chain
00:0042F6 38D006              +145 	dpop	descriptor:sobdi, b	. 1st copy previous last -> last 
00:0042F7 38D007              +145 
00:0042F8 380004              +146 	dpop	a			. 2nd copy to write to queue tail
00:0042F9 380005              +146 
00:0042FA 34002F              +147 	sabr	BSOCKET			. caller certainly needs that restored
  :                            148 
  :                            149 q2txL_final
00:0042FB C7A035              +150 	ds	this_if:oq2:tail	. always from here
  :                            151 
00:0042FC 30A030              +152 	FREE	this_if:lock_cell_q2
00:0042FD 27F000              +152 
00:0042FE 17000F              +152 
00:0042FF 380002              +153 	pop	x			. I / F pointer at call
00:004300 3D0000              +154 	fret	0			. called from protocol iframe
  :                            135: 	$include	soc_data
  :                            1 soc_data	$tree
  :                            2 
  :                            3 .	vector name __buy6_bytes
  :                            4 .	at entry a -> socket buffer [ + offset ]
  :                            5 .	packs 3 socket buffer words
  :                            6 .	to 2 application data words [ a b ]
  :                            7 
00:004301 F80002              +8 buy6	push	x
00:004302 4805BC              +9 	lk	(00FFFF)
00:004303 500004              +10 	lx	a
00:004304 CFA000              +11 	dl	0, x
00:004305 2E0008              +12 	sbl	8
00:004306 360008              +13 	dsl	8
00:004307 BFA002              +14 	mlb	2, x
00:004308 380002              +15 	pop	x
00:004309 3D0000              +16 	fret	0
  :                            17 
  :                            18 .	vector name __buy12_bytes
  :                            19 .	at entry a -> socket buffer [ + offset ]
  :                            20 .	packs 6 socket buffer words
  :                            21 .	to 4 application data words [ a b 6 7 ]
  :                            22 
00:00430A F80002              +23 buy12	push	x
00:00430B 4805BC              +24 	lk	(00FFFF)
00:00430C 500004              +25 	lx	a
00:00430D CFA003              +26 	dl	3, x
00:00430E 2E0008              +27 	sbl	8
00:00430F 360008              +28 	dsl	8
00:004310 BFA005              +29 	mlb	5, x
00:004311 C70006              +30 	ds	6
00:004312 CFA000              +31 	dl	0, x
00:004313 2E0008              +32 	sbl	8
00:004314 360008              +33 	dsl	8
00:004315 BFA002              +34 	mlb	2, x
00:004316 380002              +35 	pop	x
00:004317 3D0000              +36 	fret	0
  :                            37 	
  :                            38 		$root
  :                            136: 	$include	if2media
  :                            1 if2media? $tree
  :                            2 
00:004318 60A023              +3 	la	this_if:oqremaining	. hold traffic from medium?
00:004319 A60324              +4 	jpa	cleared
  :                            5 	
00:00431A 68A024              +6 	lb	this_if:threshold_time
00:00431B CE0320              +7 	jzb	restart_clear		. initial
00:00431C 600097              +8 	la	DAYCLOCK$
00:00431D D00005              +9 	ana	b
00:00431E A60320              +10 	jpa	restart_clear		. time has reached restart allowance
  :                            11 				
00:00431F 350000              +12 	lret	0			. time has not. Output must wait
  :                            13 
  :                            14 restart_clear
00:004320 600097              +15 	la	DAYCLOCK$
00:004321 C50000              +16 	aa	THRESHOLD_QUANTUM_MS_IFT2,,xi
00:004322 20A024              +17 	sa	this_if:threshold_time
  :                            18 
00:004323 60A022              +19 	la	this_if:oqlen
  :                            20 
00:004324 C5FFFF              +21 cleared	aa	-1,,xi
00:004325 20A023              +22 	sa	this_if:oqremaining
00:004326 350001              +23 	lret	1			. clear to send
  :                            24 
  :                            25 	$root
  :                            137: 	$include	recheck
  :                            1 .	diagnostic call to see if parts of an IP header
  :                            2 .	heve got overwritten
  :                            3 
  :                            4 .	if it goes to GUARD$ interrupt
  :                            5 .	8 caller registers [ r k x y a b 6 7 ]
  :                            6 .	are on the application internal stack
  :                            7 .	otherwise no registers are changed
  :                            8 
  :                            9 .	$do	1,	c	(__recheck)	address[,,i]
  :                            10 
  :                            11 
  :                            12 recheck	$tree
                                	$head_far	 params(datagram_p,	int)		;
                                								;
                                			scalars(caller_ab67,	float,	a	;
00:004327 8F0004              +16 				caller_rkxy,	float,	r	)
00:004328 8F0000              +16 
  :                            17 
00:004329 50F00B              +18 	lx	datagram_p		. pointer
00:00432A 60A000              +19 	la	0, x
00:00432B 160008              +20 	dsr	8
00:00432C 4DFFF0              +21 	lk	-16,,xi
00:00432D AF05BE              +22 	mta	(000040)		. 1st quartet 4 ?
00:00432E B60344              +23 	j	recheck_reject
00:00432F A5000F              +24 	and	15,,xi
00:004330 C5FFFC              +25 	aa	-5+2-1,,xi		. enough longwords
00:004331 5E0344              +26 	jnc	recheck_reject		. to be an IP header?
00:004332 400004              +27 	lr	a
  :                            28 	
00:004333 CFA000              +29 	dl	0, x			. version_hl_tos : size
00:004334 D7A002              +30 	da	2, x			. dgram_id : dnf+ 
  :                            31 
00:004335 D7A006              +32 addons	da	6, x			. word pairs
00:004336 850002              +33 	ax	2,,xi			. starting addresses
00:004337 1E0335              +34 	jdr	addons			. + up to 10 more pairs
  :                            35 
00:004338 50F00B              +36 	lx	datagram_p		. reload pointer
00:004339 C0A004              +37 	aa	4, x			. include  ttl_protocol
  :                            38 
  :                            39 addaround
00:00433A C00005              +40 	aa	b
00:00433B 160010              +41 	dsr	16
00:00433C 0E0008              +42 	sbr	8
00:00433D D6033A              +43 	jnza	addaround
  :                            44 
00:00433E B805BC              +45 	xorB	(00FFFF)
00:00433F B8A005              +46 	xorB	5, x
  :                            47 
00:004340 DE0344              +48 	jnzb	recheck_reject
  :                            49 
00:004341 870000              +50 	qpop	r
00:004342 870004              +51 	qpop	a
00:004343 3D0000              +52 	fret	0
  :                            53 
  :                            54 recheck_reject
00:004344 75005F              +55 	ii	GUARD$
  :                            56 
  :                            57 	$root
  :                            58 
  :                            138: 	$include	mcapsule
  :                            1 
  :                            2 mib_scope_update	$tree
  :                            3 
  :                            4 .	these call[s] are on diagnostic mib objects
  :                            5 	
  :                            6 .	$vector name tx_mib_update
  :                            7 
  :                            8 .	caller has address of data part of managed object
  :                            9 .	but has his own B1 in address space not mib variables in kernel B1
  :                            10 .	just be sure it'a a 48-bit object
  :                            11 .	and you name its data part :i
  :                            12 
  :                            13 .	c	(tx_mib_update)	thing:i,,xi	some_number_like_1[,,xi]
  :                            14 
  :                            15 variable48
  :                            16 	$if	1
                                	$head_far	 params(object_p,	int	;
                                				increment,	int)	;
                                							;
00:004345 F80002              +20 			scalars(caller_x,	int,	x)
  :                            21 
00:004346 750059              +22 	ii	KERNEL$B1_1		. map onto MIB data
00:004347 50F004              +23 	lx	object_p		. pointer -> data part managed object
00:004348 F8F005              +24 	push	increment		. stack names are momentarily curved
00:004349 2FA001              +25 	popA	1, x			. until here
00:00434A 5E034C              +26 	jnc	in_range		. 48 bits += 24 bits unsigned
00:00434B 17A000              +27 	inc	0, x
  :                            28 
  :                            29 in_range
00:00434C 750058              +30 	ii	B1$			. map onto caller data
00:00434D 380002              +31 	pop	x
  :                            32 	$endif
  :                            33 
00:00434E 3D0000              +34 	fret	0
  :                            35 
  :                            36 	$root	
  :                            139 	$list
  :                            140 
  :                            141 	$path		../arp.ext
  :                            152 	$list		3
  :                            153: 	$include	arp_enet
  :                            1 ethernet_arp	$tree
  :                            2 ETHERNET_ARP_ARPQ_HEAD*	$set	arpq.head
  :                            3 
  :                            4 .	ARP for
  :                            5 .		48-bit physical addresses
  :                            6 .	and	32-bit protocol addresses
  :                            7 
  :                            8 .	this may be the only ARP needed
  :                            9 .	if another ARP is needed
  :                            10 .	for different size addresses
  :                            11 .	include arp.msm again
  :                            12 
  :                            13 .	netspace	$tree
  :                            14 .	SETTINGS	$set	values
  :                            15 .			$include arp
  :                            16 .			$root
  :                            17 .
  :                            18 .	whatever storage bank that is in
  :                            19 .	needs four vectors at the front
  :                            20 
  :                            21 .	netspa_arp_rx* $vector	netspace:arp_rx
  :                            22 .	netspa_arp_reso* $vector netspace:resolve
  :                            23 .	netspa_arp_xmit* $vector netspace:xmit
  :                            24 .	xarp_netspace*	$vector	netspace:xarp
  :                            25 
  :                            26 .	these vectors go in the interface descriptor
  :                            27 
  :                            28 .	this_if:arp_rx
  :                            29 .	this_if:arp_tx
  :                            30 .	this_if:arp_resolve
  :                            31 .	this_if:xarp
  :                            32 
  :                            33 .		ql	(netspa_arp_rx, netspa_arp_tx, netspa_arp_reso, xarp_netspace:q)
  :                            34 .		qs	this_if:arp_rx
  :                            35 
  :                            36 .	this would usually happen in ifconfigure.msm  where 
  :                            37 .	the vector pointer to the routine for constructing
  :                            38 .	link layer header is also written to this_if:write_llh
  :                            39 
  :                            40 
  :                            41 .	the settings and and generation of ethernet ARP follow here
  :                            42 
  :                            43 
  :                            44 ARP_STORE $set	50	. however many ARP cache rows are required
  :                            45 
  :                            46 HTYPE	$set	ETHERNET_SPACE
  :                            47 HLEN	$set	6
  :                            48 PLEN	$set	4
  :                            49 PROTOCOL_SUITE	$set	0800
  :                            50 LINK_PROTOCOL	$set	0806
  :                            51 
  :                            52 ARP_XMIT	$set	arp_ether_xmit
  :                            53 
  :                            54: 		$include	arp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(1:*1)
  :                            41 
01:000000 000000              +42 arpq	dq
01:000001 000000              +42 
  :                            43 
  :                            44 arp_hash
01:000002 000000              +45 	$do	arp_store(ARP_STORE),	0
01:000003 000000              +45 
01:000004 000000              +45 
01:000005 000000              +45 
01:000006 000000              +45 
01:000007 000000              +45 
01:000008 000000              +45 
01:000009 000000              +45 
01:00000A 000000              +45 
01:00000B 000000              +45 
01:00000C 000000              +45 
01:00000D 000000              +45 
01:00000E 000000              +45 
01:00000F 000000              +45 
01:000010 000000              +45 
01:000011 000000              +45 
  :                            46 ?	$do	ARP_STORE,arp_line(?)	arp_cache
  :                            47 
(+01)18
01:0001A2 000012              +48 arp_next	+	arp_line(1)
  :                            49 
  :                            50 	$if	T77_DRIVERS_THREADED
  :                            51 arpq_tscell	+	0
  :                            52 	$endif
  :                            53 
01:0001A3 000000              +54 arp_free	+	0
  :                            55 
01:0001A4 000000              +56 broadcast_line	broadcast_cache
01:0001A5 000000              +56 
01:0001A6 000000              +56 
01:0001A7 00FFFF              +56 
01:0001A8 00FFFF              +56 
01:0001A9 00FFFF              +56 
01:0001AA 00FFFF              +56 
01:0001AB 00FFFF              +56 
  :                            57 
  :                            58 $(67::,y)
  :                            59 arp_row	arp_cache
  :                            60 ARP_CACHE_WORDS	$set	$
  :                            61 
  :                            62 $(67::,y)
  :                            63 arp_msg	arp_dgram
  :                            64 ARP_MSG_WORDS	$set	$
  :                            65 
  :                            66 $(0)
  :                            67 
00:00434F 8F0000              +68 xarp	qpush	r
  :                            69 xarp_next
(+01)10
00:004350 5D0000              +70 	ly, xi	arpq
  :                            71 
  :                            72 	$if	T77_DRIVERS_THREADED	. if device drivers are not in IP main thread
  :                            73 	LOCK	arpq_tscell		. it must be done this way
  :                            74 	call	(far_readq)
  :                            75 	FREE	arpq_tscell
  :                            76 	$else				. otherwise it can be done this way
00:004351 FF05BF              +77 	call	(far_readq)
  :                            78 	$endif
  :                            79 
00:004352 C60361              +80 	jza	xarp_timers
00:004353 20000E              +81 	sa	fp
00:004354 3E041C              +82 	lcal	glean_and_push
  :                            83 
00:004355 58E004              +84 	ly	descriptor:dgram
00:004356 CFB007              +85 	dl	arp_msg:spa
00:004357 7C035D              +86 	jdz	xarp_clear		. don't respond to ZeroConf
00:004358 60B003              +87 	la	arp_msg:oper
00:004359 D50001              +88 	ana	ARP_REQUEST,,xi
00:00435A D6035D              +89 	jnza	xarp_clear
00:00435B 50F002              +90 	lx	2, sp
00:00435C 3E043E              +91 	lcal	search_and_indicate	. is this address here?
  :                            92 
  :                            93 xarp_clear
00:00435D 60000E              +94 	la	fp
00:00435E 502180              +95 	lx	rx_buffers
00:00435F FF059B              +96 	call	(if_sell1)
00:004360 B60350              +97 	j	xarp_next
  :                            98 
  :                            99 xarp_timers
00:004361 45000F              +100 	lr	arp_store(ARP_STORE)-1,,xi
(+01)10
00:004362 550002              +101 	lx	arp_hash,,xi
  :                            102 xarp_walk
00:004363 58A000              +103 	ly	0, x
00:004364 850001              +104 	ax	1,,xi
00:004365 B60368              +105 	j	xarp_walk_chain
  :                            106 xarp_walk_next
00:004366 3E0452              +107 	lcal	time_test
00:004367 58B000              +108 	ly	arp_row:next
  :                            109 xarp_walk_chain
00:004368 700003              +110 	tz	y
00:004369 B60366              +111 	j	xarp_walk_next
00:00436A 1E0363              +112 	jdr	xarp_walk
00:00436B 870000              +113 xarpx	qpop	r
  :                            114 
00:00436C 3D0000              +115 	fret	0
  :                            116 
00:00436D 9F0002              +117 arp_rx	dpush	x
00:00436E 600000              +118 	la	r
00:00436F D5001C              +119 	ana	ARP_MSG_WORDS*2,,xi	. must have this many octets
00:004370 5E0383              +120 	jnc	arp_rxz			. to be complete
00:004371 502180              +121 	lx	rx_buffers		. move some of it away from i/f buffers
00:004372 650010              +122 	la, xi	ARP_MSG_WORDS+3**-4	. that's how much we'll look at
00:004373 FF05C0              +123 	call	(if_buy1)
00:004374 C60383              +124 	jza	arp_rxz
00:004375 50C001              +125 	lx	descriptor:frame, a
00:004376 10C004              +126 	sx	descriptor:dgram, a
  :                            127 
00:004377 58F001              +128 	ly	1, sp
00:004378 450003              +129 	lr	ARP_MSG_WORDS//4-1,,xi
  :                            130 arp_rx_store
00:004379 8FB000              +131 	qpush	0, y
00:00437A 87A000              +132 	qpop	0, x
00:00437B 8D0004              +133 	ay	4,,xi
00:00437C 850004              +134 	ax	4,,xi
00:00437D 1E0379              +135 	jdr	arp_rx_store
  :                            136 
(+01)10
00:00437E 5D0000              +137 	ly	arpq,,xi
  :                            138 
  :                            139 	$if	T77_DRIVERS_THREADED
  :                            140 	LOCK	arpq_tscell
  :                            141 	call	(far_q2)
  :                            142 	FREE	arpq_tscell
  :                            143 	$else
00:00437F FF05C1              +144 	call	(far_q2)
  :                            145 	$endif
  :                            146 
00:004380 50F000              +147 	lx	0, sp
00:004381 68A000              +148 	lb	this_if:id
00:004382 28C002              +149 	sb	descriptor:i_f, a
  :                            150 
00:004383 380002              +151 arp_rxz	dpop	x
00:004384 380003              +151 
00:004385 3D0000              +152 	fret	0
  :                            153 	
00:004386 8F0010              +154 resolve	qpush	d$save
00:004387 8F0008              +155 	qpush	8
00:004388 65FFFF              +156 	la	-1,,xi			. hasn't until it has
00:004389 8F0004              +157 	qpush	a
00:00438A 8F0000              +158 	qpush	r
  :                            159 
  :                            160 caller_i_f	$equf	2, sp		. still in x as well so far
  :                            161 NET_ADDR	$set	6
  :                            162 LL_H		$set	TX_FRAME
  :                            163 CHAIN_HEAD	$set	10
  :                            164 BLANK		$set	9		. spare slot pointer
  :                            165 AXW		$set	8		. it was where we are called from
  :                            166 
  :                            167 					. find the hash chain
00:00438B 600009              +168 	la	TX_FRAME
00:00438C CFC00E              +169 	dl	nframe:next_hop, a
00:00438D 40A000              +170 	lr	this_if:id		. the calling xmit routine has the I/F
00:00438E 3E03F7              +171 	lcal	find_in_cache		. entry point precaches target protocol address
00:00438F 700003              +172 	tz	y
00:004390 B60398              +173 	j	consider		. found in ARP cache
00:004391 580009              +174 	ly	BLANK
00:004392 700003              +175 	tz	y
00:004393 B603A1              +176 	j	construct_request	. found a cache row in same # chain
00:004394 3E0414              +177 	lcal	search_heap
00:004395 700003              +178 	tz	y
00:004396 B6039C              +179 	j	insert_construct_request . found a new cache row
  :                            180 
00:004397 B603B9              +181 	j	return
  :                            182 
  :                            183 consider				. remote physa may be requested but not responded
00:004398 CFB003              +184 	dl	arp_row:tha
                                ?	$do	HLEN//2-2,	;
00:004399 98B005              +186 	orB	arp_row:tha+2+?-1
00:00439A 7C03B9              +187 	jdz	return
00:00439B B603B3              +188 	j	deliver
  :                            189 
  :                            190 insert_construct_request
00:00439C 60800A              +191 	la	*CHAIN_HEAD		. read address of 1st in chain by pointer
00:00439D 20B000              +192 	sa	arp_row:next		. write next of new 1st
00:00439E 18800A              +193 	sy	*CHAIN_HEAD		. write chain head location by pointer
  :                            194 
00:00439F 60A000              +195 	la	this_if:id		. this is a necessary identification
00:0043A0 20B002              +196 	sa	arp_row:i_f		. otherwise this ARP row is not used
  :                            197 					. and blows up the timer test
  :                            198 construct_request
00:0043A1 30B003              +199 	z	arp_row:tha
00:0043A2 30B004              +200 	z	arp_row:tha+1
00:0043A3 30B005              +201 	z	arp_row:tha+2
  :                            202 
00:0043A4 CF0006              +203 	dl	NET_ADDR
00:0043A5 C7B006              +204 	ds	arp_row:tpa
  :                            205 
00:0043A6 600097              +206 	la	DAYCLOCK$
00:0043A7 C005C2              +207 	aa	(ARP_REFRESH)
00:0043A8 20B001              +208 	sa	arp_row:refresh
  :                            209 
00:0043A9 600013              +210 	la	TX_DATAGRAM
  :                            211 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				caller_i_f		;
                                				0,,xi			;
                                				NET_ADDR,,long		;
00:0043AA 9FC006              +216 				dgram:ipsource,a,long
00:0043AB 9F0006              +216 
00:0043AC FD0000              +216 
00:0043AD F8F007              +216 
00:0043AE FD0001              +216 
00:0043AF FCF007              +216 
00:0043B0 FF05C3              +216 
00:0043B1 38000F              +216 
  :                            217 
00:0043B2 B603B9              +218 	j	return
  :                            219 
00:0043B3 50F009              +220 deliver	lx	TX_FRAME, sp
00:0043B4 CFB003              +221 	wphysa	0, x	arp_row:tha, y
00:0043B5 C7A000              +221 
00:0043B6 60B005              +221 
00:0043B7 20A002              +221 
00:0043B8 30F004              +222 	z	4, sp	. now it has
  :                            223 
00:0043B9 870000              +224 return	qpop	r
00:0043BA 870004              +225 	qpop	a
00:0043BB 870008              +226 	qpop	8
00:0043BC 870010              +227 	qpop	d$save
00:0043BD 3D0000              +228 	fret	0
  :                            229 
  :                            230 
  :                            231 phy_target1	$equf	arp_msg:tha
  :                            232 phy_target2	$equf	nframe:llh:generic:address, y
  :                            233 phy_sourcex	$equf	0, x
  :                            234 
                                xmit	$head_far	 params(operation,	int	  ;
                                				i_fp,		int	  ;
                                				ha_pointer,	int	  ;
                                				dnet_addr,	long	  ;
                                				snet_addr,	long	) ;
                                							  ;
                                			scalars(caller_rkxy,	float, r  ;
00:0043BE 8F0000              +242 				caller_fp,	int,  fp)
00:0043BF F8000E              +242 
  :                            243 
00:0043C0 65001E              +244 	la	ROUTING_HEADER+ARP_MSG_WORDS,,xi
00:0043C1 502181              +245 	lx	tx_buffers
00:0043C2 FF05C0              +246 	call	(if_buy1)
00:0043C3 C603F4              +247 	jza	xmitx
00:0043C4 20000E              +248 	sa	fp
  :                            249 
00:0043C5 58E001              +250 	ly	descriptor:frame
00:0043C6 6CB010              +251 	lb	ROUTING_HEADER,y,i
00:0043C7 28E004              +252 	sb	descriptor:dgram
00:0043C8 65001C              +253 	la	ARP_MSG_WORDS*2,,xi
00:0043C9 C7B009              +254 	ds	nframe:frame_axw(2), y
00:0043CA 30B00B              +255 	z	nframe:frame_axw(3), y		. no third buffer needed
00:0043CB 30B00E              +256 	z	nframe:next_hop, y		. a value here is irrelevant
00:0043CC 30B00F              +257 	z	nframe:next_hop+1, y		. so clear residual value
  :                            258 
00:0043CD 400003              +259 	lr	y				. save the frame pointer
00:0043CE 580005              +260 	ly	b				. dgram pointer
  :                            261 
00:0043CF CF05C4              +262 	dl	(HTYPE, PROTOCOL_SUITE:d)	. hardware space, protocol set
00:0043D0 C7B000              +263 	ds	arp_msg:htype
  :                            264 
00:0043D1 6005C6              +265 	la	(0, HLEN, PLEN)
00:0043D2 68F008              +266 	lb	operation
00:0043D3 C7B002              +267 	ds	arp_msg:hl_pl			. address lengths, type of request
  :                            268 
00:0043D4 50F009              +269 	lx	i_fp
  :                            270 
00:0043D5 CFA008              +271 	wphysa	arp_msg:sha this_if:physa
00:0043D6 C7B004              +271 
00:0043D7 60A00A              +271 
00:0043D8 20B006              +271 
  :                            272 
00:0043D9 CFF00D              +273 	dl	snet_addr
00:0043DA C7B007              +274 	ds	arp_msg:spa
  :                            275 
00:0043DB CFF00B              +276 	dl	dnet_addr
00:0043DC C7B00C              +277 	ds	arp_msg:tpa
  :                            278 
  :                            279 
00:0043DD 50F00A              +280 	lx	ha_pointer			. bespoke physa destination?
00:0043DE 700002              +281 	tnz	x
00:0043DF B603E1              +281 
00:0043E0 5505C7              +282 	lx	(0o),,xi
00:0043E1 CFA000              +283 	wphysa	arp_msg:tha phy_sourcex
00:0043E2 C7B009              +283 
00:0043E3 60A002              +283 
00:0043E4 20B00B              +283 
  :                            284 						. arp dgram is built
  :                            285 						. now the link layer header
  :                            286 
00:0043E5 580000              +287 	ly	r				. recover the frame pointer
00:0043E6 50F00A              +288 	lx	ha_pointer			. bespoke physa destination?
00:0043E7 700002              +289 	tnz	x
00:0043E8 B603EA              +289 
00:0043E9 5505CF              +290 	lx, xi	(00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF:o)
  :                            291 						. don't know = broadcast
  :                            292 						. most i/f use 3 of these 8 words !
00:0043EA CFA000              +293 	wphysa	nframe:llh:generic:address,y phy_sourcex
00:0043EB C7B000              +293 
00:0043EC 60A002              +293 
00:0043ED 20B002              +293 
  :                            294 
00:0043EE 6D0806              +295 	lb	LINK_PROTOCOL,,xi
00:0043EF 28B006              +296 	sb	nframe:llh:generic:protocol, y
00:0043F0 50F009              +297 	lx	i_fp
00:0043F1 60000E              +298 	la	fp
  :                            299 
  :                            300 	$if	0			. seems to be called from q2
  :                            301 	call	this_if:write_llh	. format generic parameters		
  :                            302 	$endif				. to ll header for this i/f
  :                            303 
00:0043F2 60000E              +304 	la	fp
00:0043F3 FF05D7              +305 	call	(if_q2ifree)
  :                            306 
00:0043F4 38000E              +307 xmitx	pop	fp
00:0043F5 870000              +308 	qpop	r
00:0043F6 3D0000              +309 	fret	0
  :                            310 
  :                            311 find_in_cache
00:0043F7 C70006              +312 	ds	NET_ADDR
  :                            313 
  :                            314 find_in_cacheq
00:0043F8 AD000F              +315 	andB	arp_store(ARP_STORE)-1,,xi
(+01)10
00:0043F9 5D0002              +316 	ly	arp_hash,,xi
00:0043FA 880005              +317 	ay	b
00:0043FB 18000A              +318 	sy	CHAIN_HEAD
00:0043FC 300009              +319 	z	BLANK
  :                            320 
00:0043FD 4D7FFF              +321 	lk	32767,,xi
  :                            322 	
00:0043FE 60B000              +323 forward	la	arp_row:next
00:0043FF 580004              +324 	ly	a
00:004400 C6040D              +325 	jza	miss
00:004401 60B002              +326 	la	arp_row:i_f		. no use resolving on the wrong network
00:004402 AF0000              +327 	mta	r			. with ideas like autoconf being used
00:004403 B603FE              +328 	j	forward			. and platforms all multihomed
00:004404 CFB006              +329 	dl	arp_row:tpa		
00:004405 7C0409              +330 	jdz	spare
00:004406 DF0006              +331 	dan	NET_ADDR
00:004407 7C0410              +332 	jdz	hit
00:004408 B603FE              +333 	j	forward
  :                            334 
00:004409 700009              +335 spare	tnz	BLANK			. 1st spare in chain is best
00:00440A B6040C              +335 
00:00440B 180009              +336 	sy	BLANK
00:00440C B603FE              +337 	j	forward
  :                            338 
00:00440D CF0006              +339 miss	dl	NET_ADDR
00:00440E DF05D8              +340 	dan	(00FFFF00FFFF)		. test for broadast last
00:00440F 7C0411              +341 	jdz	big_hit			. unicast traffic is more RT-urgent
00:004410 350000              +342 hit	lret	0			. return with or without a hit
  :                            343 
(+01)10
00:004411 5D01A4              +344 big_hit	ly	broadcast_line,,xi
00:004412 600003              +345 	la	y
00:004413 350000              +346 	lret	0
  :                            347 	
  :                            348 search_heap				. is the heap used up?
(+01)0f
00:004414 5801A2              +349 	ly	arp_next
(+01)10
00:004415 4501A2              +350 	lr	arp_line(ARP_STORE)+ARP_CACHE_WORDS,,xi
00:004416 FE041A              +351 	jyge	eoheap
00:004417 44B008              +352 	lr	ARP_CACHE_WORDS, y, i
(+01)0f
00:004418 0001A2              +353 	sr	arp_next
00:004419 350000              +354 	lret	0
00:00441A 5D0000              +355 eoheap	ly	0,,xi
00:00441B 350000              +356 	lret	0
  :                            357 
  :                            358 glean_and_push
00:00441C 50E004              +359 	lx	descriptor:dgram
00:00441D CFA007              +360 	dl	arp_msg:spa, x
00:00441E 7C043D              +361 	jdz	gleanx		. don't process ZeroConf as ARP
  :                            362 
00:00441F C70006              +363 	ds	NET_ADDR
  :                            364 
00:004420 CFA004              +365 	dl	arp_msg:sha, x	. if there is an accidental zero HA
                                ?	$do	HLEN//2-2,	;
00:004421 98A006              +367 	orB	arp_msg:sha+2+?-1, x
00:004422 7C043D              +368 	jdz	gleanx		. don't cache it: it can't help you
  :                            369 
00:004423 40E002              +370 	lr	descriptor:i_f
00:004424 CF0006              +371 	dl	NET_ADDR
00:004425 3E03F8              +372 	lcal	find_in_cacheq	. target protocol address already in 6:7
00:004426 700003              +373 	tz	y
00:004427 B60432              +374 	j	update
00:004428 580009              +375 	ly	BLANK		. it's free information if
  :                            376 				. we have a slot to store it
00:004429 700003              +377 	tz	y
00:00442A B60432              +378 	j	update		. found a spare row same # chain
00:00442B 3E0414              +379 	lcal	search_heap
00:00442C 700003              +380 	tz	y
00:00442D B6042F              +381 	j	insert_update
  :                            382 
00:00442E B6043D              +383 	j	gleanx		. can't keep this information until
  :                            384 				. a cache row times out
  :                            385 
  :                            386 insert_update
00:00442F 60800A              +387 	la	*CHAIN_HEAD	. read address of 1st in chain by pointer
00:004430 20B000              +388 	sa	arp_row:next	. make that next of new 1st
00:004431 18800A              +389 	sy	*CHAIN_HEAD	. write new 1st to chain head by pointer
  :                            390 
00:004432 CF0006              +391 update	dl	NET_ADDR
00:004433 C7B006              +392 	ds	arp_row:tpa
00:004434 CFA004              +393 	wphysa	arp_row:tha arp_msg:sha, x
00:004435 C7B003              +393 
00:004436 60A006              +393 
00:004437 20B005              +393 
00:004438 600097              +394 	la	DAYCLOCK$
00:004439 C005C2              +395 	aa	(ARP_REFRESH)
00:00443A 20B001              +396 	sa	arp_row:refresh
00:00443B 60E002              +397 	la	descriptor:i_f
00:00443C 20B002              +398 	sa	arp_row:i_f
  :                            399 
00:00443D 350000              +400 gleanx	lret	0
  :                            401 
  :                            402 
  :                            403 	$if	1
  :                            404 
  :                            405 search_and_indicate
  :                            406 	.	some lousey network boxes
  :                            407 	.	deliver ARP requests on a medium where the sender is not homed
  :                            408 	.	so respond on the interface where it is
  :                            409 
  :                            410 	.	ANYNET replicated addresses aren't replicated in one host
  :                            411 	.	only among attached autoconf networks
  :                            412 
  :                            413 
[+0003]10
00:00443E 550000              +414 	lx	$if0p,,xi
00:00443F 80E002              +415 	ax	descriptor:i_f		. requesting i/f id
00:004440 40A000              +416 	lr	0, x			. requesting interface
00:004441 500000              +417 	lx	r
  :                            418 
00:004442 CFB00C              +419 	dl	arp_msg:tpa
00:004443 FF05DA              +420 	call	(ipv4_this_if?)		. found on the shorter list? most frequent case
00:004444 B60449              +421 	j	respond_yes		. the interface is already pointed
  :                            422 
  :                            423 	$if	0
  :                            424 	call	(ipv4_this_host?)	. only search the chain of this interface
  :                            425 	$endif
  :                            426 
00:004445 350000              +427 	lret	0			. not on this interface
  :                            428 
00:004446 50A002              +429 	lx	ifaddr:i_f		. point to the interface where the address is found
[+0003]10
00:004447 850000              +430 	ax	$if0p,,xi
00:004448 40A000              +431 	lr	0, x
  :                            432 
  :                            433 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				r			;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
00:004449 9FB00C              +438 				arp_msg:tpa,,long
00:00444A 9FB007              +438 
00:00444B FCB004              +438 
00:00444C F80000              +438 
00:00444D FD0002              +438 
00:00444E FCF007              +438 
00:00444F FF05C3              +438 
00:004450 38000F              +438 
00:004451 350000              +439 	lret	0
  :                            440 
  :                            441 	$else
  :                            442 
  :                            443 search_and_indicate		. process a request from outside
  :                            444 	$head_near	scalars(i_f_of_request,	int)
  :                            445 
  :                            446 	lx	descriptor:i_f	. get the interface where the request is
  :                            447 	ax	$if0p,,xi
  :                            448 	lx	0, x		. even if forwarding, we must answer that way
  :                            449 	sx	i_f_of_request
  :                            450 	dl	arp_msg:tpa
  :                            451 	call	(ipv4_4us?)
  :                            452 	j	respond_yes	
  :                            453 	j	respond_no
  :                            454 respond_yes
                                	c	(ARP_XMIT)	ARP_REPLY,,xi		;
                                				i_f_of_request		;
                                				arp_msg:sha,,i		;
                                				arp_msg:spa,,long	;
  :                            459 				arp_msg:tpa,,long
  :                            460 respond_no
  :                            461 	inc	sp
  :                            462 	lret	0
  :                            463 
  :                            464 	$endif
  :                            465 
  :                            466 
  :                            467 time_test			. y -> ARP cache row for time test
00:004452 8F0000              +468 	qpush	r
00:004453 CFB006              +469 	dl	arp_row:tpa	. not in use
00:004454 7C0468              +470 	jdz	time_tex
00:004455 C70006              +471 	ds	6
  :                            472 
00:004456 60B001              +473 	la	arp_row:refresh
00:004457 D00097              +474 	ana	DAYCLOCK$	. 24 bits is enough for this timer
00:004458 A60468              +475 	jpa	time_tex
  :                            476 
00:004459 600097              +477 	la	DAYCLOCK$	. restart the refresh timer
00:00445A C005C2              +478 	aa	(ARP_REFRESH)	. before register y gets re-used
00:00445B 20B001              +479 	sa	arp_row:refresh
  :                            480 
00:00445C 50B002              +481 	lx	arp_row:i_f
[+0003]0f
00:00445D 840000              +482 	ax	$if0p,,i
00:00445E 50A000              +483 	lx	0, x
00:00445F 60A002              +484 	la	this_if:address_list, x
  :                            485 
  :                            486 				. advertise we would like a refresh
  :                            487 				. and restart the timer
  :                            488 
                                	c	(ARP_XMIT)	ARP_REQUEST,,xi		;
                                				x			;
                                				0,,xi			;
                                				arp_row:tpa,,long	;
00:004460 9FC003              +493 				ifaddr:net,a,long
00:004461 9FB006              +493 
00:004462 FD0000              +493 
00:004463 F80002              +493 
00:004464 FD0001              +493 
00:004465 FCF007              +493 
00:004466 FF05C3              +493 
00:004467 38000F              +493 
  :                            494 time_tex
00:004468 870000              +495 	qpop	r
00:004469 350000              +496 	lret	0
  :                            497 
  :                            55 		$root
  :                            154 	$list		2
  :                            155 	$path
  :                            156 
  :                            157 $(0)
  :                            158 
  :                            159 	$if		HVSOCKET
  :                            166 	$list		2
  :                            167: 	$include	t77.4/hvsocket
  :                            1 SOCKET_LPOINTER $equ	d$save2
  :                            2 
  :                            3 hvsocket	$tree
  :                            4 
  :                            5 $(69::,b)
45:000000                     +6 so	$socket
45:000002                     +6 
45:000004                     +6 
45:000005                     +6 
45:000006                     +6 
45:000007                     +6 
45:000005                     +6 
45:000006                     +6 
45:000007                     +6 
  :                            7 
  :                            8 $(0)
  :                            9 
                                bind	$head_far		 params(sockets,	int	;
                                					port1,		int	;
                                					transmissions,	int	;
  :                            13 					net_address,	long	)
00:00446A CFF006              +14 	dl	net_address
00:00446B 2E0008              +15 	sbl	8
00:00446C 360008              +16 	dsl	8
00:00446D C7F006              +17 	ds	net_address
  :                            18 
00:00446E 40F003              +19 	lr	sockets
00:00446F B60482              +20 	j	more?
  :                            21 
00:004470 00F003              +22 more	sr	sockets
00:004471 4805BC              +23 	lk	(00FFFF)
00:004472 CFF006              +24 	dl	net_address
00:004473 BFF004              +25 	mlb	port1
00:004474 9F0004              +26 	c	(__bind)	(IPPROTO_TCP*/16)	a,,long
00:004475 F805DB              +26 
00:004476 FCF003              +26 
00:004477 FF05DC              +26 
00:004478 38000F              +26 
00:004479 E60483              +27 	jna	no_more
  :                            28 
00:00447A 60059E              +29 	la	(0800000s)
00:00447B 20B004              +30 	sa	so:flags, y		. flag uses private buffers
00:00447C 30B005              +31 	z	so:tcp:tbase, y		. and does not yet have them
00:00447D 30B007              +32 	z	so:tcp:rxowner, y	. no thread claims the port yet
  :                            33 
00:00447E 60F005              +34 	la	transmissions		. and will have this many
00:00447F 20B006              +35 	sa	so:tcp:tcbs, y		. transmission control blocks
  :                            36 
00:004480 17F004              +37 	inc	port1
00:004481 40F003              +38 	lr	sockets
00:004482 1E0470              +39 more?	jdr	more
  :                            40 no_more
00:004483 3D0000              +41 	$ret
  :                            42 
                                storage	$head_far	scalars(connections,	int			;
                                				caller_ab67,	float,	a		;
                                				caller_rkxy,	float,	r		;
00:004484 FD0000              +46 				bound_address,	float, *SOCKET_LPOINTER+1)
00:004485 8F0004              +46 
00:004486 8F0000              +46 
00:004487 500013              +46 
00:004488 8FA000              +46 
  :                            47 
00:004489 580013              +48 	ly	SOCKET_LPOINTER+1
00:00448A 68B006              +49 	lb	so:tcp:tcbs, y		. connections
00:00448B 28F00C              +50 	sb	connections		. save max connections
00:00448C 2E0003              +51 	sbl	3
00:00448D 600005              +52 	la	b
00:00448E 260001              +53 	sal	1			. * 24 + CHAINS + 8
00:00448F 54D028              +54 	lx	CHAINS+8, b, i		. connections * 24w + 40w
00:004490 800004              +55 	ax	a
  :                            56 
  :                            57 					. rx buffer start
00:004491 8005DD              +58 	ax	(BSOCKET*/18s)		. offset by connections tank
00:004492 6005DE              +59 	la	(262144)
  :                            60 
00:004493 750043              +61 	ii	BANK$
00:004494 20F008              +62 	sa	caller_ab67		. and that's where is is on return
00:004495 C604CC              +63 	jza	data_x			. zero result
  :                            64 
00:004496 6805A2              +65 	lb	(0400000s)		. now has port-dedicated segment+tcb storage
00:004497 98B004              +66 	orB	so:flags, y
00:004498 28B004              +67 	sb	so:flags, y
  :                            68 
00:004499 48B007              +69 	lk	so:tcp:rxowner, y	. waiting socket owner thread if any
00:00449A 20B005              +70 	sa	so:tcp:tbase, y
00:00449B 10B006              +71 	sx	so:tcp:rxbu_p, y
00:00449C 6805DF              +72 	lb	(BSOCKET*/18++131072:s)
00:00449D 28B007              +73 	sb	so:tcp:txbu_p, y
  :                            74 
00:00449E 580004              +75 	ly	a			. drop port socket address window
00:00449F 602185              +76 	la	tcx_v4(1)		. open 1st transmissions table
00:0044A0 34002F              +77 	sabr	BSOCKET			. get maintenance chain head pointer
00:0044A1 4085E0              +78 	lr	*(BSOCKET*/12++tlist:link)	. from 1st transmissions table
00:0044A2 1885E0              +79 	sy	*(BSOCKET*/12++tlist:link)	. replace chain head pointer
00:0044A3 600003              +80 	la	y
  :                            81 					. drop addressing to 1st transmissions table
00:0044A4 34002F              +82 	sabr	BSOCKET			. prime the new connections + buffers array
00:0044A5 0085E0              +83 	sr	*(BSOCKET*/12++tlist:link)	. maintenance chain point forward
00:0044A6 1085E1              +84 	sx	*(BSOCKET*/18++tlist:rxbu_p:s)	. upper limit transmission blocks
00:0044A7 2885E2              +85 	sb	*(BSOCKET*/18++tlist:txbu_p:s)	. + rx + tx buffer pointers
00:0044A8 0885E3              +86 	sk	*(BSOCKET*/18++tlist:rxowner:s)	. thread control block waiting socket owner
00:0044A9 10F006              +87 	sx	caller_rkxy+2
  :                            88 
00:0044AA 3085E4              +89 	z	*(BSOCKET*/12++tlist:txchain)	. zero forward pointer
  :                            90 						. in frames transmission list
  :                            91 
00:0044AB 600005              +92 	la	b			. start of tx buffer
00:0044AC D00002              +93 	ana	x			. minus start of rx buffer
00:0044AD FF05E5              +94 	call	(far_initpool)
  :                            95 
00:0044AE 5005DF              +96 	lx	(BSOCKET*/18++131072:s)
00:0044AF 6005E6              +97 	la	(131072)
00:0044B0 FF05E5              +98 	call	(far_initpool)
  :                            99 
00:0044B1 5005DD              +100 	lx	(BSOCKET*/18s)
00:0044B2 30A001              +101 	z	tlist:free
  :                            102 
  :                            103 .	z	tlist:link		. original ->null is rippled forward from 1st block
  :                            104 
00:0044B3 64A040              +105 	la	tlist:connection_block(2),,i		. 1st in block is q-concentrator
00:0044B4 20A002              +106 	sa	tlist:top
00:0044B5 60059E              +107 	la	(0800000s)
00:0044B6 20A006              +108 	sa	tlist:flags
  :                            109 
  :                            110 
  :                            111 					. this part configures the guideline segment size
  :                            112 					. for assignment if high-volume socket does
  :                            113 					. a stream transmit, i.e. without TCP_PSH
  :                            114 					. in order to construct output serially
  :                            115 					. the derived figure is stored in concentrator connection
  :                            116 					. (a transmission control block which is not a connection):
  :                            117 
  :                            118 					. 	tlist:connection_block(1):mss
  :                            119 
  :                            120 					. and is not the MSS derived as a function of MTU
  :                            121 
00:0044B7 68F00C              +122 	lb	connections		. retrieve maximum connections
00:0044B8 2E0004              +123 	sbl	4			. let each connection occupy 2 descriptors
00:0044B9 6005E7              +124 	la	(131072-264)		. TX block minus management chains
00:0044BA D00005              +125 	ana	b			. minus estimated frame descriptors
00:0044BB 16001D              +126 	dsr	24+5			. available words / 32 = avaliable blocks
00:0044BC F0F00C              +127 	d	connections		. / maximum connections
00:0044BD 260006              +128 	sal	6			. bytes * blocks 
00:0044BE C5FFB8              +129 	aa	-20-20-32,,xi		. protocol headers frame header / preamble
  :                            130 
00:0044BF 2085E8              +131 	sa	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            132 
00:0044C0 450007              +133 	lr	CHAINS//4-1,,xi
00:0044C1 160030              +134 	dsr	48
00:0044C2 C70006              +135 	ds	6
  :                            136 
00:0044C3 47A008              +137 data_qz	qs	tlist:chain(1)
00:0044C4 850004              +138 	ax	4,,xi
00:0044C5 1E04C3              +139 	jdr	data_qz
  :                            140 
00:0044C6 5005DD              +141 	lx	(BSOCKET*/18s)
  :                            142 
00:0044C7 4FF000              +143 	ql	bound_address
00:0044C8 47A02E              +144 	qs	tlist:connection_block(1):socket_address
00:0044C9 30A02B              +145 	z	tlist:connection_block(1):tsq
00:0044CA 30A038              +146 	z	tlist:connection_block(1):receiveq:head
00:0044CB 30A03E              +147 	z	tlist:connection_block(1):q4ack:head
  :                            148 
00:0044CC 87F000              +149 data_x	qpop	0, sp
00:0044CD 870000              +150 	qpop	r
00:0044CE 870004              +151 	qpop	a
00:0044CF 17000F              +152 	inc	sp			. drop connections word
00:0044D0 3D0000              +153 	fret	0
  :                            154 
  :                            155 $(67::,y)
43:000000                     +156 array	$socket_array
43:000001                     +156 
43:000002                     +156 
43:000003                     +156 
43:000004                     +156 
  :                            157 
  :                            158 $(66::,x)
42:000000                     +159 transmission tcp_connection
42:000001                     +159 
42:000002                     +159 
42:000003                     +159 
42:000004                     +159 
42:000005                     +159 
42:000006                     +159 
42:000008                     +159 
42:00000A                     +159 
42:00000C                     +159 
42:00000E                     +159 
42:000010                     +159 
42:000011                     +159 
42:000012                     +159 
42:000013                     +159 
42:000014                     +159 
42:000015                     +159 
42:000016                     +159 
42:000017                     +159 
  :                            160 
  :                            161 $(0)
  :                            162 
00:0044D1 FF05E9              +163 qreadq	call	(hvsocket_readq)
00:0044D2 5085EA              +164 	lx	*(BSOCKET*/12++tlist:rxbu_p)
00:0044D3 700004              +165 	tz	a
00:0044D4 FF059B              +166 	call	(if_sell1)
00:0044D5 350000              +167 	lret	0
  :                            168 
  :                            169 .	vector name hvsocket:rx
  :                            170 
                                rx	$head_far	 params(sockets_p,	int	;
                                				tcb_p,		int	;
                                				buffer,		int	;
                                				data_bytes,	int	;
  :                            175 				rx_flags,	int	)
  :                            176 
00:0044D6 60F003              +177 	la	sockets_p		. the port number
00:0044D7 FF05EB              +178 	call	(connection_array)
00:0044D8 B604EE              +179 	j	rx_type_wrong		. port wrong for this operation
  :                            180 
00:0044D9 6085EC              +181 	la	*(BSOCKET*/12++tlist:connection_block(1)+transmission:receiveq.head)
00:0044DA C604EE              +182 	jza	rx_all_read
00:0044DB 58C007              +183 	ly	descriptor:tcbloc, a
00:0044DC 18F004              +184 	sy	tcb_p			. for now the parameter is wildcard
00:0044DD 58C006              +185 	ly	descriptor:apdata, a
00:0044DE 68C003              +186 	lb	descriptor:bytes, a
00:0044DF A805ED              +187 	andB	(03FFFFF)
00:0044E0 DE04E3              +188 	jnzb	rx_nonzero
00:0044E1 3E04D1              +189 	lcal	qreadq
00:0044E2 B604EF              +190 	j	rx_zero
  :                            191 
  :                            192 rx_nonzero
00:0044E3 400005              +193 	lr	b
00:0044E4 50F006              +194 	lx	data_bytes
00:0044E5 F604E7              +195 	jxge	space_allowed
00:0044E6 40F006              +196 	lr	data_bytes		. accept less than the message
  :                            197 
  :                            198 space_allowed
00:0044E7 00F006              +199 	sr	data_bytes
00:0044E8 50F005              +200 	lx	buffer
00:0044E9 3E0513              +201 	lcal	block_read
  :                            202 
00:0044EA 78F007              +203 	tp	rx_flags
00:0044EB B604F0              +204 	j	rx_result		. don't drop the input
  :                            205 
00:0044EC 3E04D1              +206 	lcal	qreadq			. do drop the input
00:0044ED B604F0              +207 	j	rx_result
  :                            208 
  :                            209 rx_type_wrong
  :                            210 rx_all_read
00:0044EE 30F004              +211 	z	tcb_p			. tell caller no traffic these connections
00:0044EF 30F006              +212 rx_zero	z	data_bytes		. tell caller no traffic or remote close
  :                            213 
  :                            214 rx_result
00:0044F0 650000              +215 	la	0,,xi
00:0044F1 34002F              +216 	sabr	BSOCKET			. close the gate
00:0044F2 60F006              +217 	la	data_bytes		. report how many bytes
00:0044F3 68F004              +218 	lb	tcb_p			. connection identifier
00:0044F4 3D0000              +219 	$ret
  :                            220 
  :                            221 .	vector name hvsocket_tx
  :                            222 
                                tx	$head_far	 params(socket_p,	int	;
                                				socket_q,	int	;
                                				response,	int	;
                                				bytes,		int	;
                                				xmit_flags,	int)	;
                                							;
00:0044F5 8F0014              +229 			scalars(caller_rdatac,	float,	RDATAC)
  :                            230 
  :                            231 
00:0044F6 60F007              +232 	la	socket_p	. port #
00:0044F7 FF05EB              +233 	call	(connection_array)
00:0044F8 B60508              +234 	j	tx_mismatch
  :                            235 
00:0044F9 50F008              +236 	lx	socket_q	. connection->
00:0044FA 60A007              +237 	la	transmission:socket_address+1
00:0044FB A005BC              +238 	and	(00FFFF)
00:0044FC B0F007              +239 	xor	socket_p
00:0044FD D60508              +240 	jnza	tx_mismatch	. well it should be the same
  :                            241 
  :                            242 .	lb	response
  :                            243 .	sb	q
  :                            244 	$do	0,	lcal	wherefore
  :                            245 
00:0044FE 60F00B              +246 	la	xmit_flags
00:0044FF A50008              +247 	and	TCP_PSH,,xi
00:004500 955010              +248 	or	05000++TCP_ACK,,xi
00:004501 480004              +249 	lk	a
00:004502 68F009              +250 	lb	response
  :                            251 .	sb	SOCKET_CALL_FLAGS
  :                            252 .	jnza	txx		. segment size is transmission size @ socket
  :                            253 				. mss allows some accumulation instead
  :                            254 
  :                            255 .	la	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            256 .	sa	transmission:mss
  :                            257 
00:004503 60F00A              +258 txx	la	bytes
00:004504 FF05EE              +259 	call	(tcp_tx)
  :                            260 	$do	0,	lcal	wherefore
00:004505 C60507              +261 	jza	tx_zero
00:004506 A60508              +262 	jpa	tx_complete
  :                            263 
  :                            264 tx_zero
  :                            265 tx_minus
  :                            266 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outerrs,0,xi	1,,xi
  :                            267 
00:004507 B60508              +268 	j	tx_complete
  :                            269 
  :                            270 tx_mismatch	
  :                            271 	$do	0,	lcal	wherefore
  :                            272 .	c	(tx_mib_update)	$if0p+INTERFACES+2+__IF_SIZE*5-__IF_SIZE+this_if:outdrops,0,xi	1,,xi
  :                            273 
  :                            274 tx_complete
00:004508 870014              +275 	qpop	RDATAC		. stream / simd registers saved at function head
00:004509 3D0000              +276 	fret	0
  :                            277 
  :                            278 .	vector name hvsocket_close closes a connection
  :                            279 
                                close	$head_far	 params(close_hvport,		int	;
  :                            281 				close_connection,	int	)
  :                            282 
00:00450A 60F003              +283 	la	close_hvport
00:00450B FF05EB              +284 	call	(connection_array)
00:00450C B60511              +285 	j	close_y
00:00450D 50F004              +286 	lx	close_connection
00:00450E 0FA001              +287 	n	transmission:state
00:00450F 650000              +288 	la	0,,xi
00:004510 B60512              +289 	j	close_z
  :                            290 
00:004511 65FFEA              +291 close_y	la	-BAD_ARGUMENT,,xi
00:004512 3D0000              +292 close_z	$ret
  :                            293 
  :                            294 	$if	0
  :                            295 wherefore
  :                            296 	lb     -061,,xi
  :                            297 	ab     sp
  :                            298 	jnzb   weh
  :                            299 	lb     -0a6,,xi
  :                            300 	ab     6, sp
  :                            301 	jnzb    weh
  :                            302 	lret	0
  :                            303 weh	ii     GUARD$
  :                            304 	$endif
  :                            305 
  :                            306 block_read
00:004513 680000              +307 	lb	r
00:004514 6CD001              +308 	lb	1, b, i		. containing transfer size
00:004515 0E0001              +309 	sbr	1		. in socket buffer words
00:004516 F80005              +310 	push	b		. save containing network words
00:004517 F80003              +311 	push	y		. save network string start
  :                            312 
00:004518 4805BC              +313 	lk	(00FFFF)
00:004519 E805EF              +314 	mf	(0555556)	. one third downrounded
  :                            315 				. words in socket buffer
  :                            316 
00:00451A 400004              +317 	lr	a
00:00451B B60523              +318 	j	read6?
  :                            319 
00:00451C CFB000              +320 read6	dl	0, y		. compress 3 socket buffer words
00:00451D 2E0008              +321 	sbl	8
00:00451E 360008              +322 	dsl	8
00:00451F BFB002              +323 	mlb	2, y
00:004520 C7A000              +324 	ds	0, x
00:004521 850002              +325 	ax	2,,xi
00:004522 8D0003              +326 	ay	3,,xi
00:004523 1E051C              +327 read6?	jdr	read6
  :                            328 
00:004524 380000              +329 	pop	r		.   socket buffer containing words
00:004525 2F0000              +330 	popA	r		. + socket buffer start = rx limit
  :                            331 
00:004526 FE0532              +332 	jyge	read_0		. all rx words are read
00:004527 1F0000              +333 	dec	r		. already read
00:004528 FE052E              +334 	jyge	read_1		. to 1 word less than transfer?
  :                            335 
00:004529 CFB000              +336 	dl	0, y		. not zero words and not 1 word
00:00452A 2E0008              +337 	sbl	8		. = 2 words
00:00452B 360008              +338 	dsl	8		. compress them
00:00452C C7A000              +339 	ds	0, x		. that leaves 2 trailing zero bytes
00:00452D 350000              +340 	lret	0		. whether data is string text or not
  :                            341 
00:00452E 60B000              +342 read_1	la	0, y		. 1 more input word
00:00452F 260008              +343 	sal	8		. align to packed input
00:004530 20A000              +344 	sa	0, x		. that leaves 1 trailing zero byte
00:004531 350000              +345 	lret	0		. whether data is string text or not
  :                            346 
00:004532 30A000              +347 read_0	z	0, x		. guarantee at least 1 zero byte
00:004533 350000              +348 	lret	0		. whether data is string text or not
  :                            349 
  :                            350 .	vector name	hvsocket_readq
  :                            351 .	does not release the buffer
  :                            352 .	hvsocket_rx without flag 800000 calls this then sell1
  :                            353 
00:004534 5005F0              +354 readq	lx	(BSOCKET*/12++tlist:connection_block(1))
00:004535 FD0007              +355 	LOCK	transmission:tsq
00:004536 27F000              +355 
00:004537 07A003              +355 
00:004538 B60537              +355 
00:004539 60A010              +356 	la	transmission:receiveq.head
00:00453A C6053D              +357 	jza	readq_clear
00:00453B F8C000              +358 	push	descriptor:next, a
00:00453C 38A010              +359 	pop	transmission:receiveq.head
  :                            360 
  :                            361 readq_clear
00:00453D 30A003              +362 	FREE	transmission:tsq
00:00453E 27F000              +362 
00:00453F 17000F              +362 
00:004540 3D0000              +363 	fret	0
  :                            364 
  :                            365 .	vector name	connection_array
  :                            366 
00:004541 FF05F1              +367 locate	call	(__tcp_socket)
00:004542 C6054A              +368 	jza	not_assigned
00:004543 60D004              +369 	la	so:flags			. high volume port?
00:004544 A6054A              +370 	jpa	not_high_volume			. no
00:004545 A005A2              +371 	and	(0400000)			. memory assigned?
00:004546 C6054A              +372 	jza	not_initialised			. no
00:004547 60D005              +373 	la	so:tcp:tbase
00:004548 34002F              +374 	sabr	BSOCKET
00:004549 3D0001              +375 	fret	1				. available and based
  :                            376 
  :                            377 not_assigned
  :                            378 not_high_volume
  :                            379 not_initialised
00:00454A 3D0000              +380 	fret	0				. not available
  :                            381 
                                xbind	$head_far	 params(xbind_port1,	int	;
                                				xbind_portz,	int	;
  :                            384 				xbind_spring_q,	int	)
  :                            385 
  :                            386 xbind_next
00:00454B 50F003              +387 	lx	xbind_port1
00:00454C 40F004              +388 	lr	xbind_portz
00:00454D F60564              +389 	jxge	xbindx
00:00454E 600002              +390 	la	x
00:00454F 17F003              +391 	inc	xbind_port1
  :                            392 		
00:004550 FF05F1              +393 	call	(__tcp_socket)
00:004551 C6054B              +394 	jza	xbind_next
00:004552 60D004              +395 	la	so:flags
00:004553 A6054B              +396 	jpa	xbind_next
00:004554 A005A2              +397 	and	(0400000)			. dedicated storage assigned?
00:004555 580005              +398 	ly	b
00:004556 C6055F              +399 	jza	pending_1st_traffic		. not yet
00:004557 60D005              +400 	la	so:tcp:tbase		
00:004558 34002F              +401 	sabr	BSOCKET
00:004559 040041              +402 	inA	65				. thread control block <- connection array
  :                            403 
00:00455A 5005DD              +404 	lx	(BSOCKET*/18s)
  :                            405 
00:00455B 20A007              +406 	sa	tlist:rxowner, x
00:00455C 60F005              +407 	la	xbind_spring_q
00:00455D 20A031              +408 	sa	tlist:connection_block(1):remote_address+1
  :                            409 
00:00455E B6054B              +410 	j	xbind_next
  :                            411 
  :                            412 pending_1st_traffic			. dedicated storage first assigned on traffic
00:00455F 040041              +413 	inA	65			. thread control block
00:004560 20B007              +414 	sa	so:tcp:rxowner, y	. cached in socket structure until then
  :                            415 
00:004561 60F005              +416 	la	xbind_spring_q
00:004562 20B003              +417 	sa	so:remote_address+1, y
  :                            418 
00:004563 B6054B              +419 	j	xbind_next
  :                            420 	
00:004564 3D0000              +421 xbindx	$ret
  :                            422 
  :                            423 write_rxq
00:004565 F80002              +424         push    x
00:004566 10C007              +425         sx      descriptor:tcbloc, a    . needed later
00:004567 5005F0              +426         lx      (BSOCKET*/12++tlist:connection_block(1)
  :                            427 
00:004568 FD0007              +428         LOCK    transmission:tsq
00:004569 27F000              +428 
00:00456A 07A003              +428 
00:00456B B6056A              +428 
00:00456C 5CA010              +429         ly      transmission:receiveq,,i
  :                            430 
00:00456D 30C000              +431 	z	descriptor:next, a
00:00456E 70B000              +432         tz	rxq2:head
00:00456F B60572              +433 	j	write_rxq_tail
00:004570 20B000              +434 	sa	rxq2:head 
00:004571 B60574              +435 	j	write_after_rxq_tail
  :                            436 write_rxq_tail
00:004572 68B001              +437 	lb	rxq2:tail
00:004573 20D000              +438 	sa	descriptor:next, b
  :                            439 write_after_rxq_tail
00:004574 20B001              +440 	sa	rxq2:tail
  :                            441 
00:004575 6085F2              +442         la      *(BSOCKET*/12++tlist:rxowner)
00:004576 C60578              +443         jza     tcp_free_rxq            . no-one asked to know
00:004577 3E057D              +444         lcal    notify			. new receiveq:head this connection array
  :                            445 
  :                            446 tcp_free_rxq
00:004578 30A003              +447         FREE    transmission:tsq
00:004579 27F000              +447 
00:00457A 17000F              +447 
00:00457B 380002              +448         pop     x
00:00457C 3D0000              +449 	fret	0
  :                            450 					. inbound segment queue-write
  :                            451 					. calls notify under lock
  :                            452 					. x -> connection block(1) of connnection table
00:00457D 6805F3              +453 notify	lb	(TIME_WAIT++ACTIVATE:s)
00:00457E 75005D              +454 	ii	EVENT_FREE$
  :                            455 
  :                            456 	$if	__SPRING_LOAD
  :                            457 	la	transmission:remote_address+1
  :                            458 	jza	notification_not_listed
  :                            459 	tp	transmission:state
  :                            460 	j	notification_queued
  :                            461 	n	transmission:state
  :                            462 	c	(spring_load)	a	0,,BASE_SOCKET	. [ tumble_page connections_table ]
  :                            463 
  :                            464 notification_queued
  :                            465 notification_not_listed
  :                            466 	$endif
  :                            467 
00:00457F 350000              +468 	lret	0
  :                            469 
  :                            470 	$root
  :                            168: 	$include	t77.4/window
  :                            1 
  :                            2 window	$tree
00:004580 8F0000              +3 	qpush	r				. calulate in b
  :                            4 						. return calculated window in b
  :                            5 	$if	0
  :                            6 	tz	transmission:receiveq:head	. dont get above 2 segments
  :                            7 	j	zero				. waiting pro connection
  :                            8 	$endif
  :                            9 
00:004581 5885E1              +10 	ly	*(+(BSOCKET*/18++tlist:rxbu_p)s)
00:004582 68B001              +11 	lb	pool:next, y
00:004583 D8D001              +12 	anb	descriptor:frame, b		. free buffer above heap top
  :                            13 
  :                            14 						. the more stringent path for
  :                            15 						. for better service durability
  :                            16 						. read log MAXIMUM connections
  :                            17 
00:004584 6085F4              +18 	la	*(+(BSOCKET*/18++tlist:connection_block(1):timer(2))s)
00:004585 0EC005              +19 	sbr	5, a				. convert to blocks / maximum connections
00:004586 2E0006              +20 	sbl	6				. -> bytes / maximum connections
00:004587 CDFF28              +21 	ab	-40*3-32*3,,xi			. subtract likely overheads
00:004588 5E058E              +22 	jnc	zero				. carry is zero+
  :                            23 
00:004589 400005              +24 	lr	b				. is the allowed window larger than MSS for i / f ?
00:00458A 5085E8              +25 	lx	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)	. this isn't likely based on
  :                            26 						.			. MAXIMUM connections
00:00458B F6058F              +27 	jxge	final				. not larger, no
00:00458C 680002              +28 	lb	x
00:00458D B6058F              +29 	j	final
  :                            30 
  :                            31 						. forget counting freechains
  :                            32 						. you have a buffer pool free-heap compressor
  :                            33 						. working hard to do that			
  :                            34 
00:00458E 6D0000              +35 zero	lb	0,,xi
00:00458F 870000              +36 final	qpop	r				. calculation returns in b
00:004590 3D0000              +37 	fret	0
  :                            38 
  :                            39 	$root
  :                            169 
  :                            170 	$path
  :                            171 	$endif
  :                            172 
  :                            173 
  :                            174 
  :                            175 net_callstring
  :                            176 
  :                            177 .	vector name	tnet_callstring
  :                            178 
00:004591 F80004              +179 	push		a
00:004592 340020              +180 	sabr		32
00:004593 50A010              +181 	lx		transmission:receiveq:head
00:004594 40A003              +182 	lr		descriptor:bytes, x
00:004595 58A006              +183 	ly		descriptor:apdata, x
00:004596 5005F5              +184 	lx		(32*/12++APP_CALL_STRING-01000)
  :                            185 	
00:004597 3E0513              +186 	lcal		hvsocket:block_read
  :                            187 
00:004598 380004              +188 	pop		a
00:004599 3D0000              +189 	fret		0
  :                            190 
  :                            191 	$do	$<256,$(0:256)
  :                            192 	$do	$zenith>4096,	$flag	driver bank literal table partly invisible
  :                            193 
*EOF*
00:00459a+[0000]18:000000
00:00459b+[0001]18:000000
00:00459c+008000
00:00459d+820000
00:00459e+800000
00:00459f+02F004
00:0045a0+000104
00:0045a1+01FC00
00:0045a2+400000
00:0045a3+400002
00:0045a4+000000000000000000006969
00:0045a8+840000
00:0045a9+00000A4C4B40
00:0045ab+1FFFC0
00:0045ac+40003F
00:0045ad+[0004]18:000000
00:0045ae+000000
00:0045af+00006C
00:0045b0+000001
00:0045b1+000105
00:0045b2+000000000000000000000000
00:0045b6+000106
00:0045b7+000107
00:0045b8+00010C00010A00010900010B
00:0045bc+00FFFF
00:0045bd+000131
00:0045be+000040
00:0045bf+[000D]18:000000
00:0045c0+[000E]18:000000
00:0045c1+[000F]18:000000
00:0045c2+124F80
00:0045c3+00010A
00:0045c4+000001000800
00:0045c6+000604
00:0045c7+000000000000000000000000000000000000000000000000
00:0045cf+00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF
00:0045d7+[0010]18:000000
00:0045d8+00FFFF00FFFF
00:0045da+[0011]18:000000
00:0045db+060000
00:0045dc+[0012]18:000000
00:0045dd+BC0000
00:0045de+040000
00:0045df+BE0000
00:0045e0+02F000
00:0045e1+BC0003
00:0045e2+BC0004
00:0045e3+BC0007
00:0045e4+02F005
00:0045e5+[0013]18:000000
00:0045e6+020000
00:0045e7+01FEF8
00:0045e8+BC002A
00:0045e9+000134
00:0045ea+02F003
00:0045eb+000135
00:0045ec+02F038
00:0045ed+3FFFFF
00:0045ee+[0014]18:000000
00:0045ef+555556
00:0045f0+02F028
00:0045f1+[0015]18:000000
00:0045f2+02F007
00:0045f3+800020
00:0045f4+BC002D
00:0045f5+020C00
:$(00):004000:0045F6 :$(01):000000:0001AC :$(02):002000:003000 :$(42):000000:000018 :$(43):000000:000005 :$(45):000000:000008 :$(47):000000:00000A 
drivers.msm: object code 13017 bytes: 0 errors: 22 undefined labels

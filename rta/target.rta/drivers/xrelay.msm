.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

IFT1_RX_BASE	$equ	32
IFT1_TX_BASE	$equ	32

IFT1_RPAGEW	$equ	1024
IFT1_TPAGEW	$equ	1024

IFT1_RPAGES	$equ	128
IFT1_TPAGES	$equ	128


$(67::, y)
networkframe	delivery


$(0)

ift1_rxtx
	la	this_if:ift1:base_rx
	ii	XBASE$32
	ly	this_if:ift1:rx_cursor
	
frames?	dl	networkframe:flag	. 2nd word in B is total frame length
				. this may include the length of
				. a 2-byte protocol family tag
				. appended to the front of a dgram
				. which has no MAC header

	and	(008000)

	jza	next_interface	. capture not complete

	la	networkframe:ll_hl	. link layer header length

	MIB_ACOUNT48	this_if:inoctets	b
	MIB_ICOUNT48	this_if:inpackets

	sy	fp
	ly	networkframe:frame,,i	. offset descriptor->frame

	anb	a		. net datagram length
	jnc	frame_complete	. less than llh length!
	lr	b		. datagram length bytes

				. the protocol family tag
				. is mostly the word
				. before the datagram

				. either because there is
				. a DIX MAC header, or
				. a similar encapsulation
	la	1,a,i		. round up
	sar	1		. byte count to word count
				. only two bytes per word
				. in packet data

				. MAC header / TAG must
				. be even # bytes

	ay	a

	la	networkframe:protocol, fp		. load the protocol TAG


	push	fp
	push	x

	lx	networkframe:interface, fp	. whatever sort of frame this is
	ax	$if2p,,xi
	lx	0, x			. it goes to this logical interface

	call	(frame_to_protocol)

	dpop	x

frame_complete
	z	networkframe:flag
	ay, xi	RPAGEW
	la	y


	$if	RPAGEW*RPAGES>262144

	ana	(RX_BASE+1*/18:s)
	jnc	frames?
	ly	(RX_BASE*/18++RPAGEW*0:s)

	la	base_rx
	aa, xi	64

	lk	(03FFFC0)
	mta	(RPAGEW*RPAGES/*18-6:s)
	j	$+2
	and	(0C0003F)
	sa	base_rx
	sabr	RX_BASE
	
	$else

	ana	(RX_BASE*/18++RPAGEW*RPAGES:s)
	jnc	frames?
	ly	(RX_BASE*/18++RPAGEW*0:s)

	$endif

	j	frames?
	
next_interface
	sy	this_if:ift1:rx_cursor


txq_ift1_relay
	dl	this_if:ift1:base_tx, x
	ii	XBASE$32
	la	this_if:mtu, x
	sa	MTU

	sb	fp

txq_ift1_otraffic?		
	tz	networkframe:flag, fp	. assure an interface slot
	j	txq_next_interface	. not yet, next device array


	lcal	readifq			. dequeue a TX frame
	jza	txq_next_queue		. from default socket buffer pool
	push	a			. completely detach descriptor from queue before

	lcal	txq_ift1_oframe
	lcal	txq_ift1_next_frame

	pop	a			. recover descriptor

	tp	descriptor:bytes, a
	j	txq_ift1_otraffic?

	push	x
	lx	tx_buffers
	call	(if_sell1)
	pop	x

	j	txq_ift1_otraffic?

txq_next_queue				. always an interface slot
					. free when arriving here
	$if	HVSOCKET

	lcal	rqtxL			. dequeue a TX frame
	jza	txq_next_interface	. if there is one
	push	a
	lcal	txq_ift1_oframe
	lcal	txq_ift1_next_frame
	pop	a
	tp	descriptor:bytes, a	. protocol wants to keep buffer?
	j	txq_next_if_space?	. yes
	push	x
	lx	*(BSOCKET*/12++tlist:txbu_p)
	call	(if_sell1)
	pop	x

txq_next_if_space?
	tz	networkframe:flag, fp	. is another interface slot free?
	j	txq_next_interface	. if not
	j	txq_next_queue		. but if so dequeue another TX frame

	$endif	. HVSOCKET

txq_next_interface

	fret	0

mplex_tx				. just in case
	fret	0			. a call is made by mistake


txq_ift1_oframe
				
	lb	descriptor:i_f, a	. translate RTA  interface number to osserv interface number
	jnb	txq_ift1_jumbo_master	. datagram has been transmitted in fragments

	ab	-2,,xi			. xlate RTA1 i_f:id to trunk i_f:i_d in frame descriptor
	jpb	txq_ift1_oframe_ahead	. ift2 sometimes loses this id. mark it for repeat route / send
	$do	1,	ii	GUARD$

txq_ift1_jumbo_master
	lb	descriptor:frame, a	. mark it transmitted
	 tn	nframe:stack_index, b
	 ii	GUARD$
	z	nframe:stack_index, b	. so it may be retransmitted
	lret	1			. skip call to update interface buffer pointer

txq_ift1_oframe_ahead 
	sb	networkframe:interface, fp

	la	descriptor:frame, a	. transfer protocol tag to interface buffer header

	push	nframe:frame_axw(1):bytes, a
	pop	networkframe:ll_hl, fp

	push	nframe:llh:generic:protocol, a
	pop	networkframe:protocol, fp	. leaving frame pointer in a

	push	x				. save interface pointer
	lx	networkframe:frame, fp, i	. write pointer in interface slot
	call	(if_dualport_txwrite)
	pop	x				. retrieve  interface pointer

	push	TX_DATAGRAML		. release interface buffer for transmission
	pop	networkframe:frame_length, fp
	push	(008000)
	pop	networkframe:flag, fp

        MIB_ACOUNT48    this_if:outoctets       TX_DATAGRAML
        MIB_ICOUNT48    this_if:outpackets

txq_ift1_2x
	lret	0

txq_ift1_next_frame
	lb, xi	IFT1_TPAGEW
	ab	fp
	andB	(IFT1_TPAGES*IFT1_TPAGEW-IFT1_TPAGEW:s)
	orB	(IFT1_TX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
	
	sb	fp
	sb	this_if:ift1:tx_cursor, x
	lret	0

rxq_ift1_next_frame
	ly, xi	IFT1_RPAGEW
	ay	fp
	lb	y
	anb	(IFT1_RX_BASE*/18++IFT1_RPAGES*IFT1_RPAGEW:s)
	jnc	$+2
	ly	(IFT1_RX_BASE*/18:s)
	sy	fp
	sy	this_if:ift1:rx_cursor, x
	lret	0

start_ift1
	sa	this_if:flags
	lb	(0400000)
	orB	y
	sb	this_if:ift1:base_rx
	sb	this_if:ift1:base_tx
	fret	0

.	called only on system restart
.	so no settings are saved
.	requests external interface service to restart
.	to match automatic resynchronisation at this end

.	it's the only time a CONFIGURATION_PROTOCOL frame is output
.	so it doesn't need much detail


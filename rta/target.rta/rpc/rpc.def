PORTMAPPER_PORT	$equ	111
NFS_SERVERPORT	$equ	2049
MOUNTD_PORT	$equ	1023

PMAP_PROGRAM	$equ	100000
RSTATD		$equ	100001
RUSERSD		$equ	100002
NFSD		$equ	100003
RSTATD_		$equ	100004
MOUNTD		$equ	100005
DBXD		$equ	100006
YPBIND		$equ	100007
WALLD		$equ	100008
YPASSWDD	$equ	100009
ETHERRSTATD	$equ	100010
RQUOTAD		$equ	100011
SPRAYD		$equ	100012
RSTATD__	$equ	100014
SELECTION_SVC	$equ	100015
DBSESSIONMGR	$equ	100016
REXD		$equ	100017
OFFICEAUTO	$equ	100018
LOCKDK		$equ	100020
LOCKD		$equ	100021
STATD		$equ	100024
BOORPARAMD	$equ	100026
PCNFSD		$equ	150001

PORTBIAS	$equ	97952

PMAP_VERS	$equ	2
MOUNT_VERS	$equ	3
NFS_VERS	$equ	3

PMAPPROC_NULL	$equ	0
PMAPPROC_SET	$equ	1
PMAPPROC_UNSET	$equ	2
PMAPPROC_GETPORT $equ	3
PMAPPROC_DUMP	$equ	4
PMAPPROC_CALLIT	$equ	5

MOUNTPROC_NULL	$equ	0
MOUNTPROC_MNT	$equ	1
MOUNTPROC_DUMP	$equ	2
MOUNTPROC_UMNT	$equ	3
MOUNTPROC_UMNTALL $equ	4
MOUNTPROC_EXPORT  $equ	5

NFSPROC_NULL	$equ	0
NFSPROC_GETATTR	$equ	1
NFSPROC_SETATTR	$equ	2
NFSPROC_ROOT	$equ	3
NFSPROC_LOOKUP	$equ	4
NFSPROC_READLINK $equ	5
NFSPROC_READ	$equ	6
NFSPROC_WRITECACHE $equ	7
NFSPROC_WRITE	$equ	8
NFSPROC_CREATE	$equ	9
NFSPROC_REMOVE	$equ	10
NFSPROC_RENAME	$equ	11
NFSPROC_LINK	$equ	12
NFSPROC_SYMLINK	$equ	13
NFSPROC_MKDIR	$equ	14
NFSPROC_RMDIR	$equ	15
NFSPROC_READDIR	$equ	16
NFSPROC_STATFS	$equ	17

NFS_OK		$equ	0
NFSERR_PERM	$equ	1
NFSERR_NOENT	$equ	2
NFSERR_IO	$equ	5
NFSERR_NXIO	$equ	6
NFSERR_ACCESS	$equ	13
NFSERR_EXIST	$equ	17
NFSERR_NODEV	$equ	19
NFSERR_NOTDIR	$equ	20
NFSERR_ISDIR	$equ	21
NFSERR_FBIG	$equ	27
NFSERR_NOSPC	$equ	28
NFSERR_ROFS	$equ	30
NFSERR_NAMETOOLONG $equ	63
NFSERR_NOTEMPTY	$equ	66
NFSERR_DQOT	$equ	69
NFSERR_STALE	$equ	70
NFSERR_WFLUSH	$equ	99

NFNON		$equ	0
NFREG		$equ	1
NFDIR		$equ	2
NFBLK		$equ	3
NFCHR		$equ	4
NFLNK		$equ	5


.	all structures defined according socket buffer format
.	where storage per data word is 1 zero octet then 2 data octets

.	_____________________________________
.	| 0000 0000 | data bits | data bits | 
.	|___________|___________|___________|
.	  23          17          8

.	updated structures for MOUNTD Version 3 + NFS Version 3
.	start at around line 405

XDR_FHANDLE_OCTETS $equ	32

p		$proc
xdr_fhandle*	$name
*		$tree
encoding	$res	12
fsn		$res	2
fn		$res	2
		$root
		$end

XDR_TIMEVAL_OCTETS $equ	8

p		$proc
xdr_timeval*	$name
*		$tree
seconds		$res	2
usecs		$res	2
		$root
		$end

XDR_FATTR_OCTETS $equ	3 * XDR_TIMEVAL_OCTETS + 22

p		$proc
xdr_fattr*	$name
*		$tree
ftype		$res	2
mode		$res	2
nlink		$res	2
uid		$res	2
gid		$res	2
size		$res	2
blocksize	$res	2
rdev		$res	2
blocks		$res	2
fsid		$res	2
fileid		$res	2
atime		xdr_timeval
mtime		xdr_timeval
ctime		xdr_timeval
		$root
		$end

XDR_SATTR_OCTETS $equ	16 + 2 * XDR_TIMEVAL_OCTETS

p		$proc
xdr_sattr*	$name
*		$tree
mode		$res	2
uid		$res	2
gid		$res	2
size		$res	2
atime		xdr_timeval
mtime		xdr_timeval
		$root
		$end

XDR_SATTRARGS_OCTETS $equ XDR_FHANDLE_OCTETS + XDR_SATTR_OCTETS 

p		$proc
xdr_sattrargs*	$name
*		$tree
fh		xdr_fhandle
attr		xdr_sattr
		$root
		$end


XDR_DIRPATH_OCTETS_BASE $equ 4

p		$proc
xdr_dirpath*	$name
*		$tree
nlen		+(0+p(2, 1))//4*4d
name		"p(1, 1)"
		$do	$-name**1,	0
		$root
		$end


XDR_DIROPARGS_OCTETS_BASE $equ	XDR_FHANDLE_OCTETS + XDR_DIRPATH_OCTETS_BASE

p		$proc
xdr_diropargs*	$name
*		$tree
fh		xdr_fhandle
name		xdr_dirpath	p(1, 1)	$bits/8
		$root
		$end


XDR_RDRES_OCTETS_BASE $equ 4 + XDR_FATTR_OCTETS

p		$proc
xdr_rdres*	$name
*		$tree
status		$res	2
attr		xdr_fattr
data
		$root
		$end


XDR_ATTRSTAT_OCTETS $equ 4 + XDR_FATTR_OCTETS

p		$proc
xdr_attrstat*	$name
*		$tree
status		$res	2
attr		xdr_fattr
		$root
		$end


XDR_DISOPRES_OCTETS $equ 4 + XDR_FHANDLE_OCTETS + XDR_FATTR_OCTETS

p		$proc
xdr_diropres*	$name
*		$tree
status		$res	2
fh		xdr_fhandle
attr		xdr_fattr
		$root
		$end

XDR_READDIRARGS_OCTETS $equ XDR_FHANDLE_OCTETS + 8

p		$proc
xdr_readdirargs* $name
*		$tree
fh		xdr_fhandle
cookie		$res	2
count		$res	2
		$root
		$end


XDR_READDIRRES_OCTETS_BASE $equ 4

p		$proc
xdr_readdirres*	$name
*		$tree
status		$res	2
data
		$root
		$end


XDR_FSINFO_OCTETS $equ	24

p		$proc
xdr_fsinfo*	$name
*		$tree
status		$res	2
tsize		$res	2
bsize		$res	2
blocks		$res	2
bfree		$res	2
bavail		$res	2
		$root
		$end


XDR_FHSTATUS_OCTETS $equ 4 + XDR_FHANDLE_OCTETS

p		$proc
xdr_fhstatus*	$name
*		$tree
status		$res	2
fh		xdr_fhandle
		$root
		$end


XDR_PMAPPING_OCTETS $equ 16

p		$proc
xdr_pmapping*	$name
*		$tree
program		$res	2
version		$res	2
protocol	$res	2
port		$res	2
		$root
		$end


XDR_MAPLISTELT_OCTETS $equ 4 + XDR_PMAPPING_OCTETS

p		$proc
xdr_maplistelt*	$name
*		$tree
flag		$res	2
mapping		xdr_pmapping	p(1)
		$root
		$end



p		$proc
xdr_maplist*	$name
*		$tree
eltlist
?		$do	p(),elt(?)	xdr_maplistelt
		$root
		$end


XDR_AUTH_VOID_OCTETS $equ 12

p		$proc
xdr_auth*	$name
*		$tree
flavour		0:d
opaquel		0:d
opaque		0:d
		$root
		$end


XDR_READARGS_OCTETS $equ XDR_FHANDLE_OCTETS + 12

p		$proc
xdr_readargs*	$name
*		$tree
fh		xdr_fhandle
offset		$res	2
count		$res	2
totalcount	$res	2
		$root
		$end


XDR_WRITEARGS_OCTETS_BASE $equ XDR_FHANDLE_OCTETS + 12

p		$proc
xdr_writeargs*	$name
*		$tree
fh		xdr_fhandle
bgo		$res	2
offset		$res	2
totalcount	$res	2
data
		$root
		$end


XDR_RPCREQ_OCTETS $equ	24

p		$proc
xdr_rpcreq*	$name
*		$tree
txid		$res	2
call		$res	2
rpcvers		$res	2
program		$res	2
programvers	$res	2
procedure	$res	2
auth		xdr_auth

request
diropargs	$branch
args		xdr_diropargs
		$root

readargs	$branch
args		xdr_readargs
		$root

writeargs	$branch
args		xdr_writeargs
		$root

		$root
		$end


XDR_RPCRESP_OCTETS_BASE $equ 24

p		$proc
xdr_rpcresp*	$name
*		$tree
txid		$res	2
resp		$res	2
rstat		$res	2

no		$branch
why		$res	2
in_detail	$res	2
		$root

yes		$branch
auth_verf	$res	6
astat		$res	2
response
		$root
		$root
		$end

NFSPROC3_NULL	$equ	NFSPROC_NULL
NFSPROC3_GETATTR $equ	NFSPROC_GETATTR
NFSPROC3_SETATTR $equ	NFSPROC_SETATTR
NFSPROC3_LOOKUP	$equ	3
NFSPROC3_ACCESS	$equ	4
NFSPROC3_READLINK $equ	5
NFSPROC3_READ	$equ	6
NFSPROC3_WRITE	$equ	7
NFSPROC3_CREATE	$equ	8
NFSPROC3_MKDIR	$equ	9
NFSPROC3_SYMLINK $equ	10
NFSPROC3_MKNOD	$equ	11
NFSPROC3_REMOVE	$equ	12
NFSPROC3_RMDIR	$equ	13
NFSPROC3_RENAME	$equ	14
NFSPROC3_LINK	$equ	15
NFSPROC3_READDIR $equ	16
NFSPROC3_READDIRPLUS $equ 17
NFSPROC3_FSSTAT	$equ	18
NFSPROC3_FSINFO	$equ	19
NFSPROC3_PATHCONF $equ	20
NFSPROC3_COMMIT	$equ	21

MOUNTPROC3_NULL	$equ	0
MOUNTPROC3_MNT	$equ	1
MOUNTPROC3_DUMP	$equ	2
MOUNTPROC3_UMNT	$equ	3
MOUNTPROC3_UMNTALL $equ	4
MOUNTPROC3_EXPORT $equ	5

p		$proc
xdr_fhandle3*	$name
*		$tree
bytes		$res	2
encoding
		$root
		$end

p		$proc
xdr_mountres3*	$name
*		$tree
fhandle		xdr_fhandle3
		$res	12		. mister your manners are jerst so fresh
auth_flavours	$res	2		. this displacement is true if fhandle:bytes = 24
auth
		$root
		$end
					. declarations follow as if fhandle3 were 4 + 0 octets
					. although they are never 4 + 0 and mostly 4 + 24
					. the 4 contains of course the handle opaque size  in octets
		$if	0
p		$proc
nfs3_result_attr* $name
*		$tree
result		$res	2		.
attributes	xdr_fattr3
		$root
		$end
		$endif

p		$proc
xdr_fattr3*	$name
*		$tree
type		$res	2		. { file=1, dir, block, char, link, sock, fifo }
mode		$res	2
nlink		$res	2
uid		$res	2
gid		$res	2
size		$res	4
used		$res	4
rdev		$res	4
fsid		$res	4
fileid		$res	4
atime		xdr_timeval
mtime		xdr_timeval
ctime		xdr_timeval
		$root
		$end

p		$proc
xdr_read3args*	$name
*		$tree
fhandle		xdr_fhandle3
offset		$res	4		. file size up to 1 */ 64
count		$res	2		. but transfer size up to 4G
		$root
		$end

p		$proc
xdr_read3res*	$name
*		$tree
file_attributes	post_op_attr		. if it went wrong you get that much
count		$res	2		. and if it went right you get these as well
eof		$res	2
data
		$root
		$end

p		$proc
xdr_write3args*	$name
*		$tree
fhandle		xdr_fhandle3
offset		$res	4
count		$res	2
write_stabilty	$res	2
data
		$root
		$end

p		$proc
pre_op_attr*	$name
*		$tree
yes		$branch
yes		$res	2
size		$res	4
mtime		$res	4
ctime		$res	4
		$root
no		$branch
no		$res	2
		$root
		$root
		$end

p		$proc
xdr_write3res*	$name
*		$tree
before		pre_op_attr
after		post_op_attr
count		$res	2
write_stability	$res	2
verf		$res	4
		$root
		$end

p		$proc
nfs3_lookup3res* $name
*		$tree
fhandle		xdr_fhandle3
contained	post_op_attr		. = result bool32 1 = yes + fattr3
container	post_op_attr		. ditto
		$root
		$end

p		$proc
sattr3*		$name
*		$tree
mode		$res	2		. if this is on mode3 information follows
uid		$res	2		.		uid3 follows if yes
gid		$res	2		.		gid3 follows if yes
size		$res	2		.		size3 follows if yes
atime		$res	2		.		xdr_timeval follows if yes
mtime		$res	2		.		"
		$root
		$end

p		$proc
createhow3*	$name
*		$tree
createmode3	$res	2		. 0 UNCHECKED 1 GUARDED, supply sattr3 [ 2 EXCLUSIVE createverf3 ]
guarded		$branch
obj_attributes	satt3
		$root
exclusive	$branch
verf		$res	4
		$root 
		$root
		$end

.	request arguments are { directory name how }

p		$proc
post_op_fh3*	$name
*		$tree
status		$res	2
fhandle		xdr_fhandle3	. if status came up shining
		$root
		$end

p		$proc
post_op_attr*	$name
*		$tree
status		$res	2
attr		xdr_fattr3
		$root
		$end

p		$proc
create3res*	$name
*		$tree
status		$res	2
ok		$branch
obj		post_op_fh3
attributes	post_op_attr
dir_wcc		post_op_attr
		$root
fail		$branch
dir_wcc		post_op_attr
		$root
		$root
		$end

p		$proc
authunix_blank*	$name
authunix	1L
octets		24L
stamp		0L
name		0L
uid		0L
gid		0L
gids		1L
gid1		0L
verf		0q
		$end

p		$proc	*
authunix*	$name
*		$tree
family		1L
octets		+	2*(solong-stamp)L
stamp		0L
name		0L
uid		+	p(1, 1)L
gid		+	p(1, 2)L
gids		+	p(1, 3:)L
?		$do	p(1, 3:),gidi(p(1, 3:?))	+	p(1, 3:?)
solong
verf		0q
		$root
		$end

RPC_UDP	$equ	0

	$list		0
	$path		../
	$include	def/rta.def
	$include	def/ii.def
	$include	def/vector.def
	$include	teraframe/fastarray.def
	$include	language/stack.def
	$include	stream/stream.def
	$include	image.app/imports.def
	$include	array.app/array.def
	$include	lib/ascii.def
	$path
	$list

$(1:01000/$1)
$(3:03000/$3)
high_window	$res	1
toplimit	$res	1
$(4:*1/$4)
	$lit
$(5:4*262144)
floating_array
	0.0
$(0:*1)
fixity*	$base_d	$zenith(3)-03000	1024

	fastarray$	4:31	*
	sx	high_window

	c	(seg$load)	0,,xi	(fixdata:L),,long

						. highest we got
	la	high_window			. if that's critical test jxl nothanks
	sal	18
	sa	toplimit

	$if	0
	lr	high_window
	lx	4,,xi
nextw	jxge	lastw
	lcal	illustrate
	ax	1,,xi
	j	nextw	
lastw
	$endif

	printf	$3("storage to %x %x":LF:0),,xi	high_window	toplimit

	ql	(1.0)
	lx	(floating_array)
	lr	toplimit

prime	jxge	primed
	fm	(4.75)
	qs	0, x
	ax	4,,xi
	j	prime

primed	printf	$3("highest component %f":LF:0),,xi	a,,float
	lx	(floating_array)
	lr	toplimit

	SIMD_CONTROL	(-1, 0, 28*262144/4-1, 4q)
	qpush	(0.0)
	rex	(fa	0, x)
	qpop	a
	
	printf	$3("%f [%x]":LF:0),,xi	a,,float x

	SIMD_CONTROL	(-1, 0, 0, 0q)

	ql	(0.0)
	qpush	a
	lr	(28*262144-1)

facto	fa	(1.0)		. increment component
	rex	(fa	a)	. add to stack top
	jdr	facto

	qpop	8
	printf	$3("highest component %f -> %f":LF:0),,xi	a,,float	8,,float

	$if	0
	ii	FP_XPO$FLAG
	lcal	clype
	$endif

	fret	0

	$if	0
clype	printf	$3("floating outflow detected":LF:0),,xi
	lret	0

illustrate
	push	x
	push	r
	inA	0, x
	printf	$3("%x -> %x":LF:0),,xi		x	a
	pop	r
	pop	x
	lret	0
	$endif

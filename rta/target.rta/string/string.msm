string8	$tree
strlena	$tree

	$head_far	 params(stringp,	int	)	;
			scalars(user_kxya,	float,	k	)		

	lk	+(1*/$byte)-1,,xi
	z	3, sp
	ly	stringp
readout	la	0, y
	mta	(0)
	j	maximum
count	jza	all
	sal	$byte
	inc	3, sp
	j	count
maximum	push	$word/$byte,,xi
	popA	4, sp
	ay	1,,xi
	j	readout
all	qpop	k
	fret	0
	$root

contain	$tree
	push	k
	push	0,,xi
	lk	+(1*/$byte)-1,,xi
	lx	0,,xi
	lb	0,,xi
reado	la	0, y
	mta	(0)
	j	allofit
countup	jza	thatwas
	drl	$byte
	inc	0, sp
	ax	$byte,,xi
	j	countup
allofit	push	$word/$byte,,xi
	popA	1, sp
	ay	1,,xi
	j	reado
thatwas	pop	a
	pop	k
	lret	0
	$root

bias	$tree
	$head_near	 params(string,		int		;
				newstring,	int	)	;
								;
			scalars(caller_k,	int,	k	)

.	b contains partial word eostring1, right justified
.	x = # data bits string1 in a

	lk	+(1*/$byte)-1,,xi

readbias
	ly	newstring
	inc	newstring
	la	0, y
	ly	string
	inc	string
	mtane	(0)
	j	last
	drr	0, x
	rbl	0, x
	sa	0, y
	j	readbias

last	drr	0, x
	sa	0, y
	mta	(0)
	sb	1, y

	pop	k
	lret	0


	$root

container $tree
	$head_far	 params(stringq,	int	)	;
			scalars(caller_xy,	long,	x	)

	ly	stringq
	lcal	string8:contain
	lb	y
	anb	stringq
	tz	x
	ab	1,,xi

	dpop	x
	fret	0	. return a = strlen b = containing words
	$root

strcatena $tree
	$head_far	 params(string1,	int		;
				string2,	int	)	;
			scalars(caller_xyab,	float,	x	)

	ly	string1
	lcal	string8:contain
	tz	x
	j	biased
	c	(strcpy)	y	string2
	j	strcatenz
biased	lc	string8:bias	y	string2	. x = rotate count, residual bits in b
strcatenz
	qpop	x
	fret	0
	$root


strcpya	$tree

	$head_far	 params(to_p,	int		;
				from_p,	int	)	;
			scalars(u_kxya,	float,	k	)

	lk	+(1*/$byte)-1,,xi
	lx	to_p
	ly	from_p
readin	la	0, y
	sa	0, x
	ax	1,,xi
	ay	1,,xi
	mta	(0)
	j	readin

	qpop	k
	fret	0

	$endif
	$root
	$root

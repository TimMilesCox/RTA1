	$list		0
	$path		../
	$include	def/rta.def
	$include	def/vector.def
	$include	stream/stream.def
	$include	language/stack.def
	$include	language/catalog.def
	$include	image.app/imports.def
	$path
	$list

__BASE	$equ	PBLAST

$(1:01000/$1)
$(3:03000/$3)
buffer
	$do	8,	-1

buffer1
?	$do	6,	011*(7-?), 011*(6+?), 011*(15-?) 

buffer2	0aaacae, 09a9c9e, 08a8c8e, 07a7c7e, 06a6c6e, 05a5c5e:h

$(0:0/$0)

p	$proc
store*	$name
	p(1, 1)		buffer
	p(1, 1), t1	buffer+1
	$if		p(2, 1)
	p(1, 1), t2	2, p(2, 1)
	$else
	p(1, 1), t2	buffer+2
	$endif
	p(1, 1), t3	*(buffer+3)
	on	half$w
	p(1, 1), h1	*$1(buffer+4)
	p(1, 1), h2	buffer+5
	off	half$w
	printf	$3("%x %x %x %x %x %x":10:0),,xi	buffer		buffer+1	;
							buffer+2	buffer+3	;
							buffer+4	buffer+5
	$end

p	$proc
stack*	$name
	push		buffer
	push		buffer+1,,t1
	$if		p(2, 1)
	push		2, p(2, 1), t2
	$else
	push		buffer+2,,t2
	$endif
	push		*(buffer+3),,t3
	on		half$w
	push		 *$1(buffer+4),,h1
	push		buffer+5,,h2
	off		half$w
	printf	$3("%x %x %x %x %x %x":10:0),,xi	0,sp	1,sp	2, sp	;
							3, sp	4, sp	5, sp
	$end

p	$proc
unstac*	$name
	pop		buffer
	pop		buffer+1,,t1
	$if		p(2, 1)
	pop		2, p(2, 1), t2
	$else
	pop		buffer+2,,t2
	$endif
	pop		*(buffer+3),,t3
	on		half$w
	pop		 *$1(buffer+4),,h1
	pop		buffer+5,,h2
	off		half$w
	printf	$3("%x %x %x %x %x %x":10:0),,xi	buffer		buffer+1	;
							buffer+2	buffer+3	;
							buffer+4	buffer+5
	$end

p	$proc
load*	$name
	p(1, 1)		buffer2
	push		p(1, 1)**7
	p(1, 1)		buffer2+1,,t1
	push		p(1, 1)**7
	$if		p(2, 1)
	p(1, 1)		2, p(2, 1), t2
	$else
	p(1, 1)		buffer2+2,,t2
	$endif
	push		p(1, 1)**7
	p(1, 1)		*(buffer2+3),,t3
	push		p(1, 1)**7
	on		half$w
	p(1, 1)		*$1(buffer2+4),,h1
	push		p(1, 1)**7
	p(1, 1)		buffer2+5,,h2
	push		p(1, 1)**7
	printf	$3("%x %x %x %x %x %x":10:0),,xi	5,sp	4,sp	3,sp	;
							2,sp	1,sp	0,sp
	$end

p	$proc
orandx*	$name

	la+(p(1, 1)**1)	5, sp
?	$do	5,	p(1, 1)	5-?, sp
	sa+(p(1, 1)**1)	buffer+6
	la+(p(1, 1)**1)	buffer2
	sa+(p(1, 1)**1)	buffer
	p(1, 1)		buffer2+1,,t1
	sa+(p(1, 1)**1)	buffer+1
	$if	p(2, 1)
	p(1, 1)		2, p(2, 1), t2
	$else
	p(1, 1)		buffer2+2,, t2
	$endif
	sa+(p(1, 1)**1)	buffer+2
	p(1, 1)		*(buffer2+3),,t3
	sa+(p(1, 1)**1)	buffer+3
	on		half$w
	p(1, 1)		*$1(buffer2+4),,h1
	sa+(p(1, 1)**1)	buffer+4
	p(1, 1)		buffer2+5,,h2
	sa+(p(1, 1)**1)	buffer+5
	off		half$w
	
	z		buffer+7
?	$do	6,	popA	buffer+7

	printf	$3("%x %x %x %x %x %x %x %x":10:0),,xi	  buffer buffer+1 buffer+2 buffer+3	;	
							buffer+4 buffer+5 buffer+6 buffer+7
	$end


p	$proc
shufti*	$name
p	$proc
swist*	$name
	p(1, 1)	6
	sa+(p(1, 1)**1) buffer+?-1
	$end
p	$proc
dwist*	$name
	p(1, 1)	6
	ds	buffer+?*2-2
	$end

	dl	(5*/45++6*/22++7d)

	$if	p(1, 1)**3=2
	$note	just 4 times
?	$do	4,	dwist	p(1, 1)
	$else
	$note	just 8 times
?	$do	8,	swist	p(1, 1)
	$endif
	
	printf	$3("%x %x %x %x %x %x %x %x":10:0),,xi	  buffer buffer+1 buffer+2 buffer+3	;
							buffer+4 buffer+5 buffer+6 buffer+7 
	$end

p	$proc
add*	$name
	p(1, 1)	buffer1
	sa+(p(1, 1)**1)	buffer
	p(1, 1)	buffer1+1,,t1
	sa+(p(1, 1)**1)	buffer+1
	$if	p(2, 1)
	p(1, 1)	2, p(2, 1), t2
	$else
	p(1, 1)	buffer1+2,,t2
	$endif
	sa+(p(1, 1)**1)	buffer+2
	p(1, 1)	*(buffer1+3),,t3
	sa+(p(1, 1)**1)	buffer+3
	on	half$w
	p(1, 1)	*$1(buffer1+4),,h1
	sa+(p(1, 1)**1)	buffer+4
	p(1, 1)	buffer1+5,,h2
	sa+(p(1, 1)**1)	buffer+5
	off	half$w
	printf	$3("%x %x %x %x %x %x":10:0),,xi	  buffer buffer+1 buffer+2	;
							buffer+3 buffer+4 buffer+5
	$end

.	end macros start code

	catalog

	$base_d	20	1024

	c	(seg$load)	0,,xi	(ddata:d),,long

	off	half$w

	store	z
	lr	('abc')
	store	sr
	lk	('def')
	store	sk
	lx	('ghi')
	store	sx
	ly	('jkl')
	lx	buffer,,xi
	store	sy	x
	la	('mno')
	store	sa
	ly	buffer,,xi
	lb	('pqr')
	store	sb	y
	la	buffer,,xi
	stack	push	a

?	$do	6,	z	buffer+?-1
?	$do	6,	n	buffer+?-1

	lx	buffer,,xi
	unstac	pop	x

	load	lr
	load	lk
	load	lx
	load	ly
	load	la
	load	lb
	orandx	or
	orandx	orB
	orandx	and
	orandx	andB
	orandx	xor
	orandx	xorB

	shufti	sar
	shufti	sbr
	shufti	dsr

	shufti	sal
	shufti	sbl
	shufti	dsl

	shufti	rar
	shufti	rbr
	shufti	drr

	shufti	ral
	shufti	rbl
	shufti	drl

	shufti	saa
	shufti	sba
	shufti	dsa

	la	100,,xi
	add	ana

	lb	-100,,xi
	add	ab

	dl	(100000000000000)
	d	-3,,xi
	printf	$3("%ld %d":10:0),,xi	6 a b

	dl	(-100000000000000)
	d	-3,,xi
	printf	$3("%ld %d":10:0),,xi	6 a b

	lb	(1000000s)
	mf	(-1000000s)
	d	3,,xi
	printf	$3("%ld %d":10:0),,xi	6 a b

	fret

	$do	$<256,$(0:256)

teraframe	$tree

$(67::,y)
device_k	$array_key

$(67::,y)
canister	$array_index

$(66::,x)
cluster		$cluster_descriptor

$(0)

array_device_claim_ii
	la	a			. pages desired - 1 in application a
	lcal	array_device_claim
	sa	a			. application accumulator
	ir	0

array_device_claim
	$head_near	scalars(device_index,	int)

	on	see$3
	and	(03FFFC0)		. banks sought - 1
	sa	7+128			

	ly	device_key(63),,xi	. highest device access descriptor
	lb	63,,xi			. highest port number
	lk	(0C00000:s)

claim?	sb	device_index
	inA	128, b			. device port
	mta	(0800000:s)		. memory array device?
	j	claim_next		. no
	ts	device_k:ts_cell
	j	$-1

	sy	6+128			. save pointer to key
	tz	device_k:index
	j	index_constructed
	
	and	(03FFFC0)		. bank high index from device port
	or	(0400000)		. device flag
	or	b_x			. device index
	sa	device_k:index		. configured

	sabr	BVOLATILE_I
	ly	(BVOLATILE_I*/18:s)	. canister start address

	lr	(__TERA_BANKS-1)
	lx	canister:free(1),,i

zchain	z	0, x
	ax	1,,xi
	jdr	zchain
					. currently based highest device bank
	orB	(0400000)		. 0400000++device = 1st bank of device
	la	0,,xi

	lx	(BVOLATILE_I*/18++262144-DESC2:s)	. -> 1st descriptor at top of canister
	ds	0, x
	sx	canister:next
.	sb	canister:next		. 1st available for assignment
	ly	6+128

index_constructed
	la	device_k:index		. bank name of canister
	lr	64, a, i		. and bank limit + 1 for assigment
	sabr	BVOLATILE_I
	ly	(BVOLATILE_I*/18:s)	. canister start address

	lx	canister:free(1)-1,,i	. index into free chains. ie lx y
	la	7+128			. banks desired - 1 from application a

	sar	6
.	sal	2
	ax	a_x

	lb	0, x			. read chain head
	jzb	claim_new		. if none ready for use

	push	0, b			. next pointer
	pop	0, x			. to freelist head
	la	1, b
	j	return_buffer

claim_new

	lb	canister:next
	la	1, b			. ultimate result

	lx	64, a, i		. construct new next bank name
	ax	7+128			. banks required */ 6
	jxge	key_free		. higher than control tables

	dpush	a_x			. after jump decision

	$if	1
	ab	-DESC2,,xi		. new next descriptor
	sx	1, b			. new heap top
	sb	canister:next		. new stack top
	$else
	sx	canister:next
	lb	x_x
	la	x_x

	sbr	6-2
	andB	(00FFFF*/2)
	xorB	-4,,xi			. descriptor address
	lx	(BVOLATILE_I+1*/18s)		
	ax	0, b, i			. as a function of buffer address
	sx	canister:next+1
	sa	cluster:bank, x
	lb	x_x
	$endif


.	can't use macro [ c lc ] in ISRs
.	because it finishes by popping application sp


	$if	0
	la	0, sp			. update basis
	lr	4, x, i			. lower limit of intermediate space update
	lx	1, sp			. descriptor of new buffer
	
	lcal	intermediate_space
	$endif

	dpop	a_x			. this is the buffer getting delivered

return_buffer
	ly	128+6			. reload device key address
	z	device_k:ts_cell	. free device

	on	see$1			. 

	lx	TERAFRAME_CHAIN(1),,xi
	ax	device_index		. 1 chain per process per device
	tnz	TERAFRAME_CHAIN(1)
	lcal	teraframes_initial
	
	$if	1

	push	0, x
	pop	0, b
	sb	0, x

	$else

	sx	cluster:reverse, b	. this is back pointer 1st in chain
	ly	0, x			. old 1st in chain
	sy	cluster:next, b		. next of new 1st in chain
	sb	0, x			. new object -> chain head
	tz	y_x			. not the 1st time thru here
	sb	cluster:reverse, y	. back pointer from 2nd in chain to 1st

	$endif

	j	deliver

key_free
	ly	128+6			. reload device key address
	z	device_k:ts_cell

claim_next
	ay	-2,,xi

.	lb	r_x			. copy limit encoding from r
.	andB	63,,xi			. and isolate device index in it

	lb	device_index	
	dec	b_x
	lr	device_key(3),,xi
	jyge	claim?
					. high index page request
	la	7+128
	lcal	array_high_ix
	jza	deliver

	on	see$1			. last choice, preference was array devices
	push	BANK_CHAIN
	pop	0, b
	sb	BANK_CHAIN		. add to thread memory estate chain
	or	(0400000)		. it's big

deliver	sa	device_index		. overwrite dynamic variable
	la	(0C00001:s)
	sabr	BVOLATILE_I
	pop	a_x			. result is buffer:descriptor in [ a_x b_x ]

	lret	0	

	$if	1

teraframes_initial
	sx	TERAFRAME_CHAIN(1)	. record at least 1 of TERAFRAME_CHAIN(3..63)
	push	x_x			. is populated
	lx	TERAFRAME_CHAIN(63+1),,xi
	lr	TERAFRAME_CHAIN(3+1),,xi

teraframe_reset
	z	0, x
	ax	-1,,xi
	jxge	teraframe_reset
	pop	x_x
	lret	0

chain_relink

	on	see$1
	lb	a_x
	andB	63,,xi
	lx	TERAFRAME_CHAIN(1),,xi
	ax	b_x

	lk	-1,,xi

chain_chase
	lb	x_x			. previous
	lx	0, x			. into chain
	tnz	x			. nane?
	lret	0
	mta	1, x			. hit ?
	j	chain_chase		. not yet
	push	0, x			. previous -> next = this -> next
	pop	0, b
	lret	1			. result in x_x

.	final leaf of BANK$FREE

.	a <- bank start index
.	device zero system memory does not get here
.	only device types 800000 OR page_high_index
.	system memory type outside executable space

array_device_free
	
	xorB	b_x			. caller does not have the descriptor
					. just bank index in application register a
	lcal	array_cluster_free
	ir	0

array_cluster_free
	$head_near	scalars(indication,	int,	b_x	;
				bank_index,	int,	a_x	;
				tuple_p,	int		;
				caller_x,	int,	x_x	)

.	1st job find the descriptor in the device memory table
.	if it's not leading edge of a cluster it doesn't get freed
.	and result in b is zero =  "no banks are actually pooled"
.	calling ISR can use that result to cancel vectors or not

	on	see$3			. some lookups about array devices
					. cached in kernel memory

	and	63,,xi			. index 2-word information cell
	sal	1
	ly	device_key(1)-2,,xi
	ay	a_x

	lk	(03FFFC0)
	la	device_k:index		. we want bank at high index = management pool
	mtane	bank_index		. that aint the page we're fixin to pool ?
	j	array_cluster_leave	. we might not wish to pool the pool controls

	ts	device_k:ts_cell	. lock target a moment or 2
	j	$-1

	sy	tuple_p			. best not forget that part
	ly	(BVOLATILE_I*/18s)
	sabr	BVOLATILE_I		. remember hee? the device control page
	la	bank_index		. and hee? the one we want to free

	lx	canister:next
	ly	DESC2, x, i		. buffer below heap top
	lr	1, x			. heap top
	lx	a_x			. bank index for delete
	jxge	array_device_release	.

	lx	b_x			. this caller max be...
	jnzb	indicated		. ...working the front of the owner chain
	lcal	chain_relink		. obtain descriptor pointer from owner chain
	j	array_device_release	. no
	sx	indication		. will return to caller in b_x

indicated
	mta	1, y			. k is still -1
	j	array_into_list

	lr	(BVOLATILE_I+1*/18s)

array_heap_compress
	ly	(BVOLATILE_I*/18:s)	. point ro canister again
	sx	canister:next

	.	is the next buffer on its freelist[SIZE] ?

	la	1, x			. the buffer above
	ax	DESC2,,xi		. the next buffer
	jxge	array_device_release	. heap empty next -> heap

	lcal	find_in_freelist
	j	array_device_release	. not found do not free
	j	array_heap_compress	. 

array_into_list
	lcal	find_in_freelist
	j	found_list_position	. not found so insert
	j	array_device_release	. was found, is already there

found_list_position
	sx	0, b			. insert in chain
	sy	0, x
	j	array_device_release	. clear lock

find_in_freelist

	lb	a_x			. buffer + 1
	anb	1, x			. minus buffer
	sbr	6			. = size
	ly	(BVOLATILE_I*/18:s)	. still at canister?

	ay	b_x
					. so clusters > zero start at entry 1+
	lr	x_x			. comparand for y_x

freelist_search
	lb	y_x
	ly	0, y

	jyge	list_descriptor_high	. therefore list buffer low
	lret	0			. therefore y -> insert

list_descriptor_high			. k_x still trusted as = -1
	la	y_x
	mta	r_x
	j	freelist_search		. not in chain
	lret	1			. in chain


array_device_release
	ly	tuple_p
	z	device_k:ts_cell	. free thayum control tuple

array_cluster_leave
	la	(0C00001s)
	sabr	BVOLATILE_I		. close the gate
	qpop	x_x			. [ caller_x | device_tuple | bank_index | descriptor ]
	lret	0

.	at process & thread  exit
.	no need to cancel the vector pointers
.	or to drop system memory blocks. That happens anyway
.	just pool any memory array device-nonzero blocks

	$if	0			. these three instructions go inline in exit_ii
dframes_cancel
	on	see$1
	tz	TERAFRAME_CHAIN(1)	. indicates some of TERAFRAME_CHAIN() are populated
	lcal	teraframe:free_teraframes
	lret	0
	$endif

free_teraframes				. see$1 is on
	lx	TERAFRAME_CHAIN(63+1),,xi	. label #s are relative 1 not zero
free_next_chain
	tz	0, x
	lcal	free_owner_chain	. if this call is made...
	ax	-1,,xi			. ... x_x is saved and restored
	lr	TERAFRAME_CHAIN(3+1),,xi	. no array device may be device [ 0 1 2 ]
	jxge	free_next_chain
	lret	0

free_owner_chain
	push	x_x
	ax	-TERAFRAME_CHAIN(1),,xi	. get the device instance 
	ly	device_key(1)-2,,xi	. management tuple in kernel store
	ay	x_x
	ay	x_x			. 2-word management tuples

	la	device_k:index		. base index of highest block
					. = management block
	inB	128, x			. read the corresponding device port
	andB	(03FFFC0)		. isolate block high index
	orB	(0400000)		. zone it with big flag
	orB	x_x			. and device index
	xorB	a_x			. does it tally?
	jnzb	free_owner_chain_out	. management structure compromised, or owner chain

	lcal	owner_chain_walk

free_owner_chain_out
	pop	x_x
	lret	0
					. note it's very costly if array_cluster_free
					. is allowed to hunt the owner chain for the
					. descriptor which is already supplied from here
					. especially as a resource is locked
					. so array_cluster_free is not allowed to do that

owner_chain_walk			. no need to update chain headers
	ax      TERAFRAME_CHAIN(1),,xi	. recover chain head address in TCB
	lb	0, x
	jzb	owner_chain_walk_thru	. shouldn't happen but...
					. 1-time check we're not here by mistake

owner_chain_walk_on			. array_cluster_free closes window each pass
	sabr	BVOLATILE_I		. all descriptor pointers relate this window
	push	a_x			. save control block index
	push	0, b			. save next in case it's cleaned off descriptor
	la	1, b			. storage block index 
	lcal	array_cluster_free	. b_x = descriptor
					. both returned unchanged
					. array_cluster_free regenerates y_x
	pop	b_x			. retrieve next		
	pop	a_x			. retrieve control page
	jnzb	owner_chain_walk_on
					. array_cluster_free has already closed window
owner_chain_walk_thru			. to the same as it is and hands it back
	lret	0

	$root


p	$proc
__TILE*	$name

p	$proc
__GUARD* $name
	$if	p(1)>3
	$if	p(1, *1)++p(1, 2)++($t(p(1, 1)=127))
	lr	p(1)
	$elseif	__CHEX_LIMIT<32768
	lr	__CHEX_LIMIT,,xi
	$else
	lr	(__CHEX_LIMIT:s)
	$endif
	$endif
	lx	a
	jxge	__CHEX_ESCAPE
	$else
	$if	p(1, *1)++p(1, 2)++($t(p(1, 1)=127))
	lx	p(1)
	$elseif	__CHEX_LIMIT<32768
	lx	__CHEX_LIMIT,,xi
	$else
	lx	(__CHEX_LIMIT:s)
	$endif
	lr	1, a, i
	jxge	$+2
	ii	GUARD$
	$endif
	$end

f	$func
__BLOG*	$name
?	$do	12,	$do	1*/?-1=f(1, 1),	$return	?-1
	$return	6
	$end

__CLUSTER_LOG	$set	__BLOG("p(2, 1)_CLUSTER")

.	$trace	__CLUSTER_LOG

	$if	__CLUSTER_LOG>6

	$if	p()>4
__CEILING	$equf	p(5)
	$else
__CEILING	$equf	(__CHEX_LIMIT:s)
	$endif

	dsl	24-__GRANULE_LOG+__SCALE		. pull up everything except words offset

	c	(terabase)	WINDOW,,xi	__SEVERAL,,xi	array,,i	;
				p(2, 1)_CLUSTER,,xi	__CLUSTER_LOG,,xi	;
				__CEILING	a,,long			

	$note	here-zero
								. [ __CLUSTER_LOG not > 6 ]
	$elseif	__CLUSTER_LOG					. i.e. cluster > 1 block ?
	$note	here-one
	$if	__APPLY_GUARD
	dsl	24-__GRANULE_LOG+__SCALE			. get a block number
	__GUARD	p(5)						. check against total memory blocks all arrays
	dsr	__CLUSTER_LOG					. get an array number
	$endif

	aa	array,,i
	sa	7

	la	0,,xi
	dsl	__CLUSTER_LOG

	$if	__SEVERAL
	lx	a
	lr	"p(2, 1)_CLUSTER"
	$endif

	$do	__GRANULE_LOG=18,	sal	6
	aa	*7
	sabr	WINDOW
?	$do	__SEVERAL,	__MORE

	$else			. __CLUSTER = 1


?	$do	__SEVERAL,	__ANOTHER

	$endif		. __CLUSTER_LOG > 6 or > 0 or not
	$note	here-z
	$end

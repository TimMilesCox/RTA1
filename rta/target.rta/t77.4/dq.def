.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

LOG*	$func
?	$do	9,	$do	LOG(1, 1)/*?=1,	$return	?
	$end

SOFT_I_F_CAPACITY $equ	16384	. words
NETBUF_MAX	$equ	8192+32
NET_GRANULE	$equ	32
NET_FREECHAINS	$equ	NETBUF_MAX/NET_GRANULE
NET_LOG		$equ	LOG(NET_GRANULE)

__PAD		$equ	4

HVBANK		$equ	0
HVSOCKET	$equ	1
TCP_NOQ		$equ	1

dq*	$proc
*	$tree
head	+	dq(1, 1):s
tail	+	dq(1, 1):s
	$root
	$end

lvp*	$proc
*	$tree
bx	+	lvp(1, 1:1):s
offset	+	lvp(1, 1:2):s
	$root
	$end

hvdq*	$proc
*	$tree
head	lvp	hvdq(1, 1:1):hvdq(1, 1:2)
tail	lvp	hvdq(1, 2:1):hvdq(1, 2:2)
	$root
	$end

mpool*	$proc
*	$tree
lock_cell +	0
next	+	0
index	$do	NET_FREECHAINS,free(index)	+	0
	$root
	$end

acw*	$proc
*	$tree
next	$res	1
frame	$res	1
i_f	$res	1
bytes	$res	1
dgram	$res	1
uproto	$res	1
sobdi
apdata	$res	1
tcbloc
ifql
lso
total_bytes
readpoint
next_bdi $res	1
ACW_SIZE* $set	$-next
	$root
	$end


ipq_write
				. a -> descriptor
				. 8 -> descriptor
				. b  = payload bytes + IP header
				. 10 = fragment / DNF word
				. 11 = payload bytes + IP header
				. x -> interface
				. MTU = d$save1 = 17
				. TX_DATAGRAM = d$save = 16
				. TX_FRAME = register 9


	ly	TX_FRAME
	push,xi	-2
	pop	nframe:stack_index, y
	z	nframe:frame_axw(1):bytes, y
        z	nframe:frame_axw(2):bytes, y
	sb	nframe:frame_axw(TX_DESCRIPTORS):bytes, y
	lb	TX_DATAGRAM
	sb	nframe:frame_axw(TX_DESCRIPTORS):word_pointer, y

	lb	TX_DATAGRAML

ipq_write2q
	ly	TX_DATAGRAM
	lcal	ipq_construct_datagram_header

	$do	0,	c	(__recheck)	TX_DATAGRAM

	lx	I_F
	la	TX_AXW
	lcal	q2ifoq
	lret	0

ipq_construct_datagram_header
	la	HEADER_BYTES
	sar	2
	aa, xi	-5
	lr	a

	la	dgram:vers_ihl_tos, y
	sb	dgram:bytes, y

	 $if	0
	 push	b
	 ab	-21,,xi
	 pop	b
	 jc	$+2
	 ii	GUARD$
	 $endif

	push	TX_FLAG_OFFSET
	pop	dgram:flags_fragment, y
	ab	TX_FLAG_OFFSET
	ab	dgram:ttl_protocol, y
	aa	dgram:id, y
	da	dgram:ipsource, y
	da	dgram:ipdest, y

	tp	r
	lr, xi	0
	lx, i	10, y
	j	ipq_add_options?

ipq_add_options!
	da	0, x
	ax, xi	2
ipq_add_options?
	jdr	ipq_add_options!

ipq_write_sum
	$if	1
	lcal	check_complete
	$else
	aa	b
	dsr	16
	sbr	8
	jnza	ipq_write_sum

	xorB	(00FFFF)
	$endif

	sb	dgram:checksum, y

	lret	0

ipq_write_channel_program
					. b = payload length
					. a = frame buffer
					. y = fragment buffer descriptor
        push,xi -4                  
        pop     nframe:stack_index, a

        push    HEADER_BYTES
        pop     nframe:frame_axw(TX_DESCRIPTORS-1):bytes, a
        push    descriptor:dgram, y
        pop     nframe:frame_axw(TX_DESCRIPTORS-1):word_pointer, a

	sb	nframe:frame_axw(TX_DESCRIPTORS):bytes, a

        lb      10
        andB,xi 01FFF
        sb      10
        sbl     3

        ab      TX_DATAGRAM

        sb      nframe:frame_axw(TX_DESCRIPTORS):word_pointer, a
	
	lret	0

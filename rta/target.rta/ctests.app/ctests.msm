	$list		0
	$path		../
	$include	def/rta.def
	$include	def/vector.def
	$include	language/catalog.def
	$include	language/stack.def
	$include	language/iconsta.def
	$include	language/fpxpress.def
	$include	test.msm/i_xpress.def
	$include	language/types.def
	$include	language/c.def
	$include	stream/stream.def
	$include	image.app/imports.def
	$path
	$list

RTA_OPTIMISE	$equ	1
__BASE	$equ	__VERIFY_P

$(1:0x001000)

	$if	RTA_OPTIMISE
scale_left		int	8
scale_right		int	4
long_scale_left		long	9
long_scale_right	long	3
indirect_scale_left	int	scale_left
indirect_scale_right	int	scale_right
	$endif

$(3:0x003000/$3)

left    		long	9000000000000
right			long	7000000000000
centre  		long	3000000000000
or_mask         	long	0x5a5a5a5a5a5a
xor_mask        	long	0x999999999999
and_mask        	long	0xFFFF0000FFFF

	$if	RTA_OPTIMISE=0
scale_left		8
scale_right		4
long_scale_left         9L
long_scale_right        3L
	$endif

long_multiplier         long	6000000000
long_divisor            long	3000000000

multiplier     int	5000
divisor        int 	2500
or_short       int 	0xC00000s
xor_short      int	-1
and_short      int 	-8
short_left     int	2000000
short_right    int	4000000
short_centre   int	6000000

and_u32		0x0000FFFFFFF8

one	int	1
two	int	2
four	int	4
eight	int	8
sixteen	int	16

$(0:0/$0)
	catalog	exercise

p	$proc
atest*	$name
	$xqt_i,$iii	p()
	$if	$$significands>48
	lcal	display3
	$else
	lcal	display
	$endif
	$end

exercise
	$base_d	$zenith(3)-0x003000 1024
	c	(seg$load)	0,,xi	(data_verify:L),,long

	$list		2
	$include	csample
	$include	csample1
	$include	csample2
	$include	csample3
	$include	csample4
	fret	0

display	printf	$3("%ld\n\0"),,xi	a,,long
	lret	0

display3
	printf	$3("%jd\n\0"),,xi	7	a,,long
	lret	0

	$do	$<256,$(0:256)

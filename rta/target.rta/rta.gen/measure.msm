.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

REQUIRED		$equ	128+6		
SIZE			$equ	REQUIRED
BANKS			$equ	REQUIRED

OUTSIZE			$equ	128+7
. TEMP_BASE_ABSO		$equ	x$save
B4			$equ	128+8	

.	measure is once-only initialisation code
.	called at kernel start up
.	it is in a lcal subroutine to make it
.	modular and include-compatible with
.	any other bank management routines
.	in this file

$(65)


banks_lock_cell			$res	1
threads_lock_cell		$res	1
next				$res	1	.	=next_page_descriptor
large_bank_descriptor_sp	$res	1

?	$do	64,free_chain(?) $res	1

switch_lock_cell		$res	1

free_tdescriptor		$res	1
next_tdescriptor_sp		$res	1
tdescriptor_high_index		$res	1

?	$do	7**8-($**7),tq_align(?)	$res	1

?	$do	PRIORITIES,stem(?)	$res	4

uq_head				$res	1
uq_tail				$res	1

first_bdx			$equ	$

. $(65:$bank_address($(64)+7**-8))

next_page_descriptor		$res	2

?	$do	63,device_key(?),	$res	2
$(0)

stem_link
	lr, xi	PRIORITIES-2
	lx, xi	stem(1)
	lb, xi	-1
	sb	6+128
	ly,xi	stem(PRIORITIES)
next_stem
	la, i	4, x		. next pointer
	sy	7+128		. uplink
	qs	0, x

	ly	x_x		. previous
	ax, xi	4
	ab, xi	-1		. symbolic 1s complement
				. chain priority

	jdr	next_stem	. and write the last
	la, xi	stem(1)		. task queue trailing
	sy	7+128		. link descriptor
	qs	0, x

	z	switch_lock_cell
	z	uq_head
	z	uq_tail

?	$do	tq_align(),	z	tq_align(?)

	lr	63-1,,xi
	lx	device_key(1),,xi
	dsr	48

zdevice	ds	0, x
	ax	2,,xi
	jdr	zdevice

	lret	0

	$if	1
rebound75
	dpush	a_x
	dl	(CHILLDOWN, 30d)
	outB	chill$down
	outA	INDICATION$
	dpop	a_x
	lret	-2

REBOUND75* $proc
	lcal	rebound75	. ts cell locked, back off cool
	$end

	$else
REBOUND75* $proc
	j	$-1		. ts cell locked, clamp on hard
	$end

	$endif

measure

	$if	MANAGER_BANKS=5

	on	see$3++see$4++see$5++see$6++see$7

	la	(0C00001s)

	. default pointers which may stay unused

	outA	67		. large leaves lower slots unused
	outA	68		. small leaves higher slots unused
	outA	69
	outA	70
	outA	71

	lcal	management_words
	j	large_system
	sbl	1
	sb	BANKS		. save 2 * # banks of 262144 words
	lb	a_x
	sbr	12		. calculate # management pages	
	lr	64+3,b,i		. calculate how far
	lx	64+3,,xi
	lb	FREE_BASE

base_management_page
	outB	0, x		. base a page of kernel storage
	ab	1,,xi
	ax	1,,xi

	jxge	management_pages_based
	j	base_management_page

management_pages_based
	lr	b_x		. save the bank index reached
	lb	BANKS		. calculate page address highest bank + 1
	sbl	5
	jnzb	pages_read
	inB	128
	andB	(03FFFFF)
	ab, xi	1
pages_read
	lx	first_bdx,,xi
	aa	03000-2,,xi
	j	memory_configured

large_system
	sbl	1
	sb	BANKS		. save 2 * # banks of 262144 words
	lb	a_x
	sbr	18		. calculate # management banks

	lx	64+3,b,i		. top base + 1
	lr	64+3+1,,xi
	lb	BANKS		. 2 * memory banks of 262144 words
	sbl	5		. calculate page address highest bank + 1
.	orB	(0400000)	. think big one moment later
				. in case of maximum memory
base_management_bank		. where decrement is from 0400000
	ax	-1,,xi
	ab	-64,,xi
	orB	(0400000)	. now think big
	outB	0, x
	jxge	base_management_bank

	andB	(03FFFFF)	. stop thinking big
				. This will be compared with page addresses
	lr	FREE_BASE
	lx	($bank_address(first_bdx))
	aa	($bank_address(03000)-2))

memory_configured
	z	0, x
	sr	1, x		. store the available small banks index
	sx	next
	
	sa	large_bank_descriptor_sp
	ds	0, a

	ana	BANKS
	sa	next_tdescriptor_sp
	sa	tdescriptor_high_index



	$else

	inB	device$flags	. read system memory configuration
	andB	(03fffff)	. isolate the highest page index
	ab, xi	1		. convert the highest index (+1)
				. to the number of pages

	la	b_x
	and, xi	-64
	sar	5		. calculate and save
	sa	BANKS		. the # words potentially needed
				. for descriptors of 256K banks

				. the big banks descriptor stack
				. has space for a potential two-word
				. descriptor for each 262144-word bank
				. actually present in system memory

				. the descriptor values used for
				. system memory in IO-mapped
				. relocation registers have 6
				. low zero bits when
				. descriptor bit 22 (BIG/BANK)
				. is on

				. 01xxxx xxxxxx xxxxxx 000000

				. because when BIG/BANK is on,
				. LS 6 bits in the relocation
				. register port select devices other
				. than system memory (filestore arrays,
				. dual ported network I/F memories

				. 01xxxx xxxxxx xxxxxx DEVICE

				. however, when BIG/BANK is off,
				. the six low bits select a page
				. within the system memory bank

				. 00xxxx xxxxxx xxxxxx XXXXXX



				. construct the first descriptor
				. which describes the end of memory
				. at the end of OS tabler memory

	la	b_x
	ana	(SCALE_THRESHOLD)
				. if there are not a large number of
				. banks of 262144 words altogether,
				. the management table is a page or so

	on	see$all**(see$7*/MANAGER_BANKS)-1
	la	FREE_BASE

p	$proc
table_page* $name	1

	outA	72-MANAGER_BANKS+?-1
	aa, xi	p(0, 0)
	$end

p	$proc
table_bank* $name	-64

	ab, xi	p(0, 0)
	outB	72-?
	$end

	lx	(next_page_descriptor)
	jc	large_system


?	$do	MANAGER_BANKS,	table_page
	sa	1, x		. next_page_descriptor:pointer
	la, xi	4096*8-2
	j	memory_configured

large_system

				. decision to use big banks
				. for management

				. so take them from high-end
				. memory

				. because that's where
				. 256K-banks are assigned
				. and the system image in
				. low memory almost certainly
				. doesn't fill exact 256K-banks

	orB	(0400000)	. think big
	andB,xi	-64		. make sure it really is
				. whole banks however at
				. the high end

?	$do	MANAGER_BANKS,	table_bank

	andB	(03FFFFF)	. stop thinking big

	sa	1, x		. next_page_descriptor:pointer
	la	(262144*8-2)

memory_configured
	sx	next
	ds	0, a
        sa      large_bank_descriptor_sp

        ana     BANKS

        sa      next_tdescriptor_sp

	$endif

	z	banks_lock_cell
	z	threads_lock_cell
	z	free_tdescriptor

?	$do	63,	z	free_chain(?)
	z	free_chain(64)


				. the stack of four-word task descriptors
				. grows downwards from the position below
				. the lowest possible big bank descriptor

				. the lowest big-bank pointer
				. is the small-banks upper limit pointer

				. next_tdescriptor_sp
				. is the also the upper edge for
				. small-banks DESCRIPTORS

				. write the pointer to the descriptor
				. This pointer decrements as 2-word
				. big-bank descriptors are added

.	sa	large_bank_descriptor_sp
.
.	ana	BANKS
.
.	sa	next_tdescriptor_sp

				. *next points to next_descriptor
				. for small banks
				. this is the next available two-word
				. descriptor in the upward-growing
				. small banks decriptor list

				. *next and the initial descriptor
				. where *next points are constructed
				. here at system start, so all
				. system images are restartable
				. and may be in ROM

				. The buffer pointer in the initial
				. *next descriptor  points to the
				. first available RAM page after
				. the kernel ROM or kernel load

				. there are 64 free-chains into the
				. "small" banks heap and one free-chain 
				. into the big-banks stack
	
				. The small-banks free-chains are one
				. per size, 1..64 pages (4096 words
				. to 262144 words)

				. a "small" bank of 262144 words is
				. possible, because a smaller bank
				. may get bigger if the next assignment
				. does not fit in the same 262144-word
				. physical bank

				. small banks are assigned from low-order
				. locations upwards. The free chains
				. reassign free storage at the lowest
				. addresses first.

				. Freed space above the highest
				. assigned small bank is recombined
				. as single free area between the
				. the stack of small banks which grows
				. upwards and compresses downwards, and
				. the stack of big banks, which grows
				. downwards and compresses upwards

				. There is one large-banks free-chain
				. for all sizes. A big bank may combine
				. one to nearly 65536 adjacent physical
				. banks of 262144 words

				. A single large bank may contain nearly
				. 1024 times the 16 Megaword Address space
				.          -16 gigawords in total-
				. for large arrays which need to be contiguous

				. An array needs to be contiguous if
				. multiword operands to single instructions
				. straddle physical 256K bank boundaries.

				. Developers can also structure arrays
				. so that quad or double word operands
				. are safely inside one bank, even if
				. the containing structure straddles two
				. non-contiguous banks addressed with
				. two adjacent relocation base-registers

				. Operand EA is translated to an absolute
				. address once for each operand read or write

				. However very large contiguous bank
				. arrays are obtained with one ARRAY$ call
				. and accessed with one bank handle

				. Arrays larger than the address space
				. are addressed a part at
				. a time. Structures straddling bank boundaries
				. are accessed using two adjacent base registers
				. to address two adjacent banks

	.
	.	lb	instance_index		. read the subscript
	.	m, xi	STRUCTURE_SIZE		. convert to table offset
	.	dsl	6			. split into relative
	.	sal	6			. bank/word offsets
	.	sbr	6
	.	aa	array_base_bank_handle	. bank handle obtained from
	.					. large_bank_request routine

	.					. set bits 23..18 of address
	.					. to the address region which
	.	orB	(BASE_REGISTER_TAG*/18)	. we shall base

	.	sabr	BASE_REGISTER_TAG	. base the bank where the 
	.					. structure starts

	.	la, i	64, a			. and base the next bank after
	.	sabr	BASE_REGISTER_TAG+1	. in the next range of the
	.					. address space

				. where for addresses > 262143, the
				. storage operand address is resolved
				. with the base register indicated in
				. effective address bits 23..18

				.	_____________________________
				.	|baseid|xxxxxx xxxxxx xxxxxx|
				.	|______|____________________|
				.
				. and for addresses 256..262143, the 
				. storage operand address is resolved
				. with the base register indicated in
				. effective address bits 17..12
				.
				.	_____________________________
				.	|000000|baseid|xxxxxx xxxxxx|
				.	|______|______|_____________|
				.
				. instructions are always fetched from
				. the bank based with base register zero
				. whatever the effective address of the
				. instruction
				.
				. storage operands in the
				. address range 256..4095 are also in
				. instruction bank 0.

				. storage operands at effective address <
				. 256 are registers.

				. large banks are assigned from high-order
				. memory downwards, in size multiples of
				. one bank (262144 words) The highest-addressed
				. contiguous area large enough for each
				. request is assigned. This is achieved
				. by recombining and reshaping the
				. available contiguous collections of
				. 262144-word banks

				. "small" banks may accidentally become
				. an aligned bank of 64 pages, if the next
				. assignment steps to the next bank edge
				. ("small" banks don't straddle physical
				. bank edges). Because of this, a task
				. requesting more storage may already
				. have it

	lret	0		. the end of the measure subroutine
				. initialisation routine at startup


bank_free
	jza	out_of_range	. when the dreaded NULL pointer strikes

.	page_free
	on	see$all**(see$7*/MANAGER_BANKS)-1
	ts	banks_lock_cell
	j	$-1

.	this is an lcal subroutine and can only be called
.	from interrupt code (internal interrupt, system start etc)

.	the argument is a descriptor pointer in interrupt register A
.	because the routine which decided which descriptor stack
.	(lower/small banks or upper/big banks) already copied the
.	descriptor pointer from application register A, in order
.	to evaluate it.
.
.	This call is from other interrupt code
.	so registers addressed as storage operands are all
.	in the space 128..255

.	test & set word banks_lock_cell is already obtained


	tanu	large_bank_descriptor_sp
	jc	large_bank_free

	lb	next			. is this descriptor
	anb, i	2, a			. the one below next-available
					. ie is it on the heap top?
	jnzb	not_highest_bank

spiral_again
	sa	next

	tanu	(next_page_descriptor)
	jzb	out_of_spiral

	z	banks_lock_cell		. free the lock at this point
	ts	banks_lock_cell		. and compete for it again
	j	$-1			. another CPU may be looping
					. for it

	la	next			. this value may have changed

					. see if the bank now at the
	aa, xi	-2			. heap top is on its free chain

					. calculate the bank size

	lb	3, a			. next bank address minus
	anb	1, a			. this bank address

	lx, xi	free_chain(1)-1		. index of free chain head is
					. size in pages minus 1
	ax	b_x

					. point towards the chain head

spiral	ly	x_x			. copy "this" to "previous"
	lb	0, x			. copy "next" to "this

	jzb	out_of_spiral
	lx	b_x

	tanu	x_x			. banks (and descriptors)
					. at the lower addresses
					. are preferred for re-use

					. therefore the chain starts
					. with lowest addresses, rises
					. and ends with null forward
					. pointer

					. if you arrive at a higher
					. address in B, the bank is
					. not in the free chain, and
	jnc	out_of_spiral		. consolidation stops here

					. the candidate is still at
					. a higher address than the
	jnzb	spiral			. free chain sample, move on


					. you have hit equal. Pull
					. the bank out of the free
					. chain and squash the
					. assigned heap top

					. a = b

	lb	0, a			. copy next pointer of candidate
	sb	0, y			. to next of previous

	j	spiral_again		. store new next-available
					. descriptor pointer
out_of_spiral
	z	banks_lock_cell
out_of_range				. descriptor == NULL
	lret	0

					. the freed bank isn't at
					. the top of the assigned
					. heap, so link it into its
					. free chain
not_highest_bank
	lb	3, a			. size = next bank address
	anb	1, a			. minus this bank address

	lx, xi	free_chain(1)-1		. chain index = size in pages
	ax	b_x			. minus 1

					. point at the free chain head
find_higher_point
	ly	x_x			. copy "this" to "previous"
	lb	0, x			. copy "next" to "this"
	lx	b_x

	jzb	found_higher_point	. end of chain

	anb	a_x			. presumably a_x because call is from various ISRs
	jnc	find_higher_point	. the chain sample is lower
	jzb	bank_is_free

found_higher_point			. link into chain
	sx	0, a			. "next" = next-pointer of "this"
	sa	0, y			. "this" = next-pointer of "previous"
bank_is_free
	z	banks_lock_cell
	lret	0


large_bank_free

.	this is branched from bank_free when the storage to free
.	is in the downward-expanding/upward compressing stack of
.	large bank collections in high-order memory

.	the last 2 instructions before getting here were

.	tanu	large_bank_upper_limit_dp
.	jc	large_bank_free

	jzb	large_bank_at_summit

	lb	3, a
	anb	1, a
	sb	SIZE
	lx, xi	free_chain(64)
fsearch	sx	B4
	lb	0, x
	lx	b_x
	jzb	chain_insert

	lb	3, x
	anb	1, x
	anb	SIZE
	jzb	position?
	jnc	fsearch		. next in chain is smaller
	j	chain_insert	. next in chain is larger

position?
	tanu	x_x
	jzb	in_freechain_already

				. descriptors are in the
				. same storage order as
				. their buffers

				. for big banks the
				. stack grows downwards
				. the preferred re-use
				. order is furthest from
				. the middle first

				. chain the freed descriptor
				. in front of the first
				. which, within size subchain,
				. is at a lower storage address

	jnc	fsearch

chain_insert
	sa	*B4
	sx	0, a
in_freechain_already
	z	banks_lock_cell
	lret	0

large_bank_at_summit
	aa, xi	2
	sa	large_bank_descriptor_sp

				. bank array + 1 is the
				. new lower edge of the
				. bank stack

				. now spiral up compressing
				. any free banks which are now
				. at the stack top

	z	banks_lock_cell	. free the lock and compete
	ts	banks_lock_cell	. for it again. Other CPUs
	j	$-1		. may be revolving on it	

	la	large_bank_descriptor_sp

				. this may now have a new value
				. during the unlocked nanowindow
				. see if is the address of a
				. descriptor in the free chain

	lb	3, a		. calculate SIZE
	anb	1, a		. because it shall be compared
	sb	SIZE

	lx, xi	free_chain(64)

big_spiral

	ly	x_x		. copy "this" to "previous"
	lb	0, x
	jzb	end_big_spiral

	lx	b_x		. copy "next" to "this"

	lb	3, b		. calculate the size of next
	anb	1, x

	tanu	SIZE		. compare for size

	jnc	big_spiral	. it's smaller than this buffer
	jnzb	end_big_spiral	. it's larger than this buffer
				. and the chain is in size order

	tanu	x_x		. if you reach lower than "you"
				. within size

				. then the bank/multibank
				. at assigned stack top
				. is not free and the stack
				. compression is over

	jnc	big_spiral	. higher than you, keep going
	jnzb	end_big_spiral	. lower than you. The candidate
				. buffer is not free
				. compression is complete


				. replace the upper pointer
				. x = a

	lx	0, x		. previous->next = this->next
	sx	0, y		. out of the chain

	j	large_bank_at_summit

end_big_spiral
	z	banks_lock_cell
	lret	0


available_banks
	on	 see$all**(see$7*/MANAGER_BANKS)-1
	lx	large_bank_descriptor_sp
	la	1, x
	lx	next		. the consolidated free space
	ana	1, x		. between large banks and small banks

	lx, xi	free_chain(1)
	lr, xi	free_chain(64)

add_chain
	ly	0, x
	tz	y_x
	lcal	add_chain_total
	jxge	chains_added
	ax, xi	1
	j	add_chain
chains_added
	lret

add_chain_total
	lb	3, y		. difference next higher bank
	anb	1, y		. and this bank
	aa	b_x
	ly	0,y
	tz	y_x
	j	add_chain_total
	lret	0		. and of this free chain


bank	aa, xi	-1
	jnc	cannot_add_bank
	sar	12
	tanu,xi	63			. decide whether < 262144 words
					. because big banks are in
					. high memory and smaller ones
					. in low memory

	on	see$all**(see$7*/MANAGER_BANKS)-1

	ts	banks_lock_cell
        j	$-1
					. carry is from ANU,XI 63
					. if set, it means 262144+ words
					. have been requested

					. free banks from 262144 words to
					. 16 gigawords are listed by size
					. and position on free_chain(64)

					. within size, the large banks
					. furthest from the centre of
					. storage are offered first for
					. re-use

					. that means free large banks at
					. higher addresses are prefered for
					. re-use, because large banks are
					. stacked downward from high memory
					. _________________________________

	jc	large_bank		. carry was set or cleared by the ANU
					. instruction

					. the TS instruction does not touch
					. carry
					. ________________________________

					. free banks from 4096 words to
					. 252K words (262144 words minus 4096)
					. are listed by position on
					. free_chain(1..63)

					. within their one-size chains,
					. 4K..252K banks furthest from
					. the centre of memory are offered
					. for re-use first

					. that means "small" banks at
					. lower addresses are prefered
					. for re-use, because they are
					. stacked upwards from low memory
	lx, i	free_chain(1)
	ax	a_x

	lb	0, x
	jzb	not_on_list		. free chain head is zero

	la	0, b			. buffer on free chain
	sa	0, x
	la	1, b
	z	banks_lock_cell
	lret	0

not_on_list
	ly, i	1, a			. convert page high index in A
					. to size required in Y
	lb	next
	la	next_tdescriptor_sp	. lowest thread descriptor
					. = limit of small bank descriptors

	lr, i	2, b			. this bank descriptor + 1	
	ana, i	4, b			. new next bank descriptor + 1
	jnc	take_any_bank
	la	1, b			. the new bank handle
	sa	128+6
	ay	a_x			. new next bank handle
	la	large_bank_descriptor_sp
	la	1, a			. lower edge of big banks
	ana	y_x
	jnc	take_any_bank
	la	128+6
	sy	3, b			. new next bank
	sr	next
	z	banks_lock_cell
	lret	0


take_any_bank
					. here is the last resort
					. for an ordinary "small" bank

					. you can have something larger
					. if it is free

					. the awarded bank stays at
					. its larger size,


	lr, xi	free_chain(64)		. as a last resort, any bank at
					. the front of the big bank chain,
					. free_chain(64), is awarded

					. so the brakes go on to the
					. JXGE comparison after
					. free_chain(64) has been
					. interrogated

					. initially you can't be
					. at a higher notch than
					. free_chain(63)
take_any
	ax,xi	1
	lb	0, x
	jnzb	take_bank		. free bank on this chain
	jxge	bank_not_obtained
	j	take_any		. try the next larger
take_bank
	la	0, b			. yes there is. Promote the 2nd
	sa	0, x			. descriptor on the free chain to 1st

	la	1, b			. read the bank start page handle
	z	banks_lock_cell
	lret	0


array					. a very large bank
					. > 16777215 words
					. the request is expressed
					. in pages of 4096 words
	aa, xi	-1
	jnc	cannot_add_bank

array_high_ix
	on	see$all**(see$7*/MANAGER_BANKS)-1

	ts	banks_lock_cell
	j	$-1
	
	.	make sure this falls thru

large_bank
	sar	6			. translate page high index

	lb, i	1, a			. to # banks requested
	sbl	6
	sb	REQUIRED		. = highest bank index required
					. + 64 pages

	z	OUTSIZE

	lx, xi	free_chain(64)		. not the pointer
					. but its address
bsearch	sx	B4
	lb	0, x
	lx	b_x

	jzb	new_large_bank

	la	3, x
	lr	1, x
	tanu	r_x
	anb	REQUIRED

	jnc	bsearch		. what you want is bigger than
				. what you found

	jzb	bfound		. you found what you want

	sx	OUTSIZE		. what you found is bigger than
				. what you want

new_large_bank
	lx	large_bank_descriptor_sp
	ax, xi	-2		. guaranteed space for
				. the descriptor itself

	la	3, x
	ana	REQUIRED	. address of new big bank
	jnc	bank_not_obtained

	ly	next		. does it overlap the
	tanu	1, y		. highest assigned small bank?

	jc	add_large_bank

	lb	OUTSIZE
	jnzb	bfound1
	j	bank_not_obtained

bfound	lb	x_x
bfound1	la	0, b		. take B out of the freechain
	sa	*B4
	la	r_x		. retrieve the buffer pointer
	or	(0400000)	. turn the big flag on for the user
	z	banks_lock_cell
	lret	0

add_large_bank
	lb	x_x
	sx	large_bank_descriptor_sp
	sa	1, x		. write the handle in the descriptor
	or	(0400000)	. turn the big flag on for the user
	z	banks_lock_cell
	lret	0

bank_not_obtained
	z	banks_lock_cell
cannot_add_bank
	la, xi	0
	lb, xi	-1
	lret	0

.	process initial thread directly owns any more threads
.	even if threads start them
.	they are all on one chain from process initial thread
.	there is no hierarchy to walk on process exit

.	individually exiting threads leave the chain
.	before their TCB is pooled
.	so that an exiting process does not try to stop
.	threads which are not there via TCBs which are
.	already re-used in some different way

remove_thread
	inA	65		. keep exiting TCB
	push	a_x		. on the stack top as comparand
	la	WALKUP		. chain starts with process thread
	lb	NEXT_THREAD	. next from exiting thread
	lk	-1,,xi

retrieve_thread
	outA	65
	la	NEXT_THREAD
	jza	remove_threadx	. it is not there
	mta	0, sp		. is next the exiting thread?
	j	retrieve_thread
	sb	NEXT_THREAD	. point past the exit thread	
	
remove_threadx
	pop	a_x		. retrieve the exiting TCB
	outA	65		. base it again
	lret	1		. continue the thread delete

threads_down			. mark them down
	la	NEXT_THREAD
	jza	threadx_down

threads_next_down
	sabr	BVOLATILE_I

	or	(THREAD$HALT:s)	. broadcast halt request

	lk	-1,,xi		. to all cores in case thread is running
	outA	MCAST_TO$	. thread cannot run
				. with thread and process resources deleted

	lx	*(BVOLATILE_I*/12++TDESCRIPTOR-01000)
	la	(EXIT)					. ?(TIME_WAIT++EXIT:s)
	sa	2, x

	la	*(BVOLATILE_I*/12++NEXT_THREAD-01000)
	jnza	threads_next_down

threadx_down
	lret	0

tdescriptor_free
	push	x_x
	push	MAX_INT_MASK,,xi
	sim	0, sp		. don't get interrupted in here

	ts	threads_lock_cell
	j	$-1
	lb	next_tdescriptor_sp
	xorB	x_x
	jzb	tdescriptor_sp_plus
	lb	free_tdescriptor
	sb	0, x
	sx	free_tdescriptor
	j	tdescriptor_freex

tdescriptor_sp_plus
	ax	TDESCRIPTOR_WORDS,,xi
	sx	next_tdescriptor_sp

tdescriptor_freex
	z	threads_lock_cell
	sim	0, sp
	inc	sp_x
	pop	x_x
	lret	0


exit	on	see$1++see$all**(see$7*/MANAGER_BANKS)-1
	lx	TDESCRIPTOR
	z	TDESCRIPTOR	. stop the TCB from looking like itself

	la	(EXIT)
	sa	2, x
	lcal	tdescriptor_free

	tz	WALKUP		. if this is not the initial thread
	lcal	remove_thread	. take it out of the thread chain and return + 1
	lcal	threads_down	. stop threads scheduling

delete	la	BANK_CHAIN
delete_another			. TCB is certainly there
	push	0, a
	lcal	bank_free
	pop	a_x
	jnza	delete_another
	lret	0

exit_ii
	lcal	exit

	lr	sp_x
	la	128,,xi		. core resume needs sp_x @ 128
	sa	sp_x

	j	core_resume


QUIET_SAVE* $proc
qsave	ql	0, y
	qs	0, x
	ax	4,,xi
	ay	4,,xi
	jdr	qsave
	$end

write_trail
	sr	RESTART_TRACE_IREG
	sk	RESTART_TRACE_IREG+1
	sx	RESTART_TRACE_IREG+2
	sy	RESTART_TRACE_IREG+3
	qs	RESTART_TRACE_IREG+4

	on	see$2		. kernel vectors
	inA	65
	sa	RESTART_FRAME

	ly	0,,xi
	lx	RESTART_TRACE_AREG,,xi
	lr	128/4-1,,xi
	QUIET_SAVE

	ly	128+8,,xi
	lx	RESTART_TRACE_IREG+8,,xi
	lr	128/4-1-2,,xi
	QUIET_SAVE

	ly	01000,,xi
	lx	RESTART_TRACE_TCB,,xi
	lr	128/4-1,,xi
	QUIET_SAVE

	ql	0, fp
	qs	RESTART_TRACE_ISTAC_FRAME
	inA	1
	sa	RESTART_TRACE_ABT+1

	ql	TAG
	qs	RESTART_TRACE_THREAD_NAME

	$if	1
	inA	77
	jza	restart_go
	lk	1,,xi		. core zero must do this
	la	RESTART$1,,xi	. latent parameter is the function part here
	outA	MCAST_TO$	. place core zero in restart ISR
	go	(0800000++$0p1(smp_pend, 0L)s)	. restart page 0

restart_go
	go	(0800000++$0p1(restart, 0L)s)	. restart page 0

	$else
	j	restart
	$endif

guard_ii
	tp	1, sp		. did this happen in an ISR?
	ii	63		. no return to here unless the application caused it

	on	see$all--see$2
	tp	ERROR_RESTART	. is the thread indispensible to system run?
	j	write_trail	. write trace and restart the system

	lx	TDESCRIPTOR
	la	(TRAP)
	sa	2, x		. fall thru to immediate yield

yield	ql	0, fp		. retrieve the interrrupted application frame
				. switch visibility to TCB and kernel banks

	on	see$1++see$all**(see$7*/MANAGER_BANKS)-1

	qs	UPACKET		. interrupt stack frame of application -> TCB

	tp	energy$advise
	lcal	irespite

	lx	TDESCRIPTOR
	la	2, x
	and	(EXIT)
	jnza	exit_ii

	inA	1		. relocation pointer, application private stack page
	sa	ABT+1		. other relocation pointers do not need saving
	la	fp$guard
	sa	FP_FRAP

	$if	$LOCK_SWITCH
	lr	7,,xi		. external interrupts remain pending
	sim	r_x		. ISR r
	sr	x$save2
	$endif

	lr	sp_x		. keep aside the value of the interrupt sp
	z	sp_x		. point interrupt sp to start of user registers
				. 32 stores for 128 registers

?	$do	128/4,	qpop	RSAVE+4*?-4

				. interrupt SP now contains 128

	ts	switch_lock_cell
	REBOUND75		. j	$-1

	$if	T$SLICE
	la	2, x		. what's in the flags?
	jao	qpriority	. external interrupt wait: schedule prioritised when it happens

	la	stem(PRIORITIES),,xi
	j	requeue		. schedule after timeslice or at iowait of other threads

qpriority
	$endif			. TSLICE

	la	PRIORITY$	. copy of thread priority in interrupt register 149
	tanu,xi	PRIORITIES

	jnc	in_order

				. surprising this this ever happens
	la	PRIORITIES-1,,xi
	sa	1, x		. but if it does update the thread descriptor
in_order

	sal	2		. address the 4-word priority list tail pointer
	aa, xi	stem(1)

requeue	lb	3, a	. uplink to last in priority chain
	sx	3, a	. new last <-
	sx	0, b	. old_last->next
	sa	0, x	. ->next = stem_post

	j	choose	. lock is already locked

core_resume
	$if	$LOCK_SWITCH
	la	7,,xi
	sa	x$save2
	sim	x$save2
	$endif

core_resume1		. if come_from is anywhere except fall_thru from yield
	ts	switch_lock_cell
	REBOUND75	. j	core_resume1

choose			. now load another task
			. run forward from the lowest priority chain tail
			. to the first task descriptor in the highest priority chain

	$if	TDESCRIPTOR_WORDS>6

	inA	CORE_SOCKET$
	lb	1,,xi
	sbl	0, a
	lk	b_x		. k contains the log of the core-id all through choose
				. for candidate threads which have an affinity mask

p	$proc	*		. 2-pass proc for forward references
masked_test_jump* $name
	lb	p(1)
	jzb	not_masked	. least costly path when there is no mask

	lb	k_x		. b_x can be re-used, load 1 */ core_index 
	andB	p(1)		. 2nd storage read of mask

	jzb	p(2)		. this core does not match any mask bit

not_masked 
	$end

	$endif			. TDESCRIPTOR_WORDS>6	= thread affinity supported

	la,xi	stem(PRIORITIES)
forward	ly	a_x		. previous,,xi
	la	0, a
	tn	1, a		. a thread or a priority stem post?
	j	forward2thread	. a thread
	tanu	stem(PRIORITIES),,xi	. are we where we started?
	jnzb	forward		. don't schedule the stem post. It is not a thread

	z	switch_lock_cell	. there are fewer ready threads than cores
	dl	(CHILLDOWN, REST_GRANULE:d)	. core can rest substantial time
	outB	chill$down
	outA	INDICATION$

	j	core_resume1

forward2thread
	lb	2, a
	jzb	switch_select	. advance to check afinity
	andB	(EXIT)		. check asynchronously flagged EXIT
	jnzb	unconditionally	. deschedule / remove  whatever flags other

	tp	2, a		. flag 23 is timewait in descriptor words 4:5
	lcal	timer_check	. leaving timewait clears all inhibit flags
	tz	2, a		. clear to run?
	j	forward		. no
				. yes
switch_select
	$if	TDESCRIPTOR_WORDS>6		.	= thread affinity supported
	masked_test_jump	6, a	forward
	$endif

unconditionally
	lx	0, a		. ->next becomes previous->next
	sx	0, y		. previous -> next

	tp	1, x		. is he the stem post?
	sy	3, x		. known by 1s complement PRIORITY
				. if so, the uplink from
				. stem post points to the new
				. last in the priority list

	z	switch_lock_cell

	lb	3, a	. retrieve the TCB relocation pointer from the descriptor
	outB	65	. base the TCB

	$if	1
	lb	2, a
	andB	(EXIT)
	jzb	no_xflag
	lcal	exit
	j	core_resume1
no_xflag
	$endif

	lb	1, a		. copy priority level to interrupt register 149
	sb	PRIORITY$	. for quick reference

	$if	T$SLICE		. when multiple priorities begin to be used
				. priorities other than RT=0 need proportional time because
				. mostly all of the switch chains are walked as 1 chain
				. except rare cases when only RT threads are candidates

	$do	PRIORITIES>8,	$flag	time slice table < priorities
	andB	+(1*/T$LOG(PRIORITIES))-1,,xi
	lb	(0, T$SLICE*15, T$SLICE*12, T$SLICE*10, T$SLICE*8, T$SLICE*6, T$SLICE*5, T$SLICE*4o), b
	sb	REALTIME$_CLOCK
				. the quanta are an instruction ration. Thread yields on decrement<0
	$endif			. PRIORITY=0=realtime=no time slice, no decrement, no automatic yield
				. no decrementation takes place during interrupt code

	$if	0
	lb	2, a		. read the flags word again
	andB	(EXIT)		. thread EXIT flagged while unswitched?
	jzb	run_forward	. no
	lb	1,,xi		. force yield after 1-instruction timeslice
	sb	REALTIME$_CLOCK	. then EXIT flag will end the thread
run_forward
	$endif

	la, xi	ABT+2		. application data relocation registers
				. never need saving, only loading
?	$do	64/2-1,	reload	2*?

	la	ABT+1		. relocation register to application private stack page
	outA	1		. not in scope of reload instruction

	la	FP_FRAP
	sa	fp$guard

			. ISR ISP still = 128. 32 load instructions for 128 registers

?	$do	128/4,	qpush	RSAVE+128-4*?

	sr	sp_x	. recover the interrupt stack pointer

	$if	$LOCK_SWITCH
	sim	x$save2	. allow external interrupts
	$endif

	$if	T$SLICE
	$else
	la	ULIMIT	. automatic time slice decrementer, zero = no limit
	sa	REALTIME$_CLOCK
	$endif

	ql	UPACKET	. interrupt return stack frame of applicatiom
	qs	0, fp	. interrupt fp = interrupt sp at application interrupt
	ir	0	. if we got here from another interrupt
			. we shall return to there first

spawn	dpush	a_x
	jnb	priority_out_of_range
	anb,xi	PRIORITIES
	jc	priority_out_of_range

	dl	6+128
	jnb	b1_stack_given
	lb, xi	-1
				. B1 stack pages
	sb	7+128
b1_stack_given
	sbl	12		. this much more storage
	ana	b_x

	aa,xi	4096*2		. TCB + vector page
	lcal	bank
	jza	no_new_task

	push	a_x		. acquired storage pointer

	z	0, b		. ensure forward pointer
				. of descriptor is zero

	on	see$1
	off	see$2
				. subtract is add because
				. the B1 stack size is a
				. minus value in 7

	ana	7+128		. above the B1 stack
	outA	65		. we have a TCB

	z	WALKUP		. primary thread
	z	ULIMIT		. default no time slice
	sb	BANK_CHAIN	. this initial bank
				. complex is the last
				. thing on our
				. ownership chain

	lb, xi	-1		. B1 stack page 1

	sb	RSAVE+RDATAC	. default settings -> SIMD configuration
	z	RSAVE+RDATA	. held in b$stream registers
	z	RSAVE+WDATAC
	z	RSAVE+WDATA
				. and b still contains -1
	ab	a_x		. for calculating initial B1 page index
	sb	ABT+1

	la, i	2, b		. vector page
	sabr	2
.	sa	ABT+2

				. push	TEMP_BASE_ABSO
	pop	BASE_VECTOR

	aa, xi	1		. first data page
	sa	VECTOR_D

	la, xi	VECTOR_B1(1)
	sa	B1_P		. B1 array stack pointer

	z	FILE_OPEN_HEAP	. process is not qualified for automatic file open blocks
	z	FILE_OPEN_HEAPU	. until it is

set_b1	sb	0, a
	aa, xi	-1
	ab, xi	-1
	inc	128+7
	tz	128+7
	j	set_b1

	ql	(0C00001C00001C00001C00001q)
	sb	ABT+3			. close application data windows
?	$do	15,	qs	ABT+4*?	. application opens  windows it needs

	z	XINTT+3		. start without an interrupts table because
				. most threads don't get external interrupts
	la	0, sp
	jna	gate		. bit 23 = indirectly over a stored gate

	dsr	6

	sbr	18
	j	store_upacket

gate	and	(07FFFFF)	. leave bit 23 behind
	off	see$all		. 48-bit gate descriptor is anywhere
	dl	0, a		. in calling application address space
	on	see$all--see$2	. but you need TCB + kernel store again here

	dsl	6		. frame page high index
				. is not in interrupt return frame
	drl	18		. but 1 must be in bit 47


store_upacket
	ds	UPACKET+2	. set thread transfer

	la	0, sp		. read bank name again
	and, xi	-64		. beginning with vector 0
				. write the 64 entry points
				. into the vector bank

p	$proc
v64*	$name
	sa	VECTOR(?)
	aa, xi	1
	$end

?	$do	64,	v64

	la, xi	128
	
        sa	 RSAVE+sp	. set user SP

	dl	(080:d)		. default halfword-sensitive
				. just for now
	ds	UPACKET


	lcal	tdescriptor
	j	no_new_task_descriptor


	lb	1, sp
	sb	1, x

	sx	TDESCRIPTOR

	push	('TCB')
	pop	TCB

	inA	65
	sa	3, x
	sa	0, sp

	z	2, x		. clear tdescriptor flags

?	$do	TDESCRIPTOR_WORDS-6,	z	6-1+?, x
				. clear affinity mask
	sbl	2

	ts	switch_lock_cell
	REBOUND75		. j	$-1

	ab, xi	stem(1)
	la	3, b		. trailing uplink
	sx	0, a		. new is last->next
	sb	0, x		. stem is new->next
	sx	3, b		. new is stem->uplink

	z	switch_lock_cell

	lx	$VECTOR_HIGH,,xi
	lr	vpointer(33),,xi
	ql	(0C00001C00001C00001C00001q)
seal32vectors
	ax	-32,,xi
?	$do	32/4,	qs	32-?*4, x
	jxge	seal32vectors

	la	(APPLICATION_BASE/*12)
	sa	vpointer(17)

	la, xi	handle(4)	. good, reserve handle(1..3)
	sa	handles
	z	free_handle

	z	NEXT_THREAD
	z	TAG		. clear optional thread name

	la	(0C00000:s)
	sa	FP_FRAP		. default rounding pattern
	z	FP_XPO		. no floating overflow yet
	z	ERROR_RESTART	. process cat activate restart on fault
				. if it is essential to system running
				. ii RESTART_EI$ with bit 23 of a asserted

	dpop	a_x

	lret	0

no_new_task_descriptor
	la	BANK_CHAIN
	lcal	bank_free

no_new_task
priority_out_of_range
	dpop	a_x
	dsr	48
	lret	0

tdescriptor
	ts	threads_lock_cell
	lcal	REBOUND75

	lx	free_tdescriptor
	tz	x_x
	j	found_tdescriptor
	lx	next_tdescriptor_sp
	ax, xi	-TDESCRIPTOR_WORDS
	lr	next
	jxge	new_tdescriptor
	z	threads_lock_cell
	lret	0

new_tdescriptor
	sx	next_tdescriptor_sp
	z	threads_lock_cell
	lret	1

found_tdescriptor
	push	0, x
	pop	free_tdescriptor
	z	threads_lock_cell
	lret	1

	$trace	$zenith

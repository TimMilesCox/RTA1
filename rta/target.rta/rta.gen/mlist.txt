MASMX 7r3A Build 12
3/image.msm
STERM=.
STERM=:
*EOF*
  :                            1 
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            98 	$list		2
  :                            99 $(65:MANAGER_TABLE)
  :                            100 
  :                            101 new_dayclock	$res	2
  :                            102 energy$advise	$res	1
  :                            103 
  :                            104 .	core2core_alert	$res	24		. parameter buffers for core2core interrupts
  :                            105 
  :                            106 	.	the rest of $(65) starts with memory management and scheduler data
  :                            107 
  :                            108 $(0:0:0/$p0)
00:000000 B60040              +109 	j		engage		. normal start
00:000001 B60067              +110 	j		restart		. ISR in error restart single step
00:000002 B6006F              +111 	j		external_interrupts
00:000003 B600BF              +112 	j		fpxpo_ii
  :                            113 
00:000004 B600CA              +114 	j		i_timer		. TIMER$* incrementer overflow
00:000005 B600FB              +115 	j		alert_ii	. ATTENTION$
00:000006 B60132              +116 	j		smp_pend	. start vector smp cores ...1111 1110
  :                            117 
00:000007 7D0000              +118 	$do		63-$,	ir	0
00:000008 7D0000              +118 
00:000009 7D0000              +118 
00:00000A 7D0000              +118 
00:00000B 7D0000              +118 
00:00000C 7D0000              +118 
00:00000D 7D0000              +118 
00:00000E 7D0000              +118 
00:00000F 7D0000              +118 
00:000010 7D0000              +118 
00:000011 7D0000              +118 
00:000012 7D0000              +118 
00:000013 7D0000              +118 
00:000014 7D0000              +118 
00:000015 7D0000              +118 
00:000016 7D0000              +118 
00:000017 7D0000              +118 
00:000018 7D0000              +118 
00:000019 7D0000              +118 
00:00001A 7D0000              +118 
00:00001B 7D0000              +118 
00:00001C 7D0000              +118 
00:00001D 7D0000              +118 
00:00001E 7D0000              +118 
00:00001F 7D0000              +118 
00:000020 7D0000              +118 
00:000021 7D0000              +118 
00:000022 7D0000              +118 
00:000023 7D0000              +118 
00:000024 7D0000              +118 
00:000025 7D0000              +118 
00:000026 7D0000              +118 
00:000027 7D0000              +118 
00:000028 7D0000              +118 
00:000029 7D0000              +118 
00:00002A 7D0000              +118 
00:00002B 7D0000              +118 
00:00002C 7D0000              +118 
00:00002D 7D0000              +118 
00:00002E 7D0000              +118 
00:00002F 7D0000              +118 
00:000030 7D0000              +118 
00:000031 7D0000              +118 
00:000032 7D0000              +118 
00:000033 7D0000              +118 
00:000034 7D0000              +118 
00:000035 7D0000              +118 
00:000036 7D0000              +118 
00:000037 7D0000              +118 
00:000038 7D0000              +118 
00:000039 7D0000              +118 
00:00003A 7D0000              +118 
00:00003B 7D0000              +118 
00:00003C 7D0000              +118 
00:00003D 7D0000              +118 
00:00003E 7D0000              +118 
  :                            119 
00:00003F B6004A              +120 	j		anomaly		. analyse fault in ISR
  :                            121 
  :                            122 $(0:64)
  :                            123 
  :                            124 "$LOCK_SWITCH"	$equ	1		. thread switch under external interrupts lock
  :                            125 
00:000040 5500FC              +126 engage	lx, xi		256-4
00:000041 10008F              +127 	sx		sp_x
00:000042 10008E              +128 	sx		fp_x
  :                            129 
  :                            130 	$if	0
  :                            131 	ql	(4.5)			. to these can be switched
  :                            132 	fd	(3.0)			. to see if floating instructions
  :                            133 	fa	(6.0)			. operate correctly in interrupt mode
  :                            134 	fan	(3.0)			. although no ISR ever uses fp
  :                            135 	$endif
  :                            136 
00:000043 04007C              +137 	inA		ram$threshold
00:000044 200087              +138 	sa		FREE_BASE
Note: image.msm Line 139: this tests a_x not a
00:000045 680084              +139 	tanu, xi	1
00:000046 DD0001              +139 
00:000047 DE0049              +140 	jnzb		image_in_rom
  :                            141 
00:000048 3E0131              +142 	lcal		load_image
  :                            143 
  :                            144 			. this is an indirection literal pointing to a gate literal
  :                            145 			. pointing past the interrupt vectors in TRANSFER_PAGE
  :                            146 image_in_rom
  :                            147 
00:000049 F7013B              +148 	go		(0800000++$p0(start, TRANSFER_PAGE/*12d)s)
  :                            149 
  :                            150 			. was [ go (TRANSFER_PAGE/*6) ] but an application could interrupt
  :                            151 			. to there by mistake and accidentally reinitialise the system
  :                            152 
  :                            153 			. an application can only get to page TRANSFER_PAGE with ii instruction
  :                            154 			. but this is also interrupt code and can go or call into ISR space
  :                            155 
00:00004A 4700A0              +156 anomaly	qs		32+128			. ISR faulted
00:00004B 4F0080              +157 	ql		128			. save interrupt registers [ a b 6 7 ]
00:00004C 47009C              +158 	qs		28+128			. + [ r k x y ] for restart trace
  :                            159 
00:00004D 4DFFFF              +160 	lk		-1,,xi			. see if evidently a bad service call param did this
00:00004E 60F007              +161 	la		7, sp
00:00004F AF013C              +162 	mtane		(tag_ii_user_refp) 	. bad param to ISR?
00:000050 B60052              +162 
00:000051 7D0000              +163 	ir		0			. go back and retire the process
00:000052 AF013D              +164 	mtane		(zeta_ii_user_refp)
00:000053 B60055              +164 
00:000054 7D0000              +165 	ir		0
  :                            166 
  :                            167 
  :                            168 	$if		0
  :                            169 	mtane		(rtq_user_rfp)
  :                            170 	ir		0
  :                            171 	$endif
  :                            172 
  :                            173 	.	any more application causes of broken ISR above this line
  :                            174 	.	below this line it has been decided to restart the system
  :                            175 	.	but unknown the extent of system configuration taken place
  :                            176 	.	working set interrupt registers are saved in interrupt stack registers
  :                            177 	.	without assuming any storage assigned so to avoid nested faults
  :                            178 
00:000055 CF008E              +179 	dl		fp_x			. [ fp sp ]
00:000056 C7009A              +180 	ds		128+26
  :                            181 
00:000057 4FF000              +182 	ql		0, sp
00:000058 4700A4              +183 	qs		128+36
  :                            184 
00:000059 0C0041              +185 	inB		65			. application TCB if any already loaded
00:00005A 2800A9              +186 	sb		128+41
  :                            187 
00:00005B 040042              +188 	inA		66			. kernel vector list
00:00005C 0C0043              +189 	inB		67			. kernel storage
00:00005D C700AA              +190 	ds		128+42
  :                            191 
00:00005E 040044              +192 	inA		68			. more kernel storage 
00:00005F 0C0045              +193 	inB		69			. populated if system is large
00:000060 C700AC              +194 	ds		128+44
  :                            195 
00:000061 040046              +196 	inA		70			. or very large
00:000062 0C0047              +197 	inB		71
00:000063 C700AE              +198 	ds		128+46
  :                            199 						. deal with case interrupt frames too many
  :                            200 	$if		0
  :                            201 
  :                            202 	lr		128+24+2,,xi		. architecture corrects minimally @ sp < 0
  :                            203 	lx		sp_x			. keep it saner than that here
  :                            204 	jxge		restart			. tendency is to get here if there are
  :                            205 						. new contingencies in xrelay_reset
  :                            206 	$endif
  :                            207 
00:000064 CF013E              +208 	dl		(CHILLDOWN, REST_GRANULE:d)
00:000065 1C0067              +209 	outB		chill$down		. so cool it this much
00:000066 140066              +210 	outA		INDICATION$		. this way
  :                            211 
  :                            212 	$do	0,		j		engage			. reset without resynchronisation
  :                            213 
  :                            214 						. this is a broadcast only to core 0	
  :                            215 restart
  :                            216 	$if		1
00:000067 4D00FC              +217 	lk		252,,xi			. prevent crash in network trunk reset
00:000068 08008E              +218 	sk		fp_x			
00:000069 08008F              +219 	sk		sp_x
  :                            220 	$endif		
  :                            221 
00:00006A 4DFFFE              +222 	lk		-2,,xi			. all cores except core 0. This here must be core 0
00:00006B 650001              +223 	la		SMP_PEND$,,xi		. latent param is subvector only
00:00006C 14004F              +224 	outA		MCAST_TO$		. other cores -> powersave.powersave.powersave...
  :                            225 
00:00006D FF0140              +226 	call		(xrelay_reset)		. this is restart interrupt called from guard ISR
00:00006E B60040              +227 	j		engage			. if a system-essential process faults: restart
  :                            228 						. trace in interrupted TCB + 1024
  :                            229 external_interrupts
00:00006F 8F0084              +230 	qpush		a_x			. all external interrupts are allowed
00:000070 8F0080              +231 	qpush		r_x			. in overlapped time
00:000071 054000              +232 	on		see$1
00:000072 9F106A              +233 	dpush		ABT+WORKTANK_I
  :                            234 
00:000073 04004A              +235 	inA		XI_PENDING$
00:000074 A500FF              +236 	and		255,,xi			. only expecting 8 pins
00:000075 C600A1              +237 	jza		external_ixx
00:000076 0C004D              +238 	inB		CORE_SOCKET$		. this core index
00:000077 2E0003              +239 	sbl		3			.  positioned to OR device index
  :                            240 
00:000078 FD0001              +241 	push		1,,xi			. pending pin position biased
00:000079 FDFFFF              +242 	push		-1,,xi
00:00007A 9F0084              +243 	dpush		a_x
  :                            244 
  :                            245 external_next
00:00007B 0D0001              +246 	off		carry$			. don't roll a random 1 into 3,sp
  :                            247 						. any time around
  :                            248 						. 3,sp contains 1 pin position bit
00:00007C 17F002              +249 	inc		2, sp			. interrupt source index [-1] -> 0..7
00:00007D 3FF003              +250 	slc		3, sp			. ACK pin position biased by 1
  :                            251 						. zero is now rolled into carry
00:00007E 37F000              +252 	src		0, sp			. PENDING pin shift to carry
00:00007F 5E007B              +253 	jnc		external_next		. this won't roll 1 into 3,sp
  :                            254 	
00:000080 60F002              +255 	la		2, sp			. device index
00:000081 0CC050              +256 	inB		I$DATA, a
  :                            257 
00:000082 90F001              +258 	or		1, sp			. core index * 8
00:000083 C50001              +259 	aa		1,,xi			. make the source index relative 1
00:000084 C70086              +260 	ds		6+128			. zero is reserved
  :                            261 
00:000085 68F003              +262 	lb		3, sp			. 
00:000086 0E0001              +263 	sbr		1			. push out bias 
00:000087 1C004B              +264 	outB		XI_ACK$			. push the pending pins down
  :                            265 
00:000088 B5FFFF              +266 	xor		-1,,xi			. subtract source relative 1 from address B3
00:000089 C53001              +267 	aa		03001,,xi		. not concerned about carry here
00:00008A 053F00              +268 	on		see$all--see$1
00:00008B 60C000              +269 	la		0, a
  :                            270 
00:00008C C6009F              +271 	jza		external_ix
00:00008D 680084              +272 	lb		a_x
00:00008E B80141              +273 	xorB		(0C00001s)		. more likely this than zero. Same effect
00:00008F CE009F              +274 	jzb		external_ix
  :                            275 
00:000090 34002A              +276 	sabr		WORKTANK_I		. obtain thread descriptor from thread control block
00:000091 588142              +277 	ly		*(WORKTANK_I*/12++TDESCRIPTOR-01000)
  :                            278 
00:000092 B0B003              +279 	xor		3, y			. the same TCB ?
00:000093 D6009E              +280 	jnza		external_zx		. does not seem to be the same thread as before
  :                            281 
00:000094 60B002              +282 	la		2, y			. flags not on the way out ?
00:000095 A00143              +283 	and		(EXIT++TRAP)
00:000096 D6009E              +284 	jnza		external_zx		. deconfigure thread from interrupt
  :                            285 
  :                            286 
00:000097 680144              +287 	lb		(WORKTANK_I*/12++XINTT-01000s)
00:000098 70D003              +288 	tz		3, b			. external interrupt table?
00:000099 3E00A9              +289 	lcal		write_xint_table	. yes, table the interrupt indication
  :                            290 
00:00009A 30B002              +291 	z		2, y			. action, free the target thread to schedule
00:00009B FD0001              +292 	push		1,,xi			. force running thread to timeslice
00:00009C 380094              +293 	pop		REALTIME$_CLOCK		. if it has nonzero imask it won't
00:00009D B6009F              +294 	j		external_ix		. and could be the target wake_up thread
  :                            295 
  :                            296 external_zx
00:00009E 30A000              +297 	z		0, x			. remove the thread from the kernel vector list
  :                            298 						. it is not actual
  :                            299 					. roll zero into low order position ACK flag
00:00009F 70F000              +300 external_ix	tz	0, sp
00:0000A0 B6007B              +301 		j	external_next
  :                            302 
00:0000A1 87F000              +303 external_ixx	qpop	0, sp
  :                            304 
00:0000A2 380084              +305 		pop	a_x			. put windows 42, 43 back where you found them
00:0000A3 34002A              +306 		sabr	WORKTANK_I
00:0000A4 380084              +307 		pop	a_x
00:0000A5 34002B              +308 		sabr	WORKTANK_J
  :                            309 
00:0000A6 870080              +310 		qpop	r_x
00:0000A7 870084              +311 		qpop	a_x
  :                            312 
00:0000A8 7D0000              +313 	ir		0
  :                            314 
  :                            315 	
  :                            316 $(69::,b)
45:000000                     +317 xitable	xint_table
45:000001                     +317 
45:000002                     +317 
45:000003                     +317 
  :                            318 
  :                            319 $(0)
  :                            320 
  :                            321 write_xint_table				. minimal preprocess ISR stub
00:0000A9 FD0007              +322 	push		MAX_INT_MASK,,xi	. data port read has already happened
00:0000AA 27F000              +323 	sim		0, sp			. don't get interrupted with lock on
  :                            324 
00:0000AB 07D000              +325 	ts		xitable:lock_cell	. switch to driver affinity thread is immediate
00:0000AC B600AB              +326 	j		$-1			. if interrupt source needs more I/O in realtime
  :                            327 						. then more ISR preprocess is necessary
00:0000AD F80085              +328 	push		b_x
00:0000AE 50D002              +329 	lx		xitable:wcursor		. read the write pointer
00:0000AF CF0086              +330 	dl		6+128			. relative 1 interrupt source : received data
00:0000B0 F80082              +331 	push		x_x			. save the structure-relative write pointer
00:0000B1 80F001              +332 	ax		1, sp			. rezone it to the working window + table offset
00:0000B2 C7A000              +333 	ds		0, x			. write the data
00:0000B3 380082              +334 	pop		x_x			. save the structure-relative write pointer
00:0000B4 380085              +335 	pop		b_x
  :                            336 
00:0000B5 40D003              +337 	lr		xitable:limit		. read the table limit
00:0000B6 850002              +338 	ax		2,,xi			. advance the write pointer
00:0000B7 F600B9              +339 	jxge		write_xint_wrap		. wrap if necessary
00:0000B8 B600BA              +340 	j		write_xint_wcursor
  :                            341 
  :                            342 write_xint_wrap
  :                            343 	$if		1
00:0000B9 550004              +344 	lx		4,,xi			. only the structure offet
  :                            345 	$else
  :                            346 	lx		xitable:xint,,i		. not the ea used to write
  :                            347 	$endif
  :                            348 
  :                            349 write_xint_wcursor
00:0000BA 10D002              +350 	sx		xitable:wcursor		. store updated write pointer
  :                            351 
00:0000BB 30D000              +352 	z		xitable:lock_cell	. free the structure lock
00:0000BC 27F000              +353 	sim		0, sp			. change interrupt mask back
00:0000BD 17008F              +354 	inc		sp_x
00:0000BE 350000              +355 	lret		0
  :                            356 
  :                            357 fpxpo_ii
00:0000BF 60F001              +358 	la		1, sp		. saved PSR
00:0000C0 A50008              +359 	and		fp$r,,xi	. isolate residue indication
00:0000C1 480084              +360 	lk		a_x
00:0000C2 4F0145              +361 	ql		(-0.0)		. default decision
00:0000C3 470004              +362 	qs		a		. write major result
00:0000C4 700081              +363 	tz		k_x		. 192-bit operation?
00:0000C5 470008              +364 	qs		$residue	. write minor result
00:0000C6 054000              +365 	on		see$1		. look into the thread control block
00:0000C7 600149              +366 	la		(0800000s)	. flag this happened
00:0000C8 20103A              +367 	sa		FP_XPO		. in case the application likes to know
00:0000C9 7D0000              +368 	ir		0
  :                            369 
  :                            370: 	$include	../timer/timer
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 .	this is
  :                            42 
  :                            43 .		timer/timer.msm
  :                            44 .		in restarts page because none of it is service calls
  :                            45 
  :                            46 PER_SECOND	$equ	1000000000	. just for now the incrementer
  :                            47 					. is in nanoseconds indeed
  :                            48 
  :                            49 i_timer				. incrementer overflow
  :                            50 				. when an incrementer is added to hardware
  :                            51 				. update the dayclock in interrupt registers
  :                            52 				. DAYCLOCK$U DAYCLOCK
  :                            53 				. and multicast the new millisecond time
  :                            54 				. with an out to the I/O port that does that
  :                            55 
00:0000CA 9F0084              +56 	dpush	a_x		. may be a nested interrupt
00:0000CB F80081              +57 	push	k_x		. and if not application are untouched
  :                            58 
  :                            59 	$if	1		. updated ms time already delivered
  :                            60 				. as in emulations
00:0000CC CF0096              +61 	dl	DAYCLOCK$U
00:0000CD 051000              +62 	on	see$3
00:0000CE C73000              +63 	ds	new_dayclock
  :                            64 
  :                            65 	$else			. something like this
  :                            66 				. if really maintaining MS time
  :                            67 				. from an incrementer
  :                            68 
  :                            69 	dl	DAYCLOCK$U
  :                            70 	da	(1d)
  :                            71 	ds	DAYCLOCK$U
  :                            72 	on	see$3		. kernel memory
  :                            73 	ds	new_dayclock
  :                            74 	dl	(-PER_SECOND/1000, -1d)
  :                            75 	outA	INC$START
  :                            76 
  :                            77 	$endif
  :                            78 				. the rest is the same. broadcast it
  :                            79 
00:0000CF 0C004D              +80 	inB	CORE_SOCKET$
00:0000D0 65FFFE              +81 	la	-2,,xi
00:0000D1 66D000              +82 	ral	0, b		. broadcast everyone but me
00:0000D2 480084              +83 	lk	a_x
00:0000D3 650000              +84 	la	DAYCLOCK_MCAST$,,xi
00:0000D4 14004F              +85 	outA	MCAST_TO$
  :                            86 
00:0000D5 380081              +87 	pop	k_x
00:0000D6 380084              +88 	dpop	a_x
00:0000D7 380085              +88 
00:0000D8 7D0000              +89 	ir	0
  :                            90 
  :                            91 	$if	0		. this is inline in attention broacase ISR
  :                            92 
  :                            93 dayclock_update
  :                            94 	on	see$3
  :                            95 	dl	new_dayclock	. receive the new time from multicast
  :                            96 	ds	DAYCLOCK$U
  :                            97 
  :                            98 	lret	0
  :                            99 
  :                            100 	$endif
  :                            371 
  :                            372 .	this may only be called for a thread with a core affinity
  :                            373 .	it's broadcast as a simple way of filtering
  :                            374 
  :                            375 run_device_thread
00:0000D9 500084              +376 	lx		a_x
00:0000DA C5FFFF              +377 	aa		-1,,xi		. [ 1..192 ] change to relative 0
00:0000DB 160003              +378 	dsr		3		. 
00:0000DC 0E0015              +379 	sbr		21
00:0000DD C70086              +380 	ds		6+128		. core index : device 0..7
00:0000DE 04004D              +381 	inA		CORE_SOCKET$	. who am I ?
00:0000DF B00086              +382 	xor		6+128
00:0000E0 D600EC              +383 	jnza		run_device_wrongcore
  :                            384 
00:0000E1 650000              +385 	la		0,,xi
00:0000E2 D00082              +386 	ana		x_x
00:0000E3 552FFF              +387 	lx		03000-1,,xi
00:0000E4 800084              +388 	ax		a_x
00:0000E5 60A000              +389 	la		0, x
  :                            390 
00:0000E6 A0014A              +391         and             (03FFFFF)
00:0000E7 C600EC              +392         jza             run_device_nothread
00:0000E8 680084              +393         lb              a_x
00:0000E9 B80141              +394         xorB            (0C00001s)
00:0000EA CE00EC              +395         jzb             run_device_nothread
  :                            396 
00:0000EB 3E00EE              +397 	lcal	activate_thread
  :                            398 
  :                            399 run_device_wrongcore
  :                            400 run_device_nothread
00:0000EC 30A000              +401 	z		0, x		. bad thread
00:0000ED 350000              +402 	lret		0		. good thread
  :                            403 
  :                            404 	$if		1
  :                            405 
  :                            406 	. this does not need a broadast
  :                            407 	. this is the same thing as EVENT_FREE$ event_free_ii
  :                            408 	. which does not need broadcast
  :                            409 
  :                            410 activate_thread				. any kind of thread
00:0000EE 057F00              +411 	on		see$all
  :                            412 
00:0000EF F8106A              +413 	push		ABT+WORKTANK_I	. save whatever active thread has for window 42
00:0000F0 34002A              +414 	sabr		WORKTANK_I
  :                            415 
00:0000F1 588142              +416 	ly		*(WORKTANK_I*/12++TDESCRIPTOR-01000)
00:0000F2 B0B003              +417 	xor		3, y		. does descriptor still match TCB?
00:0000F3 D600F8              +418 	jnza		inactive_thread
00:0000F4 60B002              +419 	la		2, y
00:0000F5 A00143              +420 	and		(EXIT++TRAP)
00:0000F6 D600F8              +421 	jnza		activate_exit
  :                            422 
00:0000F7 30B002              +423 	z		2, y		. thread to run
  :                            424 					. reasons and information stored already
  :                            425 activate_exit
  :                            426 inactive_thread
00:0000F8 380084              +427 	pop		a_x
00:0000F9 34002A              +428 	sabr		WORKTANK_I
  :                            429 
00:0000FA 350000              +430 	lret		0
  :                            431 
  :                            432 	$endif
  :                            433 
  :                            434 
  :                            435 alert_ii				. service request[s] from other core[s]
00:0000FB 8F0084              +436 	qpush		a_x		. may be a nested interrupt
00:0000FC 8F0080              +437 	qpush		r_x
  :                            438 
00:0000FD 60F008              +439 	la		8, sp		. latent param contains 2-bit subvector ++ page index
  :                            440 					. or 22-bit subvector
  :                            441 
00:0000FE 160016              +442 	dsr		22		. bitsplit 2.22
00:0000FF 0E0002              +443 	sbr		2
00:000100 C60105              +444 	jza		alert_index22
  :                            445 
00:000101 B6C101              +446 	j		$, a
00:000102 B60112              +447 	j		device_activate	. broadcast to schedule on core of affinity
00:000103 B60115              +448 	j		smp_activate	. broadcast to plant kernel vectors + storage on smps
00:000104 B60126              +449 	j		thread_halt	. broadcast to arrest threads of closing processes
  :                            450 
  :                            451 
  :                            452 alert_index22
Note: image.msm Line 453: this tests b_x not b
00:000105 600085              +453 	tanuba		__ALERTS,,xi	. check don't guess
00:000106 D50003              +453 
00:000107 7E012E              +454 	jc		alert_iix	. subvector out of range
  :                            455 
00:000108 B6D109              +456 	j		alerts, b
  :                            457 
00:000109 B6010C              +458 alerts	j		dayclock_u
00:00010A B60132              +459 	j		smp_pend	. same as restart. Waits for core[0] to initialise system
00:00010B B60001              +460 	j		1		. core[0] requested to restart everything
  :                            461 					
  :                            462 __ALERTS $equ		$-alerts
  :                            463 
  :                            464 dayclock_u
00:00010C 780098              +465 	tp		128+24		. kernel storage not yet based
00:00010D B6012E              +466 	j		alert_iix	. do no try to read it
00:00010E 051000              +467 	on		see$3
00:00010F CF3000              +468 	dl		new_dayclock
00:000110 C70096              +469 	ds		DAYCLOCK$U
00:000111 B6012E              +470 	j		alert_iix
  :                            471 
  :                            472 device_activate
00:000112 600085              +473 	la		b_x
00:000113 3E00D9              +474 	lcal		run_device_thread
00:000114 B6012E              +475 	j		alert_iix
  :                            476 
  :                            477 smp_activate
00:000115 057F00              +478 	on		see$all
00:000116 1C0042              +479 	outB		66
00:000117 650002              +480 	la		APPLICATION_L,,xi
00:000118 682075              +481 	lb		kernel_B3	. kernel storage pointers for all cores
00:000119 140048              +482 	outA		application$L
00:00011A 1C0043              +483 	outB		67
00:00011B CF2076              +484 	dl		kernel_B4
00:00011C 140044              +485 	outA		68
00:00011D 1C0045              +486 	outB		69
00:00011E CF2078              +487 	dl		kernel_B6
00:00011F 140046              +488 	outA		70
00:000120 1C0047              +489 	outB		71
  :                            490 
00:000121 650080              +491 	la		128,,xi		. core resume needs sp_x @ 128
00:000122 20008F              +492 	sa		sp_x
00:000123 4500FC              +493 	lr		252,,xi		. schedule needs sp_x @ 252
00:000124 00008E              +494 	sr		fp_x		. and fp_x now
  :                            495 
00:000125 F7014D              +496         go		(0800000++$p0(core_resume, TRANSFER_PAGE/*12d)s)	. does not return
  :                            497 
  :                            498 thread_halt
  :                            499 .	lb		4, sp		. latent parameter is @ 8, sp and already in b
  :                            500 .	andB		(03FFFFF)	. thread which must halt, already trimmed
00:000126 040041              +501 	inA		65		. I am running this thread?
00:000127 B80084              +502 	xorB		a_x
00:000128 DE012E              +503 	jnzb		alert_iix	. request from another core?
  :                            504 
00:000129 60E001              +505 	la		1, fp		. zero application interrupt mask
00:00012A A0014E              +506 	and		(0807FFFs)	. or he jerst won't timeslice
00:00012B 20E001              +507 	sa		1, fp		. 2nd word application interrupt frame
  :                            508 
00:00012C 650001              +509 	la		1,,xi		. force thread to timeslice
00:00012D 200094              +510 	sa		REALTIME$_CLOCK	. it's already marked stop
  :                            511 
  :                            512 alert_iix
00:00012E 870080              +513 	qpop		r_x
00:00012F 870084              +514 	qpop		a_x
00:000130 7D0000              +515 	ir		0
  :                            516 
  :                            517 load_image
  :                            518 	.	if an image is to be loaded starting at
  :                            519 	.	TRANSFER_PAGE, load it here from a local
  :                            520 	.	file system
  :                            521 
  :                            522 	.	and adjust FREE_BASE to the first page
  :                            523 	.	after the system image
  :                            524 
  :                            525 	.	otherwise a system is already in ROM
  :                            526 	.	which is larger than just this
  :                            527 	.	restart page
  :                            528 
00:000131 350000              +529 	lret		0
  :                            530 
  :                            531 smp_pend
00:000132 CF014F              +532 	dl	(CHILLDOWN, 100000d)
00:000133 550100              +533 	lx	256,,xi
00:000134 10008F              +534 	sx	sp_x
00:000135 10008E              +535 	sx	fp_x
  :                            536 
  :                            537 smp_pendu
00:000136 1C0067              +538 	outB	chill$down	. for this microsecs
00:000137 140066              +539 	outA	INDICATION$	. powersave
00:000138 B60136              +540 	j	smp_pendu
  :                            541 
  :                            542 	$do		$<256,$(0:256)
  :                            543 
00:000139+000082000001
00:00013b+800139
00:00013c+0006CC
00:00013d+00062B
00:00013e+0000080001F4
00:000140+[0000]18:000000
00:000141+C00001
00:000142+02A001
00:000143+300000
00:000144+02A180
00:000145+FFFFFFFFFFFFFFFFFFFFFFFF
00:000149+800000
00:00014a+3FFFFF
00:00014b+0002F0000001
00:00014d+80014B
00:00014e+807FFF
00:00014f+0000080186A0
  :                            544 $(0:0:TRANSFER_PAGE/$0p1)
  :                            545 
00:001000 7D0000              +546 		ir	0	.	a spare, was the entry point from restart
  :                            547 				.	but is addressable as an interrupt vector / system call
  :                            548 
00:001001 B602AB              +549 		j		yield			. YIELD$*
00:001002 B6006C              +550 		j		spawn_ii		. SPAWN$*	
00:001003 B60045              +551 		j		bank_ii			. BANK$*
00:001004 B6004E              +552 		j		array_ii		. ARRAY$*
00:001005 B60057              +553 		j		bank_free_ii		. BANK$FREE*
00:001006 B60271              +554 		j		exit_ii			. EXIT$*
00:001007 B604AA              +555 		j		thread			. THREAD$*
00:001008 B60040              +556 		j		freetotal_ii		. TOTAL$FREE*
00:001009 B606C2              +557 		j		tag_ii			. TAG$
00:00100A B605CF              +558 		j		assign_xvector_ii	. ASSIGN_XVECTOR$
00:00100B B60611              +559 		j		itable_ii		. I$TABLE
00:00100C B6061D              +560 		j		affinity_ii		. AFFINITY$
00:00100D B605BC              +561 		j		write_avector_ii	. WRITE_AVECTOR$
  :                            562 
  :                            563 	$do		14-$,	ir	0
  :                            564 
00:00100E B605FD              +565 		j		fpxpo_read_clear_ii	. FP_XPO$FLAG*
00:00100F B60603              +566 		j		xint_bind_ii		. XINT$BIND
00:001010 B6053F              +567 		j		handle_ii		. HANDLE$*
00:001011 B60557              +568 		j		free_handle_ii		. FREE_HANDLE$*
00:001012 B60575              +569 		j		read_handle_ii		. READ_HANDLE$*
00:001013 B605B6              +570 		j		read_xvector_ii		. READ_XVECTOR$*
00:001014 B605C6              +571 		j		write_xvector_ii	. WRITE_XVECTOR$*
00:001015 B605A7              +572 		j		read_socket_ii		. READ_SOCKET$*
00:001016 B60587              +573 		j		usocket_c_ii		. USOCKET$C*
00:001017 B605E5              +574 		j		kernel_b1_ii		. KERNEL$B1*
00:001018 B605ED              +575 		j		b1_ii			. B1$*
00:001019 B605DD              +576 		j		kernel_b1_ii_1		. KERNEL$B1_1*
00:00101A B605F1              +577 		j		dayclock_w_ii		. DAYCLOCK$W*
00:00101B B6052E              +578 		j		twait_ii		. TWAIT$*
00:00101C B60522              +579 		j		event_wait_ii		. EVENT_WAIT$*
00:00101D B60511              +580 		j		event_free_ii		. EVENT_FREE$*
00:00101E B605F8              +581 		j		switch_fp_guard_ii	. FP_GUARD$*
  :                            582 
  :                            583 	$do		31-$,	ir	0
  :                            584 
00:00101F B602A3              +585 		j		guard_ii		. GUARD$* this must stay at this address 1:31
  :                            586 
00:001020 B604F5              +587 ?	$do	XIOBASES,	j	xbase(32+?-1)
00:001021 B604FC              +587 
00:001022 B60503              +587 
00:001023 B6050A              +587 
  :                            588 
00:001024 7D0000              +589 	$do		44-$,	ir	0	
00:001025 7D0000              +589 
00:001026 7D0000              +589 
00:001027 7D0000              +589 
00:001028 7D0000              +589 
00:001029 7D0000              +589 
00:00102A 7D0000              +589 
00:00102B 7D0000              +589 
  :                            590 
00:00102C B60676              +591 CACHE_NETB$*	$vector	cache_standard_netbuf_ii
00:00102D B60684              +592 ON_NETB$*	$vector	base_standard_netbuf_ii
00:00102E B606AA              +593 FREE_DEVB$*	$vector	unbase_deviceb_ii
00:00102F B606AD              +594 FREE_SOCKB$*	$vector	unbase_socketb_ii
00:001030 B606B0              +595 FREE_NETB$*	$vector	unbase_standard_netbuf_ii
  :                            596 
00:001031 B60636              +597 NET2SYM$*	$vector	net2sym_ii		. encode a connection handle
  :                            598 						. and assign it to a process as stdin/out/err
00:001032 B6065F              +599 THREAD$STATE*	$vector	thread_state_ii		. is thread [application a] running?
00:001033 B60668              +600 A$IDX*		$vector	storage_block_idxa_ii	. return in a 4K word block indentifier at base_table ABT+[a]
00:001034 B6066F              +601 B$IDX*		$vector	storage_block_idxb_ii	. return in b 4K word block indentifier at base_table ABT+[b]
  :                            602 						
00:001035 B606E4              +603 RESTART_EI$	$vector		restart_ei
00:001036 B606E8              +604 ONETIME_SAVE$	$vector		one_time_save_ii
00:001037 B60706              +605 TERAFRAME$*	$vector		teraframe:array_device_claim_ii	. ir		0
  :                            606 
00:001038 B60591              +607 USOCKET$*	$vector		usocket_ii
00:001039 B606D4              +608 FO$FRAME*	$vector		file_open_frame_ii
00:00103A B606DD              +609 FO$HEAP*	$vector		files_open_heap_ii
00:00103B B60578              +610 FILE$HANDLE*	$vector		file_handle_ii
00:00103C B60622              +611 "$ZETA"*	$vector		zeta_ii
00:00103D B606FE              +612 ENERGY$*	$vector		energy_ii
  :                            613 
00:00103E B606EB              +614 "$SMP"*		$vector		smp_ii
  :                            615 
  :                            616 	$do		$>64,	$flag	compress page 1 vectors
00:00103F 7D0000              +617 	$do		64-$,	ir	0
  :                            618 
  :                            619 __II_LOCK	$equ	0
  :                            620 
  :                            621 p	$proc
  :                            622 II_LOCK* $name
  :                            623 	$if	__II_LOCK
  :                            624 	push	7,,xi
  :                            625 	sim	0, sp
  :                            626 	$endif
  :                            627 	$end
  :                            628 
  :                            629 p	$proc
  :                            630 II_FREE* $name
  :                            631 	$if	__II_LOCK
  :                            632 	sim	0, sp
  :                            633 	inc	sp_x
  :                            634 	$endif
  :                            635 	$end
  :                            636 
  :                            637 freetotal_ii				. count up of all free memory banks
  :                            638 
  :                            639 STACKED_ITEST	$equ	0		. keep this at zero if you want to run
  :                            640 					. it tests what happens if an ISR faults
  :                            641 	$if	STACKED_ITEST		. ....................................
  :                            642 	$if	STACKED_ITEST=1
  :                            643 	la	*(31*/18)
  :                            644 	$else	STACKED_ITEST
  :                            645 	  $if	STACKED_ITEST=2
  :                            646 	  dl	(1, 100d)
  :                            647 	  $elseif STACKED_ITEST=3
  :                            648 	  dl	(00FFFF, 100d)
  :                            649 	  $else
  :                            650 	  dl	(03FFFFF, 100d)
  :                            651 	  $endif
  :                            652 	ds	2, sp
  :                            653 	ir	0
  :                            654 	$endif
  :                            655 	$endif				. ....................................
  :                            656 
00:001040 3E01BD              +657 	lcal		available_banks
00:001041 160018              +658 	dsr		24		. it may be larger than 24 bits
00:001042 36000C              +659 	dsl		12		. when expressed in words
00:001043 C70004              +660 	ds		4		. write to caller a:b
00:001044 7D0000              +661 	ir		0
  :                            662 	
  :                            663 bank_ii	II_LOCK
00:001045 600004              +664 	la		4
00:001046 3E01D2              +665 	lcal		bank
00:001047 200004              +666 	sa		4
  :                            667 
00:001048 C6004D              +668 	jza		nothing_gained
00:001049 054000              +669 	on		see$1
00:00104A 601004              +670 	la		BANK_CHAIN
00:00104B 20D000              +671 	sa		0, b		. descriptor pointer
00:00104C 281004              +672 	sb		BANK_CHAIN	. to front of chain
  :                            673 nothing_gained
  :                            674 	II_FREE
00:00104D 7D0000              +675 	ir		0
  :                            676 
  :                            677 array_ii
  :                            678 	II_LOCK
00:00104E 600004              +679 	la		4
00:00104F 3E0201              +680 	lcal		array
00:001050 200004              +681 	sa		4
  :                            682 
00:001051 C60056              +683 	jza		nothing_banked
00:001052 054000              +684 	on		see$1
00:001053 601004              +685 	la		BANK_CHAIN
00:001054 20D000              +686 	sa		0, b		. descriptor pointer
00:001055 281004              +687 	sb		BANK_CHAIN	. to front of chain
  :                            688 nothing_banked
  :                            689 	II_FREE
00:001056 7D0000              +690 	ir		0
  :                            691 
  :                            692 bank_free_ii
  :                            693 	II_LOCK
00:001057 600004              +694 	la		4		. bank ID value
  :                            695 
00:001058 057F00              +696 	on		see$all		. see TCB +
00:001059 6D1004              +697 	lb, xi		BANK_CHAIN	. descriptors in kernel memory
  :                            698 
00:00105A 48079F              +699 	lk		(0400000)
00:00105B AF0081              +700 	mta		k_x		. either not big
00:00105C B60060              +701 	j		bank_free_sysmem
00:00105D 4D003F              +702 	lk		63,,xi		. or not device zero = executable space
00:00105E AF07A0              +703 	mta		(0)
00:00105F B60754              +704 	j		teraframe:array_device_free
  :                            705 
  :                            706 bank_free_sysmem
00:001060 4807A1              +707 	lk		(03FFFFF)	. 22-bit search mask
00:001061 B60062              +708 	j		bank_freewheel	. start page index match will do	
  :                            709 
  :                            710 bank_freewheel
00:001062 580085              +711 	ly		b_x
00:001063 68B000              +712 	lb		0, y
00:001064 CE006B              +713 	jzb		bank_freed
00:001065 AFD001              +714 	mta		1, b		. skip on equal bank ID value 
00:001066 B60062              +715 	j		bank_freewheel
  :                            716 
00:001067 600085              +717 	la		b_x		. bank free wants
  :                            718 					. a descriptor pointer
  :                            719 
00:001068 68C000              +720 	lb		0, a		. take it out of
00:001069 28B000              +721 	sb		0, y		. the chain
  :                            722 
00:00106A 3E0156              +723 	lcal		bank_free
  :                            724 bank_freed
  :                            725 	II_FREE
00:00106B 7D0000              +726 	ir		0
  :                            727 
  :                            728 spawn_ii
  :                            729 	II_LOCK
00:00106C 054000              +730 	on		see$1	. you get here from an application
  :                            731 
00:00106D 0C0041              +732 	inB		65	. TCB in B65 and vector bank in B2
00:00106E 601042              +733 	la		ABT+2	. are constructed in situ
00:00106F 9F0084              +734 	dpush		a_x	. so save the caller's environment
  :                            735 
00:001070 4F0004              +736 	ql		a	. read the 4 parameters from
  :                            737 				. the application accumulators
  :                            738 
00:001071 3E036E              +739 	lcal		spawn
  :                            740 
00:001072 052000              +741 	on		see$2	. read the kernel vector bank
00:001073 CF2180              +742 	dl		rx_buffers
  :                            743 
00:001074 F82185              +744 	push		tcx_v4(1)
00:001075 9F207A              +745 	dpush		NFS_MOUNTS
00:001076 0D2000              +746 	off		see$2
00:001077 38207A              +747 	pop		NFS_MOUNTS
00:001078 38207B              +748 	pop		FILESHARE_TABLE
00:001079 382185              +749 	pop		tcx_v4(1)
  :                            750 
00:00107A C72180              +751 	ds		rx_buffers
  :                            752 
00:00107B 380084              +753 	pop		a_x	. retrieve the caller's B2
  :                            754 
00:00107C 0C0041              +755 	inB		65	. new B65 as result value
00:00107D 280004              +756 	sb		a	. in the application A-Register
00:00107E 380085              +757 	pop		b_x
00:00107F 1C0041              +758 	outB		65	. restore the caller's PCT
00:001080 340002              +759 	sabr		2	. restore the caller's B2
  :                            760 	II_FREE
00:001081 7D0000              +761 	ir		0
  :                            762 
  :                            763 
  :                            764 
00:001082 650002              +765 start	la		APPLICATION_L,,xi
00:001083 140048              +766 	outA		application$L	. lower limit application code calls
  :                            767 					. to avoid accidental jumps into interrupt code
  :                            768 					. using application registers
00:001084 3E00DA              +769 	lcal		measure
00:001085 3E00B5              +770 	lcal		stem_link
  :                            771 
  :                            772 			. some manager tasks will
  :                            773 			. get tabled here
  :                            774 
00:001086 4F07A2              +775 	ql		(networks, 0, NETWORK_D, -1:q)
00:001087 3E036E              +776 	lcal		spawn
  :                            777 
00:001088 601042              +778 	la		ABT+2			. the IP vector bank
00:001089 140042              +779 	outA		66			. is the kernel vector bank
  :                            780 						. kernel routines which need
  :                            781 						. to find kernel data
  :                            782 
00:00108A 052000              +783 	on		see$2
  :                            784 
00:00108B 0C0043              +785 	inB		67			. take copies for SMPs
00:00108C C72074              +786 	ds		kernel_B2
  :                            787 
00:00108D 040044              +788 	inA		68
00:00108E 0C0045              +789 	inB		69
  :                            790 
00:00108F C72076              +791 	ds		kernel_B4
  :                            792 
00:001090 040046              +793 	inA		70
00:001091 0C0047              +794 	inB		71
  :                            795 
00:001092 C72078              +796 	ds		kernel_B6
  :                            797 
00:001093 4F07A6              +798 	ql		(0q)
00:001094 C7207A              +799 	ds		NFS_MOUNTS		. + FILESHARE_TABLE
00:001095 45003F              +800 	lr		256/4-1,,xi
00:001096 5D2080              +801 	ly		usockb(1),,xi
  :                            802 
00:001097 47B000              +803 unbind	qs		0, y			. remove old assignments
00:001098 8D0004              +804 	ay		4,,xi			. of port descriptors
00:001099 1E0097              +805 	jdr		unbind
  :                            806 
00:00109A 40008F              +807 	lr		sp_x
00:00109B 4D0080              +808 	lk, xi		128
00:00109C 08008F              +809 	sk		sp_x
  :                            810 
  :                            811 	$if		$LOCK_SWITCH		. prime saved interrupt mask
00:00109D 300092              +812 	z		x$save2			. for restore at end of choose
  :                            813 	$endif
  :                            814 
00:00109E 4D0001              +815 	lk		1,,xi			. just core[0] so far
00:00109F 0828FD              +816 	sk		cores_active
  :                            817 
00:0010A0 B602F5              +818 	j		choose
  :                            819 
  :                            820: 	$include	memory
  :                            1 DMAXINP $equ	5*4096/2
  :                            2 DMAXINB	$equ	5*262144/2
  :                            3 
  :                            4 .	returns in a # storage words needed for memory management
  :                            5 .	returns in b # 262144-word banks in memory
  :                            6 
  :                            7 management_words
00:0010A1 040080              +8 	inA	128
00:0010A2 A007A1              +9         and	(03FFFFF)
00:0010A3 C50001              +10 	aa, xi	1	.	pages memory
00:0010A4 680084              +11 	lb	a_x
00:0010A5 0E0006              +12 	sbr	6
00:0010A6 C4D064              +13 	aa	100,b,i	.	tuples roughly + margin
00:0010A7 C5D800              +14 	aa, xi	-DMAXINP
00:0010A8 7E00AD              +15 	jc	mabanks
00:0010A9 C52FFF              +16 	aa, xi	DMAXINP+4096/2-1
00:0010AA 06000B              +17 	sar	11
00:0010AB 26000C              +18 	sal	12	.	words = descriptors / 2
00:0010AC 350001              +19 	lret	1	.	return initialise management
  :                            20 			.	table in 1..3 * 4096 words
  :                            21 
00:0010AD C007AA              +22 mabanks	aa	(DMAXINP-DMAXINB)
00:0010AE 7E00B3              +23 	jc	maxmabanks
00:0010AF C007AB              +24 	aa	(DMAXINB+262144/2-1)
00:0010B0 060011              +25 	sar	17
00:0010B1 260012              +26 	sal	18	.	words = descriptors / 2
00:0010B2 350000              +27 	lret	0	.	return initialise management
  :                            28 			.	table in 1..5 * 262144 words
  :                            29 maxmabanks
00:0010B3 6007AC              +30 	la	(5*262144)
00:0010B4 350000              +31 	lret	0
  :                            32 
  :                            821 .	middle_hit	call	(1*/6)		. lcal	middle_hit
  :                            822: 	$include	measure
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 REQUIRED		$equ	128+6		
  :                            41 SIZE			$equ	REQUIRED
  :                            42 BANKS			$equ	REQUIRED
  :                            43 
  :                            44 OUTSIZE			$equ	128+7
  :                            45 . TEMP_BASE_ABSO		$equ	x$save
  :                            46 B4			$equ	128+8	
  :                            47 
  :                            48 .	measure is once-only initialisation code
  :                            49 .	called at kernel start up
  :                            50 .	it is in a lcal subroutine to make it
  :                            51 .	modular and include-compatible with
  :                            52 .	any other bank management routines
  :                            53 .	in this file
  :                            54 
  :                            55 $(65)
  :                            56 
  :                            57 
  :                            58 banks_lock_cell			$res	1
  :                            59 threads_lock_cell		$res	1
  :                            60 next				$res	1	.	=next_page_descriptor
  :                            61 large_bank_descriptor_sp	$res	1
  :                            62 
  :                            63 ?	$do	64,free_chain(?) $res	1
  :                            64 
  :                            65 switch_lock_cell		$res	1
  :                            66 
  :                            67 free_tdescriptor		$res	1
  :                            68 next_tdescriptor_sp		$res	1
  :                            69 tdescriptor_high_index		$res	1
  :                            70 
  :                            71 ?	$do	7**8-($**7),tq_align(?)	$res	1
  :                            72 
  :                            73 ?	$do	PRIORITIES,stem(?)	$res	4
  :                            74 
  :                            75 uq_head				$res	1
  :                            76 uq_tail				$res	1
  :                            77 
  :                            78 first_bdx			$equ	$
  :                            79 
  :                            80 . $(65:$bank_address($(64)+7**-8))
  :                            81 
  :                            82 next_page_descriptor		$res	2
  :                            83 
  :                            84 ?	$do	63,device_key(?),	$res	2
  :                            85 $(0)
  :                            86 
  :                            87 stem_link
00:0010B5 450006              +88 	lr, xi	PRIORITIES-2
00:0010B6 553050              +89 	lx, xi	stem(1)
00:0010B7 6DFFFF              +90 	lb, xi	-1
00:0010B8 280086              +91 	sb	6+128
00:0010B9 5D306C              +92 	ly,xi	stem(PRIORITIES)
  :                            93 next_stem
00:0010BA 64A004              +94 	la, i	4, x		. next pointer
00:0010BB 180087              +95 	sy	7+128		. uplink
00:0010BC 47A000              +96 	qs	0, x
  :                            97 
00:0010BD 580082              +98 	ly	x_x		. previous
00:0010BE 850004              +99 	ax, xi	4
00:0010BF CDFFFF              +100 	ab, xi	-1		. symbolic 1s complement
  :                            101 				. chain priority
  :                            102 
00:0010C0 1E00BA              +103 	jdr	next_stem	. and write the last
00:0010C1 653050              +104 	la, xi	stem(1)		. task queue trailing
00:0010C2 180087              +105 	sy	7+128		. link descriptor
00:0010C3 47A000              +106 	qs	0, x
  :                            107 
00:0010C4 303047              +108 	z	switch_lock_cell
00:0010C5 303070              +109 	z	uq_head
00:0010C6 303071              +110 	z	uq_tail
  :                            111 
00:0010C7 30304B              +112 ?	$do	tq_align(),	z	tq_align(?)
00:0010C8 30304C              +112 
00:0010C9 30304D              +112 
00:0010CA 30304E              +112 
00:0010CB 30304F              +112 
  :                            113 
00:0010CC 45003E              +114 	lr	63-1,,xi
00:0010CD 553074              +115 	lx	device_key(1),,xi
00:0010CE 160030              +116 	dsr	48
  :                            117 
00:0010CF C7A000              +118 zdevice	ds	0, x
00:0010D0 850002              +119 	ax	2,,xi
00:0010D1 1E00CF              +120 	jdr	zdevice
  :                            121 
00:0010D2 350000              +122 	lret	0
  :                            123 
  :                            124 	$if	1
  :                            125 rebound75
00:0010D3 9F0084              +126 	dpush	a_x
00:0010D4 CF07AD              +127 	dl	(CHILLDOWN, 30d)
00:0010D5 1C0067              +128 	outB	chill$down
00:0010D6 140066              +129 	outA	INDICATION$
00:0010D7 380084              +130 	dpop	a_x
00:0010D8 380085              +130 
00:0010D9 35FFFE              +131 	lret	-2
  :                            132 
  :                            133 REBOUND75* $proc
  :                            134 	lcal	rebound75	. ts cell locked, back off cool
  :                            135 	$end
  :                            136 
  :                            137 	$else
  :                            138 REBOUND75* $proc
  :                            139 	j	$-1		. ts cell locked, clamp on hard
  :                            140 	$end
  :                            141 
  :                            142 	$endif
  :                            143 
  :                            144 measure
  :                            145 
  :                            146 	$if	MANAGER_BANKS=5
  :                            147 
00:0010DA 051F00              +148 	on	see$3++see$4++see$5++see$6++see$7
  :                            149 
00:0010DB 6007AF              +150 	la	(0C00001s)
  :                            151 
  :                            152 	. default pointers which may stay unused
  :                            153 
00:0010DC 140043              +154 	outA	67		. large leaves lower slots unused
00:0010DD 140044              +155 	outA	68		. small leaves higher slots unused
00:0010DE 140045              +156 	outA	69
00:0010DF 140046              +157 	outA	70
00:0010E0 140047              +158 	outA	71
  :                            159 
00:0010E1 3E00A1              +160 	lcal	management_words
00:0010E2 B600F9              +161 	j	large_system
00:0010E3 2E0001              +162 	sbl	1
00:0010E4 280086              +163 	sb	BANKS		. save 2 * # banks of 262144 words
00:0010E5 680084              +164 	lb	a_x
00:0010E6 0E000C              +165 	sbr	12		. calculate # management pages	
00:0010E7 44D043              +166 	lr	64+3,b,i		. calculate how far
00:0010E8 550043              +167 	lx	64+3,,xi
00:0010E9 680087              +168 	lb	FREE_BASE
  :                            169 
  :                            170 base_management_page
00:0010EA 1CA000              +171 	outB	0, x		. base a page of kernel storage
00:0010EB CD0001              +172 	ab	1,,xi
00:0010EC 850001              +173 	ax	1,,xi
  :                            174 
00:0010ED F600EF              +175 	jxge	management_pages_based
00:0010EE B600EA              +176 	j	base_management_page
  :                            177 
  :                            178 management_pages_based
00:0010EF 400085              +179 	lr	b_x		. save the bank index reached
00:0010F0 680086              +180 	lb	BANKS		. calculate page address highest bank + 1
00:0010F1 2E0005              +181 	sbl	5
00:0010F2 DE00F6              +182 	jnzb	pages_read
00:0010F3 0C0080              +183 	inB	128
00:0010F4 A807A1              +184 	andB	(03FFFFF)
00:0010F5 CD0001              +185 	ab, xi	1
  :                            186 pages_read
00:0010F6 553072              +187 	lx	first_bdx,,xi
00:0010F7 C52FFE              +188 	aa	03000-2,,xi
00:0010F8 B6010A              +189 	j	memory_configured
  :                            190 
  :                            191 large_system
00:0010F9 2E0001              +192 	sbl	1
00:0010FA 280086              +193 	sb	BANKS		. save 2 * # banks of 262144 words
00:0010FB 680084              +194 	lb	a_x
00:0010FC 0E0012              +195 	sbr	18		. calculate # management banks
  :                            196 
00:0010FD 54D043              +197 	lx	64+3,b,i		. top base + 1
00:0010FE 450044              +198 	lr	64+3+1,,xi
00:0010FF 680086              +199 	lb	BANKS		. 2 * memory banks of 262144 words
00:001100 2E0005              +200 	sbl	5		. calculate page address highest bank + 1
  :                            201 .	orB	(0400000)	. think big one moment later
  :                            202 				. in case of maximum memory
  :                            203 base_management_bank		. where decrement is from 0400000
00:001101 85FFFF              +204 	ax	-1,,xi
00:001102 CDFFC0              +205 	ab	-64,,xi
00:001103 98079F              +206 	orB	(0400000)	. now think big
00:001104 1CA000              +207 	outB	0, x
00:001105 F60101              +208 	jxge	base_management_bank
  :                            209 
00:001106 A807A1              +210 	andB	(03FFFFF)	. stop thinking big
  :                            211 				. This will be compared with page addresses
00:001107 400087              +212 	lr	FREE_BASE
00:001108 5007B0              +213 	lx	($bank_address(first_bdx))
00:001109 C007B1              +214 	aa	($bank_address(03000)-2))
  :                            215 
  :                            216 memory_configured
00:00110A 30A000              +217 	z	0, x
00:00110B 00A001              +218 	sr	1, x		. store the available small banks index
00:00110C 103005              +219 	sx	next
  :                            220 	
00:00110D 203006              +221 	sa	large_bank_descriptor_sp
00:00110E C7C000              +222 	ds	0, a
  :                            223 
00:00110F D00086              +224 	ana	BANKS
00:001110 203049              +225 	sa	next_tdescriptor_sp
00:001111 20304A              +226 	sa	tdescriptor_high_index
  :                            227 
  :                            228 
  :                            229 
  :                            230 	$else
  :                            231 
  :                            232 	inB	device$flags	. read system memory configuration
  :                            233 	andB	(03fffff)	. isolate the highest page index
  :                            234 	ab, xi	1		. convert the highest index (+1)
  :                            235 				. to the number of pages
  :                            236 
  :                            237 	la	b_x
  :                            238 	and, xi	-64
  :                            239 	sar	5		. calculate and save
  :                            240 	sa	BANKS		. the # words potentially needed
  :                            241 				. for descriptors of 256K banks
  :                            242 
  :                            243 				. the big banks descriptor stack
  :                            244 				. has space for a potential two-word
  :                            245 				. descriptor for each 262144-word bank
  :                            246 				. actually present in system memory
  :                            247 
  :                            248 				. the descriptor values used for
  :                            249 				. system memory in IO-mapped
  :                            250 				. relocation registers have 6
  :                            251 				. low zero bits when
  :                            252 				. descriptor bit 22 (BIG/BANK)
  :                            253 				. is on
  :                            254 
  :                            255 				. 01xxxx xxxxxx xxxxxx 000000
  :                            256 
  :                            257 				. because when BIG/BANK is on,
  :                            258 				. LS 6 bits in the relocation
  :                            259 				. register port select devices other
  :                            260 				. than system memory (filestore arrays,
  :                            261 				. dual ported network I/F memories
  :                            262 
  :                            263 				. 01xxxx xxxxxx xxxxxx DEVICE
  :                            264 
  :                            265 				. however, when BIG/BANK is off,
  :                            266 				. the six low bits select a page
  :                            267 				. within the system memory bank
  :                            268 
  :                            269 				. 00xxxx xxxxxx xxxxxx XXXXXX
  :                            270 
  :                            271 
  :                            272 
  :                            273 				. construct the first descriptor
  :                            274 				. which describes the end of memory
  :                            275 				. at the end of OS tabler memory
  :                            276 
  :                            277 	la	b_x
  :                            278 	ana	(SCALE_THRESHOLD)
  :                            279 				. if there are not a large number of
  :                            280 				. banks of 262144 words altogether,
  :                            281 				. the management table is a page or so
  :                            282 
  :                            283 	on	see$all**(see$7*/MANAGER_BANKS)-1
  :                            284 	la	FREE_BASE
  :                            285 
  :                            286 p	$proc
  :                            287 table_page* $name	1
  :                            288 
  :                            289 	outA	72-MANAGER_BANKS+?-1
  :                            290 	aa, xi	p(0, 0)
  :                            291 	$end
  :                            292 
  :                            293 p	$proc
  :                            294 table_bank* $name	-64
  :                            295 
  :                            296 	ab, xi	p(0, 0)
  :                            297 	outB	72-?
  :                            298 	$end
  :                            299 
  :                            300 	lx	(next_page_descriptor)
  :                            301 	jc	large_system
  :                            302 
  :                            303 
  :                            304 ?	$do	MANAGER_BANKS,	table_page
  :                            305 	sa	1, x		. next_page_descriptor:pointer
  :                            306 	la, xi	4096*8-2
  :                            307 	j	memory_configured
  :                            308 
  :                            309 large_system
  :                            310 
  :                            311 				. decision to use big banks
  :                            312 				. for management
  :                            313 
  :                            314 				. so take them from high-end
  :                            315 				. memory
  :                            316 
  :                            317 				. because that's where
  :                            318 				. 256K-banks are assigned
  :                            319 				. and the system image in
  :                            320 				. low memory almost certainly
  :                            321 				. doesn't fill exact 256K-banks
  :                            322 
  :                            323 	orB	(0400000)	. think big
  :                            324 	andB,xi	-64		. make sure it really is
  :                            325 				. whole banks however at
  :                            326 				. the high end
  :                            327 
  :                            328 ?	$do	MANAGER_BANKS,	table_bank
  :                            329 
  :                            330 	andB	(03FFFFF)	. stop thinking big
  :                            331 
  :                            332 	sa	1, x		. next_page_descriptor:pointer
  :                            333 	la	(262144*8-2)
  :                            334 
  :                            335 memory_configured
  :                            336 	sx	next
  :                            337 	ds	0, a
  :                            338         sa      large_bank_descriptor_sp
  :                            339 
  :                            340         ana     BANKS
  :                            341 
  :                            342         sa      next_tdescriptor_sp
  :                            343 
  :                            344 	$endif
  :                            345 
00:001112 303003              +346 	z	banks_lock_cell
00:001113 303004              +347 	z	threads_lock_cell
00:001114 303048              +348 	z	free_tdescriptor
  :                            349 
00:001115 303007              +350 ?	$do	63,	z	free_chain(?)
00:001116 303008              +350 
00:001117 303009              +350 
00:001118 30300A              +350 
00:001119 30300B              +350 
00:00111A 30300C              +350 
00:00111B 30300D              +350 
00:00111C 30300E              +350 
00:00111D 30300F              +350 
00:00111E 303010              +350 
00:00111F 303011              +350 
00:001120 303012              +350 
00:001121 303013              +350 
00:001122 303014              +350 
00:001123 303015              +350 
00:001124 303016              +350 
00:001125 303017              +350 
00:001126 303018              +350 
00:001127 303019              +350 
00:001128 30301A              +350 
00:001129 30301B              +350 
00:00112A 30301C              +350 
00:00112B 30301D              +350 
00:00112C 30301E              +350 
00:00112D 30301F              +350 
00:00112E 303020              +350 
00:00112F 303021              +350 
00:001130 303022              +350 
00:001131 303023              +350 
00:001132 303024              +350 
00:001133 303025              +350 
00:001134 303026              +350 
00:001135 303027              +350 
00:001136 303028              +350 
00:001137 303029              +350 
00:001138 30302A              +350 
00:001139 30302B              +350 
00:00113A 30302C              +350 
00:00113B 30302D              +350 
00:00113C 30302E              +350 
00:00113D 30302F              +350 
00:00113E 303030              +350 
00:00113F 303031              +350 
00:001140 303032              +350 
00:001141 303033              +350 
00:001142 303034              +350 
00:001143 303035              +350 
00:001144 303036              +350 
00:001145 303037              +350 
00:001146 303038              +350 
00:001147 303039              +350 
00:001148 30303A              +350 
00:001149 30303B              +350 
00:00114A 30303C              +350 
00:00114B 30303D              +350 
00:00114C 30303E              +350 
00:00114D 30303F              +350 
00:00114E 303040              +350 
00:00114F 303041              +350 
00:001150 303042              +350 
00:001151 303043              +350 
00:001152 303044              +350 
00:001153 303045              +350 
00:001154 303046              +351 	z	free_chain(64)
  :                            352 
  :                            353 
  :                            354 				. the stack of four-word task descriptors
  :                            355 				. grows downwards from the position below
  :                            356 				. the lowest possible big bank descriptor
  :                            357 
  :                            358 				. the lowest big-bank pointer
  :                            359 				. is the small-banks upper limit pointer
  :                            360 
  :                            361 				. next_tdescriptor_sp
  :                            362 				. is the also the upper edge for
  :                            363 				. small-banks DESCRIPTORS
  :                            364 
  :                            365 				. write the pointer to the descriptor
  :                            366 				. This pointer decrements as 2-word
  :                            367 				. big-bank descriptors are added
  :                            368 
  :                            369 .	sa	large_bank_descriptor_sp
  :                            370 .
  :                            371 .	ana	BANKS
  :                            372 .
  :                            373 .	sa	next_tdescriptor_sp
  :                            374 
  :                            375 				. *next points to next_descriptor
  :                            376 				. for small banks
  :                            377 				. this is the next available two-word
  :                            378 				. descriptor in the upward-growing
  :                            379 				. small banks decriptor list
  :                            380 
  :                            381 				. *next and the initial descriptor
  :                            382 				. where *next points are constructed
  :                            383 				. here at system start, so all
  :                            384 				. system images are restartable
  :                            385 				. and may be in ROM
  :                            386 
  :                            387 				. The buffer pointer in the initial
  :                            388 				. *next descriptor  points to the
  :                            389 				. first available RAM page after
  :                            390 				. the kernel ROM or kernel load
  :                            391 
  :                            392 				. there are 64 free-chains into the
  :                            393 				. "small" banks heap and one free-chain 
  :                            394 				. into the big-banks stack
  :                            395 	
  :                            396 				. The small-banks free-chains are one
  :                            397 				. per size, 1..64 pages (4096 words
  :                            398 				. to 262144 words)
  :                            399 
  :                            400 				. a "small" bank of 262144 words is
  :                            401 				. possible, because a smaller bank
  :                            402 				. may get bigger if the next assignment
  :                            403 				. does not fit in the same 262144-word
  :                            404 				. physical bank
  :                            405 
  :                            406 				. small banks are assigned from low-order
  :                            407 				. locations upwards. The free chains
  :                            408 				. reassign free storage at the lowest
  :                            409 				. addresses first.
  :                            410 
  :                            411 				. Freed space above the highest
  :                            412 				. assigned small bank is recombined
  :                            413 				. as single free area between the
  :                            414 				. the stack of small banks which grows
  :                            415 				. upwards and compresses downwards, and
  :                            416 				. the stack of big banks, which grows
  :                            417 				. downwards and compresses upwards
  :                            418 
  :                            419 				. There is one large-banks free-chain
  :                            420 				. for all sizes. A big bank may combine
  :                            421 				. one to nearly 65536 adjacent physical
  :                            422 				. banks of 262144 words
  :                            423 
  :                            424 				. A single large bank may contain nearly
  :                            425 				. 1024 times the 16 Megaword Address space
  :                            426 				.          -16 gigawords in total-
  :                            427 				. for large arrays which need to be contiguous
  :                            428 
  :                            429 				. An array needs to be contiguous if
  :                            430 				. multiword operands to single instructions
  :                            431 				. straddle physical 256K bank boundaries.
  :                            432 
  :                            433 				. Developers can also structure arrays
  :                            434 				. so that quad or double word operands
  :                            435 				. are safely inside one bank, even if
  :                            436 				. the containing structure straddles two
  :                            437 				. non-contiguous banks addressed with
  :                            438 				. two adjacent relocation base-registers
  :                            439 
  :                            440 				. Operand EA is translated to an absolute
  :                            441 				. address once for each operand read or write
  :                            442 
  :                            443 				. However very large contiguous bank
  :                            444 				. arrays are obtained with one ARRAY$ call
  :                            445 				. and accessed with one bank handle
  :                            446 
  :                            447 				. Arrays larger than the address space
  :                            448 				. are addressed a part at
  :                            449 				. a time. Structures straddling bank boundaries
  :                            450 				. are accessed using two adjacent base registers
  :                            451 				. to address two adjacent banks
  :                            452 
  :                            453 	.
  :                            454 	.	lb	instance_index		. read the subscript
  :                            455 	.	m, xi	STRUCTURE_SIZE		. convert to table offset
  :                            456 	.	dsl	6			. split into relative
  :                            457 	.	sal	6			. bank/word offsets
  :                            458 	.	sbr	6
  :                            459 	.	aa	array_base_bank_handle	. bank handle obtained from
  :                            460 	.					. large_bank_request routine
  :                            461 
  :                            462 	.					. set bits 23..18 of address
  :                            463 	.					. to the address region which
  :                            464 	.	orB	(BASE_REGISTER_TAG*/18)	. we shall base
  :                            465 
  :                            466 	.	sabr	BASE_REGISTER_TAG	. base the bank where the 
  :                            467 	.					. structure starts
  :                            468 
  :                            469 	.	la, i	64, a			. and base the next bank after
  :                            470 	.	sabr	BASE_REGISTER_TAG+1	. in the next range of the
  :                            471 	.					. address space
  :                            472 
  :                            473 				. where for addresses > 262143, the
  :                            474 				. storage operand address is resolved
  :                            475 				. with the base register indicated in
  :                            476 				. effective address bits 23..18
  :                            477 
  :                            478 				.	_____________________________
  :                            479 				.	|baseid|xxxxxx xxxxxx xxxxxx|
  :                            480 				.	|______|____________________|
  :                            481 				.
  :                            482 				. and for addresses 256..262143, the 
  :                            483 				. storage operand address is resolved
  :                            484 				. with the base register indicated in
  :                            485 				. effective address bits 17..12
  :                            486 				.
  :                            487 				.	_____________________________
  :                            488 				.	|000000|baseid|xxxxxx xxxxxx|
  :                            489 				.	|______|______|_____________|
  :                            490 				.
  :                            491 				. instructions are always fetched from
  :                            492 				. the bank based with base register zero
  :                            493 				. whatever the effective address of the
  :                            494 				. instruction
  :                            495 				.
  :                            496 				. storage operands in the
  :                            497 				. address range 256..4095 are also in
  :                            498 				. instruction bank 0.
  :                            499 
  :                            500 				. storage operands at effective address <
  :                            501 				. 256 are registers.
  :                            502 
  :                            503 				. large banks are assigned from high-order
  :                            504 				. memory downwards, in size multiples of
  :                            505 				. one bank (262144 words) The highest-addressed
  :                            506 				. contiguous area large enough for each
  :                            507 				. request is assigned. This is achieved
  :                            508 				. by recombining and reshaping the
  :                            509 				. available contiguous collections of
  :                            510 				. 262144-word banks
  :                            511 
  :                            512 				. "small" banks may accidentally become
  :                            513 				. an aligned bank of 64 pages, if the next
  :                            514 				. assignment steps to the next bank edge
  :                            515 				. ("small" banks don't straddle physical
  :                            516 				. bank edges). Because of this, a task
  :                            517 				. requesting more storage may already
  :                            518 				. have it
  :                            519 
00:001155 350000              +520 	lret	0		. the end of the measure subroutine
  :                            521 				. initialisation routine at startup
  :                            522 
  :                            523 
  :                            524 bank_free
00:001156 C60179              +525 	jza	out_of_range	. when the dreaded NULL pointer strikes
  :                            526 
  :                            527 .	page_free
00:001157 051F00              +528 	on	see$all**(see$7*/MANAGER_BANKS)-1
00:001158 073003              +529 	ts	banks_lock_cell
00:001159 B60158              +530 	j	$-1
  :                            531 
  :                            532 .	this is an lcal subroutine and can only be called
  :                            533 .	from interrupt code (internal interrupt, system start etc)
  :                            534 
  :                            535 .	the argument is a descriptor pointer in interrupt register A
  :                            536 .	because the routine which decided which descriptor stack
  :                            537 .	(lower/small banks or upper/big banks) already copied the
  :                            538 .	descriptor pointer from application register A, in order
  :                            539 .	to evaluate it.
  :                            540 .
  :                            541 .	This call is from other interrupt code
  :                            542 .	so registers addressed as storage operands are all
  :                            543 .	in the space 128..255
  :                            544 
  :                            545 .	test & set word banks_lock_cell is already obtained
  :                            546 
  :                            547 
Note: measure.msm Line 548: this tests a_x not a
00:00115A 680084              +548 	tanu	large_bank_descriptor_sp
00:00115B D83006              +548 
00:00115C 7E0189              +549 	jc	large_bank_free
  :                            550 
00:00115D 683005              +551 	lb	next			. is this descriptor
00:00115E DCC002              +552 	anb, i	2, a			. the one below next-available
  :                            553 					. ie is it on the heap top?
00:00115F DE017A              +554 	jnzb	not_highest_bank
  :                            555 
  :                            556 spiral_again
00:001160 203005              +557 	sa	next
  :                            558 
Note: measure.msm Line 559: this tests a_x not a
00:001161 680084              +559 	tanu	(next_page_descriptor)
00:001162 D807B2              +559 
00:001163 CE0178              +560 	jzb	out_of_spiral
  :                            561 
00:001164 303003              +562 	z	banks_lock_cell		. free the lock at this point
00:001165 073003              +563 	ts	banks_lock_cell		. and compete for it again
00:001166 B60165              +564 	j	$-1			. another CPU may be looping
  :                            565 					. for it
  :                            566 
00:001167 603005              +567 	la	next			. this value may have changed
  :                            568 
  :                            569 					. see if the bank now at the
00:001168 C5FFFE              +570 	aa, xi	-2			. heap top is on its free chain
  :                            571 
  :                            572 					. calculate the bank size
  :                            573 
00:001169 68C003              +574 	lb	3, a			. next bank address minus
00:00116A D8C001              +575 	anb	1, a			. this bank address
  :                            576 
00:00116B 553006              +577 	lx, xi	free_chain(1)-1		. index of free chain head is
  :                            578 					. size in pages minus 1
00:00116C 800085              +579 	ax	b_x
  :                            580 
  :                            581 					. point towards the chain head
  :                            582 
00:00116D 580082              +583 spiral	ly	x_x			. copy "this" to "previous"
00:00116E 68A000              +584 	lb	0, x			. copy "next" to "this
  :                            585 
00:00116F CE0178              +586 	jzb	out_of_spiral
00:001170 500085              +587 	lx	b_x
  :                            588 
Note: measure.msm Line 589: this tests a_x not a
00:001171 680084              +589 	tanu	x_x			. banks (and descriptors)
00:001172 D80082              +589 
  :                            590 					. at the lower addresses
  :                            591 					. are preferred for re-use
  :                            592 
  :                            593 					. therefore the chain starts
  :                            594 					. with lowest addresses, rises
  :                            595 					. and ends with null forward
  :                            596 					. pointer
  :                            597 
  :                            598 					. if you arrive at a higher
  :                            599 					. address in B, the bank is
  :                            600 					. not in the free chain, and
00:001173 5E0178              +601 	jnc	out_of_spiral		. consolidation stops here
  :                            602 
  :                            603 					. the candidate is still at
  :                            604 					. a higher address than the
00:001174 DE016D              +605 	jnzb	spiral			. free chain sample, move on
  :                            606 
  :                            607 
  :                            608 					. you have hit equal. Pull
  :                            609 					. the bank out of the free
  :                            610 					. chain and squash the
  :                            611 					. assigned heap top
  :                            612 
  :                            613 					. a = b
  :                            614 
00:001175 68C000              +615 	lb	0, a			. copy next pointer of candidate
00:001176 28B000              +616 	sb	0, y			. to next of previous
  :                            617 
00:001177 B60160              +618 	j	spiral_again		. store new next-available
  :                            619 					. descriptor pointer
  :                            620 out_of_spiral
00:001178 303003              +621 	z	banks_lock_cell
  :                            622 out_of_range				. descriptor == NULL
00:001179 350000              +623 	lret	0
  :                            624 
  :                            625 					. the freed bank isn't at
  :                            626 					. the top of the assigned
  :                            627 					. heap, so link it into its
  :                            628 					. free chain
  :                            629 not_highest_bank
00:00117A 68C003              +630 	lb	3, a			. size = next bank address
00:00117B D8C001              +631 	anb	1, a			. minus this bank address
  :                            632 
00:00117C 553006              +633 	lx, xi	free_chain(1)-1		. chain index = size in pages
00:00117D 800085              +634 	ax	b_x			. minus 1
  :                            635 
  :                            636 					. point at the free chain head
  :                            637 find_higher_point
00:00117E 580082              +638 	ly	x_x			. copy "this" to "previous"
00:00117F 68A000              +639 	lb	0, x			. copy "next" to "this"
00:001180 500085              +640 	lx	b_x
  :                            641 
00:001181 CE0185              +642 	jzb	found_higher_point	. end of chain
  :                            643 
00:001182 D80084              +644 	anb	a_x			. presumably a_x because call is from various ISRs
00:001183 5E017E              +645 	jnc	find_higher_point	. the chain sample is lower
00:001184 CE0187              +646 	jzb	bank_is_free
  :                            647 
  :                            648 found_higher_point			. link into chain
00:001185 10C000              +649 	sx	0, a			. "next" = next-pointer of "this"
00:001186 20B000              +650 	sa	0, y			. "this" = next-pointer of "previous"
  :                            651 bank_is_free
00:001187 303003              +652 	z	banks_lock_cell
00:001188 350000              +653 	lret	0
  :                            654 
  :                            655 
  :                            656 large_bank_free
  :                            657 
  :                            658 .	this is branched from bank_free when the storage to free
  :                            659 .	is in the downward-expanding/upward compressing stack of
  :                            660 .	large bank collections in high-order memory
  :                            661 
  :                            662 .	the last 2 instructions before getting here were
  :                            663 
  :                            664 .	tanu	large_bank_upper_limit_dp
  :                            665 .	jc	large_bank_free
  :                            666 
00:001189 CE01A0              +667 	jzb	large_bank_at_summit
  :                            668 
00:00118A 68C003              +669 	lb	3, a
00:00118B D8C001              +670 	anb	1, a
00:00118C 280086              +671 	sb	SIZE
00:00118D 553046              +672 	lx, xi	free_chain(64)
00:00118E 100088              +673 fsearch	sx	B4
00:00118F 68A000              +674 	lb	0, x
00:001190 500085              +675 	lx	b_x
00:001191 CE019C              +676 	jzb	chain_insert
  :                            677 
00:001192 68A003              +678 	lb	3, x
00:001193 D8A001              +679 	anb	1, x
00:001194 D80086              +680 	anb	SIZE
00:001195 CE0198              +681 	jzb	position?
00:001196 5E018E              +682 	jnc	fsearch		. next in chain is smaller
00:001197 B6019C              +683 	j	chain_insert	. next in chain is larger
  :                            684 
  :                            685 position?
Note: measure.msm Line 686: this tests a_x not a
00:001198 680084              +686 	tanu	x_x
00:001199 D80082              +686 
00:00119A CE019E              +687 	jzb	in_freechain_already
  :                            688 
  :                            689 				. descriptors are in the
  :                            690 				. same storage order as
  :                            691 				. their buffers
  :                            692 
  :                            693 				. for big banks the
  :                            694 				. stack grows downwards
  :                            695 				. the preferred re-use
  :                            696 				. order is furthest from
  :                            697 				. the middle first
  :                            698 
  :                            699 				. chain the freed descriptor
  :                            700 				. in front of the first
  :                            701 				. which, within size subchain,
  :                            702 				. is at a lower storage address
  :                            703 
00:00119B 5E018E              +704 	jnc	fsearch
  :                            705 
  :                            706 chain_insert
00:00119C 208088              +707 	sa	*B4
00:00119D 10C000              +708 	sx	0, a
  :                            709 in_freechain_already
00:00119E 303003              +710 	z	banks_lock_cell
00:00119F 350000              +711 	lret	0
  :                            712 
  :                            713 large_bank_at_summit
00:0011A0 C50002              +714 	aa, xi	2
00:0011A1 203006              +715 	sa	large_bank_descriptor_sp
  :                            716 
  :                            717 				. bank array + 1 is the
  :                            718 				. new lower edge of the
  :                            719 				. bank stack
  :                            720 
  :                            721 				. now spiral up compressing
  :                            722 				. any free banks which are now
  :                            723 				. at the stack top
  :                            724 
00:0011A2 303003              +725 	z	banks_lock_cell	. free the lock and compete
00:0011A3 073003              +726 	ts	banks_lock_cell	. for it again. Other CPUs
00:0011A4 B601A3              +727 	j	$-1		. may be revolving on it	
  :                            728 
00:0011A5 603006              +729 	la	large_bank_descriptor_sp
  :                            730 
  :                            731 				. this may now have a new value
  :                            732 				. during the unlocked nanowindow
  :                            733 				. see if is the address of a
  :                            734 				. descriptor in the free chain
  :                            735 
00:0011A6 68C003              +736 	lb	3, a		. calculate SIZE
00:0011A7 D8C001              +737 	anb	1, a		. because it shall be compared
00:0011A8 280086              +738 	sb	SIZE
  :                            739 
00:0011A9 553046              +740 	lx, xi	free_chain(64)
  :                            741 
  :                            742 big_spiral
  :                            743 
00:0011AA 580082              +744 	ly	x_x		. copy "this" to "previous"
00:0011AB 68A000              +745 	lb	0, x
00:0011AC CE01BB              +746 	jzb	end_big_spiral
  :                            747 
00:0011AD 500085              +748 	lx	b_x		. copy "next" to "this"
  :                            749 
00:0011AE 68D003              +750 	lb	3, b		. calculate the size of next
00:0011AF D8A001              +751 	anb	1, x
  :                            752 
Note: measure.msm Line 753: this tests a_x not a
00:0011B0 680084              +753 	tanu	SIZE		. compare for size
00:0011B1 D80086              +753 
  :                            754 
00:0011B2 5E01AA              +755 	jnc	big_spiral	. it's smaller than this buffer
00:0011B3 DE01BB              +756 	jnzb	end_big_spiral	. it's larger than this buffer
  :                            757 				. and the chain is in size order
  :                            758 
Note: measure.msm Line 759: this tests a_x not a
00:0011B4 680084              +759 	tanu	x_x		. if you reach lower than "you"
00:0011B5 D80082              +759 
  :                            760 				. within size
  :                            761 
  :                            762 				. then the bank/multibank
  :                            763 				. at assigned stack top
  :                            764 				. is not free and the stack
  :                            765 				. compression is over
  :                            766 
00:0011B6 5E01AA              +767 	jnc	big_spiral	. higher than you, keep going
00:0011B7 DE01BB              +768 	jnzb	end_big_spiral	. lower than you. The candidate
  :                            769 				. buffer is not free
  :                            770 				. compression is complete
  :                            771 
  :                            772 
  :                            773 				. replace the upper pointer
  :                            774 				. x = a
  :                            775 
00:0011B8 50A000              +776 	lx	0, x		. previous->next = this->next
00:0011B9 10B000              +777 	sx	0, y		. out of the chain
  :                            778 
00:0011BA B601A0              +779 	j	large_bank_at_summit
  :                            780 
  :                            781 end_big_spiral
00:0011BB 303003              +782 	z	banks_lock_cell
00:0011BC 350000              +783 	lret	0
  :                            784 
  :                            785 
  :                            786 available_banks
00:0011BD 051F00              +787 	on	 see$all**(see$7*/MANAGER_BANKS)-1
00:0011BE 503006              +788 	lx	large_bank_descriptor_sp
00:0011BF 60A001              +789 	la	1, x
00:0011C0 503005              +790 	lx	next		. the consolidated free space
00:0011C1 D0A001              +791 	ana	1, x		. between large banks and small banks
  :                            792 
00:0011C2 553007              +793 	lx, xi	free_chain(1)
00:0011C3 453046              +794 	lr, xi	free_chain(64)
  :                            795 
  :                            796 add_chain
00:0011C4 58A000              +797 	ly	0, x
00:0011C5 700083              +798 	tz	y_x
00:0011C6 3E01CB              +799 	lcal	add_chain_total
00:0011C7 F601CA              +800 	jxge	chains_added
00:0011C8 850001              +801 	ax, xi	1
00:0011C9 B601C4              +802 	j	add_chain
  :                            803 chains_added
00:0011CA 350000              +804 	lret
  :                            805 
  :                            806 add_chain_total
00:0011CB 68B003              +807 	lb	3, y		. difference next higher bank
00:0011CC D8B001              +808 	anb	1, y		. and this bank
00:0011CD C00085              +809 	aa	b_x
00:0011CE 58B000              +810 	ly	0,y
00:0011CF 700083              +811 	tz	y_x
00:0011D0 B601CB              +812 	j	add_chain_total
00:0011D1 350000              +813 	lret	0		. and of this free chain
  :                            814 
  :                            815 
00:0011D2 C5FFFF              +816 bank	aa, xi	-1
00:0011D3 5E0232              +817 	jnc	cannot_add_bank
00:0011D4 06000C              +818 	sar	12
Note: measure.msm Line 819: this tests a_x not a
00:0011D5 680084              +819 	tanu,xi	63			. decide whether < 262144 words
00:0011D6 DD003F              +819 
  :                            820 					. because big banks are in
  :                            821 					. high memory and smaller ones
  :                            822 					. in low memory
  :                            823 
00:0011D7 051F00              +824 	on	see$all**(see$7*/MANAGER_BANKS)-1
  :                            825 
00:0011D8 073003              +826 	ts	banks_lock_cell
00:0011D9 B601D8              +827         j	$-1
  :                            828 					. carry is from ANU,XI 63
  :                            829 					. if set, it means 262144+ words
  :                            830 					. have been requested
  :                            831 
  :                            832 					. free banks from 262144 words to
  :                            833 					. 16 gigawords are listed by size
  :                            834 					. and position on free_chain(64)
  :                            835 
  :                            836 					. within size, the large banks
  :                            837 					. furthest from the centre of
  :                            838 					. storage are offered first for
  :                            839 					. re-use
  :                            840 
  :                            841 					. that means free large banks at
  :                            842 					. higher addresses are prefered for
  :                            843 					. re-use, because large banks are
  :                            844 					. stacked downward from high memory
  :                            845 					. _________________________________
  :                            846 
00:0011DA 7E0206              +847 	jc	large_bank		. carry was set or cleared by the ANU
  :                            848 					. instruction
  :                            849 
  :                            850 					. the TS instruction does not touch
  :                            851 					. carry
  :                            852 					. ________________________________
  :                            853 
  :                            854 					. free banks from 4096 words to
  :                            855 					. 252K words (262144 words minus 4096)
  :                            856 					. are listed by position on
  :                            857 					. free_chain(1..63)
  :                            858 
  :                            859 					. within their one-size chains,
  :                            860 					. 4K..252K banks furthest from
  :                            861 					. the centre of memory are offered
  :                            862 					. for re-use first
  :                            863 
  :                            864 					. that means "small" banks at
  :                            865 					. lower addresses are prefered
  :                            866 					. for re-use, because they are
  :                            867 					. stacked upwards from low memory
00:0011DB 543007              +868 	lx, i	free_chain(1)
00:0011DC 800084              +869 	ax	a_x
  :                            870 
00:0011DD 68A000              +871 	lb	0, x
00:0011DE CE01E4              +872 	jzb	not_on_list		. free chain head is zero
  :                            873 
00:0011DF 60D000              +874 	la	0, b			. buffer on free chain
00:0011E0 20A000              +875 	sa	0, x
00:0011E1 60D001              +876 	la	1, b
00:0011E2 303003              +877 	z	banks_lock_cell
00:0011E3 350000              +878 	lret	0
  :                            879 
  :                            880 not_on_list
00:0011E4 5CC001              +881 	ly, i	1, a			. convert page high index in A
  :                            882 					. to size required in Y
00:0011E5 683005              +883 	lb	next
00:0011E6 603049              +884 	la	next_tdescriptor_sp	. lowest thread descriptor
  :                            885 					. = limit of small bank descriptors
  :                            886 
00:0011E7 44D002              +887 	lr, i	2, b			. this bank descriptor + 1	
00:0011E8 D4D004              +888 	ana, i	4, b			. new next bank descriptor + 1
00:0011E9 5E01F6              +889 	jnc	take_any_bank
00:0011EA 60D001              +890 	la	1, b			. the new bank handle
00:0011EB 200086              +891 	sa	128+6
00:0011EC 880084              +892 	ay	a_x			. new next bank handle
00:0011ED 603006              +893 	la	large_bank_descriptor_sp
00:0011EE 60C001              +894 	la	1, a			. lower edge of big banks
00:0011EF D00083              +895 	ana	y_x
00:0011F0 5E01F6              +896 	jnc	take_any_bank
00:0011F1 600086              +897 	la	128+6
00:0011F2 18D003              +898 	sy	3, b			. new next bank
00:0011F3 003005              +899 	sr	next
00:0011F4 303003              +900 	z	banks_lock_cell
00:0011F5 350000              +901 	lret	0
  :                            902 
  :                            903 
  :                            904 take_any_bank
  :                            905 					. here is the last resort
  :                            906 					. for an ordinary "small" bank
  :                            907 
  :                            908 					. you can have something larger
  :                            909 					. if it is free
  :                            910 
  :                            911 					. the awarded bank stays at
  :                            912 					. its larger size,
  :                            913 
  :                            914 
00:0011F6 453046              +915 	lr, xi	free_chain(64)		. as a last resort, any bank at
  :                            916 					. the front of the big bank chain,
  :                            917 					. free_chain(64), is awarded
  :                            918 
  :                            919 					. so the brakes go on to the
  :                            920 					. JXGE comparison after
  :                            921 					. free_chain(64) has been
  :                            922 					. interrogated
  :                            923 
  :                            924 					. initially you can't be
  :                            925 					. at a higher notch than
  :                            926 					. free_chain(63)
  :                            927 take_any
00:0011F7 850001              +928 	ax,xi	1
00:0011F8 68A000              +929 	lb	0, x
00:0011F9 DE01FC              +930 	jnzb	take_bank		. free bank on this chain
00:0011FA F60231              +931 	jxge	bank_not_obtained
00:0011FB B601F7              +932 	j	take_any		. try the next larger
  :                            933 take_bank
00:0011FC 60D000              +934 	la	0, b			. yes there is. Promote the 2nd
00:0011FD 20A000              +935 	sa	0, x			. descriptor on the free chain to 1st
  :                            936 
00:0011FE 60D001              +937 	la	1, b			. read the bank start page handle
00:0011FF 303003              +938 	z	banks_lock_cell
00:001200 350000              +939 	lret	0
  :                            940 
  :                            941 
  :                            942 array					. a very large bank
  :                            943 					. > 16777215 words
  :                            944 					. the request is expressed
  :                            945 					. in pages of 4096 words
00:001201 C5FFFF              +946 	aa, xi	-1
00:001202 5E0232              +947 	jnc	cannot_add_bank
  :                            948 
  :                            949 array_high_ix
00:001203 051F00              +950 	on	see$all**(see$7*/MANAGER_BANKS)-1
  :                            951 
00:001204 073003              +952 	ts	banks_lock_cell
00:001205 B60204              +953 	j	$-1
  :                            954 	
  :                            955 	.	make sure this falls thru
  :                            956 
  :                            957 large_bank
00:001206 060006              +958 	sar	6			. translate page high index
  :                            959 
00:001207 6CC001              +960 	lb, i	1, a			. to # banks requested
00:001208 2E0006              +961 	sbl	6
00:001209 280086              +962 	sb	REQUIRED		. = highest bank index required
  :                            963 					. + 64 pages
  :                            964 
00:00120A 300087              +965 	z	OUTSIZE
  :                            966 
00:00120B 553046              +967 	lx, xi	free_chain(64)		. not the pointer
  :                            968 					. but its address
00:00120C 100088              +969 bsearch	sx	B4
00:00120D 68A000              +970 	lb	0, x
00:00120E 500085              +971 	lx	b_x
  :                            972 
00:00120F CE0218              +973 	jzb	new_large_bank
  :                            974 
00:001210 60A003              +975 	la	3, x
00:001211 40A001              +976 	lr	1, x
Note: measure.msm Line 977: this tests a_x not a
00:001212 680084              +977 	tanu	r_x
00:001213 D80080              +977 
00:001214 D80086              +978 	anb	REQUIRED
  :                            979 
00:001215 5E020C              +980 	jnc	bsearch		. what you want is bigger than
  :                            981 				. what you found
  :                            982 
00:001216 CE0224              +983 	jzb	bfound		. you found what you want
  :                            984 
00:001217 100087              +985 	sx	OUTSIZE		. what you found is bigger than
  :                            986 				. what you want
  :                            987 
  :                            988 new_large_bank
00:001218 503006              +989 	lx	large_bank_descriptor_sp
00:001219 85FFFE              +990 	ax, xi	-2		. guaranteed space for
  :                            991 				. the descriptor itself
  :                            992 
00:00121A 60A003              +993 	la	3, x
00:00121B D00086              +994 	ana	REQUIRED	. address of new big bank
00:00121C 5E0231              +995 	jnc	bank_not_obtained
  :                            996 
00:00121D 583005              +997 	ly	next		. does it overlap the
Note: measure.msm Line 998: this tests a_x not a
00:00121E 680084              +998 	tanu	1, y		. highest assigned small bank?
00:00121F D8B001              +998 
  :                            999 
00:001220 7E022B              +1000 	jc	add_large_bank
  :                            1001 
00:001221 680087              +1002 	lb	OUTSIZE
00:001222 DE0225              +1003 	jnzb	bfound1
00:001223 B60231              +1004 	j	bank_not_obtained
  :                            1005 
00:001224 680082              +1006 bfound	lb	x_x
00:001225 60D000              +1007 bfound1	la	0, b		. take B out of the freechain
00:001226 208088              +1008 	sa	*B4
00:001227 600080              +1009 	la	r_x		. retrieve the buffer pointer
00:001228 90079F              +1010 	or	(0400000)	. turn the big flag on for the user
00:001229 303003              +1011 	z	banks_lock_cell
00:00122A 350000              +1012 	lret	0
  :                            1013 
  :                            1014 add_large_bank
00:00122B 680082              +1015 	lb	x_x
00:00122C 103006              +1016 	sx	large_bank_descriptor_sp
00:00122D 20A001              +1017 	sa	1, x		. write the handle in the descriptor
00:00122E 90079F              +1018 	or	(0400000)	. turn the big flag on for the user
00:00122F 303003              +1019 	z	banks_lock_cell
00:001230 350000              +1020 	lret	0
  :                            1021 
  :                            1022 bank_not_obtained
00:001231 303003              +1023 	z	banks_lock_cell
  :                            1024 cannot_add_bank
00:001232 650000              +1025 	la, xi	0
00:001233 6DFFFF              +1026 	lb, xi	-1
00:001234 350000              +1027 	lret	0
  :                            1028 
  :                            1029 .	process initial thread directly owns any more threads
  :                            1030 .	even if threads start them
  :                            1031 .	they are all on one chain from process initial thread
  :                            1032 .	there is no hierarchy to walk on process exit
  :                            1033 
  :                            1034 .	individually exiting threads leave the chain
  :                            1035 .	before their TCB is pooled
  :                            1036 .	so that an exiting process does not try to stop
  :                            1037 .	threads which are not there via TCBs which are
  :                            1038 .	already re-used in some different way
  :                            1039 
  :                            1040 remove_thread
00:001235 040041              +1041 	inA	65		. keep exiting TCB
00:001236 F80084              +1042 	push	a_x		. on the stack top as comparand
00:001237 601002              +1043 	la	WALKUP		. chain starts with process thread
00:001238 681007              +1044 	lb	NEXT_THREAD	. next from exiting thread
00:001239 4DFFFF              +1045 	lk	-1,,xi
  :                            1046 
  :                            1047 retrieve_thread
00:00123A 140041              +1048 	outA	65
00:00123B 601007              +1049 	la	NEXT_THREAD
00:00123C C60240              +1050 	jza	remove_threadx	. it is not there
00:00123D AFF000              +1051 	mta	0, sp		. is next the exiting thread?
00:00123E B6023A              +1052 	j	retrieve_thread
00:00123F 281007              +1053 	sb	NEXT_THREAD	. point past the exit thread	
  :                            1054 	
  :                            1055 remove_threadx
00:001240 380084              +1056 	pop	a_x		. retrieve the exiting TCB
00:001241 140041              +1057 	outA	65		. base it again
00:001242 350001              +1058 	lret	1		. continue the thread delete
  :                            1059 
  :                            1060 threads_down			. mark them down
00:001243 601007              +1061 	la	NEXT_THREAD
00:001244 C6024E              +1062 	jza	threadx_down
  :                            1063 
  :                            1064 threads_next_down
00:001245 34002C              +1065 	sabr	BVOLATILE_I
  :                            1066 
00:001246 9007B3              +1067 	or	(THREAD$HALT:s)	. broadcast halt request
  :                            1068 
00:001247 4DFFFF              +1069 	lk	-1,,xi		. to all cores in case thread is running
00:001248 14004F              +1070 	outA	MCAST_TO$	. thread cannot run
  :                            1071 				. with thread and process resources deleted
  :                            1072 
00:001249 5087B4              +1073 	lx	*(BVOLATILE_I*/12++TDESCRIPTOR-01000)
00:00124A 6007B5              +1074 	la	(EXIT)					. ?(TIME_WAIT++EXIT:s)
00:00124B 20A002              +1075 	sa	2, x
  :                            1076 
00:00124C 6087B6              +1077 	la	*(BVOLATILE_I*/12++NEXT_THREAD-01000)
00:00124D D60245              +1078 	jnza	threads_next_down
  :                            1079 
  :                            1080 threadx_down
00:00124E 350000              +1081 	lret	0
  :                            1082 
  :                            1083 tdescriptor_free
00:00124F F80082              +1084 	push	x_x
00:001250 FD0007              +1085 	push	MAX_INT_MASK,,xi
00:001251 27F000              +1086 	sim	0, sp		. don't get interrupted in here
  :                            1087 
00:001252 073004              +1088 	ts	threads_lock_cell
00:001253 B60252              +1089 	j	$-1
00:001254 683049              +1090 	lb	next_tdescriptor_sp
00:001255 B80082              +1091 	xorB	x_x
00:001256 CE025B              +1092 	jzb	tdescriptor_sp_plus
00:001257 683048              +1093 	lb	free_tdescriptor
00:001258 28A000              +1094 	sb	0, x
00:001259 103048              +1095 	sx	free_tdescriptor
00:00125A B6025D              +1096 	j	tdescriptor_freex
  :                            1097 
  :                            1098 tdescriptor_sp_plus
00:00125B 850008              +1099 	ax	TDESCRIPTOR_WORDS,,xi
00:00125C 103049              +1100 	sx	next_tdescriptor_sp
  :                            1101 
  :                            1102 tdescriptor_freex
00:00125D 303004              +1103 	z	threads_lock_cell
00:00125E 27F000              +1104 	sim	0, sp
00:00125F 17008F              +1105 	inc	sp_x
00:001260 380082              +1106 	pop	x_x
00:001261 350000              +1107 	lret	0
  :                            1108 
  :                            1109 
00:001262 055F00              +1110 exit	on	see$1++see$all**(see$7*/MANAGER_BANKS)-1
00:001263 501001              +1111 	lx	TDESCRIPTOR
00:001264 301001              +1112 	z	TDESCRIPTOR	. stop the TCB from looking like itself
  :                            1113 
00:001265 6007B5              +1114 	la	(EXIT)
00:001266 20A002              +1115 	sa	2, x
00:001267 3E024F              +1116 	lcal	tdescriptor_free
  :                            1117 
00:001268 701002              +1118 	tz	WALKUP		. if this is not the initial thread
00:001269 3E0235              +1119 	lcal	remove_thread	. take it out of the thread chain and return + 1
00:00126A 3E0243              +1120 	lcal	threads_down	. stop threads scheduling
  :                            1121 
00:00126B 601004              +1122 delete	la	BANK_CHAIN
  :                            1123 delete_another			. TCB is certainly there
00:00126C F8C000              +1124 	push	0, a
00:00126D 3E0156              +1125 	lcal	bank_free
00:00126E 380084              +1126 	pop	a_x
00:00126F D6026C              +1127 	jnza	delete_another
00:001270 350000              +1128 	lret	0
  :                            1129 
  :                            1130 exit_ii
00:001271 3E0262              +1131 	lcal	exit
  :                            1132 
00:001272 40008F              +1133 	lr	sp_x
00:001273 650080              +1134 	la	128,,xi		. core resume needs sp_x @ 128
00:001274 20008F              +1135 	sa	sp_x
  :                            1136 
00:001275 B602F0              +1137 	j	core_resume
  :                            1138 
  :                            1139 
  :                            1140 QUIET_SAVE* $proc
  :                            1141 qsave	ql	0, y
  :                            1142 	qs	0, x
  :                            1143 	ax	4,,xi
  :                            1144 	ay	4,,xi
  :                            1145 	jdr	qsave
  :                            1146 	$end
  :                            1147 
  :                            1148 write_trail
00:001276 001500              +1149 	sr	RESTART_TRACE_IREG
00:001277 081501              +1150 	sk	RESTART_TRACE_IREG+1
00:001278 101502              +1151 	sx	RESTART_TRACE_IREG+2
00:001279 181503              +1152 	sy	RESTART_TRACE_IREG+3
00:00127A 471504              +1153 	qs	RESTART_TRACE_IREG+4
  :                            1154 
00:00127B 052000              +1155 	on	see$2		. kernel vectors
00:00127C 040041              +1156 	inA	65
00:00127D 2028FC              +1157 	sa	RESTART_FRAME
  :                            1158 
00:00127E 5D0000              +1159 	ly	0,,xi
00:00127F 551480              +1160 	lx	RESTART_TRACE_AREG,,xi
00:001280 45001F              +1161 	lr	128/4-1,,xi
00:001281 4FB000              +1162 	QUIET_SAVE
00:001282 47A000              +1162 
00:001283 850004              +1162 
00:001284 8D0004              +1162 
00:001285 1E0281              +1162 
  :                            1163 
00:001286 5D0088              +1164 	ly	128+8,,xi
00:001287 551508              +1165 	lx	RESTART_TRACE_IREG+8,,xi
00:001288 45001D              +1166 	lr	128/4-1-2,,xi
00:001289 4FB000              +1167 	QUIET_SAVE
00:00128A 47A000              +1167 
00:00128B 850004              +1167 
00:00128C 8D0004              +1167 
00:00128D 1E0289              +1167 
  :                            1168 
00:00128E 5D1000              +1169 	ly	01000,,xi
00:00128F 551400              +1170 	lx	RESTART_TRACE_TCB,,xi
00:001290 45001F              +1171 	lr	128/4-1,,xi
00:001291 4FB000              +1172 	QUIET_SAVE
00:001292 47A000              +1172 
00:001293 850004              +1172 
00:001294 8D0004              +1172 
00:001295 1E0291              +1172 
  :                            1173 
00:001296 4FE000              +1174 	ql	0, fp
00:001297 47143C              +1175 	qs	RESTART_TRACE_ISTAC_FRAME
00:001298 040001              +1176 	inA	1
00:001299 201441              +1177 	sa	RESTART_TRACE_ABT+1
  :                            1178 
00:00129A 4F1140              +1179 	ql	TAG
00:00129B 471580              +1180 	qs	RESTART_TRACE_THREAD_NAME
  :                            1181 
  :                            1182 	$if	1
00:00129C 04004D              +1183 	inA	77
00:00129D C602A2              +1184 	jza	restart_go
00:00129E 4D0001              +1185 	lk	1,,xi		. core zero must do this
00:00129F 650002              +1186 	la	RESTART$1,,xi	. latent parameter is the function part here
00:0012A0 14004F              +1187 	outA	MCAST_TO$	. place core zero in restart ISR
00:0012A1 F707B9              +1188 	go	(0800000++$0p1(smp_pend, 0L)s)	. restart page 0
  :                            1189 
  :                            1190 restart_go
00:0012A2 F707BC              +1191 	go	(0800000++$0p1(restart, 0L)s)	. restart page 0
  :                            1192 
  :                            1193 	$else
  :                            1194 	j	restart
  :                            1195 	$endif
  :                            1196 
  :                            1197 guard_ii
00:0012A3 78F001              +1198 	tp	1, sp		. did this happen in an ISR?
00:0012A4 75003F              +1199 	ii	63		. no return to here unless the application caused it
  :                            1200 
00:0012A5 055F00              +1201 	on	see$all--see$2
00:0012A6 781008              +1202 	tp	ERROR_RESTART	. is the thread indispensible to system run?
00:0012A7 B60276              +1203 	j	write_trail	. write trace and restart the system
  :                            1204 
00:0012A8 501001              +1205 	lx	TDESCRIPTOR
00:0012A9 6007BD              +1206 	la	(TRAP)
00:0012AA 20A002              +1207 	sa	2, x		. fall thru to immediate yield
  :                            1208 
00:0012AB 4FE000              +1209 yield	ql	0, fp		. retrieve the interrrupted application frame
  :                            1210 				. switch visibility to TCB and kernel banks
  :                            1211 
00:0012AC 055F00              +1212 	on	see$1++see$all**(see$7*/MANAGER_BANKS)-1
  :                            1213 
00:0012AD 47103C              +1214 	qs	UPACKET		. interrupt stack frame of application -> TCB
  :                            1215 
00:0012AE 783002              +1216 	tp	energy$advise
00:0012AF 3E06FA              +1217 	lcal	irespite
  :                            1218 
00:0012B0 501001              +1219 	lx	TDESCRIPTOR
00:0012B1 60A002              +1220 	la	2, x
00:0012B2 A007B5              +1221 	and	(EXIT)
00:0012B3 D60271              +1222 	jnza	exit_ii
  :                            1223 
00:0012B4 040001              +1224 	inA	1		. relocation pointer, application private stack page
00:0012B5 201041              +1225 	sa	ABT+1		. other relocation pointers do not need saving
00:0012B6 600093              +1226 	la	fp$guard
00:0012B7 20103B              +1227 	sa	FP_FRAP
  :                            1228 
  :                            1229 	$if	$LOCK_SWITCH
00:0012B8 450007              +1230 	lr	7,,xi		. external interrupts remain pending
00:0012B9 270080              +1231 	sim	r_x		. ISR r
00:0012BA 000092              +1232 	sr	x$save2
  :                            1233 	$endif
  :                            1234 
00:0012BB 40008F              +1235 	lr	sp_x		. keep aside the value of the interrupt sp
00:0012BC 30008F              +1236 	z	sp_x		. point interrupt sp to start of user registers
  :                            1237 				. 32 stores for 128 registers
  :                            1238 
00:0012BD 8710C0              +1239 ?	$do	128/4,	qpop	RSAVE+4*?-4
00:0012BE 8710C4              +1239 
00:0012BF 8710C8              +1239 
00:0012C0 8710CC              +1239 
00:0012C1 8710D0              +1239 
00:0012C2 8710D4              +1239 
00:0012C3 8710D8              +1239 
00:0012C4 8710DC              +1239 
00:0012C5 8710E0              +1239 
00:0012C6 8710E4              +1239 
00:0012C7 8710E8              +1239 
00:0012C8 8710EC              +1239 
00:0012C9 8710F0              +1239 
00:0012CA 8710F4              +1239 
00:0012CB 8710F8              +1239 
00:0012CC 8710FC              +1239 
00:0012CD 871100              +1239 
00:0012CE 871104              +1239 
00:0012CF 871108              +1239 
00:0012D0 87110C              +1239 
00:0012D1 871110              +1239 
00:0012D2 871114              +1239 
00:0012D3 871118              +1239 
00:0012D4 87111C              +1239 
00:0012D5 871120              +1239 
00:0012D6 871124              +1239 
00:0012D7 871128              +1239 
00:0012D8 87112C              +1239 
00:0012D9 871130              +1239 
00:0012DA 871134              +1239 
00:0012DB 871138              +1239 
00:0012DC 87113C              +1239 
  :                            1240 
  :                            1241 				. interrupt SP now contains 128
  :                            1242 
00:0012DD 073047              +1243 	ts	switch_lock_cell
00:0012DE 3E00D3              +1244 	REBOUND75		. j	$-1
  :                            1245 
  :                            1246 	$if	T$SLICE
00:0012DF 60A002              +1247 	la	2, x		. what's in the flags?
00:0012E0 9E02E3              +1248 	jao	qpriority	. external interrupt wait: schedule prioritised when it happens
  :                            1249 
00:0012E1 65306C              +1250 	la	stem(PRIORITIES),,xi
00:0012E2 B602EB              +1251 	j	requeue		. schedule after timeslice or at iowait of other threads
  :                            1252 
  :                            1253 qpriority
  :                            1254 	$endif			. TSLICE
  :                            1255 
00:0012E3 600095              +1256 	la	PRIORITY$	. copy of thread priority in interrupt register 149
Note: measure.msm Line 1257: this tests a_x not a
00:0012E4 680084              +1257 	tanu,xi	PRIORITIES
00:0012E5 DD0008              +1257 
  :                            1258 
00:0012E6 5E02E9              +1259 	jnc	in_order
  :                            1260 
  :                            1261 				. surprising this this ever happens
00:0012E7 650007              +1262 	la	PRIORITIES-1,,xi
00:0012E8 20A001              +1263 	sa	1, x		. but if it does update the thread descriptor
  :                            1264 in_order
  :                            1265 
00:0012E9 260002              +1266 	sal	2		. address the 4-word priority list tail pointer
00:0012EA C53050              +1267 	aa, xi	stem(1)
  :                            1268 
00:0012EB 68C003              +1269 requeue	lb	3, a	. uplink to last in priority chain
00:0012EC 10C003              +1270 	sx	3, a	. new last <-
00:0012ED 10D000              +1271 	sx	0, b	. old_last->next
00:0012EE 20A000              +1272 	sa	0, x	. ->next = stem_post
  :                            1273 
00:0012EF B602F5              +1274 	j	choose	. lock is already locked
  :                            1275 
  :                            1276 core_resume
  :                            1277 	$if	$LOCK_SWITCH
00:0012F0 650007              +1278 	la	7,,xi
00:0012F1 200092              +1279 	sa	x$save2
00:0012F2 270092              +1280 	sim	x$save2
  :                            1281 	$endif
  :                            1282 
  :                            1283 core_resume1		. if come_from is anywhere except fall_thru from yield
00:0012F3 073047              +1284 	ts	switch_lock_cell
00:0012F4 3E00D3              +1285 	REBOUND75	. j	core_resume1
  :                            1286 
  :                            1287 choose			. now load another task
  :                            1288 			. run forward from the lowest priority chain tail
  :                            1289 			. to the first task descriptor in the highest priority chain
  :                            1290 
  :                            1291 	$if	TDESCRIPTOR_WORDS>6
  :                            1292 
00:0012F5 04004D              +1293 	inA	CORE_SOCKET$
00:0012F6 6D0001              +1294 	lb	1,,xi
00:0012F7 2EC000              +1295 	sbl	0, a
00:0012F8 480085              +1296 	lk	b_x		. k contains the log of the core-id all through choose
  :                            1297 				. for candidate threads which have an affinity mask
  :                            1298 
  :                            1299 p	$proc	*		. 2-pass proc for forward references
  :                            1300 masked_test_jump* $name
  :                            1301 	lb	p(1)
  :                            1302 	jzb	not_masked	. least costly path when there is no mask
  :                            1303 
  :                            1304 	lb	k_x		. b_x can be re-used, load 1 */ core_index 
  :                            1305 	andB	p(1)		. 2nd storage read of mask
  :                            1306 
  :                            1307 	jzb	p(2)		. this core does not match any mask bit
  :                            1308 
  :                            1309 not_masked 
  :                            1310 	$end
  :                            1311 
  :                            1312 	$endif			. TDESCRIPTOR_WORDS>6	= thread affinity supported
  :                            1313 
00:0012F9 65306C              +1314 	la,xi	stem(PRIORITIES)
00:0012FA 580084              +1315 forward	ly	a_x		. previous,,xi
00:0012FB 60C000              +1316 	la	0, a
00:0012FC 78C001              +1317 	tn	1, a		. a thread or a priority stem post?
00:0012FD B602FF              +1317 
00:0012FE B60307              +1318 	j	forward2thread	. a thread
Note: measure.msm Line 1319: this tests a_x not a
00:0012FF 680084              +1319 	tanu	stem(PRIORITIES),,xi	. are we where we started?
00:001300 DD306C              +1319 
00:001301 DE02FA              +1320 	jnzb	forward		. don't schedule the stem post. It is not a thread
  :                            1321 
00:001302 303047              +1322 	z	switch_lock_cell	. there are fewer ready threads than cores
00:001303 CF07BE              +1323 	dl	(CHILLDOWN, REST_GRANULE:d)	. core can rest substantial time
00:001304 1C0067              +1324 	outB	chill$down
00:001305 140066              +1325 	outA	INDICATION$
  :                            1326 
00:001306 B602F3              +1327 	j	core_resume1
  :                            1328 
  :                            1329 forward2thread
00:001307 68C002              +1330 	lb	2, a
00:001308 CE030F              +1331 	jzb	switch_select	. advance to check afinity
00:001309 A807B5              +1332 	andB	(EXIT)		. check asynchronously flagged EXIT
00:00130A DE0314              +1333 	jnzb	unconditionally	. deschedule / remove  whatever flags other
  :                            1334 
00:00130B 78C002              +1335 	tp	2, a		. flag 23 is timewait in descriptor words 4:5
00:00130C 3E0537              +1336 	lcal	timer_check	. leaving timewait clears all inhibit flags
00:00130D 70C002              +1337 	tz	2, a		. clear to run?
00:00130E B602FA              +1338 	j	forward		. no
  :                            1339 				. yes
  :                            1340 switch_select
  :                            1341 	$if	TDESCRIPTOR_WORDS>6		.	= thread affinity supported
00:00130F 68C006              +1342 	masked_test_jump	6, a	forward
00:001310 CE0314              +1342 
00:001311 680081              +1342 
00:001312 A8C006              +1342 
00:001313 CE02FA              +1342 
  :                            1343 	$endif
  :                            1344 
  :                            1345 unconditionally
00:001314 50C000              +1346 	lx	0, a		. ->next becomes previous->next
00:001315 10B000              +1347 	sx	0, y		. previous -> next
  :                            1348 
00:001316 78A001              +1349 	tp	1, x		. is he the stem post?
00:001317 18A003              +1350 	sy	3, x		. known by 1s complement PRIORITY
  :                            1351 				. if so, the uplink from
  :                            1352 				. stem post points to the new
  :                            1353 				. last in the priority list
  :                            1354 
00:001318 303047              +1355 	z	switch_lock_cell
  :                            1356 
00:001319 68C003              +1357 	lb	3, a	. retrieve the TCB relocation pointer from the descriptor
00:00131A 1C0041              +1358 	outB	65	. base the TCB
  :                            1359 
  :                            1360 	$if	1
00:00131B 68C002              +1361 	lb	2, a
00:00131C A807B5              +1362 	andB	(EXIT)
00:00131D CE0320              +1363 	jzb	no_xflag
00:00131E 3E0262              +1364 	lcal	exit
00:00131F B602F3              +1365 	j	core_resume1
  :                            1366 no_xflag
  :                            1367 	$endif
  :                            1368 
00:001320 68C001              +1369 	lb	1, a		. copy priority level to interrupt register 149
00:001321 280095              +1370 	sb	PRIORITY$	. for quick reference
  :                            1371 
  :                            1372 	$if	T$SLICE		. when multiple priorities begin to be used
  :                            1373 				. priorities other than RT=0 need proportional time because
  :                            1374 				. mostly all of the switch chains are walked as 1 chain
  :                            1375 				. except rare cases when only RT threads are candidates
  :                            1376 
  :                            1377 	$do	PRIORITIES>8,	$flag	time slice table < priorities
00:001322 AD0007              +1378 	andB	+(1*/T$LOG(PRIORITIES))-1,,xi
00:001323 68D7C0              +1379 	lb	(0, T$SLICE*15, T$SLICE*12, T$SLICE*10, T$SLICE*8, T$SLICE*6, T$SLICE*5, T$SLICE*4o), b
00:001324 280094              +1380 	sb	REALTIME$_CLOCK
  :                            1381 				. the quanta are an instruction ration. Thread yields on decrement<0
  :                            1382 	$endif			. PRIORITY=0=realtime=no time slice, no decrement, no automatic yield
  :                            1383 				. no decrementation takes place during interrupt code
  :                            1384 
  :                            1385 	$if	0
  :                            1386 	lb	2, a		. read the flags word again
  :                            1387 	andB	(EXIT)		. thread EXIT flagged while unswitched?
  :                            1388 	jzb	run_forward	. no
  :                            1389 	lb	1,,xi		. force yield after 1-instruction timeslice
  :                            1390 	sb	REALTIME$_CLOCK	. then EXIT flag will end the thread
  :                            1391 run_forward
  :                            1392 	$endif
  :                            1393 
00:001325 651042              +1394 	la, xi	ABT+2		. application data relocation registers
  :                            1395 				. never need saving, only loading
00:001326 240002              +1396 ?	$do	64/2-1,	reload	2*?
00:001327 240004              +1396 
00:001328 240006              +1396 
00:001329 240008              +1396 
00:00132A 24000A              +1396 
00:00132B 24000C              +1396 
00:00132C 24000E              +1396 
00:00132D 240010              +1396 
00:00132E 240012              +1396 
00:00132F 240014              +1396 
00:001330 240016              +1396 
00:001331 240018              +1396 
00:001332 24001A              +1396 
00:001333 24001C              +1396 
00:001334 24001E              +1396 
00:001335 240020              +1396 
00:001336 240022              +1396 
00:001337 240024              +1396 
00:001338 240026              +1396 
00:001339 240028              +1396 
00:00133A 24002A              +1396 
00:00133B 24002C              +1396 
00:00133C 24002E              +1396 
00:00133D 240030              +1396 
00:00133E 240032              +1396 
00:00133F 240034              +1396 
00:001340 240036              +1396 
00:001341 240038              +1396 
00:001342 24003A              +1396 
00:001343 24003C              +1396 
00:001344 24003E              +1396 
  :                            1397 
00:001345 601041              +1398 	la	ABT+1		. relocation register to application private stack page
00:001346 140001              +1399 	outA	1		. not in scope of reload instruction
  :                            1400 
00:001347 60103B              +1401 	la	FP_FRAP
00:001348 200093              +1402 	sa	fp$guard
  :                            1403 
  :                            1404 			. ISR ISP still = 128. 32 load instructions for 128 registers
  :                            1405 
00:001349 8F113C              +1406 ?	$do	128/4,	qpush	RSAVE+128-4*?
00:00134A 8F1138              +1406 
00:00134B 8F1134              +1406 
00:00134C 8F1130              +1406 
00:00134D 8F112C              +1406 
00:00134E 8F1128              +1406 
00:00134F 8F1124              +1406 
00:001350 8F1120              +1406 
00:001351 8F111C              +1406 
00:001352 8F1118              +1406 
00:001353 8F1114              +1406 
00:001354 8F1110              +1406 
00:001355 8F110C              +1406 
00:001356 8F1108              +1406 
00:001357 8F1104              +1406 
00:001358 8F1100              +1406 
00:001359 8F10FC              +1406 
00:00135A 8F10F8              +1406 
00:00135B 8F10F4              +1406 
00:00135C 8F10F0              +1406 
00:00135D 8F10EC              +1406 
00:00135E 8F10E8              +1406 
00:00135F 8F10E4              +1406 
00:001360 8F10E0              +1406 
00:001361 8F10DC              +1406 
00:001362 8F10D8              +1406 
00:001363 8F10D4              +1406 
00:001364 8F10D0              +1406 
00:001365 8F10CC              +1406 
00:001366 8F10C8              +1406 
00:001367 8F10C4              +1406 
00:001368 8F10C0              +1406 
  :                            1407 
00:001369 00008F              +1408 	sr	sp_x	. recover the interrupt stack pointer
  :                            1409 
  :                            1410 	$if	$LOCK_SWITCH
00:00136A 270092              +1411 	sim	x$save2	. allow external interrupts
  :                            1412 	$endif
  :                            1413 
  :                            1414 	$if	T$SLICE
  :                            1415 	$else
  :                            1416 	la	ULIMIT	. automatic time slice decrementer, zero = no limit
  :                            1417 	sa	REALTIME$_CLOCK
  :                            1418 	$endif
  :                            1419 
00:00136B 4F103C              +1420 	ql	UPACKET	. interrupt return stack frame of applicatiom
00:00136C 47E000              +1421 	qs	0, fp	. interrupt fp = interrupt sp at application interrupt
00:00136D 7D0000              +1422 	ir	0	. if we got here from another interrupt
  :                            1423 			. we shall return to there first
  :                            1424 
00:00136E 9F0084              +1425 spawn	dpush	a_x
00:00136F EE0471              +1426 	jnb	priority_out_of_range
00:001370 DD0008              +1427 	anb,xi	PRIORITIES
00:001371 7E0471              +1428 	jc	priority_out_of_range
  :                            1429 
00:001372 CF0086              +1430 	dl	6+128
00:001373 EE0376              +1431 	jnb	b1_stack_given
00:001374 6DFFFF              +1432 	lb, xi	-1
  :                            1433 				. B1 stack pages
00:001375 280087              +1434 	sb	7+128
  :                            1435 b1_stack_given
00:001376 2E000C              +1436 	sbl	12		. this much more storage
00:001377 D00085              +1437 	ana	b_x
  :                            1438 
00:001378 C52000              +1439 	aa,xi	4096*2		. TCB + vector page
00:001379 3E01D2              +1440 	lcal	bank
00:00137A C60471              +1441 	jza	no_new_task
  :                            1442 
00:00137B F80084              +1443 	push	a_x		. acquired storage pointer
  :                            1444 
00:00137C 30D000              +1445 	z	0, b		. ensure forward pointer
  :                            1446 				. of descriptor is zero
  :                            1447 
00:00137D 054000              +1448 	on	see$1
00:00137E 0D2000              +1449 	off	see$2
  :                            1450 				. subtract is add because
  :                            1451 				. the B1 stack size is a
  :                            1452 				. minus value in 7
  :                            1453 
00:00137F D00087              +1454 	ana	7+128		. above the B1 stack
00:001380 140041              +1455 	outA	65		. we have a TCB
  :                            1456 
00:001381 301002              +1457 	z	WALKUP		. primary thread
00:001382 301003              +1458 	z	ULIMIT		. default no time slice
00:001383 281004              +1459 	sb	BANK_CHAIN	. this initial bank
  :                            1460 				. complex is the last
  :                            1461 				. thing on our
  :                            1462 				. ownership chain
  :                            1463 
00:001384 6DFFFF              +1464 	lb, xi	-1		. B1 stack page 1
  :                            1465 
00:001385 2810D4              +1466 	sb	RSAVE+RDATAC	. default settings -> SIMD configuration
00:001386 3010D5              +1467 	z	RSAVE+RDATA	. held in b$stream registers
00:001387 3010D6              +1468 	z	RSAVE+WDATAC
00:001388 3010D7              +1469 	z	RSAVE+WDATA
  :                            1470 				. and b still contains -1
00:001389 C80084              +1471 	ab	a_x		. for calculating initial B1 page index
00:00138A 281041              +1472 	sb	ABT+1
  :                            1473 
00:00138B 64D002              +1474 	la, i	2, b		. vector page
00:00138C 340002              +1475 	sabr	2
  :                            1476 .	sa	ABT+2
  :                            1477 
  :                            1478 				. push	TEMP_BASE_ABSO
00:00138D 38207E              +1479 	pop	BASE_VECTOR
  :                            1480 
00:00138E C50001              +1481 	aa, xi	1		. first data page
00:00138F 20207F              +1482 	sa	VECTOR_D
  :                            1483 
00:001390 652073              +1484 	la, xi	VECTOR_B1(1)
00:001391 201005              +1485 	sa	B1_P		. B1 array stack pointer
  :                            1486 
00:001392 30207C              +1487 	z	FILE_OPEN_HEAP	. process is not qualified for automatic file open blocks
00:001393 30207D              +1488 	z	FILE_OPEN_HEAPU	. until it is
  :                            1489 
00:001394 28C000              +1490 set_b1	sb	0, a
00:001395 C5FFFF              +1491 	aa, xi	-1
00:001396 CDFFFF              +1492 	ab, xi	-1
00:001397 170087              +1493 	inc	128+7
00:001398 700087              +1494 	tz	128+7
00:001399 B60394              +1495 	j	set_b1
  :                            1496 
00:00139A 4F07C8              +1497 	ql	(0C00001C00001C00001C00001q)
00:00139B 281043              +1498 	sb	ABT+3			. close application data windows
00:00139C 471044              +1499 ?	$do	15,	qs	ABT+4*?	. application opens  windows it needs
00:00139D 471048              +1499 
00:00139E 47104C              +1499 
00:00139F 471050              +1499 
00:0013A0 471054              +1499 
00:0013A1 471058              +1499 
00:0013A2 47105C              +1499 
00:0013A3 471060              +1499 
00:0013A4 471064              +1499 
00:0013A5 471068              +1499 
00:0013A6 47106C              +1499 
00:0013A7 471070              +1499 
00:0013A8 471074              +1499 
00:0013A9 471078              +1499 
00:0013AA 47107C              +1499 
  :                            1500 
00:0013AB 301183              +1501 	z	XINTT+3		. start without an interrupts table because
  :                            1502 				. most threads don't get external interrupts
00:0013AC 60F000              +1503 	la	0, sp
00:0013AD E603B1              +1504 	jna	gate		. bit 23 = indirectly over a stored gate
  :                            1505 
00:0013AE 160006              +1506 	dsr	6
  :                            1507 
00:0013AF 0E0012              +1508 	sbr	18
00:0013B0 B603B7              +1509 	j	store_upacket
  :                            1510 
00:0013B1 A007CC              +1511 gate	and	(07FFFFF)	. leave bit 23 behind
00:0013B2 0D7F00              +1512 	off	see$all		. 48-bit gate descriptor is anywhere
00:0013B3 CFC000              +1513 	dl	0, a		. in calling application address space
00:0013B4 055F00              +1514 	on	see$all--see$2	. but you need TCB + kernel store again here
  :                            1515 
00:0013B5 360006              +1516 	dsl	6		. frame page high index
  :                            1517 				. is not in interrupt return frame
00:0013B6 760012              +1518 	drl	18		. but 1 must be in bit 47
  :                            1519 
  :                            1520 
  :                            1521 store_upacket
00:0013B7 C7103E              +1522 	ds	UPACKET+2	. set thread transfer
  :                            1523 
00:0013B8 60F000              +1524 	la	0, sp		. read bank name again
00:0013B9 A5FFC0              +1525 	and, xi	-64		. beginning with vector 0
  :                            1526 				. write the 64 entry points
  :                            1527 				. into the vector bank
  :                            1528 
  :                            1529 p	$proc
  :                            1530 v64*	$name
  :                            1531 	sa	VECTOR(?)
  :                            1532 	aa, xi	1
  :                            1533 	$end
  :                            1534 
00:0013BA 202000              +1535 ?	$do	64,	v64
00:0013BB C50001              +1535 
00:0013BC 202001              +1535 
00:0013BD C50001              +1535 
00:0013BE 202002              +1535 
00:0013BF C50001              +1535 
00:0013C0 202003              +1535 
00:0013C1 C50001              +1535 
00:0013C2 202004              +1535 
00:0013C3 C50001              +1535 
00:0013C4 202005              +1535 
00:0013C5 C50001              +1535 
00:0013C6 202006              +1535 
00:0013C7 C50001              +1535 
00:0013C8 202007              +1535 
00:0013C9 C50001              +1535 
00:0013CA 202008              +1535 
00:0013CB C50001              +1535 
00:0013CC 202009              +1535 
00:0013CD C50001              +1535 
00:0013CE 20200A              +1535 
00:0013CF C50001              +1535 
00:0013D0 20200B              +1535 
00:0013D1 C50001              +1535 
00:0013D2 20200C              +1535 
00:0013D3 C50001              +1535 
00:0013D4 20200D              +1535 
00:0013D5 C50001              +1535 
00:0013D6 20200E              +1535 
00:0013D7 C50001              +1535 
00:0013D8 20200F              +1535 
00:0013D9 C50001              +1535 
00:0013DA 202010              +1535 
00:0013DB C50001              +1535 
00:0013DC 202011              +1535 
00:0013DD C50001              +1535 
00:0013DE 202012              +1535 
00:0013DF C50001              +1535 
00:0013E0 202013              +1535 
00:0013E1 C50001              +1535 
00:0013E2 202014              +1535 
00:0013E3 C50001              +1535 
00:0013E4 202015              +1535 
00:0013E5 C50001              +1535 
00:0013E6 202016              +1535 
00:0013E7 C50001              +1535 
00:0013E8 202017              +1535 
00:0013E9 C50001              +1535 
00:0013EA 202018              +1535 
00:0013EB C50001              +1535 
00:0013EC 202019              +1535 
00:0013ED C50001              +1535 
00:0013EE 20201A              +1535 
00:0013EF C50001              +1535 
00:0013F0 20201B              +1535 
00:0013F1 C50001              +1535 
00:0013F2 20201C              +1535 
00:0013F3 C50001              +1535 
00:0013F4 20201D              +1535 
00:0013F5 C50001              +1535 
00:0013F6 20201E              +1535 
00:0013F7 C50001              +1535 
00:0013F8 20201F              +1535 
00:0013F9 C50001              +1535 
00:0013FA 202020              +1535 
00:0013FB C50001              +1535 
00:0013FC 202021              +1535 
00:0013FD C50001              +1535 
00:0013FE 202022              +1535 
00:0013FF C50001              +1535 
00:001400 202023              +1535 
00:001401 C50001              +1535 
00:001402 202024              +1535 
00:001403 C50001              +1535 
00:001404 202025              +1535 
00:001405 C50001              +1535 
00:001406 202026              +1535 
00:001407 C50001              +1535 
00:001408 202027              +1535 
00:001409 C50001              +1535 
00:00140A 202028              +1535 
00:00140B C50001              +1535 
00:00140C 202029              +1535 
00:00140D C50001              +1535 
00:00140E 20202A              +1535 
00:00140F C50001              +1535 
00:001410 20202B              +1535 
00:001411 C50001              +1535 
00:001412 20202C              +1535 
00:001413 C50001              +1535 
00:001414 20202D              +1535 
00:001415 C50001              +1535 
00:001416 20202E              +1535 
00:001417 C50001              +1535 
00:001418 20202F              +1535 
00:001419 C50001              +1535 
00:00141A 202030              +1535 
00:00141B C50001              +1535 
00:00141C 202031              +1535 
00:00141D C50001              +1535 
00:00141E 202032              +1535 
00:00141F C50001              +1535 
00:001420 202033              +1535 
00:001421 C50001              +1535 
00:001422 202034              +1535 
00:001423 C50001              +1535 
00:001424 202035              +1535 
00:001425 C50001              +1535 
00:001426 202036              +1535 
00:001427 C50001              +1535 
00:001428 202037              +1535 
00:001429 C50001              +1535 
00:00142A 202038              +1535 
00:00142B C50001              +1535 
00:00142C 202039              +1535 
00:00142D C50001              +1535 
00:00142E 20203A              +1535 
00:00142F C50001              +1535 
00:001430 20203B              +1535 
00:001431 C50001              +1535 
00:001432 20203C              +1535 
00:001433 C50001              +1535 
00:001434 20203D              +1535 
00:001435 C50001              +1535 
00:001436 20203E              +1535 
00:001437 C50001              +1535 
00:001438 20203F              +1535 
00:001439 C50001              +1535 
  :                            1536 
00:00143A 650080              +1537 	la, xi	128
  :                            1538 	
00:00143B 2010CF              +1539         sa	 RSAVE+sp	. set user SP
  :                            1540 
00:00143C CF07CD              +1541 	dl	(080:d)		. default halfword-sensitive
  :                            1542 				. just for now
00:00143D C7103C              +1543 	ds	UPACKET
  :                            1544 
  :                            1545 
00:00143E 3E0475              +1546 	lcal	tdescriptor
00:00143F B6046F              +1547 	j	no_new_task_descriptor
  :                            1548 
  :                            1549 
00:001440 68F001              +1550 	lb	1, sp
00:001441 28A001              +1551 	sb	1, x
  :                            1552 
00:001442 101001              +1553 	sx	TDESCRIPTOR
  :                            1554 
00:001443 F807CF              +1555 	push	('TCB')
00:001444 381000              +1556 	pop	TCB
  :                            1557 
00:001445 040041              +1558 	inA	65
00:001446 20A003              +1559 	sa	3, x
00:001447 20F000              +1560 	sa	0, sp
  :                            1561 
00:001448 30A002              +1562 	z	2, x		. clear tdescriptor flags
  :                            1563 
00:001449 30A006              +1564 ?	$do	TDESCRIPTOR_WORDS-6,	z	6-1+?, x
00:00144A 30A007              +1564 
  :                            1565 				. clear affinity mask
00:00144B 2E0002              +1566 	sbl	2
  :                            1567 
00:00144C 073047              +1568 	ts	switch_lock_cell
00:00144D 3E00D3              +1569 	REBOUND75		. j	$-1
  :                            1570 
00:00144E CD3050              +1571 	ab, xi	stem(1)
00:00144F 60D003              +1572 	la	3, b		. trailing uplink
00:001450 10C000              +1573 	sx	0, a		. new is last->next
00:001451 28A000              +1574 	sb	0, x		. stem is new->next
00:001452 10D003              +1575 	sx	3, b		. new is stem->uplink
  :                            1576 
00:001453 303047              +1577 	z	switch_lock_cell
  :                            1578 
00:001454 553000              +1579 	lx	$VECTOR_HIGH,,xi
00:001455 452920              +1580 	lr	vpointer(33),,xi
00:001456 4F07C8              +1581 	ql	(0C00001C00001C00001C00001q)
  :                            1582 seal32vectors
00:001457 85FFE0              +1583 	ax	-32,,xi
00:001458 47A01C              +1584 ?	$do	32/4,	qs	32-?*4, x
00:001459 47A018              +1584 
00:00145A 47A014              +1584 
00:00145B 47A010              +1584 
00:00145C 47A00C              +1584 
00:00145D 47A008              +1584 
00:00145E 47A004              +1584 
00:00145F 47A000              +1584 
00:001460 F60457              +1585 	jxge	seal32vectors
  :                            1586 
00:001461 6007D0              +1587 	la	(APPLICATION_BASE/*12)
00:001462 202910              +1588 	sa	vpointer(17)
  :                            1589 
00:001463 65218E              +1590 	la, xi	handle(4)	. good, reserve handle(1..3)
00:001464 202187              +1591 	sa	handles
00:001465 302186              +1592 	z	free_handle
  :                            1593 
00:001466 301007              +1594 	z	NEXT_THREAD
00:001467 301140              +1595 	z	TAG		. clear optional thread name
  :                            1596 
00:001468 6007B3              +1597 	la	(0C00000:s)
00:001469 20103B              +1598 	sa	FP_FRAP		. default rounding pattern
00:00146A 30103A              +1599 	z	FP_XPO		. no floating overflow yet
00:00146B 301008              +1600 	z	ERROR_RESTART	. process cat activate restart on fault
  :                            1601 				. if it is essential to system running
  :                            1602 				. ii RESTART_EI$ with bit 23 of a asserted
  :                            1603 
00:00146C 380084              +1604 	dpop	a_x
00:00146D 380085              +1604 
  :                            1605 
00:00146E 350000              +1606 	lret	0
  :                            1607 
  :                            1608 no_new_task_descriptor
00:00146F 601004              +1609 	la	BANK_CHAIN
00:001470 3E0156              +1610 	lcal	bank_free
  :                            1611 
  :                            1612 no_new_task
  :                            1613 priority_out_of_range
00:001471 380084              +1614 	dpop	a_x
00:001472 380085              +1614 
00:001473 160030              +1615 	dsr	48
00:001474 350000              +1616 	lret	0
  :                            1617 
  :                            1618 tdescriptor
00:001475 073004              +1619 	ts	threads_lock_cell
00:001476 3E0038              +1620 	lcal	REBOUND75
  :                            1621 
00:001477 503048              +1622 	lx	free_tdescriptor
00:001478 700082              +1623 	tz	x_x
00:001479 B60483              +1624 	j	found_tdescriptor
00:00147A 503049              +1625 	lx	next_tdescriptor_sp
00:00147B 85FFF8              +1626 	ax, xi	-TDESCRIPTOR_WORDS
00:00147C 403005              +1627 	lr	next
00:00147D F60480              +1628 	jxge	new_tdescriptor
00:00147E 303004              +1629 	z	threads_lock_cell
00:00147F 350000              +1630 	lret	0
  :                            1631 
  :                            1632 new_tdescriptor
00:001480 103049              +1633 	sx	next_tdescriptor_sp
00:001481 303004              +1634 	z	threads_lock_cell
00:001482 350001              +1635 	lret	1
  :                            1636 
  :                            1637 found_tdescriptor
00:001483 F8A000              +1638 	push	0, x
00:001484 383048              +1639 	pop	free_tdescriptor
00:001485 303004              +1640 	z	threads_lock_cell
00:001486 350001              +1641 	lret	1
  :                            1642 
[$zenith][0000000000000000000000000000000000000000000007d1]
  :                            1643 	$trace	$zenith
  :                            823: 	$include	threadp
  :                            1 
  :                            2 replicate_abt
00:001487 1C0041              +3 	outB		65
00:001488 8F107C              +4 ?	$do	64/4,	qpush		ABT+64-?*4
00:001489 8F1078              +4 
00:00148A 8F1074              +4 
00:00148B 8F1070              +4 
00:00148C 8F106C              +4 
00:00148D 8F1068              +4 
00:00148E 8F1064              +4 
00:00148F 8F1060              +4 
00:001490 8F105C              +4 
00:001491 8F1058              +4 
00:001492 8F1054              +4 
00:001493 8F1050              +4 
00:001494 8F104C              +4 
00:001495 8F1048              +4 
00:001496 8F1044              +4 
00:001497 8F1040              +4 
00:001498 140041              +5 	outA		65
00:001499 871040              +6 ?	$do	64/4,	qpop		ABT+?*4-4
00:00149A 871044              +6 
00:00149B 871048              +6 
00:00149C 87104C              +6 
00:00149D 871050              +6 
00:00149E 871054              +6 
00:00149F 871058              +6 
00:0014A0 87105C              +6 
00:0014A1 871060              +6 
00:0014A2 871064              +6 
00:0014A3 871068              +6 
00:0014A4 87106C              +6 
00:0014A5 871070              +6 
00:0014A6 871074              +6 
00:0014A7 871078              +6 
00:0014A8 87107C              +6 
00:0014A9 350000              +7 	lret		0
  :                            8 
  :                            9 thread	II_LOCK
00:0014AA 600005              +10 	la		b		. priority of new thread, application b
00:0014AB E604F3              +11 	jna		no_new_thread	. you can't
00:0014AC C5FFF8              +12 	aa, xi		-PRIORITIES
00:0014AD 7E04F3              +13 	jc		no_new_thread	. you still can't
  :                            14 					. OK maybe you can
00:0014AE 054000              +15 	on		see$1		. see calling TCB
  :                            16 
00:0014AF 651000              +17 	la, xi		4096		. assign new TCB
00:0014B0 3E01D2              +18 	lcal		bank
00:0014B1 C604F3              +19 	jza		no_new_thread	. you can't
  :                            20 
00:0014B2 3E0475              +21 	lcal		tdescriptor
00:0014B3 B604F1              +22 	j		no_new_thread_descriptor	. you can't
  :                            23 
  :                            24 	.		the new thread is now a certainty
  :                            25 
  :                            26 					. a -> new tcb page
  :                            27 					. b -> memory management descriptor of that
  :                            28 					. x -> 6-word switching descriptor in kernel store
  :                            29 
00:0014B4 30D000              +30 	z		0, b		. forward pointer of new TCB page
  :                            31 					. in memory management chain
00:0014B5 401002              +32 	lr		WALKUP		. TCB of initial thread
  :                            33 					. unless the initial thread is calling
00:0014B6 F81008              +34 	push		ERROR_RESTART	
00:0014B7 F80085              +35 	push		b_x		. new TCB descriptor pointer
00:0014B8 F81005              +36 	push		B1_P		. calling thread B1 list pointer
00:0014B9 F81007              +37 	push		NEXT_THREAD	. next of caller, base pointer
  :                            38 
00:0014BA 0C0041              +39 	inB		65		. calling thread TCB
00:0014BB 201007              +40 	sa		NEXT_THREAD	. new TCB base pointer next of calling thread
00:0014BC 140041              +41 	outA		65		. new thread TCB
  :                            42 
00:0014BD 381007              +43 	pop		NEXT_THREAD	. old next of caller is next of new
00:0014BE 381005              +44 	pop		B1_P		. b1 list pointer from calling thread
00:0014BF 381004              +45 	pop		BANK_CHAIN	. only storage block of new thread
00:0014C0 381008              +46 	pop		ERROR_RESTART	. new threads must resstart on error
  :                            47 					. if the process initial thread does
  :                            48 
00:0014C1 30A002              +49 	z		2, x		. construct thread descriptor
00:0014C2 20A003              +50 	sa		3, x		. with TCB
00:0014C3 30A006              +51 ?	$do		TDESCRIPTOR_WORDS-6,	z	6-1+?, x	. clear affinity mask
00:0014C4 30A007              +51 
00:0014C5 101001              +52 	sx		TDESCRIPTOR
  :                            53 
00:0014C6 F807CF              +54 	push		('TCB')
00:0014C7 381000              +55 	pop		TCB
  :                            56 
00:0014C8 3E0487              +57 	lcal		replicate_abt
  :                            58 
00:0014C9 301183              +59 	z		XINTT+3		. start without an interrupts table because
  :                            60 					. most threads don't get external interrupts
00:0014CA 301003              +61 	z		ULIMIT
  :                            62 
00:0014CB 9F0084              +63 	dpush		a_x		. new and calling TCBs
  :                            64 
00:0014CC 680004              +65 	lb		a		. thread transfer address from application a
00:0014CD 60E002              +66 	la		2, fp		. calling thread B0
  :                            67 
00:0014CE C7103E              +68 	ds		UPACKET+2
00:0014CF 650000              +69 	la, xi		0
00:0014D0 68E001              +70 	lb		1, fp		. calling thread PSR
00:0014D1 AD0080              +71 	andB, xi	080
00:0014D2 C7103C              +72 	ds		UPACKET		. thread switch packet complete
  :                            73 
00:0014D3 650080              +74 	la, xi		128
00:0014D4 2010CF              +75 	sa		RSAVE+sp	. new thread internal stack pointer
  :                            76 
00:0014D5 600093              +77 	la		fp$guard	. copy caller's rounding guard bits
00:0014D6 20103B              +78 	sa		FP_FRAP
00:0014D7 30103A              +79 	z		FP_XPO		. no exponent overflow yet
  :                            80 
00:0014D8 8F07D1              +81 	qpush		(-1, 0, 0, 0q)	. default SIMD configuration
00:0014D9 8710D4              +82 	qpop		RSAVE+RDATAC	. held in b$stream registers
  :                            83 
00:0014DA 073047              +84 	ts		switch_lock_cell
00:0014DB B604DA              +85 	j		$-1
  :                            86 	
00:0014DC 680005              +87 	lb		b		. priority in application register b
00:0014DD 28A001              +88 	sb		1, x		. 2nd word switching descriptor 
  :                            89 
  :                            90 	$if		1		. all done with just 1 queue now
00:0014DE 6D306C              +91 	lb		stem(PRIORITIES),,xi
  :                            92 	$else
  :                            93 	sbl		2		. 
  :                            94 	ab, xi		stem(1)		. thread descriptor into switch list
  :                            95 	$endif
  :                            96 
00:0014DF 60D003              +97 	la		3, b		. trailing uplink
00:0014E0 10C000              +98 	sx		0, a		. new is last->next
00:0014E1 28A000              +99 	sb		0, x		. stem is new->next
00:0014E2 10D003              +100 	sx		3, b		. new is stem->uplink
  :                            101 
00:0014E3 303047              +102 	z		switch_lock_cell
  :                            103 
00:0014E4 380084              +104 	dpop		a_x		. retrieve new TCB : calling TCB
00:0014E5 380085              +104 
  :                            105 
00:0014E6 500006              +106 	lx		6		. from application mantissa2
00:0014E7 1010C4              +107 	sx		RSAVE+a		. parameter for thread
00:0014E8 500007              +108 	lx		7		. from application mantissa3
00:0014E9 1010CE              +109 	sx		RSAVE+fp	. external stack pointer if needed
  :                            110 
00:0014EA 281002              +111 	sb		WALKUP		. caller TCB
00:0014EB 700080              +112 	tz		r_x		. but if caller was not initial thread
00:0014EC 001002              +113 	sr		WALKUP		. initial thread TCB
  :                            114 					. initial thread owns all threads
00:0014ED 301140              +115 	z		TAG		. clear optional thread name
00:0014EE 1C0041              +116 	outB		65		. caller TCB
00:0014EF 200004              +117 	sa		a		. result TCB ID in caller a
00:0014F0 B604F4              +118 	j		thread_final	. return to caller
  :                            119 
  :                            120 no_new_thread_descriptor
00:0014F1 600085              +121 	la		b_x		. descriptor TCB bank, not used
00:0014F2 3E0156              +122 	lcal		bank_free	. because thread descriptor not assigned
  :                            123 
  :                            124 no_new_thread
00:0014F3 300004              +125 	z		a		. result no TCB ID in caller a
  :                            126 
  :                            127 thread_final
  :                            128 	II_FREE
00:0014F4 7D0000              +129 	ir		0
  :                            824 
  :                            825 .	xbase_u	j		guard_ii	. a bit unnecessary?
  :                            826 
  :                            827: 	$include	xiobase
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 "$xbase"* $proc
  :                            41 	$ii_ringfest1	2 4 7 10
  :                            42 	la	4
  :                            43 	sabr	$xbase(1, 1)
  :                            44 	ir	0
  :                            45 	$end
  :                            46 
00:0014F5 CF07D5              +47 ?	 $do	XIOBASES,xbase(?+32-1)	$xbase	?+32-1
00:0014F6 58F002              +47 
00:0014F7 36B000              +47 
00:0014F8 A602A3              +47 
00:0014F9 600004              +47 
00:0014FA 340020              +47 
00:0014FB 7D0000              +47 
00:0014FC CF07D5              +47 
00:0014FD 58F002              +47 
00:0014FE 36B000              +47 
00:0014FF A602A3              +47 
00:001500 600004              +47 
00:001501 340021              +47 
00:001502 7D0000              +47 
00:001503 CF07D5              +47 
00:001504 58F002              +47 
00:001505 36B000              +47 
00:001506 A602A3              +47 
00:001507 600004              +47 
00:001508 340022              +47 
00:001509 7D0000              +47 
00:00150A CF07D5              +47 
00:00150B 58F002              +47 
00:00150C 36B000              +47 
00:00150D A602A3              +47 
00:00150E 600004              +47 
00:00150F 340023              +47 
00:001510 7D0000              +47 
  :                            828: 	$include	events
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 event_free_ii
00:001511 CF0004              +42 	dl	a			. you can't be running while event-wait-flagged
  :                            43 					. but if you are, get your own TCB first: inA 65
00:001512 34002C              +44 	sabr	BVOLATILE_I		. your're doing this to another thread usually
  :                            45 
00:001513 B807D7              +46 	xorB	(08FFFFFs)		. make an AND mask
00:001514 9807D8              +47 	orB	(0700000s)		. don't turn off delete or halted flags
  :                            48 					. but turn off timewait if requested
  :                            49 
00:001515 5087B4              +50 	lx	*(BVOLATILE_I*/12++TDESCRIPTOR-01000)
00:001516 055F00              +51 	on	see$1++(see$7*/MANAGER_BANKS)-see$7
  :                            52 
00:001517 A8A002              +53 	andB	2, x			. keep event flags not specified for clear
00:001518 28A002              +54 	sb	2, x
  :                            55 
00:001519 6007AF              +56 	la	(0C00001s)		. close the window
00:00151A 34002C              +57 	sabr	BVOLATILE_I
  :                            58 
  :                            59 					. just assume the thread did not
  :                            60 					. make this call for itself
  :                            61 					. there would be no need
00:00151B 600005              +62 	la	b
00:00151C A50001              +63 	and	XINT,,xi		. preemptive event ?
00:00151D C60521              +64 	jza	event_free_iix		. no it it's normal scheduling
00:00151E 60E001              +65 	la	1, fp			. interrupted application PSR
00:00151F A007D9              +66 	and	(070000)		. interrupts masked ?
00:001520 C602AB              +67 	jza	yield			. none at all, switch
  :                            68 					. this is more work if SMPs
  :                            69 	
  :                            70 event_free_iix
00:001521 7D0000              +71 	ir	0
  :                            72 
  :                            73 event_wait_ii
00:001522 CF0004              +74 	dl	a			. load flags, optional timeout up to 4.66 hours
00:001523 055F00              +75 	on	see$1++(see$7*/MANAGER_BANKS)-see$7
00:001524 501001              +76 	lx	TDESCRIPTOR
00:001525 90A002              +77 	or	2, x			. add new flags
00:001526 20A002              +78 	sa	2, x			. and save
00:001527 780004              +79 	tp	a			. was TIME_WAIT added? (application a)
00:001528 3E052A              +80 	lcal	event_time_limit	. set new wait time target
00:001529 B602AB              +81 	j	yield
  :                            82 
  :                            83 event_time_limit
00:00152A 650000              +84 	la	0,,xi			. zero extend the wait time
00:00152B D70096              +85 	da	DAYCLOCK$U		. add to make a target time
00:00152C C7A004              +86 	ds	4, x			. last 2 words thread descriptor
00:00152D 350000              +87 	lret	0
  :                            88 
  :                            829: 	$include	timer	. rta.gen/timer contains ISR TWAIT$
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 .	this is
  :                            42 
  :                            43 .		rta.gen/timer.msm
  :                            44 .		contains service call TWAIT$
  :                            45 
  :                            46 twait_ii
00:00152E CF0096              +47 	dl	DAYCLOCK$U
00:00152F D70004              +48 	da	a
00:001530 055F00              +49 	on	see$1++see$3++see$4++see$5++see$6++see$7
00:001531 501001              +50 	lx	TDESCRIPTOR
00:001532 C7A004              +51 	ds	4, x
00:001533 6007DA              +52 	la	(0800000s)	. TIME_WAIT -> schedule flags
00:001534 90A002              +53 	or	2, x
00:001535 20A002              +54 	sa	2, x
00:001536 B602AB              +55 	j	yield
  :                            56 
  :                            57 timer_check
00:001537 8F0082              +58 	qpush	x_x
00:001538 500084              +59 	lx	a_x
  :                            60 
  :                            61 	$if	0		. deadly. replaced
  :                            62 	la	2, a		. an asynchronously cancelled thread?
  :                            63 	and	(EXIT)
  :                            64 	jza	timer_cheq	. no, check for time wait expired
  :                            65 				. yes, manoeuvre the descriptor
  :                            66 				. out of the switch list
  :                            67 	la	0, x		. next to pop back from stack
  :                            68 	sa	2, sp		. as resulting actual
  :                            69 	sa	0, y		. and is new next of prior
  :                            70 	tp	1, a		. prior may become new last in its priority
  :                            71 	sy	3, a		. if so it's the new uplink of the stem
  :                            72 
  :                            73 	la	3, x
  :                            74 
  :                            75 	outA	65		. base the thread control block
  :                            76 	lcal	exit		. the exit routine expects it
  :                            77 
  :                            78 	j	timer_chex
  :                            79 
  :                            80 timer_cheq
  :                            81 	$endif
  :                            82 
00:001539 CF0096              +83 	dl	DAYCLOCK$U	. a time wait expired?
00:00153A DFA004              +84 	dan	4, x
00:00153B E6053D              +85 	jna	timer_chex
00:00153C 30A002              +86 	z	2, x		. the clock > my deadline
  :                            87 
  :                            88 timer_chex
00:00153D 870082              +89 	qpop	x_x
00:00153E 350000              +90 	lret	0
  :                            91 
  :                            830 
  :                            831 .	each handle integer corresponds to a 48-bit encoding
  :                            832 .	starting at handle(1)
  :                            833 
  :                            834 .	the index corresponds to a port number or to a
  :                            835 .	TCP connection and is the encoded offset of the
  :                            836 .	control block in the containing bank
  :                            837 
  :                            838 .	47	40 39		     24	 23				0
  :                            839 .	_________________________________________________________________
  :                            840 .	|hndl type|	 index 16 bits	| descriptor of containing bank	|
  :                            841 .	|_________|_____________________|_______________________________|
  :                            842 
  :                            843 handle_ii
00:00153F 502186              +844 	lx		free_handle
00:001540 700082              +845 	tnz		x_x
00:001541 B60543              +845 
00:001542 B60546              +846 	j		new_handle	
00:001543 58A001              +847 	ly		1, x			. chain link is 2nd word
00:001544 182186              +848 	sy		free_handle
00:001545 B6054B              +849 	j		encode_handle
  :                            850 
  :                            851 new_handle
00:001546 502187              +852 	lx		handles			. add a new 48-bit encoding
00:001547 4528FC              +853 	lr, xi		HANDLES_MAX		. at the list end
00:001548 F60554              +854 	jxge		no_handle		. if you can
00:001549 5CA002              +855 	ly		2,x,i			. increment handle obtain pointer
00:00154A 182187              +856 	sy		handles
  :                            857 
  :                            858 encode_handle
00:00154B 600004              +859 	la		a			. read application register a
00:00154C A007DB              +860 	and		(255*/16s)		. only allowed parameter = type
00:00154D 20A000              +861 	sa		0, x
00:00154E 30A001              +862 	z		1, x			. encoding complete
  :                            863 
00:00154F 85DE78              +864 	ax		-handle(1),,xi		. make handle # from encoding address
00:001550 600082              +865 	la		x_x
00:001551 060001              +866 	sar		1
00:001552 200004              +867 	sa		a			. write handle # to application register a
00:001553 7D0000              +868 	ir		0
  :                            869 
  :                            870 no_handle
00:001554 65FFFF              +871 	la, xi		-1			. write regrets to application register a
00:001555 200004              +872 	sa		a
00:001556 7D0000              +873 	ir		0
  :                            874 
  :                            875 free_handle_ii
00:001557 3E056B              +876 	lcal		check_handle
00:001558 E6056A              +877 	jna		not_a_handle
00:001559 30A000              +878 	z		0, x			. encode it off
00:00155A 30A001              +879 	z		1, x			. it shall be free chain last
  :                            880 						. unless it's already in the chain
00:00155B 600082              +881 	la		x_x			. address of encoding
00:00155C 4DFFFF              +882 	lk		-1,,xi			. as search argument
  :                            883 
00:00155D 502186              +884 	lx		free_handle
00:00155E 700082              +885 	tz		x_x
00:00155F B60562              +886 	j		free_handle_test
00:001560 202186              +887 	sa		free_handle
00:001561 7D0000              +888 	ir		0			. chain link is 2nd word
  :                            889 						. handle empty chain differently
  :                            890 free_handle_test
00:001562 AF0082              +891 	mtane		x_x
00:001563 B60565              +891 
00:001564 B6056A              +892 	j		handle_free_already
  :                            893 
00:001565 580082              +894 	ly		x_x			. previous <- this
00:001566 50A001              +895 	lx		1, x			. this <- next
  :                            896 
00:001567 700082              +897 	tz		x_x
00:001568 B60562              +898 	j		free_handle_test
00:001569 20B001              +899 	sa		1, y			. add to end of chain
  :                            900 
  :                            901 handle_free_already
  :                            902 not_a_handle
00:00156A 7D0000              +903 	ir		0
  :                            904 
  :                            905 check_handle
00:00156B 600004              +906 	la		a
00:00156C 552188              +907 	lx, xi		handle(1)
00:00156D 260001              +908 	sal		1
00:00156E 800084              +909 	ax		a_x
  :                            910 .	on		see$1		not any more. handles are in vector list
00:00156F 402187              +911 	lr		handles
00:001570 F60573              +912 	jxge		handle_out_of_range
00:001571 60A000              +913 	la		0, x
00:001572 350000              +914 	lret		0
  :                            915 handle_out_of_range
00:001573 65FFFF              +916 	la, xi		-1
00:001574 350000              +917 	lret		0
  :                            918 
  :                            919 read_handle_ii
00:001575 3E056B              +920 	lcal		check_handle
00:001576 200004              +921 	sa		a
00:001577 7D0000              +922 	ir		0
  :                            923 
  :                            924 file_handle_ii
00:001578 3E056B              +925 	lcal		check_handle
00:001579 E605A4              +926 	jna		usocket_nane
  :                            927 
00:00157A 4807DB              +928 	lk		(255*/16s)
00:00157B AF07DC              +929 	mtane		(AF_INET*/16s)	. more file types go here
00:00157C B6057E              +929 
00:00157D B60584              +930 	j		fhandle_add_pointer
00:00157E AF07DD              +931 	mtane		(FS$DEVICE$ARRAY*/16)
00:00157F B60581              +931 
00:001580 B60584              +932 	j		fhandle_add_pointer
  :                            933 
00:001581 65FFF7              +934 	la		-NO_FILE_TYPE,,xi
00:001582 200004              +935 	sa		a		. tell caller what happened
00:001583 7D0000              +936 	ir		0
  :                            937 
  :                            938 fhandle_add_pointer
00:001584 680002              +939 	lb		x		. application x -> file open descriptor
00:001585 28A001              +940 	sb		1, x
00:001586 7D0000              +941 	ir		0
  :                            942 
  :                            943 usocket_c_ii
00:001587 3E056B              +944 	lcal		check_handle
00:001588 E605A4              +945 	jna		usocket_nane
  :                            946 					. a_a = 1st handle word, x_x -> encoding tuple
00:001589 4807DB              +947 	lk		(255*/16s)
00:00158A AF07DE              +948 	mta		(IPPROTO_TCP*/16s) . encoding must be TCP handle bound or not
00:00158B B605A4              +949 	j		usocket_nane
00:00158C 680002              +950 	lb		x		. application x -> TCB
  :                            951 					. value policed in kernel call routines or trouble
00:00158D A807DF              +952 	andB		(0FF8)
00:00158E A007E0              +953 	and		(00FFFF)
00:00158F 9007E1              +954 	or		(TCP_TCB*/16s)
00:001590 B6059F              +955 	j		usocket
  :                            956 
  :                            957 usocket_ii
00:001591 3E056B              +958 	lcal		check_handle
00:001592 E605A4              +959 	jna		usocket_nane
  :                            960 
00:001593 680005              +961 	lb		b		. port number in application b
00:001594 A807E0              +962 	andB		(00FFFF)	. value policed in kernel call routines
  :                            963 					. or trouble
00:001595 4DFFFF              +964 	lk		-1,,xi		. handle must be a socket type
00:001596 AF07E2              +965 	mtane		(IPPROTO_UDP*/16s)
00:001597 B60599              +965 
00:001598 B6059F              +966 	j		usocket
00:001599 AF07DE              +967 	mtane		(IPPROTO_TCP*/16s)
00:00159A B6059C              +967 
00:00159B B6059F              +968 	j		usocket
  :                            969 
  :                            970 usocket_no_protocol
00:00159C 65FFD6              +971 	la		-NO_PROTOCOL,,xi
00:00159D 200004              +972 	sa		a
00:00159E 7D0000              +973 	ir		0
  :                            974 
00:00159F 900085              +975 usocket	or		b_x
00:0015A0 054000              +976 	on		see$1		. look in the thread control block
00:0015A1 68106F              +977 	lb		ABT+BSOCKET	. the connections block must be based there
00:0015A2 C7A000              +978 	ds		0, x
00:0015A3 7D0000              +979 	ir		0
  :                            980 
  :                            981 usocket_nane
00:0015A4 65FFEA              +982 	la		-NO_HANDLE,,xi
00:0015A5 200004              +983 	sa		a
00:0015A6 7D0000              +984 	ir		0
  :                            985 
  :                            986 read_socket_ii
00:0015A7 3E056B              +987 	lcal		check_handle
00:0015A8 E605AC              +988 	jna		socket_out_of_range
  :                            989 
00:0015A9 CFA000              +990 	dl		0, x
00:0015AA C70004              +991 	ds		a
00:0015AB 7D0000              +992 	ir		0		. return the whole 48-bit encoding
  :                            993 					. and let application code verify it
  :                            994 
  :                            995 
  :                            996 socket_out_of_range
00:0015AC 300004              +997 	z		a
00:0015AD 7D0000              +998 	ir		0
  :                            999 				
  :                            1000 
  :                            1001 
  :                            1002 .	these are here to read or write
  :                            1003 .	a pointer in the kernel vector bank
  :                            1004 
  :                            1005 .	from routines which might be called
  :                            1006 .	from either a kernel task or an
  :                            1007 .	application
  :                            1008 
  :                            1009 .	see$2 makes the kernel vector bank
  :                            1010 .	visible instead of the application
  :                            1011 .	vector bank
  :                            1012 
  :                            1013 .	on return from ISR, see$2 is on or off
  :                            1014 .	whichever it was before
  :                            1015 
  :                            1016 
  :                            1017 xvector_in_range
00:0015AE 500002              +1018 	lx		x
00:0015AF 452000              +1019 	lr		02000,,xi
00:0015B0 F605B2              +1020 	jxge		xvector_low_threshold	. test 1 passed
  :                            1021 xvector_outwith_range
00:0015B1 350000              +1022 	lret		0
  :                            1023 xvector_low_threshold
00:0015B2 453000              +1024 	lr		03000,,xi
00:0015B3 F605B1              +1025 	jxge		xvector_outwith_range	. test 2 not passed
00:0015B4 052000              +1026 	on		see$2			. kernel vector list
00:0015B5 350001              +1027 	lret		1			. test 2 passed
  :                            1028 
  :                            1029 
  :                            1030 read_xvector_ii
00:0015B6 300004              +1031 	z		a			. default answer no pointer
00:0015B7 3E05AE              +1032 	lcal		xvector_in_range
00:0015B8 7D0000              +1033 	ir		0
00:0015B9 60A000              +1034 	la		0, x
00:0015BA 200004              +1035 	sa		a
00:0015BB 7D0000              +1036 	ir		0
  :                            1037 
  :                            1038 write_avector_ii
00:0015BC CF07E3              +1039 	$ii_ringfest1	7
00:0015BD 58F002              +1039 
00:0015BE 36B000              +1039 
00:0015BF A602A3              +1039 
00:0015C0 3E05AE              +1040 	lcal		xvector_in_range
00:0015C1 7D0000              +1041 	ir		0			. out of range
00:0015C2 0D2000              +1042 	off		see$2			. application vector write
00:0015C3 600004              +1043 	la		a
00:0015C4 20A000              +1044 	sa		0, x
00:0015C5 7D0000              +1045 	ir		0
  :                            1046 
  :                            1047 write_xvector_ii
00:0015C6 CF07E5              +1048 	$ii_ringfest1	2 5
00:0015C7 58F002              +1048 
00:0015C8 36B000              +1048 
00:0015C9 A602A3              +1048 
00:0015CA 3E05AE              +1049 	lcal		xvector_in_range
  :                            1050 
00:0015CB 7D0000              +1051 	ir		0
00:0015CC 600004              +1052 	la		a
00:0015CD 20A000              +1053 	sa		0, x
00:0015CE 7D0000              +1054 	ir		0
  :                            1055 
  :                            1056 assign_xvector_ii
00:0015CF CF07E7              +1057 	$ii_ringfest1	2 7
00:0015D0 58F002              +1057 
00:0015D1 36B000              +1057 
00:0015D2 A602A3              +1057 
00:0015D3 600004              +1058 	la		a			. read request words
00:0015D4 300004              +1059 	z		a			. default answer no pointer
00:0015D5 3E05AE              +1060 	lcal		xvector_in_range
00:0015D6 7D0000              +1061 	ir		0
  :                            1062 .	la		a
00:0015D7 F80082              +1063 	push		x_x
00:0015D8 3E01D2              +1064 	lcal		bank
00:0015D9 380082              +1065 	pop		x_x
00:0015DA 20A000              +1066 	sa		0, x			. write storage block index to vector
00:0015DB 200004              +1067 	sa		a			. report it to application
00:0015DC 7D0000              +1068 	ir		0			. but not in application memory estate list
  :                            1069 
  :                            1070 kernel_b1_ii_1
00:0015DD CF07E9              +1071 	$ii_ringfest1	2 7 5 4 10
00:0015DE 58F002              +1071 
00:0015DF 36B000              +1071 
00:0015E0 A602A3              +1071 
  :                            1072 
00:0015E1 052000              +1073 	on		see$2
00:0015E2 602073              +1074 	la		VECTOR_B1(1)
00:0015E3 140001              +1075 	outA		1
00:0015E4 7D0000              +1076 	ir		0
  :                            1077 
  :                            1078 kernel_b1_ii
00:0015E5 CF07E7              +1079 	$ii_ringfest1	2 7
00:0015E6 58F002              +1079 
00:0015E7 36B000              +1079 
00:0015E8 A602A3              +1079 
  :                            1080 
00:0015E9 052000              +1081 	on		see$2
00:0015EA 608004              +1082 	la		*a	. read the bank sought via user A register
00:0015EB 140001              +1083 	outA		1
00:0015EC 7D0000              +1084 	ir		0
  :                            1085 
00:0015ED 054000              +1086 b1_ii	on		see$1	. ++see$2
00:0015EE 609005              +1087 	la		*B1_P
00:0015EF 140001              +1088 	outA		1
00:0015F0 7D0000              +1089 	ir		0
  :                            1090 
  :                            1091 dayclock_w_ii
00:0015F1 CF07EB              +1092 	$ii_ringfest1	2
00:0015F2 58F002              +1092 
00:0015F3 36B000              +1092 
00:0015F4 A602A3              +1092 
  :                            1093 
00:0015F5 CF0004              +1094 	dl		a
00:0015F6 C70096              +1095 	ds		DAYCLOCK$U
00:0015F7 7D0000              +1096 	ir		0
  :                            1097 
  :                            1098 switch_fp_guard_ii
00:0015F8 F80093              +1099 	push		fp$guard
00:0015F9 F80004              +1100 	push		a
00:0015FA 380093              +1101 	pop		fp$guard
00:0015FB 380004              +1102 	pop		a
00:0015FC 7D0000              +1103 	ir		0
  :                            1104 
  :                            1105 fpxpo_read_clear_ii
00:0015FD 054000              +1106 	on		see$1		. look into the thread control block
00:0015FE 78103A              +1107 	tn		FP_XPO
00:0015FF B60601              +1107 
00:001600 7D0001              +1108 	ir		1		. indicate clear
00:001601 30103A              +1109 	z		FP_XPO		. clear underflow / overflow flag
00:001602 7D0000              +1110 	ir		0		. indicate not clear until here
  :                            1111 
  :                            1112 xint_bind_ii
00:001603 056000              +1113 	on		see$1++see$2	. kernel vector list
00:001604 500004              +1114 	lx		a		. read external interrupt number
00:001605 780082              +1115 	tp		x_x		. minus means free it
00:001606 B6062E              +1116 	j		xint_free	
00:001607 4500C1              +1117 	lr		X$INTERRUPTS+1,,xi
00:001608 F60610              +1118 	jxge		xint_out	. interrupt source number too high
00:001609 650000              +1119 	la		0,,xi		. negative displacement from vector list end
00:00160A D00004              +1120 	ana		a		. must be [  1 .. X$INTERRUPTS  ]
00:00160B A60610              +1121 	jpa		xint_out	. must be [ -1 .. -X$INTERRUPTS ]
00:00160C 553000              +1122 	lx		03000,,xi
00:00160D 800084              +1123 	ax		a_x
00:00160E 040041              +1124 	inA		65		. thread control block
00:00160F 20A000              +1125 	sa		0, x		. claim this interrupt source
00:001610 7D0000              +1126 xint_out	ir	0
  :                            1127 
  :                            1128 
00:001611 054000              +1129 itable_ii	on	see$1
00:001612 301184              +1130 	z		XINTT+4		. turn 1st entry off
00:001613 4F07ED              +1131 	ql		(0, 4, 4, 4+XINT_TABLE*2q)
00:001614 471180              +1132 	qs		XINTT		. unlocked, r/w pointers initial, wrap limit
00:001615 160030              +1133 	dsr		48
00:001616 C70086              +1134 	ds		6+128
00:001617 4500FE              +1135 	lr		XINT_TABLE/2-1,,xi
00:001618 551184              +1136 	lx		XINTT+4,,xi
  :                            1137 
  :                            1138 itable_write
00:001619 47A000              +1139 	qs		0, x
00:00161A 850004              +1140 	ax		4,,xi
00:00161B 1E0619              +1141 	jdr		itable_write
00:00161C 7D0000              +1142 	ir		0
  :                            1143 
  :                            1144 affinity_ii
  :                            1145 
  :                            1146 	$if		TDESCRIPTOR_WORDS>6	. = affinity supported
00:00161D 055F00              +1147 	on		see$all--see$2
00:00161E 600004              +1148 	la		a
00:00161F 681001              +1149 	lb		TDESCRIPTOR
00:001620 20D006              +1150 	sa		6, b
  :                            1151 	$endif
  :                            1152 
00:001621 7D0000              +1153 	ir		0
  :                            1154 
  :                            1155 zeta_ii	II_LOCK
00:001622 600004              +1156 	la	a
00:001623 3E0649              +1157 	lcal	thread_actual?
00:001624 B6062B              +1158 	j	zeta_ii_no_op		. no thread
  :                            1159 					. thread_actual? opens TCB in window
  :                            1160 
00:001625 6087F1              +1161 	la	*(BVOLATILE_I*/12++TAG-01000)	. 1st word of thread name
00:001626 060010              +1162 	sar	$word-$byte		. protected?
00:001627 C5FFD6              +1163 	aa	-'*',,xi
00:001628 C6062B              +1164 	jza	zeta_ii_no_op		. protected, don't force exit
  :                            1165 
00:001629 6007F2              +1166 	la	(TIME_WAIT++EXIT:s)	. force exit
00:00162A 20A002              +1167 	sa	2, x
  :                            1168 
  :                            1169 zeta_ii_user_refp			. get-out point for fault on [ sa 2,x ]
  :                            1170 zeta_ii_no_op				. get-out point for no thread / protected
00:00162B 6007AF              +1171 	la	(0C00001s)		. thread_actual? opens window BVOLATILE_I
00:00162C 34002C              +1172 	sabr	BVOLATILE_I		. on target TCB, but does not close window
  :                            1173 	II_FREE
00:00162D 7D0000              +1174 	ir	0
  :                            1175 
  :                            1176 	$if	0
  :                            1177 
  :                            1178 send_alert_ii
  :                            1179 	inA	CORE_SOCKET$
  :                            1180 	lx	core2core_alert,,xi
  :                            1181 	ax	a_x
  :                            1182 	on	see$3
  :                            1183 	dl	a
  :                            1184 	sa	0, x
  :                            1185 	outB	MCAST_TO$
  :                            1186 	ir	0
  :                            1187 
  :                            1188 	$endif
  :                            1189 
  :                            1190 xint_free
00:00162E 853000              +1191 	ax		03000,,xi	. negative displacement from here
00:00162F 453000              +1192 	lr		03000,,xi	. must not be as high as this
00:001630 F60633              +1193 	jxge		xint_free_out
00:001631 452F40              +1194 	lr		X_INTERRUPT(X$INTERRUPTS),,xi	. or any lower than this
00:001632 F60634              +1195 	jxge		xint_free_in
00:001633 7D0000              +1196 xint_free_out	ir	0
00:001634 30A000              +1197 xint_free_in	z	0, x		. free this external interrupt
00:001635 7D0000              +1198 	ir		0		. whoever had claimed it 
  :                            1199 
  :                            1200 net2sym_ii				. first address the destination
00:001636 600004              +1201 	la		a		. primary threadcb is in application a
00:001637 34002C              +1202 	sabr		BVOLATILE_I	. that window is treated as volatile
00:001638 6087F3              +1203 	la		*(BVOLATILE_I*/12++ABT-01000+2) . vector window of the target thread
00:001639 34002C              +1204 	sabr		BVOLATILE_I
  :                            1205 					. 6:12 address of transmission CB is in
00:00163A 600002              +1206 	la		x		. application x
00:00163B 6D0000              +1207 	lb		0,,xi
00:00163C 76000C              +1208 	drl		12		. base tag in b, offset in a
00:00163D 06000F              +1209 	sar		12+3		. isolate 9 bits
00:00163E 260003              +1210 	sal		3		. multiplied by 8
00:00163F 9007E1              +1211 	or		(TCP_TCB*/16s)	. transmission CB is exactly 24 words
00:001640 054000              +1212 	on		see$1		. read your own ABT+BSOCKET
00:001641 68106F              +1213 	lb		ABT+BSOCKET	. read the bank ID of connection CBs
  :                            1214 
00:001642 5007F4              +1215 	lx		(BVOLATILE_I*/12)
00:001643 C7A188              +1216 	ds		handle(1)**0FFF,x	. stdin
00:001644 C7A18A              +1217 	ds		handle(2)**0FFF,x	. stdout
00:001645 C7A18C              +1218 	ds		handle(3)**0FFF,x	. stderr. process start should have reserved thse
  :                            1219 
00:001646 6007AF              +1220 	la		(0C00001s)		. close the gate
00:001647 34002C              +1221 	sabr		BVOLATILE_I
00:001648 7D0000              +1222 	ir		0
  :                            1223 
  :                            1224 thread_actual?			. subroutine called from ISR
00:001649 34002C              +1225 	sabr	BVOLATILE_I	. thread control block index must be in interrupt a
  :                            1226 				. ISRs calling here either directly or over thread_current?
  :                            1227 				. must themselves close address space window BVOLATILE_I
  :                            1228 				. before return
  :                            1229 
00:00164A 055F00              +1230 	on	see$1++see$all**(see$7*/MANAGER_BANKS)-1
  :                            1231 
00:00164B 68106C              +1232 	lb	ABT+BVOLATILE_I		. did the requested block get into window
00:00164C B807AF              +1233 	xorB	(0C00001s)		. BVOLATILE_I ?
00:00164D CE0657              +1234 	jzb	thread_not_actual	. no storage in window, don't try reading
  :                            1235 
00:00164E 5087B4              +1236 	lx	*(BVOLATILE_I*/12++TDESCRIPTOR-01000)
  :                            1237 
00:00164F 403049              +1238 	lr	next_tdescriptor_sp	. this changes
00:001650 F60652              +1239 	jxge	threads_threshold
00:001651 B60657              +1240 	j	thread_not_actual
  :                            1241 
  :                            1242 threads_threshold
00:001652 40304A              +1243 	lr	tdescriptor_high_index	. this is fixed
  :                            1244 				. descriptor stack is dynamic but check possible ranges
  :                            1245 				. or following tests could crash within ISR = inconvenient
  :                            1246 
00:001653 F60657              +1247 	jxge	thread_not_actual . thread control block does not correspond
  :                            1248 				. to a thread descriptor
  :                            1249 	
00:001654 B0A003              +1250 	xor	3, x		. does descriptor point to this thread CB?
00:001655 D60657              +1251 	jnza	thread_not_actual
  :                            1252 
00:001656 350001              +1253 	lret	1		. thread seems real
  :                            1254 
  :                            1255 thread_not_actual
00:001657 350000              +1256 	lret	0
  :                            1257 
  :                            1258 
  :                            1259 thread_current?
00:001658 3E0649              +1260 	lcal	thread_actual?
00:001659 350000              +1261 	lret	0		. no thread
  :                            1262 
00:00165A 60A002              +1263 	la	2, x
00:00165B A007F5              +1264 	and	(TRAP++EXIT)	. and is the thread running?
00:00165C D6065E              +1265 	jnza	thread_stopped
  :                            1266 
00:00165D 350001              +1267 	lret	1		. thread seems OK
  :                            1268 
  :                            1269 thread_stopped
00:00165E 350000              +1270 	lret	0		. thread seems gone
  :                            1271 
  :                            1272 thread_state_ii			. general purpose ISR is thread [application a] running?
00:00165F 600004              +1273 	la	a
00:001660 3E0658              +1274 	lcal	thread_current?
00:001661 B60665              +1275 	j	thread_state_stopped	. no
  :                            1276 
00:001662 6007AF              +1277 	la	(0C00001s)	. thread_current? opens window BVOLATILE_I
00:001663 34002C              +1278 	sabr	BVOLATILE_I	. on TCB but does not close the window
00:001664 7D0001              +1279 	ir	1
  :                            1280 
  :                            1281 thread_state_stopped
00:001665 6007AF              +1282 	la	(0C00001s)	. thread_current? opens window BVOLATILE_I
00:001666 34002C              +1283 	sabr	BVOLATILE_I	. on TCB but does not close the window
00:001667 7D0000              +1284 	ir	0
  :                            1285 
  :                            1286 storage_block_idxa_ii		. return the storage block index at window [a]
00:001668 680004              +1287 	lb	a
00:001669 054000              +1288 	on	see$1		. address the thread control block
00:00166A AD003F              +1289 	andB	63,,xi
00:00166B 9D1040              +1290 	orB	ABT,,xi
00:00166C 60D000              +1291 	la	0, b
00:00166D 200004              +1292 	sa	a
00:00166E 7D0000              +1293 	ir	0
  :                            1294 
  :                            1295 storage_block_idxb_ii		. return the storage block index at window [b]
00:00166F 680005              +1296 	lb	b
00:001670 054000              +1297 	on	see$1		. address the thread control block
00:001671 AD003F              +1298 	andB	63,,xi
00:001672 9D1040              +1299 	orB	ABT,,xi
00:001673 60D000              +1300 	la	0, b
00:001674 200005              +1301 	sa	b
00:001675 7D0000              +1302 	ir	0
  :                            1303 
  :                            1304 cache_netb* $proc
  :                            1305 	ql	ABT+48+4*?-4
  :                            1306 	qs	$NETB+4*?-4
  :                            1307 	$end
  :                            1308 
  :                            1309 cache_standard_netbuf_ii
00:001676 CF07EB              +1310 	$ii_ringfest1	2	. none but page 2 may make this service call
00:001677 58F002              +1310 
00:001678 36B000              +1310 
00:001679 A602A3              +1310 
  :                            1311 
00:00167A 056000              +1312 	on	see$1++see$2
00:00167B 4F1070              +1313 ?	$do	4,	cache_netb
00:00167C 472900              +1313 
00:00167D 4F1074              +1313 
00:00167E 472904              +1313 
00:00167F 4F1078              +1313 
00:001680 472908              +1313 
00:001681 4F107C              +1313 
00:001682 47290C              +1313 
00:001683 7D0000              +1314 	ir	0
  :                            1315 
  :                            1316 retrieve_netb* $proc
  :                            1317 	la	$NETB+?-1
  :                            1318 	sabr	48+?-1
  :                            1319 	$end
  :                            1320 
  :                            1321 base_standard_netbuf_ii
00:001684 CF07E7              +1322 	$ii_ringfest1	2 7
00:001685 58F002              +1322 
00:001686 36B000              +1322 
00:001687 A602A3              +1322 
  :                            1323 
00:001688 052000              +1324 	on	see$2
00:001689 602900              +1325 ?	$do	16,	retrieve_netb
00:00168A 340030              +1325 
00:00168B 602901              +1325 
00:00168C 340031              +1325 
00:00168D 602902              +1325 
00:00168E 340032              +1325 
00:00168F 602903              +1325 
00:001690 340033              +1325 
00:001691 602904              +1325 
00:001692 340034              +1325 
00:001693 602905              +1325 
00:001694 340035              +1325 
00:001695 602906              +1325 
00:001696 340036              +1325 
00:001697 602907              +1325 
00:001698 340037              +1325 
00:001699 602908              +1325 
00:00169A 340038              +1325 
00:00169B 602909              +1325 
00:00169C 340039              +1325 
00:00169D 60290A              +1325 
00:00169E 34003A              +1325 
00:00169F 60290B              +1325 
00:0016A0 34003B              +1325 
00:0016A1 60290C              +1325 
00:0016A2 34003C              +1325 
00:0016A3 60290D              +1325 
00:0016A4 34003D              +1325 
00:0016A5 60290E              +1325 
00:0016A6 34003E              +1325 
00:0016A7 60290F              +1325 
00:0016A8 34003F              +1325 
00:0016A9 7D0000              +1326 	ir	0
  :                            1327 
  :                            1328 unbase_deviceb_ii
00:0016AA 6007AF              +1329 	la	(0C00001s)
00:0016AB 340020              +1330 	sabr	32
00:0016AC 7D0000              +1331 	ir	0
  :                            1332 
  :                            1333 unbase_socketb_ii
00:0016AD 6007AF              +1334 	la	(0C00001s)
00:0016AE 34002F              +1335 	sabr	BSOCKET
00:0016AF 7D0000              +1336 	ir	0
  :                            1337 
  :                            1338 unbase_standard_netbuf_ii
00:0016B0 6007AF              +1339 	la	(0C00001s)
00:0016B1 340030              +1340 ?	$do	16,	sabr	48+?-1
00:0016B2 340031              +1340 
00:0016B3 340032              +1340 
00:0016B4 340033              +1340 
00:0016B5 340034              +1340 
00:0016B6 340035              +1340 
00:0016B7 340036              +1340 
00:0016B8 340037              +1340 
00:0016B9 340038              +1340 
00:0016BA 340039              +1340 
00:0016BB 34003A              +1340 
00:0016BC 34003B              +1340 
00:0016BD 34003C              +1340 
00:0016BE 34003D              +1340 
00:0016BF 34003E              +1340 
00:0016C0 34003F              +1340 
00:0016C1 7D0000              +1341 	ir	0
  :                            1342 
00:0016C2 600004              +1343 tag_ii	la	a			. optional thread name
00:0016C3 D606C5              +1344 	jnza	$+2			. this thread if no other
00:0016C4 040041              +1345 	inA	65
00:0016C5 34002C              +1346 	sabr	BVOLATILE_I
  :                            1347 
00:0016C6 4D00FF              +1348 	lk	255,,xi
00:0016C7 580005              +1349 	ly	b			. name string must be in caller address space
00:0016C8 5007F1              +1350 	lx	(BVOLATILE_I*/12++TAG-4096)
00:0016C9 44A024              +1351 	lr	36, x, i		. restrict to 100 characters or so
  :                            1352 
00:0016CA F606D1              +1353 tag_iiw	jxge	tag_iiz
00:0016CB 60B000              +1354 	la	0, y
  :                            1355 
  :                            1356 tag_ii_user_refp
00:0016CC 20A000              +1357 	sa	0, x
00:0016CD 850001              +1358 	ax	1,,xi
00:0016CE 8D0001              +1359 	ay	1,,xi
00:0016CF AF07A0              +1360 	mta	(0)			. was at least 1 low-order octet of that word zero?
00:0016D0 B606CA              +1361 	j	tag_iiw			. not yet
  :                            1362 
00:0016D1 6007AF              +1363 tag_iiz	la	(0C00001s)		. prevent accidental access
00:0016D2 34002C              +1364 	sabr	BVOLATILE_I
00:0016D3 7D0000              +1365 	ir	0
  :                            1366 
  :                            1367 
  :                            1368 file_open_frame_ii
00:0016D4 CF07E3              +1369 	$ii_ringfest1	7		. fs routines only to add to openfile blocks heap
00:0016D5 58F002              +1369 
00:0016D6 36B000              +1369 
00:0016D7 A602A3              +1369 
  :                            1370 
00:0016D8 500004              +1371 	lx	a
00:0016D9 0D2000              +1372 	off	see$2
00:0016DA 70207D              +1373 	tz	FILE_OPEN_HEAPU
00:0016DB 10207D              +1374 	sx	FILE_OPEN_HEAPU
00:0016DC 7D0000              +1375 	ir	0
  :                            1376 
  :                            1377 files_open_heap_ii			. necessarily application callable
00:0016DD 500004              +1378 	lx	a
00:0016DE 0D2000              +1379 	off	see$2
00:0016DF 3E06E1              +1380 	lcal	file_open_heap
00:0016E0 7D0000              +1381 	ir	0
  :                            1382 
  :                            1383 file_open_heap
00:0016E1 10207C              +1384 	sx	FILE_OPEN_HEAP
00:0016E2 10207D              +1385 	sx	FILE_OPEN_HEAPU
00:0016E3 350000              +1386 	lret	0
  :                            1387 
  :                            1388 restart_ei
00:0016E4 600004              +1389 	la	a			. read application a into interrupt a
00:0016E5 054000              +1390 	on	see$1			. look in app TCB
00:0016E6 201008              +1391 	sa	ERROR_RESTART
00:0016E7 7D0000              +1392 	ir	0			. that's it done
  :                            1393 
  :                            1394 one_time_save_ii			. frame save for IP RX
00:0016E8 50000F              +1395 	lx	sp
00:0016E9 100091              +1396 	sx	ONE_TIME_SAVE1
00:0016EA 7D0000              +1397 	ir	0
  :                            1398 
00:0016EB CF07E5              +1399 smp_ii	$ii_ringfest1	2 5
00:0016EC 58F002              +1399 
00:0016ED 36B000              +1399 
00:0016EE A602A3              +1399 
00:0016EF 052000              +1400 	on	see$2
00:0016F0 6028FD              +1401 	la	cores_active
00:0016F1 A00001              +1402 	and	k			. cores mask in application k. Any already active?
00:0016F2 B00001              +1403 	xor	k			. just the cores not yet active thanks
00:0016F3 480084              +1404 	lk	a_x
00:0016F4 9028FD              +1405 	or	cores_active		. add to so-far string
00:0016F5 2028FD              +1406 	sa	cores_active
00:0016F6 040042              +1407 	inA	66			. kernel vector table
00:0016F7 9007DA              +1408 	or	(SMP_ACTIVATE$:s)
00:0016F8 14004F              +1409 	outA	MCAST_TO$
00:0016F9 7D0000              +1410 	ir	0
  :                            1411 
  :                            1412 irespite
00:0016FA CF07BE              +1413 	dl	(CHILLDOWN, REST_GRANULE:d)
00:0016FB 1C0067              +1414 	outB	chill$down
00:0016FC 140066              +1415 	outA	INDICATION$
00:0016FD 350000              +1416 	lret	0
  :                            1417 
  :                            1418 energy_ii
00:0016FE CF07EB              +1419 	$ii_ringfest1	2
00:0016FF 58F002              +1419 
00:001700 36B000              +1419 
00:001701 A602A3              +1419 
  :                            1420 
00:001702 051000              +1421 	on	see$3
00:001703 600004              +1422 	la	a
00:001704 203002              +1423 	sa	energy$advise
  :                            1424 	
00:001705 7D0000              +1425 	ir	0
  :                            1426 
  :                            1427: 	$include	../teraframe/device_a
  :                            1 teraframe	$tree
  :                            2 
  :                            3 $(67::,y)
  :                            4 device_k	$array_key
  :                            5 
  :                            6 $(67::,y)
  :                            7 canister	$array_index
  :                            8 
  :                            9 $(0)
  :                            10 
  :                            11 array_device_claim_ii
00:001706 051000              +12 	on	see$3
00:001707 600004              +13 	la	a			. pages desired - 1 in application a
00:001708 A007F6              +14 	and	(03FFFC0)		. banks sought - 1
00:001709 200087              +15 	sa	7+128			
  :                            16 
00:00170A 5D30F0              +17 	ly	device_key(63),,xi	. highest device access descriptor
00:00170B 6D003F              +18 	lb	63,,xi			. highest port number
00:00170C 4807B3              +19 	lk	(0C00000:s)
  :                            20 
00:00170D 04D080              +21 claim?	inA	128, b			. device port
00:00170E AF07DA              +22 	mta	(0800000:s)		. memory array device?
00:00170F B60742              +23 	j	claim_next		. no
00:001710 07B000              +24 	ts	device_k:ts_cell
00:001711 B60710              +25 	j	$-1
  :                            26 
00:001712 180086              +27 	sy	6+128			. save pointer to key
00:001713 70B001              +28 	tz	device_k:index
00:001714 B60726              +29 	j	index_constructed
  :                            30 	
00:001715 A007F6              +31 	and	(03FFFC0)		. bank high index from device port
00:001716 90079F              +32 	or	(0400000)		. device flag
00:001717 900085              +33 	or	b_x			. device index
00:001718 20B001              +34 	sa	device_k:index		. configured
  :                            35 
00:001719 34002C              +36 	sabr	BVOLATILE_I
00:00171A 5807F7              +37 	ly	(BVOLATILE_I*/18:s)	. canister start address
  :                            38 
00:00171B 4007F8              +39 	lr	(__TERA_BANKS-1)
00:00171C 54B001              +40 	lx	canister:free(1),,i
  :                            41 
00:00171D 30A000              +42 zchain	z	0,x
00:00171E 850001              +43 	ax	1,,xi
00:00171F 1E071D              +44 	jdr	zchain
  :                            45 					. currently based highest device bank
00:001720 98079F              +46 	orB	(0400000)		. 0400000++device = 1st bank of device
00:001721 650000              +47 	la	0,,xi
00:001722 5007F9              +48 	lx	(BVOLATILE_I*/18++262142:s)	. -> 1st descriptor at top of canister
00:001723 C7A000              +49 	ds	0, x
00:001724 10B000              +50 	sx	canister:next		. 1st available for assignment
00:001725 580086              +51 	ly	6+128
  :                            52 
  :                            53 index_constructed
00:001726 60B001              +54 	la	device_k:index		. bank name of canister
00:001727 44C040              +55 	lr	64, a, i		. and bank limit + 1 for assigment
00:001728 34002C              +56 	sabr	BVOLATILE_I
00:001729 5807F7              +57 	ly	(BVOLATILE_I*/18:s)	. canister start address
  :                            58 
00:00172A 54B000              +59 	lx	canister:free(1)-1,,i	. index into free chains. ie lx y
00:00172B 600087              +60 	la	7+128			. banks desired - 1 from application a
00:00172C 060006              +61 	sar	6
00:00172D 800084              +62 	ax	a_x
  :                            63 
00:00172E 68A000              +64 	lb	0, x			. read chain head
00:00172F CE0734              +65 	jzb	claim_new		. if none ready for use
  :                            66 
00:001730 F8D000              +67 	push	0, b			. next pointer
00:001731 38A000              +68 	pop	0, x			. to freelist head
00:001732 60D001              +69 	la	1, b
00:001733 B6073D              +70 	j	return_buffer
  :                            71 
  :                            72 claim_new
00:001734 68B000              +73 	lb	canister:next		. result container
00:001735 60D001              +74 	la	1, b			. result
00:001736 54C040              +75 	lx	64, a, i		. construct new next bank name
00:001737 800087              +76 	ax	7+128			. banks required */ 6
00:001738 F60740              +77 	jxge	key_free		. higher than control tables
  :                            78 
00:001739 580085              +79 	ly	b_x
00:00173A 8DFFFE              +80 	ay	-2,,xi			. new next descriptor
00:00173B 1887F7              +81 	sy	*(BVOLATILE_I*/18++canister:next:s)
00:00173C 10B001              +82 	sx	1, y			. new next bank name
  :                            83 
  :                            84 return_buffer
00:00173D 580086              +85 	ly	128+6			. reload device key address
00:00173E 30B000              +86 	z	device_k:ts_cell	. free device
  :                            87 
00:00173F B60750              +88 	j	deliver
  :                            89 
  :                            90 key_free
00:001740 580086              +91 	ly	128+6			. reload device key address
00:001741 30B000              +92 	z	device_k:ts_cell
  :                            93 
  :                            94 claim_next
00:001742 8DFFFE              +95 	ay	-2,,xi
00:001743 680080              +96 	lb	r_x			. copy limit encoding from r
00:001744 AD003F              +97 	andB	63,,xi			. and isolate device index in it
00:001745 1F0085              +98 	dec	b_x
00:001746 453078              +99 	lr	device_key(3),,xi
00:001747 FE070D              +100 	jyge	claim?
  :                            101 
  :                            102 					. high index page request
00:001748 600087              +103 	la	7+128
00:001749 3E0203              +104 	lcal	array_high_ix
00:00174A C60750              +105 	jza	deliver
  :                            106 
00:00174B 054000              +107 	on	see$1			. last choice, preference was array devices
00:00174C F81004              +108 	push	BANK_CHAIN
00:00174D 38D000              +109 	pop	0, b
00:00174E 281004              +110 	sb	BANK_CHAIN		. add to thread memory estate chain
00:00174F 90079F              +111 	or	(0400000)		. it's big
  :                            112 
00:001750 200004              +113 deliver	sa	a
  :                            114 
00:001751 6007AF              +115 	la	(0C00001:s)
00:001752 34002C              +116 	sabr	BVOLATILE_I
00:001753 7D0000              +117 	ir	0	
  :                            118 
  :                            119 array_device_free			. not an _ii .. you get here from BANK$FREE
00:001754 051000              +120 	on	see$3
00:001755 600004              +121 	la	a			. from application a
00:001756 680004              +122 	lb	a			. read bank name
  :                            123 
00:001757 AD003F              +124 	andB	63,,xi
  :                            125 
00:001758 5D3072              +126 	ly	device_key(1)-2,,xi
00:001759 2E0001              +127 	sbl	1			. 2 word descriptor
00:00175A 880085              +128 	ay	b_x
  :                            129 
00:00175B 4807FA              +130 	lk	(0400000++63)		. match the device number
00:00175C AFB001              +131 	mta	1, y
00:00175D B6079C              +132 	j	bad_descriptor
  :                            133 
00:00175E 4807F6              +134 	lk	(03FFFC0)
00:00175F AFB001              +135 	mtane	1, y			. cannot free the control page
00:001760 B60762              +135 
00:001761 B6079C              +136 	j	bad_descriptor
  :                            137 
00:001762 07B000              +138 	ts	device_k:ts_cell
00:001763 B60762              +139 	j	$-1
  :                            140 
  :                            141 
00:001764 F80083              +142 	push	y_x
  :                            143 
00:001765 60B001              +144 	la	device_k:index
00:001766 34002C              +145 	sabr	BVOLATILE_I		. access device structures
00:001767 600004              +146 	la	a			. retrieve bank name
  :                            147 
00:001768 680004              +148 	lb	a			. from application a
00:001769 5807F7              +149 	ly	(BVOLATILE_I*/18:s)
00:00176A 50B000              +150 	lx	canister:next
00:00176B B8A003              +151 	xorB	3, x
  :                            152 
00:00176C 4007F9              +153 	lr	(BVOLATILE_I*/18++262142:s)
00:00176D 180087              +154 	sy	7+128
00:00176E DE0784              +155 	jnzb	free_list_insert
  :                            156 
  :                            157 	
00:00176F 850002              +158 	ax	2,,xi			. you're gone
  :                            159 
00:001770 10B000              +160 shave	sx	canister:next
00:001771 F6079A              +161 	jxge	stack_freed
00:001772 68A003              +162 	lb	3, x
00:001773 D00085              +163 	ana	b_x
  :                            164 
00:001774 060006              +165 	sar	6
00:001775 A5003F              +166 	and	63,,xi
00:001776 580087              +167 	ly	7+128			. *canister = canister:free(1)-1,,i
00:001777 880084              +168 	ay	a_x
  :                            169 
00:001778 600085              +170 	la	b_x			. update the subject name
00:001779 850002              +171 	ax	2,,xi			. and the forward pointer of reference
  :                            172 
  :                            173 alongout				. cycle until pointer x_x >= next in chain y_x
  :                            174 
00:00177A 180086              +175 	sy	6+128			. previous = @list on 1st pass
00:00177B 58B000              +176 	ly	0, y
00:00177C 680082              +177 	lb	x_x
  :                            178 
00:00177D D80083              +179 	anb	y_x			. chain instance - candidate descriptor
00:00177E 5E077A              +180 	jnc	alongout		. chain instance lower = buffer higher
00:00177F DE079A              +181 	jnzb	not_in_free_chain	. includes case y = 0 = end of chain
  :                            182 
00:001780 58B000              +183 	ly	0, y			. next
00:001781 188086              +184 	sy	*6+128			. <- previous
  :                            185 
00:001782 580087              +186 	ly	7+128			. *canister
  :                            187 .	lx	canister:next
00:001783 B60770              +188 	j	shave
  :                            189 
  :                            190 free_list_insert			. find its descriptor
00:001784 F6079A              +191 	jxge	not_in_stack
00:001785 850002              +192 	ax	2,,xi
00:001786 680084              +193 	lb	a_x
00:001787 D8A001              +194 	anb	1, x
00:001788 5E0784              +195 	jnc	free_list_insert	. if it's less it's nearer stack root
00:001789 DE079A              +196 	jnzb	not_in_stack		. if not > and not = it's not there
  :                            197 
00:00178A 580082              +198 	ly	x_x
00:00178B 8DFFFE              +199 	ay	-2,,xi			. x is the forward pointer
00:00178C 68B001              +200 	lb	1, y			. attached to candidate descriptor
00:00178D D80084              +201 	anb	a_x
00:00178E 0E0006              +202 	sbr	6
00:00178F AD003F              +203 	andB	63,,xi
00:001790 580087              +204 	ly	7+128			. *canister = canister:free(1)-1,,xi
00:001791 880085              +205 	ay	b_x
  :                            206 					. <- ** qhead
00:001792 180086              +207 alongin	sy	6+128
00:001793 58B000              +208 	ly	0, y			. down pointers = up handles
  :                            209 
00:001794 680082              +210 	lb	x_x			. subtract chain pointer y
00:001795 D80083              +211 	anb	y_x			. from candidate forward pointer x
00:001796 5E0792              +212 	jnc	alongin			. until candidate pointer is not less
00:001797 CE079A              +213 	jzb	chained_already		. includes case y = 0 = end of chain
  :                            214 					
  :                            215 into_chain				. descriptor y is higher, its buffer is lower
00:001798 18A000              +216 	sy	0, x		. 	. insert in front of it
00:001799 108086              +217 	sx	*6+128
  :                            218 
  :                            219 chained_already
  :                            220 not_in_stack
  :                            221 stack_freed
  :                            222 not_in_free_chain
00:00179A 380083              +223 	pop	y_x
00:00179B 30B000              +224 	z	device_k:ts_cell
  :                            225 
  :                            226 bad_descriptor
00:00179C 6007AF              +227 	la	(0C00001:s)
00:00179D 34002C              +228 	sabr	BVOLATILE_I		. screen where you were working
  :                            229 
00:00179E 7D0000              +230 	ir	0
  :                            231 
  :                            232 	$root
  :                            1428 
  :                            1429 TRANSFER_PAGE_HIGH
  :                            1430 
[TRANSFER_PAGE_HIGH][00000000000000000000000000000000000000000000079f]
  :                            1431 	$trace		TRANSFER_PAGE_HIGH
  :                            1432 	$do	$zenith>4096,	$flag	kernel page oversize
  :                            1433 
  :                            1434 	$path		../t77.4
  :                            1435: 	$include	t77
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40: 	$include	dq.def
  :                            41: 	$include	ll.def
  :                            42: 	$include	networks.def
  :                            43: 	$include	i_f.def
  :                            44: 	$include	net_buff.def
  :                            45: 	$include	net_bank.def
  :                            46: 	$include	arp.def
  :                            47: 	$include	ip.def
  :                            48: 	$include	ipv4.def
  :                            49: 	$include	route.def
  :                            50: 	$include	icmp.def
  :                            51: 	$include	socket.def
  :                            52: 	$include	udp.def
  :                            53: 	$include	tcp.def
  :                            54: 	$include	window.def
  :                            55 .	$include	xdr.def
  :                            56 .	$include	protran.def
  :                            57: 	$include	lockfree.def
  :                            58: 	$include	pointers.def
  :                            59: 	$include	../mib/mib-II.def
  :                            60: 	$include	../mib/template.def
  :                            61: 	$include	../mib/ber.def
  :                            62: 	$include	../drivers/ifconfig.def
  :                            63: 	$include	../drivers/routecfg.def
  :                            64: 	$include	../fs/response.def
  :                            65 .	$include	b1_view.def
  :                            66 
  :                            67 	$list		7
  :                            68 
  :                            69: 	$include	networks
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40: 	$include	a_protos.def
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 p	$proc
  :                            41 APPLICATION_PROTOCOLS*	$name
  :                            42 ?	$do	p(),	call	(p(?, 1))
  :                            43 	$end
  :                            44 
  :                            41 
  :                            42 IPV4_DINITIAL_BANK      $equ    3*/12
  :                            43 SIGALERT		$equ	0
  :                            44 QSIMULTANEOUS		$equ	1
  :                            45 NET_ATTENTION_PORT	$equ	121
  :                            46 
  :                            47 NETWORK_D		$equ	12*1024
  :                            48 D0_WORDS		$equ	NETWORK_D
  :                            49 
  :                            50 .	$include	t77.def
  :                            51 
  :                            52 . networks 		$equ	IPV4_BANK/*6
  :                            53 
  :                            54 $(67::,y)
43:000000                     +55 sbind	$socket
43:000002                     +55 
43:000004                     +55 
43:000005                     +55 
43:000006                     +55 
43:000007                     +55 
43:000005                     +55 
43:000006                     +55 
43:000007                     +55 
  :                            56 
  :                            57 $(67::,y)
  :                            58 axw	acw
  :                            59 
  :                            60 .	$(1:4096:IPV4_DINITIAL_BANK/$1)
  :                            61 
  :                            62 $(1:*1/$1)
  :                            63 $(3:*1/$3)
  :                            64 
00:00179f+400000
00:0017a0+000000
00:0017a1+3FFFFF
00:0017a2+000080000000003000FFFFFF
00:0017a6+000000000000000000000000
00:0017aa+F62800
00:0017ab+0BFFFF
00:0017ac+140000
00:0017ad+00000800001E
00:0017af+C00001
00:0017b0+0C0072
00:0017b1+0BFFFE
00:0017b2+003072
00:0017b3+C00000
00:0017b4+02C001
00:0017b5+200000
00:0017b6+02C007
00:0017b7+000132000000
00:0017b9+8007B7
00:0017ba+000067000000
00:0017bc+8007BA
00:0017bd+100000
00:0017be+0000080001F4
00:0017c0+0000000493E003A980030D4002710001D4C00186A0013880
00:0017c8+C00001C00001C00001C00001
00:0017cc+7FFFFF
00:0017cd+000000000080
00:0017cf+544342
00:0017d0+00000A
00:0017d1+FFFFFF000000000000000000
00:0017d5+292000000000
00:0017d7+8FFFFF
00:0017d8+700000
00:0017d9+070000
00:0017da+800000
00:0017db+FF0000
00:0017dc+020000
00:0017dd+030000
00:0017de+060000
00:0017df+000FF8
00:0017e0+00FFFF
00:0017e1+3F0000
00:0017e2+110000
00:0017e3+010000000000
00:0017e5+240000000000
00:0017e7+210000000000
00:0017e9+2D2000000000
00:0017eb+200000000000
00:0017ed+000000000004000004000400
00:0017f1+02C140
00:0017f2+A00000
00:0017f3+02C042
00:0017f4+02C000
00:0017f5+300000
00:0017f6+3FFFC0
00:0017f7+B00000
00:0017f8+00FFFE
00:0017f9+B3FFFE
00:0017fa+40003F
  :                            65 $(0::IPV4_BANK)
00:002000 B60040              +66 networks	$vector		networks_start
00:002001 B6006A              +67 __socket*	$vector		network_socket
00:002002 B60F0A              +68 __bind*		$vector		$bind:autobind
00:002003 B60AAA              +69 __connect*	$vector		$sockif:active_connect
00:002004 B60A85              +70 connect*	$vector		$sockif:socket_connect
00:002005 B60EFD              +71 bind*		$vector		$bind:network_bind
00:002006 B60B60              +72 net_disengage*	$vector		$sockif:net_disengage
  :                            73 .	tfer_dgram*	$vector		net_pass_xcall
00:002007 B60515              +74 release_udgram*	$vector		udp_drop_dgram
00:002008 B6015A              +75 __route		$vector		ip_route_advance
  :                            76 
00:002009 B60BD0              +77 recv*		$vector		socket_receive
00:00200A B60BF4              +78 send*		$vector		socket_send
00:00200B B60167              +79 ipsend*		$vector		ip_send
00:00200C B6077B              +80 __tcp_connect*	$vector		tcp_send_syn
00:00200D B60780              +81 tcp_accept*	$vector		tcp_respond_syn_ack
  :                            82 .	tcp_send_push*	$vector		tcp_send_i
00:00200E B60785              +83 tcp_ack_fin	$vector		tcp_respond_fin_ack
00:00200F B60B2E              +84 accept*		$vector		$sockif:tcp_await_connection
00:002010 B60BBE              +85 sense_data*	$vector		socket_sense
00:002011 B60B60              +86 __net_disengage*  $vector	$sockif:net_disengage
00:002012 B60B82              +87 __port_disengage* $vector	$sockif:port_disengage		. ports without message q: TCP
00:002013 B60B7E              +88 __port_disengage_udp* $vector	$sockif:port_disengage_udp	. ports with message q: UDP
00:002014 B60B87              +89 __free_tcp_port* $vector	$sockif:free_tcp_port
00:002015 B60B86              +90 __disconnect_free_tcp* $vector	$sockif:disconnect_free
00:002016 B60BA4              +91 __tcp_socket*	$vector		$sockif:tcp_port_socket		. far call tcp port encoding
  :                            92 
00:002017 3D0000              +93 	$do	24-$,	fret	0
  :                            94 
  :                            95 		$if		DRIVERS_BANK1
  :                            96 
Note: ../t77.4/networks.msm Line 97: external drivers
  :                            97 		$note		external drivers
  :                            98 
00:002018 B600B7              +99 frame_to_protocol* $vector	frame2p
00:002019 B600CD              +100 far_initpool*	$vector		if_initpool
  :                            101 
  :                            102 .	if_dualport_txwrite* $vector	if_dportw	. moved to drivers
  :                            103 
00:00201A B600CF              +104 if_sell1*	$vector		ifsellmsg
00:00201B B600D1              +105 if_buy1*	$vector		ifbuy
00:00201C B600D3              +106 far_readq*	$vector		ifrq
00:00201D B600D5              +107 far_q2*		$vector		ifq2
00:00201E B600D7              +108 if_q2ifree*	$vector		ifq2ifree
  :                            109 
00:00201F B600D9              +110 if_tx_nocheck*	$vector		iftx_nocheck
  :                            111 if_rx_nocheck*	$equ		if_tx_nocheck
  :                            112 
00:002020 B60265              +113 ipv4_4us?*	$vector		ipv44us?
00:002021 B60268              +114 ipv4_this_if?*	$vector		ipv4thisif?
00:002022 B6026B              +115 ipv4_this_host?* $vector	ipv4thishost?
  :                            116 
  :                            117 		$else
  :                            118 
  :                            119 .	jump pad for interface drivers included in this bank
  :                            120 
  :                            121 		$note		internal drivers
  :                            122 
  :                            123 "$rxtx_lo"*	$vector		rxtx_softwareloopback
  :                            124 
  :                            125 "$rxtx_ift1"*	$vector		ift1_rxtx
  :                            126 "$initial_ift1"* $vector	start_ift1
  :                            127 
  :                            128 		$endif
  :                            129 
  :                            130 		$if	0
  :                            131 dlt_null*	$vector		ifw_dlt_null	. moved to drivers
  :                            132 dlt_loop*	$vector		ifw_dlt_loop
  :                            133 dlt_e10mb*	$vector		ifw_dlt_e10mb
  :                            134 		$endif
  :                            135 
00:002023 3D0000              +136 	$do	40-$,	fret	0
00:002024 3D0000              +136 
00:002025 3D0000              +136 
00:002026 3D0000              +136 
00:002027 3D0000              +136 
  :                            137 
00:002028 B60676              +138 xaccept*	$vector		tcp_xaccept
00:002029 B60911              +139 xdisco*		$vector		tcp_xdisco
00:00202A B606DC              +140 xdecline*	$vector		tcp_refuse
  :                            141 
00:00202B B608EB              +142 tcpr*		$vector		tcp_rsegment		. far calls for message take from rx queue
00:00202C B608EF              +143 tcpz*		$vector		tcp_zsegment		. and message drop
  :                            144 
00:00202D B608F4              +145 tcp_release_rxline* $vector	tcp_textline_release	. message drop from rx queue
  :                            146 
00:00202E B608FC              +147 tcp_hash_localsocket* $vector	tcp_hashlocal
00:00202F B608FA              +148 tcp_hash_connection* $vector	tcp_hash_connect
  :                            149 
00:002030 B60DA6              +150 tcp_rx*		$vector		tcp_read
00:002031 B60C31              +151 tcp_tx*		$vector		tcp_add
00:002032 B60C37              +152 tcp_addx*	$vector		tcp_add:__x		. DIY PSR stream settings, otherwise same as tcp_tx
  :                            153 
  :                            154 		$if		0
  :                            155 tcp_addbyte*	$vector		tcp_add1byte		. nothing has called this	rwsocket.msm
  :                            156 tcp_pushbytes*	$vector		tcp_pushline		. nothing has called this	rwsocket.msm
  :                            157 
  :                            158 udgram_rx*	$vector		udgram_read		. changed to an internal routine in rwsocket.msm
  :                            159 . udgram_tx*	$vector		udgram_transmit		. did nothing call this either?
  :                            160 		$endif
  :                            161 
00:002033 B6042D              +162 udgram_acw_send_nocheck* $vector udp_txaw_nocheck
00:002034 B6043E              +163 udp_rtxbuffer*	$vector		udp_response_buffer
00:002035 B6051F              +164 udp_send*	$vector		udp_tx
00:002036 B60406              +165 udp_txbuffer*	$vector		udp_buy_txaw
00:002037 B60414              +166 udp_acw_send*	$vector		udp_txaw
  :                            167 
  :                            168 	$do	$>64,	$flag IPV4_BANK please pack vectors
00:002038 3D0000              +169 	$do	64-$,	fret	0
00:002039 3D0000              +169 
00:00203A 3D0000              +169 
00:00203B 3D0000              +169 
00:00203C 3D0000              +169 
00:00203D 3D0000              +169 
00:00203E 3D0000              +169 
00:00203F 3D0000              +169 
  :                            170 
  :                            171 networks_start
00:002040 60207F              +172 	$base_d	NETWORK_D
00:002041 340003              +172 
00:002042 64C001              +172 
00:002043 340004              +172 
00:002044 64C001              +172 
00:002045 340005              +172 
00:002046 600F75              +172 
Note: ../t77.4/networks.msm Line 172: add 2nd $base_d argument if printf is required
Note: ../t77.4/networks.msm Line 172: space for automatic file-open frames not guaranteed add external stack argument
00:002047 75007A              +172 
00:002048 656000              +172 
00:002049 20000E              +172 
00:00204A 9F0F76              +173 	c	(seg$load)	3,,xi	(minimald.seg:d),,long
00:00204B FD0003              +173 
00:00204C FCF003              +173 
00:00204D FF0F78              +173 
00:00204E 38000F              +173 
  :                            174 
00:00204F CF0F79              +175 	dl	(0, $3("*ip":0)d)
00:002050 750049              +176 	ii	TAG$
  :                            177 
  :                            178 	$do	$TEST_WPROTECT,	lcal	test_wprotect
  :                            179 
  :                            180 	$if	1
00:002051 CF0096              +181         dl      DAYCLOCK$U		. initialise energy monitoring
00:002052 D70F7B              +182         da      (ACTIVITY_SPACE:d)
(+03)0f
00:002053 C70004              +183         ds      activity_revision
  :                            184 	$endif
  :                            185 
  :                            186 NET_ADAPTING	$equ	1
  :                            187 
  :                            188 	$if	NET_ADAPTING
00:002054 3E00F9              +189 	lcal	net_buffers
  :                            190 	$else
  :                            191 	lcal	net_bank
  :                            192 	$endif
  :                            193 
00:002055 75006C              +194 	ii	CACHE_NETB$
00:002056 3E0074              +195 	lcal	locate_interfaces
00:002057 3E0643              +196 	lcal	tcp4_construct_connections_bank
  :                            197 
00:002058 552185              +198 	lx	tcx_v4(1),,xi
00:002059 750054              +199 	ii	WRITE_XVECTOR$
00:00205A 85FFFF              +200 	ax	-1,,xi			. 2nd block is at 1st block - 1
00:00205B 650000              +201 	la	0,,xi			. and isn't populated or used
00:00205C 750054              +202 	ii	WRITE_XVECTOR$
  :                            203 
00:00205D 65FFFF              +204 	la	-1,,xi			. restart the system with trace in TCB + 1024
00:00205E 750075              +205 	ii	RESTART_EI$		. if a thread of this process faults anywhere
  :                            206 
00:00205F FF0F7D              +207 	call	(app_threads)
  :                            208 
  :                            209 	$if	TCP_STATES_BEAT
00:002060 3E056F              +210 	lcal	tcp_states_step
  :                            211 	$endif
  :                            212 
  :                            213 	$if	1
  :                            214 	$else
  :                            215 	la	2,,xi
  :                            216 	ii	$SMP
  :                            217 	$endif
  :                            218 
  :                            219 network
  :                            220 	.	push	fp	**************** no need, can even make problems
  :                            221 
00:002061 3E0092              +222 	lcal	frames
  :                            223 
  :                            224 .	$do	IPV4_OVERHAUL^=0,	lcal	icapsule
  :                            225 
  :                            226 	$if	SIGALERT
  :                            227 	la, xi	0
  :                            228 	outA	NET_ATTENTION_PORT
  :                            229 	$endif
  :                            230 
00:002062 3E0F69              +231 	lcal	xarp			. exists because it has timers
00:002063 3E014A              +232 	lcal	ipv4			. exists for timing fragments out
00:002064 3E0363              +233 	lcal	icmp			.
00:002065 3E0385              +234 	lcal	udp4			. arbitrates socket RX queues with socket owners
  :                            235 					. input to common udpq needs no arbitration
  :                            236 					. so interface buffers may be released
  :                            237 					. immediately and unconditionally
00:002066 3E0573              +238 	lcal	xtcp4
  :                            239 
00:002067 FF0F7E              +240 	call	(app_protos)
  :                            241 
  :                            242 .	$do	IPV4_OVERHAUL=0,	lcal	icapsule
00:002068 3E0F57              +243 	lcal	icapsule
  :                            244 
  :                            245 	.	pop	fp	**************** no need, can even make problems
  :                            246 
00:002069 B60061              +247 	j	network
  :                            248 
  :                            249 network_socket
00:00206A 680004              +250 	anu	(IPPROTO_UDP*/16)
00:00206B D80F7F              +250 
00:00206C CE0072              +251 	jzb	srequest
00:00206D 680004              +252 	anu	(IPPROTO_TCP*/16)
00:00206E D80F80              +252 
00:00206F CE0072              +253 	jzb	srequest
00:002070 65FFFE              +254 	la, xi	-2
00:002071 3D0000              +255 	fret	0
  :                            256 srequest
00:002072 750050              +257 	ii	HANDLE$
00:002073 3D0000              +258 	fret	0
  :                            259 
  :                            260 
  :                            261 .	    A	    B	    6	    7
  :                            262 .	_________________________________
  :                            263 .	| socket|   0	|  address:port	|
  :                            264 .	|_______|_______|_______________|
  :                            265 
  :                            266 .	the kernel vector bank is read and
  :                            267 .	written with internal interrupts
  :                            268 
  :                            269 .		ii	READ_XVECTOR
  :                            270 .		ii	WRITE_XVECTOR
  :                            271 
  :                            272 .	because this routine is available
  :                            273 .	to threads of IP process which has
  :                            274 .	kernel vector bank, and application
  :                            275 .	processes which have their own vector
  :                            276 .	bank
  :                            277 
  :                            278 .	thos ISRs switch to the kernel
  :                            279 .	vector bank
  :                            280 
  :                            281 .		on	see$2
  :                            282 
  :                            283 .	return from any ISR restores all PSR
  :                            284 .	flags to what they were on II
  :                            285 
  :                            286 
  :                            287 	$if	0
  :                            288 
  :                            289 network_bind
  :                            290 	ds	d$save
  :                            291 	ii	READ_HANDLE$
  :                            292 	jna	network_bind_x
  :                            293 
  :                            294 	anu	(IPPROTO_UDP*/16)
  :                            295 	jzb	bind_udp
  :                            296 	anu	(IPPROTO_TCP*/16)
  :                            297 	jzb	bind_tcp
  :                            298 
  :                            299 	la, xi	-2	. protocol unknown
  :                            300 			. or socket already bound
  :                            301 			. (lower 16 bits nonzero)
  :                            302 
  :                            303 network_bind_x
  :                            304 	fret	0
  :                            305 
  :                            306 bind_udp
  :                            307 	lx, xi	usockb(1)
  :                            308 	j	protocol_bind
  :                            309 bind_tcp
  :                            310 	lx, xi	tsockb(1)
  :                            311 protocol_bind
  :                            312 	sa	d$save2
  :                            313 	la	7
  :                            314 	and	(65535)
  :                            315 	sa	8
  :                            316 	jnza	selected_bind
  :                            317         la	7
  :                            318 	or, xi	1024
  :                            319 	sa	7
  :                            320 selected_bind
  :                            321 
  :                            322 	$if	1
  :                            323 	lcal	protocol_socket
  :                            324 	$else
  :                            325 
  :                            326 	lb, xi	BSOCKET*/9
  :                            327 	dsr	9
  :                            328 	and, xi	127
  :                            329 
  :                            330 	ax	a
  :                            331 	ii	READ_XVECTOR$
  :                            332 
  :                            333 	$endif
  :                            334 
  :                            335 	rbr	12
  :                            336 	ly	b
  :                            337 
  :                            338 	jza	new_bind_bank
  :                            339 
  :                            340 	sabr	BSOCKET
  :                            341 	ii	UHANDLE$
  :                            342 	ds	10		. return also the long
  :                            343 				. virtual address of 
  :                            344 				. the port control block
  :                            345 
  :                            346 	dl	sbind:socket_address
  :                            347 	jdz	bind_clear_to_add
  :                            348 
  :                            349 	tz	8
  :                            350 	j	bind_e3
  :                            351 
  :                            352 	inc	7
  :                            353 	la	7
  :                            354 	lb	7
  :                            355 	andB,xi 2048
  :                            356 	jzb	selected_bind
  :                            357 bind_e3
  :                            358 	la, xi	-3	. port number already claimed
  :                            359 	fret	0
  :                            360 
  :                            361 new_bind_bank
  :                            362 	la, xi	4096
  :                            363 	ii	BANK$
  :                            364 	jnza	bind_bank_granted
  :                            365 
  :                            366 	la, xi	-4	. cannot resource the bind
  :                            367 	fret	0
  :                            368 
  :                            369 bind_bank_granted
  :                            370 	ds	10	. save the long virtual address
  :                            371 			. of the port control block
  :                            372 
  :                            373 	ii	WRITE_XVECTOR$
  :                            374 	sabr	BSOCKET
  :                            375 	ii	UHANDLE$
  :                            376 
  :                            377 	qpush	a
  :                            378 	dsr	48
  :                            379 	ds	6
  :                            380 
  :                            381 	lx	(BSOCKET*/12)
  :                            382 	lr, xi	512/2-1		. initialise 2 8-word
  :                            383 				. port blocks per loop
  :                            384 bind_bank_prepare
  :                            385 ?	$do	4,	qs	?*4-4, x
  :                            386 	ax, xi	16
  :                            387 	jdr	bind_bank_prepare
  :                            388 
  :                            389 	qpop	a
  :                            390 
  :                            391 bind_clear_to_add
  :                            392 	dl	6
  :                            393 	ds	sbind:socket_address
  :                            394 
  :                            395 				. TCP bind, place a
  :                            396 				. connections bank pointer
  :                            397 				. in the port socket
  :                            398 				. structure
  :                            399 
  :                            400 	la	d$save2
  :                            401 	ana	(IPPROTO_TCP*/16)
  :                            402 	jnza	bind_complete
  :                            403 
  :                            404 	lx, xi	tcx_v4(1)
  :                            405 	ii	READ_XVECTOR$
  :                            406 
  :                            407 	jza	bind_failed_cbank
  :                            408 	sa	sbind:tcp:tbase
  :                            409 	z	sbind:tcp:tbase+1
  :                            410 
  :                            411 bind_complete
  :                            412 	la, xi	0
  :                            413 	fret	0
  :                            414 
  :                            415 bind_failed_cbank
  :                            416 	z	sbind:socket_address+1
  :                            417 	la, xi	-19
  :                            418 	fret	0
  :                            419 
  :                            420 	$endif
  :                            421 
  :                            70 	$list		7
  :                            71 
  :                            72: 	$include	i_f
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 . Interfaces multiplex on two circular buffers of 16-bit words
  :                            42 . one for receive and one for transmit
  :                            43 
  :                            44 . 16-bit device array words read out to RTA1 as 24 bits  with 8 high-order zeros
  :                            45 . and are written from the low-order 16 bits of RTA1 registers
  :                            46 
  :                            47 . These 16-bit buffers are in device array space and consist
  :                            48 . of an array of uniformly 1024-word (2048 octet) frame buffers 
  :                            49 
  :                            50 
  :                            51 .		_________________________________
  :                            52 .	>------>|1st receive buffer		|
  :                            53 .	|	|2nd				|
  :                            54 .	|	|				|
  :                            55 .	^
  :                            56 .	|
  :                            57 .	<-------|last receive buffer		|
  :                            58 .		|_______________________________|
  :                            59 .	>------>|1st transmit buffer		|
  :                            60 .	|	|2nd				|
  :                            61 .	|	|				|
  :                            62 .	^
  :                            63 .	|
  :                            64 .	<-------|last transmit buffer		|
  :                            65 .		|_______________________________|
  :                            66 
  :                            67 
  :                            68 . Five 16-bit words at the start of each frame buffer contain information
  :                            69 . for RTA1 on receive and for interfaces on transmit
  :                            70 
  :                            71 . The five-word preamble is
  :                            72 
  :                            73 .	_________________________________________________________________________________
  :                            74 .	| flag 8000/0000|  frame octets	|link hdr octets|interface index|protocol family|
  :                            75 .	|_______________|_______________|_______________|_______________|_______________|
  :                            76 
  :                            77 
  :                            78 . The first word flagged 8000 hex to indicated a frame completely received
  :                            79 . or a frame ready for transmission
  :                            80 
  :                            81 . The fixed preamble contains a Link Header length which is usually zero on receive
  :                            82 
  :                            83 . Link Layer headers are not usually included in received frames because
  :                            84 . no protocol layer in RTA1 extracts any information from Link Layer headers
  :                            85 . The fixed preamble contains a protocol discriminator
  :                            86 
  :                            87 . Complex protocol discriminators like SNAP header would make the inclusion of 
  :                            88 . received Link Layer headers necessary
  :                            89 
  :                            90 . Link Layer headers are always constructed by RTA1 for transmission
  :                            91 
  :                            92 
  :                            93 . Notes. Note 1
  :                            94 
  :                            95 . To avoid accidental damage, device banks (as distinct from system memory
  :                            96 . banks) may only be based by interrupt code. This avoids inadvertant
  :                            97 . traversal of array accesses across all the devices
  :                            98 
  :                            99 . At their simplest,
  :                            100 . the internal interrupts (system calls II 64+32 .. II 64+43) only need
  :                            101 . to copy the bank handle from user-A register, base it, and return:
  :                            102 
  :                            103 .		la	A
  :                            104 .		sabr	32
  :                            105 .		ir	0
  :                            106 
  :                            107 		.
  :                            108 		.
  :                            109 
  :                            110 .		la	A
  :                            111 .		sabr	63
  :                            112 .		ir	0
  :                            113 
  :                            114 . these service call ISRs discard calls which do not come from kernel iframes
  :                            115 
  :                            116 .	[ IP device_drivers file_systems loader ]
  :                            117 
  :                            118 . by using the $ringfest exclusion macro
  :                            119 
  :                            120 . credential checking can be added to these ISRs
  :                            121 
  :                            122 . Once the storage area is based, the application can access it at will.
  :                            123 
  :                            124 . The alternative would be that interrupt code itself must carry out required
  :                            125 . operations and unbase the storage area before return
  :                            126 
  :                            127 
  :                            128 . Note 2
  :                            129 
  :                            130 . the interface handler here will offer each frame to the protocol family
  :                            131 . (mostly IPv4 or similar), which must decide immediately whether to take
  :                            132 . the frame and place it in storage visible to the application.
  :                            133 
  :                            134 . This means IP will check IP correctness, and call ICMP, UDP or TCP which
  :                            135 . must checksum as necessary while copying the datagram to socket storage.
  :                            136 
  :                            137 . Datagrams are checksummed during transfer from interface buffers (device array space)
  :                            138 . to socket buffers (protocol space)
  :                            139 
  :                            140 . Some network applications which are threads of IP have zero-copy access to socket buffers
  :                            141 
  :                            142 . The socket or XDR interface will otherwise format the data when the application
  :                            143 . subsequently receives it over the socket API.
  :                            144 
  :                            145 . on return from the call to the protocol family, the interface buffer is freed
  :                            146 
  :                            147 
  :                            148 
  :                            149 RX_LL_HL $equ	d$save
  :                            150 
  :                            151 
  :                            152 
  :                            153 $(1)
  :                            154 
  :                            155 .	pointer array to the network interface descriptors
  :                            156 .	these are numbered starting from one as in MIB-II
  :                            157 .	interfaces table
  :                            158 
  :                            159 .	word zero of this table is a count of the number of
  :                            160 .	interface descriptors in use
  :                            161 
  :                            162 .	the initial value 1 indicates that there is one
  :                            163 .	interface so far, interface(1) = internal loopback,
  :                            164 .	and the next to be configured ought to be interface(2)
  :                            165 
  :                            166 .	to obtain a descriptor for a new interface, increment
  :                            167 .	the counter in the first word of the array and select
  :                            168 .	the pointer at
  :                            169 
  :                            170 .	i_f_pointer_array[i_f_pointer_array[0]]
  :                            171 
  :                            172 .	for example
  :                            173 .
  :                            174 .		lx		i_f_pointer_array
  :                            175 .		ax, xi		1
  :                            176 .		sx		i_f_pointer_array
  :                            177 .		lx		0, x
  :                            178 
  :                            179 
  :                            180 i_f_pointer_array	. who wants to go multiplying subscripts?
01:000000 000001              +181 	+	1
(+01)18
01:000001 00000A              +182 ?	$do	INTERFACES,ifxpointer(?)	+	interface(?)
(+01)18
01:000002 000052              +182 
(+01)18
01:000003 00009A              +182 
(+01)18
01:000004 0000E2              +182 
(+01)18
01:000005 00012A              +182 
(+01)18
01:000006 000172              +182 
(+01)18
01:000007 0001BA              +182 
(+01)18
01:000008 000202              +182 
  :                            183 
  :                            184 "$if0p"*	$equ	i_f_pointer_array
  :                            185 "$if2p"*	$equ	ifxpointer(2)		. 1st external interface pointer
  :                            186 						. exported for self-configuring
  :                            187 						. device drivers
  :                            188 "$ifzp"*	$equ	i_f_last
  :                            189 
(+01)18
01:000009 00000A              +190 i_f_last +	interface(1)
  :                            191 
                                ?	$do	INTERFACES,interface(?)	i_f	net_address(1),16384,softwareLoopback,	;
                                						0, $rxtx_lo			;
                                										;
                                					net_address(2),2048-14-10,platform_relay,	;
                                					$initial_ift1, $rxtx_ift1,,,,, 00:012:01c:00:00:5	;
                                												;
                                					net_address(3), 1500, ethernet_relay, 0, $light_flight	;
                                												;
                                					net_address(4), 1500, ethernet_relay, 0, $light_flight	;
                                												;
                                					net_address(5), 2048-10-14, platform_relay2,		;
01:00000A 000001              +203 					__initial_ift2, __rxtx_ift2
01:00000B 000001              +203 
(+01)18
01:00000C 000340              +203 
01:00000D 000018              +203 
01:00000E 004000              +203 
01:00000F 000001              +203 
01:000010 00E8D4A51000        +203 
01:000012 000000000000        +203 
01:000014 000000000000        +203 
01:000016 000000000000        +203 
01:000018 000000000000        +203 
01:00001A 000000000000        +203 
01:00001C 000000000000        +203 
01:00001E 000000000000        +203 
01:000020 000000000000        +203 
01:000022 000000000000        +203 
01:000024 000000000000        +203 
01:000026 000000000000        +203 
01:000028 000000000000        +203 
01:00002A 000000000000        +203 
01:00002C 005DC0              +203 
01:00002D 005DC0              +203 
01:00002E 000000              +203 
01:00002F 000010              +203 
01:000030 736F6674776172654C6F6F706261636B0000
                              +203 
01:000036 000000              +203 
01:000037 000000              +203 
01:000038 000000              +203 
01:000039 000000              +203 
01:00003A 000000              +203 
01:00003B 000000              +203 
01:00003C 000000              +203 
01:00003D 000000              +203 
01:00003E 000000              +203 
01:00003F 000000              +203 
01:000040 000000              +203 
01:000041 000000              +203 
[+0004]18
01:000042 000000              +203 
01:000043 000000              +203 
01:000044 000000              +203 
01:000045 000000              +203 
01:000046 000000              +203 
01:000047 000000              +203 
01:000048 000000              +203 
01:000049 000000              +203 
01:00004A 000000              +203 
01:00004B 000000              +203 
01:00004C 000000              +203 
01:00004D 000000              +203 
01:00004E 000000              +203 
01:00004F 800000              +203 
01:000050 000000              +203 
01:000051 820000              +203 
01:000052 000002              +203 
01:000053 000000              +203 
(+01)18
01:000054 000349              +203 
01:000055 000064              +203 
01:000056 0007E8              +203 
01:000057 000001              +203 
01:000058 00E8D4A51000        +203 
01:00005A 00121C000005        +203 
01:00005C 000000000000        +203 
01:00005E 000000000000        +203 
01:000060 000000000000        +203 
01:000062 000000000000        +203 
01:000064 000000000000        +203 
01:000066 000000000000        +203 
01:000068 000000000000        +203 
01:00006A 000000000000        +203 
01:00006C 000000000000        +203 
01:00006E 000000000000        +203 
01:000070 000000000000        +203 
01:000072 000000000000        +203 
01:000074 005DC0              +203 
01:000075 005DC0              +203 
01:000076 000000              +203 
01:000077 00000E              +203 
01:000078 706C6174666F726D5F72656C617900
                              +203 
01:00007D 000000              +203 
01:00007E 000000              +203 
01:00007F 000000              +203 
01:000080 000000              +203 
01:000081 000000              +203 
01:000082 000000              +203 
01:000083 000000              +203 
01:000084 000000              +203 
01:000085 000000              +203 
01:000086 000000              +203 
01:000087 000000              +203 
01:000088 000000              +203 
[+0005]18
01:000089 000000              +203 
[+0006]18
01:00008A 000000              +203 
01:00008B 000000              +203 
01:00008C 000000              +203 
01:00008D 000000              +203 
01:00008E 000000              +203 
01:00008F 000000              +203 
01:000090 000000              +203 
01:000091 000000              +203 
01:000092 000000              +203 
01:000093 000000              +203 
01:000094 000000              +203 
01:000095 000000              +203 
01:000096 000000              +203 
01:000097 800000              +203 
01:000098 000000              +203 
01:000099 820000              +203 
01:00009A 000003              +203 
01:00009B 000000              +203 
(+01)18
01:00009C 000352              +203 
01:00009D 000006              +203 
01:00009E 0005DC              +203 
01:00009F 000001              +203 
01:0000A0 00E8D4A51000        +203 
01:0000A2 000000000000        +203 
01:0000A4 000000000000        +203 
01:0000A6 000000000000        +203 
01:0000A8 000000000000        +203 
01:0000AA 000000000000        +203 
01:0000AC 000000000000        +203 
01:0000AE 000000000000        +203 
01:0000B0 000000000000        +203 
01:0000B2 000000000000        +203 
01:0000B4 000000000000        +203 
01:0000B6 000000000000        +203 
01:0000B8 000000000000        +203 
01:0000BA 000000000000        +203 
01:0000BC 005DC0              +203 
01:0000BD 005DC0              +203 
01:0000BE 000000              +203 
01:0000BF 00000E              +203 
01:0000C0 65746865726E65745F72656C617900
                              +203 
01:0000C5 000000              +203 
01:0000C6 000000              +203 
01:0000C7 000000              +203 
01:0000C8 000000              +203 
01:0000C9 000000              +203 
01:0000CA 000000              +203 
01:0000CB 000000              +203 
01:0000CC 000000              +203 
01:0000CD 000000              +203 
01:0000CE 000000              +203 
01:0000CF 000000              +203 
01:0000D0 000000              +203 
01:0000D1 000000              +203 
[+0007]18
01:0000D2 000000              +203 
01:0000D3 000000              +203 
01:0000D4 000000              +203 
01:0000D5 000000              +203 
01:0000D6 000000              +203 
01:0000D7 000000              +203 
01:0000D8 000000              +203 
01:0000D9 000000              +203 
01:0000DA 000000              +203 
01:0000DB 000000              +203 
01:0000DC 000000              +203 
01:0000DD 000000              +203 
01:0000DE 000000              +203 
01:0000DF 800000              +203 
01:0000E0 000000              +203 
01:0000E1 820000              +203 
01:0000E2 000004              +203 
01:0000E3 000000              +203 
(+01)18
01:0000E4 00035B              +203 
01:0000E5 000006              +203 
01:0000E6 0005DC              +203 
01:0000E7 000001              +203 
01:0000E8 00E8D4A51000        +203 
01:0000EA 000000000000        +203 
01:0000EC 000000000000        +203 
01:0000EE 000000000000        +203 
01:0000F0 000000000000        +203 
01:0000F2 000000000000        +203 
01:0000F4 000000000000        +203 
01:0000F6 000000000000        +203 
01:0000F8 000000000000        +203 
01:0000FA 000000000000        +203 
01:0000FC 000000000000        +203 
01:0000FE 000000000000        +203 
01:000100 000000000000        +203 
01:000102 000000000000        +203 
01:000104 005DC0              +203 
01:000105 005DC0              +203 
01:000106 000000              +203 
01:000107 00000E              +203 
01:000108 65746865726E65745F72656C617900
                              +203 
01:00010D 000000              +203 
01:00010E 000000              +203 
01:00010F 000000              +203 
01:000110 000000              +203 
01:000111 000000              +203 
01:000112 000000              +203 
01:000113 000000              +203 
01:000114 000000              +203 
01:000115 000000              +203 
01:000116 000000              +203 
01:000117 000000              +203 
01:000118 000000              +203 
01:000119 000000              +203 
[+0007]18
01:00011A 000000              +203 
01:00011B 000000              +203 
01:00011C 000000              +203 
01:00011D 000000              +203 
01:00011E 000000              +203 
01:00011F 000000              +203 
01:000120 000000              +203 
01:000121 000000              +203 
01:000122 000000              +203 
01:000123 000000              +203 
01:000124 000000              +203 
01:000125 000000              +203 
01:000126 000000              +203 
01:000127 800000              +203 
01:000128 000000              +203 
01:000129 820000              +203 
01:00012A 000005              +203 
01:00012B 000000              +203 
(+01)18
01:00012C 000364              +203 
01:00012D 000065              +203 
01:00012E 0007E8              +203 
01:00012F 000001              +203 
01:000130 00E8D4A51000        +203 
01:000132 000000000000        +203 
01:000134 000000000000        +203 
01:000136 000000000000        +203 
01:000138 000000000000        +203 
01:00013A 000000000000        +203 
01:00013C 000000000000        +203 
01:00013E 000000000000        +203 
01:000140 000000000000        +203 
01:000142 000000000000        +203 
01:000144 000000000000        +203 
01:000146 000000000000        +203 
01:000148 000000000000        +203 
01:00014A 000000000000        +203 
01:00014C 005DC0              +203 
01:00014D 005DC0              +203 
01:00014E 000000              +203 
01:00014F 00000F              +203 
01:000150 706C6174666F726D5F72656C617932
                              +203 
01:000155 000000              +203 
01:000156 000000              +203 
01:000157 000000              +203 
01:000158 000000              +203 
01:000159 000000              +203 
01:00015A 000000              +203 
01:00015B 000000              +203 
01:00015C 000000              +203 
01:00015D 000000              +203 
01:00015E 000000              +203 
01:00015F 000000              +203 
01:000160 000000              +203 
[+0008]18
01:000161 000000              +203 
[+0009]18
01:000162 000000              +203 
01:000163 000000              +203 
01:000164 000000              +203 
01:000165 000000              +203 
01:000166 000000              +203 
01:000167 000000              +203 
01:000168 000000              +203 
01:000169 000000              +203 
01:00016A 000000              +203 
01:00016B 000000              +203 
01:00016C 000000              +203 
01:00016D 000000              +203 
01:00016E 000000              +203 
01:00016F 800000              +203 
01:000170 000000              +203 
01:000171 820000              +203 
01:000172 000006              +203 
01:000173 000000              +203 
(+01)18
01:000174 00036D              +203 
01:000175 000000              +203 
01:000176 0005DC              +203 
01:000177 000001              +203 
01:000178 00E8D4A51000        +203 
01:00017A 000000000000        +203 
01:00017C 000000000000        +203 
01:00017E 000000000000        +203 
01:000180 000000000000        +203 
01:000182 000000000000        +203 
01:000184 000000000000        +203 
01:000186 000000000000        +203 
01:000188 000000000000        +203 
01:00018A 000000000000        +203 
01:00018C 000000000000        +203 
01:00018E 000000000000        +203 
01:000190 000000000000        +203 
01:000192 000000000000        +203 
01:000194 005DC0              +203 
01:000195 005DC0              +203 
01:000196 000000              +203 
01:000197 000000              +203 
01:000198 000000              +203 
01:000199 000000              +203 
01:00019A 000000              +203 
01:00019B 000000              +203 
01:00019C 000000              +203 
01:00019D 000000              +203 
01:00019E 000000              +203 
01:00019F 000000              +203 
01:0001A0 000000              +203 
01:0001A1 000000              +203 
01:0001A2 000000              +203 
01:0001A3 000000              +203 
01:0001A4 000000              +203 
01:0001A5 000000              +203 
01:0001A6 000000              +203 
01:0001A7 000000              +203 
01:0001A8 000000              +203 
01:0001A9 000000              +203 
01:0001AA 000000              +203 
01:0001AB 000000              +203 
01:0001AC 000000              +203 
01:0001AD 000000              +203 
01:0001AE 000000              +203 
01:0001AF 000000              +203 
01:0001B0 000000              +203 
01:0001B1 000000              +203 
01:0001B2 000000              +203 
01:0001B3 000000              +203 
01:0001B4 000000              +203 
01:0001B5 000000              +203 
01:0001B6 000000              +203 
01:0001B7 800000              +203 
01:0001B8 000000              +203 
01:0001B9 820000              +203 
01:0001BA 000007              +203 
01:0001BB 000000              +203 
(+01)18
01:0001BC 000376              +203 
01:0001BD 000000              +203 
01:0001BE 0005DC              +203 
01:0001BF 000001              +203 
01:0001C0 00E8D4A51000        +203 
01:0001C2 000000000000        +203 
01:0001C4 000000000000        +203 
01:0001C6 000000000000        +203 
01:0001C8 000000000000        +203 
01:0001CA 000000000000        +203 
01:0001CC 000000000000        +203 
01:0001CE 000000000000        +203 
01:0001D0 000000000000        +203 
01:0001D2 000000000000        +203 
01:0001D4 000000000000        +203 
01:0001D6 000000000000        +203 
01:0001D8 000000000000        +203 
01:0001DA 000000000000        +203 
01:0001DC 005DC0              +203 
01:0001DD 005DC0              +203 
01:0001DE 000000              +203 
01:0001DF 000000              +203 
01:0001E0 000000              +203 
01:0001E1 000000              +203 
01:0001E2 000000              +203 
01:0001E3 000000              +203 
01:0001E4 000000              +203 
01:0001E5 000000              +203 
01:0001E6 000000              +203 
01:0001E7 000000              +203 
01:0001E8 000000              +203 
01:0001E9 000000              +203 
01:0001EA 000000              +203 
01:0001EB 000000              +203 
01:0001EC 000000              +203 
01:0001ED 000000              +203 
01:0001EE 000000              +203 
01:0001EF 000000              +203 
01:0001F0 000000              +203 
01:0001F1 000000              +203 
01:0001F2 000000              +203 
01:0001F3 000000              +203 
01:0001F4 000000              +203 
01:0001F5 000000              +203 
01:0001F6 000000              +203 
01:0001F7 000000              +203 
01:0001F8 000000              +203 
01:0001F9 000000              +203 
01:0001FA 000000              +203 
01:0001FB 000000              +203 
01:0001FC 000000              +203 
01:0001FD 000000              +203 
01:0001FE 000000              +203 
01:0001FF 800000              +203 
01:000200 000000              +203 
01:000201 820000              +203 
01:000202 000008              +203 
01:000203 000000              +203 
(+01)18
01:000204 00037F              +203 
01:000205 000000              +203 
01:000206 0005DC              +203 
01:000207 000001              +203 
01:000208 00E8D4A51000        +203 
01:00020A 000000000000        +203 
01:00020C 000000000000        +203 
01:00020E 000000000000        +203 
01:000210 000000000000        +203 
01:000212 000000000000        +203 
01:000214 000000000000        +203 
01:000216 000000000000        +203 
01:000218 000000000000        +203 
01:00021A 000000000000        +203 
01:00021C 000000000000        +203 
01:00021E 000000000000        +203 
01:000220 000000000000        +203 
01:000222 000000000000        +203 
01:000224 005DC0              +203 
01:000225 005DC0              +203 
01:000226 000000              +203 
01:000227 000000              +203 
01:000228 000000              +203 
01:000229 000000              +203 
01:00022A 000000              +203 
01:00022B 000000              +203 
01:00022C 000000              +203 
01:00022D 000000              +203 
01:00022E 000000              +203 
01:00022F 000000              +203 
01:000230 000000              +203 
01:000231 000000              +203 
01:000232 000000              +203 
01:000233 000000              +203 
01:000234 000000              +203 
01:000235 000000              +203 
01:000236 000000              +203 
01:000237 000000              +203 
01:000238 000000              +203 
01:000239 000000              +203 
01:00023A 000000              +203 
01:00023B 000000              +203 
01:00023C 000000              +203 
01:00023D 000000              +203 
01:00023E 000000              +203 
01:00023F 000000              +203 
01:000240 000000              +203 
01:000241 000000              +203 
01:000242 000000              +203 
01:000243 000000              +203 
01:000244 000000              +203 
01:000245 000000              +203 
01:000246 000000              +203 
01:000247 800000              +203 
01:000248 000000              +203 
01:000249 820000              +203 
  :                            204 
  :                            205 $(66::,x)
42:000000                     +206 this_if	i_f
42:000001                     +206 
Note: ../t77.4/i_f.msm Line 206: void section: discarding relocation tuple
42:000002                     +206 
42:000003                     +206 
42:000004                     +206 
42:000005                     +206 
42:000006                     +206 
42:000008                     +206 
42:00000A                     +206 
42:00000C                     +206 
42:00000E                     +206 
42:000010                     +206 
42:000012                     +206 
42:000014                     +206 
42:000016                     +206 
42:000018                     +206 
42:00001A                     +206 
42:00001C                     +206 
42:00001E                     +206 
42:000020                     +206 
42:000022                     +206 
42:000023                     +206 
42:000024                     +206 
42:000025                     +206 
42:000026                     +206 
42:000027                     +206 
42:000028                     +206 
42:000029                     +206 
42:00002A                     +206 
42:00002B                     +206 
42:00002C                     +206 
42:00002D                     +206 
42:00002E                     +206 
42:00002F                     +206 
42:000030                     +206 
42:000031                     +206 
42:000032                     +206 
42:000033                     +206 
42:000034                     +206 
42:000035                     +206 
42:000036                     +206 
42:000037                     +206 
42:000038                     +206 
42:000039                     +206 
42:00003A                     +206 
42:00003B                     +206 
42:00003C                     +206 
42:00003D                     +206 
42:00003E                     +206 
42:00003F                     +206 
42:000040                     +206 
42:000041                     +206 
42:000042                     +206 
42:000043                     +206 
42:000044                     +206 
42:000045                     +206 
42:000046                     +206 
42:000047                     +206 
  :                            207 IF_WORDS
  :                            208 
  :                            209 $(0)
  :                            210 
  :                            211 locate_interfaces
(+01)10
00:002074 450202              +212 	lr, xi	interface(INTERFACES)
00:002075 5D0002              +213 	ly, xi	2
(+01)10
00:002076 550052              +214 	lx, xi	interface(2)		. interface(1) is software loopback
00:002077 480F81              +215 	lk	(0C00000s)
  :                            216 
  :                            217 locate_interfaces_again
00:002078 04B080              +218 	inA	128, y
00:002079 AF0F82              +219 	mta	(IF16)
00:00207A B60082              +220 	j	locate_interfaces_next_device
(+01)0f
00:00207B 100009              +221 	sx	i_f_last
00:00207C 3E008C              +222 	lcal	locate_primed_interface?
00:00207D B60086              +223 	j	thats_enough_interfaces		. no
00:00207E FFA037              +224 	call	this_if:initial			. yes
(+01)0f
00:00207F 100009              +225 	sx	i_f_last			 primed logical interfaces trunk traffic
  :                            226 
00:002080 F60086              +227 	jxge	thats_enough_interfaces
00:002081 850048              +228 	ax, xi	interface(2)-interface(1)
  :                            229 
  :                            230 locate_interfaces_next_device
00:002082 8D0001              +231 	ay, xi	1
00:002083 600003              +232 	la	y
00:002084 C5FFC0              +233 	aa, xi	-64
00:002085 5E0078              +234 	jnc	locate_interfaces_again
  :                            235 
  :                            236 	$if	0				. can't remember what
  :                            237 						. these comments mean
  :                            238 						. but output queue redirection
  :                            239 						. is now this_if:q2
  :                            240 						. this_if:flags is used for
  :                            241 						. something else
  :                            242 
  :                            243 	lr	interface(IFGW)+IF_WORDS,,xi	. if there is routing to here
  :                            244 	jxge	thats_enough_interfaces		. add a logical interface
  :                            245 	ax	-IF_WORDS,,xi			. to service the traffic
  :                            246 	push	x
  :                            247 	lx	interface(IFGW),,xi
  :                            248 	pop	this_if:flags
  :                            249 	push	IFGW,,xi
  :                            250 	pop	i_f_pointer_array
  :                            251 
  :                            252 	$endif
  :                            253 
  :                            254 thats_enough_interfaces
(+01)0f
00:002086 500009              +255 	lx	i_f_last
00:002087 F8A000              +256 	push	this_if:id
00:002088 F8F000              +257 	push	0, sp
(+01)0f
00:002089 380000              +258 	pop	i_f_pointer_array
(+01)0f
00:00208A 3804F7              +259 	pop	ifNumber:i
00:00208B 350000              +260 	lret	0
  :                            261 
  :                            262 locate_primed_interface?
00:00208C 70A037              +263 	tz	this_if:initial
00:00208D 350001              +264 	lret	1				. interface is trunk master
00:00208E F60091              +265 	jxge	located_no_primed_interface
00:00208F 850048              +266 	ax	interface(2)-interface(1),,xi
00:002090 B6008C              +267 	j	locate_primed_interface?
  :                            268 located_no_primed_interface
00:002091 350000              +269 	lret	0
  :                            270 	
  :                            271 
(+01)10
00:002092 55000A              +272 frames	lx, xi	interface(1)
00:002093 70A001              +273 test_if	tz	this_if:flags
00:002094 FFA038              +274 	call	this_if:rxtx_interface
(+01)0f
00:002095 400009              +275 	lr	i_f_last
00:002096 F60099              +276 	jxge	i_f_leave
00:002097 850048              +277 	ax, xi	interface(2)-interface(1)
00:002098 B60093              +278 	j	test_if
  :                            279 i_f_leave
00:002099 350000              +280 	lret	0
  :                            281 
  :                            282 						. i_f should be x->
  :                            283 						. acw should be a->
  :                            284 q2ifoq	$if	0
  :                            285 	lb	x
  :                            286 	ab	-interface(2),,xi
  :                            287 	jzb	ok1
  :                            288 	ab	interface(3)-interface(2),,xi
  :                            289 	jzb	ok1
  :                            290 	ab	interface(4)-interface(3),,xi
  :                            291 	jzb	ok1
  :                            292 	ab	interface(5)-interface(4),,xi
  :                            293 	jzb	ok1
  :                            294 	ii	GUARD$
  :                            295 ok1
  :                            296 	$endif
  :                            297 
00:00209A 70A03E              +298 	tnz	this_if:arp_resolve
00:00209B B6009D              +298 
00:00209C B600A2              +299 	j	q2ifreel			. interface does not use ARP
  :                            300 
00:00209D 600008              +301 	la	8				. the descriptor
  :                            302 	$if	0
  :                            303 	lb	descriptor:frame, a		. practical measure. set the delivery pointer
  :                            304 	sb	TX_FRAME			. for the target physical address
  :                            305 	$elseif	0
  :                            306 	lb	descriptor:frame, a		. diagnostic: test the delivery pointer
  :                            307 	xorB	TX_FRAME			. for the target physical address
  :                            308 	jzb	$+2
  :                            309 	ii	GUARD$
  :                            310 	$endif
  :                            311 
00:00209E FFA03E              +312 	call	this_if:arp_resolve		. interface uses ARP
00:00209F C600A2              +313 	jza	q2ifreel			. dropped or pending
00:0020A0 600008              +314 	la	8				. descriptor
00:0020A1 350000              +315 	lret	0
  :                            316 
00:0020A2 600008              +317 q2ifreel la	8				. recover the descriptor
  :                            318 q2ifree						. called from ARP a -> acw x -> i_f
  :                            319 
00:0020A3 70A03B              +320 	tz	this_if:write_llh		. link layer header to write?
00:0020A4 FFA03B              +321 	call	this_if:write_llh
  :                            322 
00:0020A5 F8A000              +323 	push	this_if:id
  :                            324 
  :                            325 	$if	1
00:0020A6 70F000              +326 	tz	0, sp
00:0020A7 78F000              +327 	tp	0, sp
00:0020A8 75005F              +328 	ii	GUARD$
  :                            329 	$endif
  :                            330 
00:0020A9 38C002              +331 	pop	descriptor:i_f, a
  :                            332 
  :                            333 	$if	HVSOCKET
00:0020AA 480F83              +334 	lk	(63*/18:s)
00:0020AB AF0F84              +335 	mta	(BSOCKET*/18:s)
00:0020AC B600B5              +336 	j	q2ifoq1
  :                            337 
00:0020AD 68C004              +338 	lb	descriptor:dgram, a
00:0020AE 68D000              +339 	lb	dgram:vers_ihl_tos, b
00:0020AF AD0004              +340 	andB	4,,xi
00:0020B0 CE00B3              +341 	jzb	q2ifoq_low
00:0020B1 FF0F85              +342 	call	(write_ifqlist_head)
00:0020B2 350000              +343 	lret	0	
  :                            344 
  :                            345 q2ifoq_low
00:0020B3 FF0F86              +346 	call	(write_ifqlist)
  :                            347 
00:0020B4 350000              +348 	lret	0
  :                            349 	$endif
  :                            350 
  :                            351 q2ifoq1						. LOCK	this_if:lock_cell_q1
  :                            352 						. ly, i	this_if:oq
00:0020B5 FF0F87              +353 	call	(write_ifq)
  :                            354 						. FREE	this_if:lock_cell_q1
00:0020B6 350000              +355 q2ifreex lret	0
  :                            356 
  :                            357 frame2p		. vector name is frame_to_protocol
00:0020B7 3E00B9              +358 	lcal	frame2proto
00:0020B8 3D0000              +359 	fret	0
  :                            360 
  :                            361 frame2proto
00:0020B9 68A000              +362 	lb	this_if:id
00:0020BA 28000A              +363 	sb	I_F_IDX
00:0020BB 100008              +364 	sx	I_F_P
  :                            365 
00:0020BC C5F800              +366 	aa	-IP,,xi			. the most requiring speed
00:0020BD C60191              +367 	jza	ipv4_rx
00:0020BE C5FFFA              +368 	aa	IP-ARP,,xi
00:0020BF C60F72              +369 	jza	arp_rx
00:0020C0 C59E9D              +370 	aa	ARP-IFCONFIG,,xi	. the least requiring speed
00:0020C1 C600C9              +371 	jza	call_ifconfig
00:0020C2 C50202              +372 	aa	IFCONFIG-ROUTE_CONFIG,,xi
00:0020C3 C600CB              +373 	jza	call_route_config
  :                            374 
  :                            375 	$if	0		. anu is a 2-instruction macro so a bit slower
  :                            376 	anu, xi	IP
  :                            377 	jzb	ipv4_rx		.  ipv4_rx does lret back into frame2p
  :                            378 	anu, xi	ARP
  :                            379 	jzb	arp_rx		.   arp_rx does lret back into frame2p
  :                            380 
  :                            381 	anu, xi	IFCONFIG
  :                            382         jzb	call_ifconfig	. call_ifconfig does lret back into frame2p
  :                            383 	anu, xi	ROUTE_CONFIG
  :                            384 	jzb	call_route_config . call_route_config does lret back into frame2p
  :                            385 	$endif
  :                            386 
00:0020C4 FD0001              +387 	MIB_ICOUNT48	this_if:inoproto
00:0020C5 2FA021              +387 
00:0020C6 5E00C8              +387 
00:0020C7 17A020              +387 
00:0020C8 350000              +388 	lret	0
  :                            389 
  :                            390 call_ifconfig
00:0020C9 FF0F88              +391 	call	(__ifconfig)
00:0020CA 350000              +392 	lret	0
  :                            393 
  :                            394 call_route_config
00:0020CB FF0F89              +395 	call	(__route_config)
00:0020CC 350000              +396 	lret	0
  :                            397 
  :                            398 	$if	0	. moved to ../drivers/queue.msm
  :                            399 
  :                            400 if_rq1		. vector name is if_readq1
  :                            401 	LOCK	this_if:lock_cell_q1
  :                            402 	ly, i	this_if:oq
  :                            403 	lcal	readqif
  :                            404 	FREE	this_if:lock_cell_q1
  :                            405 	fret	0
  :                            406 
  :                            407 	$endif
  :                            408 
  :                            409 if_initpool			. vector name far_initpool
00:0020CD 3E0E24              +410 	lcal	init_pool	. called from other iframes wanting
00:0020CE 3D0000              +411 	fret	0		. a message buffer initialised
  :                            412 
  :                            413 
  :                            414 ifsellmsg	. vector name is if_sell1
00:0020CF 3E0E65              +415 	lcal	sell1
00:0020D0 3D0000              +416 	fret	0
  :                            417 
00:0020D1 3E0E3C              +418 ifbuy	lcal	buy1	. vector name is if_buy
00:0020D2 3D0000              +419 	fret	0
  :                            420 
00:0020D3 3E0EC7              +421 ifrq	lcal	readq	. vector name is far_readq
00:0020D4 3D0000              +422 	fret	0
  :                            423 
00:0020D5 3E0EBC              +424 ifq2	lcal	q2	. vector name is far_q2
00:0020D6 3D0000              +425 	fret	0
  :                            426 
  :                            427 ifq2ifree	. vector name is if_q2ifree
00:0020D7 3E00A3              +428 	lcal	q2ifree
00:0020D8 3D0000              +429 	fret	0
  :                            430 
  :                            431 
  :                            432 iftx_nocheck	. vector name is if_tx_nocheck
00:0020D9 3E049D              +433 	lcal	tx_nocheck
00:0020DA 3D0000              +434 	fret	0
  :                            435 
  :                            73 
  :                            74 	$if		DRIVERS_BANK1=0
  :                            75 	$include	irelay
  :                            76 	$include	xrelay
  :                            77 	$endif
  :                            78 
  :                            79: 	$include	net_bank
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 	$if	NET_ADAPTING=0
  :                            41 
  :                            42 	$do	RX_BANKS<NET_BANKS/2,	$exit NET_BANKS too few and TX_BANKS too many
  :                            43 
  :                            44 base_netpage* $proc
  :                            45 	sabr	NET_BASE+?-1
  :                            46 	aa, xi	1
  :                            47 	$end
  :                            48 
  :                            49 base_netbank* $proc
  :                            50 	sabr	NET_BASE+?-1
  :                            51 	aa, xi	64
  :                            52 	$end
  :                            53 
  :                            54 
  :                            55 $(0)
  :                            56 net_bank
  :                            57 	inA	device$flags
  :                            58 	aa, xi	1
  :                            59 	anu	(SCALE_THRESHOLD)
  :                            60 
  :                            61 	jc	large_netbank
  :                            62 
  :                            63 small_netbank
  :                            64 	la	(4096*NET_BANKS)
  :                            65 	ii	BANK$
  :                            66 	jza	emergency_netbank
  :                            67 
  :                            68 	lx	(NET_BASE*/12)
  :                            69 .	sx	rx_buffers
  :                            70 
  :                            71 ?	$do	NET_BANKS,	base_netpage
  :                            72 
  :                            73 	la	(4096*RX_BANKS)
  :                            74 	lcal	init_pool
  :                            75 
  :                            76 	lx	(NET_BASE+RX_BANKS*/12)
  :                            77 .	sx	tx_buffers
  :                            78 	la	(4096*TX_BANKS)
  :                            79 	lcal	init_pool
  :                            80 
  :                            81 	lret	0
  :                            82 
  :                            83 large_netbank
  :                            84 	la	(262144*NET_BANKS)
  :                            85 	ii	BANK$
  :                            86 	jza	small_netbank
  :                            87 
  :                            88 	lx	(NET_BASE*/18:s)
  :                            89 .	sx	rx_buffers
  :                            90 
  :                            91 ?	$do	NET_BANKS,	base_netbank
  :                            92 
  :                            93 	la	(262144*RX_BANKS)
  :                            94 	lcal	init_pool
  :                            95 
  :                            96 	lx	(NET_BASE+RX_BANKS*/18:s)
  :                            97 .	sx	tx_buffers
  :                            98 	la	(262144*TX_BANKS)
  :                            99 	lcal	init_pool
  :                            100 
  :                            101 	lret	0
  :                            102 
  :                            103 emergency_netbank
  :                            104 
  :                            105 	.	can we get 16K then?
  :                            106 
  :                            107 	la, xi	4096*4
  :                            108 	ii	BANK$
  :                            109 	jza	minimal_emergency_netbank
  :                            110 
  :                            111 	lx	(NET_BASE*/12:s)
  :                            112 .	sx	rx_buffers
  :                            113 
  :                            114 ?	$do	3,	base_netpage
  :                            115 	sabr	NET_BASE+RX_BANKS	. keep 60*/18 as a reliable
  :                            116 					. pointer to transmission buffers
  :                            117 	la, xi	3*4096
  :                            118 	lcal	init_pool
  :                            119 
  :                            120 	lx	(NET_BASE+RX_BANKS*/12)
  :                            121 .	sx	tx_buffers
  :                            122 
  :                            123 	la, xi	4096
  :                            124 	lcal	init_pool
  :                            125 	lret	0
  :                            126 
  :                            127 
  :                            128 minimal_emergency_netbank
  :                            129 
  :                            130 	.	can we get 8K then?
  :                            131 
  :                            132 	la, xi	4096*2
  :                            133 	ii	BANK$
  :                            134 	jza	nowhere_to_go_netbank
  :                            135 
  :                            136 	lx	(NET_BASE*/12:s)
  :                            137 .	sx	rx_buffers
  :                            138 
  :                            139 	base_netpage
  :                            140 	sabr	NET_BASE+RX_BANKS
  :                            141 
  :                            142 	la, xi	4096
  :                            143 	lcal	init_pool
  :                            144 
  :                            145 	lx	(NET_BASE+RX_BANKS*/12)
  :                            146 .	sx	tx_buffers
  :                            147 
  :                            148 	la, xi	4096
  :                            149 	lcal	init_pool
  :                            150 	lret	0
  :                            151 
  :                            152 
  :                            153 nowhere_to_go_netbank
  :                            154 
  :                            155 .	if we couldn't get 8K for network buffers
  :                            156 .	then we won't start any new tasks either
  :                            157 
  :                            158 .	we should maybe set an LED pattern
  :                            159 .	and exit the IP process
  :                            160 
  :                            161 .	otherwise
  :                            162 .	we could program a flash to say it's always full
  :                            163 .	and no buffer is ever available in it
  :                            164 
  :                            165 	lret	0
  :                            166 
  :                            167 	$endif		.	not NET_ADAPTING
  :                            168 
  :                            169 net_free
00:0020DB 502180              +170 	lx	rx_buffers
00:0020DC B60E65              +171 	j	sell1
  :                            172 
  :                            173 net_free_txb
00:0020DD 502181              +174 	lx	tx_buffers
00:0020DE B60E65              +175 	j	sell1
  :                            176 
  :                            177 	$if	RX_FRAGMENTS
  :                            178 net_transfer
  :                            179 .	from q is y
  :                            180 .	to q is a
  :                            181 .	strictly from head of fromq
  :                            182 .	to tail of 2q
  :                            183 
  :                            184 	push	a
  :                            185 
  :                            186 net_transfer1
  :                            187 	lcal	readq
  :                            188 	jza	net_transferx
  :                            189 	lb	descriptor:dgram, a
  :                            190 	push	dgram:flags_fragment, b
  :                            191 	push	y
  :                            192 	ly	2, sp
  :                            193 	lcal	q2
  :                            194 	pop	y
  :                            195 	pop	a
  :                            196 	and, xi	IP_MORE
  :                            197 	jnza	net_transfer1
  :                            198 
  :                            199 net_transferx
  :                            200 	pop	a
  :                            201 	lret	0
  :                            202 
  :                            203 
  :                            204 net_drop
  :                            205 .	from queue is	y
  :                            206 
  :                            207 	push	x
  :                            208 
  :                            209 net_drop1
  :                            210 	lcal	readq
  :                            211 	jza	net_dropx
  :                            212 	lb	descriptor:dgram, a
  :                            213 	push	dgram:flags_fragment, b
  :                            214 	push	y
  :                            215 	lcal	net_free
  :                            216 	pop	y
  :                            217 	pop	a
  :                            218 	and,xi	IP_MORE
  :                            219 	jnza	net_drop1
  :                            220 net_dropx
  :                            221 	pop	x
  :                            222 	lret	0
  :                            223 
  :                            224 	$else		.	RX_FRAGMENTS
  :                            225 
  :                            226 net_transfer
00:0020DF F80004              +227 	push	a
00:0020E0 3E0EC7              +228 	lcal	readq
00:0020E1 C600E6              +229 	jza	net_transferx
00:0020E2 F80003              +230 	push	y
00:0020E3 58F001              +231 	ly	1, sp
00:0020E4 3E0EBC              +232 	lcal	q2
00:0020E5 380003              +233 	pop	y
  :                            234 net_transferx
00:0020E6 380004              +235 	pop	a
00:0020E7 350000              +236 	lret	0
  :                            237 
  :                            238 net_drop
00:0020E8 F80002              +239 	push	x
00:0020E9 3E0EC7              +240 	lcal	readq
00:0020EA C600EE              +241 	jza	net_dropx
00:0020EB F80003              +242 	push	y
00:0020EC 3E00DB              +243 	lcal	net_free
00:0020ED 380003              +244 	pop	y
  :                            245 net_dropx
00:0020EE 380002              +246 	pop	x
00:0020EF 350000              +247 	lret	0
  :                            248 
  :                            249 net_free_txdatagram
00:0020F0 9F0002              +250 	dpush	x
00:0020F1 3E0EC7              +251 	lcal	readq
00:0020F2 C600F4              +252 	jza	net_free_txdatagramx
00:0020F3 3E00DD              +253 	lcal	net_free_txb
  :                            254 net_free_txdatagramx
  :                            255 
00:0020F4 380002              +256 	dpop	x
00:0020F5 380003              +256 
00:0020F6 350000              +257 	lret	0
  :                            258 
  :                            259 	$endif		.	not RX_FRAGMENTS
  :                            260 
  :                            261 net_pass_xcall
00:0020F7 3E00DF              +262 	lcal	net_transfer
00:0020F8 3D0000              +263 	fret	0
  :                            264 
  :                            265 
  :                            266 
  :                            80: 	$include	net_buff
  :                            1 .	acquire storage for initial socket buffers
  :                            2 .	one quarter of executable space
  :                            3 .	maximum 16 address windows
  :                            4 
  :                            5 
  :                            6 NET_BUFFER_THRESHOLD	$equ	2*64
  :                            7 
  :                            8 net_buffers
00:0020F9 750048              +9 	ii	TOTAL$FREE	. total words all free banks
00:0020FA 16000D              +10 	dsr	12+1		. translate to half of free pages
00:0020FB 400005              +11 	lr	b
  :                            12 
00:0020FC 040080              +13 	inA	128		. index highest page in memory
00:0020FD A00F8A              +14 	and	(03FFFFF)
00:0020FE C50004              +15 	aa, xi	1+3		. # pages + rounding
00:0020FF 060002              +16 	sar	2		. calculate a quarter
  :                            17 
00:002100 D80004              +18 	anb	a		
00:002101 7E0103              +19 	jc	net_request_allowable
00:002102 600000              +20 	la	r		. change the initial request
  :                            21 				. to half the remaining available
  :                            22 net_request_allowable
  :                            23 
00:002103 680000              +24 	lb	r		. are < 1.5 banks free?
00:002104 CDFFD0              +25 	ab, xi	-96/2		. if so this request should be 0.25 banks
  :                            26 
00:002105 C5FFE0              +27 	aa, xi	-NET_BUFFER_THRESHOLD/4	. 2 banks or less ?
00:002106 EE0108              +28 	jnb	net_buffer_pages
00:002107 7E0117              +29 	jc	net_buffer_banks
  :                            30 
  :                            31 .	acquisition will be in pages up to 64Kwords
  :                            32 
  :                            33 net_buffer_pages
00:002108 C5001F              +34 	aa, xi	NET_BUFFER_THRESHOLD/4-1
00:002109 A5000F              +35 	and, xi	15
00:00210A 400004              +36 	lr	a
00:00210B C50001              +37 	aa, xi	1
00:00210C 26000C              +38 	sal	12
  :                            39 
00:00210D 3E0139              +40 	lcal	net_buffer_request
00:00210E F80005              +41 	push	b
  :                            42 
00:00210F 6D0030              +43 	lb	48,,xi
  :                            44 net_buffer_page
00:002110 34D000              +45 	sabr	0, b
00:002111 CD0001              +46 	ab, xi	1
00:002112 C50001              +47 	aa, xi	1
00:002113 1E0110              +48 	jdr	net_buffer_page
  :                            49 	
00:002114 380005              +50 	pop	b
00:002115 500F8B              +51 	lx	(NET_BASE*/12)
  :                            52 
00:002116 B60127              +53 	j	netpool_initial
  :                            54 
  :                            55 .	acquisition will be in banks up to 4 MWords
  :                            56 	
  :                            57 net_buffer_banks
00:002117 C5001F              +58 	aa, xi	NET_BUFFER_THRESHOLD/4-1
00:002118 A503C0              +59 	and, xi	15*/6
00:002119 680004              +60 	lb	a
00:00211A 0E0006              +61 	sbr	6
00:00211B 400005              +62 	lr	b
00:00211C C50040              +63 	aa, xi	64
00:00211D 26000C              +64 	sal	12
  :                            65 
00:00211E 3E0139              +66 	lcal	net_buffer_request
00:00211F F80005              +67 	push	b
  :                            68 
00:002120 6D0030              +69 	lb, xi	48
  :                            70 net_buffer_bank
00:002121 34D000              +71 	sabr	0, b
00:002122 CD0001              +72 	ab, xi	1
00:002123 C50040              +73 	aa, xi	64
00:002124 1E0121              +74 	jdr	net_buffer_bank
  :                            75 
00:002125 380005              +76 	pop	b
00:002126 500F81              +77 	lx	(NET_BASE*/18:s)
  :                            78 
  :                            79 netpool_initial
00:002127 600005              +80 	la	b			. size of granted memory request
  :                            81 
  :                            82 	$if	NETSERVER_INTENSIVE$	. expecting more transmission than reception
00:002128 0E0001              +83 	sbr	1			. calculate one half for txbuffers
  :                            84 	$else
  :                            85 	sbr	2			. calculate one quarter for txbuffers
  :                            86 	$endif
  :                            87 
00:002129 D00005              +88 	ana	b			. calculate three quarters for rxbuffers
  :                            89 
00:00212A 8F0002              +90 	qpush	x
00:00212B 600002              +91 	la	x			. rx_buffers address
  :                            92 
00:00212C 552180              +93 	lx	rx_buffers,,xi		. destination in vectors
00:00212D 750054              +94 	ii	WRITE_XVECTOR$
00:00212E C0F002              +95 	aa	2, sp			. + size of rx buffers
00:00212F 552181              +96 	lx	tx_buffers,,xi		. = tx_buffers address
00:002130 750054              +97 	ii	WRITE_XVECTOR$
  :                            98 
00:002131 60F002              +99 	la	2, sp			. rxbuffers size
00:002132 50F000              +100 	lx	0, sp			. = rx_buffers pointer in vectors
00:002133 3E0E24              +101 	lcal	init_pool		. initialise rxbuffers
00:002134 502181              +102 	lx	tx_buffers
00:002135 60F003              +103 	la	3, sp			. retrieve txbuffers size
00:002136 3E0E24              +104 	lcal	init_pool
  :                            105 
00:002137 870002              +106 	qpop	x
  :                            107 
00:002138 350000              +108 	lret	0
  :                            109 
  :                            110 					. this request is made before others
  :                            111 					. except the area containing instructions plus
  :                            112 					. static data / TCB / B1 frames / vector bank
  :                            113 					. which may make a quarter too much to ask
  :                            114 net_buffer_request
00:002139 F80004              +115 	push	a
00:00213A 750043              +116 	ii	BANK$
00:00213B 380005              +117 	pop	b
00:00213C D60149              +118 	jnza	net_buffer_acquired
00:00213D 0E0001              +119 	sbr	1			. halve the request until a bank
00:00213E 600005              +120 	la	b			. is granted or is not
00:00213F 480F83              +121 	lk	(-262144)		. does the request size remain # banks?
00:002140 AF0F8C              +122 	mta	(0)			. ask again if so
00:002141 B60139              +123 	j	net_buffer_request
00:002142 480F8D              +124 	lk	(-65536)		. has the request size changed
00:002143 AF0F8C              +125 	mta	(0)			. from banks to < 1 bank? Then
00:002144 600F8E              +126 	la	(65536)			. its size restarts at 16 pages
00:002145 4DF000              +127 	lk, xi	-4096			. has the request diminished
00:002146 AF0F8C              +128 	mta	(0)			. to < 4096?
00:002147 B60139              +129 	j	net_buffer_request	. ask again if still > 4095
00:002148 750046              +130 	ii	EXIT$
  :                            131 net_buffer_acquired
00:002149 350000              +132 	lret	0
  :                            133 
  :                            81: 	$include	ipv4
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 HEADER_LONGWORDS $equ	d$save	. 16 used in receive
  :                            42 TP_HEADER	$equ	d$save1	. 17 used in receive and transmit
  :                            43 
  :                            44 I_F_IDX		$equ	10	.   used in receive
  :                            45 UPROTOCOL_BYTES	$equ	11	.   used in receive
  :                            46 
  :                            47 I_F_P		$equ	8	. used in receive
  :                            48 FLAGS_FRAGMENT	$equ	8	. used in receive
  :                            49 
  :                            50 . TX_AXW		$equ	8	. used in transmit
  :                            51 . TX_FRAME	$equ	9	. used in receive and transmit
  :                            52 
  :                            53 HEADER_BYTES	$equ	d$save	. 16 used in transmit
  :                            54 . MTU		$equ	d$save1	. 17 used in transmit
  :                            55 I_F		$equ	d$save2	. 19 used in transmit
  :                            56 
  :                            57 TX_FLAG_OFFSET	$equ	10	. used in tranmsit
  :                            58 . TX_DATAGRAML	$equ	11	. used in transmit = unfragmented datagram
  :                            59 				. generated in interfaces = xmitted frame
  :                            60 
  :                            61 DYNAMIC_IP_HEADER $equ	0
  :                            62 		. if IP header length cannot be known at socket layer
  :                            63 		. then make this a multiple of 4 > 20 and < 64
  :                            64 		. to give a fixed large space for IP to add header
  :                            65 		. options
  :                            66 
  :                            67 		. otherwise IP header size is fixed when the socket
  :                            68 		. layer acquires a buffer
  :                            69 
  :                            70 $(71::,sp)
47:000000                     +71 dgram	datagram
47:000001                     +71 
47:000002                     +71 
47:000003                     +71 
47:000004                     +71 
47:000005                     +71 
47:000006                     +71 
47:000008                     +71 
  :                            72 
  :                            73 $(70::,fp)
  :                            74 descriptor acw
  :                            75 
  :                            76 $(66::,x)
42:000000                     +77 ifaddr  netv4
42:000001                     +77 
42:000002                     +77 
42:000003                     +77 
42:000005                     +77 
42:000007                     +77 
  :                            78 
  :                            79 $(66::, x)
42:000000                     +80 ro	route
42:000001                     +80 
42:000002                     +80 
42:000003                     +80 
42:000005                     +80 
42:000007                     +80 
42:000009                     +80 
  :                            81 
  :                            82 $(66::, x)
  :                            83 nframe	netframe
  :                            84 
  :                            85 $(1)
  :                            86 
  :                            87 
  :                            88: 	$include	routes
(+01)18
01:00024A 000275              +1 route_list*	+	route_(5)	. search chain head, RTA1 <-> emulator platform point2point
(+01)18
01:00024B 000289              +2 route_free*	+	route_(7)	. available storage new routes chain head
(+01)18
01:00024C 00024D              +3 route_lexical*	+	route_(1)	. MIB-II display order chain head
  :                            4 
  :                            5 .			dest	   	mask		gateway		i_f[:indirect]	  next_search	next_lexical
  :                            6 .			____		____		_______		______________	  ___________	____________
  :                            7 
01:00024D 000000              +8 route_(1)	route	0.0.0.0		0.0.0.0         192.168.0.254	IFGW:RELAY_ROUTE  0		route_(2)
(+01)18
01:00024E 000257              +8 
01:00024F 800004              +8 
01:000250 000000000000        +8 
01:000252 000000000000        +8 
01:000254 00C0A80000FE        +8 
01:000256 000000              +8 
(+01)18
01:000257 00024D              +9 route_(2)	route	127.0.0.0	255.0.0.0       127.0.0.1  	1    		  route_(1)	route_(3)
(+01)18
01:000258 000261              +9 
01:000259 000001              +9 
01:00025A 007F00000000        +9 
01:00025C 00FF00000000        +9 
01:00025E 007F00000001        +9 
01:000260 000008              +9 
(+01)18
01:000261 00026B              +10 route_(3)	route	169.254.0.0	255.255.0.0	169.254.0.0	ANYNET		  route_(4)	route_(4)
(+01)18
01:000262 00026B              +10 
01:000263 000000              +10 
01:000264 00A9FE000000        +10 
01:000266 00FFFF000000        +10 
01:000268 00A9FE000000        +10 
01:00026A 000010              +10 
(+01)18
01:00026B 000257              +11 route_(4)	route	172.16.0.0	255.240.0.0	172.29.7.66 	IFGW 		  route_(2)	route_(5)
(+01)18
01:00026C 000275              +11 
01:00026D 000004              +11 
01:00026E 00AC10000000        +11 
01:000270 00FFF0000000        +11 
01:000272 00AC1D000742        +11 
01:000274 00000C              +11 
(+01)18
01:000275 00027F              +12 route_(5)	route	172.29.7.0	255.255.255.192	172.29.7.8	3    		  route_(6)	route_(6)
(+01)18
01:000276 00027F              +12 
01:000277 000003              +12 
01:000278 00AC1D000700        +12 
01:00027A 00FFFF00FFC0        +12 
01:00027C 00AC1D000708        +12 
01:00027E 00001A              +12 
  :                            13 . route_(6)	route	172.29.7.6	255.255.255.255	172.29.7.7	2    		  route_(5)	route_(7)
(+01)18
01:00027F 000261              +14 route_(6)	route	192.168.0.0	255.255.0.0	172.29.7.8	IFGW 		  route_(3)
01:000280 000000              +14 
01:000281 000004              +14 
01:000282 00C0A8000000        +14 
01:000284 00FFFF000000        +14 
01:000286 00AC1D000708        +14 
01:000288 000010              +14 
  :                            15 
  :                            16 
                                ?	$do	ROUTES-6,;
(+01)18
01:000289 000293              +18 route_(?+6)	route	0.0.0.0   0.0.0.0   0.0.0.0   0   route_(?+7)
01:00028A 000000              +18 
01:00028B 000000              +18 
01:00028C 000000000000        +18 
01:00028E 000000000000        +18 
01:000290 000000000000        +18 
01:000292 000000              +18 
(+01)18
01:000293 00029D              +18 
01:000294 000000              +18 
01:000295 000000              +18 
01:000296 000000000000        +18 
01:000298 000000000000        +18 
01:00029A 000000000000        +18 
01:00029C 000000              +18 
(+01)18
01:00029D 0002A7              +18 
01:00029E 000000              +18 
01:00029F 000000              +18 
01:0002A0 000000000000        +18 
01:0002A2 000000000000        +18 
01:0002A4 000000000000        +18 
01:0002A6 000000              +18 
(+01)18
01:0002A7 0002B1              +18 
01:0002A8 000000              +18 
01:0002A9 000000              +18 
01:0002AA 000000000000        +18 
01:0002AC 000000000000        +18 
01:0002AE 000000000000        +18 
01:0002B0 000000              +18 
(+01)18
01:0002B1 0002BB              +18 
01:0002B2 000000              +18 
01:0002B3 000000              +18 
01:0002B4 000000000000        +18 
01:0002B6 000000000000        +18 
01:0002B8 000000000000        +18 
01:0002BA 000000              +18 
(+01)18
01:0002BB 0002C5              +18 
01:0002BC 000000              +18 
01:0002BD 000000              +18 
01:0002BE 000000000000        +18 
01:0002C0 000000000000        +18 
01:0002C2 000000000000        +18 
01:0002C4 000000              +18 
(+01)18
01:0002C5 0002CF              +18 
01:0002C6 000000              +18 
01:0002C7 000000              +18 
01:0002C8 000000000000        +18 
01:0002CA 000000000000        +18 
01:0002CC 000000000000        +18 
01:0002CE 000000              +18 
(+01)18
01:0002CF 0002D9              +18 
01:0002D0 000000              +18 
01:0002D1 000000              +18 
01:0002D2 000000000000        +18 
01:0002D4 000000000000        +18 
01:0002D6 000000000000        +18 
01:0002D8 000000              +18 
(+01)18
01:0002D9 0002E3              +18 
01:0002DA 000000              +18 
01:0002DB 000000              +18 
01:0002DC 000000000000        +18 
01:0002DE 000000000000        +18 
01:0002E0 000000000000        +18 
01:0002E2 000000              +18 
(+01)18
01:0002E3 0002ED              +18 
01:0002E4 000000              +18 
01:0002E5 000000              +18 
01:0002E6 000000000000        +18 
01:0002E8 000000000000        +18 
01:0002EA 000000000000        +18 
01:0002EC 000000              +18 
(+01)18
01:0002ED 0002F7              +18 
01:0002EE 000000              +18 
01:0002EF 000000              +18 
01:0002F0 000000000000        +18 
01:0002F2 000000000000        +18 
01:0002F4 000000000000        +18 
01:0002F6 000000              +18 
(+01)18
01:0002F7 000301              +18 
01:0002F8 000000              +18 
01:0002F9 000000              +18 
01:0002FA 000000000000        +18 
01:0002FC 000000000000        +18 
01:0002FE 000000000000        +18 
01:000300 000000              +18 
(+01)18
01:000301 00030B              +18 
01:000302 000000              +18 
01:000303 000000              +18 
01:000304 000000000000        +18 
01:000306 000000000000        +18 
01:000308 000000000000        +18 
01:00030A 000000              +18 
(+01)18
01:00030B 000315              +18 
01:00030C 000000              +18 
01:00030D 000000              +18 
01:00030E 000000000000        +18 
01:000310 000000000000        +18 
01:000312 000000000000        +18 
01:000314 000000              +18 
(+01)18
01:000315 00031F              +18 
01:000316 000000              +18 
01:000317 000000              +18 
01:000318 000000000000        +18 
01:00031A 000000000000        +18 
01:00031C 000000000000        +18 
01:00031E 000000              +18 
(+01)18
01:00031F 000329              +18 
01:000320 000000              +18 
01:000321 000000              +18 
01:000322 000000000000        +18 
01:000324 000000000000        +18 
01:000326 000000000000        +18 
01:000328 000000              +18 
(+01)18
01:000329 000333              +18 
01:00032A 000000              +18 
01:00032B 000000              +18 
01:00032C 000000000000        +18 
01:00032E 000000000000        +18 
01:000330 000000000000        +18 
01:000332 000000              +18 
01:000333 000000              +18 
01:000334 000000              +18 
01:000335 000000              +18 
01:000336 000000000000        +18 
01:000338 000000000000        +18 
01:00033A 000000000000        +18 
01:00033C 000000              +18 
  :                            19 
  :                            89: 	$include	netaddr
  :                            1 
01:00033D 000000              +2 net_alock*	0
(+01)18
01:00033E 000340              +3 net_alexical* +	net_address(1)
(+01)18
01:00033F 000388              +4 net_afree* +	net_address(INTERFACES+1)
01:000340 000000              +5 net_address(1)	netv4	127.0.0.1  255.0.0.0     127.255.255.255 1 0 net_address(2)	. next is zero and lexical is linked
(+01)18
01:000341 000349              +5 
01:000342 000001              +5 
01:000343 007F00000001        +5 
01:000345 00FF00000000        +5 
01:000347 007FFF00FFFF        +5 
  :                            6 
  :                            7 . net_address(2)	netv4	172.29.7.7 255.255.255.255 172.29.15.255 2 0 net_address(3)
  :                            8 
                                ?	$do	INTERFACES-1,;
01:000349 000000              +10 net_address(?+1) netv4	0.0.0.0	0.0.0.0	0.0.0.0	?+2					. next is zero and lexical is zero
01:00034A 000000              +10 
01:00034B 000003              +10 
01:00034C 000000000000        +10 
01:00034E 000000000000        +10 
01:000350 000000000000        +10 
01:000352 000000              +10 
01:000353 000000              +10 
01:000354 000004              +10 
01:000355 000000000000        +10 
01:000357 000000000000        +10 
01:000359 000000000000        +10 
01:00035B 000000              +10 
01:00035C 000000              +10 
01:00035D 000005              +10 
01:00035E 000000000000        +10 
01:000360 000000000000        +10 
01:000362 000000000000        +10 
01:000364 000000              +10 
01:000365 000000              +10 
01:000366 000006              +10 
01:000367 000000000000        +10 
01:000369 000000000000        +10 
01:00036B 000000000000        +10 
01:00036D 000000              +10 
01:00036E 000000              +10 
01:00036F 000007              +10 
01:000370 000000000000        +10 
01:000372 000000000000        +10 
01:000374 000000000000        +10 
01:000376 000000              +10 
01:000377 000000              +10 
01:000378 000008              +10 
01:000379 000000000000        +10 
01:00037B 000000000000        +10 
01:00037D 000000000000        +10 
01:00037F 000000              +10 
01:000380 000000              +10 
01:000381 000009              +10 
01:000382 000000000000        +10 
01:000384 000000000000        +10 
01:000386 000000000000        +10 
  :                            11 
                                ?	$do	NET_ADDRESSES-INTERFACES,;
(+01)18
01:000388 000391              +13 net_address(?+INTERFACES)	netv4	0.0.0.0 0.0.0.0 0.0.0.0	0 net_address(?+INTERFACES+1)
01:000389 000000              +13 
01:00038A 000000              +13 
01:00038B 000000000000        +13 
01:00038D 000000000000        +13 
01:00038F 000000000000        +13 
(+01)18
01:000391 00039A              +13 
01:000392 000000              +13 
01:000393 000000              +13 
01:000394 000000000000        +13 
01:000396 000000000000        +13 
01:000398 000000000000        +13 
(+01)18
01:00039A 0003A3              +13 
01:00039B 000000              +13 
01:00039C 000000              +13 
01:00039D 000000000000        +13 
01:00039F 000000000000        +13 
01:0003A1 000000000000        +13 
(+01)18
01:0003A3 0003AC              +13 
01:0003A4 000000              +13 
01:0003A5 000000              +13 
01:0003A6 000000000000        +13 
01:0003A8 000000000000        +13 
01:0003AA 000000000000        +13 
(+01)18
01:0003AC 0003B5              +13 
01:0003AD 000000              +13 
01:0003AE 000000              +13 
01:0003AF 000000000000        +13 
01:0003B1 000000000000        +13 
01:0003B3 000000000000        +13 
(+01)18
01:0003B5 0003BE              +13 
01:0003B6 000000              +13 
01:0003B7 000000              +13 
01:0003B8 000000000000        +13 
01:0003BA 000000000000        +13 
01:0003BC 000000000000        +13 
(+01)18
01:0003BE 0003C7              +13 
01:0003BF 000000              +13 
01:0003C0 000000              +13 
01:0003C1 000000000000        +13 
01:0003C3 000000000000        +13 
01:0003C5 000000000000        +13 
(+01)18
01:0003C7 0003D0              +13 
01:0003C8 000000              +13 
01:0003C9 000000              +13 
01:0003CA 000000000000        +13 
01:0003CC 000000000000        +13 
01:0003CE 000000000000        +13 
(+01)18
01:0003D0 0003D9              +13 
01:0003D1 000000              +13 
01:0003D2 000000              +13 
01:0003D3 000000000000        +13 
01:0003D5 000000000000        +13 
01:0003D7 000000000000        +13 
(+01)18
01:0003D9 0003E2              +13 
01:0003DA 000000              +13 
01:0003DB 000000              +13 
01:0003DC 000000000000        +13 
01:0003DE 000000000000        +13 
01:0003E0 000000000000        +13 
(+01)18
01:0003E2 0003EB              +13 
01:0003E3 000000              +13 
01:0003E4 000000              +13 
01:0003E5 000000000000        +13 
01:0003E7 000000000000        +13 
01:0003E9 000000000000        +13 
(+01)18
01:0003EB 0003F4              +13 
01:0003EC 000000              +13 
01:0003ED 000000              +13 
01:0003EE 000000000000        +13 
01:0003F0 000000000000        +13 
01:0003F2 000000000000        +13 
(+01)18
01:0003F4 0003FD              +13 
01:0003F5 000000              +13 
01:0003F6 000000              +13 
01:0003F7 000000000000        +13 
01:0003F9 000000000000        +13 
01:0003FB 000000000000        +13 
(+01)18
01:0003FD 000406              +13 
01:0003FE 000000              +13 
01:0003FF 000000              +13 
01:000400 000000000000        +13 
01:000402 000000000000        +13 
01:000404 000000000000        +13 
(+01)18
01:000406 00040F              +13 
01:000407 000000              +13 
01:000408 000000              +13 
01:000409 000000000000        +13 
01:00040B 000000000000        +13 
01:00040D 000000000000        +13 
01:00040F 000000              +13 
01:000410 000000              +13 
01:000411 000000              +13 
01:000412 000000000000        +13 
01:000414 000000000000        +13 
01:000416 000000000000        +13 
  :                            14 											. next is linked free chain
  :                            15 											. lexical is zero
  :                            90 
  :                            91 $(0)
  :                            92 
  :                            93 ipv4
  :                            94 	$if	IPV4_FRAGMENTED_DGRAMS
  :                            95 	lcal	ipv4_fragment:timeouts
  :                            96 	$endif
  :                            97 
00:00214A 350000              +98 	lret	0
  :                            99 
  :                            100 construct_xdgram
  :                            101 			. id is obtained
  :                            102 			. the datagram is as first+final
  :                            103 			. i.e without regard to the MTU
  :                            104 			. and it might later get fragmented
  :                            105 			. on transmission and / or get
  :                            106 			. IP header options modified
  :                            107 
  :                            108 			. so it is not checksummed here
  :                            109 
  :                            110 			. in the case of dual-ported
  :                            111 			. buffer interfaces, checksum
  :                            112 			. happens as the IP headers
  :                            113 			. are transferred from interface
  :                            114 			. queues to device buffers
  :                            115 
  :                            116 			. the descriptor is in X
  :                            117 			. and the datagram is in Y
  :                            118 
(+01)0f
00:00214B CF0508              +119 	dl	ipOutRequests:i
00:00214C D70F7B              +120 	da	(1:d)
(+01)0f
00:00214D C70508              +121 	ds	ipOutRequests:i
00:00214E A80F8F              +122 	andB	(00FFFF)
00:00214F 28B002              +123 	sb	dgram:id, y
00:002150 68B000              +124 	lb	dgram:vers_ihl_tos, y
00:002151 0E0006              +125 	sbr	8-2
00:002152 AD003C              +126 	andB,xi	15*/2
00:002153 280010              +127 	sb	HEADER_BYTES
00:002154 C8A003              +128 	ab	descriptor:bytes, x
00:002155 60B003              +129 	la	dgram:flags_fragment, y
00:002156 A54000              +130 	and, xi	IP_DNF
00:002157 20B003              +131 	sa	dgram:flags_fragment, y
00:002158 30B005              +132 	z	dgram:checksum, y
00:002159 350000              +133 	lret	0
  :                            134 
  :                            135 .	vector name is __iproute
  :                            136 .	target address is in 6:7
  :                            137 .	return is a route at x->
  :                            138 
  :                            139 
  :                            140 .	vector name
  :                            141 
  :                            142 ip_route_advance		. the target network address is in 6:7
  :                            143 
  :                            144 				. this is called if udp sendto does not
  :                            145 				. have a from-address available, which
  :                            146 				. would prevent checksum
00:00215A 3E015C              +147 	lcal	ip_route
  :                            148 				. the from-address is the default local
  :                            149 				. address of the interface of the route
00:00215B 3D0000              +150 	fret	0
  :                            151 
  :                            152 
  :                            153 ip_route
(+01)0f
00:00215C 50024A              +154 	lx	route_list
  :                            155 ip_next_route
00:00215D CFA005              +156 	dl	ro:mask
00:00215E A00006              +157 	and	6
00:00215F A80007              +158 	andB	7
00:002160 DFA003              +159 	dan	ro:net
00:002161 7C0166              +160 	jdz	ip_route_x
00:002162 50A000              +161 	lx	ro:next
00:002163 700002              +162 	tz	x
00:002164 B6015D              +163 	j	ip_next_route
(+01)10
00:002165 550333              +164 	lx, xi	route_(ROUTES)	. this should not happen
  :                            165 ip_route_x
00:002166 350000              +166 	lret	0
  :                            167 
  :                            168 .	ip_send is a far call (ipsend) to allow a raw socket interface
  :                            169 
  :                            170 
  :                            171 ip_send				. destination is already in 6:7
  :                            172 
  :                            173 				. temporary change to IP task B1
  :                            174 				. goes here
  :                            175 
00:002167 652073              +176 	la, xi	VECTOR_B1(1)
00:002168 750057              +177 	ii	KERNEL$B1
  :                            178 				. call before return B1$ takes B1
  :                            179 				. from caller's vector bank
  :                            180 				. so if you nest calls that both
  :                            181 				. change to a service B1
  :                            182 				. you may have to repeat KERNEL$B1
  :                            183 				. but you are not likely to do this
  :                            184 
00:002169 3E014B              +185 	lcal	construct_xdgram
00:00216A 180013              +186 	sy	TX_DATAGRAM
  :                            187 
00:00216B 100008              +188 	sx	8		. the descriptor
00:00216C A80F8A              +189 	andB	(03FFFFF)	. reassembled datagram length
  :                            190 				. i.e first IP header + payload
  :                            191 
  :                            192 				. a contains DNF flag or not
  :                            193 
00:00216D C7000A              +194 	ds	10		. IP_DNF:datagramreassembledlength
  :                            195 
00:00216E 3E015C              +196 	lcal	ip_route
  :                            197 				. on the emulated machine routing picks
  :                            198 				. an emulated interface
  :                            199 				. but does not really choose the
  :                            200 				. the next hop. It is always as if
  :                            201 				. the route were direct
  :                            202 
00:00216F 40A002              +203 	lr	ro:i_f
  :                            204 
00:002170 CF0006              +205 	dl	6		. direct route = next_hop is destination
00:002171 780000              +206 	tp	r
00:002172 CFA007              +207 	dl	ro:next_hop	. indirect route = gateway from route table
  :                            208 
  :                            209 
  :                            210 
00:002173 580008              +211 	ly	8		. the descriptor
00:002174 50B001              +212 	lx	descriptor:frame, y
  :                            213 				. route table not now visible
  :                            214 
00:002175 C7A00E              +215 	ds	nframe:next_hop, x	. that's used later
  :                            216 				. when we need to do ARP
  :                            217 				. network address of next hop
  :                            218 
00:002176 100009              +219 	sx	TX_FRAME
  :                            220 
00:002177 600000              +221 	la	r		. the interface #
00:002178 D6017F              +222 	jnza	ip_homed_route
00:002179 580013              +223 	ly	TX_DATAGRAM
00:00217A CFB006              +224 	dl	dgram:ipsource, y
00:00217B 3E0257              +225 	lcal	ip_source_ifidx	. the route is not homed
  :                            226 				. ifidx must be obtained from ip source address
00:00217C D6017F              +227 	jnza	ip_homed_route
00:00217D 6DFFBF              +228 	lb, xi	-NO_PATH	. that didn't work either. Count or bad result in b
00:00217E B6018F              +229 	j	ip_send_x	. should maybe think about
  :                            230 				. freeing output buffers on send fail
  :                            231 				. when not TCP
  :                            232 ip_homed_route
  :                            233 
00:00217F A57FFF              +234 	and, xi	32767
(+01)10
00:002180 C50000              +235 	aa, xi	i_f_pointer_array
  :                            236 
00:002181 50C000              +237 	lx	0, a		. the interface pointer address
00:002182 100012              +238 	sx	I_F
  :                            239 
  :                            240 	$if	1		. do source fragmentation in advance
  :                            241 				. at datagram acquisition
00:002183 CF000A              +242 	dl	10		. DNF flag, length
00:002184 F8A004              +243 	push	this_if:mtu
00:002185 380011              +244 	pop	MTU
00:002186 C6018B              +245 	jza	ip_send_now
  :                            246 
00:002187 600011              +247 	la	MTU
00:002188 D00005              +248 	ana	b
  :                            249 
00:002189 600008              +250 	la	8		. the descriptor
00:00218A 7E018C              +251 	jc	ip_send_now1
  :                            252 
  :                            253 .	lcal	net_free_txbx	. leave it to source fragmentation
  :                            254 .	lb, xi	-OVERSIZE
  :                            255 .	j	ip_send_x
  :                            256 
  :                            257 	$endif
  :                            258 
  :                            259 ip_send_now
00:00218B 600008              +260 	la	8		. the descriptor
  :                            261 ip_send_now1
  :                            262 
00:00218C F8000B              +263 	push	11
00:00218D 3E02C6              +264 	lcal	ipq_write
  :                            265 
00:00218E 380005              +266 	pop	b
  :                            267 
  :                            268 ip_send_x
  :                            269 				. call before return B1$ takes B1
  :                            270 				. from caller's vector bank
  :                            271 				. so if you nest calls that both
  :                            272 				. change to a service B1
  :                            273 				. you may have to repeat KERNEL$B1
  :                            274 				. but you are not likely to do this
  :                            275 
  :                            276 
00:00218F 750058              +277 	ii	B1$		. if the caller is a protocol in this task,
00:002190 3D0000              +278 	fret	0		. the IP task, it's the same B1
  :                            279 				. otherwise it isn't
  :                            280 
  :                            281 
  :                            282 .	ipv4_rx, input driver for a system with fixed dual ported
  :                            283 .	interface buffers
  :                            284 
  :                            285 .	this is an upward call from routine frames
  :                            286 
  :                            287 .	copying to socket-visible buffers is combined with
  :                            288 .	checksumming
  :                            289 
  :                            290 .	each word in the interface buffers is read only once
  :                            291 
  :                            292 .	ipv4_rx pushes and checks the IP headers in the
  :                            293 .	internal stack, which is a register array
  :                            294 
  :                            295 .	upper protocols obtain a buffer, then pop the IP headers
  :                            296 .	into it ahead of their own protocol message for
  :                            297 .	checksumming during transfer
  :                            298 
  :                            299 
  :                            300 ONE_TIME_SAVE1	$equ	x$save1
  :                            301 
  :                            302 ipv4_rx
  :                            303 	$if	1
00:002191 750076              +304 	ii	ONETIME_SAVE$
  :                            305 	$else
  :                            306 	lx	sp	
  :                            307 	sx	ONE_TIME_SAVE1
  :                            308 	$endif
  :                            309 
00:002192 FD0001              +310 	MIB_ICOUNT48	ipInReceives:i
(+01)0f
00:002193 2F04FB              +310 
00:002194 5E0196              +310 
(+01)0f
00:002195 1704FA              +310 
  :                            311 	
  :                            312 	$if	IPV4_OVERHAUL
  :                            313 
00:002196 6500A0              +314 	la	IPV4_OVERHAUL,,xi
00:002197 D00000              +315 	ana	r		. calculate internal stack load # words
  :                            316 
00:002198 5E019B              +317 	jnc	dgram_load(IPV4_OVERHAUL/8)
00:002199 060003              +318 	sar	3		. # blocks of 8 octets rounded up
00:00219A B6C19B              +319 	j	dgram_load(IPV4_OVERHAUL/8), a
  :                            320 
                                ?	$do	IPV4_OVERHAUL/8,dgram_load(IPV4_OVERHAUL/8-?+1)	;
00:00219B 8FB04C              +322 	qpush	IPV4_OVERHAUL/2-4*?, y
00:00219C 8FB048              +322 
00:00219D 8FB044              +322 
00:00219E 8FB040              +322 
00:00219F 8FB03C              +322 
00:0021A0 8FB038              +322 
00:0021A1 8FB034              +322 
00:0021A2 8FB030              +322 
00:0021A3 8FB02C              +322 
00:0021A4 8FB028              +322 
00:0021A5 8FB024              +322 
00:0021A6 8FB020              +322 
00:0021A7 8FB01C              +322 
00:0021A8 8FB018              +322 
00:0021A9 8FB014              +322 
00:0021AA 8FB010              +322 
00:0021AB 8FB00C              +322 
00:0021AC 8FB008              +322 
00:0021AD 8FB004              +322 
00:0021AE 8FB000              +322 
  :                            323 
00:0021AF 600000              +324 	la	r		. frame large enough for datagram?
00:0021B0 D0F001              +325 	ana	dgram:bytes
00:0021B1 5E020F              +326 	jnc	ipv4_rxz
  :                            327 
00:0021B2 60F000              +328 	la	dgram:vers_ihl_tos
00:0021B3 16000C              +329 	dsr	12
00:0021B4 C5FFFC              +330 	aa	-4,,xi		. is the header IPv4?
00:0021B5 D6020F              +331 	jnza	ipv4_rxz	. otherwise forget it
  :                            332 
00:0021B6 0E0014              +333 	sbr	20
00:0021B7 280010              +334 	sb	HEADER_LONGWORDS
00:0021B8 CDFFFB              +335 	ab	-5,,xi		. does it have >= minimal IP header?
00:0021B9 5E020F              +336 	jnc	ipv4_rxz	. not much use otherwise
  :                            337 
00:0021BA 680010              +338 	lb	HEADER_LONGWORDS
00:0021BB 2E0001              +339 	sbl	1
  :                            340 
00:0021BC C8000F              +341 	ab	sp
00:0021BD 280011              +342 	sb	TP_HEADER
  :                            343 
00:0021BE 6D000F              +344 	lb	15,,xi		 . maximum IP header words
00:0021BF D80010              +345 	anb	HEADER_LONGWORDS . scratch registers are jerst wonderful
00:0021C0 500005              +346 	lx	b
  :                            347 
00:0021C1 48F005              +348 	lk	dgram:checksum
00:0021C2 30F005              +349 	z	dgram:checksum
00:0021C3 CFF000              +350 	dl	dgram:vers_ihl_tos	. addend the first
  :                            351 
00:0021C4 B6A1C5              +352 	j	ipv4_qcheckin(15-1), x
  :                            353 
                                ?	$do	15-1,;
00:0021C5 D7F01C              +355 ipv4_qcheckin(15-?)	da	dgram:vers_ihl_tos+15*2-?*2	. add 2 words[28..2]
00:0021C6 D7F01A              +355 
00:0021C7 D7F018              +355 
00:0021C8 D7F016              +355 
00:0021C9 D7F014              +355 
00:0021CA D7F012              +355 
00:0021CB D7F010              +355 
00:0021CC D7F00E              +355 
00:0021CD D7F00C              +355 
00:0021CE D7F00A              +355 
00:0021CF D7F008              +355 
00:0021D0 D7F006              +355 
00:0021D1 D7F004              +355 
00:0021D2 D7F002              +355 
  :                            356 
00:0021D3 3E029F              +357 	lcal	check_complete
  :                            358 
00:0021D4 B80001              +359 	xorB	k		. is it the same?
00:0021D5 DE020F              +360 	jnzb	ipv4_rxz
  :                            361 
00:0021D6 08F005              +362 	sk	dgram:checksum	. put the checksum back
  :                            363 				. in case ICMP fires it all back with a DU
  :                            364 
  :                            365 
00:0021D7 CFF008              +366 	dl	dgram:ipdest
00:0021D8 500008              +367 	lx	I_F_P		. interface structure pointer
00:0021D9 3E0232              +368 	lcal	ipv4_forus?
00:0021DA B601E3              +369 	j	ipv4_yesforus
(+01)0f
00:0021DB 7004F8              +370 	tz	ipForwarding:i
00:0021DC 3E0252              +371 	lcal	ipv4_forward	. don't come back from that
00:0021DD B601E3              +372 	j	ipv4_yesforus	. unless forwarding to local host
  :                            373 
00:0021DE FD0001              +374 	MIB_ICOUNT48	ipInAddrErrors:i
(+01)0f
00:0021DF 2F04FF              +374 
00:0021E0 5E01E2              +374 
(+01)0f
00:0021E1 1704FE              +374 
00:0021E2 B6020F              +375 	j	ipv4_rxz
  :                            376 
  :                            377 ipv4_yesforus
00:0021E3 60F003              +378 	la	dgram:flags_fragment
00:0021E4 A53FFF              +379 	and	IP_MORE++IP_OFFSET_MASK,,xi
  :                            380 
  :                            381 	$if	IPV4_FRAGMENTED_DGRAMS
  :                            382 	jnza	ipv4_fragment
  :                            383 	$else
00:0021E5 D6020F              +384 	jnza	ipv4_rxz
  :                            385 	$endif
  :                            386 
  :                            387 . ipv4_rxbuffer_rq
  :                            388 
00:0021E6 68F001              +389 	lb	dgram:bytes
00:0021E7 600010              +390 	la	HEADER_LONGWORDS
00:0021E8 260002              +391 	sal	2
00:0021E9 D80004              +392 	anb	a		. upper protocol byte count
  :                            393 
00:0021EA 60F004              +394 	la	dgram:ttl_protocol
00:0021EB A500FF              +395 	and	255,,xi		. checksum seed for upper protocol
00:0021EC C70006              +396 	ds	6		. protocol:segment size for checksum in 6:7
  :                            397 
00:0021ED 28000B              +398 	sb	UPROTOCOL_BYTES
00:0021EE 60F001              +399 	la	dgram:bytes
00:0021EF D500A0              +400 	ana	IPV4_OVERHAUL,,xi		.
00:0021F0 7E01FD              +401 	jc	ipv4_uprotocol_checksum_addresses
  :                            402 
  :                            403 ipv4_round_stack_word		. turn off non-counted octets
00:0021F1 650000              +404 	la	0,,xi		. IP payload octet count is in b
00:0021F2 560002              +405 	drr	2		. now longword count is in b
00:0021F3 2E0001              +406 	sbl	1		. 2 * longwords - 1 = words - 2
00:0021F4 060016              +407 	sar	22		. and octet remainder in a
00:0021F5 C601FD              +408 	jza	ipv4_count_check . don't look outside the last longword of dgram
  :                            409 
00:0021F6 500011              +410 	lx	TP_HEADER
00:0021F7 800005              +411 	ax	b
00:0021F8 40CF90              +412 	lr	(0, 32, 16, 8q), a
00:0021F9 CFA000              +413 	dl	0, x
00:0021FA 168000              +414 	dsr	*r		. turn off some octets
00:0021FB 368000              +415 	dsl	*r		. in the last longword in the checksum
00:0021FC C7A000              +416 	ds	0, x
  :                            417 	
  :                            418 ipv4_count_check
  :                            419 
  :                            420 . ipv4_uprotocol_checksum		. checksum all that is in the internal stack
  :                            421 ipv4_uprotocol_checksum_addresses
00:0021FD CF0006              +422 	dl	6		. payload protocol : octet count
00:0021FE D7F006              +423 	da	dgram:ipsource
00:0021FF D7F008              +424 	da	dgram:ipdest
  :                            425 
  :                            426 . ipv4_checksum_udata_next
  :                            427 
00:002200 C70006              +428 	ds	6		. there may be more in the interface buffer
  :                            429 
  :                            430 ipv4_uproto_rx
00:002201 60F004              +431 	la	dgram:ttl_protocol
00:002202 A500FF              +432 	and	255,,xi
00:002203 500011              +433 	lx	TP_HEADER
  :                            434 
00:002204 C5FFEF              +435 	aa	-IPPROTO_UDP,,xi
00:002205 C60399              +436 	jza	udp_rxq
00:002206 C5000B              +437 	aa	IPPROTO_UDP-IPPROTO_TCP,,xi
00:002207 C60708              +438 	jza	tcp_rxq
00:002208 C50005              +439 	aa	IPPROTO_TCP-IPPROTO_ICMP,,xi
00:002209 C6031F              +440 	jza	icmp_rxq
  :                            441 
00:00220A B60383              +442 	j	icmp_noproto
  :                            443 
  :                            444 	$else			. IPV4_OVERHAUL 
  :                            445 
  :                            446 	$endif		. not IPV4_OVERHAUL
  :                            447 
  :                            448 ipv4_drop
00:00220B 60000E              +449 	la	fp
00:00220C 502180              +450 	lx	rx_buffers
00:00220D 700002              +451 	tz	x
00:00220E 3E0E65              +452 	lcal	sell1
  :                            453 
  :                            454 			. this was acquired to simplify the
  :                            455 			. task for the upper protocol
  :                            456 			. but we can give it back now:
  :                            457 			. the protocol requested is not
  :                            458 			. on offer
  :                            459 
  :                            460 . the upper protocol receive routines can jump here to finish
  :                            461 . but they need not.
  :                            462 
  :                            463 . they do need to restore K and SP in the same way as this
  :                            464 
  :                            465 ipv4_rxz
00:00220F 500091              +466 	lx	ONE_TIME_SAVE1
00:002210 10000F              +467 	sx	sp
00:002211 350000              +468 	lret	0
  :                            469 
  :                            470 ip_buy_datagram
00:002212 502181              +471 	lx	tx_buffers
  :                            472 ip_buy_datagram_alternate	. buying in a private bank (large volume TCP)
00:002213 F80005              +473 	push	b
00:002214 0E0007              +474 	sbr	7	. version / header L / TOS word
00:002215 AD001E              +475 	andB,xi	30	. number of words in header
00:002216 400005              +476 	lr	b	. length of IP header in words
00:002217 C50021              +477 	aa, xi	ROUTING_HEADER*2+1	. routing buffer + rounding
00:002218 060001              +478 	sar	1	. number of words in IP payload
  :                            479 			. + routing header
00:002219 C00005              +480 	aa	b	. number of words in buffer
  :                            481 
  :                            482 .	lx	tx_buffers
  :                            483 
00:00221A 3E0E3C              +484 	lcal	buy1
00:00221B 380005              +485 	pop	b
00:00221C C60231              +486 	jza	ip_no_txbuffer
  :                            487 
00:00221D 50C001              +488 	lx	descriptor:frame, a
00:00221E 30A000              +489 	z	0, x	. routing buffer
00:00221F 30A001              +490 	z	1, x
00:002220 30A002              +491 	z	2, x	. default destination
  :                            492 
00:002221 FD0800              +493 	push,xi IP
00:002222 38A006              +494 	pop	nframe:llh:generic:protocol
  :                            495 
00:002223 30A00D              +496 	z	nframe:stack_index
  :                            497 
00:002224 850010              +498 	ax, xi	ROUTING_HEADER
00:002225 10C004              +499 	sx	descriptor:dgram, a
00:002226 100013              +500 	sx	TX_DATAGRAM
00:002227 28A000              +501 	sb	dgram:vers_ihl_tos, x
00:002228 30A003              +502 	z	dgram:flags_fragment, x
00:002229 30A006              +503 	z	dgram:ipsource, x
00:00222A 30A007              +504 	z	dgram:ipsource+1, x
00:00222B 30A008              +505 	z	dgram:ipdest, x
00:00222C 30A009              +506 	z	dgram:ipdest+1, x
  :                            507 
00:00222D 30C002              +508 	z	descriptor:i_f, a
  :                            509 
00:00222E 800000              +510 	ax	r	. length of IP header in words
00:00222F 10C005              +511 	sx	descriptor:uproto, a
00:002230 100011              +512 	sx	TP_HEADER
  :                            513 ip_no_txbuffer
00:002231 350000              +514 	lret	0
  :                            515 
  :                            516 	$if	0
  :                            517 net_free_txbx
  :                            518 	lk	(63*/18:s)
  :                            519 	lx	(A$TXBUFFB*/18:s)
  :                            520 	mta	x
  :                            521 	j	net_free_txb
  :                            522 	j	sell1
  :                            523 	$endif
  :                            524 
  :                            525 ipv4_forus?
00:002232 3E0239              +526 	lcal	ipv4_address_this_if?
00:002233 350000              +527 	lret	0	. yes for us
(+01)0f
00:002234 7004F8              +528 	tz	ipForwarding:i
00:002235 3E0246              +529 	lcal	ipv4_address_this_host?
00:002236 350001              +530 	lret	1	. not for us
00:002237 350000              +531 	lret	0	. yes for is
  :                            532 		
  :                            533 
  :                            534 ipv4_forus!
00:002238 350000              +535 	lret	0	. = yesforus
  :                            536 			. ipForwarding and an address
  :                            537 			. on our interfaces? 
  :                            538 			. also queue it inward
  :                            539 
  :                            540 ipv4_address_this_if?
00:002239 C70006              +541 	ds	6
00:00223A 50A002              +542 	lx	this_if:address_list
  :                            543 ipv4_address_test
00:00223B 60A002              +544 	la	ifaddr:i_f
00:00223C C5FFFF              +545 	aa, xi	-1
00:00223D C60241              +546 	jza	ipv4_next	. not an external i/f
00:00223E CFA003              +547 	dl	ifaddr:net
00:00223F DF0006              +548 	dan	6
00:002240 7C0245              +549 	jdz	ipv4_address_hit
  :                            550 ipv4_next
00:002241 50A000              +551 	lx	ifaddr:next
00:002242 700002              +552 	tz	x
00:002243 B6023B              +553 	j	ipv4_address_test
00:002244 350001              +554 	lret	1	. not for us
  :                            555 ipv4_address_hit
00:002245 350000              +556 	lret	0	. yes for us
  :                            557 
  :                            558 ipv4_address_this_host?
(+01)0f
00:002246 50033E              +559 	lx	net_alexical
  :                            560 ipv4_test_in_list
00:002247 60A002              +561 	la	ifaddr:i_f
00:002248 C5FFFF              +562 	aa, xi	-1
00:002249 C6024D              +563 	jza	ipv4_nex	. not an external i/f
00:00224A CFA003              +564 	dl	ifaddr:net
00:00224B DF0006              +565 	dan	6
00:00224C 7C0251              +566 	jdz	ipv4_list_hit
  :                            567 ipv4_nex
00:00224D 50A001              +568 	lx	ifaddr:lexical
00:00224E 700002              +569 	tz	x
00:00224F B60247              +570 	j	ipv4_test_in_list
00:002250 350000              +571 	lret	0	. not for us
  :                            572 ipv4_list_hit
00:002251 350001              +573 	lret	1	. yes for us
  :                            574 	
  :                            575 
  :                            576 
  :                            577 ipv4_forward		. unpacked destination is in 6:7
  :                            578 
00:002252 3E015C              +579 	lcal	ip_route
00:002253 CFA007              +580 	dl	ro:next_hop
00:002254 7C0256              +581 	jdz	ipv4_zforward	. special case
  :                            582 	
  :                            583 
  :                            584 			. we only get here if it's not
  :                            585 			. an address anywhere on this host
  :                            586 			. and ipForwarding is on
  :                            587 
  :                            588                         . first route the destination
  :                            589                         . don't route anything out 
  :                            590                         . on the interface it came in
  :                            591                         . that behaviour is loopy
  :                            592 
  :                            593 			. also do not forward stuff
  :                            594 			. to your own loopback address
  :                            595 			. or any alias which it has
  :                            596 
  :                            597 			. fine we haven't assigned it
  :                            598 			. to input space
  :                            599 
  :                            600 			. assign it to output space
  :                            601 			. instead
  :                            602 
  :                            603 .	la	dgram:bytes
  :                            604 .	aa, xi	1	. # octets to # octet pairs
  :                            605 .	sar	1
  :                            606 .	lx	tx_buffers
  :                            607 .	lcal	buy1
  :                            608 .	jza	ipv4_xforward
  :                            609 
  :                            610 ipv4_xforward		. abandon the dgram
00:002255 350001              +611 	lret	1
  :                            612 
  :                            613 ipv4_zforward		. special case
00:002256 350000              +614 	lret	0	. local destination is any address in subnet
  :                            615 			. accept on interface of arrival
  :                            616 
  :                            617 ip_source_ifidx
00:002257 9F0004              +618 	dpush	a
(+01)0f
00:002258 60033E              +619 	la	net_alexical		. this chain may be lexically ordered
  :                            620 ip_source_next				. anyway it contains all of them
00:002259 C60261              +621 	jza	ip_source_no
00:00225A 580004              +622 	ly	a
00:00225B CFF000              +623 	dl	0, sp
00:00225C DFB003              +624 	dan	ifaddr:net, y
00:00225D 7C0260              +625 	jdz	ip_source_yes
00:00225E 60B001              +626 	la	ifaddr:lexical, y
00:00225F B60259              +627 	j	ip_source_next
  :                            628 ip_source_yes
00:002260 60B002              +629 	la	ifaddr:i_f, y
  :                            630 ip_source_no
00:002261 20F000              +631 	sa	0, sp
00:002262 380004              +632 	dpop	a
00:002263 380005              +632 
00:002264 350000              +633 	lret	0
  :                            634 
  :                            635 
  :                            636 .	vector name ipv4_4us?
  :                            637 
  :                            638 ipv44us?
00:002265 3E0232              +639 	lcal	ipv4_forus?
00:002266 3D0000              +640 	fret	0
00:002267 3D0001              +641 	fret	1
  :                            642 
  :                            643 .	vector name ipv4_this_if?
  :                            644 
  :                            645 ipv4thisif?
00:002268 3E0239              +646 	lcal	ipv4_address_this_if?
00:002269 3D0000              +647 	fret	0
00:00226A 3D0001              +648 	fret	1
  :                            649 
  :                            650 .	vector_name ipv4_this_host?
  :                            651 
  :                            652 ipv4thishost?
00:00226B 3E0246              +653 	lcal	ipv4_address_this_host?
00:00226C 3D0000              +654 	fret	0
00:00226D 3D0001              +655 	fret	1
  :                            82: 	$include	overhaul
  :                            1 
  :                            2 	$if	IPV4_OVERHAUL
  :                            3 
  :                            4 .	start IP payload checksum, call from TCP / UDP / ICMP
  :                            5 .	add the 2-word blocks in the internal stack
  :                            6 .	except for the IP header
  :                            7 
  :                            8 check_part1			. call for a large datagram
00:00226E 6DFFFB              +9 	lb	-5,,xi		. with maximum byte quads in stack
00:00226F B60273              +10 	j	check_part1_go	. interface buffer still contains the rest
  :                            11 
  :                            12 				. call for a short datagram <= IPV4_OVERHAUL bytes 
  :                            13 check_part1s			. a contains # datagram bytes all in stack
00:002270 6D008C              +14 	lb	IPV4_OVERHAUL-4*5,,xi . maximum loaded - minimum IP header
00:002271 D80004              +15 	anb	a
00:002272 8E0002              +16 	sba	2		. IPV4_OVERHAUL/4 - 5 - byte quads present
  :                            17 
  :                            18 check_part1_go
00:002273 C80010              +19 	ab	HEADER_LONGWORDS . 5 or more already checked
00:002274 F80003              +20 	push	y
00:002275 580005              +21 	ly	b
00:002276 CF0006              +22 	dl	6		. contains seed: addresses + protocol + length
  :                            23 				. for ICMP contains 0
  :                            24 
00:002277 500011              +25 	lx	TP_HEADER	. pointer to IP payload
  :                            26 
00:002278 B6B279              +27 	j	check_updword(IPV4_OVERHAUL/4), y
  :                            28 
                                ?	$do	IPV4_OVERHAUL/4-5,;
00:002279 D7A044              +30 check_updword(IPV4_OVERHAUL/4-?+1)	da	IPV4_OVERHAUL/2-10-?*2, x
00:00227A D7A042              +30 
00:00227B D7A040              +30 
00:00227C D7A03E              +30 
00:00227D D7A03C              +30 
00:00227E D7A03A              +30 
00:00227F D7A038              +30 
00:002280 D7A036              +30 
00:002281 D7A034              +30 
00:002282 D7A032              +30 
00:002283 D7A030              +30 
00:002284 D7A02E              +30 
00:002285 D7A02C              +30 
00:002286 D7A02A              +30 
00:002287 D7A028              +30 
00:002288 D7A026              +30 
00:002289 D7A024              +30 
00:00228A D7A022              +30 
00:00228B D7A020              +30 
00:00228C D7A01E              +30 
00:00228D D7A01C              +30 
00:00228E D7A01A              +30 
00:00228F D7A018              +30 
00:002290 D7A016              +30 
00:002291 D7A014              +30 
00:002292 D7A012              +30 
00:002293 D7A010              +30 
00:002294 D7A00E              +30 
00:002295 D7A00C              +30 
00:002296 D7A00A              +30 
00:002297 D7A008              +30 
00:002298 D7A006              +30 
00:002299 D7A004              +30 
00:00229A D7A002              +30 
00:00229B D7A000              +30 
  :                            31 
00:00229C C70006              +32 	ds	6
00:00229D 380003              +33 	pop	y
00:00229E 350000              +34 	lret	0
  :                            35 
  :                            36 	$endif
  :                            37 
  :                            38 check_complete
00:00229F C00005              +39 	aa	b
00:0022A0 160010              +40 	dsr	16
00:0022A1 0E0008              +41 	sbr	8
00:0022A2 D6029F              +42 	jnza	check_complete
00:0022A3 B80F8F              +43 	xorB	(00FFFF)
00:0022A4 350000              +44 	lret	0
  :                            45 
  :                            46 t_ibuffer
00:0022A5 50D006              +47 	lx	s:tcp:rxbu_p
00:0022A6 60D005              +48 	la	s:tcp:tbase
  :                            49 
  :                            50 	$if	HVSOCKET
00:0022A7 D602B1              +51 	jnza	g_ibuffer
  :                            52 		
00:0022A8 68001B              +53 	lb	HL_FLAGS		. bound but has no storage = hvsocket
00:0022A9 AD0012              +54 	andB	TCP_SYN++TCP_ACK,,xi
00:0022AA BD0002              +55 	xorB	TCP_SYN,,xi		. has to be an incoming connect
00:0022AB 650000              +56 	la	0,,xi			. nonzero = zero
00:0022AC DE02C5              +57 	jnzb	ibufferx		. it's otherwise about a fictional connection
  :                            58 
00:0022AD FF0F94              +59 	call	(hvsocket_storage)
00:0022AE C602C5              +60 	jza	ibufferx		. already based, x already loaded
00:0022AF 600000              +61 	la	r			. bytes requested
00:0022B0 B602B3              +62 	j	ibuffer
  :                            63 	$endif
  :                            64 
  :                            65 g_ibuffer
00:0022B1 34002F              +66 	sabr	BSOCKET			. switch moment from port to connection block
00:0022B2 600000              +67 	la	r
  :                            68 
00:0022B3 F80003              +69 ibuffer	push	y
00:0022B4 F80004              +70 	push	a
00:0022B5 C50001              +71 	aa	1,,xi
00:0022B6 060001              +72 	sar	1
00:0022B7 3E0E3C              +73 	lcal	buy1
00:0022B8 380005              +74 	pop	b
00:0022B9 380003              +75 	pop	y
  :                            76 
00:0022BA C602C5              +77 	jza	ibufferx
  :                            78 
00:0022BB 20000E              +79 	sa	fp
00:0022BC CF000A              +80 	dl	I_F_IDX			. and UPROTOCOL_BYTES
00:0022BD 68000B              +81 	lb	UPROTOCOL_BYTES
00:0022BE C7E002              +82 	ds	descriptor:i_f		. i_f : bytes
  :                            83 
00:0022BF 60E001              +84 	la	descriptor:frame
00:0022C0 680010              +85 	lb	HEADER_LONGWORDS
00:0022C1 2E0001              +86 	sbl	1
00:0022C2 C80004              +87 	ab	a
00:0022C3 C7E004              +88 	ds	descriptor:dgram	. dgram : uproto
  :                            89 
00:0022C4 60000E              +90 	la	fp
  :                            91 ibufferx
00:0022C5 350000              +92 	lret	0
  :                            93 
  :                            83: 	$include	ip_q2
  :                            1 
  :                            2 ipq_write
  :                            3 				. a -> descriptor
  :                            4 				. 8 -> descriptor
  :                            5 				. b  = payload bytes + IP header
  :                            6 				. 10 = fragment / DNF word
  :                            7 				. 11 = payload bytes + IP header
  :                            8 				. x -> interface
  :                            9 				. MTU = d$save1 = 17
  :                            10 				. TX_DATAGRAM = d$save = 16
  :                            11 				. TX_FRAME = register 9
  :                            12 
  :                            13 
00:0022C6 580009              +14 	ly	TX_FRAME
00:0022C7 FDFFFE              +15 	push,xi	-2
00:0022C8 38B00D              +16 	pop	nframe:stack_index, y
00:0022C9 30B007              +17 	z	nframe:frame_axw(1):bytes, y
00:0022CA 30B009              +18         z	nframe:frame_axw(2):bytes, y
00:0022CB 28B00B              +19 	sb	nframe:frame_axw(TX_DESCRIPTORS):bytes, y
00:0022CC 680013              +20 	lb	TX_DATAGRAM
00:0022CD 28B00C              +21 	sb	nframe:frame_axw(TX_DESCRIPTORS):word_pointer, y
  :                            22 
00:0022CE 680011              +23 	lb	MTU
00:0022CF D8000B              +24 	anb	11
00:0022D0 68000B              +25 	lb	11
00:0022D1 7E02D3              +26 	jc	ipq_write2q
  :                            27 
  :                            28 	$if	TX_FRAGMENTS
  :                            29 	lcal	ipq_source_fragment
  :                            30 	jpa	ipq_write2q
  :                            31 	$endif
00:0022D2 350000              +32 	lret	0
  :                            33 
  :                            34 ipq_write2q
00:0022D3 580013              +35 	ly	TX_DATAGRAM
00:0022D4 3E02DA              +36 	lcal	ipq_construct_datagram_header
  :                            37 
  :                            38 	$do	0,	c	(__recheck)	TX_DATAGRAM
  :                            39 
00:0022D5 500012              +40 	lx	I_F
00:0022D6 600008              +41 	la	TX_AXW
00:0022D7 3E009A              +42 	lcal	q2ifoq
00:0022D8 350000              +43 	lret	0
  :                            44 
  :                            45 ipq_source_fragment
  :                            46 	$if	TX_FRAGMENTS=0
  :                            47 
  :                            48 .	call ipq_write2q from here with no recursion
  :                            49 .	updating his pointer / counter tuple stacklet in the front of his buffer
  :                            50 .	and his datagram header + checksum
  :                            51 .	until the payload is small enough to return and drop into ipq_write2q
  :                            52 .	run a test with a large udgram
  :                            53 
  :                            54 	$else
  :                            55 
  :                            56 	lb	*TX_DATAGRAM
  :                            57 	la, xi	0
  :                            58 
  :                            59 	lcal	ip_buy_datagram	
  :                            60 	jnza	ipq_fragment
  :                            61 
  :                            62 	la, xi	-5
  :                            63 	lret	0
  :                            64 
  :                            65 ipq_fragment
  :                            66 	sa	y		. we already dropped the
  :                            67 				. interface pointer in x
  :                            68 	lx	TX_FRAME
  :                            69 	la	descriptor:frame, y
  :                            70 	qpush	0, x
  :                            71 	qpop	0, a	
  :                            72 	qpush	4, x
  :                            73 	qpop	4, a
  :                            74 
  :                            75 	lb	MTU
  :                            76 	andB,xi	-8
  :                            77 	anb	HEADER_BYTES
  :                            78 	tz	TX_FLAG_OFFSET
  :                            79 	andB,xi	-8
  :                            80 
  :                            81 	push	b
  :                            82 	sbr	3
  :                            83 	ab	TX_FLAG_OFFSET
  :                            84 	orB	IP_MORE
  :                            85 	sb	TX_FLAG_OFFSET
  :                            86 
  :                            87 	lb	TX_DATAGRAML
  :                            88 	anb	0, sp
  :                            89 	sb	TX_DATAGRAML
  :                            90 	pop	b
  :                            91 
  :                            92 	push	b	
  :                            93 	lcal	ipq_write_channel_program
  :                            94 
  :                            95 	pop	b
  :                            96 	ab	HEADER_BYTES
  :                            97 	ly	descriptor:dgram, y
  :                            98 	lx	TX_DATAGRAM
  :                            99 	lcal	ipq_repro_datagram_header	
  :                            100 
  :                            101 	lx	I_F
  :                            102 	la	fp
  :                            103 	lcal	q2ifoq
  :                            104 
  :                            105 					. test if this is the last fraction
  :                            106 	la	TX_DATAGRAML
  :                            107 	aa	HEADER_BYTES
  :                            108 	lb	MTU
  :                            109 	anb	a
  :                            110 
  :                            111 	jnc	ipq_refraction
  :                            112 	
  :                            113 	la	TX_FRAME
  :                            114 	ly	TX_AXW
  :                            115 					. rewrite the channel program
  :                            116 	lb	TX_DATAGRAML		. of the original buffer
  :                            117 	lcal	ipq_write_channel_program
  :                            118 
  :                            119 	lb	TX_DATAGRAML
  :                            120 	ab	HEADER_BYTES
  :                            121 
  :                            122 	la	TX_FLAG_OFFSET
  :                            123 	and,xi	01FFF
  :                            124 	sa	TX_FLAG_OFFSET
  :                            125 	$endif
00:0022D9 350000              +126 	lret	0
  :                            127 
  :                            128 ipq_construct_datagram_header
00:0022DA 600010              +129 	la	HEADER_BYTES
00:0022DB 060002              +130 	sar	2
00:0022DC C5FFFB              +131 	aa, xi	-5
00:0022DD 400004              +132 	lr	a
  :                            133 
00:0022DE 60B000              +134 	la	dgram:vers_ihl_tos, y
00:0022DF 28B001              +135 	sb	dgram:bytes, y
  :                            136 
00:0022E0 F8000A              +137 	push	TX_FLAG_OFFSET
00:0022E1 38B003              +138 	pop	dgram:flags_fragment, y
00:0022E2 C8000A              +139 	ab	TX_FLAG_OFFSET
00:0022E3 C8B004              +140 	ab	dgram:ttl_protocol, y
00:0022E4 C0B002              +141 	aa	dgram:id, y
00:0022E5 D7B006              +142 	da	dgram:ipsource, y
00:0022E6 D7B008              +143 	da	dgram:ipdest, y
  :                            144 
00:0022E7 780000              +145 	tp	r
00:0022E8 450000              +146 	lr, xi	0
00:0022E9 54B00A              +147 	lx, i	10, y
00:0022EA B602ED              +148 	j	ipq_add_options?
  :                            149 
  :                            150 ipq_add_options!
00:0022EB D7A000              +151 	da	0, x
00:0022EC 850002              +152 	ax, xi	2
  :                            153 ipq_add_options?
00:0022ED 1E02EB              +154 	jdr	ipq_add_options!
  :                            155 
  :                            156 ipq_write_sum
  :                            157 	$if	1
00:0022EE 3E029F              +158 	lcal	check_complete
  :                            159 	$else
  :                            160 	aa	b
  :                            161 	dsr	16
  :                            162 	sbr	8
  :                            163 	jnza	ipq_write_sum
  :                            164 
  :                            165 	xorB	(00FFFF)
  :                            166 	$endif
  :                            167 
00:0022EF 28B005              +168 	sb	dgram:checksum, y
  :                            169 
00:0022F0 350000              +170 	lret	0
  :                            171 
  :                            172 	$if	TX_FRAGMENTS
  :                            173 ipq_repro_datagram_header
  :                            174 	la	HEADER_BYTES
  :                            175 	sar	2
  :                            176 	aa, xi	-5
  :                            177 	lr	a
  :                            178 
  :                            179 	la	dgram:vers_ihl_tos, y
  :                            180 	ds	dgram:bytes, x
  :                            181 
  :                            182 	qpush	dgram:ipsource, y
  :                            183 	push,xi	0
  :                            184 	push	dgram:ttl_protocol, y
  :                            185 	push	TX_FLAG_OFFSET
  :                            186 	push	dgram:id, y
  :                            187 
  :                            188 	da	0, sp
  :                            189 	da	2, sp
  :                            190 	da	4, sp		. this said 3, sp before, surely some mistake
  :                            191 	da	6, sp
  :                            192 
  :                            193 	tp	r
  :                            194 	lr, xi	0
  :                            195 
  :                            196 	push	x
  :                            197 
  :                            198 	j	ipq_repro_option?
  :                            199 
  :                            200 ipq_repro_option!
  :                            201 	dpush	10, y
  :                            202 	da	0, sp
  :                            203 
  :                            204 	dpop	10, x
  :                            205 
  :                            206 	ax, xi	2
  :                            207 	ay, xi	2
  :                            208 
  :                            209 ipq_repro_option?
  :                            210 	jdr	ipq_repro_option!
  :                            211 
  :                            212 	pop	x
  :                            213 
  :                            214 ipq_repro_sum
  :                            215 	aa	b
  :                            216 	dsr	16
  :                            217 	sbr	8
  :                            218 	jnza	ipq_repro_sum
  :                            219 
  :                            220 	xorB	(00FFFF)
  :                            221 	sb	3, sp
  :                            222 
  :                            223 	qpop	2, x
  :                            224 	qpop	6, x
  :                            225 
  :                            226 	lret	0
  :                            227 	$endif		. TX_FRAGMENTS
  :                            228 
  :                            229 ipq_write_channel_program
  :                            230 					. b = payload length
  :                            231 					. a = frame buffer
  :                            232 					. y = fragment buffer descriptor
00:0022F1 FDFFFC              +233         push,xi -4                  
00:0022F2 38C00D              +234         pop     nframe:stack_index, a
  :                            235 
00:0022F3 F80010              +236         push    HEADER_BYTES
00:0022F4 38C009              +237         pop     nframe:frame_axw(TX_DESCRIPTORS-1):bytes, a
00:0022F5 F8B004              +238         push    descriptor:dgram, y
00:0022F6 38C00A              +239         pop     nframe:frame_axw(TX_DESCRIPTORS-1):word_pointer, a
  :                            240 
00:0022F7 28C00B              +241 	sb	nframe:frame_axw(TX_DESCRIPTORS):bytes, a
  :                            242 
00:0022F8 68000A              +243         lb      10
00:0022F9 AD1FFF              +244         andB,xi 01FFF
00:0022FA 28000A              +245         sb      10
00:0022FB 2E0003              +246         sbl     3
  :                            247 
  :                            248         $if     DYNAMIC_IP_HEADER
  :                            249         ab      TP_HEADER
  :                            250         anb     HEADER_BYTES
  :                            251         $else
00:0022FC C80013              +252         ab      TX_DATAGRAM
  :                            253         $endif
  :                            254 
00:0022FD 28C00C              +255         sb      nframe:frame_axw(TX_DESCRIPTORS):word_pointer, a
  :                            256 	
00:0022FE 350000              +257 	lret	0
  :                            84: 	$include	icmp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(66::,x)
  :                            41 ping	icmp_echo
  :                            42 
  :                            43 $(1)
  :                            44 
01:000418 000000              +45 icmpq	dq
01:000419 000000              +45 
  :                            46 
  :                            47 $(0)
  :                            48 
  :                            49 . icmp
  :                            50 .	lret	0
  :                            51 
  :                            52 icmp_buy_msg
00:0022FF 6D4500              +53 	lb, xi	04500
  :                            54 icmp_buy_msg_optional
00:002300 F80004              +55 	push	a
00:002301 3E0212              +56 	lcal	ip_buy_datagram
00:002302 380005              +57 	pop	b
00:002303 C60309              +58 	jza	icmp_noreply
00:002304 28C003              +59 	sb	descriptor:bytes, a
00:002305 6D3C01              +60 	lb, xi	IP_DEFAULT_TTL++IPPROTO_ICMP
00:002306 500013              +61 	lx	TX_DATAGRAM
00:002307 28A004              +62 	sb	dgram:ttl_protocol, x
00:002308 350001              +63 	lret	1
  :                            64 icmp_noreply
00:002309 350000              +65 	lret	0
  :                            66 
  :                            67 icmp_buy_response
00:00230A 60E003              +68 	la	descriptor:bytes
00:00230B 3E02FF              +69 	lcal	icmp_buy_msg
00:00230C B6031E              +70 	j	icmp_noresponse
  :                            71 
00:00230D 50E004              +72 	lx	descriptor:dgram
00:00230E 9FA006              +73 	dpush	dgram:ipsource, x
00:00230F 9FA008              +74 	dpush	dgram:ipdest, x
  :                            75 
00:002310 50C004              +76 	lx	descriptor:dgram, a
00:002311 87A006              +77 	qpop	dgram:ipsource, x
  :                            78 
00:002312 58E005              +79 	ly	descriptor:uproto
00:002313 50C005              +80 	lx	descriptor:uproto, a
00:002314 10C006              +81 	sx	descriptor:apdata, a
  :                            82 
00:002315 F80004              +83 	push	a
00:002316 60C003              +84 	la	descriptor:bytes, a
00:002317 300006              +85 	z	6
00:002318 300007              +86 	z	7
00:002319 3E044D              +87 	lcal	rx_payload
00:00231A 380002              +88 	pop	x
00:00231B 58A006              +89 	ly	descriptor:apdata, x
00:00231C 28B001              +90 	sb	ping:h:checksum, y
00:00231D 350001              +91 	lret	1
  :                            92 icmp_noresponse
00:00231E 350000              +93 	lret	0
  :                            94 
  :                            95 
  :                            96 	$if	IPV4_OVERHAUL
  :                            97 
  :                            98 icmp_rxq			.	TP_HEADER is in x
  :                            99 				. put tests for categories here
00:00231F 60F001              +100 	la	dgram:bytes
00:002320 300006              +101 	z	6		. icmp does not sum
00:002321 300007              +102 	z	7		. network addresses / protocol / length
00:002322 48A001              +103 	lk	ping:h:checksum
00:002323 30A001              +104 	z	ping:h:checksum
00:002324 680004              +105 	anu	IPV4_OVERHAUL,,xi
00:002325 DD00A0              +105 
  :                            106 
00:002326 C60328              +107 	jza	icmp_exact
00:002327 7E033A              +108 	jc	icmp_rxqlong	. >= IPV4_OVERHAUL octets
  :                            109 icmp_exact
00:002328 3E0270              +110 	lcal	check_part1s
00:002329 3E029F              +111 	lcal	check_complete
00:00232A B80001              +112 	xorB	k		. b = recalculated checksum, k = received checksum
00:00232B DE020F              +113 	jnzb	ipv4_rxz	. there is no buffer yet
  :                            114 
00:00232C 60F001              +115 	la	dgram:bytes
00:00232D 502180              +116 	lx	rx_buffers
00:00232E 3E02B3              +117 	lcal	ibuffer
00:00232F C6020F              +118 	jza	ipv4_rxz	. no buffer available
  :                            119 
00:002330 50E004              +120 	lx	descriptor:dgram
00:002331 68F001              +121 	lb	dgram:bytes
00:002332 CDFFFF              +122 	ab	-1,,xi
00:002333 5E020B              +123 	jnc	ipv4_drop	. might as well be ridiculous
00:002334 0E0003              +124 	sbr	3		. # blocks of 4 byte pairs less 1
00:002335 400005              +125 	lr	b
  :                            126 
  :                            127 icmp_iquick
00:002336 87A000              +128 	qpop	0, x
00:002337 850004              +129 	ax	4,,xi
00:002338 1E0336              +130 	jdr	icmp_iquick
  :                            131 
00:002339 B6035B              +132 	j	icmp_rxqq	. already checksumed at this point
  :                            133 
  :                            134 icmp_rxqlong
00:00233A 3E026E              +135 	lcal	check_part1
  :                            136 
00:00233B 60F001              +137 	la	dgram:bytes
00:00233C 502180              +138 	lx	rx_buffers
  :                            139 
00:00233D 3E02B3              +140 	lcal	ibuffer
00:00233E C6020F              +141 	jza	ipv4_rxz
  :                            142 
00:00233F 60F001              +143 	la	dgram:bytes	. obtain the datagram second part length
  :                            144 				. while the header is in the internal stack
00:002340 50E004              +145 	lx	descriptor:dgram
00:002341 87A000              +146 ?	$do	IPV4_OVERHAUL/8,	qpop	?*4-4, x
00:002342 87A004              +146 
00:002343 87A008              +146 
00:002344 87A00C              +146 
00:002345 87A010              +146 
00:002346 87A014              +146 
00:002347 87A018              +146 
00:002348 87A01C              +146 
00:002349 87A020              +146 
00:00234A 87A024              +146 
00:00234B 87A028              +146 
00:00234C 87A02C              +146 
00:00234D 87A030              +146 
00:00234E 87A034              +146 
00:00234F 87A038              +146 
00:002350 87A03C              +146 
00:002351 87A040              +146 
00:002352 87A044              +146 
00:002353 87A048              +146 
00:002354 87A04C              +146 
  :                            147 
00:002355 C5FF60              +148 	aa	-IPV4_OVERHAUL,,xi
00:002356 850050              +149 	ax	IPV4_OVERHAUL/2,,xi
00:002357 8D0050              +150 	ay	IPV4_OVERHAUL/2,,xi
  :                            151 
00:002358 3E044D              +152 	lcal	rx_payload
00:002359 B80001              +153 	xorB	k
00:00235A DE020B              +154 	jnzb	ipv4_drop	. now there is a buffer to return
  :                            155 
  :                            156 icmp_rxqq
  :                            157 
00:00235B FD0001              +158 	MIB_ICOUNT48	icmpInMsgs:i
(+01)0f
00:00235C 2F051E              +158 
00:00235D 5E035F              +158 
(+01)0f
00:00235E 17051D              +158 
  :                            159 
00:00235F 60000E              +160 	la	fp
(+01)10
00:002360 5D0418              +161 	ly	icmpq,,xi
00:002361 3E0EBC              +162 	lcal	q2
00:002362 B6020F              +163 	j	ipv4_rxz
  :                            164 
  :                            165 
  :                            166 	$else	.	OVERHAUL
  :                            167 
  :                            168 	$endif		. OVERHAUL
  :                            169 
(+01)0f
00:002363 600418              +170 icmp	la	icmpq.head
00:002364 C60382              +171 	jza	icmpx
00:002365 20000E              +172 	sa	fp
00:002366 58C005              +173 	ly	descriptor:uproto, a
  :                            174 	
00:002367 60B000              +175 	la	ping:h:type_code, y
00:002368 680004              +176 	anu, xi	0800
00:002369 DD0800              +176 
00:00236A DE037E              +177 	jnzb	icmp_rx_routinfo?
  :                            178 
00:00236B FD0001              +179 	MIB_ICOUNT48	icmpInEchos:i
(+01)0f
00:00236C 2F052C              +179 
00:00236D 5E036F              +179 
(+01)0f
00:00236E 17052B              +179 
00:00236F 30B000              +180 	z	ping:h:type_code, y	. the value of echo response
00:002370 3E030A              +181 	lcal	icmp_buy_response
00:002371 B6037E              +182 	j	icmp_drop		. no output buffer
  :                            183 
00:002372 FD0001              +184 	MIB_ICOUNT48	icmpInEchoReps:i
(+01)0f
00:002373 2F052E              +184 
00:002374 5E0376              +184 
(+01)0f
00:002375 17052D              +184 
  :                            185 
00:002376 58A004              +186 	ly	descriptor:dgram, x
00:002377 4FB006              +187 	ql	dgram:ipsource, y
  :                            188 
00:002378 FD0001              +189 	MIB_ICOUNT48	icmpOutMsgs:i
(+01)0f
00:002379 2F0538              +189 
00:00237A 5E037C              +189 
(+01)0f
00:00237B 170537              +189 
  :                            190 
00:00237C FF0F95              +191 	call	(ipsend)
00:00237D B6037E              +192 	j	icmp_drop
  :                            193 
  :                            194 icmp_rx_routinfo?
  :                            195 			. for receiving redirects
  :                            196 icmp_drop
(+01)10
00:00237E 5D0418              +197 	ly	icmpq,,xi
00:00237F 3E0EC7              +198 	lcal	readq
00:002380 502180              +199 	lx	rx_buffers
00:002381 3E0E65              +200 	lcal	sell1
  :                            201 
00:002382 350000              +202 icmpx	lret	0
  :                            203 
  :                            204 icmp_du_port
  :                            205 icmp_noproto		. jumped at from ipv4_rx
  :                            206 			. should queue the problem
  :                            207 			. into icmpq, and then...
00:002383 B6020F              +208 	j	ipv4_rxz	. no buffer shall have been assigned
  :                            209 				. or memory will trap
  :                            210 
  :                            211 
  :                            212 icmp_nosocket		. called from udp
  :                            213 			. should send DU[PORT]
00:002384 350000              +214 	lret	0	. must return
  :                            215 
  :                            216 
  :                            217 
  :                            218 	$if	RX_FRAGMENTS
  :                            219 
  :                            220 icmp_rx_rasm
  :                            221 	lx	descriptor:uproto
  :                            222 	push	ping:h:checksum
  :                            223 	lcal	rasm77_gcheck
  :                            224 	xorB	0, sp
  :                            225 	pop	ping:h:checksum
  :                            226 	la	fp
  :                            227 	jnzb	net_free_chain
  :                            228 	lx, i	icmpq
  :                            229 	j	net_add_chain
  :                            230 	
  :                            231 	$endif
  :                            85: 	$include	udp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 $(71::,sp)
47:000000                     +42 uugram udgram
47:000001                     +42 
47:000002                     +42 
47:000003                     +42 
  :                            43 
  :                            44 $(66::,b)
42:000000                     +45 s	$socket
42:000002                     +45 
42:000004                     +45 
42:000005                     +45 
42:000006                     +45 
42:000007                     +45 
42:000005                     +45 
42:000006                     +45 
42:000007                     +45 
  :                            46 
  :                            47 $(1)
01:00041A 000000              +48 udpq	dq
01:00041B 000000              +48 
01:00041C 000000              +49 udp_nosocket_rxgrams	0		. value for controlling proliferation of DU ports
  :                            50 
01:00041D 000383              +51 udp_ldgram_noport +	icmp_du_port	. default vector of RX large segment no port bound:
  :                            52 					. DU[PORT] without preliminary checksum. Avoids
  :                            53 					. expensive input-completion / buffering / repooling
  :                            54 
  :                            55 					. can be changed administratively to silent drop
  :                            56 					. or even to full checksum to choose whether
  :                            57 					. DU + drop or silent drop
  :                            58 $(0)
00:002385 480F8F              +59 udp4	lk	(00FFFF)
(+01)10
00:002386 5D041A              +60 	ly, xi	udpq
  :                            61 udp_next
(+01)0f
00:002387 60041A              +62 	la	udpq.head
00:002388 C60398              +63 	jza	udp4_x
00:002389 20000E              +64 	sa	fp
  :                            65 
  :                            66 	$if	IPV4_OVERHAUL
00:00238A CFE006              +67 	dl	descriptor:sobdi
00:00238B 34002F              +68 	sabr	BSOCKET
  :                            69 	$else	. IPV4_OVERHAUL
  :                            70 	$endif	. IPV4_OVERHAUL
  :                            71 
00:00238C 60D001              +72 	la	s:socket_address+1, b
00:00238D A00F8F              +73 	and	(65535)			. socket still bound since since datagram arrived?
00:00238E C60395              +74 	jza	udp_socket_closed
  :                            75 
00:00238F 60E005              +76 	la	descriptor:uproto
00:002390 C50004              +77 	aa	4,,xi
00:002391 20E006              +78 	sa	descriptor:apdata
  :                            79 
00:002392 500005              +80 	lx	b			. queueing uses TS cell in socket structure
00:002393 3E0501              +81 	lcal	udp_write_rxq
00:002394 B60387              +82 	j	udp_next
  :                            83 
  :                            84 udp_socket_closed
00:002395 3E0384              +85 	lcal	icmp_nosocket
  :                            86 
00:002396 3E00E8              +87 	lcal	net_drop
00:002397 B60387              +88 	j	udp_next
  :                            89 
  :                            90 udp4_x
00:002398 350000              +91 	lret	0
  :                            92 
  :                            93 
  :                            94 .	this is the direct feed to udpq from interfaces which have
  :                            95 .	fixed dual-ported buffering. Interfaces with a direct access
  :                            96 .	to system memory would not have this packet copy
  :                            97 
  :                            98 .	The packet copy is used as an occasion to checksum
  :                            99 
  :                            100 .	The packet copy places the packets in rx_buffer with
  :                            101 .	T77 descriptors which are called ACWs
  :                            102 
  :                            103 .	This routine cannot be called for fragmented datagrams
  :                            104 .	because it is instant from frame readout to UDP checksum
  :                            105 .	generation
  :                            106 
  :                            107 .	this is an upward call from ipv4_rx
  :                            108 
  :                            109 
  :                            110 	$if	IPV4_OVERHAUL
  :                            111 udp_rxq					. TP_HEADER is in x
00:002399 FD0001              +112 	MIB_ICOUNT48	udpInDatagrams:i
(+01)0f
00:00239A 2F0573              +112 
00:00239B 5E039D              +112 
(+01)0f
00:00239C 170572              +112 
  :                            113 
00:00239D 60F001              +114 	la	dgram:bytes
00:00239E 48A003              +115 	lk	uugram:checksum, x
00:00239F 30A003              +116 	z	uugram:checksum, x
  :                            117 
00:0023A0 68A002              +118 	lb	uugram:udgraml, x
00:0023A1 CDFFF8              +119 	ab	-8,,xi
00:0023A2 5E020B              +120 	jnc	ipv4_drop
  :                            121 
00:0023A3 680010              +122 	lb	HEADER_LONGWORDS
00:0023A4 2E0002              +123 	sbl	2
00:0023A5 C8A002              +124 	ab	uugram:udgraml, x
00:0023A6 D00005              +125 	ana	b
00:0023A7 5E020B              +126 	jnc	ipv4_drop
  :                            127 
00:0023A8 60F001              +128 	la	dgram:bytes
00:0023A9 680004              +129 	anu	IPV4_OVERHAUL,,xi
00:0023AA DD00A0              +129 
00:0023AB C603AD              +130 	jza	udp_exact
00:0023AC 7E03D4              +131 	jc	udp_rxqlong
  :                            132 
  :                            133 udp_exact
00:0023AD 700001              +134 	tnz	k				. rx without checksum?	
00:0023AE B603B0              +134 
00:0023AF B603B6              +135 	j	udp_socket?			. skip checksum
00:0023B0 3E0270              +136 	lcal	check_part1s
00:0023B1 3E029F              +137 	lcal	check_complete
00:0023B2 DE03B4              +138 	jnzb	$+2
00:0023B3 680F8F              +139 	lb	(00FFFF)
00:0023B4 B80001              +140 	xorB	k
00:0023B5 DE020F              +141 	jnzb	ipv4_rxz
  :                            142 
  :                            143 udp_socket?
00:0023B6 60A001              +144 	la	uugram:destp, x
00:0023B7 3E0518              +145 	lcal	udp_socket
00:0023B8 C60383              +146 	jza	icmp_du_port			. socket structure not stored
00:0023B9 C70012              +147 	ds	SOCKET_LPOINTER
  :                            148 
00:0023BA 60D001              +149 	la	s:socket_address+1, b
00:0023BB A00F8F              +150 	and	(65535)
00:0023BC C60383              +151 	jza	icmp_du_port			. socket not bound
  :                            152 
00:0023BD 60F001              +153 	la	dgram:bytes
00:0023BE 502180              +154 	lx	rx_buffers
00:0023BF 3E02B3              +155 	lcal	ibuffer
00:0023C0 C6020F              +156 	jza	ipv4_rxz
  :                            157 
00:0023C1 50E004              +158 	lx	descriptor:dgram
00:0023C2 68F001              +159 	lb	dgram:bytes			. calculate 8-byte blocks to store
00:0023C3 CDFFFF              +160 	ab	-1,,xi
00:0023C4 5E020B              +161 	jnc	ipv4_drop
00:0023C5 0E0003              +162 	sbr	3
00:0023C6 400005              +163 	lr	b
  :                            164 
  :                            165 udp_iquick
00:0023C7 87A000              +166 	qpop	0, x
00:0023C8 850004              +167 	ax	4,,xi
00:0023C9 1E03C7              +168 	jdr	udp_iquick
  :                            169 
  :                            170 udp_rxqthru
00:0023CA 60E005              +171 	la	descriptor:uproto
00:0023CB 60C002              +172 	la	uugram:udgraml, a
00:0023CC C5FFF8              +173 	aa	-8,,xi				. application data byte count
00:0023CD 20E003              +174 	sa	descriptor:bytes
00:0023CE CF0012              +175 	dl	SOCKET_LPOINTER
00:0023CF C7E006              +176 	ds	descriptor:sobdi
(+01)10
00:0023D0 5D041A              +177 	ly	udpq,,xi			. don't queue to the socket here
00:0023D1 60000E              +178 	la	fp				. because that involves TS arbitration
00:0023D2 3E0EBC              +179 	lcal	q2				. so let the other half of UDP do that
00:0023D3 B6020F              +180 	j	ipv4_rxz			. and clear the interface frame now
  :                            181 
  :                            182 udp_rxqlong
00:0023D4 700001              +183 	tnz	k
00:0023D5 B603D7              +183 
00:0023D6 B603D8              +184 	j	udp_uportbound?
00:0023D7 3E026E              +185 	lcal	check_part1
  :                            186 
  :                            187 udp_uportbound?
00:0023D8 60A001              +188 	la	uugram:destp, x
00:0023D9 3E0518              +189 	lcal	udp_socket
(+01)0d
00:0023DA C6841D              +190 	jza	*udp_ldgram_noport		. drop large ugrams to no port
00:0023DB C70012              +191 	ds	SOCKET_LPOINTER			. without checking sum
00:0023DC 60D001              +192 	la	s:socket_address+1, b
00:0023DD A00F8F              +193 	and	(65535)				. silently or not
00:0023DE C60383              +194 	jza	icmp_du_port			. according to nuisance levels
  :                            195 
00:0023DF 60F001              +196 	la	dgram:bytes
00:0023E0 502180              +197 	lx	rx_buffers
00:0023E1 3E02B3              +198 	lcal	ibuffer
00:0023E2 C6020F              +199 	jza	ipv4_rxz 
  :                            200 
00:0023E3 50E004              +201 	lx	descriptor:dgram
00:0023E4 60F001              +202 	la	dgram:bytes
  :                            203 
00:0023E5 87A000              +204 ?	$do	IPV4_OVERHAUL/8,	qpop	?*4-4, x
00:0023E6 87A004              +204 
00:0023E7 87A008              +204 
00:0023E8 87A00C              +204 
00:0023E9 87A010              +204 
00:0023EA 87A014              +204 
00:0023EB 87A018              +204 
00:0023EC 87A01C              +204 
00:0023ED 87A020              +204 
00:0023EE 87A024              +204 
00:0023EF 87A028              +204 
00:0023F0 87A02C              +204 
00:0023F1 87A030              +204 
00:0023F2 87A034              +204 
00:0023F3 87A038              +204 
00:0023F4 87A03C              +204 
00:0023F5 87A040              +204 
00:0023F6 87A044              +204 
00:0023F7 87A048              +204 
00:0023F8 87A04C              +204 
  :                            205 
00:0023F9 C5FF60              +206 	aa	-IPV4_OVERHAUL,,xi
  :                            207 
00:0023FA 850050              +208 	ax	IPV4_OVERHAUL/2,,xi
00:0023FB 8D0050              +209 	ay	IPV4_OVERHAUL/2,,xi
  :                            210 
00:0023FC 700001              +211 	tz	k
00:0023FD B60400              +212 	j	udp_store	
  :                            213 
00:0023FE 3E049D              +214 udp_qup	lcal	rx_nocheck
00:0023FF B603CA              +215 	j	udp_rxqthru
  :                            216 
  :                            217 udp_store
00:002400 3E044D              +218 	lcal	rx_payload
00:002401 DE0403              +219 	jnzb	$+2
00:002402 680F8F              +220 	lb	(65535)
00:002403 B80001              +221 	xorB	k
00:002404 CE03CA              +222 	jzb	udp_rxqthru
00:002405 B6020B              +223 	j	ipv4_drop
  :                            224 
  :                            225 	$else	. IPV4_OVERHAUL
  :                            226 	
  :                            227 	$endif	. IPV4_OVERHAUL
  :                            228 
  :                            229 .	this is the feed to udpq for reassembled datagrams
  :                            230 .	which are already in a chain of rx_buffer with ACW
  :                            231 .	descriptors
  :                            232 
  :                            233 .	each fragment has the checksum addition of its data
  :                            234 .	in the ACW, to exploit the chance of checksum
  :                            235 .	generation during copy to rx_buffer
  :                            236 
  :                            237 .	it has been second-guessed in all cases that checksum
  :                            238 .	is specified in the UDP header (the UDP header may not
  :                            239 .	be the first fragment of the datagram to arrive).
  :                            240 
  :                            241 .	also, it is unlikely that UDP payload large enough
  :                            242 .	to need reassembly would be exempt from checksum
  :                            243 
  :                            244 .	no-checksum is usually a feature of high-speed
  :                            245 .	media traffic which is transmitted in much smaller
  :                            246 .	packets than any MTU
  :                            247 
  :                            248 .	large reassembly is more likely to be traffic like
  :                            249 .	NFS in 8KByte slabs (or 3KByte slabs where RTA is the
  :                            250 .	NFS client). Checksum would certainly apply
  :                            251 
  :                            252 .	So all the data arriving here has been end-around
  :                            253 .	added and the positive sum left in the ACW
  :                            254 
  :                            255 .	if the UDP header has a nonzero checksum, the data sums
  :                            256 .	are now summed with network address, protocol index
  :                            257 .	and user datagram length, then inverted and if finally
  :                            258 .	zero inverted again. Then compared.
  :                            259 
  :                            260 	$if	RX_FRAGMENTS
  :                            261 udp_rx_rasm
  :                            262 	lx	descriptor:uproto
  :                            263 	la	uugram:checksum, x
  :                            264 	jza	udp_rx_rasm_nocheck
  :                            265 	push	a
  :                            266 	z	uugram:checksum, x
  :                            267 	lcal	rasm77_gcheck
  :                            268 	tnz	b		. because zero isn't
  :                            269 	xorB,xi	-1		. a UDP checksum
  :                            270 	xorB	0, sp
  :                            271 	pop	uugram:checksum, x
  :                            272 	la	fp
  :                            273 	jnzb	net_free_chain
  :                            274 udp_rx_rasm_nocheck
  :                            275 	la	fp
  :                            276 	lx, xi	udpq	
  :                            277 	j	net_add_chain
  :                            278 	$endif
  :                            279 
  :                            280 
  :                            281 udp_buy_txaw
00:002406 6D4500              +282 	lb, xi	04500		. no option bytes, TOS default 0
  :                            283 
  :                            284 udp_buy_txaw_optional
00:002407 F80004              +285 	push	a
00:002408 C50008              +286 	aa, xi	8		. UDP header length
00:002409 3E0212              +287 	lcal	ip_buy_datagram
00:00240A 380005              +288 	pop	b
00:00240B C60413              +289 	jza	udp_txbx
00:00240C 28C003              +290 	sb	descriptor:bytes, a
00:00240D 500013              +291 	lx	TX_DATAGRAM
00:00240E 6D3C11              +292 	lb, xi	IP_DEFAULT_TTL++IPPROTO_UDP
00:00240F 28A004              +293 	sb	dgram:ttl_protocol, x
00:002410 500011              +294 	lx	TP_HEADER
00:002411 54A004              +295 	lx, i	8/2, x
00:002412 10C006              +296 	sx	descriptor:apdata, a
  :                            297 udp_txbx
00:002413 3D0000              +298 	fret	0
  :                            299 				. this is a far call because
  :                            300 				. socket users may call it
  :                            301 
  :                            302 				. unlike the similar calls
  :                            303 				. in icmp and tcp which are
  :                            304 				. not application visible
  :                            305 
  :                            306 
  :                            307 
  :                            308 . far calls
  :                            309 
  :                            310 .	udp_acw_send
  :                            311 .	udp_acw_send_nocheck
  :                            312 
  :                            313 . get to here
  :                            314 
  :                            315 . udp_txaw
  :                            316 . udp_txaw_nocheck
  :                            317 
  :                            318 . low level call with the acw adress in X
  :                            319 
  :                            320 . both ports must be in the UDP header
  :                            321 . both adresses must be in the address buffer
  :                            322 
  :                            323 . if there is no come-from address in the address buffer
  :                            324 . the thing cannot now be checksummed and an earlier
  :                            325 . call should have done the internal routing step to
  :                            326 . find the sending interface and its default network
  :                            327 . address
  :                            328 
  :                            329 . so in that case an error gets returned as described
  :                            330 . in the rest of this discussion
  :                            331 
  :                            332 . it's the interface number that is important in
  :                            333 . finding a local address for the datagram and
  :                            334 . for the checksum
  :                            335 
  :                            336 . it's also optimal if the interface index is already
  :                            337 . in the descriptor
  :                            338 
  :                            339 . we have the local address and the interface number
  :                            340 . already when we just bounce back reversing the
  :                            341 . incoming addresses as a server with the calls to
  :                            342 
  :                            343 . 	udp_rtxbuffer->udp_response_buffer
  :                            344 
  :                            345 . and after message construction, to here:
  :                            346 
  :                            347 .	udp_acw_send->udp_txaw
  :                            348 
  :                            349 . some implementations suggest you do a connect
  :                            350 . which makes a routing call to IP and plugs the
  :                            351 . default network address of the interface back
  :                            352 . into the socket
  :                            353 
  :                            354 . having a from address in the socket is
  :                            355 . usable when you are making the conventional
  :                            356 . calls send and sendto
  :                            357 
  :                            358 . the connect idea is nice for send but not
  :                            359 . for sendto which is meant for random desinations
  :                            360 . reached over various interfaces
  :                            361 
  :                            362 . it's also not right that an application should
  :                            363 . need to pick a local network address before
  :                            364 . binding a UDP socket. The application and its
  :                            365 . developer cannot know that unless the
  :                            366 . application is for one host with one interface
  :                            367 
  :                            368 . since this is the final path step of all the
  :                            369 . possible interface calls to send UDP
  :                            370 
  :                            371 . and the step where checksum is done if opted
  :                            372 . and the come-from address therefore needed
  :                            373 
  :                            374 . we'll do the following here
  :                            375 
  :                            376 . we'll return with an error code if there is
  :                            377 . no source address, because
  :                            378 
  :                            379 . if you got here with the primitive
  :                            380 
  :                            381 .	udp_acw_send
  :                            382 
  :                            383 . then it was up to you to copy the address
  :                            384 . information into the buffers. At this
  :                            385 . point it's no longer certain that the
  :                            386 . socket/port structure is based. That's
  :                            387 . not even in the parameters to this call
  :                            388 . and it's intended that the caller decides
  :                            389 . what at this point is based in socket
  :                            390 . space
  :                            391 
  :                            392 . so we'll send back an error
  :                            393 
  :                            394 . if you obtained the buffer with
  :                            395 
  :                            396 .	udp_rtxbuffer
  :                            397 
  :                            398 . then that DID set the addresses up for you
  :                            399 
  :                            400 . if you came from send, send had access
  :                            401 . to your socket and copied the addresses
  :                            402 . in there
  :                            403 
  :                            404 . if you then get to here with no come-from
  :                            405 . address you hadn't done the connect call
  :                            406 . which writes both to and from addresses
  :                            407 . to the socket. So the same error return
  :                            408 . is appropriate, we'll call it something
  :                            409 . like
  :                            410 
  :                            411 . UDP_NOSOURCENET	$equ	-5
  :                            412 
  :                            413 . if you got here from sendto, that makes
  :                            414 . the same internal routing call as connect
  :                            415 . for every datagram
  :                            416 . but writes what it finds to the datagram
  :                            417 . address buffer and not to the socket
  :                            418 
  :                            419 . recvfrom can cheekily write all the
  :                            420 . incoming addressing to the socket
  :                            421 
  :                            422 . then sendto can skip the internal routing
  :                            423 . step if the socket has a source address
  :                            424 . and the destinaton address stored on the
  :                            425 . socket is the sendto parameter address
  :                            426 
  :                            427 . send can just send on the recvfrom
  :                            428 . addresses as if it had connected
  :                            429 
  :                            430 . since the routing call finds the next hop
  :                            431 . as well as the interface, that information
  :                            432 . stays in the address buffer of the datagram
  :                            433 . and IP routing will not need to find the
  :                            434 . next hop again for this one datagram
  :                            435 
  :                            436 . for connect/send the next-hop isn't saved,
  :                            437 . because it might change. But the interface
  :                            438 . is saved
  :                            439 
  :                            440 
  :                            441 
  :                            442 udp_txaw
00:002414 58A004              +443 	ly	descriptor:dgram, x
00:002415 4FB006              +444 	ql	dgram:ipsource, y
00:002416 7C043C              +445 	jdz	udp_nosource
00:002417 D70006              +446 	da	6			. destination network
00:002418 C70008              +447 	ds	8
00:002419 18000B              +448 	sy	11			. IP datagram pointer
00:00241A 58A005              +449 	ly	descriptor:uproto, x
00:00241B 60A003              +450 	la	descriptor:bytes, x
  :                            451 
00:00241C 680004              +452 	lb	a			. payload length no flag for checksum algo
00:00241D A80F96              +453 	andB	(07FFFFF)
00:00241E 400005              +454 	lr	b
  :                            455 
00:00241F 64C008              +456 	la	8, a, i			. add UDP header length to payload length
00:002420 20A003              +457 	sa	descriptor:bytes, x	. byte count -> descriptor
00:002421 A00F96              +458 	and	(07FFFFF)		. remove keep flag if any
00:002422 20B002              +459 	sa	uugram:udgraml, y	. length -> user datagram header
  :                            460 
  :                            461 .	sa	descriptor:bytes, x	. byte count to... aintcha jerst done that?
  :                            462 					. dont do it again with the sticky bit switched off
  :                            463 
00:002423 18000A              +464 	sy	10			. uugram pointer
00:002424 6D0011              +465 	lb, xi	IPPROTO_UDP
00:002425 C80004              +466 	ab	a			. length counts twice, of itself and as a header word
00:002426 D7B000              +467 	da	0, y			. ports from to
00:002427 D70008              +468 	da	8
00:002428 3E04FD              +469 	lcal	udp_check_payload_tx
00:002429 68000A              +470 	lb	10
00:00242A 20D003              +471 	sa	uugram:checksum, b
00:00242B 58000B              +472 	ly	11
  :                            473 
00:00242C B60437              +474 	j	udp_ip_send
  :                            475 
  :                            476 udp_txaw_nocheck
00:00242D 58A004              +477 	ly	descriptor:dgram, x
00:00242E 4FB006              +478 	ql	dgram:ipsource, y
00:00242F 7C043C              +479 	jdz	udp_nosource
00:002430 68A005              +480 	lb	descriptor:uproto, x
00:002431 60A003              +481 	la	descriptor:bytes, x
00:002432 61C008              +482 	la	8, a, 1			. add udp header length
00:002433 20A003              +483 	sa	descriptor:bytes, x
00:002434 A00F96              +484 	and	(07FFFFF)		. unlikely you want a sticky bit
  :                            485 					. on a datagram you didn't want checked
  :                            486 					. but no harm making sure
00:002435 20D002              +487 	sa	uugram:udgraml, b
00:002436 30D003              +488 	z	uugram:checksum, b
  :                            489 
  :                            490 udp_ip_send
00:002437 FD0001              +491 	MIB_ICOUNT48	udpOutDatagrams:i
(+01)0f
00:002438 2F0578              +491 
00:002439 5E043B              +491 
(+01)0f
00:00243A 170577              +491 
  :                            492 
00:00243B B60167              +493 	j	ip_send			. hand IP the datagram address in Y
  :                            494 
  :                            495 udp_nosource
00:00243C 65FFD9              +496 	la, xi	-UDP_NOSOURCENET
00:00243D 3D0000              +497 	fret	0
  :                            498 
  :                            499 
  :                            500 					. vector udp_rtxbuffer gets here
  :                            501 udp_response_buffer			. ultra primitive call interface
  :                            502 					. the input axw is in B
  :                            503 					. the buffer byte size request
  :                            504 					. is in A
  :                            505 
  :                            506 					. socket option DNF is in K
  :                            507 
00:00243E F80005              +508 	push	b			. you need that back after
00:00243F FF0F97              +509 	call	(udp_txbuffer)		. the buffer request
00:002440 380002              +510 	pop	x
00:002441 C6044C              +511 	jza	udp_noresponseb
  :                            512 					. the new buffer descriptor
  :                            513 					. is in A
  :                            514 					. the application buffer
  :                            515 					. pointer is in B
00:002442 58A005              +516 	ly	axw:uproto, x
00:002443 9FB000              +517 	dpush	uugram:sourcep, y
00:002444 58C005              +518 	ly	axw:uproto, a
00:002445 38B001              +519 	pop	uugram:destp, y
00:002446 38B000              +520 	pop	uugram:sourcep, y
  :                            521 
00:002447 58A004              +522 	ly	axw:dgram, x
00:002448 9FB006              +523 	dpush	dgram:ipsource, y
00:002449 9FB008              +524 	dpush	dgram:ipdest, y
00:00244A 58C004              +525 	ly	axw:dgram, a
00:00244B 87B006              +526 	qpop	dgram:ipsource, y
  :                            527 
  :                            528 .	push	axw:i_f, x
  :                            529 .	pop	axw:i_f, a
  :                            530 
  :                            531 udp_noresponseb
00:00244C 3D0000              +532 	fret	0
  :                            533 
  :                            534 check8in* $proc
  :                            535 	qpush	?*4-4, y
  :                            536 	da	0, sp
  :                            537 	da	2, sp
  :                            538 	qpop	?*4-4, x
  :                            539 	$end
  :                            540 
  :                            541 HEADER_SUM $equ	6
  :                            542 
  :                            543 tx_payload
  :                            544 rx_payload
00:00244D 160006              +545 	dsr	6
00:00244E 400004              +546 	lr	a
00:00244F 360003              +547 	dsl	3
00:002450 A50007              +548 	and, xi	7
00:002451 9F0004              +549 	dpush	a
00:002452 CF0006              +550 	dl	HEADER_SUM
00:002453 B60479              +551 	j	rxcheck64?
  :                            552 rxcheck64!
00:002454 8FB000              +553 ?	$do	8,	check8in
00:002455 D7F000              +553 
00:002456 D7F002              +553 
00:002457 87A000              +553 
00:002458 8FB004              +553 
00:002459 D7F000              +553 
00:00245A D7F002              +553 
00:00245B 87A004              +553 
00:00245C 8FB008              +553 
00:00245D D7F000              +553 
00:00245E D7F002              +553 
00:00245F 87A008              +553 
00:002460 8FB00C              +553 
00:002461 D7F000              +553 
00:002462 D7F002              +553 
00:002463 87A00C              +553 
00:002464 8FB010              +553 
00:002465 D7F000              +553 
00:002466 D7F002              +553 
00:002467 87A010              +553 
00:002468 8FB014              +553 
00:002469 D7F000              +553 
00:00246A D7F002              +553 
00:00246B 87A014              +553 
00:00246C 8FB018              +553 
00:00246D D7F000              +553 
00:00246E D7F002              +553 
00:00246F 87A018              +553 
00:002470 8FB01C              +553 
00:002471 D7F000              +553 
00:002472 D7F002              +553 
00:002473 87A01C              +553 
00:002474 850020              +554 	ax, xi	32
00:002475 8D0020              +555 	ay, xi	32
00:002476 C00005              +556 	aa	b
00:002477 160010              +557 	dsr	16
00:002478 0E0008              +558 	sbr	8
  :                            559 rxcheck64?
00:002479 1E0454              +560 	jdr	rxcheck64!
00:00247A 380000              +561 	pop	r
00:00247B B60482              +562 	j	rxcheck8?
  :                            563 rxcheck8!
00:00247C 8FB000              +564 	qpush	0, y
00:00247D D7F000              +565 	da	0, sp
00:00247E D7F002              +566 	da	2, sp
00:00247F 87A000              +567 	qpop	0, x
00:002480 850004              +568 	ax, xi	4
00:002481 8D0004              +569 	ay, xi	4
  :                            570 rxcheck8?
00:002482 1E047C              +571 	jdr	rxcheck8!
  :                            572 
00:002483 3FF000              +573 	slc	0, sp
00:002484 5E048B              +574 	jnc	rnowordpair
00:002485 9FB000              +575 	dpush	0, y
00:002486 D7F000              +576 	da	0, sp
  :                            577 
00:002487 38A000              +578 	dpop	0, x
00:002488 38A001              +578 
00:002489 850002              +579 	ax	2,,xi
00:00248A 8D0002              +580 	ay	2,,xi
  :                            581 
  :                            582 rnowordpair
00:00248B C70006              +583 	ds	6
00:00248C 380004              +584 	pop	a		. that should leave a return address
  :                            585 				. next on the stack
00:00248D 16002E              +586 	dsr	24+22		. any 1, 2 or 3 bytes ?
  :                            587 
00:00248E CE0494              +588 	jzb	rnolastbytes
00:00248F 40DF90              +589 	lr	(0, 32, 16, 8q), b
00:002490 CFB000              +590 	dl	0, y
00:002491 168000              +591 	dsr	*r
00:002492 368000              +592 	dsl	*r
00:002493 C7A000              +593 	ds	0, x
  :                            594 rnolastbytes
00:002494 D70006              +595 	da	6
00:002495 C70006              +596 	ds	6
00:002496 3E029F              +597 	lcal	check_complete
  :                            598 
00:002497 600005              +599 	la	b
  :                            600 
00:002498 350000              +601 	lret	0
  :                            602 
  :                            603 udp_tx_payload
  :                            604 udp_rx_payload
00:002499 3E044D              +605 	lcal	tx_payload
00:00249A D6049C              +606 	jnza	$+2
00:00249B B00F8F              +607 	xor	(00FFFF)
00:00249C 350000              +608 	lret	0
  :                            609 
  :                            610 in8nocheck* $proc
  :                            611 	qpush	?*4-4, y
  :                            612 	qpop	?*4-4, x
  :                            613 	$end
  :                            614 
  :                            615 tx_nocheck
  :                            616 rx_nocheck
00:00249D 160006              +617 	dsr	6
00:00249E 400004              +618 	lr	a	
00:00249F 360003              +619 	dsl	3
00:0024A0 A50007              +620 	and, xi	7
00:0024A1 B604B4              +621 	j	rx64?
  :                            622 rx64!
00:0024A2 8FB000              +623 ?	$do	8,	in8nocheck
00:0024A3 87A000              +623 
00:0024A4 8FB004              +623 
00:0024A5 87A004              +623 
00:0024A6 8FB008              +623 
00:0024A7 87A008              +623 
00:0024A8 8FB00C              +623 
00:0024A9 87A00C              +623 
00:0024AA 8FB010              +623 
00:0024AB 87A010              +623 
00:0024AC 8FB014              +623 
00:0024AD 87A014              +623 
00:0024AE 8FB018              +623 
00:0024AF 87A018              +623 
00:0024B0 8FB01C              +623 
00:0024B1 87A01C              +623 
00:0024B2 850020              +624 	ax, xi	32
00:0024B3 8D0020              +625 	ay, xi	32
00:0024B4 1E04A2              +626 rx64?	jdr	rx64!
00:0024B5 400004              +627 	lr	a
00:0024B6 B604BB              +628 	j	rx8?
00:0024B7 8FB000              +629 rx8!	qpush	0, y
00:0024B8 87A000              +630 	qpop	0, x
00:0024B9 850004              +631 	ax, xi	4
00:0024BA 8D0004              +632 	ay, xi	4
00:0024BB 1E04B7              +633 rx8?	jdr	rx8!
00:0024BC 360002              +634 	dsl	2
00:0024BD A50003              +635 	and, xi	3
00:0024BE 400004              +636 	lr	a
00:0024BF B604C4              +637 	j	rx2?
00:0024C0 F8B000              +638 rx2!	push	0, y
00:0024C1 38A000              +639 	pop	0, x
00:0024C2 850001              +640 	ax, xi	1
00:0024C3 8D0001              +641 	ay, xi	1
00:0024C4 1E04C0              +642 rx2?	jdr	rx2!
00:0024C5 AE04C9              +643 	jpb	rxnocheckZ
00:0024C6 60B000              +644 	la	0, y
00:0024C7 A00F98              +645 	and	(00FF00)
00:0024C8 20A000              +646 	sa	0, x
  :                            647 rxnocheckZ
00:0024C9 350000              +648 	lret	0
  :                            649 
  :                            650 
  :                            651 check_payload_tx
00:0024CA 58A006              +652 	ly	descriptor:apdata, x
  :                            653 check_payload
00:0024CB C70008              +654 	ds	8
  :                            655 
00:0024CC 600000              +656 	la	r
00:0024CD 160006              +657 	dsr	6
00:0024CE 400004              +658 	lr	a
00:0024CF 650000              +659 	la, xi	0
00:0024D0 360004              +660 	dsl	4
00:0024D1 9F0004              +661 	dpush	a
  :                            662 
00:0024D2 CF0008              +663 	dl	8
00:0024D3 B604E8              +664 	j	txsum64?	. sum any blocks of 64 bytes
  :                            665 
  :                            666 txsum64!
                                ?	$do	16,	;
00:0024D4 D7B000              +668 	da	?*2-2, y
00:0024D5 D7B002              +668 
00:0024D6 D7B004              +668 
00:0024D7 D7B006              +668 
00:0024D8 D7B008              +668 
00:0024D9 D7B00A              +668 
00:0024DA D7B00C              +668 
00:0024DB D7B00E              +668 
00:0024DC D7B010              +668 
00:0024DD D7B012              +668 
00:0024DE D7B014              +668 
00:0024DF D7B016              +668 
00:0024E0 D7B018              +668 
00:0024E1 D7B01A              +668 
00:0024E2 D7B01C              +668 
00:0024E3 D7B01E              +668 
  :                            669 
00:0024E4 8D0020              +670 	ay, xi	32
00:0024E5 C00005              +671 	aa	b		. fold the sum down
00:0024E6 160010              +672 	dsr	16		. otherwise overflow becomes
00:0024E7 0E0008              +673 	sbr	8		. possible after about 1K bytes
  :                            674 
  :                            675 txsum64?
00:0024E8 1E04D4              +676 	jdr	txsum64!
  :                            677 
00:0024E9 380000              +678 	pop	r
00:0024EA B604ED              +679 	j	txsum4?		. sum any blocks of 4 bytes
  :                            680 txsum4!
00:0024EB D7B000              +681 	da	0, y
00:0024EC 8D0002              +682 	ay, xi	2
  :                            683 txsum4?
00:0024ED 1E04EB              +684 	jdr	txsum4!
  :                            685 
00:0024EE C00005              +686 	aa	b
00:0024EF 380005              +687 	pop	b
  :                            688 
00:0024F0 AE04F3              +689 	jpb	txsum1?
00:0024F1 C0B000              +690 	aa	0, y		. sum a remaining byte pair
00:0024F2 8D0001              +691 	ay, xi	1
  :                            692 txsum1?
00:0024F3 6E0001              +693 	rbl	1
00:0024F4 AE04F8              +694 	jpb	txsumz
00:0024F5 68B000              +695 	lb	0, y		. sum a remaining byte
00:0024F6 A80F98              +696 	andB	(00FF00)
  :                            697 txsumx
00:0024F7 C00005              +698 	aa	b
  :                            699 txsumz
00:0024F8 160010              +700 	dsr	16
00:0024F9 0E0008              +701 	sbr	8
00:0024FA D604F7              +702 	jnza	txsumx
00:0024FB 600005              +703 	la	b
00:0024FC 350000              +704 	lret	0
  :                            705 
  :                            706 udp_check_payload_tx
00:0024FD 3E04CA              +707 	lcal	check_payload_tx
00:0024FE B00F8F              +708 	xor	(00FFFF)
00:0024FF C604FE              +709 	jza	$-1
00:002500 350000              +710 	lret	0
  :                            711 
  :                            712 
  :                            713 .	atomic reads and writes of buffer queues shared between the IP task
  :                            714 .	and socket users
  :                            715 
  :                            716 .	the lock cells are in the socket structures, because not all queues need them
  :                            717 
  :                            718 .	some socket users are application protocols in the IP task and some are
  :                            719 .	different tasks
  :                            720 
  :                            721 .	udp_write_rxq is called from udp in the IP task
  :                            722 .	the socket structure is in x
  :                            723 
  :                            724 udp_write_rxq
  :                            725 
00:002501 FD0007              +726 	LOCK	s:udp:tsq, x
00:002502 27F000              +726 
00:002503 07A005              +726 
00:002504 B60503              +726 
00:002505 64A006              +727 	la, i	s:udp:socket_inq, x
00:002506 3E00DF              +728 	lcal	net_transfer
00:002507 30A005              +729 	FREE	s:udp:tsq, x
00:002508 27F000              +729 
00:002509 17000F              +729 
00:00250A 350000              +730 	lret	0
  :                            731 
  :                            732 
  :                            733 .	udp_read_rxq is called by the socket user which may be a server protocol
  :                            734 .	in the IP task or it may be another task
  :                            735 
  :                            736 .	again, the socket structure pointer is in x
  :                            737 
  :                            738 udp_read_rxq
00:00250B FD0007              +739 	push,xi	NETMASK_ABSOLUTE
00:00250C 27F000              +740 	sim	0, sp
00:00250D 07A005              +741 	ts	s:udp:tsq, x
00:00250E B6050D              +742 	j	$-1
00:00250F 5CA006              +743 	ly, i	s:udp:socket_inq, x
00:002510 3E0EC7              +744 	lcal	readq
00:002511 30A005              +745 	z	s:udp:tsq, x
00:002512 27F000              +746 	sim	0, sp
00:002513 17000F              +747 	inc	sp
00:002514 350000              +748 	lret	0
  :                            749 
  :                            750 
  :                            751 .	it's been decided that
  :                            752 
  :                            753 
  :                            754 .	inward traffic will always be in rx_buffers
  :                            755 .	traffic on loopback will just be copied
  :                            756 
  :                            757 udp_drop_dgram
  :                            758 	$if	RX_FRAGMENTS
  :                            759 	LOCK	s:udp:tsq, x
  :                            760 	ly, i	s:udp:socket_inq, x
  :                            761 	lcal	net_drop
  :                            762 	FREE	s:udp:tsq, x
  :                            763 	fret	0
  :                            764 	$else
00:002515 3E050B              +765 	lcal	udp_read_rxq
00:002516 3E00DB              +766 	lcal	net_free
00:002517 3D0000              +767 	fret	0
  :                            768 	$endif
  :                            769 
  :                            770 udp_socket
  :                            771 	$if	1
  :                            772 
00:002518 F80002              +773 	push	x
00:002519 552080              +774 	lx	usockb(1),,xi
00:00251A 3E0A7E              +775 	lcal	protocol_socket
00:00251B 380002              +776 	pop	x
  :                            777 
  :                            778 	$else
  :                            779 
  :                            780         lb, i   BSOCKET*/9      .       | 000 000 000 101 111 000 000 000 |
  :                            781         dsr     9               .       | sss sss sss 000 000 000 101 111 |
  :                            782         and, xi 127
  :                            783         aa, xi  usockb(1)
  :                            784         la      0, a
  :                            785 	rbr	12
  :                            786 	
  :                            787 	$endif
  :                            788 
00:00251C C6051E              +789         jza     udp_socketx
00:00251D 34002F              +790         sabr    BSOCKET
  :                            791 
  :                            792 .	la      s:socket_address+1, b	. socket storage page is there
  :                            793 .	and     (65535)			. is it bound? Let the caller ask
  :                            794 udp_socketx
00:00251E 350000              +795 	lret	0
  :                            796 
  :                            797 
  :                            86: 	$include	udp_send
  :                            1 .	vector name	udp_send
  :                            2 .	default netbuffers must be based before arriving here
  :                            3 
  :                            4 UDP_CHECK_WRITE	$equ	0	. no because (udgram_acw_send) can do it faster
  :                            5 				. and duplicating functionality is boring and shabby
  :                            6 
  :                            7 udp_tx	$tree
                                	$head_far	 params(addresses,	float	;
                                				bytes,		int	;
                                				udatap,		int	;
                                				flags,		int	;
                                				application_;
                                				header_words,	int	;
                                				ap,		int)	;
                                							;
                                			scalars(caller_fp,	int,fp	;
                                				caller_y,	int,y	;
                                				caller_x,	int,x	;
                                				txbytes_total,	int	;
00:00251F F8000E              +20 				unpacked_addresses,	float	)
00:002520 F80003              +20 
00:002521 F80002              +20 
00:002522 FD0000              +20 
00:002523 8F0F99              +20 
  :                            21 
00:002524 CFF00D              +22 	dl	addresses+2
00:002525 160008              +23 	dsr	8
00:002526 0E0008              +24 	sbr	8
00:002527 C70006              +25 	ds	6
00:002528 CFF00B              +26 	dl	addresses
00:002529 160008              +27 	dsr	8
00:00252A 0E0008              +28 	sbr	8
00:00252B 7C052D              +29 	jdz	pre_route
00:00252C B60531              +30 	j	assemble
  :                            31 
  :                            32 pre_route
00:00252D 3E0E15              +33 	lcal	route_outward_interface
00:00252E B60568              +34 	j	no_path
00:00252F 50A002              +35 	lx	this_if:address_list
00:002530 CFA003              +36 	dl	ifaddr:net
  :                            37 
  :                            38 assemble
00:002531 47F000              +39 	qs	unpacked_addresses
00:002532 60F011              +40 	la	flags
00:002533 A00F9D              +41 	and	(APPLICATION_HEADER_WORDS)
00:002534 C6053A              +42 	jza	app_header_counted
  :                            43 
00:002535 40F00A              +44 	lr	addresses-1		. stack walkback word
00:002536 54F013              +45 	lx	ap,,i			. address of pointer
00:002537 F60564              +46 	jxge	bad_argument		. you lied to me
  :                            47 					. these arguments aren't in the stack
00:002538 60F012              +48 	la	application_header_words
00:002539 260001              +49 	sal	1			. extra octets count
  :                            50 
  :                            51 app_header_counted
00:00253A C0F00F              +52 	aa	bytes
00:00253B 20F004              +53 	sa	txbytes_total		. and cache the updated count
00:00253C FF0F97              +54 	call	(udp_txbuffer)
00:00253D C60566              +55 	jza	no_can
  :                            56 
00:00253E 20000E              +57 	sa	fp
00:00253F 60F004              +58 	la	txbytes_total
00:002540 78F011              +59 	tp	flags			. keepie flag?
00:002541 900F9E              +60 	or	(0800000s)		. keepie flag! i/f not to drop on TX
00:002542 20E003              +61 	sa	descriptor:bytes
  :                            62 
00:002543 500013              +63 	lx	TX_DATAGRAM
00:002544 4FF000              +64 	ql	unpacked_addresses
00:002545 47A006              +65 	qs	dgram:ipsource, x
  :                            66 
  :                            67 	$if	UDP_CHECK_WRITE
  :                            68 	da	6
  :                            69 	ds	6			. seed the checksum
  :                            70 	$endif
  :                            71 
00:002546 580011              +72 	ly	TP_HEADER
  :                            73 
00:002547 60F00C              +74 	la	addresses+1		. source port
00:002548 68F00E              +75 	lb	addresses+3		. destination port
00:002549 A00F8F              +76 	and	(00FFFF)
00:00254A A80F8F              +77 	andB	(00FFFF)
00:00254B C7B000              +78 	ds	uugram:sourcep, y
  :                            79 
  :                            80 	$if	UDGRAM_CHECK_WRITE
  :                            81 	da	6
  :                            82 	ds	6
  :                            83 
  :                            84 	la	descriptor:bytes
  :                            85 	la	8, a, i			. transmission PDU octets
  :                            86 	lb	0,,xi
  :                            87 	ds	uugram:udgraml, y
  :                            88 	lb	IPPROTO_UDP, a, i	. needed in checksum
  :                            89 	da	6
  :                            90 	ds	6
  :                            91 	$endif
  :                            92 
00:00254C 5CB004              +93 	ly	8/2, y, i			. apdata
00:00254D 60F011              +94 	la	flags
00:00254E A00F9D              +95 	and	(APPLICATION_HEADER_WORDS)
00:00254F C60558              +96 	jza	payout_apdata
  :                            97 
00:002550 50F013              +98 	lx	ap			. argument already checked present
00:002551 60A000              +99 aheadrw	la	0, x			. before output buffer request
  :                            100 
  :                            101 	$if	UDP_CHECK_WRITE
  :                            102 	ab	a			. keep the checksum seed in line
  :                            103 	$endif
  :                            104 
00:002552 20B000              +105 	sa	0, y
00:002553 850001              +106 	ax	1,,xi
00:002554 8D0001              +107 	ay	1,,xi
00:002555 1FF012              +108 	dec	application_header_words
00:002556 70F012              +109 	tz	application_header_words
00:002557 B60551              +110 	j	aheadrw
  :                            111 
  :                            112 	$if	UDP_CHECK_WRITE
  :                            113 	sb	7
  :                            114 	$endif
  :                            115 
  :                            116 payout_apdata
00:002558 60F010              +117 	la	udatap
00:002559 20000D              +118 	sa	q
  :                            119 
  :                            120 	$if	UDP_CHECK_WRITE
  :                            121 
  :                            122 	la	bytes
  :                            123 	lb	flags
  :                            124 	andB	(UDP_NO_CHECKSUM)
  :                            125 	jzb	send_checked
  :                            126 	lcal	ugram_write
  :                            127 	j	usend
  :                            128 
  :                            129 send_checked
  :                            130 	lcal	w2buffer
  :                            131 
  :                            132 	xor	(00FFFF)
  :                            133 	jza	$-1
  :                            134 	lx	TP_HEADER
  :                            135 	sa	uugram:checksum
  :                            136 
  :                            137 usend	lx	fp			. buffer descriptor
  :                            138 	call	(udgram_acw_send_nocheck)
  :                            139 					. return is from ipsend
  :                            140 					. expected AXW in a : bytes / status in b
  :                            141 	j	udp_txz
  :                            142 
  :                            143 	$else
  :                            144 
00:00255A 60F00F              +145 	la	bytes
00:00255B 3E0DDD              +146 	lcal	udgram_write
00:00255C 50000E              +147 	lx	fp			. buffer descriptor
  :                            148 
00:00255D 68F011              +149 	lb	flags
00:00255E A80F9F              +150 	andB	(UDP_NO_CHECKSUM)
  :                            151 
00:00255F CE0562              +152 	jzb	send_checked
  :                            153 
00:002560 FF0FA0              +154 	call	(udgram_acw_send_nocheck)
00:002561 B60569              +155 	j	udp_txz
  :                            156 					. return is from ipsend
  :                            157 					. expected AXW in a : bytes / status in b
  :                            158 send_checked
00:002562 FF0FA1              +159 	call	(udp_acw_send)
00:002563 B60569              +160 	j	udp_txz
  :                            161 					. return is from ipsend
  :                            162 					. expected AXW in a : bytes / status in b
  :                            163 	$endif
  :                            164 
  :                            165 bad_argument
00:002564 65FFEA              +166 	la	-BAD_ARGUMENT,,xi
00:002565 B60569              +167 	j	udp_txz
  :                            168 
00:002566 65FFF4              +169 no_can	la	-NO_STORAGE,,xi
00:002567 B60569              +170 	j	udp_txz
  :                            171 
00:002568 65FFBF              +172 no_path	la	-NO_PATH,,xi
  :                            173 	
00:002569 87F000              +174 udp_txz	qpop	0, sp
00:00256A 38F000              +175 	pop	0, sp
  :                            176 
00:00256B 380002              +177 	dpop	x
00:00256C 380003              +177 
  :                            178 
00:00256D 38000E              +179 	pop	fp
00:00256E 3D0000              +180 	fret	0
  :                            181 	$root
  :                            87: 	$include	anomaly
  :                            1 TCP_SEEK_ANOMALY	$equ	0	. turn this on for example if remote TCP
  :                            2 					. is receiving impossible ACK pointers
  :                            3 	$if	TCP_SEEK_ANOMALY
  :                            4 tcp_seek_anomaly
  :                            5 	qpush	x
  :                            6 	la	x
  :                            7 	sar	18
  :                            8 	aa	-BSOCKET,,xi		. is that like a connection pointer?
  :                            9 	jnza	tcp_no_socket_address	. no this value certainly is not
  :                            10 	dl	transmission:ack_window	. is the cached ACK value real?
  :                            11 	dsr	8
  :                            12 	sbr	8
  :                            13 	dan	10
  :                            14 	andB	-4,,xi
  :                            15 	jdz	tcp_anomaly_clear	. near enough
  :                            16 
  :                            17 tcp_no_socket_address
  :                            18 tcp_ack_overwritten
  :                            19 	ii	GUARD$			. update calling code
  :                            20 
  :                            21 tcp_anomaly_clear
  :                            22 	qpop	x	
  :                            23 	lret	0
  :                            24 	$endif
  :                            88: 	$include	tcp
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 SOCKET_LPOINTER	$equ	d$save2		. and d$save3, but only for 10 instructions
  :                            42 . TX_DATAGRAM	$equ	d$save3
  :                            43 AP_DATA		$equ	HEADER_LONGWORDS
  :                            44 RX_APDATA	$equ	AP_DATA
  :                            45 HL_FLAGS	$equ	SOCKET_CALL_FLAGS
  :                            46 TPAYLOAD_BYTES	$equ	d$save2
  :                            47 
  :                            48 MSS		$equ	26
  :                            49 					. if a TX reset follows RX segment
  :                            50 
  :                            51 $(67::,y)
43:000000                     +52 tlist	tbank
43:000001                     +52 
43:000002                     +52 
43:000003                     +52 
43:000004                     +52 
43:000005                     +52 
43:000006                     +52 
43:000007                     +52 
43:000008                     +52 
43:000009                     +52 
43:00000A                     +52 
43:00000B                     +52 
43:00000C                     +52 
43:00000D                     +52 
43:00000E                     +52 
43:00000F                     +52 
43:000010                     +52 
43:000011                     +52 
43:000012                     +52 
43:000013                     +52 
43:000014                     +52 
43:000015                     +52 
43:000016                     +52 
43:000017                     +52 
43:000018                     +52 
43:000019                     +52 
43:00001A                     +52 
43:00001B                     +52 
43:00001C                     +52 
43:00001D                     +52 
43:00001E                     +52 
43:00001F                     +52 
43:000020                     +52 
43:000021                     +52 
43:000022                     +52 
43:000023                     +52 
43:000024                     +52 
43:000025                     +52 
43:000026                     +52 
43:000027                     +52 
43:000028                     +52 
43:000029                     +52 
43:00002A                     +52 
43:00002B                     +52 
43:00002C                     +52 
43:00002D                     +52 
43:00002E                     +52 
43:000030                     +52 
43:000032                     +52 
43:000034                     +52 
43:000036                     +52 
43:000038                     +52 
43:000039                     +52 
43:00003A                     +52 
43:00003B                     +52 
43:00003C                     +52 
43:00003D                     +52 
43:00003E                     +52 
43:00003F                     +52 
43:000040                     +52 
43:000041                     +52 
43:000042                     +52 
43:000043                     +52 
43:000044                     +52 
43:000045                     +52 
43:000046                     +52 
43:000048                     +52 
43:00004A                     +52 
43:00004C                     +52 
43:00004E                     +52 
43:000050                     +52 
43:000051                     +52 
43:000052                     +52 
43:000053                     +52 
43:000054                     +52 
43:000055                     +52 
43:000056                     +52 
43:000057                     +52 
  :                            53 
  :                            54 $(70::,x)
46:000000                     +55 transmission	tcp_connection
46:000001                     +55 
46:000002                     +55 
46:000003                     +55 
46:000004                     +55 
46:000005                     +55 
46:000006                     +55 
46:000008                     +55 
46:00000A                     +55 
46:00000C                     +55 
46:00000E                     +55 
46:000010                     +55 
46:000011                     +55 
46:000012                     +55 
46:000013                     +55 
46:000014                     +55 
46:000015                     +55 
46:000016                     +55 
46:000017                     +55 
  :                            56 $(66::,x)
42:000000                     +57 transfer	segment
42:000001                     +57 
42:000002                     +57 
42:000004                     +57 
42:000006                     +57 
42:000007                     +57 
42:000008                     +57 
42:000009                     +57 
42:00000A                     +57 
  :                            58 
  :                            59 $(1)
  :                            60 
01:00041E 000000              +61 tcpq	dq
01:00041F 000000              +61 
  :                            62 
01:000420 000767              +63 tcp_lsegment_noport + tcp_reset_deflect	. default vector RX large segment no port bound:
  :                            64 					. TCP_RST without preliminary checksum. Avoids
  :                            65 					. expensive input-completion / buffering / repooling
  :                            66 
  :                            67 					. can be changed administratively either to silent drop
  :                            68 					. or even to full checksum to choose whether
  :                            69 					. RST + discard or silent discard
  :                            70 
01:000421 000000              +71 tcp_2nd_list	0			. next candidate list for state service
01:000422 000000              +72 tcp_states_beat	0
01:000423 000000              +73 tcp_superpages	0
01:000424 000000              +74 tcp_supercount	0
  :                            75 
  :                            76 $(0)
  :                            77 
  :                            78 tcp_states_step
00:00256F 65000A              +79 	la	TCP_STATES_BEAT,,xi
00:002570 C00097              +80 	aa	DAYCLOCK$
(+01)0f
00:002571 200422              +81 	sa	tcp_states_beat
00:002572 350000              +82 	lret	0
  :                            83 
00:002573 600097              +84 xtcp4	la	DAYCLOCK$
(+01)0f
00:002574 D00422              +85 	ana	tcp_states_beat
00:002575 E6058A              +86 	jna	tcp4x
00:002576 3E056F              +87 	lcal	tcp_states_step
  :                            88 
  :                            89 	$if	TCP_NOQ			. HVSOCKET needs it done this way
  :                            90 	$else
  :                            91 
  :                            92 tcp4	la	tcpq.head
  :                            93 	jza	tcp4_high_volume
  :                            94 	lcal	tcp4_rxaction		. requeues payload to target connection
  :                            95 	j	tcp4
  :                            96 
  :                            97 	$endif
  :                            98 
  :                            99 tcp4_high_volume
  :                            100 
  :                            101 tcp4_routine				. walk and maintain all connections
  :                            102 
  :                            103 					. default connections bank is serviced
  :                            104 					. first and separately
  :                            105 
00:002577 602185              +106 	la	tcx_v4(1)
  :                            107 
  :                            108 tcp4_service
00:002578 3E058B              +109 	lcal	tcp4_service_connection_list	. service the default list
  :                            110 
  :                            111 	$if	HVSOCKET
  :                            112 	$if	1
(+01)0f
00:002579 600421              +113 	la	tcp_2nd_list
00:00257A D60580              +114 	jnza	tcp_service_2nd_list
00:00257B 608FA2              +115 	la	*(BSOCKET*/12++tlist:link)	. tcx_v4(1) is based here
  :                            116 
(+01)0f
00:00257C 680424              +117 	lb	tcp_supercount			. abstract the count_up
(+01)0f
00:00257D 280423              +118 	sb	tcp_superpages			
(+01)0f
00:00257E 300424              +119 	z	tcp_supercount			. and restart it
  :                            120 	
00:00257F C6058A              +121 	jza	tcp_no_2nd_list			. there is only tcx_v4(1)
  :                            122 
  :                            123 tcp_service_2nd_list
(+01)0f
00:002580 170424              +124 	inc	tcp_supercount
00:002581 3E058B              +125 	lcal	tcp4_service_connection_list	. service up to 1 hvlist
00:002582 A70004              +126 	lsc	a				. calculate log of # established
00:002583 650018              +127 	la	24,,xi
00:002584 D00005              +128 	ana	b
00:002585 680F84              +129 	lb	(BSOCKET*/18s)
00:002586 20D02D              +130 	sa	tlist:connection_block(1):timer(2), b
00:002587 60D000              +131 	la	tlist:link, b			. next hvlist next pass
(+01)0f
00:002588 200421              +132 	sa	tcp_2nd_list
00:002589 B6058A              +133 	j	tcp4x
  :                            134 			
  :                            135 tcp_no_2nd_list
  :                            136 	$else
  :                            137 	la	*(BSOCKET*/12++tlist:link)
  :                            138 	jnza	tcp4_service
  :                            139 	$endif
  :                            140 	$endif
  :                            141 
00:00258A 350000              +142 tcp4x	lret	0
  :                            143 
  :                            144 tcp4_service_connection_list
                                	$head_near	scalars(established_count,	int	;
00:00258B FD0000              +146 				save_chain_pointer,	int	)
00:00258C FD0000              +146 
  :                            147 
00:00258D 34002F              +148 	sabr	BSOCKET
00:00258E 500FA3              +149 	lx	(BSOCKET*/12++tlist:chain(1))
  :                            150 tcp4_process_list
00:00258F 10F000              +151 	sx	save_chain_pointer
00:002590 B605CF              +152 	j	tcp4_locate_next_connection
  :                            153 
  :                            154 tcp4_service_next_connection
  :                            155 
00:002591 60A001              +156 	la	transmission:state
00:002592 E605B3              +157 	jna	tcp4_globaltime!
  :                            158 
  :                            159 .	and, xi	63
  :                            160 	
  :                            161 
00:002593 680004              +162 	anu, xi	TCP_ESTABLISHED
00:002594 DD0005              +162 
00:002595 CE0598              +163 	jzb	tcp4_established!
00:002596 CDFFFD              +164 	ab, xi	TCP_ESTABLISHED-TCP_CLOSEWAIT
00:002597 DE05A3              +165 	jnzb	tcp4_synreceived?
  :                            166 
  :                            167 				. closewait
  :                            168 tcp4_established!
  :                            169 	$if	1
00:002598 70A014              +170 	tz	transmission:q4window
00:002599 3E07B1              +171 	lcal	tcp_send_on_window
  :                            172 	$endif
  :                            173 
00:00259A 17F001              +174 	inc	established_count
  :                            175 
  :                            176 .	la	transmission:q4ack:head
  :                            177 .	jza	tcp4_new_traffic?	. (tcp4_globaltime?)
  :                            178 
  :                            179 .	lcal	tcp4_outstanding
  :                            180 
00:00259B 600097              +181 	la	DAYCLOCK$
00:00259C D0A005              +182 	ana	transmission:timer(2)
00:00259D E605A0              +183 	jna	tcp4_new_traffic?	. (tcp4_globaltime?)
  :                            184 					. the top bit of the result
  :                            185 					. is reliable
  :                            186 .	tz	transmission:q4ack:head
  :                            187 .	lcal	tcp4_outstanding
00:00259E 70A016              +188 	tz	transmission:q4ack:head
00:00259F 3E05FF              +189 	lcal	tcp4_retransmit1
  :                            190 .	lcal	tcp_restart_timer2	. inside retransmit1
  :                            191 
  :                            192 tcp4_new_traffic?
  :                            193 	$if	1
00:0025A0 70A014              +194 	tz	transmission:q4window
00:0025A1 3E07B1              +195 	lcal	tcp_send_on_window
  :                            196 	$endif
  :                            197 
00:0025A2 B605B5              +198 	j	tcp4_globaltime?
  :                            199 
  :                            200 tcp4_synreceived?
00:0025A3 680004              +201 	anu, xi	TCP_SYNRECEIVED
00:0025A4 DD0004              +201 
00:0025A5 DE05AF              +202 	jnzb	tcp4_synsent?
  :                            203 
  :                            204 tcp4_most_states
00:0025A6 70A014              +205 	tz	transmission:q4window
00:0025A7 3E07B1              +206 	lcal	tcp_send_on_window
  :                            207 
  :                            208 .	lcal	tcp4_outstanding	. drops the ACKed segments
  :                            209 
00:0025A8 600097              +210 	la	DAYCLOCK$
00:0025A9 D0A005              +211 	ana	transmission:timer(2)
00:0025AA E605B5              +212 	jna	tcp4_globaltime?
  :                            213 
  :                            214 	$if	1			. adult time now!
00:0025AB 70A016              +215 	tz	transmission:q4ack:head	. a local socket replied?
  :                            216 .	lcal	tcp4_outstanding
00:0025AC 70A016              +217 	tz	transmission:q4ack:head
00:0025AD 3E05FF              +218 	lcal	tcp4_retransmit1	. resend if so
  :                            219 .	lcal	tcp_restart_timer2	. inside retransmit1
  :                            220 
  :                            221 	$else
  :                            222 
  :                            223 	lcal	tcp_restart_timer2
  :                            224 	call	(tcp_accept)
  :                            225 	j	tcp4_globaltime?	. there are 2 comebacks from accept
  :                            226 
  :                            227 	$endif
  :                            228 
00:0025AE B605B5              +229 	j	tcp4_globaltime?
  :                            230 
  :                            231 tcp4_synsent?
00:0025AF 680004              +232 	anu	TCP_SYNSENT,,xi
00:0025B0 DD0003              +232 
00:0025B1 CE05A6              +233 	jzb	tcp4_most_states
00:0025B2 B605BC              +234 	j	tcp4_state?
  :                            235 
  :                            236 tcp4_globaltime!
00:0025B3 0FA001              +237 	n	transmission:state	. socket owner reversed state
00:0025B4 B605B9              +238 	j	tcp4_mark_time		. to command relinquish
  :                            239 
  :                            240 tcp4_globaltime?
00:0025B5 60A004              +241 	la	transmission:timer(1)
00:0025B6 C605CF              +242 	jza	tcp4_locate_next_connection
  :                            243 
00:0025B7 D00097              +244 	ana	DAYCLOCK$
00:0025B8 A605CF              +245 	jpa	tcp4_locate_next_connection
  :                            246 
  :                            247 tcp4_mark_time
00:0025B9 3E0948              +248 	lcal	tcp_restart_timer1	. don't repeat the same timeout
  :                            249 					. during final state transitions
  :                            250 
  :                            251 		. an inactivity timeout is not part of TCP protocol except
  :                            252 		. in state TCP_TIMEWAIT during outgoing close.
  :                            253 		. However t77.4 provides inactivity timeout as an optional
  :                            254 		. socket service in states
  :                            255 
  :                            256 		.	TCP_ESTABLISHED
  :                            257 		.	TCP_FINWAIT2
  :                            258 		.	TCP_CLOSEWAIT
  :                            259 
  :                            260 		. because many application protocols use an inactivity timeout.
  :                            261 		. The timeout is signalled upwards by connection state change
  :                            262 		.
  :                            263 
  :                            264 		. The timeout is not active if connection:timer(1) is zero
  :                            265 
00:0025BA FF0FA4              +266 	call	(xdisco)
  :                            267 
00:0025BB B605CF              +268 	j	tcp4_locate_next_connection
  :                            269 
  :                            270 tcp4_state?
  :                            271 tcp4_closed?
00:0025BC 680004              +272 	anu, xi	TCP_CLOSED
00:0025BD DD0001              +272 
00:0025BE CE05C2              +273 	jzb	tcp4_free_block
00:0025BF 680004              +274 	anu, xi	TCP_DELETETCB
00:0025C0 DD000C              +274 
00:0025C1 DE05B5              +275 	jnzb	tcp4_globaltime?
  :                            276 	
  :                            277 tcp4_free_block
  :                            278 
00:0025C2 FD0002              +279 	push	TCP_LISTEN,,xi			. use this state nowhere else
00:0025C3 38A001              +280 	pop	transmission:state		. on a transmission block
  :                            281 
00:0025C4 3E0624              +282 	lcal	tcp_free_rxtx			. free all buffers attached
  :                            283 
00:0025C5 68A000              +284 	lb	transmission:next, x		. out of traffic chain
00:0025C6 28B000              +285 	sb	transmission:next, y
00:0025C7 F88FA5              +286 	push	*(BSOCKET*/12++tlist:free)
00:0025C8 38A000              +287 	pop	0, x				. into free chain
00:0025C9 108FA5              +288 	sx	*(BSOCKET*/12++tlist:free)
  :                            289 
  :                            290 	$if	HVSOCKET
00:0025CA 788FA6              +291 	tp	*(BSOCKET*/12++tlist:flags)
00:0025CB B605CD              +292 	j	tcp4_free_no_mib_line
  :                            293 	$endif
  :                            294 
00:0025CC FF0FA7              +295 	call	(tcp_agent_free)
  :                            296 
  :                            297 tcp4_free_no_mib_line
00:0025CD 500005              +298 	lx	b
00:0025CE B605D1              +299 	j	tcp4_located_next_connection
  :                            300 
  :                            301 tcp4_locate_next_connection
00:0025CF 580002              +302 	ly	x
00:0025D0 50A000              +303 	lx	0, x
  :                            304 tcp4_located_next_connection
00:0025D1 700002              +305 	tz	x
00:0025D2 B60591              +306 	j	tcp4_service_next_connection
00:0025D3 50F000              +307 	lx	save_chain_pointer
00:0025D4 850001              +308 	ax, xi	1
  :                            309 
  :                            310 .	$do	tlist:chain()<32,	$flag	connections bank insufficient chain head space
00:0025D5 400FA8              +311 	lr	(BSOCKET*/12++tlist:chain(CHAINS)+1)
00:0025D6 F605D8              +312 	jxge	tcp4_list_processed
00:0025D7 B6058F              +313 	j	tcp4_process_list
  :                            314 
  :                            315 tcp4_list_processed
00:0025D8 380004              +316 	pop	a		. discard save_chain_pointer
00:0025D9 380004              +317 	pop	a		. return established + closewait
00:0025DA 350000              +318 	lret	0
  :                            319 
  :                            320 tcp4_outstanding
                                	$head_near	scalars(transmission_p,	int,	x	;
00:0025DB F80002              +322 				tra_remote_ack,	long,	6)
00:0025DC 9F0006              +322 
  :                            323 tcp4_outstanding_next
00:0025DD 60A016              +324 	la	transmission:q4ack:head
00:0025DE C605FB              +325 	jza	tcp4_outstanding_later
00:0025DF 50C001              +326 	lx	descriptor:frame, a
  :                            327 
  :                            328 	$if	1
00:0025E0 78A00D              +329 	tp	nframe:stack_index, x	. is it on an interface output queue?
00:0025E1 B605FB              +330 	j	tcp4_outstanding_later	. wait until it is not
  :                            331 	$endif
  :                            332 
  :                            333 	$if	1			. because pointer apdata is repurposed
  :                            334 					. for some transmitted segments
00:0025E2 50C005              +335 	lx	descriptor:uproto, a	. calculation uses header longwords quartet
00:0025E3 580004              +336 	ly	a
00:0025E4 60A006              +337 	la	transfer:hl_code
00:0025E5 16000C              +338 	dsr	12
00:0025E6 260002              +339 	sal	2			. bytes <- netlongs
00:0025E7 0E000C              +340 	sbr	12
00:0025E8 AD0003              +341 	andB	TCP_SYN++TCP_FIN,,xi
00:0025E9 CE05EB              +342 	jzb	tcp4_flags_weighed	. no SYN no FIN weighs nothing
00:0025EA 6D0001              +343 	lb	1,,xi			. SYN or FIN weighs 1 byte
  :                            344 
  :                            345 tcp4_flags_weighed
00:0025EB D80004              +346 	anb	a			. minus header length
00:0025EC C8B003              +347 	ab	descriptor:bytes, y
  :                            348 
  :                            349 	$else
  :                            350 
  :                            351 	lb	descriptor:uproto, a
  :                            352 	lx	b
  :                            353 	anb	descriptor:apdata, a	. generate minus header length
  :                            354 	sbl	1			. byte-pairs -> bytes
  :                            355 
  :                            356 	ly	a
  :                            357 	la	transfer:hl_code
  :                            358 	and	TCP_SYN++TCP_FIN,,xi
  :                            359 	jza	tcp4_flags_weighed
  :                            360 	ab	1,,xi			. plus flags weight
  :                            361 
  :                            362 tcp4_flags_weighed
  :                            363 	ab	descriptor:bytes, y	. tpdu - header + [ SYN | FIN ]
  :                            364 
  :                            365 	$endif
  :                            366 
00:0025ED 360020              +367 	dsl	32
00:0025EE 160010              +368 	dsr	16
00:0025EF C70008              +369 	ds	8
00:0025F0 CFA002              +370 	dl	transfer:seq
00:0025F1 2E0008              +371 	sbl	8
00:0025F2 360008              +372 	dsl	8
00:0025F3 D70008              +373 	da	8			. (sequence + payload) */ 16
  :                            374 
00:0025F4 DFF000              +375 	dan	tra_remote_ack		. lower 16 bits of remote ack are remote window
  :                            376 					. equal only happens when remote window is zero
00:0025F5 7C05F7              +377 	jdz	tcp4_outstanding_release . positive diffence otherwise means higher
00:0025F6 A605FB              +378 	jpa	tcp4_outstanding_later	. sequence + payload > remote ack part
  :                            379 
  :                            380 tcp4_outstanding_release
00:0025F7 50F002              +381 	lx	transmission_p		. transmission control block pointer
00:0025F8 5CA016              +382 	ly	transmission:q4ack,,i
  :                            383 .	la	y			. ?	buffer descriptor pointer
  :                            384 
  :                            385 	$if	HVSOCKET
00:0025F9 3E0954              +386 	lcal	tcp4_net_free_txdatagram
  :                            387 	$else
  :                            388 	lcal	net_free_txdatagram
  :                            389 	$endif
  :                            390 
00:0025FA B605DD              +391 	j	tcp4_outstanding_next
  :                            392 
  :                            393 tcp4_outstanding_later
00:0025FB 38F000              +394 	dpop	0, sp
00:0025FC 38F000              +394 
00:0025FD 380002              +395 	pop	x			. transmission control block pointer
00:0025FE 350000              +396 	lret	0
  :                            397 
  :                            398 tcp4_retransmit1
                                	$head_near	scalars(txbloc_p,	int,	x			;
00:0025FF F80002              +400 				txq_p,		int,	transmission:q4ack:head	)
00:002600 F8A016              +400 
  :                            401 
  :                            402 				. scalar descriptor from queue head
  :                            403 				. must be on stack top for tcp_xmit
  :                            404 
  :                            405 	$if	1
00:002601 3E0937              +406 	lcal	tcp_restart_timer2
  :                            407 	$else
  :                            408 	la	DAYCLOCK$
  :                            409 	aa, xi	TCP_TIMER2
  :                            410 	sa	transmission:timer(2)
  :                            411 	$endif
  :                            412 
  :                            413 tcp4_retransmit_next
00:002602 60F000              +414 	la	txq_p			. descriptor must stay on stack top
00:002603 C60621              +415 	jza	tcp4_retransmitted	. until after tcp_xmit
  :                            416 
00:002604 68C001              +417 	lb	descriptor:frame, a
  :                            418 
  :                            419 	$if	1
00:002605 78D00D              +420 	tp	nframe:stack_index, b
00:002606 B60621              +421 	j	tcp4_retransmitted	. it's still on interface TX queue
  :                            422 	$endif
  :                            423 
00:002607 58C005              +424 	ly	descriptor:uproto, a
00:002608 180011              +425 	sy	TP_HEADER
  :                            426 
00:002609 CFB004              +427 	dl	transfer:ack, y
00:00260A C0B007              +428 	aa	transfer:window, y
00:00260B C8B008              +429 	ab	transfer:checksum, y
  :                            430 
  :                            431 tcp4_retransmit_rewind
00:00260C C00005              +432 	aa	b
00:00260D 160010              +433 	dsr	16
00:00260E 0E0008              +434 	sbr	8
00:00260F D6060C              +435 	jnza	tcp4_retransmit_rewind
  :                            436 
00:002610 B80F8F              +437 	xorB	(00FFFF)
00:002611 28B008              +438 	sb	transfer:checksum, y
  :                            439 
00:002612 50F001              +440 	lx	txbloc_p		. may be looped round from tcp_xmit / (ipsend)
  :                            441 					. and got a different structure in x ->
00:002613 3E07A1              +442 	lcal	tcp_award_window
00:002614 CFA00E              +443 	dl	transmission:ack_window
00:002615 160008              +444 	dsr	8
00:002616 0E0008              +445 	sbr	8
00:002617 C7000A              +446 	ds	10
  :                            447 
  :                            448 	$if	TCP_SEEK_ANOMALY
  :                            449 	lcal	tcp_seek_anomaly
  :                            450 	$endif
  :                            451 
00:002618 3E07F0              +452 	lcal	tcp_xmit
  :                            453 
00:002619 FD0001              +454 	MIB_ICOUNT48	tcpRetransSegs:i
(+01)0f
00:00261A 2F0563              +454 
00:00261B 5E061D              +454 
(+01)0f
00:00261C 170562              +454 
  :                            455 
  :                            456 	$if	1
00:00261D 60F000              +457 	la	txq_p
00:00261E 60C000              +458 	la	descriptor:next, a
00:00261F 20F000              +459 	sa	txq_p
00:002620 D60602              +460 	jnza	tcp4_retransmit_next
  :                            461 	$endif
  :                            462 
  :                            463 tcp4_retransmitted
00:002621 380004              +464 	pop	a			. descriptor
00:002622 380002              +465 	pop	x			. connection
  :                            466 
00:002623 350000              +467 	lret	0
  :                            468 
00:002624 9F0002              +469 tcp_free_rxtx $head_near	scalars(xy, long, x)
00:002625 5CA010              +470 	ly, i	transmission:receiveq
00:002626 3E0633              +471 	lcal	tcp_freerxq
00:002627 50F000              +472 	lx	xy
00:002628 5CA012              +473 	ly, i	transmission:deferq
00:002629 3E0633              +474 	lcal	tcp_freerxq
00:00262A 50F000              +475 	lx	xy
00:00262B 5CA014              +476 	ly, i	transmission:q4window
00:00262C 3E063B              +477 	lcal	tcp_freetxq
00:00262D 50F000              +478 	lx	xy
00:00262E 5CA016              +479 	ly, i	transmission:q4ack
00:00262F 3E063B              +480 	lcal	tcp_freetxq
  :                            481 
00:002630 380002              +482 	dpop	x
00:002631 380003              +482 
00:002632 350000              +483 	lret	0
  :                            484 
  :                            485 tcp_freerxq $tree
00:002633 F80003              +486 	$head_near	scalars(qtuple, int, y)
00:002634 3E0EC7              +487 sample	lcal	readq
00:002635 C60639              +488 	jza	clear
00:002636 3E092D              +489 	lcal	tcp_free
00:002637 58F000              +490 	ly	qtuple
00:002638 B60634              +491 	j	sample
00:002639 380003              +492 clear	pop	y
00:00263A 350000              +493 	lret	0
  :                            494 	$root
  :                            495 
  :                            496 tcp_freetxq $tree
00:00263B F80003              +497 	$head_near	scalars(qtuple, int, y)
00:00263C 3E0EC7              +498 sample	lcal	readq
00:00263D C60641              +499 	jza	clear
00:00263E 3E0930              +500 	lcal	tcp_free_tx
00:00263F 58F000              +501 	ly	qtuple
00:002640 B6063C              +502 	j	sample
00:002641 380003              +503 clear	pop	y
00:002642 350000              +504 	lret	0
  :                            505 	$root
  :                            506 
  :                            507 tcp4_construct_connections_bank
00:002643 651000              +508 	la, xi	4096
00:002644 750043              +509 	ii	BANK$
00:002645 C6065B              +510 	jza	tcp4_construct_x
00:002646 34002F              +511 	sabr	BSOCKET
00:002647 580F84              +512 	ly	(BSOCKET*/18s)
00:002648 8F0004              +513 	qpush	a
00:002649 160030              +514 	dsr	48				. clear hash chain heads
00:00264A C70006              +515 	ds	6
  :                            516 
00:00264B 54B008              +517 	lx	tlist:chain(1),,i
00:00264C 450007              +518 	lr	CHAINS/4-1,,xi
  :                            519 
  :                            520 tcp4_zhash_chain
00:00264D 47A000              +521 	qs	0, x
00:00264E 850004              +522 	ax	4,,xi
00:00264F 1E064D              +523 	jdr	tcp4_zhash_chain
  :                            524 	
00:002650 30B001              +525 	z	tlist:free
00:002651 64B028              +526 	la	tlist:connection_block(1),,i
00:002652 20B002              +527 	sa	tlist:top			. new transmission block acquire pointer
00:002653 602180              +528 	la	rx_buffers			. default buffer pool
00:002654 20B003              +529 	sa	tlist:rxbu_p			
00:002655 602181              +530 	la	tx_buffers			. default buffer pool
00:002656 20B004              +531 	sa	tlist:txbu_p
00:002657 870004              +532 	qpop	a
  :                            533 
00:002658 30B000              +534 	z	tlist:link			. tcp service chain
00:002659 30B006              +535 	z	tlist:flags			. default transmissions block
00:00265A 30B007              +536 	z	tlist:rxowner			. owning application thread control block
  :                            537 
  :                            538 tcp4_construct_x
00:00265B 350000              +539 	lret	0
  :                            540 
  :                            541 tcp_auto_accept
00:00265C 3E0680              +542 	lcal	tcp_add_connection
00:00265D 350000              +543 	lret	0			. no connection block
00:00265E 3E06B6              +544 	lcal	tcp_add_incoming_defaults
00:00265F 350001              +545 	lret	1			. input segment bad
  :                            546 
00:002660 FD0001              +547 	MIB_ICOUNT48	tcpPassiveOpens:i
(+01)0f
00:002661 2F0559              +547 
00:002662 5E0664              +547 
(+01)0f
00:002663 170558              +547 
  :                            548 
00:002664 CFA00E              +549 	dl	transmission:ack_window, x
00:002665 D70FA9              +550 	da	(1*/16:d)
00:002666 C7A00E              +551 	ds	transmission:ack_window, x
00:002667 8F0008              +552 	qpush	8
00:002668 87A006              +553 	qpop	transmission:socket_address, x
  :                            554 
00:002669 FD0004              +555 	push,xi	TCP_SYNRECEIVED
00:00266A 38A001              +556 	pop	transmission:state
  :                            557 
00:00266B 788FA6              +558 	tp	*(BSOCKET*/12++tlist:flags)
00:00266C B6066F              +559 	j	tcp_hv_accept
  :                            560 
00:00266D FF0FAB              +561 	call	(tcp_agent_add)
00:00266E 350002              +562 	lret	2
  :                            563 
  :                            564 tcp_hv_accept
00:00266F 3E0937              +565 	lcal	tcp_restart_timer2
00:002670 FF0FAC              +566 	call	(tcp_accept)
00:002671 350001              +567 	lret	1			. could not respond yet
00:002672 CFA00C              +568         dl      transmission:sequence_ackx, x
00:002673 D70FA9              +569         da      (1*/16:d)
00:002674 C7A00C              +570         ds      transmission:sequence_ackx, x
00:002675 350002              +571 	lret	2			. good
  :                            572 
  :                            573 tcp_xaccept
00:002676 60A016              +574 	la	transmission:q4ack:head
00:002677 90A014              +575 	or	transmission:q4window.head
00:002678 D6067D              +576 	jnza	tcp_e0_accept
  :                            577 .	ql	(06012, 04500, 0204, 0q)
  :                            578 .	push	transmission:mss	. this may be happening
  :                            579 .	pop	7			. many circuits later than
  :                            580 					. SYNC receive
  :                            581 
00:002679 3E066F              +582 	lcal	tcp_hv_accept
00:00267A B6067E              +583 	j	tcp_e1_accept
00:00267B B6067E              +584 	j	tcp_e2_accept
00:00267C 650000              +585 	la, xi	0			. generate a handle!
  :                            586 
  :                            587 tcp_e0_accept
00:00267D 3D0000              +588 	fret	0
  :                            589 tcp_e1_accept
  :                            590 tcp_e2_accept
00:00267E 65FFFF              +591 	la, xi	-1
00:00267F 3D0000              +592 	fret	0
  :                            593 	
  :                            594 .	prior pointer is in y
  :                            595 .	actual pointer is NULL
  :                            596 
  :                            597 tcp_add_connection
00:002680 60B000              +598 	la	0, y			. insert point forward pointer
00:002681 680F84              +599 	lb	(BSOCKET*/18s)
00:002682 50D001              +600 	lx	tlist:free, b
00:002683 700002              +601 	tz	x
00:002684 B6068D              +602 	j	tcp_free_block_found
00:002685 50D002              +603 	lx	tlist:top, b		. new connexions heap top
00:002686 44DFE9              +604 	lr	4096-24+1, b, i		. limit default transmissions block
00:002687 78D006              +605 	tp	tlist:flags, b		. big traffic connections list?
00:002688 40D003              +606 	lr	tlist:climit, b		. limit port-dedicated transmissions block
00:002689 F606A3              +607 	jxge	tcp_no_new_connection
00:00268A FCA018              +608 	push, i	24, x
00:00268B 38D002              +609 	pop	tlist:top, b
00:00268C B6068F              +610 	j	tcp_connection_made
  :                            611 
  :                            612 tcp_free_block_found
00:00268D F8A000              +613 	push	transmission:next, x
00:00268E 38D001              +614 	pop	tlist:free, b
  :                            615 
  :                            616 tcp_connection_made
00:00268F 20A000              +617 	sa	transmission:next, x	. insert point forward pointer
00:002690 10B000              +618 	sx	transmission:next, y	. insert point previous block
  :                            619 
00:002691 CF0096              +620 	dl	DAYCLOCK$U
00:002692 360010              +621 	dsl	16
00:002693 C7A00C              +622 	ds	transmission:sequence_ackx
  :                            623 
00:002694 30A004              +624 	z	transmission:timer(1)	. no timeout for high-volume connections
00:002695 788FA6              +625 	tn	*(BSOCKET*/12++tlist:flags)
00:002696 B60698              +625 
00:002697 3E0948              +626 	lcal	tcp_restart_timer1	. timeout for regular connections
  :                            627 
00:002698 160030              +628 	dsr	48
00:002699 30A003              +629 	z	transmission:tsq
00:00269A C7A010              +630 	ds	transmission:receiveq:head
00:00269B C7A012              +631 	ds	transmission:deferq:head
00:00269C C7A014              +632 	ds	transmission:q4window:head
00:00269D C7A016              +633 	ds	transmission:q4ack:head
  :                            634 
00:00269E 6D2000              +635 	lb	MAXIMUM,,xi
  :                            636 
  :                            637 	$if	HVSOCKET
00:00269F 788FA6              +638 	tp	*(BSOCKET*/12++tlist:flags)
00:0026A0 688FAD              +639 	lb	*(BSOCKET*/12++tlist:connection_block(1):mss)
  :                            640 	$endif
  :                            641 
00:0026A1 C7A00E              +642 	ds	transmission:ack_window
00:0026A2 350001              +643 	lret	1
  :                            644 
  :                            645 tcp_no_new_connection
00:0026A3 350000              +646 	lret	0
  :                            647 
  :                            648 tcp_scan_options
00:0026A4 400004              +649 	lr	a
00:0026A5 B606B4              +650 	j	tcp_scan_next_option?
  :                            651 
  :                            652 tcp_scan_next_option
00:0026A6 60B000              +653 	la	0, y
00:0026A7 680004              +654 	anu, xi	0204
00:0026A8 DD0204              +654 
00:0026A9 DE06B3              +655 	jnzb	tcp_scan_option2
00:0026AA 1E06AC              +656 	jdr	tcp_scan_mss
00:0026AB 350000              +657 	lret	0
  :                            658 
  :                            659 tcp_scan_mss
00:0026AC 60B001              +660 	la	1, y
00:0026AD 680004              +661 	anu	MSS
00:0026AE D8001A              +661 
00:0026AF 7E06B1              +662 	jc	tcp_keep_mss
00:0026B0 20001A              +663 	sa	MSS
  :                            664 tcp_keep_mss
00:0026B1 8D0002              +665 	ay, xi	2
00:0026B2 B606B4              +666 	j	tcp_scan_next_option?
  :                            667 
  :                            668 		. that will work so long as MSS
  :                            669 		. option is on a byte pair boundary
  :                            670 
  :                            671 
  :                            672 tcp_scan_option2
00:0026B3 8D0001              +673 	ay, xi	1
  :                            674 
  :                            675 tcp_scan_next_option?
00:0026B4 1E06A6              +676 	jdr	tcp_scan_next_option
00:0026B5 350001              +677 	lret	1
  :                            678 
  :                            679 tcp_add_incoming_defaults
00:0026B6 60E002              +680 	la	descriptor:i_f
(+01)10
00:0026B7 C50000              +681 	aa, xi	i_f_pointer_array
00:0026B8 60C000              +682 	la	0, a
00:0026B9 68C004              +683 	lb	this_if:mtu, a
00:0026BA CDFFD8              +684 	ab, xi	-40
00:0026BB 28001A              +685 	sb	MSS
00:0026BC 58E005              +686 	ly	descriptor:uproto
00:0026BD CFB002              +687 	dl	transfer:seq, y
00:0026BE 2E0008              +688 	sbl	8
00:0026BF 360008              +689 	dsl	8
00:0026C0 480F8F              +690 	lk	(00FFFF)
00:0026C1 BFA00F              +691 	mlb	transmission:ack_window+1, x
00:0026C2 C7A00E              +692 	ds	transmission:ack_window, x
  :                            693 
00:0026C3 CFA00C              +694 	dl	transmission:sequence_ackx, x
00:0026C4 BFB007              +695 	mlb	transfer:window, y
00:0026C5 C7A00A              +696 	ds	transmission:remote_ack_window, x
  :                            697 
00:0026C6 60001B              +698 	la	HL_FLAGS
00:0026C7 06000B              +699 	sar	12-1
00:0026C8 A5001E              +700 	and, xi	30
00:0026C9 8D000A              +701 	ay, xi	10
00:0026CA C5FFF6              +702 	aa, xi	-10
  :                            703 
00:0026CB E606CE              +704 	jna	tcp_add_anomaly
00:0026CC C606CF              +705 	jza	tcp_options_complete
00:0026CD 3E06A4              +706 	lcal	tcp_scan_options
  :                            707 tcp_add_anomaly
00:0026CE 350000              +708 	lret	0	. bad return from scan_options
  :                            709 
  :                            710 tcp_options_complete
00:0026CF 18E006              +711 	sy	descriptor:apdata
  :                            712 
00:0026D0 60001A              +713 	la	MSS
00:0026D1 20A002              +714 	sa	transmission:mss, x
00:0026D2 350001              +715 	lret	1
  :                            716 
  :                            717 tcp_log_reset
00:0026D3 FD0001              +718 	MIB_ICOUNT48	tcpOutRsts:i
(+01)0f
00:0026D4 2F0567              +718 
00:0026D5 5E06D7              +718 
(+01)0f
00:0026D6 170566              +718 
00:0026D7 350000              +719 	lret	0	
  :                            720 
  :                            721 tcp_ripdown
  :                            722 .	lcal	tcp_clear
00:0026D8 3E06D3              +723 	lcal	tcp_log_reset
00:0026D9 FD0001              +724 	push,xi	TCP_CLOSED
00:0026DA 38A001              +725 	pop	transmission:state
00:0026DB 350000              +726 	lret	0
  :                            727 
  :                            728 tcp_refuse
00:0026DC 3E0834              +729 	lcal	tcp_reset	. send a reset if possible
00:0026DD B606DE              +730 	j	$+1	
00:0026DE 3E06D8              +731 	lcal	tcp_ripdown
00:0026DF 3D0000              +732 	fret	0
  :                            733 
  :                            734 tcp_locate_connection		. passive connect from remote
00:0026E0 50E005              +735 	lx	descriptor:uproto
00:0026E1 100011              +736 	sx	TP_HEADER
00:0026E2 60A006              +737 	la	transfer:hl_code, x
00:0026E3 20001B              +738 	sa	HL_FLAGS
  :                            739 
00:0026E4 CFA000              +740 	dl	transfer:sourcep
00:0026E5 20000B              +741 	sa	11		. the remote port
00:0026E6 280009              +742 	sb	9		. the local port
  :                            743 
00:0026E7 480F8F              +744 	lk	(00FFFF)
00:0026E8 50E004              +745 	lx	descriptor:dgram
  :                            746 
00:0026E9 CFA006              +747 	dl	dgram:ipsource, x
00:0026EA 2E0008              +748 	sbl	8
00:0026EB 360008              +749 	dsl	8
00:0026EC BF000B              +750 	mlb	11
00:0026ED C70006              +751 	ds	6		. the remote socket
  :                            752 
00:0026EE CFA008              +753 	dl	dgram:ipdest, x
00:0026EF 2E0008              +754 	sbl	8
00:0026F0 360008              +755 	dsl	8
00:0026F1 BF0009              +756 	mlb	9
  :                            757 				. the local socket
  :                            758 
  :                            759 tcp_check_connection		. active or passive connect
00:0026F2 470008              +760 	qs	8		. local_net:port:remote_net:port
  :                            761 
  :                            762 	$if	HVSOCKET
00:0026F3 FF0FAE              +763 	call	(tcp_hash_connection)
  :                            764 
  :                            765 	$else
  :                            766 
  :                            767 	dsl	32		. isolate local port
  :                            768 	sar	8
  :                            769 	call	(tcp_hash_localsocket)
  :                            770 	$endif
  :                            771 
00:0026F4 500FA3              +772 	lx	(BSOCKET*/12++tlist:chain(1))	. &first
00:0026F5 800004              +773 	ax	a
  :                            774 tcp_seek
00:0026F6 580002              +775 	ly	x
00:0026F7 50A000              +776 	lx	transmission:next
  :                            777 
00:0026F8 700002              +778 	tz	x
00:0026F9 B606FB              +779 	j	tcp_compare_local
00:0026FA 350000              +780 	lret	0
  :                            781 
  :                            782 tcp_compare_local
00:0026FB 4FA006              +783 	ql	transmission:socket_address
00:0026FC DF0008              +784 	dan	8
  :                            785 
00:0026FD 7C0701              +786 	jdz	tcp_compare_remote
00:0026FE 5E06F6              +787 	jnc	tcp_seek	. candidate address > address in chain
  :                            788 
00:0026FF 550000              +789 	lx, xi	0		. insert point is in y
00:002700 350000              +790 	lret	0
  :                            791 
  :                            792 tcp_compare_remote
00:002701 CF0006              +793 	dl	6
00:002702 DF000A              +794 	dan	10
  :                            795 
00:002703 7C0706              +796 	jdz	tcp_tbloc_found	. socket addresses = segment addresses
00:002704 5E06F6              +797 	jnc	tcp_seek	. candidate address > address in chain
  :                            798 
00:002705 550000              +799 	lx, xi	0		. insert point is in y
  :                            800 tcp_tbloc_found
00:002706 350000              +801 	lret	0
  :                            802 
  :                            803 	. the LRET was up there
  :                            804 
00:002707 350000              +805 	lret	0
  :                            806 
00:002708 60A006              +807 tcp_rxq	la	transfer:hl_code
00:002709 20001B              +808 	sa	HL_FLAGS
00:00270A 60F001              +809 	la	dgram:bytes		. TP_HEADER is in x
00:00270B 48A008              +810 	lk	transfer:checksum, x
00:00270C 30A008              +811 	z	transfer:checksum, x
00:00270D 680004              +812 	anu	IPV4_OVERHAUL,,xi
00:00270E DD00A0              +812 
00:00270F CE0711              +813 	jzb	tcp_rxqexact
00:002710 7E073F              +814 	jc	tcp_rxqlong		. interface contains
  :                            815 					. more of this datagram
  :                            816 
  :                            817 tcp_rxqexact				. datagram is all in internal stack
00:002711 3E0270              +818 	lcal	check_part1s		. and can be checksumed there
00:002712 3E029F              +819 	lcal	check_complete		. return is recalculated checksum in b
00:002713 B80001              +820 	xorB	k
00:002714 DE0738              +821 	jnzb	tcp_rx_error
  :                            822 
00:002715 60A001              +823 	la	transfer:destp, x
00:002716 3E0927              +824 	lcal	tcp_socket
00:002717 C60767              +825 	jza	tcp_reset_deflect	. the port is not tabled
00:002718 C70012              +826 	ds	SOCKET_LPOINTER		. there is no buffer descriptor yet
00:002719 60D001              +827 	la	s:socket_address+1, b	. netaddress|0.0.0.0:port_number if bound
00:00271A A00F8F              +828 	and	(00FFFF)
00:00271B C60767              +829 	jza	tcp_reset_deflect	. the port is not bound
  :                            830 
  :                            831 .	lx	rx_buffers		. default space for RX segments
  :                            832 
00:00271C 40F001              +833 	lr	dgram:bytes
00:00271D 3E02A5              +834 	lcal	t_ibuffer
00:00271E C60733              +835 	jza	tcp_rxbu_error		. no buffer available
  :                            836 					. descriptor is in fp
00:00271F 68F001              +837 	lb	dgram:bytes		. buffer the datagram
00:002720 CDFFFF              +838 	ab	-1,,xi			. calculate 8-byte blocks less 1
00:002721 5E073A              +839 	jnc	tcp_escape_error
00:002722 0E0003              +840 	sbr	3
00:002723 400005              +841 	lr	b
00:002724 50E004              +842 	lx	descriptor:dgram
  :                            843 
  :                            844 tcp_iquick
00:002725 87A000              +845 	qpop	0, x
00:002726 850004              +846 	ax	4,,xi
00:002727 1E0725              +847 	jdr	tcp_iquick
  :                            848 
  :                            849 tcp_qthru
00:002728 FD0001              +850 	MIB_ICOUNT48	tcpInSegs:i
(+01)0f
00:002729 2F055F              +850 
00:00272A 5E072C              +850 
(+01)0f
00:00272B 17055E              +850 
  :                            851 	$if	TCP_NOQ			. HVSOCKET needs it done this way
00:00272C 3E095B              +852 	lcal	tcp4_rxaction
  :                            853 	$else
  :                            854 	dl	SOCKET_LPOINTER		. socket structure long virtual address
  :                            855 	ds	descriptor:sobdi
  :                            856 
  :                            857 	ly	tcpq,,xi
  :                            858 
  :                            859 	la	fp
  :                            860 	lcal	q2
  :                            861 	$endif
  :                            862 
00:00272D B6020F              +863 	j	ipv4_rxz
  :                            864 
  :                            865 tcp_log_rx_error
00:00272E FD0001              +866 	MIB_ICOUNT48	tcpInErrs:i
(+01)0f
00:00272F 2F0565              +866 
00:002730 5E0732              +866 
(+01)0f
00:002731 170564              +866 
00:002732 350000              +867 	lret	0
  :                            868 
  :                            869 tcp_rxbu_error
00:002733 FD0001              +870 	MIB_ICOUNT48	tcpInDrops:i
(+01)0f
00:002734 2F056D              +870 
00:002735 5E0737              +870 
(+01)0f
00:002736 17056C              +870 
00:002737 B6020F              +871 	j	ipv4_rxz
  :                            872 
  :                            873 tcp_rx_error				. get here if socket buffer 
00:002738 3E072E              +874 	lcal	tcp_log_rx_error	. not yet assigned
00:002739 B6020F              +875 	j	ipv4_rxz		. and error detected
  :                            876 
  :                            877 tcp_escape_error			. get here if socket buffer assigned
00:00273A 3E072E              +878 	lcal	tcp_log_rx_error	. before error detected
  :                            879 					. drop thru
  :                            880 tcp_escape				. get here if it's not an error
00:00273B 60000E              +881 	la	fp			. but rx segment is completely actioned
  :                            882 
  :                            883 	$if	HVSOCKET
00:00273C 508FAF              +884 	lx	*(BSOCKET*/12++tlist:rxbu_p)
  :                            885 	$else
  :                            886 	lx	rx_buffers
  :                            887 	$endif
  :                            888 
00:00273D 3E0E65              +889 	lcal	sell1
00:00273E B6020F              +890 	j	ipv4_rxz
  :                            891 
  :                            892 tcp_rxqlong
00:00273F 3E026E              +893 	lcal	check_part1		. uses HEADER_LONGWORDS
00:002740 60A001              +894 	la	transfer:destp, x
00:002741 3E0927              +895 	lcal	tcp_socket
  :                            896 
(+01)0d
00:002742 C68420              +897 	jza	*tcp_lsegment_noport	. without even checksum. default is reset
  :                            898 					. it might stop more junk coming
  :                            899 
00:002743 C70012              +900 	ds	SOCKET_LPOINTER	
00:002744 60D001              +901 	la	s:socket_address+1, b	. netaddress|0.0.0.0:port_number if bound
00:002745 A00F8F              +902 	and	(00FFFF)
(+01)0d
00:002746 C68420              +903 	jza	*tcp_lsegment_noport
  :                            904 
  :                            905 .	lx	rx_buffers		. default RX segments space
  :                            906 
00:002747 40F001              +907 	lr	dgram:bytes
00:002748 3E02A5              +908 	lcal	t_ibuffer		. this call saves / restores y and b
00:002749 C60733              +909 	jza	tcp_rxbu_error
  :                            910 					. fp -> descriptor
00:00274A 50E004              +911 	lx	descriptor:dgram
00:00274B 60F001              +912 	la	dgram:bytes		. obtain the datagram second part length
00:00274C C5FF60              +913 	aa	-IPV4_OVERHAUL,,xi	. while the header is in the internal stack
  :                            914 
00:00274D 87A000              +915 ?	$do	IPV4_OVERHAUL/8,	qpop	?*4-4, x
00:00274E 87A004              +915 
00:00274F 87A008              +915 
00:002750 87A00C              +915 
00:002751 87A010              +915 
00:002752 87A014              +915 
00:002753 87A018              +915 
00:002754 87A01C              +915 
00:002755 87A020              +915 
00:002756 87A024              +915 
00:002757 87A028              +915 
00:002758 87A02C              +915 
00:002759 87A030              +915 
00:00275A 87A034              +915 
00:00275B 87A038              +915 
00:00275C 87A03C              +915 
00:00275D 87A040              +915 
00:00275E 87A044              +915 
00:00275F 87A048              +915 
00:002760 87A04C              +915 
  :                            916 
00:002761 850050              +917 	ax	IPV4_OVERHAUL/2,,xi
00:002762 8D0050              +918 	ay	IPV4_OVERHAUL/2,,xi
  :                            919 
00:002763 3E044D              +920 	lcal	rx_payload		. return is recalculated checksum in b
00:002764 B80001              +921 	xorB	k			. k holds the retrieved checksum
00:002765 CE0728              +922 	jzb	tcp_qthru
  :                            923 
00:002766 B6073A              +924 	j	tcp_escape_error	. if it did not checksum
  :                            925 					. push the buffer back while it's still at heap top
  :                            926 
  :                            927 tcp_reset_deflect
00:002767 60A006              +928 	la	transfer:hl_code, x
00:002768 A50004              +929 	and	TCP_RST,,xi
00:002769 D6020F              +930 	jnza	ipv4_rxz		. don't reset a reset
  :                            931 
  :                            932 	$if	IPV4_OVERHAUL>144	. protect the internal stack
  :                            933 					. if the frame in it is too large for more work
00:00276A 450020              +934 	lr	32,,xi			. make sure 20 word shuffle does not overlap
00:00276B 58000F              +935 	ly	sp			. read the datagram leading edge
00:00276C FE0778              +936 	jyge	tcp_deflect_frame_safe	. do not shuffle unnecessarily or with overlap
  :                            937 
  :                            938 	$if	0
  :                            939 
  :                            940 	j	ipv4_rxz		. the simpler way may be even better:
  :                            941 					. i.e. drop the input silently
  :                            942 	$else				. but it may be helpful to send reset
  :                            943 
00:00276D 500011              +944 	lx	TP_HEADER		. read the TCP header leading edge
00:00276E 600091              +945 	la	ONE_TIME_SAVE1		. take the stack back nearer its origin
00:00276F 20000F              +946 	sa	sp
00:002770 8FA006              +947 	qpush	6, x			. push the minimum TCP header
00:002771 8FA002              +948 	qpush	2, x
00:002772 9FA000              +949 	dpush	0, x
00:002773 60000F              +950 	la	sp
00:002774 200011              +951 	sa	TP_HEADER		. and mark where it is
00:002775 8FB006              +952 	qpush	6, y			. push the minimum datagram header
00:002776 8FB002              +953 	qpush	2, y
00:002777 9FB000              +954 	dpush	0, y			. it's where the stack pointer is
  :                            955 
  :                            956 	$endif
  :                            957 
  :                            958 tcp_deflect_frame_safe
  :                            959 	$endif
  :                            960 
00:002778 58000F              +961 	ly	sp
00:002779 3E0802              +962 	lcal	tcp_reject
  :                            963 
00:00277A B6020F              +964 	j	ipv4_rxz		. don't get here if you have a buffer
  :                            965 
  :                            966 
  :                            967 .	group of similar functions which
  :                            968 .	get a buffer and send a short segment
  :                            969 .
  :                            970 .	for	SYN
  :                            971 .		SYN_ACK
  :                            972 .		FIN
  :                            973 .		FIN_ACK
  :                            974 
  :                            975 .	connection address is in X
  :                            976 
  :                            977 .       hl_code is in A
  :                            978 .       if header is over 5 longwords
  :                            979 .       address of options list is in B
  :                            980 
  :                            981 .	options list is 16 bits per word
  :                            982 
  :                            983 .		0000 0000 tttt tttt llll llll
  :                            984 .		0000 0000 vvvv vvvv vvvv vvvv
  :                            985 
  :                            986 .	if there is payload
  :                            987 .	the byte count is in B
  :                            988 .	the data address is in Y
  :                            989 .	the data at Y is already in
  :                            990 .	16-bit network format
  :                            991 
  :                            992 .		0000 0000 xxxx xxxx yyyy yyyy
  :                            993 
  :                            994 .       connection state variables are
  :                            995 .       used
  :                            996 
  :                            997 .       the segment is queued and flagged for
  :                            998 .       retain, meaning IP doesn't pool the
  :                            999 .       buffer on transmit, but lets TCP do
  :                            1000 .       that on remote ACK
  :                            1001 
  :                            1002 .	these are far calls visible to
  :                            1003 .	applications
  :                            1004 
  :                            1005 .	the vector for tcp_send_syn is __tcp_connect
  :                            1006 
  :                            1007 .	the vector for tcp_respond_syn_ack
  :                            1008 .	is tcp_accept
  :                            1009 
  :                            1010 .	the vector for tcp_send_i
  :                            1011 .	is tcp_send_push
  :                            1012 
  :                            1013 tcp_send_syn
00:00277B 450000              +1014 	lr	0,,xi
00:00277C 4F0FB0              +1015 	ql	(06000++TCP_SYN, 04500, 0204, 0q)
00:00277D F8A002              +1016 	push	transmission:mss
00:00277E 380007              +1017 	pop	7
  :                            1018 
  :                            1019 .	push	0204,,xi
  :                            1020 .	pop	25
  :                            1021 .	lb	25,,xi
  :                            1022 .	push	transmission:mss
  :                            1023 .	pop	26
00:00277F B60789              +1024 	j	tcp_message_segment_i
  :                            1025 
  :                            1026 tcp_respond_syn_ack
00:002780 450000              +1027 	lr, xi	0
00:002781 4F0FB4              +1028 	ql	(06000++TCP_SYN++TCP_ACK, 04500, 0204, 0q)
00:002782 F8A002              +1029 	push	transmission:mss
00:002783 380007              +1030 	pop	7
  :                            1031 
  :                            1032 .	push,xi	0204
  :                            1033 .	pop	25
  :                            1034 .	lb, xi	25		. MSS is in 26
00:002784 B60789              +1035 	j	tcp_message_segment_i
  :                            1036 
  :                            1037 tcp_respond_fin_ack
00:002785 450000              +1038 	lr, xi	0
00:002786 CF0FB8              +1039 	dl	(05000++TCP_FIN++TCP_ACK, 04500L)
00:002787 B60789              +1040 	j	tcp_message_segment_i
  :                            1041 
  :                            1042 tcp_send_i
00:002788 CF0FBA              +1043 	dl	(05000++TCP_ACK++TCP_PSH, 04500L)
  :                            1044 
  :                            1045 tcp_message_segment_i
00:002789 3E0851              +1046 	lcal	tcp_startbuffer
00:00278A 3D0000              +1047 	fret	0		. that didn't work
  :                            1048 
00:00278B F80004              +1049 	push	a		. the descriptor
00:00278C F80002              +1050 	push	x		. the connection
  :                            1051 
00:00278D 680012              +1052 	lb	TPAYLOAD_BYTES	. segment length
00:00278E 980F9E              +1053 	orB	(0800000:s)	. send now
  :                            1054 
00:00278F 28C003              +1055 	sb	descriptor:bytes, a
  :                            1056 
00:002790 680012              +1057 	lb	TPAYLOAD_BYTES
00:002791 C80007              +1058 	ab	HEADER_SUM+1
00:002792 280007              +1059 	sb	HEADER_SUM+1
  :                            1060 
00:002793 500010              +1061 	lx	AP_DATA
00:002794 600000              +1062 	la	r
00:002795 3E044D              +1063 	lcal	tx_payload
  :                            1064 
00:002796 500011              +1065 	lx	TP_HEADER
00:002797 B80F8F              +1066 	xorB	(00FFFF)	. it won't be right until it was to be wrong
00:002798 28A008              +1067 	sb	transfer:checksum, x
  :                            1068 
  :                            1069 .	lx	TP_HEADER
  :                            1070 .	aa	TPAYLOAD_BYTES
  :                            1071 .	sa	transfer:checksum, x
  :                            1072 
00:002799 50F000              +1073 	lx	0, sp
00:00279A 60F001              +1074 	la	1, sp
  :                            1075 
00:00279B 3E08D7              +1076 	lcal	tcp_write_txq
  :                            1077 
00:00279C 380002              +1078 	pop	x			. the connection
00:00279D 380004              +1079 	pop	a			. the descriptor
  :                            1080 
00:00279E 70A014              +1081 	tz	transmission:q4window
00:00279F 3E07B1              +1082 	lcal	tcp_send_on_window
  :                            1083 
00:0027A0 3D0001              +1084 	fret	1
  :                            1085 
  :                            1086 
  :                            1087 .	advertise new window when sending
  :                            1088 .	window can only go up not down when sending
  :                            1089 
  :                            1090 .	window closes incrementally when receiving
  :                            1091 
  :                            1092 WINDOW	$equ	d$save3
  :                            1093 
  :                            1094 tcp_award_window
  :                            1095 
00:0027A1 6D2000              +1096 	lb	MAXIMUM,,xi
  :                            1097 
  :                            1098 	$if	HVSOCKET
00:0027A2 788FA6              +1099 	tp	*(BSOCKET*/12++tlist:flags)
00:0027A3 FF0FBC              +1100 	call	(tcp_window)		. window calculatiom
  :                            1101 	$endif				. returns in b
  :                            1102 
00:0027A4 480F8F              +1103 	lk	(00FFFF)		. needed for masked load
00:0027A5 280013              +1104 	sb	WINDOW			. new calculation
  :                            1105 					. but don't roll back residual window
00:0027A6 68A00F              +1106 	lb	transmission:ack_window+1
00:0027A7 600005              +1107 	la	b
00:0027A8 A00001              +1108 	and	k			. update residual window
00:0027A9 D00013              +1109 	ana	WINDOW			. if new calculation is larger
00:0027AA 5E07AE              +1110 	jnc	tcp_award_new_window
00:0027AB A80001              +1111 	andB	k			. otherwise don't update connection block
00:0027AC 280013              +1112 	sb	WINDOW			. decision is positively stored at WINDOW
00:0027AD 350000              +1113 	lret	0			. for checksum
  :                            1114 
  :                            1115 tcp_award_new_window
00:0027AE BF0013              +1116 	mlb	WINDOW		. K still contains 00FFFF
00:0027AF 28A00F              +1117 	sb	transmission:ack_window+1
00:0027B0 350000              +1118 	lret	0
  :                            1119 
  :                            1120 
  :                            1121 
  :                            1122 tcp_send_on_window
                                	$head_near	scalars(xmitted,	int		;
00:0027B1 FD0000              +1124 				tconnection_p,	int,	x	)
00:0027B2 F80002              +1124 
  :                            1125 
  :                            1126 .	push,xi 0	. count of transmissions
  :                            1127 .	push	x	. the connection
  :                            1128 
  :                            1129 			. remote ACK + window >=
  :                            1130 			. sequence + size = send
  :                            1131 
  :                            1132 
00:0027B3 CFA00A              +1133 	dl	transmission:remote_ack_window, x
00:0027B4 C70008              +1134 	ds	8
00:0027B5 360020              +1135 	dsl	32
00:0027B6 160010              +1136 	dsr	16
00:0027B7 D70008              +1137 	da	8
00:0027B8 C70008              +1138 	ds	8
  :                            1139 .	lcal	tcp_award_window
00:0027B9 CFA00E              +1140 	dl	transmission:ack_window, x
00:0027BA 160008              +1141 	dsr	8
00:0027BB 0E0008              +1142 	sbr	8
00:0027BC C7000A              +1143 	ds	10
  :                            1144 
  :                            1145 tcp_send_on_window_next
00:0027BD 60A014              +1146 	la	transmission:q4window:head, x
00:0027BE C607E8              +1147 	jza	tcp_sent_all
  :                            1148 
00:0027BF 580004              +1149 	ly	a
00:0027C0 60B003              +1150 	la	descriptor:bytes, y
00:0027C1 A607E8              +1151 	jpa	tcp_sent_all		. the sticky bit = send
  :                            1152 					. otherwise the segment
  :                            1153 					. is still accumulating
  :                            1154 					. and is last on the window q
  :                            1155 
00:0027C2 A00FBD              +1156 	and	(01FFFF)		. remove the sticky bit
  :                            1157 					. for calculation
  :                            1158 
00:0027C3 68B005              +1159 	lb	descriptor:uproto, y	. the negative of the size
00:0027C4 280011              +1160 	sb	TP_HEADER
  :                            1161 
00:0027C5 DE07C7              +1162 	jnzb	$+2
00:0027C6 75005F              +1163 	ii	GUARD$
  :                            1164 
00:0027C7 70B006              +1165 	tnz	descriptor:apdata, y
00:0027C8 B607CA              +1165 
00:0027C9 75005F              +1166 	ii	GUARD$
  :                            1167 
00:0027CA D8B006              +1168 	anb	descriptor:apdata, y	. of the segment header
00:0027CB 2E0001              +1169 	sbl	1			. in bytes at 16/24 bits/word
  :                            1170 	
00:0027CC C80004              +1171 	ab	a			. segment minus header
  :                            1172 					. = payload
00:0027CD 650000              +1173 	la, xi	0
00:0027CE 360010              +1174 	dsl	16
00:0027CF C70006              +1175 	ds	6
  :                            1176 
00:0027D0 580011              +1177 	ly	TP_HEADER
00:0027D1 CFB002              +1178 	dl	transfer:seq, y
  :                            1179 
00:0027D2 2E0008              +1180 	sbl	8
00:0027D3 360008              +1181 	dsl	8	. sequence
  :                            1182 
00:0027D4 D70006              +1183 	da	6	. sequence + payload
00:0027D5 C70006              +1184 	ds	6
  :                            1185 
  :                            1186 .	maybe cache the sum of remote window + remote ack
  :                            1187 .	as soon as remote ack has been actioned on the
  :                            1188 .	front of q4ack
  :                            1189 .	so this sum would not be done here
  :                            1190 
  :                            1191 
00:0027D6 CF0008              +1192 	dl	8	. remote ack plus remote window
  :                            1193 
00:0027D7 DF0006              +1194 	dan	6
00:0027D8 E607E8              +1195 	jna	tcp_sent_possible
  :                            1196 
  :                            1197 
00:0027D9 3E08E1              +1198 	lcal	tcp_read_txq	. remove atomically from queue
  :                            1199 
  :                            1200 	$if	1
00:0027DA C607E8              +1201 	jza	tcp_sent_all	. when traced the q4window.tail is already on q4ack
  :                            1202 	$else			. so this loop restarted or something else moved q2q
  :                            1203 	jza	rum_do		. this routine can be called from applications
  :                            1204 	$endif			. which may be time-sliced
  :                            1205 
00:0027DB 50F000              +1206 	lx	tconnection_p		. connection is on the stack top
  :                            1207 					. scalar names tconnection_p and xmitted
  :                            1208 					. displaced by 5 pushed words
00:0027DC 8F0008              +1209 	qpush	8			. the cached state variables
00:0027DD F80004              +1210 	push	a			. descriptor must be on stack top for tcp_xmit
00:0027DE 3E07A1              +1211 	lcal	tcp_award_window	.
  :                            1212 
  :                            1213 	$if	TCP_SEEK_ANOMALY
  :                            1214 	lcal	tcp_seek_anomaly
  :                            1215 	$endif
  :                            1216 
00:0027DF 3E07F0              +1217 	lcal	tcp_xmit
  :                            1218 
00:0027E0 380004              +1219 	pop	a			. the descriptor
00:0027E1 870008              +1220 	qpop	8			. the cached state variables
  :                            1221 					. scalar names at restored displacements
  :                            1222 
00:0027E2 50F000              +1223 	lx	tconnection_p		. the connection pointer on the stack top
00:0027E3 5CA016              +1224 	ly, i	transmission:q4ack
  :                            1225 
00:0027E4 3E0EB6              +1226 	lcal	q2first?		. write the q4ACK
00:0027E5 B607E6              +1227 	j	tcp_ackq_started	. but
  :                            1228 
  :                            1229 	$if	0
  :                            1230 	$if	1
  :                            1231 	lcal	tcp_restart_timer2
  :                            1232 	$else
  :                            1233 
  :                            1234 	lb, xi	TCP_TIMER2		. only start this timer
  :                            1235 	ab	DAYCLOCK$		. if the ACK q was empty
  :                            1236 	sb	transmission:timer(2)	. before
  :                            1237 	$endif
  :                            1238 	$endif
  :                            1239 
  :                            1240 tcp_ackq_started
  :                            1241 
00:0027E6 17F001              +1242 	inc	xmitted			. count of transmissions
  :                            1243 
00:0027E7 B607BD              +1244 	j	tcp_send_on_window_next
  :                            1245 
  :                            1246 tcp_sent_possible
  :                            1247 	$if	0			. check ACK up to date in R10:11
  :                            1248 					. before switching this back on
  :                            1249 					. and check this is an advantage anyway
  :                            1250 					. I have traffic and no window
  :                            1251 	la	1, sp			. reasonable if I have sent any segments
  :                            1252 	jnza	tcp_sent_all
  :                            1253 
  :                            1254 	la	DAYCLOCK$		. well I'm waiting to send
  :                            1255 	ana	transmission:timer(2)	
  :                            1256 	jpa	tcp_sent_all
  :                            1257 					. periodically say so
  :                            1258 					. can be done with a 1-byte sample
  :                            1259 
  :                            1260 	dl	transmission:ack_window
  :                            1261 	dsr	8
  :                            1262 	sbr	8
  :                            1263 	ds	10			. tcp_xmit needs that there
  :                            1264 
  :                            1265 	lcal	tcp_send_ack		. or try to
  :                            1266 	lcal	tcp_ack_dropped		. nop, send_ack skips on succesful return
  :                            1267 .	lcal	tcp_restart_timer2
  :                            1268 	$endif
  :                            1269 
  :                            1270 tcp_sent_all
  :                            1271 .tcp_sent_enough
  :                            1272 					. the connection pointer is now at the stack top
00:0027E8 380002              +1273 	pop	x			. $$frame was exactly 2 words
00:0027E9 380004              +1274 	pop	a			. count of transmissions
00:0027EA 350000              +1275 	lret	0
  :                            1276 
  :                            1277 	$if	0
  :                            1278 rum_do	ii	GUARD$
  :                            1279 	$endif
  :                            1280 
  :                            1281 tcp_ack_dropped
00:0027EB FD0001              +1282 	MIB_ICOUNT48	tcpOutAckDrops:i
(+01)0f
00:0027EC 2F0571              +1282 
00:0027ED 5E07EF              +1282 
(+01)0f
00:0027EE 170570              +1282 
00:0027EF 350000              +1283 	lret	0
  :                            1284 
  :                            1285 tcp_xmit 
00:0027F0 CF000A              +1286         dl      10      . this should be ACK
  :                            1287 
00:0027F1 500011              +1288         lx      TP_HEADER
00:0027F2 C7A004              +1289         ds      transfer:ack, x
00:0027F3 C80004              +1290         ab      a
  :                            1291 
  :                            1292 	$if	0
  :                            1293 	la, xi	8192
  :                            1294 	$else
00:0027F4 600013              +1295         la      WINDOW
  :                            1296 	$endif
  :                            1297 
00:0027F5 20A007              +1298         sa      transfer:window, x
00:0027F6 C0A008              +1299         aa      transfer:checksum, x
  :                            1300 
00:0027F7 3E029F              +1301 	lcal	check_complete
00:0027F8 28A008              +1302         sb      transfer:checksum, x
  :                            1303 
00:0027F9 50F001              +1304         lx      1, sp		. the descriptor
  :                            1305 
00:0027FA 58A004              +1306         ly      descriptor:dgram, x
00:0027FB 4FB006              +1307 	ql      dgram:ipsource, y
  :                            1308 
00:0027FC FD0001              +1309 	MIB_ICOUNT48	tcpOutSegs:i
(+01)0f
00:0027FD 2F0561              +1309 
00:0027FE 5E0800              +1309 
(+01)0f
00:0027FF 170560              +1309 
  :                            1310 
00:002800 FF0F95              +1311         call    (ipsend)
00:002801 350000              +1312         lret    0
  :                            1313 
  :                            1314 
  :                            1315 
  :                            1316 
  :                            1317 .	following is unique of TCP send calls
  :                            1318 .	because it's called when there is no
  :                            1319 .	connection, consequently no connection
  :                            1320 .	pointer and no state variables to
  :                            1321 .	consult
  :                            1322 
  :                            1323 .	the only input is the received buffer
  :                            1324 .	descriptor in fp
  :                            1325 
  :                            1326 .	if there is payload or SYNC or FIN
  :                            1327 .	it may help to up the ACK accordingly
  :                            1328 .	because the far side may otherwise drop the RST from here
  :                            1329 .	or don't set _ACK as well as _RST
  :                            1330 
  :                            1331 TCP_REFLEX_SEQUENCE_ON_REJECT	$equ	1
  :                            1332 TCP_ALIGN_ON_REJECT 		$equ	0	. not making any difference
  :                            1333 TCP_WINDOW_ON_REJECT		$equ	0000
  :                            1334 
  :                            1335 	$if	TCP_ALIGN_ON_REJECT
  :                            1336 
  :                            1337 tcp_reject_xtras
  :                            1338 	dpush	a			. a has part of a checksum in it
  :                            1339 	la	transfer:hl_code, y
  :                            1340 	dsr	12			. header longwords
  :                            1341 	sal	2			. header bytes
  :                            1342 	andB	(+(TCP_SYN++TCP_FIN)*/12)
  :                            1343 	jzb	tcp_no_reject_flagweight
  :                            1344 	aa	-1,,xi			. the header length counts 1 less than itself
  :                            1345 tcp_no_reject_flagweight		. or bytes count 1 more than themselves
  :                            1346 	lb	descriptor:bytes
  :                            1347 	anb	a
  :                            1348 	jzb	tcp_reject_no_traffic_weight
  :                            1349 	ab	7, sp			. ACK low 16 bits
  :                            1350 	la	b
  :                            1351 	dsa	16			. crazy if it went negative, but timeout eventually
  :                            1352 	sbr	8
  :                            1353 	aa	6, sp			. ACK high 16 bits
  :                            1354 	and	(00FFFF)		. thankfully no carry-round
  :                            1355 	ds	6, sp			. so put ACK back in the stack for addition + store
  :                            1356 tcp_reject_no_traffic_weight
  :                            1357 	dpop	a
  :                            1358 	lret	0
  :                            1359 
  :                            1360 	$endif
  :                            1361 
  :                            1362 tcp_reject				. this is when TCP_RST must be sent
  :                            1363 					. and there is no connection
  :                            1364 
00:002802 F80003              +1365 	push	y			. datagram
00:002803 650014              +1366 	la, xi	20
00:002804 3E08B4              +1367 	lcal	tcp_txbuffer
00:002805 380003              +1368 	pop	y
00:002806 C60833              +1369 	jza	tcp_noresetbuffer	. no action either!
  :                            1370 
00:002807 F80004              +1371 	push	a			. the descriptor
  :                            1372 
00:002808 9FB006              +1373 	dpush	dgram:ipsource, y
00:002809 9FB008              +1374 	dpush	dgram:ipdest, y
  :                            1375 
00:00280A 4FF000              +1376 	ql	0, sp			. ipsend wants the
00:00280B D70006              +1377 	da	6			. destination in 6:7
  :                            1378 
00:00280C C50006              +1379 	aa, xi	IPPROTO_TCP
00:00280D CD0014              +1380 	ab, xi	20
  :                            1381 
00:00280E 580013              +1382 	ly	TX_DATAGRAM
00:00280F 87B006              +1383 	qpop	dgram:ipsource, y
  :                            1384 
00:002810 58E005              +1385 	ly	descriptor:uproto
  :                            1386 
  :                            1387 	$if	TCP_REFLEX_SEQUENCE_ON_REJECT
00:002811 9FB004              +1388 	dpush	transfer:ack, y
  :                            1389 	$endif	
  :                            1390 
00:002812 9FB002              +1391 	dpush	transfer:seq, y
00:002813 9FB000              +1392 	dpush	transfer:sourcep, y
  :                            1393 
  :                            1394 
  :                            1395 	$if	TCP_ALIGN_ON_REJECT
  :                            1396 	push	(05000++TCP_RST++TCP_ACK)
  :                            1397 	lcal	tcp_reject_xtras	. see if aligning ACK on RST cheers the other side up
  :                            1398 	$else				. it doesn't cheer OSX up much
00:002814 F80FBE              +1399 	push	(05000++TCP_RST)
00:002815 30F004              +1400 	z	4, sp			. but will this? RST without ACK field
00:002816 30F003              +1401 	z	3, sp
  :                            1402         $endif
  :                            1403 
  :                            1404 
00:002817 C0F000              +1405 	aa	0, sp
00:002818 D7F001              +1406 	da	1, sp
00:002819 D7F003              +1407 	da	3, sp
  :                            1408 
  :                            1409 	$if	TCP_REFLEX_SEQUENCE_ON_REJECT
00:00281A D7F005              +1410 	da	5, sp
  :                            1411 	$endif
  :                            1412 
00:00281B 38A006              +1413 	pop	transfer:hl_code, x	. tx_datagram loads
00:00281C 38A001              +1414 	pop	transfer:destp, x	. x->segment
00:00281D 38A000              +1415 	pop	transfer:sourcep, x
  :                            1416 
00:00281E 30A002              +1417 	z	transfer:seq, x
00:00281F 30A003              +1418 	z	transfer:seq+1, x
  :                            1419 
00:002820 38A004              +1420 	dpop	transfer:ack, x
00:002821 38A005              +1420 
  :                            1421 
  :                            1422 	$if	TCP_REFLEX_SEQUENCE_ON_REJECT
00:002822 38A002              +1423 	dpop	transfer:seq, x
00:002823 38A003              +1423 
  :                            1424 	$endif
  :                            1425 
00:002824 C50000              +1426 	aa	TCP_WINDOW_ON_REJECT,,xi
00:002825 FD0000              +1427 	push	TCP_WINDOW_ON_REJECT,,xi
00:002826 38A007              +1428 	pop	transfer:window, x
  :                            1429 
00:002827 30A009              +1430 	z	transfer:urgent, x
  :                            1431 
00:002828 C00005              +1432 	aa	b
00:002829 160010              +1433 	dsr	16
00:00282A 0E0008              +1434 	sbr	8
00:00282B D60828              +1435 	jnza	$-3
00:00282C B80F8F              +1436 	xorB	(00FFFF)
00:00282D 28A008              +1437 	sb	transfer:checksum, x
  :                            1438 
00:00282E 380002              +1439 	pop	x			. the descriptor
00:00282F 580013              +1440 	ly	TX_DATAGRAM
00:002830 4FB006              +1441 	ql	dgram:ipsource, y	. that might be needed for routing
00:002831 FF0F95              +1442 	call	(ipsend)
  :                            1443 
00:002832 3E06D3              +1444 	lcal	tcp_log_reset
  :                            1445 	
  :                            1446 tcp_noresetbuffer
00:002833 350000              +1447 	lret	0
  :                            1448 
  :                            1449 
  :                            1450 
  :                            1451 .	following routine with ++entry points
  :                            1452 .	sends short segments when there is a
  :                            1453 .	connection
  :                            1454 
  :                            1455 .	it's different from payload because
  :                            1456 .	it sends the most recent sequence
  :                            1457 .	value transmitted, not the advanced
  :                            1458 .	sequence value assigned to new payload
  :                            1459 .	segments
  :                            1460 
  :                            1461 .	used just for ACK + advertise window
  :                            1462 .	or to probe for window with 1 byte
  :                            1463 .	of payload
  :                            1464 
  :                            1465 .	The segment isn't flagged for retain or
  :                            1466 .	held on the output queue / ack wait queue
  :                            1467 
  :                            1468 .	payload bytes are in R
  :                            1469 .	if payload, the pointer is in Y
  :                            1470 .	and is two bytes per word right justified
  :                            1471 .	not internal format
  :                            1472 
  :                            1473 .	this isn't the payload send and
  :                            1474 .	may not alter the SEQ variable
  :                            1475 
  :                            1476 
  :                            1477 tcp_reset		. this is when TCP_RST must be sent
  :                            1478 			. and the connection is about to
  :                            1479 			. get ripped
00:002834 450000              +1480 	lr, xi	0
00:002835 CF0FBF              +1481 	dl	(05000++TCP_RST, 04500L)
00:002836 FD000C              +1482 	push,xi	TCP_DELETETCB
00:002837 38A001              +1483 	pop	transmission:state
00:002838 B6083D              +1484 	j	tcp_sendq2
  :                            1485 
  :                            1486 tcp_send_ack
00:002839 450000              +1487 	lr, xi	0
00:00283A CF0FC1              +1488 	dl	(05000++TCP_ACK, 04504L)
00:00283B B6083D              +1489 	j	tcp_sendq2
  :                            1490 
  :                            1491 tcp_sendq
00:00283C CF0FC3              +1492 	dl	(05000++TCP_ACK, 04500L)
  :                            1493 
  :                            1494 tcp_sendq2
00:00283D 3E0851              +1495 	lcal	tcp_startbuffer
00:00283E 350000              +1496 	lret	0		. not obtained
  :                            1497 
  :                            1498 .	check conversions between words and bytes
  :                            1499 .	in calls to startbuffer, txbuffer
  :                            1500 
  :                            1501 
00:00283F F80002              +1502 	push	x			. the connection
00:002840 F80004              +1503 	push	a			. new descriptor must be on stack top
  :                            1504 					. for tcp_xmit
  :                            1505 
00:002841 CFA00E              +1506 	dl	transmission:ack_window
00:002842 160008              +1507 	dsr	8
00:002843 0E0008              +1508 	sbr	8
00:002844 C7000A              +1509 	ds	10
  :                            1510 
00:002845 3E07A1              +1511 	lcal	tcp_award_window
  :                            1512 	
00:002846 500010              +1513 	lx 	AP_DATA
00:002847 600000              +1514 	la	r			. startbuffer returns
  :                            1515 					. the payload count in r
  :                            1516 
00:002848 3E044D              +1517 	lcal	tx_payload		. payload address if any
  :                            1518 					. is in Y
  :                            1519 
00:002849 500011              +1520 	lx	TP_HEADER
00:00284A B80F8F              +1521 	xorB	(00FFFF)		. it's become too right to be wrong enough
00:00284B C80012              +1522 	ab	TPAYLOAD_BYTES
00:00284C 28A008              +1523 	sb	transfer:checksum
  :                            1524 
  :                            1525 	$if	0
  :                            1526 	ly	0, sp
  :                            1527 	ly	descriptor:dgram, y
  :                            1528 	la	dgram:vers_ihl_tos, y
  :                            1529 	or	4,,xi
  :                            1530 	sa	dgram:vers_ihl_tos, y
  :                            1531 	$endif
  :                            1532 
00:00284D 3E07F0              +1533 	lcal	tcp_xmit
00:00284E 380003              +1534 	pop	y			. the descriptor
00:00284F 380002              +1535 	pop	x			. the connection
00:002850 350001              +1536 	lret	1
  :                            1537 
  :                            1538 
  :                            1539 
  :                            1540 
  :                            1541 
  :                            1542 
  :                            1543 
  :                            1544 .	this primes a buffer to accumulate output
  :                            1545 .	length wanted for payload is in R
  :                            1546 .	hl_code is in A
  :                            1547 .	if header is over 5 longwords
  :                            1548 .	address of options list is in B
  :                            1549 
  :                            1550 .	the checksum seed is left in HEADER_SUM
  :                            1551 .	registers 6:7
  :                            1552 
  :                            1553 .	the checksum seed does not include ACK
  :                            1554 .	or window
  :                            1555 
  :                            1556 .	ACK is re-read from the transmission block
  :                            1557 .	each time some segments may be sent or
  :                            1558 .	resent
  :                            1559 
  :                            1560 .	window is generated new each time some
  :                            1561 .	segments may be sent or resent
  :                            1562 
  :                            1563 .	send or resend must include new window
  :                            1564 .	and ACK in the checksum, so those are
  :                            1565 .	not included here
  :                            1566 
  :                            1567 tcp_startbuffer	$tree
  :                            1568 
  :                            1569 	$if	1
  :                            1570 
                                	$head_near	scalars(addresses,	float,	transmission:socket_address	;
                                				option_string,	float192,	a			;
                                				save_rkxy,	float,		r			;
00:002851 8FA006              +1574 				axw_p,		int					)
00:002852 8F0008              +1574 
00:002853 8F0004              +1574 
00:002854 8F0000              +1574 
00:002855 FD0000              +1574 
  :                            1575 
00:002856 000012              +1576 	sr	TPAYLOAD_BYTES
00:002857 06000C              +1577 	sar	12		. header longwords
00:002858 260002              +1578 	sal	2		. then bytes
00:002859 C00000              +1579 	aa	r
  :                            1580 
00:00285A 3E08AF              +1581 	lcal	tcp_txbufferx
00:00285B C6089C              +1582 	jza	txp_nostart
00:00285C 20F000              +1583 	sa	axw_p
  :                            1584 
00:00285D 580013              +1585         ly      TX_DATAGRAM
00:00285E CFF00D              +1586         dl      addresses
00:00285F 160008              +1587         dsr     8
00:002860 0E0008              +1588         sbr     8
00:002861 C70006              +1589         ds      HEADER_SUM
00:002862 C7B006              +1590         ds      dgram:ipsource, y
00:002863 CFF00F              +1591         dl      addresses+2
00:002864 160008              +1592         dsr     8
00:002865 0E0008              +1593         sbr     8
00:002866 C7B008              +1594         ds      dgram:ipdest, y
00:002867 D70006              +1595 	da	HEADER_SUM
00:002868 C70006              +1596 	ds	HEADER_SUM
  :                            1597 
00:002869 580011              +1598 	ly	TP_HEADER
00:00286A 30B009              +1599 	z	transfer:urgent, y
00:00286B 30B008              +1600 	z	transfer:checksum, y
00:00286C 30B007              +1601 	z	transfer:window, y
00:00286D 30B004              +1602 	z	transfer:ack, y
00:00286E 30B005              +1603 	z	transfer:ack+1, y
  :                            1604 	
00:00286F 50F003              +1605 	lx	save_rkxy+2			. connection
00:002870 CFA00C              +1606 	dl	transmission:sequence_ackx
00:002871 160008              +1607 	dsr	8
00:002872 0E0008              +1608 	sbr	8
00:002873 C7B002              +1609 	ds	transfer:seq, y
00:002874 D70006              +1610 	da	HEADER_SUM
00:002875 C70006              +1611 	ds	HEADER_SUM
  :                            1612 	
00:002876 60F00E              +1613 	la	addresses+1
00:002877 68F010              +1614 	lb	addresses+3
00:002878 360008              +1615 	dsl	8
00:002879 060008              +1616 	sar	8
00:00287A 0E0008              +1617 	sbr	8
00:00287B C7B000              +1618 	ds	transfer:sourcep, y
  :                            1619 	
00:00287C D70006              +1620 	da	HEADER_SUM
00:00287D C70006              +1621 	ds	HEADER_SUM
  :                            1622 
00:00287E 60F005              +1623 	la	option_string			. header length / flags
00:00287F 20B006              +1624 	sa	transfer:hl_code, y
00:002880 6D0006              +1625 	lb	IPPROTO_TCP,,xi
00:002881 D70006              +1626 	da	HEADER_SUM
00:002882 C70006              +1627 	ds	HEADER_SUM
  :                            1628 
00:002883 68F005              +1629 	lb	option_string			. header words
00:002884 0E000C              +1630 	sbr	12
00:002885 280010              +1631 	sb	HEADER_LONGWORDS
00:002886 CDFFFB              +1632 	ab	-5,,xi
00:002887 580011              +1633 	ly	TP_HEADER
00:002888 8D000A              +1634 	ay	20/2,,xi
00:002889 CE088C              +1635 	jzb	tcp_sendno_options
  :                            1636 
00:00288A 64F007              +1637 	la	option_string+2,,i
00:00288B 3E08A2              +1638 	lcal	tcp_send_options
  :                            1639 
  :                            1640 tcp_sendno_options
00:00288C 680010              +1641 	lb	HEADER_LONGWORDS
00:00288D 180010              +1642 	sy	AP_DATA
00:00288E 60F000              +1643 	la	axw_p
00:00288F 18C006              +1644 	sy	descriptor:apdata, a
  :                            1645 
00:002890 400012              +1646 	lr	TPAYLOAD_BYTES
00:002891 00F001              +1647 	sr	save_rkxy			. returned in r
00:002892 2E0002              +1648 	sbl	2
00:002893 28C003              +1649 	sb	descriptor:bytes, a
00:002894 C80000              +1650 	ab	r
00:002895 280012              +1651 	sb	TPAYLOAD_BYTES
  :                            1652 
00:002896 380004              +1653 	pop	a
00:002897 870000              +1654 	qpop	r
00:002898 87F000              +1655 	qpop	0, sp
00:002899 87F000              +1656 	qpop	0, sp
00:00289A 87F000              +1657 	qpop	0, sp
00:00289B 350001              +1658 	lret	1		. buffer obtained and prepped
  :                            1659 
  :                            1660 txp_nostart
00:00289C 380004              +1661 	pop	a
00:00289D 870000              +1662 	qpop	r
00:00289E 87F000              +1663 	qpop	0, sp
00:00289F 87F000              +1664 	qpop	0, sp
00:0028A0 87F000              +1665 	qpop	0, sp
00:0028A1 350000              +1666 	lret	0		. buffer not obtained		
  :                            1667 
  :                            1668 	$else
  :                            1669 
  :                            1670 	push	x		. connection block
  :                            1671 	push	a		. header length / flags
  :                            1672 	push	6,,xi		. address of options program
  :                            1673 	sr	TPAYLOAD_BYTES	. payload bytes
  :                            1674 	sar	12
  :                            1675 	sal	2
  :                            1676 	aa	r		. buffer required for TCP segment
  :                            1677 	push	y
  :                            1678 
  :                            1679 	lcal	tcp_txbufferx	. tlist block must be at BSOCKET or you crash
  :                            1680 				. if you are process *ip the system restarts
  :                            1681 
  :                            1682 	pop	y		. quite likely the user data pointer
  :                            1683 
  :                            1684 	dpop	6		. address of options, header format word
  :                            1685 
  :                            1686 	pop	x		. connection
  :                            1687 	jza	tcp_nostart
  :                            1688 
  :                            1689 	sb	descriptor:bytes, a
  :                            1690 	
  :                            1691 	push	y		. user buffer if any
  :                            1692 	push	a		. the new descriptor
  :                            1693 
  :                            1694 	ly	TP_HEADER
  :                            1695 	z	transfer:urgent, y
  :                            1696 	z	transfer:checksum, y
  :                            1697 
  :                            1698 
  :                            1699 	qpush	transmission:socket_address, x
  :                            1700 	qpop	8
  :                            1701 
  :                            1702 	push, xi   0		. window
  :                            1703 	
  :                            1704 	push	7		. header format word
  :                            1705 
  :                            1706 	push, xi   0
  :                            1707 	push, xi   0		. ACK
  :                            1708 
  :                            1709 	dl	transmission:sequence_ackx, x
  :                            1710 	dsr	8
  :                            1711 	sbr	8
  :                            1712 	dpush	a		. SEQ
  :                            1713 
  :                            1714 	la	9
  :                            1715 	sal	8
  :                            1716 	lb	11
  :                            1717 	sbl	8
  :                            1718 	dsr	8
  :                            1719 
  :                            1720 	dpush	a		. ports
  :                            1721 
  :                            1722 	lb	7
  :                            1723 	sbr	12
  :                            1724 
  :                            1725 	sb	HEADER_LONGWORDS
  :                            1726 	
  :                            1727 	lb, xi	0
  :                            1728 	la, xi	IPPROTO_TCP
  :                            1729 
  :                            1730 	da	transfer:sourcep, sp
  :                            1731 	da	transfer:seq, sp
  :                            1732 .	da	transfer:ack, sp	. zero just now
  :                            1733 	da	transfer:hl_code, sp
  :                            1734 
  :                            1735 	dpush	6		. default options list
  :                            1736 
  :                            1737 	ds	HEADER_SUM
  :                            1738 
  :                            1739 	dpop	d$save
  :                            1740 
  :                            1741 	qpop	transfer:sourcep, y
  :                            1742 	qpop	transfer:ack, y
  :                            1743 
  :                            1744 	z	transfer:urgent, y
  :                            1745 
  :                            1746 	lb	HEADER_LONGWORDS
  :                            1747 
  :                            1748 	ab, xi	-5
  :                            1749 
  :                            1750 	ay, xi	20/2
  :                            1751 	jzb	tcp_sendno_options
  :                            1752 
  :                            1753 	la	d$save,,xi
  :                            1754 	lcal	tcp_send_options
  :                            1755 
  :                            1756 tcp_sendno_options
  :                            1757 	la	0, sp		. the descriptor
  :                            1758 	sy	descriptor:apdata, a
  :                            1759 	lb	HEADER_LONGWORDS
  :                            1760 
  :                            1761 	sbl	2
  :                            1762 	lr	TPAYLOAD_BYTES
  :                            1763 	sb	descriptor:bytes, a
  :                            1764 
  :                            1765 
  :                            1766 				. only the header byte count
  :                            1767 				. should go in the descriptor
  :                            1768 				. because this may be called
  :                            1769 				. to prime a buffer for
  :                            1770 				. streamed writing
  :                            1771 
  :                            1772 				. R is for how much space
  :                            1773 				. is required, not how much
  :                            1774 				. data is available
  :                            1775 
  :                            1776 	ab	r
  :                            1777 	sb	TPAYLOAD_BYTES	. save the total for
  :                            1778 				. direct message writes
  :                            1779 
  :                            1780 	sy	AP_DATA
  :                            1781 	ly	TX_DATAGRAM
  :                            1782 	dl	8
  :                            1783 	dsr	8
  :                            1784 	sbr	8
  :                            1785 	ds	dgram:ipsource, y
  :                            1786 	ds	8
  :                            1787 	da	HEADER_SUM	. the checksum
  :                            1788 	ds	HEADER_SUM
  :                            1789 	dl	10
  :                            1790 	dsr	8
  :                            1791 	sbr	8
  :                            1792 	ds	10
  :                            1793 	ds	dgram:ipdest, y
  :                            1794 	da	HEADER_SUM
  :                            1795 	ds	HEADER_SUM
  :                            1796 	pop	a		. the descriptor
  :                            1797 	pop	y
  :                            1798 	lret	1		. return +1 = buffer found
  :                            1799 
  :                            1800 tcp_nostart
  :                            1801 .	lx	y		. ? that looks deadly ? return without connection pointer
  :                            1802 
  :                            1803 				. removed instruction was bad for some callers
  :                            1804 				. and didn't appear good for any other callers
  :                            1805 
  :                            1806 				. callers are (indirectly) far calls tcp_add and tcp_addx
  :                            1807 				. which certainly need x -> connection block unchanged on return
  :                            1808 
  :                            1809 				. and otherwise far calls tcp_accept tcp_ack_fin tcp_send_push
  :                            1810 				. and local calls tcp_send_ack tcp_sendq tcp_sendq2
  :                            1811 				. none of which appears to need the connection pointer lost
  :                            1812 
  :                            1813 	lret	0		. return +0 = no buffer found
  :                            1814 
  :                            1815 	$endif
  :                            1816 
  :                            1817 	$root
  :                            1818 
  :                            1819 
  :                            1820 tcp_send_options
00:0028A2 F80002              +1821 	push	x		. the connection
00:0028A3 500004              +1822 	lx	a		. the option list address
00:0028A4 400005              +1823 	lr	b		. the longword count
00:0028A5 B608AC              +1824 	j	tcp_send_option?
  :                            1825 tcp_send_option!
00:0028A6 CFA000              +1826 	dl	0, x
00:0028A7 C7B000              +1827 	ds	0, y
00:0028A8 D70006              +1828 	da	HEADER_SUM
00:0028A9 C70006              +1829 	ds	HEADER_SUM
00:0028AA 850002              +1830 	ax, xi	2
00:0028AB 8D0002              +1831 	ay, xi	2
  :                            1832 tcp_send_option?
00:0028AC 1E08A6              +1833 	jdr	tcp_send_option!
00:0028AD 380002              +1834 	pop	x		. the connection
00:0028AE 350000              +1835 	lret	0
  :                            1836 	
  :                            1837 	$if	0
  :                            1838 tcp_send
  :                            1839 	fret	0
  :                            1840 
  :                            1841 tcp_complete_segment?
  :                            1842 	tz	transmission:q4window:head
  :                            1843 	lret	0
  :                            1844 tcp_complete_segment!
  :                            1845 	ly	transmission:q4window:tail
  :                            1846 	la	descriptor:bytes, y
  :                            1847 	jna	tcp_segment_completed
  :                            1848 	jza	tcp_segment_void		. would happen with send of zero
  :                            1849 
  :                            1850 
  :                            1851 tcp_segment_completed
  :                            1852 	lret	0
  :                            1853 tcp_segment_void
  :                            1854 	lret	1
  :                            1855 	$endif
  :                            1856 
  :                            1857 tcp_txbufferx
00:0028AF 508FC5              +1858 	lx	*(BSOCKET*/12++tlist:txbu_p)	. tlist block must be at BSOCKET or you crash
  :                            1859 .	lb, xi	04500	. preloaded		. if you are process *ip the system restarts
00:0028B0 F80004              +1860 	push	a
00:0028B1 3E0213              +1861 	lcal	ip_buy_datagram_alternate
00:0028B2 380005              +1862 	pop	b
00:0028B3 B608B8              +1863 	j	tcp_txbuffer_initial
  :                            1864 	
  :                            1865 tcp_txbuffer
00:0028B4 6D4500              +1866 	lb, xi	04500
  :                            1867 tcp_txbuffer_optional
00:0028B5 F80004              +1868 	push	a		. TCP header + payload length
00:0028B6 3E0212              +1869 	lcal	ip_buy_datagram
00:0028B7 380005              +1870 	pop	b
  :                            1871 
  :                            1872 tcp_txbuffer_initial
00:0028B8 C608BE              +1873 	jza	tcp_nobuffer
00:0028B9 28C003              +1874 	sb	descriptor:bytes, a
00:0028BA 500013              +1875 	lx	TX_DATAGRAM
00:0028BB 6D3C06              +1876 	lb,xi	IP_DEFAULT_TTL++IPPROTO_TCP
00:0028BC 28A004              +1877 	sb	dgram:ttl_protocol, x
00:0028BD 500011              +1878 	lx	TP_HEADER
  :                            1879 tcp_nobuffer
00:0028BE 350000              +1880 	lret	0
  :                            1881 
  :                            1882 
  :                            1883 .	buffer queues which are shared between tasks have to be accessed
  :                            1884 .	in a protected way. They are mainly the queues which both the IP
  :                            1885 .	task and an application protocol access. Some application protocols
  :                            1886 .	are in the IP task and some are not
  :                            1887 
  :                            1888 .	it would be quite bad to place TS cells in every queue structure
  :                            1889 .	because not all queues need them. Sockets and connections are the
  :                            1890 .	best available place for these lock cells
  :                            1891 
  :                            1892 .	all this code is SMP, so the code
  :                            1893 
  :                            1894 .	1.	prevents itself from getting interrupted or switched
  :                            1895 .	2.	locks the connection
  :                            1896 .	3.	updates the queue
  :                            1897 .	4.	frees the lock
  :                            1898 .	5.	reloads the interrupt mask it had before
  :                            1899 
  :                            1900 
  :                            1901 .	tcp_write_rxq is called from TCP in the IP task
  :                            1902 
  :                            1903 	$if	TCP_NOQ
  :                            1904 
  :                            1905 tcp_write_rxq			. descriptor is in a
  :                            1906 
  :                            1907 	$if	HVSOCKET
00:0028BF 788FA6              +1908 	tp	*(BSOCKET*/12++tlist:flags)
00:0028C0 B608CB              +1909 	j	tcp_write_hvsocket_rxq
  :                            1910 	$endif
  :                            1911 
00:0028C1 FD0007              +1912 	LOCK	transmission:tsq
00:0028C2 27F000              +1912 
00:0028C3 07A003              +1912 
00:0028C4 B608C3              +1912 
00:0028C5 5CA010              +1913 	ly	transmission:receiveq,,i
00:0028C6 3E0EBC              +1914 	lcal	q2
  :                            1915 
  :                            1916 	$if	RX_FRAGMENTS
  :                            1917 	lcal	ip_fragments_thru
  :                            1918 	$endif
  :                            1919 
00:0028C7 30A003              +1920 	FREE	transmission:tsq
00:0028C8 27F000              +1920 
00:0028C9 17000F              +1920 
00:0028CA 350000              +1921 	lret	0
  :                            1922 
  :                            1923 	$if	HVSOCKET
  :                            1924 tcp_write_hvsocket_rxq
00:0028CB FF0FC6              +1925 	call	(hvsocket_write_rxq)
00:0028CC 350000              +1926 	lret	0
  :                            1927 	$endif
  :                            1928 
  :                            1929 	$else
  :                            1930 
  :                            1931 tcp_write_rxq			. descriptor is tcpq:head
  :                            1932 
  :                            1933 	LOCK	transmission:tsq
  :                            1934 	la, i	transmission:receiveq
  :                            1935 	ly, xi	tcpq
  :                            1936 	lcal	net_transfer
  :                            1937 	FREE	transmission:tsq
  :                            1938 	lret	0
  :                            1939 
  :                            1940 	$endif
  :                            1941 
  :                            1942 .	tcp_read_rxq is called from the socket user
  :                            1943 .	indirectly, nested in a far call to receive
  :                            1944 
  :                            1945 tcp_read_rxq
00:0028CD FD0007              +1946 	push,xi	MAX_INT_MASK
00:0028CE 27F000              +1947 	sim	0, sp
00:0028CF 07A003              +1948 	ts	transmission:tsq
00:0028D0 B608CF              +1949 	j	$-1
00:0028D1 5CA010              +1950 	ly, i	transmission:receiveq
00:0028D2 3E0EC7              +1951 	lcal	readq
00:0028D3 30A003              +1952 	z	transmission:tsq
00:0028D4 27F000              +1953 	sim	0, sp
00:0028D5 17000F              +1954 	inc	sp
00:0028D6 350000              +1955 	lret	0
  :                            1956 
  :                            1957 .	tcp_write_txq is called in many places in TCP
  :                            1958 .	and also from socket users, nested in far calls
  :                            1959 .	to send
  :                            1960 
  :                            1961 .	the connection block transmission: is in x
  :                            1962 
  :                            1963 tcp_write_txq
  :                            1964 
  :                            1965 	$if	1
  :                            1966 
00:0028D7 FD0007              +1967 	LOCK	transmission:tsq
00:0028D8 27F000              +1967 
00:0028D9 07A003              +1967 
00:0028DA B608D9              +1967 
00:0028DB 5CA014              +1968 	ly	transmission:q4window,,i
00:0028DC 3E0EBC              +1969 	lcal	q2
00:0028DD 30A003              +1970 	FREE	transmission:tsq
00:0028DE 27F000              +1970 
00:0028DF 17000F              +1970 
00:0028E0 350000              +1971 	lret	0
  :                            1972 
  :                            1973 	$else
  :                            1974 
  :                            1975 	push,xi	MAX_INT_MASK
  :                            1976 	sim	0, sp
  :                            1977 	ts	transmission:tsq
  :                            1978 	j	$-1
  :                            1979 	ly, i	transmission:q4window
  :                            1980 	lcal	q2
  :                            1981 	z	transmission:tsq
  :                            1982 	sim	0, sp
  :                            1983 	inc	sp
  :                            1984 	lret	0
  :                            1985 
  :                            1986 	$endif
  :                            1987 
  :                            1988 .	tcp calls tcp_read_txq when it moves segments
  :                            1989 .	from q4window to q4ack
  :                            1990 
  :                            1991 tcp_read_txq
  :                            1992 	$if	1
00:0028E1 FD0007              +1993 	LOCK	transmission:tsq
00:0028E2 27F000              +1993 
00:0028E3 07A003              +1993 
00:0028E4 B608E3              +1993 
00:0028E5 5CA014              +1994 	ly	transmission:q4window,,i
00:0028E6 3E0EC7              +1995 	lcal	readq
00:0028E7 30A003              +1996 	FREE	transmission:tsq
00:0028E8 27F000              +1996 
00:0028E9 17000F              +1996 
00:0028EA 350000              +1997 	lret	0
  :                            1998 
  :                            1999 	$else
  :                            2000 
  :                            2001 	push,xi	MAX_INT_MASK
  :                            2002 	sim	0, sp
  :                            2003 	ts	transmission:tsq
  :                            2004 	j	$-1
  :                            2005 	ly, i	transmission:q4window
  :                            2006 	lcal	readq
  :                            2007 .	z	0, a		. you might didn't get no address in a
  :                            2008 	z	transmission:tsq
  :                            2009 	sim	0, sp
  :                            2010 	inc	sp
  :                            2011 	lret	0
  :                            2012 	$endif
  :                            2013 
  :                            2014 				. low level far calls
  :                            2015 				. for message-based TCP traffic
  :                            2016 
  :                            2017 tcp_rsegment			. vector name tcpr
00:0028EB F80002              +2018 	push	x		. read a descriptor from connection->receiveq
00:0028EC 3E08CD              +2019 	lcal	tcp_read_rxq	. under lock
00:0028ED 380002              +2020 	pop	x
00:0028EE 3D0000              +2021 	fret	0
  :                            2022 
  :                            2023 tcp_zsegment			. vector name tpcz
00:0028EF C608F3              +2024 	jza	tcp_xsegment	. pool descriptor a-> +  buffer
00:0028F0 F80002              +2025 	push	x
00:0028F1 3E092D              +2026 	lcal	tcp_free
00:0028F2 380002              +2027 	pop	x
  :                            2028 tcp_xsegment
00:0028F3 3D0000              +2029 	fret	0
  :                            2030 
  :                            2031 tcp_textline_release		. vector name tcp_release_rxline
00:0028F4 F80002              +2032 	push	x		. read a descriptor + buffer from connection:receiveq
00:0028F5 3E08CD              +2033 	lcal	tcp_read_rxq				. under lock and pool it 
00:0028F6 C608F8              +2034 	jza	tcp_textline_not_there
00:0028F7 3E092D              +2035 	lcal	tcp_free
  :                            2036 tcp_textline_not_there
00:0028F8 380002              +2037 	pop	x
00:0028F9 3D0000              +2038 	fret	0
  :                            2039 
  :                            2040 tcp_hash_connect
00:0028FA 788FC7              +2041 	tp	*(BSOCKET*/18++tlist:flags:S)
00:0028FB B60905              +2042 	j	tcp_hashremote
  :                            2043 
  :                            2044 
  :                            2045 	$if	1
  :                            2046 
  :                            2047 p	$proc
  :                            2048 tcp_hash_fold* $name
  :                            2049 	rbl	CHAINS_LOG
  :                            2050 	xor	b
  :                            2051 	$end
  :                            2052 	
  :                            2053 tcp_hashlocal					. input is local port number
  :                            2054 
  :                            2055 	$if	16//CHAINS_LOG<3		. for example 256 chains log 8
  :                            2056 
  :                            2057 	la	9
  :                            2058 	sal	8
  :                            2059 	dsr	8+CHAINS_LOG
  :                            2060 	sbr	24-CHAINS_LOG
  :                            2061 	xor	b
  :                            2062 	fret	0
  :                            2063 
  :                            2064 	$elseif	16//CHAINS_LOG<5
  :                            2065 
00:0028FC 600009              +2066 	la	9
00:0028FD 260008              +2067 	sal	8
00:0028FE 160012              +2068 	dsr	8+(16//CHAINS_LOG)//2*CHAINS_LOG	. slide large half of slices to b
00:0028FF 0E000E              +2069 	sbr	24-(16//CHAINS_LOG)//2*CHAINS_LOG
00:002900 B00005              +2070 	xor	b					. xor 2 slices to 1..2 slices
  :                            2071 
00:002901 160005              +2072 	dsr	CHAINS_LOG
00:002902 0E0013              +2073 	sbr	24-CHAINS_LOG				. xor 1 slice to 1 slice
00:002903 B00005              +2074 	xor	b
00:002904 3D0000              +2075 	fret	0
  :                            2076 
  :                            2077 	$else					. for example 8 chains log 3
  :                            2078 
  :                            2079 	la	9
  :                            2080 	sal	8
  :                            2081 	dsr	8+(16//CHAINS_LOG)//3*CHAINS_LOG*2
  :                            2082 	sbr	24-(16//CHAINS_LOG)//3*CHAINS_LOG*2
  :                            2083 	xor	b
  :                            2084 	sbr	CHAINS_LOG*(16//CHAINS_LOG)//3
  :                            2085 	xor	b
  :                            2086 	dsr	CHAINS_LOG
  :                            2087 	sbr	24-CHAINS_LOG
  :                            2088 	xor	b
  :                            2089 	and	CHAINS_MASK,,xi
  :                            2090 	fret	0
  :                            2091 
  :                            2092 	$endif
  :                            2093 
  :                            2094 tcp_hashremote		. input is remote socket netaddress:port
  :                            2095 
  :                            2096 	$if	24//CHAINS_LOG<3
  :                            2097 
  :                            2098 	$flag	hash CHAINS > 2048 not supported
  :                            2099 
  :                            2100 	$elseif	24//CHAINS_LOG<4
  :                            2101 
  :                            2102 	dl	10
  :                            2103 	xor	b
  :                            2104 	dsr	CHAINS_LOG*2
  :                            2105 	sbr	24-CHAINS_LOG*2
  :                            2106 	xor	b
  :                            2107 	sbr	CHAINS_LOG
  :                            2108 	xor	b
  :                            2109 	and	CHAINS_MASK,,xi
  :                            2110 	fret	0
  :                            2111 
  :                            2112 
  :                            2113 	$elseif	24//CHAINS_LOG<5
  :                            2114 
  :                            2115 	dl	10
  :                            2116 	xor	b
  :                            2117 	dsr	CHAINS_LOG*(24//CHAINS_LOG)//2
  :                            2118 	sbr	24-CHAINS_LOG*(24//CHAINS_LOG)//2
  :                            2119 	xor	b
  :                            2120 	dsr	CHAINS_LOG
  :                            2121 	sbr	24-CHAINS_LOG
  :                            2122 	xor	b
  :                            2123 	fret	0
  :                            2124 
  :                            2125 	$elseif	24//CHAINS_LOG<7
  :                            2126 
00:002905 CF000A              +2127 	dl	10
00:002906 B00005              +2128 	xor	b
00:002907 160014              +2129 	dsr	CHAINS_LOG*2*((24//CHAINS_LOG)//3)
00:002908 0E0004              +2130 	sbr	24-CHAINS_LOG*2*((24//CHAINS_LOG)//3)
00:002909 B00005              +2131 	xor	b
00:00290A 0E000A              +2132 	sbr	CHAINS_LOG*2
00:00290B B00005              +2133 	xor	b
00:00290C 160005              +2134 	dsr	CHAINS_LOG
00:00290D 0E0013              +2135 	sbr	24-CHAINS_LOG
00:00290E B00005              +2136 	xor	b
00:00290F A5001F              +2137 	and	CHAINS_MASK,,xi
00:002910 3D0000              +2138 	fret	0
  :                            2139 	
  :                            2140 	$elseif	24//CHAINS_LOG<9
  :                            2141 
  :                            2142 	dl	10
  :                            2143 	xor	b
  :                            2144 	dsr	CHAINS_LOG*(24//CHAINS_LOG)//2
  :                            2145 	sbr	24-CHAINS_LOG*(24//CHAINS_LOG)//2
  :                            2146 	xor	b
  :                            2147 	dsr	CHAINS_LOG*(24//CHAINS_LOG)//4
  :                            2148 	sbr	24-CHAINS_LOG*(24//CHAINS_LOG)//4
  :                            2149 	xor	b
  :                            2150 	dsr	CHAINS_LOG
  :                            2151 	sbr	24-CHAINS_LOG
  :                            2152 	xor	b
  :                            2153 	fret	0
  :                            2154 
  :                            2155 	$else
  :                            2156 
  :                            2157 	dl	10
  :                            2158 	xor	b
  :                            2159 	$if	24///CHAINS_LOG
  :                            2160 	dsr	24-24///CHAINS_LOG		. keep the lesser slice in a
  :                            2161 	$else					. or else
  :                            2162 	dsr	24-CHAINS_LOG			. keep one equal slice in a
  :                            2163 	$endif
  :                            2164 	$do	24//CHAINS_LOG-1,	tcp_hash_fold
  :                            2165 	and	CHAINS_MASK,,xi
  :                            2166 	fret	0
  :                            2167 	$endif
  :                            2168 
  :                            2169 	
  :                            2170 tcp_xdisco		. vector is xdisco
  :                            2171 			. low level connection close
  :                            2172 			. connection in x
  :                            2173 
00:002911 60A001              +2174 	la	transmission:state
00:002912 680004              +2175 	anu, xi	TCP_CLOSEWAIT	. remote close received
00:002913 DD0008              +2175 
  :                            2176 				. close from local socket awaited
  :                            2177 
00:002914 CE091F              +2178 	jzb	tcp_xclosewait
  :                            2179 
  :                            2180 	$if	0
  :                            2181 
  :                            2182 	j	tcp_xfinwait1	. treat timeout
  :                            2183 				. as outgoing close
  :                            2184 	$else
  :                            2185 
00:002915 CD0003              +2186 	ab, xi	TCP_CLOSEWAIT-TCP_ESTABLISHED
00:002916 CE091A              +2187 	jzb	tcp_xfinwait1
  :                            2188 
  :                            2189 	$endif
  :                            2190 
  :                            2191 tcp_xclose
  :                            2192 				. it's been ripped and the owner knows
00:002917 FD000C              +2193 	push,xi	TCP_DELETETCB	. It can be really reassigned
00:002918 38A001              +2194 	pop	transmission:state
00:002919 3D0000              +2195 	fret	0
  :                            2196 
  :                            2197 tcp_xfinwait1			. outgoing close
00:00291A FF0FC8              +2198 	call	(tcp_ack_fin)
00:00291B B60917              +2199 	j	tcp_xclose	. better delete roughly
  :                            2200 				. if you could not send ACK++FIN
  :                            2201 
00:00291C FD0006              +2202 	push,xi	TCP_FINWAIT1
00:00291D 38A001              +2203 	pop	transmission:state
00:00291E B60923              +2204 	j	tcp_xfin_upsequence
  :                            2205 
  :                            2206 tcp_xclosewait			. passive close
00:00291F FF0FC8              +2207 	call	(tcp_ack_fin)	. 
00:002920 B60917              +2208 	j	tcp_xclose	. better delete roughly
  :                            2209 				. if you could not send ACK++FIN
  :                            2210 
00:002921 FD0009              +2211 	push,xi TCP_LASTACK
00:002922 38A001              +2212 	pop	transmission:state
  :                            2213 
  :                            2214 tcp_xfin_upsequence
  :                            2215 
00:002923 CFA00C              +2216 	dl	transmission:sequence_ackx
00:002924 D70FA9              +2217 	da	(65536d)
00:002925 C7A00C              +2218 	ds	transmission:sequence_ackx
00:002926 3D0000              +2219 	fret	0
  :                            2220 
  :                            2221 	$if	RX_FRAGMENTS
  :                            2222 tcp_rx_rasm
  :                            2223 	lx	descriptor:uproto
  :                            2224 	push	transfer:checksum, x
  :                            2225 	lcal	rasm77_gcheck
  :                            2226 	xorB	0, sp
  :                            2227 	pop	transfer:checksum, x
  :                            2228 	la	fp
  :                            2229 	jnzb	net_free_chain
  :                            2230 	lx, xi	tcpq
  :                            2231 	j	net_add_chain
  :                            2232 	$endif
  :                            2233 
  :                            2234 .	do not call tcp_socket from application threads
  :                            2235 .	even in kernel routines called by applications
  :                            2236 .	like send receive read write etc
  :                            2237 .	because tcp_socket reads kernel vectors direct
  :                            2238 .	and is called every rx segment so is minimal
  :                            2239 .	application threads call app_tcp_port
  :                            2240 .	which requests kernel vector
  :                            2241 .	on occasional need to access port structure
  :                            2242 
  :                            2243 tcp_socket
  :                            2244 
  :                            2245 	$if	1
  :                            2246 
00:002927 F80002              +2247 	push	x
00:002928 552100              +2248 	lx	tsockb(1),,xi
00:002929 3E0A7E              +2249 	lcal	protocol_socket
00:00292A 380002              +2250 	pop	x
  :                            2251 
  :                            2252 	$else
  :                            2253 
  :                            2254         lb, xi  BSOCKET*/9      .       000 000 000 bbb bbb 000 000 000
  :                            2255 
  :                            2256                                 .       000 000 000 000 000 00p ppp ppp : A
  :                            2257         dsr     9               .       ppp ppp ppp 000 000 000 bbb bbb : B
  :                            2258 	and	127,,xi
  :                            2259         aa, xi  tsockb(1)       .       000 000 000 010 000 11p ppp ppp : A
  :                            2260 
  :                            2261         la      0, a            .       is there even storage where the
  :                            2262                                 .       bound socket structure should be?
  :                            2263 
  :                            2264         jza     tcp_socketx
  :                            2265 
  :                            2266         rbr     12              .       000 000 bbb bbb ooo ooo ooo 000
  :                            2267 
  :                            2268 	$endif
  :                            2269 
00:00292B 34002F              +2270         sabr    BSOCKET         .       look at the port socket structure
  :                            2271 tcp_socketx
00:00292C 350000              +2272 	lret	0
  :                            2273 
  :                            2274 tcp_free
00:00292D 508FAF              +2275 	lx	*(BSOCKET*/12++tlist:rxbu_p)
00:00292E 3E0E65              +2276 	lcal	sell1
00:00292F 350000              +2277 	lret	0
  :                            2278 
  :                            2279 tcp_free_tx
00:002930 508FC5              +2280 	lx	*(BSOCKET*/12++tlist:txbu_p)
00:002931 3E0E65              +2281 	lcal	sell1
00:002932 350000              +2282 	lret	0
  :                            2283 
  :                            2284: 	$include	tcp4ruti
  :                            1 tcp_event1_acknowledged?
00:002933 CFA00C              +2 	dl	transmission:sequence_ackx
00:002934 A80F8D              +3 	andB	(0FF0000s)			. ls 16 bits aren't used yet, but...
00:002935 DF0006              +4 	dan	6				. is the new remote ACK
00:002936 350000              +5 	lret	0
  :                            6 
  :                            7 tcp_restart_timer2
  :                            8 	$if	TCP_TIMER2<32768
00:002937 650BB8              +9 	la	TCP_TIMER2,,xi
  :                            10 	$else
  :                            11 	la	(TCP_TIMER2)
  :                            12 	$endif
  :                            13 
  :                            14 	$if	HVSOCKET
00:002938 788FA6              +15 	tp	*(BSOCKET*/12++tlist:flags)
00:002939 3E093D              +16 	lcal	tcp_stretch_timer2
  :                            17 	$endif
  :                            18 
00:00293A C00097              +19 	aa	DAYCLOCK$
00:00293B 20A005              +20 	sa	transmission:timer(2)
00:00293C 350000              +21 	lret	0
  :                            22 
  :                            23 	$if	HVSOCKET
  :                            24 tcp_stretch_timer2
00:00293D F80005              +25 	push	b
(+01)0f
00:00293E 680423              +26 	lb	tcp_superpages						. number of connection tanks
00:00293F 2E0007              +27 	sbl	7
00:002940 C00005              +28 	aa	b
00:002941 688FC9              +29 	lb	*(BSOCKET*/12++tlist:connection_block(1):timer(2))	. log of connections
00:002942 2E0002              +30 	sbl	2							. in this tank
00:002943 C00005              +31 	aa	b
00:002944 380005              +32 	pop	b
00:002945 350000              +33 	lret	0
  :                            34 	$endif
  :                            35 
  :                            36 tcp_start_timewait
  :                            37 	$if	TCP_TIMEWAIT_MS<32768
00:002946 652710              +38 	la	TCP_TIMEWAIT_MS,,xi
  :                            39 	$else
  :                            40 	la	(TCP_TIMEWAIT_MS)
  :                            41 	$endif
  :                            42 
00:002947 B60949              +43 	j	tcp_add_timer1
  :                            44 
  :                            45 tcp_restart_timer1
00:002948 600FCA              +46 	la	(TCP_TIMER1)			. something arrived
  :                            47 tcp_add_timer1
00:002949 C00097              +48 	aa	DAYCLOCK$			. restart the big timer
  :                            49 .	jnza	tcp_store_timer1
00:00294A 950001              +50 	or, xi	1				. but don't restart it to zero
  :                            51 tcp_store_timer1
00:00294B 20A004              +52 	sa	transmission:timer(1)
00:00294C 350000              +53 	lret	0
  :                            54 
  :                            55 tcp4_reset_dq_lx
00:00294D 500011              +56 	lx	TP_HEADER
  :                            57 tcp4_reset_dq
00:00294E 60A006              +58 	la	transfer:hl_code
00:00294F A50004              +59 	and	TCP_RST,,xi
00:002950 D60953              +60 	jnza	tcp4_reset_dqx			. don't answer a reset
  :                            61 
00:002951 58E004              +62 	ly	descriptor:dgram
00:002952 3E0802              +63 	lcal	tcp_reject
  :                            64 tcp4_reset_dqx
00:002953 350000              +65 	lret	0
  :                            66 
  :                            67 	$if	HVSOCKET
  :                            68 tcp4_net_free_txdatagram
00:002954 3E0EC7              +69 	lcal	readq
00:002955 C6095A              +70 	jza	tcp4_net_free_txdatagram_no_action
00:002956 9F0002              +71 	dpush	x
00:002957 3E0930              +72 	lcal	tcp_free_tx
00:002958 380002              +73 	dpop	x
00:002959 380003              +73 
  :                            74 tcp4_net_free_txdatagram_no_action
00:00295A 350000              +75 	lret	0
  :                            76 	$endif
  :                            77 
  :                            78 tcp4_rxaction	$tree
  :                            79 
                                	$head_near	scalars(connection,	int,	x	;
                                				ACK_AWAITED,	int		;
                                				received_seq,	long		;
00:00295B F80002              +83 				save_fp,	int,	fp	)
00:00295C FD0000              +83 
00:00295D 9F0FCB              +83 
00:00295E F8000E              +83 
  :                            84 
  :                            85 	$if	TCP_NOQ
  :                            86 
  :                            87 	.	buffer acquire t_ibuffer writes descriptor to fp
  :                            88 	.	fp is saved in case a buffer is bought for SYN_ACK.RST.ACK_FIN
  :                            89 	.	and should be reloaded after
  :                            90 
  :                            91 	$else
  :                            92 	sa	fp
  :                            93 	dl	descriptor:sobdi
  :                            94 	sabr	BSOCKET
  :                            95 	la	s:tcp:tbase, b
  :                            96 	sabr	BSOCKET
  :                            97 	$endif
  :                            98 
00:00295F 3E06E0              +99 	lcal	tcp_locate_connection
00:002960 700002              +100 	tz	x
00:002961 B60971              +101 	j	tcp_connection_located	.
  :                            102 
  :                            103 					. so is it an incoming connect?
00:002962 50E005              +104 	lx	descriptor:uproto
00:002963 100011              +105 	sx	TP_HEADER
00:002964 60A006              +106 	la	transfer:hl_code, x
00:002965 20001B              +107 	sa	HL_FLAGS
  :                            108 
00:002966 A50016              +109 	and, xi	TCP_SYN++TCP_ACK++TCP_RST
00:002967 B50002              +110 	xor, xi	TCP_SYN
00:002968 C6096D              +111 	jza	tcp4_accept
  :                            112 
  :                            113 tcp_reset_dq_lx
00:002969 3E094D              +114 	lcal	tcp4_reset_dq_lx		. similar case to IP input loop
00:00296A B60A78              +115 	j	tcp_stepover_response		. nothing listening, but we must
  :                            116 						. dq from tcpq and drop, send RST
  :                            117 						. and continue in this loop here
  :                            118 tcp_accept_fail2
00:00296B 10F004              +119 	sx	connection
00:00296C B60A50              +120 	j	tcp_ripdown_reset
  :                            121 
  :                            122 .	lcal	tcp4_ripdown_reset
  :                            123 .	j	tcp_stepover_response
  :                            124 						. either q the request to
  :                            125 						. the listening socket owner
  :                            126 						. or do this automatic accept
  :                            127 tcp4_accept
00:00296D 3E065C              +128 	lcal	tcp_auto_accept
00:00296E B60969              +129 	j	tcp_reset_dq_lx			. connection not assigned
00:00296F B6096B              +130 	j	tcp_accept_fail2		. connection assigned but not working
  :                            131 						. connection SYN_ACK, 3rd return
00:002970 B60A78              +132 	j	tcp_stepover_response		. SYN pdu consumed
  :                            133 
  :                            134 tcp_connection_located
00:002971 10F004              +135 	sx	connection
00:002972 70A004              +136 	tz	transmission:timer(1)		. restart the big timer
00:002973 3E0948              +137 	lcal	tcp_restart_timer1		. unless it's switched off
  :                            138 
00:002974 580011              +139 	ly	TP_HEADER
00:002975 60B006              +140 	la	transfer:hl_code, y
00:002976 20001B              +141 	sa	HL_FLAGS
00:002977 A50012              +142 	and	TCP_SYN++TCP_ACK,,xi
00:002978 B50012              +143 	xor	TCP_SYN++TCP_ACK,,xi
00:002979 C60982              +144 	jza	tcp_synsent?
  :                            145 	
00:00297A A50002              +146 	and	TCP_SYN,,xi
00:00297B D60982              +147 	jnza	tcp_no2ndsyn
00:00297C 60A001              +148 	la	transmission:state
00:00297D A6097F              +149  jpa $+2					. -STATE = awaiting transition
00:00297E B5FFFF              +150  xor -1,,xi
00:00297F D50004              +151 	ana, xi	TCP_SYNRECEIVED
00:002980 C60A78              +152 	jza	tcp_stepover_response
00:002981 B60A50              +153 	j	tcp_ripdown_reset
  :                            154 
  :                            155 tcp_synsent?
  :                            156 tcp_no2ndsyn
00:002982 60001B              +157 	la	HL_FLAGS
00:002983 06000B              +158 	sar	11
00:002984 A5001E              +159 	and, xi	30
  :                            160 
00:002985 C00003              +161 	aa	y
00:002986 20E006              +162 	sa	descriptor:apdata
00:002987 200010              +163 	sa	RX_APDATA
  :                            164 
  :                            165 						. is the ACK reasonable?
  :                            166 
00:002988 CFA00A              +167 	dl	transmission:remote_ack_window
00:002989 A80F8D              +168 	andB	(255*/16:s)
  :                            169 
00:00298A C70006              +170 	ds	6				. remote ack so far
  :                            171 
00:00298B CFB004              +172 	dl	transfer:ack, y
00:00298C 2E0008              +173 	sbl	8
00:00298D 360008              +174 	dsl	8
00:00298E C70008              +175 	ds	8				. new ack proposed
  :                            176 
00:00298F DF0006              +177 	dan	6				. remote ACK gone backwards?
  :                            178 
  :                            179 	$if	1
  :                            180 						. new remote ack < stored remote ack ?
00:002990 E60996              +181 	jna	tcp_compare_forward		. delayed in the post?
  :                            182 						. not an advance. check delayed payload
00:002991 CF0008              +183 	dl	8				. an advance on what we knew
00:002992 C70006              +184 	ds	6				. ack of reference updated
00:002993 480F8F              +185 	lk	(00FFFF)
00:002994 BFB007              +186 	mlb	transfer:window, y
00:002995 C7A00A              +187 	ds	transmission:remote_ack_window
  :                            188 
  :                            189 tcp_compare_forward
  :                            190 
  :                            191 	$else
  :                            192 
  :                            193 	jna	tcp_ripdown_reset
  :                            194 	$endif
  :                            195 
00:002996 CFA00C              +196 	dl	transmission:sequence_ackx
00:002997 A80F8D              +197 	andB	(255*/16:s)
  :                            198 
00:002998 DF0008              +199 	dan	8				. remote ACK beyond local SEQ?
  :                            200 
  :                            201 	$if	1
00:002999 A6099B              +202 	jpa	tc_no_problem_p
00:00299A B60A78              +203 	j	tcp_stepover_response		. or ii	GUARD$ to diagnose more deeply
  :                            204 						. otherwise drop as a broken segment
  :                            205 tc_no_problem_p
  :                            206 	$else					. not best alternative
  :                            207 	jna	tcp_ripdown_reset		. better to wait for resend
  :                            208 	$endif
  :                            209 
00:00299B 60001B              +210 	la	HL_FLAGS
00:00299C A50004              +211 	and, xi	TCP_RST
00:00299D D60A5A              +212 	jnza	tcp_ripdown_silently
  :                            213 
  :                            214 
  :                            215 	.	0:	is the remote ACK possible?
  :                            216 
  :                            217 	.	0:5	is there a remote reset?
  :                            218 
  :                            219 	.	1:	cache remote ACK and window
  :                            220 
  :                            221 	.	2:1	send waiting segments as remote
  :                            222 	.		window allows
  :                            223 
  :                            224 	.	2:2	release segments queued for ACK
  :                            225 	.		according to remote ACK value
  :                            226 	.		vs sequence + size of sent output
  :                            227 
  :                            228 	.	3:	compare remote sequence with local
  :                            229 	.		ACK
  :                            230 
  :                            231 	.	4:	if less, shave the leading edge
  :                            232 	.		of the input
  :                            233 
  :                            234 	.	5:	if more but sequence + length
  :                            235 	.		within local ACK + window, deferq
  :                            236 	.		and otherwise drop
  :                            237 
  :                            238 	.	6:	accept as much of the net input at 4:
  :                            239 	.		as local window allowed. This avoids
  :                            240 	.		accepting single bytes which are
  :                            241 	.		sent to push the window open
  :                            242 	.		and also avoids rejecting payload
  :                            243 	.		for which we have advertised
  :                            244 	.		window. Drop the segment if no
  :                            245 	.		part of it is accepted, and shave
  :                            246 	.		the trailing edge if part of it
  :                            247 	.		is rejected
  :                            248 
  :                            249 	.		It might be unwise to accept beyond
  :                            250 	.		window. A well behaved remote system
  :                            251 	.		won't send beyond window (apart from
  :                            252 	.		experimental 1-byters, and the response
  :                            253 	.		to those is drop them and advertise
  :                            254 	.		new window). A malicious remote system
  :                            255 	.		might try to manipulate window
  :                            256 
  :                            257 	.	7:	Advance local ACK and reduce local
  :                            258 	.		window according to the amount accepted
  :                            259 
  :                            260 	.	8:	generate new local window
  :                            261 
  :                            262 	.	9:	transmit segments queued for remote window
  :                            263 	.		according to remote ACK + window,  and
  :                            264 	.		if there is none, and no further input
  :                            265 	.		segment after this has yet been received
  :                            266 	.		for this connection, send an ACK, unless
  :                            267 	.		the incoming segment is an ACK without
  :                            268 	.		payload and its SEQ is not beyond local ACK
  :                            269 
  :                            270 	.		SYN and FIN have a payload weight of
  :                            271 	.		1 byte
  :                            272 
  :                            273 	.		restart connection:timer(1)
  :                            274 	.		maybe do this at an early point, depending
  :                            275 	.		whether the attempt to communicate
  :                            276 	.		counts as keepalive even if it is
  :                            277 	.		out of range
  :                            278 
  :                            279 
  :                            280 
  :                            281 
  :                            282 	.	1	is the remote ACK possible?
  :                            283 
  :                            284 
  :                            285 	$if	0	. just done this
  :                            286 	dl	6
  :                            287 
  :                            288 	lk	(65535)
  :                            289 	mlb	transfer:window, y
  :                            290 	ds	transmission:remote_ack_window
  :                            291 	$endif
  :                            292 
  :                            293 
  :                            294 	.	2:1	drop ACKed outputs
  :                            295 	.		remote ACK is still in 6:7
  :                            296 
  :                            297 
00:00299E 68A001              +298 	lb	transmission:state
00:00299F AE09A1              +299  jpb $+2					. -STATE = awaiting transition
00:0029A0 BDFFFF              +300  xorB -1,,xi
00:0029A1 CDFFFB              +301 	ab, xi	-TCP_ESTABLISHED
00:0029A2 CE09B7              +302 	jzb	tcp_established
  :                            303 
00:0029A3 CD0001              +304 	ab, xi	TCP_ESTABLISHED-TCP_SYNRECEIVED
00:0029A4 CE0A48              +305 	jzb	tcp_synreceived
  :                            306 
00:0029A5 CDFFFC              +307 	ab, xi	TCP_SYNRECEIVED-TCP_CLOSEWAIT
00:0029A6 CE09B7              +308 	jzb	tcp_closewait
  :                            309 
00:0029A7 CDFFFF              +310 	ab, xi	TCP_CLOSEWAIT-TCP_LASTACK
00:0029A8 CE09E0              +311 	jzb	tcp_lastack
  :                            312 
00:0029A9 CD0006              +313 	ab, xi	TCP_LASTACK-TCP_SYNSENT
00:0029AA CE0A66              +314 	jzb	tcp_synsent
  :                            315 
00:0029AB CDFFFD              +316 	ab, xi	TCP_SYNSENT-TCP_FINWAIT1
00:0029AC CE0A22              +317 	jzb	tcp_finwait1
  :                            318 
00:0029AD CDFFFF              +319 	ab, xi	TCP_FINWAIT1-TCP_FINWAIT2
00:0029AE CE0A39              +320 	jzb	tcp_finwait2
  :                            321 
00:0029AF CDFFFD              +322 	ab, xi	TCP_FINWAIT2-TCP_CLOSING	
00:0029B0 CE0A2C              +323 	jzb	tcp_closing
  :                            324 
00:0029B1 CDFFFF              +325 	ab, xi	TCP_CLOSING-TCP_TIMEWAIT
00:0029B2 CE0A42              +326 	jzb	tcp_timewait
  :                            327 
00:0029B3 CDFFFF              +328 	ab, xi	TCP_TIMEWAIT-TCP_DELETETCB
00:0029B4 CE0A63              +329 	jzb	tcp_deletetcb
  :                            330 
00:0029B5 CD000B              +331 	ab, xi	TCP_DELETETCB-TCP_CLOSED
00:0029B6 CE0A65              +332 	jzb	tcp_closed
  :                            333 
  :                            334 tcp_established
  :                            335 tcp_closewait
  :                            336 tcp_tx_segments_acked?
  :                            337 
  :                            338 	$if	1	. moved to state machine part tcp_process
  :                            339 
00:0029B7 70A016              +340 	tz	transmission:q4ack:head
00:0029B8 3E05DB              +341 	lcal	tcp4_outstanding
  :                            342 
  :                            343 	$else
  :                            344 
  :                            345 	la	transmission:q4ack:head
  :                            346 	jza	tcp_rx_in_range?
  :                            347 
  :                            348 
  :                            349 	lb	descriptor:uproto, a	.	segment pointer
  :                            350 	lx	b			.	segment pointer
  :                            351 	ly	a			.	descriptor
  :                            352 
  :                            353 	anb	descriptor:apdata, y	.	zero minus header length
  :                            354 	sbl	1			.	in bytes
  :                            355 
  :                            356 	la	transfer:hl_code	.	include weight of SYN or FIN if present
  :                            357 	and	TCP_SYN++TCP_FIN,,xi	.	to avoid discard on ACK at exact sequence
  :                            358 	jza	tcp_flags_weighed	.	not at all likely on SYN
  :                            359 	ab	1,,xi			.	just possible on FIN
  :                            360 tcp_flags_weighed			.	don't xmit a segment with both
  :                            361 
  :                            362 	ab	descriptor:bytes, y	.	-header+segment=payload length [+ SYN | FIN]
  :                            363 
  :                            364 	$if	1
  :                            365 
  :                            366 	dsl	32
  :                            367 	dsr	16			.	proposed payload
  :                            368 	ds	8
  :                            369 
  :                            370 	dl	transfer:seq		.	cache transfer:seq */ 16
  :                            371 	sbl	8			.	of segment awaiting ACK
  :                            372 	dsl	8			.
  :                            373 
  :                            374 	da	8			.	+ proposed payload */ 16
  :                            375 	ds	8			
  :                            376 
  :                            377 	dl	6			.	cached remote ACK */ 16
  :                            378 	dan	8
  :                            379 	lx	connection
  :                            380 	jna	tcp_promote_resends	.	beyond acknowledged
  :                            381 					.
  :                            382 	$else
  :                            383 					.	       80FFFF
  :                            384 	sbl	8			.	align, drop retain flag
  :                            385 	sb	9
  :                            386 	z	8			.	000000 FFFF00
  :                            387 
  :                            388 	dl	transfer:seq		.	sequence leading edge segment awaiting ACK
  :                            389 	lx	connection		.	retrieve connection pointer
  :                            390 	sbl	8			.	00FFFF FFFF00
  :                            391 
  :                            392 	da	8			.	sequence after trailing edge
  :                            393 	dsl	8			.	FFFFFF FF0000
  :                            394 
  :                            395 	dan	6			.	minus received ACK
  :                            396 
  :                            397 	jdz	tcp_q4a_slip?
  :                            398 	jpa	tcp_promote_resends	.	segment trailing edge
  :                            399 					.	> remote ACK
  :                            400 	$endif
  :                            401 
  :                            402 tcp_q4a_slip?				.	segment within received ACK
  :                            403 
  :                            404 	ly	transmission:q4ack,,i
  :                            405 
  :                            406 	$if	HVSOCKET
  :                            407 	lcal	tcp4_net_free_txdatagram	.
  :                            408 	$else
  :                            409 	lcal	net_free_txdatagram
  :                            410 	$endif
  :                            411 
  :                            412 	j	tcp_tx_segments_acked?
  :                            413 
  :                            414 	.	2:1	send waiting segments as
  :                            415 	.		as remote window allows
  :                            416 
  :                            417 	
  :                            418         .       3 4 5 6         accept the input segment or not
  :                            419 
  :                            420 tcp_promote_resends
  :                            421 
  :                            422 	$endif		. moved to state machine part tcp_process
  :                            423 
  :                            424 tcp_rx_in_range?
  :                            425 				. finally time to calculate the
  :                            426 				. header length, payload address
  :                            427 
00:0029B9 CFA00E              +428 	dl	transmission:ack_window, x
00:0029BA 280009              +429 	sb	9		. save the window
00:0029BB A80F8D              +430 	andB	(255*/16:s)
00:0029BC C70006              +431 	ds	6		. exactly expected sequence?
  :                            432 
  :                            433 tcp_place_in_stream
00:0029BD 680011              +434 	lb	TP_HEADER
00:0029BE D80010              +435 	anb	RX_APDATA
00:0029BF 2E0001              +436 	sbl	1			. minus header length in bytes
00:0029C0 C8E003              +437 	ab	descriptor:bytes
00:0029C1 28E003              +438 	sb	descriptor:bytes	. calculate payload length
00:0029C2 28F003              +439 	sb	ACK_AWAITED
  :                            440 
00:0029C3 28000B              +441 	sb	11			. make a 48 bit payload byte count
00:0029C4 280012              +442 	sb	TPAYLOAD_BYTES
00:0029C5 30000A              +443 	z	10
  :                            444 
  :                            445 
00:0029C6 580011              +446 	ly	TP_HEADER
00:0029C7 CFB002              +447 	dl	transfer:seq, y		. extract the incoming sequence
  :                            448 
00:0029C8 2E0008              +449 	sbl	8
00:0029C9 360008              +450 	dsl	8
  :                            451 
00:0029CA C7F001              +452 	ds	received_seq
  :                            453 
00:0029CB DF0006              +454 	dan	6
00:0029CC 7C09D2              +455 	jdz	tcp_rx_exact_sequence
00:0029CD A60A12              +456 	jpa	tcp_rx_above_ack
  :                            457 				. have you ACKED all this payload?
  :                            458 
  :                            459 				. comparison with expected sequence
  :                            460 				. yields a negative #
  :                            461 				. which reduces the net payload
  :                            462 
  :                            463 
  :                            464 	$if	1
  :                            465 
  :                            466 .	dsl	24		. turn the minus figure
  :                            467 .	anb	a		. into bytes-already-read
  :                            468 .	aa	TPAYLOAD_BYTES		.
  :                            469 .	jza	tcp_rx_already_acked	. all repeat bytes
  :                            470 
  :                            471 						. sequence - acked and it is negative
00:0029CE 960010              +472 	dsa	16				. was in high positions for circular compare
00:0029CF D7000A              +473 	da	10				. payload + sequence - acked
00:0029D0 7C0A1D              +474 	jdz	tcp_rx_already_acked
00:0029D1 E60A1D              +475 	jna	tcp_rx_already_acked
  :                            476 
  :                            477 	$else
  :                            478 
  :                            479 	dsa	16
  :                            480 	da	10
  :                            481 	jdz	tcp_rx_already_acked		. possibly to nothing or less
  :                            482 	jna	tcp_rx_already_acked		. you need to ACK
  :                            483 
  :                            484 	sb	descriptor:bytes		. save the new net byte count
  :                            485 	la	11				. calculate the difference in bytes
  :                            486 	sb	11
  :                            487 	ana	b
  :                            488 	sar	1				. make that a difference in words
  :                            489 	aa	RX_APDATA			. save the new payload address
  :                            490 	sa	RX_APDATA
  :                            491 	sa	descriptor:apdata
  :                            492 
  :                            493 	$endif
  :                            494 
  :                            495 tcp_rx_exact_sequence
00:0029D2 28E007              +496 	sb	descriptor:readpoint
  :                            497 
00:0029D3 60001B              +498 	la	HL_FLAGS
00:0029D4 A50001              +499 	and, xi	TCP_FIN
  :                            500 
00:0029D5 C609E9              +501 	jza	tcp_rx_payload?
  :                            502 
00:0029D6 CFF001              +503 	dl	received_seq
00:0029D7 D70FA9              +504 	da	(1*/16:d)
00:0029D8 C70006              +505 	ds	6
00:0029D9 480F8F              +506 	lk	(00FFFF)
00:0029DA BF0009              +507 	mlb	9			. window
00:0029DB C7A00E              +508 	ds	transmission:ack_window, x
  :                            509 
00:0029DC FD0008              +510 	push,xi	TCP_CLOSEWAIT
00:0029DD 38A001              +511 	pop	transmission:state
  :                            512 
00:0029DE 17F003              +513 	inc	ACK_AWAITED			. lcal	tcp_send_ack
00:0029DF B609EC              +514 	j	tcp_rx_payload			. zero payload is queued as a signal
  :                            515 						. to the application of remote close
  :                            516 
  :                            517 tcp_lastack
00:0029E0 3E0933              +518 	lcal	tcp_event1_acknowledged?
00:0029E1 7C09E6              +519 	jdz	tcp_lastack2closed
00:0029E2 600097              +520 	la	DAYCLOCK$
00:0029E3 C51770              +521 	aa	6000,,xi			. in case last ack gets lost
00:0029E4 20A004              +522 	sa	transmission:timer(1)		. drop connection in a few seconds
00:0029E5 B60A78              +523 	j	tcp_stepover_response
  :                            524 
  :                            525 tcp_lastack2closed
00:0029E6 FD0001              +526 	push,xi	TCP_CLOSED
00:0029E7 38A001              +527 	pop	transmission:state
00:0029E8 B60A78              +528 	j	tcp_stepover_response
  :                            529 	
  :                            530 tcp_rx_payload?
00:0029E9 700012              +531 	tz	TPAYLOAD_BYTES
00:0029EA B609EC              +532 	j	tcp_rx_payload
  :                            533 
  :                            534 	$if	1
00:0029EB B60A78              +535 	j	tcp_stepover_response
  :                            536 	$else
  :                            537 	.	to do it this way first update ack as below in rx_payload
  :                            538 	.	there seem to be enough acks for intense flow control anyway
  :                            539 
  :                            540 	j	tcp_rx_ack_nopayload
  :                            541 	$endif
  :                            542 
  :                            543 tcp_rx_payload
  :                            544 						. now is the segment within window?
00:0029EC 600009              +545 	la	9				. for now, discard any segment not
00:0029ED A00F8F              +546 	and	(00FFFF)			. completely within window
00:0029EE D0000B              +547 	ana	11				. down with window
00:0029EF 5E0A21              +548 	jnc	tcp_rx_above_range
00:0029F0 200009              +549 	sa	9
00:0029F1 CF0006              +550 	dl	6				. ACK is */ 16
  :                            551 
00:0029F2 160010              +552 	dsr	16
00:0029F3 D7000A              +553 	da	10				. up with ACK
  :                            554 
00:0029F4 C7000A              +555 	ds	10				. cache the new ACK point
  :                            556 
00:0029F5 360010              +557 	dsl	16
00:0029F6 980009              +558 	orB	9				. save new ACK++WINDOW
00:0029F7 C7A00E              +559 	ds	transmission:ack_window
  :                            560 
00:0029F8 60F000              +561 	la	save_fp
00:0029F9 3E08BF              +562 	lcal	tcp_write_rxq
  :                            563 						. now see if deferq joins on
  :                            564 
  :                            565 
00:0029FA 64A012              +566 	la, i	transmission:deferq.head, x
00:0029FB 580004              +567 	ly	a
  :                            568 tcp_rx_rechain					. look for any deferred segment
00:0029FC 400003              +569 	lr	y				. which is no longer gapped
00:0029FD 60C000              +570 	la	0, a
00:0029FE C60A0D              +571 	jza	tcp_ack_point
00:0029FF 580004              +572 	ly	a
00:002A00 60C005              +573 	la	descriptor:uproto, a
00:002A01 200011              +574 	sa	TP_HEADER
00:002A02 CFC002              +575 	dl	transfer:seq, a
00:002A03 2E0008              +576 	sbl	8
00:002A04 360008              +577 	dsl	8
  :                            578 
00:002A05 DF0006              +579 	dan	6
00:002A06 E609FC              +580 	jna	tcp_rx_rechain
  :                            581 
00:002A07 F8B000              +582 	push	descriptor:next, y
00:002A08 388000              +583 	pop	*r				. unchain the segment
  :                            584 
00:002A09 18000E              +585 	sy	fp				. expected descriptor base
00:002A0A F8E006              +586 	push	descriptor:apdata
00:002A0B 380010              +587 	pop	RX_APDATA
00:002A0C B609BD              +588 	j	tcp_place_in_stream
  :                            589 
  :                            590 
  :                            591 	. here you decide whether waiting segments
  :                            592 	. can be transmitted. Any earlier, and the
  :                            593 	. local ACK pointer would be out of date
  :                            594 
  :                            595 	. checksum must always be finalised at
  :                            596 	. the moment of transmission, because local
  :                            597 	. ACK is summed in the segment header
  :                            598 
  :                            599 tcp_ack_point
00:002A0D 50F004              +600 	lx	connection
  :                            601 	$if	1
00:002A0E 70F003              +602 	tz	ACK_AWAITED
00:002A0F 3E0839              +603 	lcal	tcp_send_ack
00:002A10 3E07EB              +604 	lcal	tcp_ack_dropped			. return 0 = could not send ack
00:002A11 B60A7A              +605 	j	tcp4xreact			. go keep input data on connection chain
  :                            606 	$else
  :                            607 	tz	transmission:q4window
  :                            608 	lcal	tcp_send_on_window		. should not be necessary here
  :                            609 						. ACK may be carried on traffic
  :                            610 						. then see if ACK is still needed
  :                            611 	jnza	tcp4xreact			. tx traffic contained ACKs
  :                            612 .	tz	ACK_AWAITED
  :                            613 	lcal	tcp_send_ack
  :                            614 	lcal	tcp_ack_dropped	. usually skipped on return
  :                            615 	j	tcp4xreact
  :                            616 	$endif
  :                            617 
  :                            618 tcp_rx_above_ack				. 48-bit positive difference SEQ > ACK is in A:B
  :                            619 						. and window is in 9 but with some bits from ACK
00:002A12 D7000A              +620 	da	10				. calculate SEQ - ACK + payload
00:002A13 C7000A              +621 	ds	10
  :                            622 
00:002A14 600009              +623 	la	9
00:002A15 260008              +624 	sal	8
00:002A16 160020              +625 	dsr	32
00:002A17 DF000A              +626 	dan	10
  :                            627 
00:002A18 5E0A21              +628 	jnc	tcp_rx_above_range
  :                            629 
(+01)10
00:002A19 5D041E              +630 	ly	tcpq,,xi
00:002A1A 64A012              +631 	la, i	transmission:deferq
00:002A1B 3E00DF              +632 	lcal	net_transfer
  :                            633 						. now fit this segment in deferq
  :                            634 
00:002A1C B60A7A              +635 	j	tcp4xreact			. only stay for 1 segment
  :                            636 						. the next one may be for any connection
  :                            637 
  :                            638 tcp_rx_already_acked
00:002A1D FD0001              +639 	MIB_ICOUNT48	tcpDupDrops:i		. all this segment already rx
(+01)0f
00:002A1E 2F056F              +639 
00:002A1F 5E0A21              +639 
(+01)0f
00:002A20 17056E              +639 
  :                            640 tcp_rx_above_range
  :                            641 .	la, xi	1
  :                            642 .	sa	ACK_AWAITED
  :                            643 .	lcal	tcp_send_ack
  :                            644 
  :                            645 tcp_rx_ack_nopayload
00:002A21 B60A76              +646 	j	tcp_ack
  :                            647 .	ly, xi	tcpq
  :                            648 .	lcal	net_drop
  :                            649 .	j	tcp_ack_point
  :                            650 
  :                            651 tcp_finwait1
00:002A22 60001B              +652 	la	HL_FLAGS
00:002A23 A50001              +653 	and, xi	TCP_FIN
00:002A24 C60A2F              +654 	jza	tcp_finwait1_acked?
00:002A25 CF0FA9              +655 	dl	(1*/16d)
00:002A26 D7A00E              +656 	da	transmission:ack_window
00:002A27 C7A00E              +657 	ds	transmission:ack_window
00:002A28 FD000A              +658 	push,xi	TCP_CLOSING
00:002A29 38A001              +659 	pop	transmission:state
00:002A2A 3E0839              +660 	lcal	tcp_send_ack
00:002A2B 3E07EB              +661 	lcal	tcp_ack_dropped	. there are two comebacks
  :                            662 				. and the ACK and FIN  may be together
  :                            663 tcp_closing
00:002A2C 3E0933              +664 	lcal	tcp_event1_acknowledged?
00:002A2D 7C0A35              +665 	jdz	tcp_close2timewait
00:002A2E B60A78              +666 	j	tcp_stepover_response
  :                            667 
  :                            668 tcp_finwait1_acked?
00:002A2F 3E0933              +669 	lcal	tcp_event1_acknowledged?
00:002A30 7C0A32              +670 	jdz	tcp_finwait1tofinwait2
00:002A31 B60A78              +671 	j	tcp_stepover_response
  :                            672 
  :                            673 tcp_finwait1tofinwait2
00:002A32 FD0007              +674 	push,xi	TCP_FINWAIT2
00:002A33 38A001              +675 	pop	transmission:state
00:002A34 B60A78              +676 	j	tcp_stepover_response
  :                            677 
  :                            678 tcp_close2timewait
00:002A35 FD000B              +679 	push,xi	TCP_TIMEWAIT
00:002A36 38A001              +680 	pop	transmission:state
00:002A37 3E0946              +681 	lcal	tcp_start_timewait
00:002A38 B60A78              +682 	j	tcp_stepover_response
  :                            683 	
  :                            684 tcp_finwait2
00:002A39 60001B              +685 	la	HL_FLAGS
00:002A3A A50001              +686 	and, xi	TCP_FIN
00:002A3B C60A78              +687 	jza	tcp_stepover_response
00:002A3C CF0FA9              +688 	dl	(1*/16d)
00:002A3D D7A00E              +689 	da	transmission:ack_window
00:002A3E C7A00E              +690 	ds	transmission:ack_window
00:002A3F 3E0839              +691 	lcal	tcp_send_ack
00:002A40 3E07EB              +692 	lcal	tcp_ack_dropped
00:002A41 B60A35              +693 	j	tcp_close2timewait
  :                            694 	
  :                            695 tcp_timewait
00:002A42 600097              +696 	la	DAYCLOCK$
00:002A43 D0A004              +697 	ana	transmission:timer(1)
00:002A44 E60A78              +698 	jna	tcp_stepover_response
00:002A45 650001              +699 	la, xi	TCP_CLOSED
00:002A46 20A001              +700 	sa	transmission:state
00:002A47 B60A78              +701 	j	tcp_stepover_response
  :                            702 
  :                            703 tcp_synreceived
00:002A48 3E0933              +704 	lcal	tcp_event1_acknowledged?
00:002A49 7C0A4B              +705 	jdz	tcp_syn_ack_acked
00:002A4A B60A50              +706 	j	tcp_ripdown_reset
  :                            707 
  :                            708 tcp_syn_ack_acked
00:002A4B 650005              +709 	la, xi	TCP_ESTABLISHED
00:002A4C 20A001              +710 	sa	transmission:state
  :                            711 
00:002A4D 5CA016              +712         ly      transmission:q4ack,,i
  :                            713         $if     HVSOCKET
00:002A4E 3E0954              +714         lcal    tcp4_net_free_txdatagram
  :                            715         $else
  :                            716         lcal    net_free_txdatagram
  :                            717         $endif
  :                            718 
00:002A4F B60A78              +719         j	tcp_stepover_response
  :                            720 
  :                            721 tcp_ripdown_reset
00:002A50 50F004              +722 	lx	connection
00:002A51 60A001              +723 	la	transmission:state
00:002A52 A60A54              +724  jpa $+2				. -STATE = awaiting transition
00:002A53 B5FFFF              +725  xor -1,,xi
00:002A54 C5FFFF              +726 	aa	-TCP_CLOSED,,xi
00:002A55 C60A78              +727 	jza	tcp_stepover_response
00:002A56 C5FFF5              +728 	aa	TCP_CLOSED-TCP_DELETETCB,,xi
00:002A57 C60A78              +729 	jza	tcp_stepover_response
00:002A58 3E0834              +730 	lcal	tcp_reset		. send a reset if possible
00:002A59 B60A5A              +731 	j	$+1			. there are two returns
  :                            732 tcp_ripdown_silently
00:002A5A 50F004              +733 	lx	connection
  :                            734 
00:002A5B 60A001              +735 	la	transmission:state
00:002A5C A60A5E              +736  jpa $+2				. -STATE = awaiting transition
00:002A5D B5FFFF              +737  xor -1,,xi
00:002A5E C5FFF4              +738 	aa	-TCP_DELETETCB,,xi
00:002A5F C60A78              +739 	jza	tcp_stepover_response
00:002A60 C5000B              +740 	aa	TCP_DELETETCB-TCP_CLOSED,,xi
00:002A61 C60A78              +741 	jza	tcp_stepover_response
  :                            742 
00:002A62 3E06D8              +743 	lcal	tcp_ripdown
  :                            744 
  :                            745 tcp_deletetcb
00:002A63 FD0001              +746 	push,xi	TCP_CLOSED
00:002A64 38A001              +747 	pop	transmission:state
  :                            748 tcp_closed				. the TCB may already be reassigned
00:002A65 B60A78              +749 	j	tcp_stepover_response	. this PDU wasn't added to an input chain
  :                            750 .	ly, xi	tcpq
  :                            751 .	lcal	net_drop
  :                            752 .	j	tcp4xreact
  :                            753 
  :                            754 tcp_synsent
00:002A66 3E0933              +755 	lcal	tcp_event1_acknowledged?
00:002A67 7C0A69              +756 	jdz	tcp_synsent1
00:002A68 B60A50              +757 	j	tcp_ripdown_reset
  :                            758 tcp_synsent1
00:002A69 650005              +759 	la, xi	TCP_ESTABLISHED
00:002A6A 20A001              +760 	sa	transmission:state
00:002A6B 580011              +761 	ly	TP_HEADER
00:002A6C CFB002              +762 	dl	transfer:seq, y
00:002A6D 2E0008              +763 	sbl	8
00:002A6E 360008              +764 	dsl	8
00:002A6F D70FA9              +765 	da	(1*/16d)
00:002A70 C7A00E              +766 	ds	transmission:ack_window
  :                            767 
  :                            768 	$if	HVSOCKET
00:002A71 788FA6              +769 	tn	*(BSOCKET*/12++tlist:flags)
00:002A72 B60A74              +769 
  :                            770 	$endif
00:002A73 FF0FAB              +771 	call	(tcp_agent_add)
  :                            772 
00:002A74 5CA016              +773 	ly	transmission:q4ack,,i
  :                            774 
  :                            775 	$if	HVSOCKET
00:002A75 3E0954              +776 	lcal	tcp4_net_free_txdatagram
  :                            777 	$else
  :                            778 	lcal	net_free_txdatagram
  :                            779 	$endif
  :                            780 
00:002A76 3E0839              +781 tcp_ack	lcal	tcp_send_ack
00:002A77 3E07EB              +782 	lcal	tcp_ack_dropped		. if you failed to send you get here
  :                            783 					. maybe you will ack as required soon
  :                            784 tcp_stepover_response
  :                            785 
  :                            786 	$if	TCP_NOQ
00:002A78 38000E              +787 	pop	fp			. activity at I / F  may have overloaded fp
00:002A79 B6073B              +788 	j	tcp_escape
  :                            789 
  :                            790 
  :                            791 	$else
  :                            792 
  :                            793 	ly	tcpq,,xi
  :                            794 	lcal	net_drop
  :                            795 
  :                            796 	$endif
  :                            797 	
  :                            798 tcp4xreact
00:002A7A 38000E              +799 	pop	fp
  :                            800 "$$frame"	$set	$$frame-1
00:002A7B FCF004              +801 	$ret
00:002A7C 38000F              +801 
00:002A7D 350000              +801 
  :                            802 	$root
  :                            2285 
  :                            89: 	$include	socket
  :                            1 .		x -> usockb(1)
  :                            2 .	OR	x -> tsockb(1)
  :                            3 .		a contains port number
  :                            4 
  :                            5 protocol_socket
00:002A7E 6D5E00              +6 	lb	BSOCKET*/9,,xi
00:002A7F 360008              +7 	dsl	8
00:002A80 160011              +8 	dsr	8+9
00:002A81 4E000C              +9 	rbr	12
00:002A82 800004              +10 	ax	a
00:002A83 750053              +11 	ii	READ_XVECTOR$
00:002A84 350000              +12 	lret	0
  :                            13 
  :                            90: 	$include	connect
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 
  :                            42 .	these blocking-only calls are central to the
  :                            43 .	known classical POSIX-like socket interface
  :                            44 
  :                            45 .	they correspond to the vectors	listen()
  :                            46 .					accept()
  :                            47 .					close()
  :                            48 .					connect()
  :                            49 
  :                            50 .	their blocking characteristic is in this file connect.msm
  :                            51 
  :                            52 .	and they complement		recv()
  :                            53 .	and				send()
  :                            54 
  :                            55 .	which block or not per flags argument
  :                            56 
  :                            57 .	first parameter of these routines is the handle integer
  :                            58 
  :                            59 .	the target connections of these routines are
  :                            60 .	in the default connections array
  :                            61 .	not the high-volume connection arrays
  :                            62 
  :                            63 
  :                            64 "$sockif"*	$tree
  :                            65 
  :                            66 .	vector name connect	. call from applications
  :                            67 
  :                            68 
  :                            69 socket_connect
                                	$head_far		 params(handle1,		int		;
                                					target_address,		float	)	;
                                										;
                                				scalars(socket_address,		long		;
00:002A85 9F0FCB              +74 					handle_encoding,	long		)
00:002A86 9F0FCB              +74 
  :                            75 
00:002A87 60F007              +76 	la			handle1
00:002A88 750055              +77 	ii			READ_SOCKET$
00:002A89 C7F000              +78 	ds			handle_encoding
  :                            79 
00:002A8A 480F8D              +80 	lk			(255*/16s)
00:002A8B E60A92              +81 	jna			socket_nane
00:002A8C AF0F80              +82 	mtane			(IPPROTO_TCP*/16)
00:002A8D B60A8F              +82 
00:002A8E B60A94              +83 	j			tcp_connect
00:002A8F AF0F7F              +84 	mta			(IPPROTO_UDP*/16)
00:002A90 B60A92              +85 	j			socket_nane
  :                            86 							. place UDP connect here
00:002A91 B60AA5              +87 	j			connect_x
  :                            88 
  :                            89 socket_nane
00:002A92 65FFEA              +90 	la			-NO_HANDLE,,xi			
00:002A93 B60AA5              +91 	j			connect_x
  :                            92 
  :                            93 tcp_connect
  :                            94 
00:002A94 75006D              +95 	ii	ON_NETB$	. caller to __connect
  :                            96 				. must run with network resources
  :                            97 				. in address space
  :                            98 
00:002A95 260008              +99 	sal	8		. a = port number if any
00:002A96 160020              +100 	dsr	24+8		. in bound or unbound handle
  :                            101 
                                	c	(__connect)	a,,long			;
00:002A97 9FF00A              +103 				target_address+2,,long
00:002A98 9F0004              +103 
00:002A99 FCF004              +103 
00:002A9A FF0FCD              +103 
00:002A9B 38000F              +103 
  :                            104 
00:002A9C A60AA2              +105 	jpa	update_tcp_handle
00:002A9D 680004              +106 	lb	a		. no connection
00:002A9E 60F007              +107 	la	handle1		. drop the handle
00:002A9F 750051              +108 	ii	FREE_HANDLE$
00:002AA0 600005              +109 	la	b
  :                            110 
00:002AA1 B60AA5              +111 	j	connect_x
  :                            112 
  :                            113 update_tcp_handle
00:002AA2 60F007              +114 	la	handle1
  :                            115 				. convert handle type to TCP_TCB
00:002AA3 750056              +116 	ii	USOCKET$C	. and update with pointers in x and BSOCKET
  :                            117 
00:002AA4 650000              +118 	la	0,,xi		. you arrived
  :                            119 
  :                            120 connect_x
00:002AA5 750070              +121 	ii	FREE_NETB$
00:002AA6 75006F              +122 	ii	FREE_SOCKB$
00:002AA7 FCF004              +123 	$ret
00:002AA8 38000F              +123 
00:002AA9 3D0000              +123 
  :                            124 
  :                            125 .	vector name __connect	. kernel environment is already addressable
  :                            126 				. tranmission control block generated not handle
  :                            127 .	parameter is near.far socket names netaddress.port.netaddress.port
  :                            128 .	return with TCP_ESTABLISHED is zero -> a x -> transmission control block
  :                            129 
  :                            130 active_connect
                                	$head_far		 params(addresses,		float	;
                                					fast_release,		int)	;
                                									;
                                				scalars(connect_socketpointer,	long	;
                                					default_ifp,		int	;
00:002AAA 9F0FCB              +136 					send_syn_tries,	int,	5,,xi	)
00:002AAB FD0000              +136 
00:002AAC FD0005              +136 
  :                            137 
00:002AAD CFF009              +138 	dl	addresses+2			. find a route
00:002AAE 160008              +139 	dsr	8				. to find interface
00:002AAF 0E0008              +140 	sbr	8				. and therefore MTU
00:002AB0 C70006              +141 	ds	6				. and come_from address if not given
  :                            142 
  :                            143 
00:002AB1 75006D              +144 	ii	ON_NETB$
  :                            145 
00:002AB2 3E0E15              +146 	lcal	route_outward_interface		. you always get back from here with IP B1 frame
00:002AB3 B60B27              +147 	j	connect_no_path
  :                            148 	
00:002AB4 10F001              +149 	sx	default_ifp
  :                            150 						. first: check / fix up local address:port
  :                            151 
00:002AB5 CFF007              +152 	dl	addresses
00:002AB6 7C0AC4              +153 	jdz	connect_local_wildcard
  :                            154 
  :                            155 	$if	1
00:002AB7 360020              +156         dsl	24+8
00:002AB8 060008              +157 	sar	8
00:002AB9 3E0927              +158 	lcal	tcp_socket
  :                            159 	$else
  :                            160 
  :                            161 	dsl	24+8				. base the port structure
  :                            162 	lb	(BSOCKET*/9+8)
  :                            163 	dsr	8+9
  :                            164 	rbr	12
  :                            165 	lx	tsockb(1),,xi
  :                            166 	ax	a
  :                            167 	ii	READ_XVECTOR$
  :                            168 
  :                            169 	$endif
  :                            170 
00:002ABA C60B29              +171 	jza	connect_bad_argument
  :                            172 
00:002ABB C7F002              +173 	ds	connect_socketpointer
00:002ABC C70012              +174 	ds	SOCKET_LPOINTER
00:002ABD 34002F              +175 	sabr	BSOCKET
00:002ABE 580005              +176 	ly	b
00:002ABF 480F8F              +177 	lk	(00FFFF)
00:002AC0 60F008              +178 	la	addresses+1
00:002AC1 AFD001              +179 	mta	s:socket_address+1
00:002AC2 B60B29              +180 	j	connect_bad_argument
00:002AC3 B60ACF              +181 	j	connect_fixport
  :                            182 
  :                            183 connect_local_wildcard
00:002AC4 9FF007              +184 	c	(__bind)	(IPPROTO_TCP*/16s)	addresses,,long
00:002AC5 F80F80              +184 
00:002AC6 FCF003              +184 
00:002AC7 FF0FCE              +184 
00:002AC8 38000F              +184 
  :                            185 
00:002AC9 E60B2A              +186 	jna	connect_return
  :                            187 
00:002ACA 60000B              +188 	la	11
00:002ACB CFC000              +189 	dl	s:socket_address, a
00:002ACC C7F007              +190 	ds	addresses			. updated sockaddress
00:002ACD CF000A              +191 	dl	10
00:002ACE C7F002              +192 	ds	connect_socketpointer
  :                            193 
  :                            194 connect_fixport
00:002ACF 60D005              +195 	la	s:tcp:tbase, b
  :                            196 
  :                            197 	$if	HVSOCKET
00:002AD0 D60AD2              +198 	jnza	connect_socket_storage_assigned
00:002AD1 FF0F94              +199 	call	(hvsocket_storage)		. outgoing connection writes
  :                            200 connect_socket_storage_assigned			. this storage unconditionally
  :                            201 	$endif
  :                            202 
00:002AD2 C60B1A              +203 	jza	port_structure_unprepared
00:002AD3 34002F              +204 	sabr	BSOCKET
  :                            205 						. 1: any sending address in the parameter
00:002AD4 CFF007              +206 	dl	addresses
00:002AD5 A80F8D              +207 	andB	(255*/16s)
00:002AD6 7C0AD8              +208 	jdz	connect_bound_source?
00:002AD7 B60AE1              +209 	j	connect_source_net
  :                            210 
  :                            211 						. 2: any sending address bound to the port
  :                            212 connect_bound_source?
00:002AD8 CFB000              +213 	dl	s:socket_address, y
00:002AD9 A80F8D              +214 	andB	(255*/16s)
00:002ADA 7C0ADC              +215 	jdz	connect_routed_source
00:002ADB B60AE1              +216 	j	connect_source_net
  :                            217 
  :                            218 
  :                            219 						. 3: the default interface address on the default
  :                            220 						.    route to the remote destination
  :                            221 connect_routed_source
00:002ADC 50F001              +222 	lx	default_ifp			. interface descriptor pointer
00:002ADD 50A002              +223 	lx	this_if:address_list
00:002ADE CFA003              +224 	dl	ifaddr:net
00:002ADF 2E0008              +225 	sbl	8				. pack it ready
00:002AE0 360008              +226 	dsl	8				. to catenate the port #
  :                            227 
  :                            228 connect_source_net
00:002AE1 480F8F              +229 	lk	(00FFFF)
00:002AE2 BFF008              +230 	mlb	addresses+1			. can't change the local socket port #
00:002AE3 C7F007              +231 	ds	addresses			. so splice it with the final from-network-address
  :                            232 
  :                            233 						. local_net:port:remote_net:port all present
00:002AE4 4FF007              +234 	ql	addresses
00:002AE5 3E06F2              +235 	lcal	tcp_check_connection		. outbound equivalent tcp_locate_connection
00:002AE6 700002              +236 	tz	x
00:002AE7 B60B1C              +237 	j	you_may_not			. the connection exists locally
  :                            238 
00:002AE8 3E0680              +239 	lcal	tcp_add_connection		. insert the connection between *y and y->next
00:002AE9 B60B1D              +240 	j	connect_reverse			. it didn't
  :                            241 
  :                            242 .	ly	connect_socketpointer+1		. the port socket is not based, and this isn't needed
  :                            243 .	ql	addresses			. mark this port to the outgoing connection
  :                            244 .	qs	s:socket_address, y		. additional outgoing connections
  :                            245 						. may replace the network and remote parts
  :                            246 
  :                            247 						. x -> new connection
00:002AEA 3E0937              +248 	lcal	tcp_restart_timer2
00:002AEB CFA00C              +249 	dl	transmission:sequence_ackx
00:002AEC C7A00A              +250 	ds	transmission:remote_ack_window
00:002AED 60F001              +251 	la	default_ifp
00:002AEE 60C004              +252 	la	this_if:mtu,a
00:002AEF C5FFD8              +253 	aa	-40,,xi
00:002AF0 20001A              +254 	sa	MSS
00:002AF1 20A002              +255 	sa	transmission:mss
  :                            256 
00:002AF2 4FF007              +257 	ql	addresses
00:002AF3 47A006              +258 	qs	transmission:socket_address
  :                            259 
  :                            260 connect_syn_tx
00:002AF4 FD0001              +261 	MIB_ICOUNT48	tcpActiveOpens:i	. ip send in (__tcp_connect)
(+01)0f
00:002AF5 2F0557              +261 
00:002AF6 5E0AF8              +261 
(+01)0f
00:002AF7 170556              +261 
  :                            262 						. switches back to application B1
00:002AF8 FF0FCF              +263 	call	(__tcp_connect)				
00:002AF9 B60AFB              +264 	j	connect_no_tx
00:002AFA B60B03              +265 	j	connect_syn_sent
  :                            266 
  :                            267 connect_no_tx					. ie send SYN never happened yet
00:002AFB 750041              +268 	ii	YIELD$
00:002AFC 1FF000              +269 	dec	send_syn_tries
00:002AFD 70F000              +270 	tz	send_syn_tries
00:002AFE B60AF4              +271 	j	connect_syn_tx
  :                            272 
00:002AFF 65000C              +273 	la	TCP_DELETETCB,,xi		. give up in possession of a
00:002B00 20A001              +274 	sa	transmission:state		. transmission control block
00:002B01 45FFDD              +275 	lr	-COULD_NOT,,xi			. let the state machine pool it
00:002B02 B60B1D              +276 	j	connect_reverse
  :                            277 
  :                            278 connect_syn_sent
00:002B03 650003              +279 	la	TCP_SYNSENT,,xi
00:002B04 20A001              +280 	sa	transmission:state
00:002B05 CF0FA9              +281 	dl	(1*/16d)
00:002B06 D7A00C              +282 	da	transmission:sequence_ackx
00:002B07 C7A00C              +283 	ds	transmission:sequence_ackx
  :                            284 
00:002B08 40F006              +285 	lr	addresses-1			. is fast_release in the call frame?
00:002B09 5CF00B              +286 	ly	fast_release,,i
00:002B0A FE0B0E              +287 	jyge	connect_review			. no
  :                            288 
00:002B0B 650000              +289 	la	0,,xi				. status so far so good
00:002B0C 78F00B              +290 	tp	fast_release
00:002B0D B60B2A              +291 	j	connect_return			. yes, leave it to the state machine
  :                            292 
  :                            293 connect_review
00:002B0E 750041              +294 	ii	YIELD$
00:002B0F 60A001              +295 	la	transmission:state
00:002B10 C5FFFD              +296 	aa	-TCP_SYNSENT,,xi
00:002B11 C60B0E              +297 	jza	connect_review
00:002B12 C5FFFE              +298 	aa	TCP_SYNSENT-TCP_ESTABLISHED,,xi
00:002B13 C60B2A              +299 	jza	connect_return
  :                            300 
00:002B14 FD0001              +301 	MIB_ICOUNT48	tcpAttemptFails:i
(+01)0f
00:002B15 2F055B              +301 
00:002B16 5E0B18              +301 
(+01)0f
00:002B17 17055A              +301 
00:002B18 45FFC3              +302 	lr	-REMOTE_REFUSED,,xi
00:002B19 B60B1D              +303 	j	connect_reverse			. let the state machine interpret
  :                            304 						. the state
  :                            305 . refinement needed
  :                            306 . only free the outward port here
  :                            307 . if it wasn't bound before the attempt at outward connection
  :                            308 . unless it's OK that companion connections on this port stop getting traffic
  :                            309 
  :                            310 port_structure_unprepared
00:002B1A 45FF9D              +311 	lr	-99,,xi	
00:002B1B B60B1D              +312 	j	connect_reverse
  :                            313 
  :                            314 you_may_not
00:002B1C 45FFC8              +315 	lr	-ALREADY_CONNECTED,,xi
  :                            316 
  :                            317 connect_reverse
00:002B1D 788FA6              +318 	tp	*(BSOCKET*/12++tlist:flags)
00:002B1E B60B2A              +319 	j	connect_return			. do not unbind a multiport
  :                            320 
00:002B1F 60F002              +321 	la	connect_socketpointer		. give up before or after getting a
00:002B20 34002F              +322 	sabr	BSOCKET				. transmission control block
00:002B21 58F003              +323 	ly	connect_socketpointer+1		. free the port
  :                            324 
00:002B22 160030              +325 	dsr	48
00:002B23 C70006              +326 	ds	6
00:002B24 47B000              +327 	qs	s:socket_address, y
00:002B25 600000              +328 	la	r				. retrieve result value
00:002B26 B60B2A              +329 	j	connect_return
  :                            330 
  :                            331 connect_no_path
00:002B27 65FFBF              +332 	la	-NO_PATH,,xi
00:002B28 B60B2A              +333 	j	connect_return
  :                            334 
  :                            335 connect_bad_argument
00:002B29 65FFEA              +336 	la	-BAD_ARGUMENT,,xi		. the argument might have been fine
  :                            337 						. but the kernel structure was not
  :                            338 						. give up without altering
  :                            339 connect_return
00:002B2A 750058              +340 	ii	B1$				. return to application B1 frame
  :                            341 
00:002B2B FCF004              +342 	$ret
00:002B2C 38000F              +342 
00:002B2D 3D0000              +342 
  :                            343 
  :                            344 .	vector name accept
  :                            345 
                                tcp_await_connection $head_far	 params(port_socket,	int)	;
00:002B2E FD0000              +347 				scalars(txarray_bank,	int)
  :                            348 
00:002B2F 60F004              +349 	la	port_socket
00:002B30 750055              +350 	ii	READ_SOCKET$
  :                            351 
00:002B31 480F8D              +352 	lk	(255*/16:s)
00:002B32 AF0F80              +353 	mta	(IPPROTO_TCP*/16)
00:002B33 B60B55              +354 	j	tcp_porthandle_wrong
00:002B34 75006D              +355 	ii	ON_NETB$
  :                            356 
00:002B35 C70006              +357 	ds	6
00:002B36 6D5E00              +358 	lb, xi	BSOCKET*/9	.	000 000 000 bbb bbb 000 000 000
00:002B37 160009              +359 	dsr	9		.	ppp ppp ppp 000 000 000 bbb bbb
00:002B38 4E000C              +360 	rbr	12		.	000 000 bbb bbb ppp ppp ppp 000
  :                            361 
00:002B39 600007              +362 	la	7
00:002B3A 34002F              +363 	sabr	BSOCKET
  :                            364 
00:002B3B 60D005              +365 	la	s:tcp:tbase
00:002B3C 34002F              +366 	sabr	BSOCKET
00:002B3D 20F000              +367 	sa	txarray_bank
  :                            368 
00:002B3E 500FA3              +369 	lx	(BSOCKET*/12++tlist:chain(1))
  :                            370 	
00:002B3F 600006              +371 	la	6
00:002B40 A00F8F              +372 	and	(00FFFF)
00:002B41 FF0FD0              +373 	call	(tcp_hash_localsocket)
00:002B42 800004              +374 	ax	a
  :                            375 
00:002B43 100007              +376 	sx	7
  :                            377 
00:002B44 600006              +378 	la	6
00:002B45 480F8F              +379 	lk	(00FFFF)
  :                            380 
  :                            381 tcp_search_new
00:002B46 50A000              +382 	lx	transmission:next
00:002B47 700002              +383 	tz	x
00:002B48 B60B4C              +384 	j	tcp_test_new
00:002B49 750041              +385 	ii	YIELD$
00:002B4A 500007              +386 	lx	7
  :                            387 
00:002B4B B60B46              +388 	j	tcp_search_new
  :                            389 	
  :                            390 tcp_test_new
00:002B4C AFA007              +391 	mta	transmission:socket_address+1
00:002B4D B60B46              +392 	j	tcp_search_new
  :                            393 
00:002B4E 68A001              +394 	lb	transmission:state
00:002B4F CDFFFC              +395 	ab, xi	-TCP_SYNRECEIVED
  :                            396 
00:002B50 DE0B46              +397 	jnzb	tcp_search_new
  :                            398 
00:002B51 FF0FD1              +399 	call	(xaccept)
  :                            400 
00:002B52 40F000              +401 	lr	txarray_bank
00:002B53 3E0B5B              +402 	lcal	tcp_newhandle
00:002B54 A60B56              +403 	jpa	tcp_awaitx
  :                            404 
  :                            405 tcp_porthandle_wrong
00:002B55 65FFFF              +406 	la, xi	-1
  :                            407 
  :                            408 tcp_awaitx
00:002B56 750070              +409 	ii	FREE_NETB$			. mask kernel buffers from application
00:002B57 75006F              +410 	ii	FREE_SOCKB$			. mask socket structures from application
00:002B58 FCF001              +411 	$ret
00:002B59 38000F              +411 
00:002B5A 3D0000              +411 
  :                            412 
  :                            413 tcp_newhandle
00:002B5B 600FD2              +414 	la	(TCP_TCB*/16:s)
00:002B5C 750050              +415 	ii	HANDLE$
00:002B5D E60B5F              +416 	jna	tcp_newhandle_x
00:002B5E 750056              +417 	ii	USOCKET$C			. complete the new handle encoding
  :                            418 
  :                            419 tcp_newhandle_x
00:002B5F 350000              +420 	lret	0
  :                            421 
  :                            422 .	socket close vector name __net_disengage
  :                            423 .	local name is within structure $sockif
  :                            424 	
  :                            425 net_disengage
  :                            426 	$head_far	 params(close_handle,	int)
  :                            427 
00:002B60 60F003              +428 	la	close_handle
00:002B61 750055              +429 	ii	READ_SOCKET$
  :                            430 
00:002B62 480F8C              +431 	lk	(256*/16s)
00:002B63 AF0FD2              +432 	mta	(TCP_TCB*/16s)
00:002B64 B60B6A              +433 	j	disengage_port?
  :                            434 
00:002B65 CE0B7A              +435 	jzb	disengage_handle
00:002B66 3E0B9D              +436 	lcal	sock_structure_connection
00:002B67 500005              +437 	lx	b
  :                            438 
  :                            439 	$if	1
00:002B68 0FA001              +440 	n	transmission:state
  :                            441 	$else
  :                            442 	la	DAYCLOCK$
  :                            443 	sa	transmission:timer(1)
  :                            444 	$endif
  :                            445 
00:002B69 B60B7A              +446 	j	disengage_handle
  :                            447 
  :                            448 disengage_port?
00:002B6A AF0F7F              +449 	mta	(IPPROTO_UDP*/16s)
00:002B6B B60B72              +450 	j	disengage_tcp_port?
  :                            451 
00:002B6C CE0B7A              +452 	jzb	disengage_handle
00:002B6D 3E0B98              +453 	lcal	sock_structure_port
00:002B6E 75006D              +454 	ii	ON_NETB$
00:002B6F FF0FD3              +455 	call	(__port_disengage_udp)
00:002B70 750070              +456 	ii	FREE_NETB$
00:002B71 B60B7A              +457 	j	disengage_handle
  :                            458 
  :                            459 disengage_tcp_port?
00:002B72 AF0F80              +460 	mta	(IPPROTO_TCP*/16s)
00:002B73 B60B7A              +461 	j	disengage_handle
  :                            462 
00:002B74 CE0B7A              +463 	jzb	disengage_handle
00:002B75 3E0B98              +464 	lcal	sock_structure_port
00:002B76 500005              +465 	lx	b
  :                            466 
00:002B77 78D004              +467 	tn	s:flags				. do not disengage a TCP multiport
00:002B78 B60B7A              +467 
00:002B79 FF0FD4              +468 	call	(__port_disengage)
  :                            469 
  :                            470 disengage_handle
00:002B7A 60F003              +471 	la	close_handle
00:002B7B 750051              +472 	ii	FREE_HANDLE$
00:002B7C 75006F              +473 	ii	FREE_SOCKB$
00:002B7D 3D0000              +474 	fret	0
  :                            475 
  :                            476 
  :                            477 .	vector name is __port_disengage_udp
  :                            478 .	local name is within structure $sockif
  :                            479 .	parameter is x -> socket structure
  :                            480 
  :                            481 port_disengage_udp				. for ports which have a buffer q
00:002B7E 5CD006              +482 	ly	s:udp:socket_inq,,i		. as UDP does
00:002B7F F80002              +483 	push	x				. drop user datagrams on receive q
00:002B80 3E0633              +484 	lcal	tcp_freerxq
00:002B81 380002              +485 	pop	x
  :                            486 
  :                            487 port_disengage					. vector name is __port_disengage
  :                            488 
00:002B82 160030              +489 	dsr	48				. for ports which have no buffer queue
00:002B83 C70006              +490 	ds	6				. as TCP does not
00:002B84 47D000              +491 	qs	s:socket_address		. that's the port no longer bound
  :                            492 	
  :                            493 port_disengage_z
00:002B85 3D0000              +494 	fret	0
  :                            495 
  :                            496 
  :                            497 .	end connection and fall thru to unbind port
  :                            498 .	vector name __disconnect_free_tcp
  :                            499 
  :                            500 disconnect_free
  :                            501 
  :                            502 	$if	1
00:002B86 0FA001              +503 	n	transmission:state		. don't loop on closing states
  :                            504 						. uncouple disconnect from port free / not free
  :                            505 	$else
  :                            506 
  :                            507 	la	DAYCLOCK$
  :                            508 	jnza	disconnect_free!
  :                            509 	la	1,,xi
  :                            510 disconnect_free!
  :                            511 	sa	transmission:timer(1)
  :                            512 
  :                            513 .	$endif
  :                            514 
  :                            515 disconnect_free?
  :                            516 	la	transmission:state
  :                            517 	aa	-TCP_LISTEN,,xi
  :                            518 	jza	free_tcp_port
  :                            519 	aa	TCP_LISTEN-TCP_CLOSED,,xi
  :                            520 	jza	free_tcp_port
  :                            521 	aa	TCP_CLOSED-TCP_DELETETCB,,xi
  :                            522 	jza	free_tcp_port
  :                            523 	ii	YIELD$
  :                            524 	j	disconnect_free?
  :                            525 
  :                            526 .	relinquish tcp port vector name __free_tcp_port
  :                            527 .	local name is within structure $sockif
  :                            528 .	parameter is a = port number
  :                            529 
  :                            530 	$endif
  :                            531 
  :                            532 free_tcp_port
00:002B87 60A007              +533 	la	transmission:socket_address+1
00:002B88 3E0B8F              +534 	lcal	app_tcp_port
00:002B89 C60B8E              +535 	jza	free_tcp_port_z
00:002B8A 30D000              +536 	z	0, b
00:002B8B 30D001              +537 	z	1, b
00:002B8C 30D002              +538 	z	2, b
00:002B8D 30D003              +539 	z	3, b
  :                            540 free_tcp_port_z
00:002B8E 3D0000              +541 	fret	0
  :                            542 					. application call to address TCP port structure
  :                            543 app_tcp_port				. unlike tcp_socket called in IP threads every rx segment
  :                            544 
  :                            545 	$if	1
00:002B8F 3E0927              +546 	lcal	tcp_socket
  :                            547 	$else
  :                            548 
  :                            549 	lb	BSOCKET*/9,,xi		. that is faster because it already has kernel vectors
  :                            550 	dsr	9			. app_tcp_port is called occasionally
  :                            551 	rbr	12
  :                            552 	and	127,,xi			. please only use 16 port number bits
  :                            553 	lx	tsockb(1),,xi
  :                            554 	ax	a
  :                            555 	ii	READ_XVECTOR$		. read kernel vector storage block index
  :                            556 
  :                            557 	$endif
  :                            558 
00:002B90 C60B92              +559 	jza	app_tcp_port_x		. if there is none don't base it
00:002B91 34002F              +560 	sabr	BSOCKET
  :                            561 app_tcp_port_x
00:002B92 350000              +562 	lret	0
  :                            563 
  :                            564 tcp_fin1
00:002B93 650006              +565 	la	TCP_FINWAIT1,,xi
00:002B94 20A001              +566 tcp_fin	sa	transmission:state
00:002B95 FF0FC8              +567 	call	(tcp_ack_fin)
  :                            568 
  :                            569 tcp_disconnect_z
00:002B96 3D0000              +570         fret    0
00:002B97 3D0000              +571 	fret	0				. successful return is here
  :                            572 
  :                            573 sock_structure_port
00:002B98 F80004              +574 	push	a				. save encoding 1st word
00:002B99 26000C              +575 	sal	12
00:002B9A 3E0B9F              +576 	lcal	sock_structure
00:002B9B 380004              +577 	pop	a				. hand back encoding 1st word
00:002B9C 350000              +578 	lret	0
  :                            579 
  :                            580 sock_structure_connection
00:002B9D 060003              +581 	sar	3
00:002B9E 26000F              +582 	sal	15
  :                            583 sock_structure
00:002B9F 95002F              +584 	or	BSOCKET,,xi
00:002BA0 46000C              +585 	rar	12
00:002BA1 560018              +586 	drr	24
00:002BA2 34002F              +587 	sabr	BSOCKET
00:002BA3 350000              +588 	lret	0
  :                            589 
  :                            590 tcp_port_socket		. vector name __tcp_socket far call get TCP port encoding
00:002BA4 3E0927              +591 	lcal	tcp_socket
00:002BA5 3D0000              +592 	fret	0
  :                            593 	
  :                            594 	$root
  :                            91: 	$include	rwsocket
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 . SOCKET_CALL_FLAGS $equ 27		. in pointers.def
  :                            41 RECORD_MARK	  $equ d$save1
  :                            42 RECORD_MARK_FLAG  $equ d$save
  :                            43 NON_BLOCKING	  $equ SOCKET_CALL_FLAGS
  :                            44 
  :                            45 REPACKED	$equ	1
  :                            46 
  :                            47 	$if	REPACKED
  :                            48 
  :                            49 resolve_socket
00:002BA6 750055              +50         ii      READ_SOCKET$
00:002BA7 C60BBC              +51 	jza	socket_protocol_wrong
00:002BA8 E60BBD              +52         jna     socket_unresolved
00:002BA9 480F8D              +53         lk      (255*/16:s)
00:002BAA AF0F7F              +54         mta     (IPPROTO_UDP*/16:s)
00:002BAB B60BB4              +55         j       socket_tcp?
00:002BAC A501FF              +56         and, xi 511
00:002BAD 260003              +57         sal     3
00:002BAE 500FA2              +58         lx      (BSOCKET*/12)
00:002BAF 800004              +59         ax      a
00:002BB0 600005              +60         la      b
00:002BB1 34002F              +61         sabr    BSOCKET
00:002BB2 600F7F              +62 	la	(IPPROTO_UDP*/16)
00:002BB3 350001              +63 	lret	1
  :                            64 
  :                            65 socket_tcp?
00:002BB4 AF0FD2              +66         mta     (TCP_TCB*/16)
00:002BB5 B60BBC              +67         j       socket_protocol_wrong	. don't confirm the handle as a known protocol
00:002BB6 A50FF8              +68         and, xi 0FF8
00:002BB7 500FA2              +69         lx      (BSOCKET*/12)
00:002BB8 800004              +70         ax      a
00:002BB9 600005              +71         la      b
00:002BBA 34002F              +72         sabr    BSOCKET
00:002BBB 600FD2              +73 	la	(TCP_TCB*/16)
  :                            74 socket_protocol_wrong
00:002BBC 350001              +75 	lret	1
  :                            76 
  :                            77 socket_unresolved
00:002BBD 350000              +78 	lret	0
  :                            79 
  :                            80 
  :                            81 .	you don't need to call here if you're a thread of ip
  :                            82 .       use the socket or connection queue heads to sense traffic
  :                            83 
  :                            84 .	the vector name of this is (data_sense)
  :                            85 
  :                            86 socket_sense	$head_far	 params(serx,	int	)
00:002BBE 60F003              +87 	la	serx
00:002BBF 3E0BA6              +88 	lcal	resolve_socket
00:002BC0 B60BCE              +89 	j	sense_socket_x
00:002BC1 AF0F7F              +90 	mta	(IPPROTO_UDP*/16)
00:002BC2 B60BC7              +91 	j	socket_sense_tcp?
  :                            92 
00:002BC3 60A006              +93 	la	s:udp:socket_inq:head, x
00:002BC4 C60BCE              +94 	jza	sense_socket_x
  :                            95 	
00:002BC5 60C003              +96 	la	descriptor:bytes, a
00:002BC6 B60BCE              +97 	j	sense_socket_x
  :                            98 
  :                            99 socket_sense_tcp?
00:002BC7 AF0FD2              +100 	mta	(TCP_TCB*/16)
00:002BC8 B60BCD              +101 	j	sense_socket_protocol_wrong
  :                            102 
00:002BC9 60A010              +103 	la	transmission:receiveq:head
00:002BCA C60BCE              +104 	jza	sense_socket_x
00:002BCB 60C003              +105 	la	descriptor:bytes, a
00:002BCC B60BCE              +106 	j	sense_socket_x
  :                            107 
  :                            108 sense_socket_protocol_wrong
00:002BCD 65FFEA              +109 	la	-22,,xi
  :                            110 
  :                            111 sense_socket_x
00:002BCE 75006F              +112 	ii	FREE_SOCKB$
00:002BCF 3D0000              +113 	$ret
  :                            114 	$endif
  :                            115 
  :                            116 
  :                            117 .	dont't call here if you're a thread of ip
  :                            118 .	you get locked off ip socket buffers on exit
  :                            119 .	call (tcp_rx) instead on inspecting queue heads
  :                            120 .	or sense and access UDP queue heads 
  :                            121 
  :                            122 .	the vector name of this is (recv)
  :                            123 
                                socket_receive	$head_far	 params(sorx,		int	;
                                					rxbuf,		int	;
                                					rxbytes,	int	;
                                					rxflags,	int)	;
                                								;
00:002BD0 8F0014              +129 				scalars(rstream_registers, float, RDATAC)
  :                            130 
00:002BD1 60F007              +131 	la	sorx
00:002BD2 75006D              +132 	ii	ON_NETB$
  :                            133 
  :                            134 	$if	REPACKED
00:002BD3 3E0BA6              +135 	lcal	resolve_socket
00:002BD4 B60BF0              +136 	j	receive_socket_x
00:002BD5 AF0F7F              +137 	mta	(IPPROTO_UDP*/16)
00:002BD6 B60BDF              +138 	j	socket_receive_tcp?
  :                            139 	$else
  :                            140 	ii	READ_SOCKET$
  :                            141 	jna	receive_socket_x
  :                            142 	lk	(255*/16:s)
  :                            143 	mta	(IPPROTO_UDP*/16)
  :                            144 	j	socket_receive_tcp?
  :                            145 	and, xi	511
  :                            146 	sal	3
  :                            147 	lx	(BSOCKET*/12)
  :                            148 	ax	a
  :                            149 	la	b
  :                            150 	sabr	BSOCKET
  :                            151 	$endif
  :                            152 
00:002BD7 60F008              +153 	la	rxbuf
00:002BD8 20000C              +154 	sa	p
00:002BD9 0D0010              +155 	off	b$stream16w
00:002BDA 300016              +156 	z	WDATAC
  :                            157 
00:002BDB CFF009              +158 	dl	rxbytes			. rxbytes:rxflags in param order
00:002BDC 28001B              +159 	sb	SOCKET_CALL_FLAGS
  :                            160 
00:002BDD 3E0DCB              +161 	lcal	udgram_read
00:002BDE B60BF0              +162 	j	receive_socket_x
  :                            163 
  :                            164 socket_receive_tcp?
00:002BDF AF0FD2              +165 	mta	(TCP_TCB*/16)
00:002BE0 B60BEF              +166 	j	receive_socket_protocol_wrong
  :                            167 
  :                            168 	$if	REPACKED=0
  :                            169 	and, xi	0FF8
  :                            170 	lx	(BSOCKET*/12)
  :                            171 	ax	a
  :                            172 	la	b
  :                            173 	sabr	BSOCKET
  :                            174 	$endif
  :                            175 
00:002BE1 60F008              +176 	la	rxbuf
00:002BE2 20000C              +177 	sa	p
  :                            178 .	off	b$stream16w		. those are done in tcp_read
  :                            179 .	z	WDATAC
  :                            180 
00:002BE3 CFF009              +181 	dl	rxbytes			. rxbytes:rxflags in param order
00:002BE4 AD0004              +182 	andB	MSG_NONBLOCK,,xi	. for TCP receive,
00:002BE5 28001B              +183 	sb	SOCKET_CALL_FLAGS	. NONBLOCK or no flags
  :                            184 
00:002BE6 68A001              +185 	lb	transmission:state
00:002BE7 CDFFFB              +186 	ab, xi	-TCP_ESTABLISHED
00:002BE8 CE0BED              +187 	jzb	socket_rx_established
  :                            188 
  :                            189 	$if	1
  :                            190 
00:002BE9 CD0003              +191 	ab	TCP_ESTABLISHED-TCP_LISTEN,,xi
  :                            192 					. all states except deassigned
  :                            193 					. can read queued input if it's there
  :                            194 					. change to _LISTEN when repooling
00:002BEA DE0BED              +195 	jnzb	socket_rx_readable	. connection block is otherwise never_LISTEN
  :                            196 
  :                            197 	$else
  :                            198 
  :                            199 	ab	TCP_ESTABLISHED-TCP_SYNSENT,,xi
  :                            200 	jzb	socket_rx_readable	. block or not is (tcp_rx)
  :                            201 	ab	TCP_SYNSENT-TCP_SYNRECEIVED,,xi
  :                            202 	jzb	socket_rx_readable	. block or not is (tcp_rx)
  :                            203 	ab	TCP_SYNRECEIVED-TCP_CLOSED,,xi
  :                            204 	jzb	socket_rx_stop_reading
  :                            205 	ab	TCP_CLOSED-TCP_DELETETCB,,xi
  :                            206 	jnzb	socket_rx_readable	. connection may be half-closed
  :                            207 					. while inward data is still queued
  :                            208 socket_rx_stop_reading			. otherwise return a hands-off status
  :                            209 
  :                            210 	$endif
  :                            211 
00:002BEB 65FFE0              +212 	la	-NO_CONNECTION,,xi
00:002BEC B60BF0              +213 	j	receive_socket_x
  :                            214 
  :                            215 socket_rx_readable
  :                            216 socket_rx_established
00:002BED FF0FD5              +217 	call	(tcp_rx)
  :                            218 					. return is unconditionally to here
  :                            219 					. return if you got anything
  :                            220 					. ie part of maximum or -status
  :                            221 					. if you're blocking and got nothing
  :                            222 					. you didn't get here either
00:002BEE B60BF0              +223 	j	receive_socket_x
  :                            224 
  :                            225 
  :                            226 	$if	0
  :                            227 socket_rx_waiting
  :                            228 socket_rx_not_established
  :                            229 	.	something like a remote close has happened
  :                            230 	.	or you tried to receive before it was established
  :                            231 
  :                            232 .	blocking arrives here until something happens
  :                            233 
  :                            234 	la	SOCKET_CALL_FLAGS	. blocking
  :                            235 	jza	receive_socket_x	. report no data
  :                            236 
  :                            237 	la, i	TCP_ESTABLISHED, b	. non_blocking
  :                            238 	xor, xi	-1			. ^state
  :                            239 
  :                            240 	j	receive_socket_x
  :                            241 	$endif
  :                            242 
  :                            243 receive_socket_protocol_wrong
00:002BEF 65FFEA              +244 	la, xi	-22			. more minus than a negative state
  :                            245 
  :                            246 receive_socket_x
  :                            247 .	USTREAM				. restore b$stream register defaults
00:002BF0 75006F              +248 	ii	FREE_SOCKB$
00:002BF1 750070              +249 	ii	FREE_NETB$
00:002BF2 870014              +250 	qpop	RDATAC
00:002BF3 3D0000              +251 	fret	0
  :                            252 
  :                            253 
  :                            254 .	dont't call here if you're a thread of ip
  :                            255 .	you get locked off ip socket buffers on exit
  :                            256 .	call (tcp_tx) instead
  :                            257 
  :                            258 .	vector name of this is (send)
  :                            259 
                                socket_send	$head_far	 params(sotx,		int		;
                                					txbuf,		int		;
                                					txbytes,	int		;
                                					txflags,	int	)	;
                                									;
00:002BF4 8F0014              +265 				scalars(wstream_registers, float, RDATAC)
  :                            266 
  :                            267 
00:002BF5 60F007              +268 	la	sotx
  :                            269 
00:002BF6 75006D              +270 	ii	ON_NETB$
  :                            271 
  :                            272 	$if	1
00:002BF7 3E0BA6              +273 	lcal	resolve_socket
00:002BF8 B60C2C              +274 	j	transmit_socket_x
00:002BF9 AF0F7F              +275 	mta	(IPPROTO_UDP*/16)
00:002BFA B60C22              +276 	j	socket_transmit_tcp?
  :                            277 
  :                            278 	$else
  :                            279 	ii	READ_SOCKET$
  :                            280 	jna	transmit_socket_x
  :                            281 	lk	(255*/16:s)
  :                            282 	mta	(IPPROTO_UDP*/16:s)
  :                            283 	j	socket_transmit_tcp?
  :                            284 	and, xi	511
  :                            285 	sal	3
  :                            286 	lx	(BSOCKET*/12)
  :                            287 	ax	a
  :                            288 	la	b
  :                            289 	sabr	BSOCKET
  :                            290 	$endif
  :                            291 
00:002BFB 60F008              +292 	la	txbuf
00:002BFC 20000D              +293 	sa	q
00:002BFD CFF009              +294 	dl	txbytes				. tbytes:txflags in param order
00:002BFE 28001B              +295 	sb	SOCKET_CALL_FLAGS
00:002BFF F80002              +296 	push	x
00:002C00 FF0F97              +297 	call	(udp_txbuffer)
00:002C01 380003              +298 	pop	y
00:002C02 C60C20              +299 	jza	socket_udp_fail5
00:002C03 500004              +300 	lx	a
00:002C04 4FB000              +301 	ql	0, y				. addresses from connected socket
00:002C05 F80005              +302 	push	b
00:002C06 58A004              +303 	ly	descriptor:dgram, x
00:002C07 160008              +304 	dsr	8
00:002C08 0E0008              +305 	sbr	8
00:002C09 C7B006              +306 	ds	dgram:ipsource, y
00:002C0A CF0006              +307 	dl	6
00:002C0B 160008              +308 	dsr	8
00:002C0C 0E0008              +309 	sbr	8
00:002C0D C7B008              +310 	ds	dgram:ipdest, y
00:002C0E 58A005              +311 	ly	descriptor:uproto, x
00:002C0F 380004              +312 	pop	a
00:002C10 680007              +313 	lb	7
00:002C11 360008              +314 	dsl	8
00:002C12 060008              +315 	sar	8
00:002C13 0E0008              +316 	sbr	8
00:002C14 C7B000              +317 	ds	uugram:sourcep, y
00:002C15 60F009              +318 	la	txbytes
00:002C16 20A003              +319 	sa	descriptor:bytes, x
00:002C17 58A006              +320 	ly	descriptor:apdata, x
00:002C18 3E0DDD              +321 	lcal	udgram_write
00:002C19 60001B              +322 	la	SOCKET_CALL_FLAGS
00:002C1A A00F9F              +323 	and	(UDP_NO_CHECKSUM:s)
00:002C1B C60C1E              +324 	jza	socket_call_udp_txaw
  :                            325 
00:002C1C FF0FA0              +326 	call	(udgram_acw_send_nocheck)
00:002C1D B60C2C              +327 	j	transmit_socket_x
  :                            328 
  :                            329 socket_call_udp_txaw
00:002C1E FF0FA1              +330 	call	(udp_acw_send)
00:002C1F B60C2C              +331 	j	transmit_socket_x
  :                            332 
  :                            333 socket_udp_fail5
00:002C20 65FFFB              +334 	la, xi	-5
00:002C21 B60C2C              +335 	j	transmit_socket_x
  :                            336 
  :                            337 socket_transmit_tcp?
00:002C22 AF0FD2              +338 	mta	(TCP_TCB*/16:s)
00:002C23 B60C2B              +339 	j	transmit_socket_protocol_wrong
  :                            340 
  :                            341         $if	REPACKED=0
  :                            342 
  :                            343 	and, xi	0FF8
  :                            344 	lx	(BSOCKET*/12)
  :                            345 	ax	a
  :                            346 	la	b
  :                            347 	sabr	BSOCKET
  :                            348 	$endif
  :                            349 
  :                            350 .	la	txbuf
  :                            351 .	sa	q
00:002C24 CFF009              +352 	dl	txbytes			. txbytes:txflags in param order
00:002C25 AD0FFF              +353 	andB	 0FFF,,xi
00:002C26 9D5010              +354 	orB, xi	05000++TCP_ACK
00:002C27 480005              +355 	lk	b
00:002C28 68F008              +356 	lb	txbuf
  :                            357 .	sb	SOCKET_CALL_FLAGS
00:002C29 FF0FD6              +358 	call	(tcp_tx)
00:002C2A B60C2C              +359 	j	transmit_socket_x
  :                            360 
  :                            361 transmit_socket_protocol_wrong
00:002C2B 55FFEA              +362 	lx	-22,,xi
  :                            363 
  :                            364 transmit_socket_x
  :                            365 .	USTREAM				. restore b$stream register defaults
00:002C2C 75006E              +366 	ii	FREE_DEVB$
00:002C2D 75006F              +367 	ii	FREE_SOCKB$
00:002C2E 750070              +368 	ii	FREE_NETB$
  :                            369 
00:002C2F 870014              +370 	qpop	RDATAC
  :                            371 
00:002C30 3D0000              +372 	fret	0
  :                            373 
  :                            374 .	SUBROUTINES AFTER HERE MUST NEVER REFERENCE INTERNAL STACK VARIABLES BEFORE HERE
  :                            375 
  :                            376 .	for write to socket buffer
  :                            377 .	16 bits at a time are read from user data
  :                            378 .	via the staging register
  :                            379 
  :                            380 .	PSR designator b$streamZR is on
  :                            381 .	b$stream16r gets cleared here
  :                            382 .	this is for 24-bit opaque data
  :                            383 .	
  :                            384 
  :                            385 .	in TCP only
  :                            386 .	the caller may write an odd number of bytes
  :                            387 .	into the transmit segment buffer, so there
  :                            388 .	may be a data word half written from the 
  :                            389 .	previous send call
  :                            390 
  :                            391 .	the pointer is apdata[word] + bytes[byte]
  :                            392 .	descriptor:bytes is updated
  :                            393 
  :                            394 .	the segment may be filled and queued, and
  :                            395 .	a new segment started
  :                            396 
  :                            397 .	on calling, the connection is in x
  :                            398 .	the caller may have a dynamic frame on FP
  :                            399 .	we save fp and use it as descriptor:
  :                            400 
  :                            401 .	the user data is in q:RDATA:RDATAC
  :                            402 .	the user byte count is in a
  :                            403 
  :                            404 
  :                            405 .	tcp_add far call vector name (tcp_tx)
  :                            406 .	x -> transmission control block
  :                            407 .	a =  bytes
  :                            408 .	q -> transmission buffer
  :                            409 
  :                            410: 	$include	tcp_add
  :                            1 tcp_add	$tree
  :                            2 
  :                            3 .	vector name tcp_tx
  :                            4 
00:002C31 28000D              +5 	sb	q
00:002C32 050040              +6 	on	b$streamZR	. read to cleared a register
00:002C33 0D0020              +7 	off	b$stream16r	. from 24-bit application-space data
00:002C34 300014              +8 	z	RDATAC		. discount residual data in RDATA
  :                            9 				. readout starts at data word q ->
00:002C35 3E0C3A              +10 	lcal	tcpa
00:002C36 3D0000              +11 	fret	0
  :                            12 
  :                            13 .	vector name tcp_addx
  :                            14 
00:002C37 28000D              +15 __x	sb	q
00:002C38 3E0C3A              +16 	lcal	tcpa		. as tcp_tx but without automatic PSR settings 
00:002C39 3D0000              +17 	fret	0		. caller to decide PSR flags and RDATAC initialisation
  :                            18 
  :                            19 
  :                            20 
                                tcpa	$head_near	scalars(caller_fp,	int,	fp	;
                                				socket_call_flags, int,	k	;
                                				mss,		int,	transmission:mss ;
                                				lookaside,	int		;
                                				outstanding,	int,	a	;
00:002C3A F8000E              +26 				requested,	int,	a	)
00:002C3B F80001              +26 
00:002C3C F8A002              +26 
00:002C3D FD0000              +26 
00:002C3E F80004              +26 
00:002C3F F80004              +26 
  :                            27 
00:002C40 688FAD              +28 	lb	*(BSOCKET*/12++tlist:connection_block(1):mss
00:002C41 788FA6              +29 	tp	*(BSOCKET*/12++tlist:flags)
00:002C42 28F003              +30 	sb	mss
  :                            31 
00:002C43 680001              +32 	lb	k
00:002C44 AD0FFF              +33 	andB	4095,,xi
00:002C45 9D5000              +34 	orB	05000,,xi
00:002C46 28F004              +35 	sb	socket_call_flags
  :                            36 
00:002C47 68F001              +37 add	lb	outstanding	. buffer request
00:002C48 48F004              +38 	lk	socket_call_flags
00:002C49 3E0CA2              +39 	lcal	buffer
00:002C4A B60C78              +40 	j	no_output	. nothing's available, get gone
  :                            41 
00:002C4B 20000E              +42 	sa	fp		. a -> buffer descriptor
00:002C4C 40E003              +43 	lr	descriptor:bytes
00:002C4D 60F001              +44 	la	outstanding	. outstanding data byte count in this request
  :                            45 
00:002C4E 700000              +46 	tz	r		. data already in segment buffer?
00:002C4F C60C6C              +47 	jza	push?		. there is waiting output but none new	
00:002C50 C60C78              +48 	jza	no_output	. there is no new output
  :                            49 				. there is new output to add
00:002C51 68F003              +50 	lb	mss
00:002C52 D80000              +51 	anb	r		. available
00:002C53 20F002              +52 	sa	lookaside	. reserve the outstanding
00:002C54 D00005              +53 	ana	b
00:002C55 20F001              +54 	sa	outstanding	.
00:002C56 600005              +55 	la	b		. suggest the transfer shall be available writespace
00:002C57 7E0C59              +56 	jc	transfer	. request = or >  write space
00:002C58 60F002              +57 	la	lookaside	. request < write space
  :                            58 
  :                            59 transfer
00:002C59 680000              +60 	lb	r		. update segment bytes total
00:002C5A C80004              +61 	ab	a
00:002C5B 28E003              +62 	sb	descriptor:bytes
  :                            63 
00:002C5C 68E005              +64 	lb	descriptor:uproto
00:002C5D 280011              +65 	sb	TP_HEADER
00:002C5E DE0C60              +66 	jnzb	$+2
00:002C5F 75005F              +67 	ii	GUARD$
  :                            68 
00:002C60 58E006              +69 	ly	descriptor:apdata
00:002C61 180010              +70 	sy	AP_DATA
  :                            71 
00:002C62 0D0001              +72 	off	carry$
00:002C63 370000              +73 	src	r		. halve the byte count up before now, carry = remainder
00:002C64 880000              +74 	ay	r		. address in buffer for next complete data word
  :                            75 
00:002C65 68D008              +76 	lb	transfer:checksum, b
00:002C66 5E0C69              +77 	jnc	add_words
00:002C67 3E0C9A              +78 	lcal	insert_byte	. previous accumulation is an odd number of bytes
00:002C68 C5FFFF              +79 	aa	-1,,xi		. obtain the next byte and add to checksum in b
  :                            80 				. down the outstanding byte count for this transfer
  :                            81 add_words
00:002C69 3E0CE0              +82 	lcal	w2buffer	. target address in y
  :                            83 				. byte count passed to w2buffer in a
  :                            84 				. checksum returned in a
  :                            85 				. input stream in q / RDATA / RDATAC
  :                            86 
00:002C6A 680011              +87 	lb	TP_HEADER
00:002C6B 20D008              +88 	sa	transfer:checksum, b
  :                            89 
00:002C6C 60F004              +90 push?	la	socket_call_flags
00:002C6D 680004              +91 	lb	a
00:002C6E A50008              +92 	and	TCP_PSH,,xi
00:002C6F D60C72              +93 	jnza	release		. send it
  :                            94 
00:002C70 78F001              +95 	tp	outstanding	
00:002C71 B60C79              +96 	j	add_x				. there is space for the next send
  :                            97 
00:002C72 3E0C7F              +98 release	lcal	segment_transmit
  :                            99 
  :                            100 	$if	0
  :                            101 	tz	transmission:q4window
  :                            102 	lcal	tcp_send_on_window
  :                            103 	$endif	
  :                            104 
00:002C73 68F001              +105 	lb	outstanding
00:002C74 EE0C79              +106 	jnb	add_x				. everything is sent
00:002C75 CE0C79              +107 	jzb	add_x
  :                            108 
00:002C76 750041              +109 	ii	YIELD$				. let TCP and IP optimise the buffer pools
  :                            110 
00:002C77 B60C47              +111 	j	add
  :                            112 
  :                            113 no_output
00:002C78 20F000              +114 	sa	requested			. return a minus error code
  :                            115 .	sa	outstanding			. or zero for non-error void write
  :                            116 
00:002C79 870004              +117 add_x	qpop	a				. requested:finalcount:lookaside:mss -> a:b:6:7
00:002C7A 380001              +118 	pop	k
00:002C7B 38000E              +119 	pop	fp
  :                            120 
00:002C7C EE0C7E              +121 	jnb	add_z				. unless final count < 0
00:002C7D D00005              +122 	ana	b				. result = requested - final count
  :                            123 
00:002C7E 350000              +124 add_z	lret	0
  :                            125 
  :                            126 segment_transmit				. this is out of line because it plays stack
00:002C7F 8F0002              +127 	qpush	x				. connection.write_pointer.TCP_PSH.outstanding count 0+
  :                            128 						. b contains final call flags
00:002C80 500011              +129 	lx	TP_HEADER
00:002C81 480FD7              +130 	lk	(TCP_HL)
00:002C82 BFA006              +131 	mlb	transfer:hl_code, x		. insert the header length originally bespoke	
00:002C83 28A006              +132 	sb	transfer:hl_code, x
  :                            133 
00:002C84 AD0FFF              +134 	andB,xi	TCP_FLAGS			. add header flags to the checksum
00:002C85 C8A008              +135 	ab	transfer:checksum, x
00:002C86 50F000              +136 	lx	0, sp				. connection
  :                            137 
00:002C87 400005              +138 	lr	b				. lodge checksum in r
  :                            139 
00:002C88 680010              +140 	lb	AP_DATA				. find the header length
00:002C89 D80011              +141 	anb	TP_HEADER			. again
00:002C8A 2E0001              +142 	sbl	1				. in bytes
00:002C8B F8E003              +143 	push	descriptor:bytes		. calculate the total segment
00:002C8C C8F000              +144 	ab	0, sp				. length, save payload length
00:002C8D 600011              +145 	la	TP_HEADER			. save segment total for checksum
00:002C8E F80005              +146 	push	b				. for the checksum
00:002C8F 980F9E              +147 	orB	(0800000:s)			. and for the 
00:002C90 28E003              +148 	sb	descriptor:bytes		. descriptor fp ->
  :                            149 
00:002C91 2F0000              +150 	popA	r				. add segment total to checksum
00:002C92 00C008              +151 	sr	transfer:checksum, a
  :                            152 
00:002C93 380005              +153 	pop	b				. retrieve the payload length
00:002C94 650000              +154 	la, xi	0
00:002C95 360010              +155 	dsl	16
00:002C96 D7A00C              +156 	da	transmission:sequence_ackx	. update the sequence state
00:002C97 C7A00C              +157 	ds	transmission:sequence_ackx	. variable of the connection
  :                            158 	
00:002C98 870002              +159 	qpop	x				. retrieve	x = connection
  :                            160 						.		y = segment buffer write position
  :                            161 						.		a = descriptor
  :                            162 						.		b = hl_flags
00:002C99 350000              +163 	lret	0
  :                            164 
  :                            165 insert_byte					. this is out of line because it plays stack
00:002C9A F80004              +166 	push	a
  :                            167 
00:002C9B 150008              +168 	rsr	8				. obtain 1 byte application data
00:002C9C C80004              +169 	ab	a				. it won't carry
00:002C9D 90B000              +170 	or	0, y				. 1st byte this word, already checksummed
00:002C9E 20B000              +171 	sa	0, y
00:002C9F 8D0001              +172 	ay	1,,xi				. write and increment pointer
  :                            173 
00:002CA0 380004              +174 	pop	a
00:002CA1 350000              +175 	lret	0
  :                            176 
  :                            177 
  :                            178 .	(tcp_tx)->tcp_add calls here. This routine blocks until a buffer is obtained
  :                            179 .	or the connection is not longer [ TCP_ESTABLISHED / TCP_CLOSEWAIT ]
  :                            180 
  :                            181 .	for this reason the caller can never be ip initial thread
  :                            182 .	because that runs TCP state machine which frees segment buffers on TCP_ACK
  :                            183 
  :                            184 .	ip initial thread gets small buffers for [ TCP_ACK TCP_SYN_ACK TCP_FIN TCP_RST ]
  :                            185 .	from routines [ tcp_txbuffer txp_txbufferx ]
  :                            186 .	which return no-buffer in preference to blocking
  :                            187 
  :                            188 .	oustanding transmission count is in b
  :                            189 
  :                            190 
  :                            191 buffer
  :                            192 	$if	0
  :                            193 	inA	65
  :                            194 	aa	-11,,xi
  :                            195 	jpa	$+2
  :                            196 	ii	GUARD$			. you are ip main thread and may not call here
  :                            197 	$endif
  :                            198 
00:002CA2 60A014              +199 	la	transmission:q4window:head
00:002CA3 C60CA9              +200 	jza	new_segment
00:002CA4 60A015              +201 	la	transmission:q4window:tail
00:002CA5 40C003              +202 	lr	descriptor:bytes, a
00:002CA6 780000              +203 	tn	r			. is 800000 (do not delete or change) on?	
00:002CA7 B60CA9              +203 
00:002CA8 350001              +204 	lret	1			. no, segment may be incremented
  :                            205 					. yes, segment is sealed for transmission
  :                            206 					. so fall thru here to start a new segment
  :                            207 new_segment
  :                            208 
00:002CA9 CE0CD9              +209 	jzb	drop_request_zero	. nothing + nothing = do nothing
  :                            210 					. even with push flag. Status zero - zero
00:002CAA F80005              +211 	push	b			. requested bytes, figure may need refreshing 
  :                            212 
  :                            213 
00:002CAB 60A001              +214 request	la	transmission:state	. check connection state before requesting buffer,
00:002CAC C5FFFB              +215 	aa	-TCP_ESTABLISHED,,xi	. every time and every retry.
00:002CAD C60CB0              +216 	jza	new_segment_request	. buffers can otherwise remain locked for many minutes
00:002CAE C5FFFD              +217 	aa	TCP_ESTABLISHED-TCP_CLOSEWAIT,,xi
00:002CAF D60CD2              +218 	jnza	drop_request_closed
  :                            219 
  :                            220 new_segment_request
00:002CB0 40A002              +221 	lr	transmission:mss
  :                            222 
  :                            223 	$if	HVSOCKET		. segment space assigned independent of mss
00:002CB1 788FC7              +224 	tp	*(+(BSOCKET*/18++tlist:flags)s)
00:002CB2 408FD8              +225 	lr	*(+(BSOCKET*/18++tlist:connection_block(1):mss)s)
  :                            226 	$endif				. size cached in contentrator table
  :                            227 
00:002CB3 600001              +228 	la	k
00:002CB4 A50008              +229 	and	TCP_PSH,,xi
00:002CB5 C60CB7              +230 	jza	request_maximum_segment_buffer
  :                            231 
00:002CB6 400005              +232 	lr	b			. TCP_PSH so only request a buffer the send() length
  :                            233 					. TCP / IP / LLH add all their own headings
  :                            234 request_maximum_segment_buffer
  :                            235 
  :                            236 	$if	1
00:002CB7 600001              +237 	la	k			. should get a pattern like 5018.4500 or 5010.4500
00:002CB8 A00FD7              +238 	and	(TCP_HL)		. but flags are stuck back on : on transmission
00:002CB9 6D4500              +239 	lb	04500,,xi		. and thenabouts checksummed
00:002CBA 3E0851              +240 	lcal	tcp_startbuffer
00:002CBB B60CC4              +241 	j	no_segment
  :                            242 	$else
  :                            243 	and	TCP_HL,,xi		. isolate header length. Keep flags from checksum
  :                            244 	lcal	tcp_shield_buffer
  :                            245 	j	no_segment
  :                            246 	$endif
  :                            247 
00:002CBC 30C003              +248 	z	descriptor:bytes, a	. before the buffer is on the queue
00:002CBD 3E08D7              +249 	lcal	tcp_write_txq
00:002CBE 450000              +250 	lr	0,,xi
00:002CBF 580011              +251 	ly	TP_HEADER		. pointer set by shield_buffer
00:002CC0 680006              +252 	lb	6			. 2-word checksum from shield_buffer
00:002CC1 C80007              +253 	ab	7			. compress
00:002CC2 28B008              +254 	sb	 transfer:checksum, y
00:002CC3 B60CD0              +255 	j	segment
  :                            256 
  :                            257 no_segment
00:002CC4 9F001A              +258 	dpush	MSS			. shield registers [ 26 27 ]
  :                            259 .	dpush	x
  :                            260 
00:002CC5 CF0FD9              +261 	dl	(10d)			. don't call tcp_add from IP main thread
  :                            262 
  :                            263 	$if	0
  :                            264 	ii	KERNEL$B1_1		. call from application needs IP B1 frame
  :                            265 	MIB_ICOUNT48	tcpAddWait:i
  :                            266 	ii	B1$			. back to application B1 frame
  :                            267 	$endif
  :                            268 
00:002CC6 75005B              +269 	ii	TWAIT$
  :                            270 
00:002CC7 FD0001              +271 	c	(tx_mib_update)	tcpAddWait:i,,xi	1,,xi
(+01)10
00:002CC8 FD0568              +271 
00:002CC9 FCF002              +271 
00:002CCA FF0FDB              +271 
00:002CCB 38000F              +271 
  :                            272 
  :                            273 .	dpop	x
00:002CCC 38001A              +274 	dpop	MSS			. recover mss & call flags
00:002CCD 38001B              +274 
00:002CCE 68F000              +275 	lb	0, sp			. recover request # bytes for next attempt
00:002CCF B60CAB              +276 	j	request
  :                            277 
00:002CD0 17000F              +278 segment inc	sp			. request # bytes was cached on stack top
00:002CD1 350001              +279 	lret	1			. = buffer obtained
  :                            280 
  :                            281 
  :                            282 drop_request_closed
  :                            283 	$if	1
00:002CD2 FD0001              +284 	c	(tx_mib_update)	tcpAddRelinquish:i,,xi	1,,xi
(+01)10
00:002CD3 FD056A              +284 
00:002CD4 FCF002              +284 
00:002CD5 FF0FDB              +284 
00:002CD6 38000F              +284 
  :                            285 	$else
  :                            286 	ii	KERNEL$B1_1		. call from application needs IP B1 frame
  :                            287 	MIB_ICOUNT48	tcpAddRelinquish:i
  :                            288 	ii	B1$			. back to application B1 frame
  :                            289 	$endif
  :                            290 
00:002CD7 65FFE0              +291 	la	-FILE_NOT_OPEN,,xi
  :                            292 
00:002CD8 17000F              +293 	inc	sp			. request # bytes was cached on stack top
  :                            294 
  :                            295 drop_request_zero
00:002CD9 350000              +296 	lret	0
  :                            297 
  :                            298 	$root
  :                            299 
  :                            411 
  :                            412 tcp_shield_buffer
  :                            413 .	dpush	MSS
  :                            414 
00:002CDA 6D4500              +415 	lb	04500,,xi
00:002CDB 3E0851              +416 	lcal	tcp_startbuffer
00:002CDC 000000              +417 	sr	0
  :                            418 .	pop	MSS
  :                            419 .	pop	SOCKET_CALL_FLAGS
00:002CDD C60CDF              +420 	jza	tcp_nobuffer_shield
00:002CDE 350001              +421 	lret	1
  :                            422 tcp_nobuffer_shield
00:002CDF 350000              +423 	lret	0
  :                            424 
  :                            425 sendbytepair* $proc
  :                            426 	rsr	16
  :                            427 	sa	?-1, y
  :                            428 	ab	a
  :                            429 	$end
  :                            430 
  :                            431 w2buffer
00:002CE0 F80004              +432 	push	a
00:002CE1 060005              +433 	sar	5
00:002CE2 400004              +434 	lr	a
00:002CE3 B60D19              +435 	j	send32bytes?
  :                            436 send32bytes!
00:002CE4 150010              +437 ?	$do	16,	sendbytepair
00:002CE5 20B000              +437 
00:002CE6 C80004              +437 
00:002CE7 150010              +437 
00:002CE8 20B001              +437 
00:002CE9 C80004              +437 
00:002CEA 150010              +437 
00:002CEB 20B002              +437 
00:002CEC C80004              +437 
00:002CED 150010              +437 
00:002CEE 20B003              +437 
00:002CEF C80004              +437 
00:002CF0 150010              +437 
00:002CF1 20B004              +437 
00:002CF2 C80004              +437 
00:002CF3 150010              +437 
00:002CF4 20B005              +437 
00:002CF5 C80004              +437 
00:002CF6 150010              +437 
00:002CF7 20B006              +437 
00:002CF8 C80004              +437 
00:002CF9 150010              +437 
00:002CFA 20B007              +437 
00:002CFB C80004              +437 
00:002CFC 150010              +437 
00:002CFD 20B008              +437 
00:002CFE C80004              +437 
00:002CFF 150010              +437 
00:002D00 20B009              +437 
00:002D01 C80004              +437 
00:002D02 150010              +437 
00:002D03 20B00A              +437 
00:002D04 C80004              +437 
00:002D05 150010              +437 
00:002D06 20B00B              +437 
00:002D07 C80004              +437 
00:002D08 150010              +437 
00:002D09 20B00C              +437 
00:002D0A C80004              +437 
00:002D0B 150010              +437 
00:002D0C 20B00D              +437 
00:002D0D C80004              +437 
00:002D0E 150010              +437 
00:002D0F 20B00E              +437 
00:002D10 C80004              +437 
00:002D11 150010              +437 
00:002D12 20B00F              +437 
00:002D13 C80004              +437 
00:002D14 600005              +438 	la	b
00:002D15 160010              +439 	dsr	16
00:002D16 0E0008              +440 	sbr	8
00:002D17 C80004              +441 	ab	a
00:002D18 8D0010              +442 	ay, xi	16
  :                            443 send32bytes?
00:002D19 1E0CE4              +444 	jdr	send32bytes!
  :                            445 
00:002D1A 60F000              +446 	la	0, sp
00:002D1B A5001F              +447 	and, xi	31
00:002D1C 060001              +448 	sar	1
00:002D1D 400004              +449 	lr	a
00:002D1E B60D23              +450 	j	send2bytes?
  :                            451 send2bytes!
00:002D1F 150010              +452 ?	$do	1,	sendbytepair
00:002D20 20B000              +452 
00:002D21 C80004              +452 
00:002D22 8D0001              +453 	ay, xi	1
  :                            454 send2bytes?
00:002D23 1E0D1F              +455 	jdr	send2bytes!
  :                            456 
00:002D24 380004              +457 	pop	a
00:002D25 9E0D28              +458 	jao	send1byte
00:002D26 600005              +459 	la	b
00:002D27 350000              +460 	lret	0
  :                            461 
  :                            462 send1byte
00:002D28 150008              +463 	rsr	8
00:002D29 260008              +464 	sal	8
00:002D2A 20B000              +465 	sa	0, y
00:002D2B C00005              +466 	aa	b
00:002D2C 350000              +467 	lret	0
  :                            468 
  :                            469 
  :                            470 rbufferq* $proc
  :                            471 	dl	?*2-2, y
  :                            472 	dsl	8
  :                            473 	wsr	16
  :                            474 	la	b
  :                            475 	wsr	16
  :                            476 	$end
  :                            477 
00:002D2D F80004              +478 rbuffer	push	a
00:002D2E 060005              +479 	sar	5
00:002D2F 400004              +480 	lr	a
00:002D30 B60D5A              +481 	j	rbuffer32?
  :                            482 
  :                            483 rbuffer32!
00:002D31 CFB000              +484 ?	$do	8,	rbufferq
00:002D32 360008              +484 
00:002D33 1D0010              +484 
00:002D34 600005              +484 
00:002D35 1D0010              +484 
00:002D36 CFB002              +484 
00:002D37 360008              +484 
00:002D38 1D0010              +484 
00:002D39 600005              +484 
00:002D3A 1D0010              +484 
00:002D3B CFB004              +484 
00:002D3C 360008              +484 
00:002D3D 1D0010              +484 
00:002D3E 600005              +484 
00:002D3F 1D0010              +484 
00:002D40 CFB006              +484 
00:002D41 360008              +484 
00:002D42 1D0010              +484 
00:002D43 600005              +484 
00:002D44 1D0010              +484 
00:002D45 CFB008              +484 
00:002D46 360008              +484 
00:002D47 1D0010              +484 
00:002D48 600005              +484 
00:002D49 1D0010              +484 
00:002D4A CFB00A              +484 
00:002D4B 360008              +484 
00:002D4C 1D0010              +484 
00:002D4D 600005              +484 
00:002D4E 1D0010              +484 
00:002D4F CFB00C              +484 
00:002D50 360008              +484 
00:002D51 1D0010              +484 
00:002D52 600005              +484 
00:002D53 1D0010              +484 
00:002D54 CFB00E              +484 
00:002D55 360008              +484 
00:002D56 1D0010              +484 
00:002D57 600005              +484 
00:002D58 1D0010              +484 
00:002D59 8D0010              +485 	ay, xi	16
  :                            486 rbuffer32?
00:002D5A 1E0D31              +487 	jdr	rbuffer32!
  :                            488 
00:002D5B 60F000              +489 	la	0, sp
00:002D5C A5001F              +490 	and, xi	31
00:002D5D 060001              +491 	sar	1
00:002D5E 400004              +492 	lr	a
00:002D5F B60D64              +493 	j	rbuffer2?
  :                            494 
  :                            495 rbuffer2!
00:002D60 60B000              +496 	la	0, y
00:002D61 260008              +497 	sal	8
00:002D62 1D0010              +498 	wsr	16
00:002D63 8D0001              +499 	ay, xi	1
  :                            500 rbuffer2?
00:002D64 1E0D60              +501 	jdr	rbuffer2!
  :                            502 
00:002D65 380004              +503 	pop	a
00:002D66 9E0D68              +504 	jao	rbuffer1
00:002D67 350000              +505 	lret	0
  :                            506 
  :                            507 rbuffer1
00:002D68 60B000              +508 	la	0, y
00:002D69 260008              +509 	sal	8
00:002D6A 1D0008              +510 	wsr	8
00:002D6B 350000              +511 	lret	0
  :                            512 
  :                            513 
  :                            514 tcp_rbuffer
00:002D6C F80004              +515 	push	a			. push the total sought
00:002D6D 680004              +516 	lb	a			. initialise an outstanding final count
  :                            517 tcp_rbuffer_next
00:002D6E 60A010              +518 	la	transmission:receiveq:head
00:002D6F 20000E              +519 	sa	fp
00:002D70 C60D94              +520 	jza	tcp_rbuffer_x
00:002D71 CE0D94              +521 	jzb	tcp_rbuffer_x
  :                            522 
  :                            523 .	push	b			. # bytes sought again
  :                            524 
00:002D72 60E003              +525 	la	descriptor:bytes	. read byte cound this buffer
00:002D73 40E007              +526 	lr	descriptor:readpoint	. and delivered count / pointer
  :                            527 
00:002D74 D00000              +528 	ana	r			. difference is bytes not yet delivered
00:002D75 C60D8C              +529 	jza	tcp_rbuffer_free	. to the caller
  :                            530 
00:002D76 F80005              +531 	push	b			. bytes outstanding short term on the stack top
00:002D77 D80004              +532 	anb	a			. bytes outstanding minus bytes available
  :                            533 
00:002D78 7E0D7A              +534 	jc	tcp_readtransfer	. transfer is bytes available
  :                            535 					. bytes oustanding < bytes available
  :                            536 
00:002D79 60F000              +537 	la	0, sp			. transfer is outstanding count
  :                            538 
  :                            539 
  :                            540 tcp_readtransfer
00:002D7A 20F000              +541 	sa	0, sp
00:002D7B 2FE007              +542 	popA	descriptor:readpoint
  :                            543 					. so far it reads sp -> #requested | return address
00:002D7C F80005              +544 	push	b			. sp -> #requested - transfer | #requested | return address
  :                            545 
00:002D7D 7E0D91              +546 	jc	tcp_read_disaster	. if updating the octet read pointer carried
  :                            547 					. something is really wrong
00:002D7E 370000              +548 	src	r			. octet read counter -> byte pair offset, carry = odd byte 
00:002D7F 58E006              +549 	ly	descriptor:apdata
00:002D80 880000              +550 	ay	r			. this instruction does not sense or change carry
  :                            551 
00:002D81 5E0D89              +552 	jnc	tcp_read_words
  :                            553 
00:002D82 F80004              +554 	push	a			. carry = 1 = last read left a byte in leading word
00:002D83 60B000              +555 	la	0, y			. read that word
00:002D84 8D0001              +556 	ay, xi	1			. and point beyond it
00:002D85 260010              +557 	sal	16			. write to receive buffer
00:002D86 1D0008              +558 	wsr	8
00:002D87 1FF000              +559 	dec	0, sp			. decrement final count on the stack
00:002D88 380004              +560 	pop	a
  :                            561 
  :                            562 tcp_read_words
00:002D89 3E0D2D              +563 	lcal	rbuffer
  :                            564 
00:002D8A 380005              +565 	pop	b			. sp -> #requested | return address
00:002D8B EE0D94              +566 	jnb	tcp_rbuffer_x		. outstanding minus available < 0 = leave
  :                            567 .	jzb	tcp_rbuffer_x
  :                            568 
  :                            569 tcp_rbuffer_free			. buffer all delivered
00:002D8C F80005              +570 	push	b			. outstanding count
00:002D8D 3E08CD              +571 	lcal	tcp_read_rxq		. that's the delivered buffer: take it from the queue
  :                            572 
00:002D8E 3E00DB              +573 	lcal	net_free		. pool it
  :                            574 
00:002D8F 380005              +575 	pop	b			. retrieve the outstanding count
00:002D90 B60D6E              +576 	j	tcp_rbuffer_next
  :                            577 
  :                            578 tcp_read_disaster
00:002D91 30F000              +579 	z	0, sp			. this should deliver -100
00:002D92 6D0064              +580 	lb	100,,xi
00:002D93 B60DA0              +581 	j	tcp_rbuffer_complete
  :                            582 
  :                            583 tcp_rbuffer_x
00:002D94 EE0DA0              +584 	jnb	tcp_rbuffer_complete	. maximum bytes read
00:002D95 CE0DA0              +585 	jzb	tcp_rbuffer_complete
  :                            586 
00:002D96 70001B              +587 	tz	NON_BLOCKING
00:002D97 B60DA0              +588 	j	tcp_rbuffer_complete
  :                            589 
00:002D98 60F000              +590 	la	0, sp			. only block if no data is received already
00:002D99 D00005              +591 	ana	b
00:002D9A D60DA0              +592 	jnza	tcp_rbuffer_complete
  :                            593 	
00:002D9B 750041              +594 	ii	YIELD$
00:002D9C 60A001              +595 	la	transmission:state
00:002D9D C5FFFE              +596 	aa	-TCP_LISTEN,,xi
00:002D9E D60D6E              +597 	jnza	tcp_rbuffer_next	. file closed
00:002D9F 6D0020              +598 	lb	NO_CONNECTION,,xi	. this gets turned into -NO_CONNECTION
  :                            599 					. fall athru
  :                            600 tcp_rbuffer_complete
00:002DA0 650000              +601 	la	0,,xi			. store any 1 or 2 bytes waiting in WDATA
00:002DA1 1D0010              +602 	wsr	16
00:002DA2 380004              +603 	pop	a			. original request count
  :                            604 					. we need to check somewhere if the
  :                            605 					. connnection has been lost
00:002DA3 EE0DA5              +606 	jnb	$+2
00:002DA4 D00005              +607 	ana	b			. result is request minus oustanding count
00:002DA5 350000              +608 	lret	0			. giving bytes received
  :                            609 
  :                            610 
  :                            611 .	tcp_read far call vector name is (tcp_rx)
  :                            612 .	x -> transmission control block
  :                            613 .	a =  bytes
  :                            614 .	p -> receive buffer
  :                            615 
  :                            616 tcp_read
00:002DA6 0D0010              +617 	off	b$stream16w	. target store 3 octets / word
00:002DA7 300016              +618 	z	WDATAC		. starting on a word edge
  :                            619 
00:002DA8 F8000E              +620 	push	fp
00:002DA9 3E0D6C              +621 	lcal	tcp_rbuffer
00:002DAA C60DAD              +622 	jza	tcp_rbuffer_z	. because you read nothing
00:002DAB 700016              +623 	tz	WDATAC
00:002DAC 3E0DAF              +624 	lcal	tcp_rbuffer_y	. write the staging register through
  :                            625 tcp_rbuffer_z
00:002DAD 38000E              +626 	pop	fp
00:002DAE 3D0000              +627 	fret	0		. end (tcp_rx)
  :                            628 
  :                            629 tcp_rbuffer_y
  :                            630 udp_rbuffer_y
00:002DAF F80004              +631 	push	a
00:002DB0 60800C              +632 	la	*p
00:002DB1 680017              +633 	lb	WDATA
00:002DB2 268016              +634 	sal	*WDATAC
00:002DB3 568016              +635 	drr	*WDATAC
00:002DB4 20800C              +636 	sa	*p
00:002DB5 380004              +637 	pop	a
00:002DB6 350000              +638 	lret	0
  :                            639 
  :                            640 XDR_TCP_INLINE $set 0
  :                            641 	$if	XDR_TCP_INLINE
  :                            642 	$flag	untested and better off somewhere else
  :                            643 
  :                            644 .	there is no detailed guidance from IETF, SUN or anywhere else
  :                            645 .	whether marked record fragments can split fields up
  :                            646 
  :                            647 .	Apple's NFS / TCP is written as if that was possible, so this
  :                            648 .	is also written as if a new record mark could start in the
  :                            649 .	middle of an opaque or number field
  :                            650 
  :                            651 .	these XDR calls will only work on a blocking connection
  :                            652 .	so the socket owner may not be the IP stack itself for these
  :                            653 
  :                            654 
  :                            655 
  :                            656 tcp_rbuffer_marked
  :                            657 	lb	RECORD_MARK
  :                            658 	jzb	tcp_read_record_mark
  :                            659 	anb	a
  :                            660 	push,xi	0
  :                            661 	jc	tcp_rbuffer_record
  :                            662 	ana	RECORD_MARK
  :                            663 	sa	0, sp
  :                            664 	la	RECORD_MARK
  :                            665 	lb, xi	0
  :                            666 
  :                            667 tcp_rbuffer_record
  :                            668 	sb	RECORD_MARK
  :                            669 	lcal	tcp_rbuffer
  :                            670 	pop	a
  :                            671 	jnza	tcp_read_record_mark
  :                            672 	wsr	16
  :                            673 	fret	0
  :                            674 
  :                            675 tcp_read_record_mark
  :                            676 	tp	RECORD_MARK_FLAG
  :                            677 	j	tcp_read_record_alignment_error
  :                            678 	push	a
  :                            679 	push	WDATA
  :                            680 	push	WDATAC
  :                            681 	push	p
  :                            682 	push,xi	6
  :                            683 	pop	p
  :                            684 	z	WDATAC
  :                            685 	la, xi	4
  :                            686 	lcal	tcp_rbuffer
  :                            687 	wsr	16
  :                            688 	dl	6
  :                            689 	dsa	16
  :                            690 	ds	RECORD_MARK_FLAG
  :                            691 	pop	p
  :                            692 	pop	WDATAC
  :                            693 	pop	WDATA
  :                            694 	pop	a
  :                            695 	j	tcp_rbuffer_marked
  :                            696 
  :                            697 tcp_read_record_alignment_error
  :                            698 	la, xi	-99
  :                            699 	fret	0
  :                            700 
  :                            701 
  :                            702 
  :                            703 tcp_read_opaque
  :                            704 	push	fp
  :                            705 	z	WDATAC
  :                            706 			. ask for the number of bytes you actually want
  :                            707 			. round up the descriptor:readpointer
  :                            708 			. in the final buffer read
  :                            709 			. push out the last delivered word to 24 bits
  :                            710 
  :                            711 	push	a	. how much you want
  :                            712 
  :                            713 	lcal	tcp_rbuffer_marked
  :                            714 	jnzb	tcp_incomplete_opaque_read
  :                            715 
  :                            716 
  :                            717 	z	WDATAC
  :                            718 
  :                            719 	la	0, sp	. # bytes requested
  :                            720 	and, xi	3	. flag up not 4 multiple
  :                            721 	jza	tcp_read_opaquex
  :                            722 
  :                            723 	tz	fp
  :                            724 	j	tcp_round_opaque_read
  :                            725 
  :                            726 			. we tested the marked record
  :                            727 			. for all present, so if no
  :                            728 			. segment buffer is at the
  :                            729 			. queue head, we are scanning
  :                            730 			. the wrong structure
  :                            731 
  :                            732 tcp_incomplete_opaque_read
  :                            733 	n	0, sp	. flag something is miscalculated
  :                            734 	j	tcp_read_opaquex
  :                            735 
  :                            736 tcp_round_opaque_read
  :                            737 	xor, xi	3
  :                            738 	push, i	1, a
  :                            739 	popA	descriptor:readpoint
  :                            740 
  :                            741 tcp_read_opaquex
  :                            742 	pop	a
  :                            743 	pop	fp
  :                            744 	fret	0
  :                            745 
  :                            746 tcp_floating_xdr64_read
  :                            747 	push	fp
  :                            748 	push	p
  :                            749 	push,xi	8
  :                            750 	pop	p
  :                            751 	z	WDATAC
  :                            752 	la, xi	8
  :                            753 	lcal	tcp_rbuffer_marked
  :                            754 	jzb	tcp_double_convert
  :                            755 	la, xi	-12
  :                            756 	j	tcp_floating_xdr64_readx
  :                            757 tcp_double_convert
  :                            758 	lx, xi	8
  :                            759 	call	(ieee754_64_2float)
  :                            760 	ly	0, sp
  :                            761 	qs	0, y
  :                            762 	ay, xi	4
  :                            763 	sy	0, sp
  :                            764 	la, xi	12
  :                            765 tcp_floating_xdr64_readx
  :                            766 	pop	p
  :                            767 	pop	fp
  :                            768 	fret	0
  :                            769 
  :                            770 tcp_integer_xdr32_read
  :                            771 	push	fp
  :                            772 	push	p
  :                            773 	push,xi	8
  :                            774 	pop	p
  :                            775 	z	WDATAC
  :                            776 	la, xi	4
  :                            777 	lcal	tcp_rbuffer_marked
  :                            778 	pop	y
  :                            779 	jzb	tcp_align_integer
  :                            780 	la, xi	-6
  :                            781 	j	tcp_integer_xdr32_readx
  :                            782 tcp_align_integer
  :                            783 	dl	8
  :                            784 	dsa	16
  :                            785 	ds	0, y
  :                            786 	ay, xi	2
  :                            787 	la, xi	6
  :                            788 tcp_integer_xdr32_readx
  :                            789 	sy	p
  :                            790 	pop	fp
  :                            791 	fret	0
  :                            792 
  :                            793 	$endif
  :                            794 
  :                            795 
  :                            796 	$if	0	. these don't seem to be called
  :                            797 tcp_add1byte
  :                            798 	sal	16
  :                            799 	wsr	8
  :                            800 	la	0, y
  :                            801 	aa, xi	1
  :                            802 	anu, xi	24
  :                            803 	sa	0, y
  :                            804 	jnc	tcp_addxbyte
  :                            805 
  :                            806 	z	SOCKET_CALL_FLAGS
  :                            807 
  :                            808 tcp_sendlastbytes
  :                            809 	lb, i, 	1, y
  :                            810 	sb	p
  :                            811 	sb	q
  :                            812 	z	0, y
  :                            813 	z	RDATAC
  :                            814 	z	WDATAC
  :                            815 	lcal	tcp_add
  :                            816 	fet	0
  :                            817 
  :                            818 tcp_pushline
  :                            819 	la	1, y
  :                            820 	jza	tcp_addxbyte
  :                            821 	push,xi	TCP_PSH
  :                            822 	pop	SOCKET_CALL_FLAGS
  :                            823 	wsr	16
  :                            824 	j	tcp_sendlastbytes
  :                            825 	
  :                            826 tcp_addxbyte
  :                            827 	fret	0
  :                            828 	$endif
  :                            829 
  :                            830 
  :                            831 	$if	0
  :                            832 udp_read
  :                            833 	lb	a
  :                            834 udp_read1
  :                            835 	la	s:udp:socket_inq:head
  :                            836 	jza	udp_readx
  :                            837 udp_read_next
  :                            838 	sa	fp
  :                            839 	push	b
  :                            840 	la	descriptor:bytes
  :                            841 	anb	a
  :                            842 	jc	udp_readbuffer
  :                            843 	la	0, sp
  :                            844 udp_readbuffer
  :                            845 	sb	0, sp
  :                            846 	lr	descriptor:readpoint
  :                            847 	lb	r
  :                            848 	ab	a
  :                            849 	sb	descriptor:readpoint
  :                            850 	lb	r
  :                            851 	sbr	1
  :                            852 	ly	b
  :                            853 	ay	descriptor:apdata	
  :                            854 
  :                            855 	lcal	rbuffer
  :                            856 
  :                            857 	pop	b
  :                            858 	jnb	udp_readx
  :                            859 	jzb	udp_readx
  :                            860 
  :                            861 	la	descriptor:dgram
  :                            862 	la	dgram:flags_fragment, a
  :                            863 	and, xi	IP_MORE
  :                            864 	jza	udp_readx
  :                            865 	lcal	udp_read_rxq	. the readq call returns q:head in A
  :                            866 	push	b		. and next in B
  :                            867 	push	x		. keep the socket as well
  :                            868 	lcal	net_free
  :                            869 	pop	x		. the socket
  :                            870 	pop	a		. the new first in readq if any
  :                            871 	jnza	udp_read_next
  :                            872 udp_readx
  :                            873 	lret	0
  :                            874 
  :                            875 	$endif
  :                            876 
  :                            877 .	that routine consumes the buffers in the user datagram
  :                            878 .	unconditionally and uses the cursor :readpoint
  :                            879 .	it is for XDR / RPC field extractions
  :                            880 
  :                            881 .	next is a similar routine for plain udgram_read
  :                            882 .	the buffers are not dropped, in case it's flagged
  :                            883 .	that this is a PEEK
  :                            884 
  :                            885 .	the :readpoint cursor is not maintained or consulted
  :                            886 
  :                            887 udgram_rbuffer
00:002DB7 60E003              +888 	la	descriptor:bytes
00:002DB8 68F002              +889 	lb	2, sp
00:002DB9 D80004              +890 	anb	a	. subtract available from required
00:002DBA 7E0DBC              +891 	jc	udgram_rbloc
00:002DBB 60F002              +892 	la	2, sp	. transfer block is total required
  :                            893 udgram_rbloc
00:002DBC F80004              +894 	push	a
00:002DBD 2FF002              +895 	popA	2, sp	. increment rx count		
00:002DBE 28F002              +896 	sb	2, sp	. push the new outstanding #
00:002DBF 58E006              +897 	ly	descriptor:apdata
00:002DC0 3E0D2D              +898 	lcal	rbuffer
  :                            899 
  :                            900 	$if	RX_FRAGMENTS
  :                            901 	jnb	udgram_rbuffer_x
  :                            902 	jzb	udgram_rbuffer_x
  :                            903 	lb	descriptor:dgram
  :                            904 	lb	dgram:flags_fragment, b
  :                            905 	andB,xi	IP_MORE
  :                            906 	jzb	udgram_rbuffer_x
  :                            907 	la	descriptor:next
  :                            908 	jnza	udgram_rbuffer
  :                            909 	$endif
  :                            910 
  :                            911 udgram_rbuffer_x
00:002DC1 350000              +912 	lret	0
  :                            913 
  :                            914 udp_auto_connect
00:002DC2 58E004              +915 	ly	descriptor:dgram
00:002DC3 CFB006              +916 	dl	dgram:ipsource, y
00:002DC4 2E0008              +917 	sbl	8
00:002DC5 360008              +918 	dsl	8
00:002DC6 58E005              +919 	ly	descriptor:uproto
00:002DC7 480F8F              +920 	lk	(00FFFF)
00:002DC8 BFB000              +921 	mlb	uugram:sourcep, y
00:002DC9 C7A002              +922 	ds	s:remote_address, x
00:002DCA 350000              +923 	lret
  :                            924 
  :                            925 
  :                            926 udgram_read
00:002DCB F8000E              +927 	push	fp
00:002DCC F80004              +928 	push	a		. max bytes
00:002DCD 60A006              +929 	la	s:udp:socket_inq:head, x
00:002DCE C60DDA              +930 	jza	udgram_readx
00:002DCF 20000E              +931 	sa	fp
  :                            932 	
00:002DD0 60001B              +933 	la	SOCKET_CALL_FLAGS
00:002DD1 A00FDC              +934 	and	(UDP_AUTO_CONNECT:s)
00:002DD2 C60DD4              +935 	jza	$+2
00:002DD3 3E0DC2              +936 	lcal	udp_auto_connect
  :                            937 
00:002DD4 FD0000              +938 	push,xi	0		. received bytes
00:002DD5 3E0DB7              +939 	lcal	udgram_rbuffer
00:002DD6 700016              +940 	tz	WDATAC
00:002DD7 3E0DAF              +941 	lcal	udp_rbuffer_y
  :                            942 .	tp	SOCKET_CALL_FLAGS
00:002DD8 FF0FDD              +943 	call	(release_udgram)
00:002DD9 380004              +944 	pop	a		. received
  :                            945 udgram_readx
00:002DDA 380005              +946 	pop	b		. final-count
00:002DDB 38000E              +947 	pop	fp
00:002DDC 350000              +948 	lret	0
  :                            949 
  :                            950 
  :                            951 wpair_nocheck* $proc
  :                            952 	rsr	16
  :                            953 	sa	?-1, y
  :                            954 	$end
  :                            955 
  :                            956 udgram_write
00:002DDD 300014              +957 	z	RDATAC
00:002DDE 050040              +958 	on	b$streamZR
00:002DDF 0D0020              +959 	off	b$stream16r
  :                            960 w2buffer_nocheck
00:002DE0 160005              +961 	dsr	5
00:002DE1 F80005              +962 	push	b
00:002DE2 400004              +963 	lr	a
00:002DE3 B60E05              +964 	j	w2nocheck32?
  :                            965 
  :                            966 w2nocheck32!
00:002DE4 150010              +967 ?	$do	16,	wpair_nocheck
00:002DE5 20B000              +967 
00:002DE6 150010              +967 
00:002DE7 20B001              +967 
00:002DE8 150010              +967 
00:002DE9 20B002              +967 
00:002DEA 150010              +967 
00:002DEB 20B003              +967 
00:002DEC 150010              +967 
00:002DED 20B004              +967 
00:002DEE 150010              +967 
00:002DEF 20B005              +967 
00:002DF0 150010              +967 
00:002DF1 20B006              +967 
00:002DF2 150010              +967 
00:002DF3 20B007              +967 
00:002DF4 150010              +967 
00:002DF5 20B008              +967 
00:002DF6 150010              +967 
00:002DF7 20B009              +967 
00:002DF8 150010              +967 
00:002DF9 20B00A              +967 
00:002DFA 150010              +967 
00:002DFB 20B00B              +967 
00:002DFC 150010              +967 
00:002DFD 20B00C              +967 
00:002DFE 150010              +967 
00:002DFF 20B00D              +967 
00:002E00 150010              +967 
00:002E01 20B00E              +967 
00:002E02 150010              +967 
00:002E03 20B00F              +967 
00:002E04 8D0010              +968 	ay, xi	16
  :                            969 w2nocheck32?
00:002E05 1E0DE4              +970 	jdr	w2nocheck32!
  :                            971 
00:002E06 380004              +972 	pop	a
00:002E07 160014              +973 	dsr	20
00:002E08 400004              +974 	lr	a
00:002E09 F80005              +975 	push	b
00:002E0A B60E0E              +976 	j	w2nocheckpair?
  :                            977 
  :                            978 w2nocheckpair!
00:002E0B 150010              +979 	rsr	16
00:002E0C 20B000              +980 	sa	0, y
00:002E0D 8D0001              +981 	ay, xi	1
  :                            982 w2nocheckpair?
00:002E0E 1E0E0B              +983 	jdr	 w2nocheckpair!
  :                            984 
00:002E0F 380004              +985 	pop	a	
00:002E10 A60E14              +986 	jpa	w2nocheckbyte
  :                            987 
00:002E11 150008              +988 	rsr	8
00:002E12 260008              +989 	sal	8
00:002E13 20B000              +990 	sa	0, y
  :                            991 w2nocheckbyte
  :                            992 
00:002E14 350000              +993 	lret	0
  :                            994 
  :                            92: 	$include	route_if
  :                            1 route_outward_interface				. remote address must be in 6:7
00:002E15 750059              +2 	ii	KERNEL$B1_1			. change to IP B1 frame
  :                            3 
00:002E16 FF0FDE              +4 	call	(__route)
00:002E17 700002              +5 	tz	x
00:002E18 B60E1A              +6 	j	extract_if
  :                            7 
  :                            8 no_path2remote
00:002E19 350000              +9 	lret	0
  :                            10 
  :                            11 extract_if
00:002E1A 60A002              +12 	la	ro:i_f
00:002E1B A50FFF              +13 	and	4095,,xi			. relative 1 interface subscript
00:002E1C C60E19              +14 	jza	no_path2remote			. there is no index-zero interface
00:002E1D 500004              +15 	lx	a
(+01)0f
00:002E1E 400000              +16 	lr	$if0p				. highest interface number
00:002E1F 170000              +17 	inc	r				. highest interface is allowed
00:002E20 F60E19              +18 	jxge	no_path2remote			
  :                            19 
(+01)10
00:002E21 850000              +20 	ax	$if0p,,xi			. address 1st interface pointer - 1
00:002E22 50A000              +21 	lx	0, x				. address interface descriptor
00:002E23 350001              +22 	lret	1				. obtained interface descriptor
  :                            23 
  :                            93: 	$include	dq
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 $(66::,x)
42:000000                     +42 pool	mpool
42:000001                     +42 
42:000002                     +42 
42:000003                     +42 
42:000004                     +42 
42:000005                     +42 
42:000006                     +42 
42:000007                     +42 
42:000008                     +42 
42:000009                     +42 
42:00000A                     +42 
42:00000B                     +42 
42:00000C                     +42 
42:00000D                     +42 
42:00000E                     +42 
42:00000F                     +42 
42:000010                     +42 
42:000011                     +42 
42:000012                     +42 
42:000013                     +42 
42:000014                     +42 
42:000015                     +42 
42:000016                     +42 
42:000017                     +42 
42:000018                     +42 
42:000019                     +42 
42:00001A                     +42 
42:00001B                     +42 
42:00001C                     +42 
42:00001D                     +42 
42:00001E                     +42 
42:00001F                     +42 
42:000020                     +42 
42:000021                     +42 
42:000022                     +42 
42:000023                     +42 
42:000024                     +42 
42:000025                     +42 
42:000026                     +42 
42:000027                     +42 
42:000028                     +42 
42:000029                     +42 
42:00002A                     +42 
42:00002B                     +42 
42:00002C                     +42 
42:00002D                     +42 
42:00002E                     +42 
42:00002F                     +42 
42:000030                     +42 
42:000031                     +42 
42:000032                     +42 
42:000033                     +42 
42:000034                     +42 
42:000035                     +42 
42:000036                     +42 
42:000037                     +42 
42:000038                     +42 
42:000039                     +42 
42:00003A                     +42 
42:00003B                     +42 
42:00003C                     +42 
42:00003D                     +42 
42:00003E                     +42 
42:00003F                     +42 
42:000040                     +42 
42:000041                     +42 
42:000042                     +42 
42:000043                     +42 
42:000044                     +42 
42:000045                     +42 
42:000046                     +42 
42:000047                     +42 
42:000048                     +42 
42:000049                     +42 
42:00004A                     +42 
42:00004B                     +42 
42:00004C                     +42 
42:00004D                     +42 
42:00004E                     +42 
42:00004F                     +42 
42:000050                     +42 
42:000051                     +42 
42:000052                     +42 
42:000053                     +42 
42:000054                     +42 
42:000055                     +42 
42:000056                     +42 
42:000057                     +42 
42:000058                     +42 
42:000059                     +42 
42:00005A                     +42 
42:00005B                     +42 
42:00005C                     +42 
42:00005D                     +42 
42:00005E                     +42 
42:00005F                     +42 
42:000060                     +42 
42:000061                     +42 
42:000062                     +42 
42:000063                     +42 
42:000064                     +42 
42:000065                     +42 
42:000066                     +42 
42:000067                     +42 
42:000068                     +42 
42:000069                     +42 
42:00006A                     +42 
42:00006B                     +42 
42:00006C                     +42 
42:00006D                     +42 
42:00006E                     +42 
42:00006F                     +42 
42:000070                     +42 
42:000071                     +42 
42:000072                     +42 
42:000073                     +42 
42:000074                     +42 
42:000075                     +42 
42:000076                     +42 
42:000077                     +42 
42:000078                     +42 
42:000079                     +42 
42:00007A                     +42 
42:00007B                     +42 
42:00007C                     +42 
42:00007D                     +42 
42:00007E                     +42 
42:00007F                     +42 
42:000080                     +42 
42:000081                     +42 
42:000082                     +42 
42:000083                     +42 
42:000084                     +42 
42:000085                     +42 
42:000086                     +42 
42:000087                     +42 
42:000088                     +42 
42:000089                     +42 
42:00008A                     +42 
42:00008B                     +42 
42:00008C                     +42 
42:00008D                     +42 
42:00008E                     +42 
42:00008F                     +42 
42:000090                     +42 
42:000091                     +42 
42:000092                     +42 
42:000093                     +42 
42:000094                     +42 
42:000095                     +42 
42:000096                     +42 
42:000097                     +42 
42:000098                     +42 
42:000099                     +42 
42:00009A                     +42 
42:00009B                     +42 
42:00009C                     +42 
42:00009D                     +42 
42:00009E                     +42 
42:00009F                     +42 
42:0000A0                     +42 
42:0000A1                     +42 
42:0000A2                     +42 
42:0000A3                     +42 
42:0000A4                     +42 
42:0000A5                     +42 
42:0000A6                     +42 
42:0000A7                     +42 
42:0000A8                     +42 
42:0000A9                     +42 
42:0000AA                     +42 
42:0000AB                     +42 
42:0000AC                     +42 
42:0000AD                     +42 
42:0000AE                     +42 
42:0000AF                     +42 
42:0000B0                     +42 
42:0000B1                     +42 
42:0000B2                     +42 
42:0000B3                     +42 
42:0000B4                     +42 
42:0000B5                     +42 
42:0000B6                     +42 
42:0000B7                     +42 
42:0000B8                     +42 
42:0000B9                     +42 
42:0000BA                     +42 
42:0000BB                     +42 
42:0000BC                     +42 
42:0000BD                     +42 
42:0000BE                     +42 
42:0000BF                     +42 
42:0000C0                     +42 
42:0000C1                     +42 
42:0000C2                     +42 
42:0000C3                     +42 
42:0000C4                     +42 
42:0000C5                     +42 
42:0000C6                     +42 
42:0000C7                     +42 
42:0000C8                     +42 
42:0000C9                     +42 
42:0000CA                     +42 
42:0000CB                     +42 
42:0000CC                     +42 
42:0000CD                     +42 
42:0000CE                     +42 
42:0000CF                     +42 
42:0000D0                     +42 
42:0000D1                     +42 
42:0000D2                     +42 
42:0000D3                     +42 
42:0000D4                     +42 
42:0000D5                     +42 
42:0000D6                     +42 
42:0000D7                     +42 
42:0000D8                     +42 
42:0000D9                     +42 
42:0000DA                     +42 
42:0000DB                     +42 
42:0000DC                     +42 
42:0000DD                     +42 
42:0000DE                     +42 
42:0000DF                     +42 
42:0000E0                     +42 
42:0000E1                     +42 
42:0000E2                     +42 
42:0000E3                     +42 
42:0000E4                     +42 
42:0000E5                     +42 
42:0000E6                     +42 
42:0000E7                     +42 
42:0000E8                     +42 
42:0000E9                     +42 
42:0000EA                     +42 
42:0000EB                     +42 
42:0000EC                     +42 
42:0000ED                     +42 
42:0000EE                     +42 
42:0000EF                     +42 
42:0000F0                     +42 
42:0000F1                     +42 
42:0000F2                     +42 
42:0000F3                     +42 
42:0000F4                     +42 
42:0000F5                     +42 
42:0000F6                     +42 
42:0000F7                     +42 
42:0000F8                     +42 
42:0000F9                     +42 
42:0000FA                     +42 
42:0000FB                     +42 
42:0000FC                     +42 
42:0000FD                     +42 
42:0000FE                     +42 
42:0000FF                     +42 
42:000100                     +42 
42:000101                     +42 
42:000102                     +42 
  :                            43 
  :                            44 $(67::,y)
43:000000                     +45 queue	dq
43:000001                     +45 
  :                            46 
  :                            47 $(0)
  :                            48 	$if	__PAD
  :                            49 
  :                            50 init_pool	$tree
                                	$head_near	scalars(caller_y,	int,	y	;
                                				save_simd,	float,	RDATAC	;
                                				initial_pointers, float		;
                                				simd_control,	float,		;
00:002E24 F80003              +55 				(-1, 0, NET_FREECHAINS//4-1, 4q),,float)
00:002E25 8F0014              +55 
00:002E26 8F0F99              +55 
00:002E27 8F0FDF              +55 
  :                            56 
00:002E28 C00002              +57 	aa	x
00:002E29 580004              +58 	ly	a
00:002E2A 8DFFE0              +59 	ay	-__PAD*8,,xi
00:002E2B 4F0FE3              +60 	ql	(0, 0, -1, 0q)		. descriptor stack root comparands
00:002E2C 47B018              +61 ?	$do	__PAD,	qs	__PAD*8-?*8, y
00:002E2D 47B010              +61 
00:002E2E 47B008              +61 
00:002E2F 47B000              +61 
  :                            62 	
00:002E30 10B009              +63 	sx	descriptor:frame+ACW_SIZE, y
00:002E31 6CA120              +64 	lb	+(2+NET_FREECHAINS)//NET_GRANULE*NET_GRANULE, x, i
00:002E32 28B001              +65 	sb	descriptor:frame, y
00:002E33 30B002              +66 	z	descriptor:i_f, y
00:002E34 18A001              +67 	sy	pool:next
  :                            68 
00:002E35 5CA002              +69 	ly	pool:free(1),,i
00:002E36 870014              +70 	qpop	RDATAC			. program repeat operation
00:002E37 740FE7              +71 	rex	(qs	0, y)		. store 4 zero words per pass + increment 4
00:002E38 87F000              +72 	qpop	0, sp			. from internal stack top no increment
00:002E39 870014              +73 	qpop	RDATAC			. restore bit-stream / SIMD registers
00:002E3A 380003              +74 	pop	y
00:002E3B 350000              +75 	lret	0
  :                            76 
  :                            77 	$root
  :                            78 
  :                            79 	$else
  :                            80 
  :                            81 init_pool
  :                            82 	aa	x		. top of pool
  :                            83 	aa, xi	-ACW_SIZE*2	. minus 2 descriptors
  :                            84 	sa	pool:next	. first assignable descriptor
  :                            85 	sx	descriptor:frame+ACW_SIZE, a
  :                            86 				. buffer in fixed top descriptor
  :                            87 	lb	-1,,xi
  :                            88 	sb	descriptor:i_f+ACW_SIZE, a
  :                            89 	lb, i	+(2+NET_FREECHAINS)//NET_GRANULE*NET_GRANULE, x
  :                            90 	sb	descriptor:frame, a
  :                            91 				. first assignable address in
  :                            92 				. first assignable descriptor
  :                            93 
  :                            94 	dsr	48
  :                            95 	ds	6
  :                            96 
  :                            97 ?	$do	NET_FREECHAINS//4,	qs	pool:free(?*4-3)
  :                            98 	z	pool:lock_cell
  :                            99 
  :                            100 	lret	0
  :                            101 
  :                            102 	$endif
  :                            103 
00:002E3C C5FFFF              +104 buy1	aa, xi	-1
00:002E3D 7E0E40              +105 	jc	buy1_soon
  :                            106 
  :                            107 buy1_never		. requested size is out of range
00:002E3E 650000              +108 	la, xi	0	. result = no descriptor
00:002E3F 350000              +109 	lret	0
  :                            110 buy1_soon
00:002E40 060005              +111 	sar	NET_LOG
00:002E41 680004              +112 	anu,xi	NET_FREECHAINS
00:002E42 DD0101              +112 
00:002E43 7E0E3E              +113 	jc	buy1_never
  :                            114 
00:002E44 FD0007              +115 	LOCK	pool:lock_cell
00:002E45 27F000              +115 
00:002E46 07A000              +115 
00:002E47 B60E46              +115 
  :                            116 
00:002E48 6CC001              +117 	lb, i	1, a		. b = # granules
00:002E49 C4A002              +118 	aa, i	pool:free(1)
00:002E4A 580004              +119 	ly	a
00:002E4B 60B000              +120 	la	0, y		. free chain head
00:002E4C C60E52              +121 	jza	buy1_new
00:002E4D 68C000              +122 	lb	0, a		. second in chain
00:002E4E 28B000              +123 	sb	0, y		. -> chain head
00:002E4F 30C003              +124 	z	descriptor:bytes, a
00:002E50 30C000              +125 	z	descriptor:next, a
  :                            126 
00:002E51 B60E61              +127 	j	buy1_complete
  :                            128 
  :                            129 buy1_new
00:002E52 60A001              +130 	la	pool:next
00:002E53 2E0005              +131 	sbl	NET_LOG
00:002E54 C8C001              +132 	ab	descriptor:frame, a
  :                            133 				. new next buffer
00:002E55 C5FFF8              +134 	aa, xi	-ACW_SIZE	. new next descriptor
  :                            135 
00:002E56 580005              +136 	ly	b
00:002E57 680004              +137 	anu	y		. descriptor < buffer
00:002E58 D80003              +137 
00:002E59 7E0E5C              +138 	jc	buy1_new_now	. if so unavailable
  :                            139 
00:002E5A 650000              +140 	la, xi	0		. result = no descriptor
00:002E5B B60E61              +141 	j	buy1_complete
  :                            142 
  :                            143 buy1_new_now
00:002E5C 20A001              +144 	sa	pool:next
00:002E5D 18C001              +145 	sy	descriptor:frame, a
00:002E5E 64C008              +146 	la	ACW_SIZE, a, i
00:002E5F 30C003              +147 	z	descriptor:bytes, a
00:002E60 30C000              +148 	z	descriptor:next, a
  :                            149 
  :                            150 buy1_complete
00:002E61 30A000              +151 	FREE	pool:lock_cell
00:002E62 27F000              +151 
00:002E63 17000F              +151 
00:002E64 350000              +152 	lret	0
  :                            153 
  :                            154 
00:002E65 C60EB4              +155 sell1	jza	sell1_u			. popped from an empty queue?
00:002E66 700002              +156 	tnz	x
00:002E67 B60E69              +156 
00:002E68 B60EB4              +157 	j	sell1_u			. buffer pool pointer an untested variable?
  :                            158 
00:002E69 FD0007              +159 	LOCK	pool:lock_cell
00:002E6A 27F000              +159 
00:002E6B 07A000              +159 
00:002E6C B60E6B              +159 
  :                            160 
00:002E6D 68C003              +161 	lb	descriptor:bytes, a
00:002E6E A80F82              +162 	andB	(0400000)
00:002E6F DE0EB1              +163 	jnzb	sell1_z			. already freed or some mistake
  :                            164 	
00:002E70 400004              +165 	lr	a
00:002E71 F60EB5              +166 	jxge	wrong_pool
  :                            167 
00:002E72 58A001              +168 	ly	pool:next		. is the candidate the
00:002E73 680004              +169 	anu, i	ACW_SIZE, y		. descriptor above next-> ?
00:002E74 DCB008              +169 
  :                            170 
00:002E75 CE0E78              +171 	jzb	sell1_more		. stack top
00:002E76 7E0E9F              +172 	jc	sell1_list		. within stack
00:002E77 B60EB1              +173 	j	sell1_z			. not assigned
  :                            174 
  :                            175 	$if	1
  :                            176 
  :                            177 sell1_more
00:002E78 20A001              +178 	sa	pool:next	
  :                            179 
00:002E79 30C003              +180 	z	descriptor:bytes, a	. wipe all flags out
  :                            181 
00:002E7A 78C00A              +182 	tp	descriptor:i_f+ACW_SIZE, a
00:002E7B B60EB1              +183 	j	sell1_z
00:002E7C 68C00B              +184 	lb	descriptor:bytes+ACW_SIZE, a
00:002E7D A80F82              +185 	andB	(0400000)		. is next descriptor in a free chain?
00:002E7E CE0EB1              +186 	jzb	sell1_z			. no
  :                            187 
00:002E7F 580004              +188 	ly	a
00:002E80 64C008              +189 	la	ACW_SIZE, a, i
  :                            190 
  :                            191 .	remove freechain links pointing to here
  :                            192 .	or stop consolidating if they're not found
  :                            193 
00:002E81 68B001              +194 	lb	descriptor:frame, y	. old heap top
00:002E82 D8C001              +195 	anb	descriptor:frame, a	. minus this heap top
00:002E83 0E0005              +196 	sbr	NET_LOG
00:002E84 5CA001              +197 	ly	pool:free(1)-1,,i
00:002E85 880005              +198 	ay	b			. free chain head for buffer size
  :                            199 
00:002E86 680004              +200 	lb	a
00:002E87 B8B000              +201 	xorB	0, y			. 1st (and only) buffer in chain?
00:002E88 DE0E8B              +202 	jnzb	sell1_sample(1)		. no
00:002E89 30B000              +203 	z	0, y			. yes, clear free chain head
00:002E8A B60E78              +204  	j	sell1_more
  :                            205 
  :                            206 					. is this descriptor next ->
  :                            207 					. of a descriptors near stack top?
  :                            208 					. if so unchain and consolidate
  :                            209 					. otherwise stop consolidating
  :                            210 p	$proc
  :                            211 sell1_probe* $name
  :                            212 	lb	a
  :                            213 	xorB	descriptor:next+ACW_SIZE*?, a
  :                            214 
  :                            215 	$if	sell1_sample(?+1)
  :                            216 	jnzb	sell1_sample(?+1)
  :                            217 	$else
  :                            218 	jnzb	sell1_z
  :                            219 	$endif
  :                            220 
  :                            221 	z	descriptor:next+ACW_SIZE*?, a	. clear pointer to this
  :                            222 	j	sell1_more
  :                            223 
  :                            224 	$end
  :                            225 
00:002E8B 680004              +226 ?	$do	__PAD,sell1_sample(?)	sell1_probe
00:002E8C B8C008              +226 
00:002E8D DE0E90              +226 
00:002E8E 30C008              +226 
00:002E8F B60E78              +226 
00:002E90 680004              +226 
00:002E91 B8C010              +226 
00:002E92 DE0E95              +226 
00:002E93 30C010              +226 
00:002E94 B60E78              +226 
00:002E95 680004              +226 
00:002E96 B8C018              +226 
00:002E97 DE0E9A              +226 
00:002E98 30C018              +226 
00:002E99 B60E78              +226 
00:002E9A 680004              +226 
00:002E9B B8C020              +226 
00:002E9C DE0EB1              +226 
00:002E9D 30C020              +226 
00:002E9E B60E78              +226 
  :                            227 
  :                            228 					. _________________________
  :                            229 	$else				. replaced as too iterative
  :                            230 
  :                            231 sell1_more				. yes, the heap gets taller
  :                            232 	sa	pool:next		. replace next-new
  :                            233 
  :                            234 sell1_summit
  :                            235 	lb	descriptor:frame, a
  :                            236 				. buffer size of
  :                            237 	anb	descriptor:frame+ACW_SIZE, a
  :                            238 					. next buffer down
  :                            239 					. <- next descriptor up
  :                            240 
  :                            241 	sbr	NET_LOG
  :                            242 
  :                            243 	ab, i	pool:free(1)-1		. free chain for size
  :                            244 	la, i	ACW_SIZE, a		. next descriptor up
  :                            245 	lr	b
  :                            246 
  :                            247 .	now keep looking to see if the new heap top
  :                            248 .	buffer is on its free chain. If it is, it
  :                            249 .	is the one at the far end, because the
  :                            250 .	highest-positioned buffers are the last
  :                            251 .	choice for re-use
  :                            252 
  :                            253 .	the stack of descriptors grows down towards
  :                            254 .	the heap of buffers which grows up
  :                            255 
  :                            256 .	the stack of descriptors packs back up
  :                            257 .	away from the heap of buffers which
  :                            258 .	packs down
  :                            259 
  :                            260 
  :                            261 
  :                            262 sell1_free?				. move on chain
  :                            263 	ly	r			. until next has a
  :                            264 	lr	0, y			. lower address
  :                            265 	
  :                            266 
  :                            267 	anu	r
  :                            268 	jnc	sell1_free?		. keep on towards
  :                            269 					. the stack top
  :                            270 
  :                            271 	jnzb	sell1_z			. not in the free 
  :                            272 					. chain so stop now
  :                            273 
  :                            274 					. equal so take it
  :                            275 	lb	0, a			. from the chain
  :                            276 	sb	0, y			. and pack the heap
  :                            277 
  :                            278 	sa	pool:next		. this may change
  :                            279 
  :                            280 	OPEN	pool:lock_cell
  :                            281 					. this is a window where
  :                            282 					. this CPU may accept an
  :                            283 					. interrupt and other
  :                            284 					. CPUs may take the
  :                            285 					. buffer pool
  :                            286 
  :                            287 	SHUT	pool:lock_cell
  :                            288 
  :                            289 	la	pool:next		. this may have changed
  :                            290 
  :                            291 	j	sell1_summit
  :                            292 
  :                            293 	$endif				. replaced as too iterative
  :                            294 .					. ___________________________
  :                            295 
  :                            296 sell1_list				. it wasn't the one at
  :                            297 					. the heap top
  :                            298 
  :                            299 	$if	0			. done up front now
  :                            300 	$if	1			. flip this to trap void buffer frees
  :                            301 	jza	sell1_z
  :                            302 	$else
  :                            303 	jnza	sell1_log
  :                            304 	ii	GUARD$			. free candidate buffer was not named
  :                            305 					.
  :                            306 	j	sell1_z			. in case there is every any return
  :                            307 					. from the sin-bin interrupt
  :                            308 	$endif
  :                            309 	$endif
  :                            310 
  :                            311 sell1_log
00:002E9F 580004              +312 	ly	a			. find free chain
00:002EA0 8DFFF8              +313 	ay, xi	-ACW_SIZE		. per buffer size
00:002EA1 68B001              +314 	lb	descriptor:frame, y
00:002EA2 D8C001              +315 	anb	descriptor:frame, a
  :                            316 
00:002EA3 0E0005              +317 	sbr	NET_LOG
00:002EA4 CCA001              +318 	ab, i	pool:free(1)-1
00:002EA5 400005              +319 	lr	b
  :                            320 
  :                            321 
  :                            322 sell1_list?
00:002EA6 580000              +323 	ly	r
00:002EA7 40B000              +324 	lr	0, y
  :                            325 	
00:002EA8 680004              +326 	anu	r
00:002EA9 D80000              +326 
  :                            327 
00:002EAA 5E0EA6              +328 	jnc	sell1_list?		. keep moving towards
  :                            329 					. the stack top
  :                            330 
00:002EAB CE0EB1              +331 	jzb	sell1_z			. equal, it's already free
  :                            332 
00:002EAC 00C000              +333 	sr	0, a			. chain it in
00:002EAD 20B000              +334 	sa	0, y
00:002EAE 68C003              +335 	lb	descriptor:bytes, a
00:002EAF 980F82              +336 	orB	(0400000)
00:002EB0 28C003              +337 	sb	descriptor:bytes, a
  :                            338 
00:002EB1 30A000              +339 sell1_z	FREE	pool:lock_cell
00:002EB2 27F000              +339 
00:002EB3 17000F              +339 
00:002EB4 350000              +340 sell1_u	lret	0
  :                            341 	
  :                            342 wrong_pool
00:002EB5 75005F              +343 	ii	GUARD$
  :                            344 
  :                            345 q2first?
00:002EB6 70B000              +346 	tz	queue:head
00:002EB7 B60EC2              +347 	j	q2z
00:002EB8 20B000              +348 	sa	queue:head
00:002EB9 20B001              +349 	sa	queue:tail
00:002EBA 30C000              +350 	z	0, a
00:002EBB 350001              +351 	lret	1		. indicate this is a write
  :                            352 				. to a previously empty q
  :                            353 				. by skipping an instruction
  :                            354 				. on return
  :                            355 
00:002EBC 70B000              +356 q2	tz	queue:head
00:002EBD B60EC2              +357 	j	q2z
00:002EBE 20B000              +358 	sa	queue:head
00:002EBF 20B001              +359 	sa	queue:tail
00:002EC0 30C000              +360 	z	0, a
00:002EC1 350000              +361 	lret	0
00:002EC2 68B001              +362 q2z	lb	queue:tail
00:002EC3 20D000              +363 	sa	0, b
00:002EC4 20B001              +364 	sa	queue:tail
00:002EC5 30C000              +365 	z	0, a
00:002EC6 350000              +366 	lret	0	
  :                            367 
00:002EC7 60B000              +368 readq	la	queue:head
00:002EC8 C60ECB              +369 	jza	readqz
00:002EC9 68C000              +370 	lb	0, a
00:002ECA 28B000              +371 	sb	queue:head
00:002ECB 350000              +372 readqz	lret	0
  :                            373 
  :                            94 
  :                            95: 	$include	bind
  :                            1 "$bind"	$tree
  :                            2 
  :                            3 .	subroutines of bind() and __bind()
  :                            4 
  :                            5 construct_port_block
00:002ECC 34002F              +6 	sabr	BSOCKET			. initialise a new block of storage
00:002ECD 580FA2              +7 	ly	(BSOCKET*/12s)		. for modeling ports
  :                            8 
00:002ECE F80005              +9 	push	b
00:002ECF F80000              +10 	push	r
  :                            11 
00:002ED0 4501FF              +12 	lr	4096/8-1,,xi
00:002ED1 4F0F99              +13 	ql	(0q)
  :                            14 
  :                            15 zero_port_block
00:002ED2 47B000              +16 	qs	0, y
00:002ED3 47B004              +17 	qs	4, y
00:002ED4 8D0008              +18 	ay	8,,xi
00:002ED5 1E0ED2              +19 	jdr	zero_port_block
  :                            20 		
00:002ED6 380000              +21 	pop	r
00:002ED7 380005              +22 	pop	b
00:002ED8 350000              +23 	lret	0			. end initialise
  :                            24 
  :                            25 bind_in_block				. retrieve or assign port structure
00:002ED9 D60EE0              +26 	jnza	ports_block_up		. assigning its initial 
00:002EDA 651000              +27 	la	4096,,xi
00:002EDB 75004A              +28 	ii	ASSIGN_XVECTOR$		. this must not go in caller's 
  :                            29 					. memory estate list
  :                            30 					. it's therefore different from BANK$
  :                            31 
00:002EDC C60EF4              +32 	jza	bind_show_random_result	. which is zero = not found
00:002EDD 200010              +33 	sa	d$save
00:002EDE 3E0ECC              +34 	lcal	construct_port_block
00:002EDF B60EE2              +35 	j	ports_block_online
  :                            36 
  :                            37 ports_block_up
00:002EE0 200010              +38 	sa	d$save
00:002EE1 34002F              +39 	sabr	BSOCKET
  :                            40 ports_block_online
00:002EE2 580FA2              +41 	ly	(BSOCKET*/12s)
00:002EE3 400F8B              +42 	lr	(BSOCKET+1*/12)
00:002EE4 650000              +43 	la	0,,xi			. default result
  :                            44 
  :                            45 seek_random_free_port
00:002EE5 FE0EF4              +46 	jyge	bind_show_random_result
00:002EE6 70B001              +47 	tz	s:socket_address+1,y
00:002EE7 B60EF2              +48 	j	another_random_port
  :                            49 
00:002EE8 85DF80              +50 	ax	-usockb(1),,xi		. points to [ut]sockb(3) or [ut]sockb(4)
00:002EE9 600002              +51 	la	x			. 0000 0000 0010 0000 Pppp pppp
00:002EEA 260011              +52 	sal	17			. pppp ppp0 0000 0000 0000 0000
00:002EEB 060008              +53 	sar	24-7-9			. 0000 0000 pppp ppp0 0000 0000
00:002EEC 680003              +54 	lb	y			. 0000 0010 1111 PPPP PPPP P000
00:002EED 2E000C              +55 	sbl	12
00:002EEE 0E000F              +56 	sbr	15			. plus offset / 8
00:002EEF 900005              +57 	or	b			. 0000 0000 pppp pppP PPPP PPPP
00:002EF0 20B001              +58 	sa	s:socket_address+1,y
00:002EF1 B60EF4              +59 	j	bind_show_random_result
  :                            60 
  :                            61 another_random_port
00:002EF2 8D0008              +62 	ay	8,,xi
00:002EF3 B60EE5              +63 	j	seek_random_free_port
  :                            64 
  :                            65 bind_show_random_result
00:002EF4 350000              +66 	lret	0
  :                            67 
  :                            68 find_in_blocks_range
00:002EF5 44A002              +69 	lr	2, x, i			. set the limit at block(5)
00:002EF6 750053              +70 	ii	READ_XVECTOR$
00:002EF7 3E0ED9              +71 	lcal	bind_in_block
00:002EF8 D60EFC              +72 	jnza	find_in_blocks_exit	. a successful end
00:002EF9 850001              +73 	ax	1,,xi
00:002EFA FE0EFC              +74 	jyge	find_in_blocks_exit	. an unsuccessful end
00:002EFB B60EF5              +75 	j	find_in_blocks_range
  :                            76 find_in_blocks_exit
00:002EFC 350000              +77 	lret	0
  :                            78 
  :                            79 .	end subroutines of bind() and __bind()
  :                            80 
  :                            81 
  :                            82 .	vector name (bind)
  :                            83 
  :                            84 .	this is bind called from application space
  :                            85 .	inputs are an unbound handle number and an address:port
  :                            86 .	port may be wildcard zero. A targeted port must be previously unbound
  :                            87  
  :                            88 network_bind
                                	$head_far		 params(handle,			int	;
  :                            90 					sockaddress,		long	)	
  :                            91 
  :                            92 
00:002EFD 60F003              +93 	la	handle
00:002EFE 750052              +94 	ii	READ_HANDLE$
  :                            95 
00:002EFF 9FF004              +96 	c	(__bind)	a	sockaddress,,long
00:002F00 F80004              +96 
00:002F01 FCF003              +96 
00:002F02 FF0FCE              +96 
00:002F03 38000F              +96 
  :                            97 
00:002F04 E60F08              +98 	jna	network_bindz
  :                            99 
00:002F05 60F003              +100 	la	handle
00:002F06 750078              +101 	ii	USOCKET$		. update the handle encoding in vectors list 
00:002F07 650000              +102 	la	0,,xi			. status
  :                            103 
  :                            104 network_bindz
00:002F08 75006F              +105 	ii	FREE_SOCKB$		. mask the block of kernel memory from application window
00:002F09 3D0000              +106 	fret	0
  :                            107 
  :                            108 
  :                            109 .	vector name (__bind)
  :                            110 .	this is bind called without using a handle
  :                            111 .	for example from outgoing TCP connect
  :                            112 
  :                            113 .	a value like a handle encoding should be in 1st argument
  :                            114 .	either IPPROTO_UDP.0.0 or IPPROTO_TCP.0.0
  :                            115 
  :                            116 autobind
                                	$head_far		 params(encoding,		int	;
                                					sockad,			long)	;
                                									;
00:002F0A FD0000              +120 				scalars(connections_tablep,	int)
  :                            121 
00:002F0B 4DFFFF              +122 	lk	-1,,xi
00:002F0C 60F004              +123 	la	encoding
00:002F0D AF0F7F              +124 	mta	(IPPROTO_UDP*/16)
00:002F0E B60F11              +125 	j	net_bind_tcp?
00:002F0F 552080              +126 	lx	usockb(1),,xi
00:002F10 B60F18              +127 	j	assign_port
  :                            128 
  :                            129 net_bind_tcp?
00:002F11 AF0F80              +130 	mta	(IPPROTO_TCP*/16)
00:002F12 B60F40              +131 	j	net_bind_no_protocol
00:002F13 552185              +132 	lx	tcx_v4(1),,xi
00:002F14 750053              +133 	ii	READ_XVECTOR$
00:002F15 C60F44              +134 	jza	net_bind_no_storage
00:002F16 20F000              +135 	sa	connections_tablep	. a TCP port must have this
00:002F17 552100              +136 	lx	tsockb(1),,xi
  :                            137 
  :                            138 assign_port
00:002F18 60F006              +139 	la	sockad+1		. read the port number
00:002F19 A00F8F              +140 	and	(00FFFF)
00:002F1A C60F2B              +141 	jza	assign_wildcard_socket
  :                            142 
  :                            143 	.	x -> usockb{1} or -> tsockb(1)
  :                            144 
  :                            145 	$if	1
00:002F1B 3E0A7E              +146 	lcal	protocol_socket
  :                            147 	$else
  :                            148 
  :                            149 	lb	BSOCKET*/9,,xi
  :                            150 	dsr	9
  :                            151 	rbr	12
  :                            152 	ax	a
  :                            153 	ii	READ_XVECTOR$
  :                            154 
  :                            155 	$endif
  :                            156 
00:002F1C D60F23              +157 	jnza	net_bind_memory_up
00:002F1D 651000              +158 	la	4096,,xi
00:002F1E 75004A              +159 	ii	ASSIGN_XVECTOR$
00:002F1F C60F44              +160 	jza	net_bind_no_storage
00:002F20 200010              +161 	sa	d$save
00:002F21 3E0ECC              +162 	lcal	construct_port_block
00:002F22 B60F25              +163 	j	net_bind_memory_online
  :                            164 
  :                            165 net_bind_memory_up
00:002F23 34002F              +166 	sabr	BSOCKET
00:002F24 200010              +167 	sa	d$save
  :                            168 net_bind_memory_online
00:002F25 580005              +169 	ly	b
00:002F26 60B001              +170 	la	s:socket_address+1, y
00:002F27 A00F8F              +171 	and	(00FFFF)
00:002F28 D60F42              +172 	jnza	already_bound
00:002F29 CFF005              +173 	dl	sockad
00:002F2A B60F32              +174 	j	assign_socket
  :                            175 
  :                            176 assign_wildcard_socket
00:002F2B 850002              +177 	ax	2,,xi			. move from block(1) to block(3)
  :                            178 	
00:002F2C 3E0EF5              +179 	lcal	find_in_blocks_range
00:002F2D C60F44              +180 	jza	net_bind_no_storage
  :                            181 
00:002F2E 400004              +182 	lr	a
00:002F2F 480F8F              +183 	lk	(00FFFF)		. wildcard bind
00:002F30 CFF005              +184 	dl	sockad			. catenate network address
00:002F31 BF0000              +185 	mlb	r			. + acquired port #
  :                            186 
  :                            187 assign_socket
00:002F32 C7B000              +188 	ds	s:socket_address, y	. address setting in port
  :                            189 
00:002F33 600010              +190 	la	d$save			
00:002F34 680003              +191 	lb	y
00:002F35 C7000A              +192 	ds	10			. results 7:8 long address of port descriptor
  :                            193 
00:002F36 68F000              +194 	lb	connections_tablep	. connections block if any
00:002F37 480F8D              +195 	lk	(255*/16s)
00:002F38 60F004              +196 	la	encoding
00:002F39 AF0F80              +197 	mta	(IPPROTO_TCP*/16s)
00:002F3A B60F3E              +198 	j	net_nontcp
00:002F3B 28B005              +199 	sb	s:tcp:tbase, y		. default connections table
00:002F3C CF2180              +200 	dl	rx_buffers
00:002F3D C7B006              +201 	ds	s:tcp:rxbu_p, y		. default rx buffer pool
  :                            202 
  :                            203 net_nontcp
00:002F3E 650000              +204 	la	0,,xi			. 72-bit result
00:002F3F B60F45              +205 	j	net_bind_z
  :                            206 
  :                            207 net_bind_no_protocol
00:002F40 65FFD6              +208 	la	-NO_PROTOCOL,,xi
00:002F41 B60F45              +209 	j	net_bind_z
  :                            210 
  :                            211 already_bound
00:002F42 65FFC6              +212 	la	-PORT_ALREADY_BOUND,,xi
00:002F43 B60F45              +213 	j	net_bind_z
  :                            214 
  :                            215 net_bind_no_storage
00:002F44 65FFF4              +216 	la	-NO_STORAGE,,xi
  :                            217 
  :                            218 net_bind_z
00:002F45 17000F              +219 	inc	sp
00:002F46 3D0000              +220 	fret	0
  :                            221 
  :                            222 	$root
  :                            96 
  :                            97 .	$include	xdr
  :                            98 .	$include	write_ur
  :                            99 
  :                            100: 	$include	icapsule	. icapsule
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 ACTIVITY_SPACE		$equ	1		. milliseconds to keep looking for more work
  :                            41 REST_GRANULE		$equ	1000000/2000	. microseconds to rest while no work
  :                            42 						. repeated until some work
  :                            43 $(3)
  :                            44 
03:000000 000000000001        +45 akt	+	ACTIVITY_SPACE:d		. for plugitinisation
03:000002 0000080001F4        +46 takt	+	CHILLDOWN, REST_GRANULE:d	. from the console
  :                            47 
03:000004 000000000000        +48 activity_revision +	0L
  :                            49 
  :                            50 	$if		DRIVERS_BANK1
  :                            51 $(67::, y)
  :                            52 networkframe	delivery
  :                            53 	$endif
  :                            54 
  :                            55 $(0)
  :                            56 
(+01)0f
00:002F47 400009              +57 iattend	lr	i_f_last		. find trunk-master interfaces
(+01)10
00:002F48 55000A              +58 	lx	interface(1),,xi	. from (2) to i_f_last
  :                            59 
  :                            60 iattendu
00:002F49 850048              +61 	ax	interface(2)-interface(1),,xi
00:002F4A 60A001              +62 	la	this_if:flags
00:002F4B C60F54              +63 	jza	iattended		. next i / f otherwise
00:002F4C 70A031              +64 	tz	this_if:oq.head		. simple general TX queue?
00:002F4D 350000              +65 	lret	0			. yes, keep running
00:002F4E CFA044              +66 	dl	this_if:ift1:base_rx
00:002F4F 750060              +67 	ii	XBASE$32
00:002F50 70D000              +68 	tz	networkframe:flag, b	. RX frames in trunk?
00:002F51 350000              +69 	lret	0			. keep running
  :                            70 
00:002F52 70A033              +71 	tz	this_if:oq2:head:bx	. high volume tx frames ?
00:002F53 350000              +72 	lret	0			. yes, keep running
  :                            73 iattended
00:002F54 F60F56              +74 	jxge	icool			. trunk-master I/Fs all walked?
00:002F55 B60F49              +75 	j	iattendu		. no
00:002F56 350001              +76 icool	lret	1			. yes
  :                            77 
  :                            78 icapsule
00:002F57 750041              +79 	ii	YIELD$			. let other threads ahead
00:002F58 3E0F47              +80 	lcal	iattend			. traffic rx / waiting tx?
00:002F59 B60F65              +81 	j	icarryon		. yes
  :                            82 
(+03)0f
00:002F5A CF0004              +83 	dl	activity_revision	
00:002F5B DF0096              +84 	dan	DAYCLOCK$U		. 
00:002F5C A60F68              +85 	jpa	icarryalong		. keep going
  :                            86 					. but don't move the time out
  :                            87 
  :                            88 	. continuous execute frame end and no net activity
  :                            89 	. do a granule of cool
  :                            90 
00:002F5D 65FFFF              +91 	la	-1,,xi
00:002F5E 75007D              +92 	ii	ENERGY$			. advise other cores to cool of they want
  :                            93 					. and if they pass thru thread switch
(+03)0f
00:002F5F CF0002              +94 	dl	takt
00:002F60 1C0067              +95 	outB	chill$down
00:002F61 140066              +96 	outA	INDICATION$		. a granule of chill
  :                            97 
00:002F62 650000              +98 	la	0,,xi
00:002F63 75007D              +99 	ii	ENERGY$			. advise other cores to go for it
00:002F64 350000              +100 	lret	0			. don't restart execution timeframe
  :                            101 
  :                            102 icarryon				. restart continuous time frame
00:002F65 CF0096              +103 	dl	DAYCLOCK$U
(+03)0f
00:002F66 D70000              +104 	da	akt			. (ACTIVITY_SPACE:d)
  :                            105 					. change from literal to variable
(+03)0f
00:002F67 C70004              +106 	ds	activity_revision
  :                            107 
  :                            108 icarryalong
00:002F68 350000              +109 	lret	0
  :                            101 
  :                            102 	$if		RX_FRAGMENTS
  :                            103 	$include	rasm77
  :                            104 	$endif
  :                            105 
  :                            106 .	$include	ifconfig	. moved to drivers bank
  :                            107 .					. and slightly changed
  :                            108 .	$include	../async/async1
  :                            109 
  :                            110: 	$include	multiarp
  :                            1 $(0)
  :                            2 
  :                            3 xarp		. maintain timers
  :                            4 		.  any that time out knock them down
  :                            5 		.  and sell any outgoing dgrams queued on them
  :                            6 
(+01)0f
00:002F69 400000              +7 	lr	i_f_pointer_array
(+01)10
00:002F6A 5D0001              +8 	ly	ifxpointer(1),,xi
00:002F6B B60F70              +9 	j	interface?
  :                            10 interface!
00:002F6C 50B000              +11 	lx	0, y
00:002F6D 8D0001              +12 	ay	1,,xi
00:002F6E 70A03F              +13 	tz	this_if:xarp
00:002F6F FFA03F              +14 	call	this_if:xarp
  :                            15 interface?
00:002F70 1E0F6C              +16 	jdr	interface!
00:002F71 350000              +17 	lret	0
  :                            18 
  :                            19 arp_rx		. it's ARP, we glean it
  :                            20 		. restart timers
  :                            21 		. send queued outgoing requests
  :                            22 
00:002F72 70A03C              +23 	tz	this_if:arp_rx
00:002F73 FFA03C              +24 	call	this_if:arp_rx
00:002F74 350000              +25 	lret	0
  :                            111 
  :                            112 $(0)
  :                            113 .	$include		wprotect
  :                            114 ipv4_high
  :                            115         $do     $<256,$(0:256)
                                        $do     $(0)>4000,      ;
  :                            117         $note   check the literal table is still within 4095
  :                            118 
[ipv4_high][000000000000000000000000000000000000000000000f75]
  :                            119 	$trace	ipv4_high
[$zenith][000000000000000000000000000000000000000000000fe8]
  :                            120 	$trace	$zenith
  :                            121 
  :                            122 	$do	$zenith>4096,	$flag	restructure IPV4_BANK
  :                            123 
  :                            124 	$path		../netapps2
  :                            125: 	$include	ap_bank
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40: 	$include	../lib/register.def
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 LAST_BYTE_READ	$equ	d$save3
  :                            41 BYTES		$equ	d$save
  :                            42 QUAD		$equ	8
  :                            43 TRIPLE		$equ	9
  :                            44 SIGNS		$equ	d$save1
  :                            45 SCALE_TRIPPED	$equ	d$save2	. these are the same register
  :                            46 SCALE		$equ	d$save2	. so negative scale is 1s complement
  :                            47 
  :                            48 
  :                            49 "$FINESSE"      $equ    1	. this isn't a register. It causes
  :                            50 				. the scale of floating numbers in integer range
  :                            51 				. to be adjusted in fixed point
  :                            52 				. instead of being finally adjusted in
  :                            53 				. floating point with possible roundings
  :                            54 				. when scannning character to float
  :                            55 
  :                            56 
  :                            41: 	$include	../lib/alib.def
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 .	BYTES		$equ	d$save
  :                            41 
  :                            42 
  :                            43 floating_scan		$equ	fscana
  :                            44 floating_edit		$equ	fedita
  :                            45 floating_iedit		$equ	feditia
  :                            46 floating_edit192	$equ	fedit192a
  :                            47 symbol_scan		$equ	fsymbola
  :                            48 floating_scan192	$equ	fscan192a
  :                            49 integer_edit		$equ	ieditua
  :                            50 edit			$equ	iedita
  :                            51 edits			$equ	ieditas
  :                            52 edit48			$equ	iedit48a
  :                            53 edit48u			$equ	iedit48ua
  :                            54 edit48s			$equ	iedit48as
  :                            55 edit72			$equ	iedit72a
  :                            56 edit72u			$equ	iedit72ua
  :                            57 edit72s			$equ	iedit72as
  :                            58 
  :                            59 iscan_skip		$equ	iscan_skipa
  :                            60 
  :                            61 iscan			$equ	iscana
  :                            62 iscan48			$equ	iscan48a
  :                            63 iscan72			$equ	iscan72a
  :                            64 
  :                            65 otext			$equ	textoa
  :                            66 
  :                            67 rstream_scan_net	$equ	rstream_scana
  :                            68 token_net		$equ	tokena
  :                            69 . fediti			$equ	feditia
  :                            42: 	$include	../lib/i72.def
  :                            1 p	$proc
  :                            2 i72a*	$name
  :                            3 	dl	p(1)+1		. addend
  :                            4 	da	p(2)+1		. addend
  :                            5 	ds	p(3)+1		. target
  :                            6 
  :                            7 	sc	b		. carry
  :                            8 	ab	p(1)		. addend high order word
  :                            9 	ab	p(2)		. addend high order word 
  :                            10 	sb	p(3)		. target
  :                            11 	$end
  :                            12 
  :                            13 p	$proc
  :                            14 i72an*	$name
  :                            15 
  :                            16 	dl	p(1)+1		. minuend
  :                            17 	dan	p(2)+1		. subtrahend
  :                            18 	ds	p(3)+1		. target
  :                            19 
  :                            20 	sc	b		. carry
  :                            21 	ab	-1,,xi		. or borrow
  :                            22 	ab	p(1)		. minuend high order word
  :                            23 	anb	p(2)		. subtrahend high order word
  :                            24 	sb	p(3)		. target
  :                            25 	$end
  :                            26 
  :                            27 p	$proc
  :                            28 i72compare* $name
  :                            29 	dl	p(1)+1		. test subtract two low order words
  :                            30 	dan	p(2)+1		. of each comparand
  :                            31 	sc	a
  :                            32 	aa	-1,,xi		. calculate borrow
  :                            33 	aa	p(1)		. test subtract high order word
  :                            34 	ana	p(2)		. of each comparand
  :                            35 	$end			. result < = > in a, unsigned result in carry
  :                            36 
  :                            37 p	$proc
  :                            38 i72a48*	$name			. add 48 bits to 72 giving 72
  :                            39 	dl	p(1)+1
  :                            40 	da	p(2)
  :                            41 	ds	p(3)+1
  :                            42 	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
  :                            43 	saa	24
  :                            44 	sc	b		. carry
  :                            45 	ab	a
  :                            46 	ab	p(1)		. high order word longer field
  :                            47 	sb	p(3)
  :                            48 	$end
  :                            49 
  :                            50 p	$proc
  :                            51 i72an48* $name			. take 48 bits fom 72 giving 72
  :                            52 	dl	p(1)+1
  :                            53 	dan	p(2)+1
  :                            54 	ds	p(3)+1
  :                            55 	sc	b
  :                            56 	ab	-1,,xi		. borrow
  :                            57 	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
  :                            58 	saa	24		. signs shorter field
  :                            59 	ab	a
  :                            60 	la	p(1)		. high order word longer field	
  :                            61 	ana	b
  :                            62 	sa	p(3)	
  :                            63 	$end
  :                            64 
  :                            65 p	$proc
  :                            66 i72compare48* $name
  :                            67 	dl	p(1)+1		. test subtract two low-order words
  :                            68 	dan	p(2)
  :                            69 	sc	b
  :                            70 	ab	-1,,xi		. borrow
  :                            71 	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
  :                            72 	saa	24		. signs shorter field
  :                            73 	la	p(1)		. high order word longer field
  :                            74 	ana	b		. test subtract high order word. result < = > in a
  :                            75 	$end
  :                            76 
  :                            77 p	$proc			. add 48 bits to 48 giving 72
  :                            78 i72a48_48* $name
  :                            79 	dl	p(1)
  :                            80 	da	p(2)
  :                            81 	ds	p(3)+1
  :                            82 	saa	24
  :                            83 	sa	p(3)
  :                            84 	$end
  :                            85 
  :                            86 p	$proc
  :                            87 i72an48_48* $name		. subtract 48 bits from 48 giving 72
  :                            88 	dl	p(1)
  :                            89 	dan	p(2)
  :                            90 	ds	p(3)+1
  :                            91 	saa	24
  :                            92 	sa	p(3)
  :                            93 	$end
  :                            94 
  :                            95 p	$proc
  :                            96 i48m*	$name
  :                            97 	dl	p(1)
  :                            98 	c	(m48_24)	p(2)
  :                            99 	$if	p()>2
  :                            100 	sa	p(3)
  :                            101 	dl	6
  :                            102 	ds	p(3)+1
  :                            103 	$endif
  :                            104 	$end
  :                            105 
  :                            106 p	$proc
  :                            107 i48m48*	$name
  :                            108 	dl	p(1)
  :                            109 	c	(m48_48)	p(2),,long
  :                            110 	$do	p()>2,	qs	p(3)
  :                            111 	$end
  :                            112 
  :                            113 p	$proc
  :                            114 i72m*	$name
                                	c	(i72_multiply)	p(1),,triple	;	. multiplicand 3 data words
                                				p(2)		;	. multiplier 1 data word
  :                            117 				p(3),,i			. product address pointer
  :                            118 	$end
  :                            119 
  :                            120 p	$proc
  :                            121 i72m48*	$name
  :                            122 	la	p(1)
  :                            123 	dsa	24
  :                            124 	ds	6
  :                            125 	dl	p(1)+1
  :                            126 	c	(x72_m72_48)	p(2),,long
  :                            127 	$if	p()>2
  :                            128 	ds	p(3)+1
  :                            129 	la	7
  :                            130 	sa	p(3)
  :                            131 	$endif
  :                            132 	$end
  :                            133 
  :                            134 p	$proc
  :                            135 i72m72*	$name
  :                            136 	c	(im72_72)	p(1),,i p(2),,i p(3),,i
  :                            137 	$end
  :                            138 
  :                            139 p	$proc
  :                            140 i48d48*	$name
  :                            141 	dl	p(1)
  :                            142 	c	(d48_48)	p(2),,long
  :                            143 	$do	p()>2,	ds	p(3)
  :                            144 	$end
  :                            145 
  :                            146 p	$proc
  :                            147 i72d*	$name
                                	c	(i72_divide)	p(1),,triple	;	. dividend 3 data words
                                				p(2)		;	. divisor 1 data word
                                				p(3),,i		;	. quotient address pointer
  :                            151 				p(4),,i			. remainder address pointer optional
  :                            152 	$end
  :                            153 
  :                            154 p	$proc
  :                            155 i72d48*	$name
  :                            156 	la	p(1)
  :                            157 	dsa	24
  :                            158 	ds	6
  :                            159 	dl	p(1)+1
  :                            160 	c	(x72_d72_48)	p(2),,long
  :                            161 	$if	p()>2
  :                            162 	ds	p(1)+1
  :                            163 	la	7
  :                            164 	sa	p(1)
  :                            165 	$endif
  :                            166 	$end
  :                            167 
  :                            168 p	$proc
  :                            169 i72d72*	$name
  :                            170 	c	(id72_72)	p(1),,i	p(2),,i	p(3),,i	p(4),,i
  :                            171 	$endif
  :                            172 	$end
  :                            43: 	$include	../lib/144.def
  :                            1 f	$func
  :                            2 "$normalised"* $name
  :                            3 	$return	+(f(1, 3)/*f(1, 1)-1--f(1, 3)/*f(1, 2)-1)**1
  :                            4 	$end
  :                            5 
  :                            6 f	$func
  :                            7 "$i_f_part"* $name	0	
  :                            8 "$integer"*  $name	1
  :                            9 "$fraction"* $name	2
  :                            10 	$sterm	'.'
  :                            11 "$parts" $set	f(1, 1:)
  :                            12 "$int"	$set	f(1, 1:1)
  :                            13 "$fra"	$set	f(1, 1:2)
  :                            14 	$sterm	':'
  :                            15 	$do	p(0, 0)="$integer",	$return	$int
  :                            16 	$do	p(0, 0)="$fraction",	$return	$fra
  :                            17 	$return	$parts
  :                            18 	$end
  :                            19 
  :                            20 
  :                            21 .	e$E function for applications which only want floating point
  :                            22 .	users may put an e in a number string and expect masmx to catch on
  :                            23 .	but masmx won't even realise that's floating point without a . point
  :                            24 .	masmx native exponent operators are *+ *- but it sees e after . point
  :                            25 .	e$E sees e in any number string. You get here if the input didn't normalise
  :                            26 
  :                            27 f	$func
  :                            28 "e$E"*	$name
  :                            29 	$sterm	'e'
                                	$do	f(1, 1:)=2,	;	. 'e' between two parts
  :                            31 	$return	f(1, 1:1)z*+f(1, 1:2)	. 7-word floating value from DIGITSeDIGITS
  :                            32 	$sterm	'E'
                                	$do	f(1, 1:)=2,	;	. 'E' between two parts
  :                            34 	$return	f(1, 1:1)z*+f(1, 1:2)	. 7-word floating value from digitsEdigits
  :                            35 	$return	f(1, 1)z*+0		. 7-word floating value from integer string
  :                            36 	$end
  :                            37 
  :                            38 p	$proc
  :                            39 major_minor* $name
  :                            40 f	$func
  :                            41 normalise* $name
  :                            42 ?	$do	72,	$do	((f(1, 1)/*72-?)--signs)**1,	$return	?-1
  :                            43 	$return	?
  :                            44 	$end
  :                            45 	$do	$o('U'),	$trace	p(1, 1)
  :                            46 
  :                            47 	$twos_complement 0			. in case of -LABEL where label is a floating value
  :                            48 sum	$set,168	p(1, 1)
  :                            49 	$twos_complement 1
  :                            50 	$if		$normalised(168,144,sum)=0
  :                            51 	 $if		sum=-1			. it was -0 or -0.0
  :                            52 	 $elseif	sum=0			. it was +0 or +0.0 , or an unavailable label
  :                            53 	 $elseif	$t(p(1, 1))		. integer with a name
  :                            54 sum	 $set,168	p(1, 1)*+0		. not a number string
  :                            55 	 $else
  :                            56 sum	 $set		e$E(p(1, 1))
  :                            57 	 $sterm		':'			. e$E changes $sterm
  :                            58 	 $endif
  :                            59 	$endif
  :                            60 
  :                            61 signs	$set	sum*/-167
  :                            62 	$do	signs^=sum*/-167,	$flag	unable to fix sign correctly
  :                            63 
  :                            64 	+	sum/*72q
  :                            65 
  :                            66 	$if	1
  :                            67 residual_normalising_count	$set	normalise(sum)
  :                            68 	$if	residual_normalising_count<72
  :                            69 residual_scale	$set	(16777215**((sum--signs)/*144))-72-residual_normalising_count
  :                            70 	$do	residual_scale<0,	$flag	2nd exponent underflow
  :                            71 	$else
  :                            72 residual_scale	$set	0
  :                            73 	$endif
  :                            74 
                                	+(residual_scale--signs)*/72;
                                	++(sum*/residual_normalising_count)**((1*/72)-1);
  :                            77 	++(signs**(1*/residual_normalising_count)-1)q
  :                            78 
  :                            79 	$else
  :                            80 
  :                            81 residual_character	$set	(signs--(sum*/-144))-72
  :                            82 residual_mantissa	$set	sum**(1*/72)-1
  :                            83 residual_normalising_count $set	normalise(residual_mantissa)
  :                            84 	$if	residual_normalising_count<72
  :                            85 	$do	residual_character-residual_normalising_count<0,	$flag	2nd exponent underflow
  :                            86 residual_mantissa	$set	residual_mantissa*/residual_normalising_count++signs**(1*/residual_normalising_count)-1
  :                            87 residual_character	$set	residual_character-residual_normalising_count--signs
  :                            88 	$else
  :                            89 residual_character	$set	signs
  :                            90 	$endif
  :                            91 	+	residual_character*/72++residual_mantissa**(1*/72)-1q
  :                            92 	$endif
  :                            93 	$end
  :                            94 
  :                            44: 	$include	../lib/ascii.def
  :                            1 
  :                            2 HT	$equ	9
  :                            3 CR	$equ	0d
  :                            4 LF	$equ	10
  :                            5 SUB	$equ	26
  :                            6 ESC	$equ	27
  :                            7 HORIZONTAL_TAB $equ HT
  :                            45: 	$include	../fponline/fponline.def
  :                            1 X_EXIT		$equ	0
  :                            2 X_LOAD		$equ	1
  :                            3 X_LOAD_NEGATIVE $equ 	2
  :                            4 X_PUSH		$equ	3
  :                            5 X_ADD		$equ	4
  :                            6 X_ADD_NEGATIVE $equ	5
  :                            7 X_MULTIPLY	$equ	6
  :                            8 X_DIVIDE	$equ	7
  :                            9 X_POP_ADD	$equ	8
  :                            10 X_POP_ADD_NEGATIVE $equ 9
  :                            11 X_POP_MULTIPLY     $equ 10
  :                            12 X_POP_DIVIDE	$equ	11
  :                            13 X_SQUARE_ROOT	$equ	12
  :                            14 X_SINE		$equ	13
  :                            15 X_SQUARE	$equ	14
  :                            16 X_CUBE_ROOT	$equ	15
  :                            17 X_CUBE		$equ	16
  :                            18 X_COSINE	$equ	17
  :                            19 X_TANGENT	$equ	18
  :                            20 X_COTANGENT	$equ	19
  :                            21 X_SINE96	$equ	20
  :                            22 X_COSINE96	$equ	21
  :                            23 X_TANGENT96	$equ	22
  :                            24 X_COTANGENT96	$equ	23
  :                            25 X_FRACTION	$equ	24
  :                            26 X_INTEGER	$equ	25
  :                            27 X_CODES		$equ	26
  :                            28 
  :                            29 FPONLINE_MESSAGE_LIMIT $equ 200
  :                            30 FPONLINE_PORT	$equ	131
  :                            31 
  :                            32 "$command" $form	24, 24
  :                            33 
  :                            34 f	$func
  :                            35 "$192"*	$name
  :                            36 pointer	$equf	$0(major_minor	f(1, 1))
  :                            37 	$return	pointer
  :                            38 	$end
  :                            39 
  :                            40 .	4-function macros connecting fponline
  :                            41 .	to masmx directive $xqt_fp
  :                            42 
  :                            43 .	these macros map to 4-function operators + - * / in expressions
  :                            44 .	starting with load = get the left side of the first expression step
  :                            45 .	all about getting a 192-bit floating result
  :                            46 .	in registers a b mantissa2 mantissa3 8 9 10 11
  :                            47 
  :                            48 p	$proc
  :                            49 "$x_load"* $name
  :                            50 	$command	X_LOAD, p(1, 1)
  :                            51 	$end
  :                            52 
  :                            53 p	$proc
  :                            54 "$x_load_negative"* $name
  :                            55 	$command	X_LOAD_NEGATIVE, p(1, 1)
  :                            56 	$end
  :                            57 
  :                            58 p	$proc
  :                            59 "$x_reserve"* $name
  :                            60 	$command	X_PUSH, p(1, 1)
  :                            61 	$end
  :                            62 
  :                            63 p	$proc
  :                            64 "$x_"* $name
  :                            65 	$end
  :                            66 
  :                            67 p	$proc
  :                            68 "$x_add"* $name
  :                            69 	$command	X_ADD, p(1, 1)
  :                            70 	$end
  :                            71 
  :                            72 p	$proc
  :                            73 "$x_subtract"* $name
  :                            74 	$command	X_ADD_NEGATIVE, p(1, 1)
  :                            75 	$end
  :                            76 
  :                            77 p	$proc
  :                            78 "$x_multiply"* $name
  :                            79 	$command	X_MULTIPLY, p(1, 1)
  :                            80 	$end
  :                            81 
  :                            82 p	$proc
  :                            83 "$x_divide"* $name
  :                            84 	$command	X_DIVIDE, p(1, 1)
  :                            85 	$end
  :                            86 
  :                            87 p	$proc
  :                            88 "$x_retrieve_add"* $name
  :                            89 	$command	X_POP_ADD, 0
  :                            90 	$end
  :                            91 
  :                            92 p	$proc
  :                            93 "$x_retrieve_subtract"* $name
  :                            94 	$command	X_POP_ADD_NEGATIVE, 0
  :                            95 	$end
  :                            96 
  :                            97 p	$proc
  :                            98 "$x_retrieve_multiply"* $name
  :                            99 	$command	X_POP_MULTIPLY, 0
  :                            100 	$end
  :                            101 
  :                            102 p	$proc
  :                            103 "$x_retrieve_divide"* $name
  :                            104 	$command	X_POP_DIVIDE, 0
  :                            105 	$end
  :                            106 
  :                            107 .	end of 4_function macros connecting fponline
  :                            108 .	to masmx directive $xqt_fp
  :                            109 
  :                            110 
  :                            111 
  :                            112 .	start of macros connecting fponline to math lib
  :                            113 .	these are command names
  :                            114 .	all about getting a 192-bit floating result
  :                            115 .	in registers a b mantissa2 mantissa3 8 9 10 11
  :                            116 
  :                            117 p	$proc
  :                            118 _root*	$name
  :                            119 	$if		p()
  :                            120 	$xqt_fp,$192	p()
  :                            121 	$else
  :                            122 	$xqt_fp,$192	$TOTAL
  :                            123 	$endif
  :                            124 	$command	X_SQUARE_ROOT, 0
  :                            125 	$end
  :                            126 
  :                            127 p	$proc
  :                            128 _square* $name
  :                            129 	$if		p()
  :                            130 	$xqt_fp,$192	p()
  :                            131 	$else
  :                            132 	$xqt_fp,$192	$TOTAL
  :                            133 	$endif
  :                            134 	$command	X_SQUARE,	0
  :                            135 	$end
  :                            136 
  :                            137 p	$proc
  :                            138 _root3*	$name
  :                            139 	$if		p()
  :                            140 	$xqt_fp,$192	p()
  :                            141 	$else
  :                            142 	$xqt_fp,$192	$TOTAL
  :                            143 	$endif
  :                            144 	$command	X_CUBE_ROOT	0
  :                            145 	$end
  :                            146 
  :                            147 p	$proc
  :                            148 _cube*	$name
  :                            149 	$if		p()
  :                            150 	$xqt_fp,$192	p()
  :                            151 	$else
  :                            152 	$xqt_fp,$192	$TOTAL
  :                            153 	$endif
  :                            154 	$command	X_CUBE		0
  :                            155 	$end
  :                            156 
  :                            157 p	$proc
  :                            158 _sine*	$name
  :                            159 	$if		p()
  :                            160 	$xqt_fp,$192	p()
  :                            161 	$else
  :                            162 	$xqt_fp,$192	$TOTAL
  :                            163 	$endif
  :                            164 	$command	X_SINE, 	0
  :                            165 	$end
  :                            166 
  :                            167 p	$proc
  :                            168 _cosine* $name
  :                            169 	$if		p()
  :                            170 	$xqt_fp,$192	p()
  :                            171 	$else
  :                            172 	$xqt_fp,$192	$TOTAL
  :                            173 	$endif
  :                            174 	$command	X_COSINE,	0
  :                            175 	$end
  :                            176 
  :                            177 p	$proc
  :                            178 _tangent* $name
  :                            179 	$if		p()
  :                            180 	$xqt_fp,$192	p()
  :                            181 	$else
  :                            182 	$xqt_fp,$192	$TOTAL
  :                            183 	$endif
  :                            184 	$command	X_TANGENT,	0
  :                            185 	$end
  :                            186 
  :                            187 p	$proc
  :                            188 _cotan*	$name
  :                            189 	$if		p()
  :                            190 	$xqt_fp,$192	p()
  :                            191 	$else
  :                            192 	$xqt_fp,$192	$TOTAL
  :                            193 	$endif
  :                            194 	$command	X_COTANGENT,	0
  :                            195 	$end
  :                            196 
  :                            197 p	$proc
  :                            198 __sine*	$name
  :                            199 	$if		p()
  :                            200 	$xqt_fp,$192	p()
  :                            201 	$else
  :                            202 	$xqt_fp,$192	$TOTAL
  :                            203 	$endif
  :                            204 	$command	X_SINE96,	0
  :                            205 	$end
  :                            206 
  :                            207 p	$proc
  :                            208 __cosine* $name
  :                            209 	$if		p()
  :                            210 	$xqt_fp,$192	p()
  :                            211 	$else
  :                            212 	$xqt_fp,$192	$TOTAL
  :                            213 	$endif
  :                            214 	$command	X_COSINE96,	0
  :                            215 	$end
  :                            216 
  :                            217 p	$proc
  :                            218 __tangent* $name
  :                            219 	$if		p()
  :                            220 	$xqt_fp,$192	p()
  :                            221 	$else
  :                            222 	$xqt_fp,$192	$TOTAL
  :                            223 	$endif
  :                            224 	$command	X_TANGENT96,	0
  :                            225 	$end
  :                            226 
  :                            227 p	$proc
  :                            228 __cotan* $name
  :                            229 	$if		p()
  :                            230 	$xqt_fp,$192	p()
  :                            231 	$else
  :                            232 	$xqt_fp,$192	$TOTAL
  :                            233 	$endif
  :                            234 	$command	X_COTANGENT96,	0
  :                            235 	$end
  :                            236 
  :                            237 p	$proc
  :                            238 _fraction* $name
  :                            239 	$if		p()
  :                            240 	$xqt_fp,$192	p()
  :                            241 	$else
  :                            242 	$xqt_fp,$192	$TOTAL
  :                            243 	$endif
  :                            244 	$command	X_FRACTION,	0
  :                            245 	$end
  :                            246 
  :                            247 p	$proc
  :                            248 _integer* $name
  :                            249 	$if		p()
  :                            250 	$xqt_fp,$192	p()
  :                            251 	$else
  :                            252 	$xqt_fp,$192	$TOTAL
  :                            253 	$endif
  :                            254 	$command	X_INTEGER,	0
  :                            255 	$end
  :                            256 
  :                            46: 	$include	../def.app/iframes.def
  :                            1 . APPLICATION(1)	$equ	00B000
  :                            2 . APPLICATION(2)	$equ	00C000
  :                            3 . APPLICATION(3)	$equ	00D000
  :                            4 . APPLICATION(4)	$equ	00E000
  :                            5 . APPLICATION(5)	$equ	00F000
  :                            47: 	$include	../stream/stream.def
  :                            1 stdin	$equf	0,,xi
  :                            2 stdout	$equf	1,,xi
  :                            3 stderr	$equf	2,,xi
  :                            4 
  :                            5 p	$proc
  :                            6 scanf*	$name
  :                            7 	fscanf	stdin	p()
  :                            8 	$end
  :                            9 
  :                            10 p	$proc
  :                            11 fscanf*	$name
  :                            12 	c	(__fscanf) p()
  :                            13 	$end
  :                            14 
  :                            15 p	$proc
  :                            16 fprintf* $name
  :                            17 	c	(__fprintf)	p()
  :                            18 	$end
  :                            19 
  :                            20 p	$proc
  :                            21 printf*	$name
  :                            22 	fprintf	stdout	p()
  :                            23 	$end
  :                            24 
  :                            25 p	$proc
  :                            26 sscanf*	$name
  :                            27 	c	(__sscanf) p()
  :                            28 	$end
  :                            29 
  :                            30 p	$proc
  :                            31 sprintf* $name
  :                            32 	c	(__sprintf) p()
  :                            33 	$end
  :                            34 
  :                            35 p	$proc
  :                            36 fread*	$name
  :                            37 _LDES1	$set	0
  :                            38 _LDES2	$set	0
  :                            39 	$do	$t(p(2, 1))=0,	$do	p(2)<3,_LDES1,	$set	xi
  :                            40 	$do	$t(p(3, 1))=0,	$do	p(3)<3,_LDES2,	$set	xi
  :                            41 	c	(readll)	p(4)	p(1)	p(2),,_LDES1	p(3),,_LDES2
  :                            42 	$end
  :                            43 
  :                            44 p	$proc
  :                            45 fwrite*	$name
  :                            46 _LDES1	$set	0
  :                            47 _LDES2	$set	0
  :                            48 	$do	$t(p(2, 1))=0,	$do	p(2)<3,_LDES1	$set	xi
  :                            49 	$do	$t(p(3, 1))=0,	$do	p(3)<3,_LDES2	$set	xi
  :                            50 	c	(writell)	p(4)	p(1)	p(2),,_LDES1	p(3),,_LDES2
  :                            51 	$end
  :                            52 
  :                            53 p	$proc
  :                            54 fgets*	$name
  :                            55 gets*	$name
  :                            56 
  :                            57 
  :                            58 	$if	p()<2
  :                            59 _LEN	$equf	99,,xi
  :                            60 	$note	maximum bytes arbitrarily 99 columns. Add 2nd argument HOW_MANY,,xi|i or [*]INTEGER_VARIABLE{,,w0|t1|t2|t3} for <> 33 words
  :                            61 	$else
  :                            62 	$if	p(2)<2
  :                            63 _LEN	$equf	p(2, 1),,xi
  :                            64 	$do	p(2, *1), $note length interpreted as  *LOCATION,,xi = LOCATION,,w0. For *pointer->variable type *POINTER{,,w0|t1|t2|t3}
  :                            65 	$elseif	p(2)<3
  :                            66 _LEN	$equf	p(2),,i
  :                            67 	$do	p(2, 2)^=0,	$note	length interpreted as  VALUE,INDEX,i. For variable type VALUE,INDEX{,w0|t1|t2|t3} 
  :                            68 	$else
  :                            69 _LEN	$equf	p(2)
  :                            70 	$endif
  :                            71 	$endif
  :                            72 
  :                            73 	c	(__fgets)	p(3)	p(1)	_LEN
  :                            74 
  :                            75 	dsr	24		. result in a whatever sort of file it was
  :                            76 	wsr	24		. zero->end of buffer and result in a again
  :                            77 
  :                            78 	jnb	$+3		. bad status treated as nothing received
  :                            79 	jzb	$+2		. nothing received translates to no pointer handed back
  :                            80 	la	p(1)		. nonzero result is the pointer the caller already knows
  :                            81 				. but the real answer is in register b
  :                            82 	$end
  :                            83 
  :                            84 p	$proc
  :                            85 fflush* $name
  :                            86 	c	(fsync)	p(1, 1)
  :                            87 	$end
  :                            88 
  :                            48 
  :                            49 LIBRARY	$set		LIBRARY_XDR
  :                            50 
  :                            51 FPSERVER_PORT	$equ	128
  :                            52 FPSERVER_PORT2	$equ	130
  :                            53 CALIBRATE_PORT	$equ	0	.	4610
  :                            54 AGENT1_PORT	$equ	0	.	4611
  :                            55 
  :                            56 
00:002f75+[0001]18:000000
00:002f76+[0002]30:000000000000
00:002f78+[0003]18:000000
00:002f79+(03)18:000000002626
00:002f7b+000000000001
00:002f7d+00015F
00:002f7e+000160
00:002f7f+110000
00:002f80+060000
00:002f81+C00000
00:002f82+400000
00:002f83+FC0000
00:002f84+BC0000
00:002f85+[000A]18:000000
00:002f86+[000B]18:000000
00:002f87+[000C]18:000000
00:002f88+[000D]18:000000
00:002f89+[000E]18:000000
00:002f8a+3FFFFF
00:002f8b+030000
00:002f8c+000000
00:002f8d+FF0000
00:002f8e+010000
00:002f8f+00FFFF
00:002f90+000000000020000010000008
00:002f94+[000F]18:000000
00:002f95+00008B
00:002f96+7FFFFF
00:002f97+0000B6
00:002f98+00FF00
00:002f99+000000000000000000000000
00:002f9d+080000
00:002f9e+800000
00:002f9f+200000
00:002fa0+0000B3
00:002fa1+0000B7
00:002fa2+02F000
00:002fa3+02F008
00:002fa4+0000A9
00:002fa5+02F001
00:002fa6+02F006
00:002fa7+00025F
00:002fa8+02F028
00:002fa9+000000010000
00:002fab+00025E
00:002fac+00008D
00:002fad+02F02A
00:002fae+0000AF
00:002faf+02F003
00:002fb0+006002004500000204000000
00:002fb4+006012004500000204000000
00:002fb8+005011004500
00:002fba+005018004500
00:002fbc+[0011]18:000000
00:002fbd+01FFFF
00:002fbe+005004
00:002fbf+005004004500
00:002fc1+005010004504
00:002fc3+005010004500
00:002fc5+02F004
00:002fc6+[0012]18:000000
00:002fc7+BC0006
00:002fc8+00008E
00:002fc9+02F02D
00:002fca+0927C0
00:002fcb+000000000000
00:002fcd+000083
00:002fce+000082
00:002fcf+00008C
00:002fd0+0000AE
00:002fd1+0000A8
00:002fd2+3F0000
00:002fd3+000093
00:002fd4+000092
00:002fd5+0000B0
00:002fd6+0000B1
00:002fd7+00F000
00:002fd8+BC002A
00:002fd9+00000000000A
00:002fdb+[0013]18:000000
00:002fdc+100000
00:002fdd+000087
00:002fde+000088
00:002fdf+FFFFFF000000000040000004
00:002fe3+000000000000FFFFFF000000
00:002fe7+47B000
  :                            57 $(0::A_PROTOS_BANK1)
00:005000 B60141              +58 telnet		$vector	telnet_i
00:005001 B60424              +59 http_server	$vector	http_serve
00:005002 B6004A              +60 fp_server	$vector	fp_96:fp_server
00:005003 B600AD              +61 fp_server_192	$vector	fp_192:fp_server
00:005004 B60504              +62 integer_server	$vector	iserve:integer_serve
00:005005 B60594              +63 fponline	$vector	fponline:launch
  :                            64 
  :                            65 		$if	SNMP_AGENT_THREADED
00:005006 B60AAA              +66 snmp_agent*	$vector	snmp_agent_launch
  :                            67 		$else
  :                            68 agent2*		$vector agent_2			. snmpv1
  :                            69 		$endif
  :                            70 
00:005007 B60D75              +71 subagent*	$vector subagent_insert
00:005008 B60D79              +72 subagent?*	$vector subagent_lookup
  :                            73 
  :                            74 	$if	CALIBRATE_PORT
  :                            75 calibration	$vector	calibrate
  :                            76 	$endif
  :                            77 
00:005009 B6031C              +78 online_xqt*	$vector	search_onlinexqt
00:00500A B60396              +79 run_start*	$vector	startups:run
00:00500B B60361              +80 initial_startups* $vector startups:initial
00:00500C B60417              +81 normal_string*	$vector	normal_s
  :                            82 
00:00500D B60E9C              +83 x72_orU*	$vector	x72oru
00:00500E B60EA8              +84 x72_andU*	$vector	x72andu
00:00500F B60EB4              +85 x72_xorU*	$vector	x72xoru
00:005010 B60D98              +86 x72_xtend*	$vector	x72xtend
00:005011 B60E71              +87 x72_sa*		$vector	x72sa
00:005012 B60E49              +88 x72_sl*		$vector	x72sl
00:005013 B60D9E              +89 x72_aU*		$vector	x72au
00:005014 B60DAB              +90 x72_anU*	$vector	x72anu
00:005015 B60DBA              +91 x72_m48_24*     $vector x48m24
00:005016 B60DC0              +92 x72_m72_24*	$vector	x72m24
00:005017 B60DC8              +93 x72_m48_48*     $vector x48m48
00:005018 B60DCE              +94 x72_m72_48*	$vector	x72m48
00:005019 B60DE7              +95 x72_m72_72*	$vector	x72m72
00:00501A B60E00              +96 x72_d72_24*	$vector	x72d24
00:00501B B60E11              +97 x72_d48_48*     $vector x48d48
00:00501C B60E17              +98 x72_d72_48*	$vector	x72d48
00:00501D B60E30              +99 x72_d72_72*	$vector	x72d72
  :                            100 
00:00501E B60EC0              +101 sysinfo*	$vector	sys_info
  :                            102 
00:00501F B60040              +103 app_threads*	$vector	athreads_start
00:005020 B60047              +104 app_protos*	$vector	a_protos_inline
  :                            105 
00:005021 3D0000              +106 	$do	48-$,	fret	0
00:005022 3D0000              +106 
00:005023 3D0000              +106 
00:005024 3D0000              +106 
00:005025 3D0000              +106 
00:005026 3D0000              +106 
00:005027 3D0000              +106 
00:005028 3D0000              +106 
00:005029 3D0000              +106 
00:00502A 3D0000              +106 
00:00502B 3D0000              +106 
00:00502C 3D0000              +106 
00:00502D 3D0000              +106 
00:00502E 3D0000              +106 
00:00502F 3D0000              +106 
  :                            107 
00:005030 B6076E              +108 fraction192*	$vector	ap_lib192:fraction
00:005031 B6078D              +109 integer192*	$vector	ap_lib192:integer
  :                            110 
00:005032 B607B6              +111 fraction96*	$vector	ap_lib96:fraction
00:005033 B607CF              +112 integer96*	$vector	ap_lib96:integer
  :                            113 
00:005034 B607FB              +114 sine192*	$vector	trig192:sine
00:005035 B60802              +115 cosine192*	$vector	trig192:cosine
00:005036 B60813              +116 tangent192*	$vector	trig192:tangent
00:005037 B6082A              +117 cotangent192*	$vector	trig192:cotangent
  :                            118 
00:005038 B60A0F              +119 sine96*		$vector	trig96:sine
00:005039 B60A18              +120 cosine96*		$vector	trig96:cosine
00:00503A B60A24              +121 tangent96*		$vector	trig96:tangent
00:00503B B60A35              +122 cotangent96*	$vector	trig96:cotangent
  :                            123 
00:00503C B606F7              +124 square192*	$vector	ap_lib192:square
00:00503D B606B2              +125 square_root192*  $vector ap_lib192:square_root
00:00503E B60758              +126 cube192*	$vector	ap_lib192:cube
00:00503F B60708              +127 cube_root192*	$vector	ap_lib192:cube_root
  :                            128 
  :                            129 athreads_start
  :                            130: 	$include	athreads
  :                            1 HTTP_THREADED	$equ	1
  :                            2 TELNET_THREADED	$equ	1
  :                            3 I_SERVER_THREADED $equ	1
  :                            4 SNMP_AGENT_THREADED $equ 1
  :                            5 
  :                            6 			$if	SNMP_AGENT_THREADED
                                	APPLICATION_PROTOCOLS	http_server	;
                                				telnet		;
                                				fponline	;
                                				snmp_agent	;
                                				integer_server	;
                                						;
00:005040 FF0EC5              +13 				initial_startups
00:005041 FF0EC6              +13 
00:005042 FF0EC7              +13 
00:005043 FF0EC8              +13 
00:005044 FF0EC9              +13 
00:005045 FF0ECA              +13 
  :                            14 
  :                            15 			$else
                                	APPLICATION_PROTOCOLS	http_server	;
                                				telnet		;
                                				fponline	;
  :                            19 				integer_server
  :                            20 			$endif
  :                            21 
00:005046 3D0000              +131 	fret		0
  :                            132 
  :                            133 a_protos_inline
  :                            134:         $include	a_protos
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 	$if	SNMP_AGENT_THREADED
00:005047 FF0ECB              +41 	APPLICATION_PROTOCOLS		fp_server fp_server_192
00:005048 FF0ECC              +41 
  :                            42 	$elseif	1
  :                            43 	APPLICATION_PROTOCOLS		fp_server fp_server_192 agent2
  :                            44 	$else
                                	APPLICATION_PROTOCOLS		fp_server	;
                                					fp_server_192	;
                                					calibration	;
  :                            48 					agent2
  :                            49 	$endif
00:005049 3D0000              +135         fret		0
  :                            136 
  :                            137: 	$include fpserver
  :                            1 fp_96	$tree
  :                            2 
  :                            3 $(1)
01:000425 000000              +4 socket1	+	0
01:000426 FFFFFF              +5 fp_bound -	1
  :                            6 portcb_lva	$res 1
  :                            7 portcb		$res 1
  :                            8 
  :                            9 $(0)
                                fp_server	$head_far	scalars(response_axw,	int	;		
                                					operator,	int	;
                                					left,		float	;
00:00504A FD0000              +13 					right,		float	)
00:00504B FD0000              +13 
00:00504C 8F0ECD              +13 
00:00504D 8F0ECD              +13 
  :                            14 
(+01)0f
00:00504E 700425              +15 	tz	socket1
00:00504F B6005D              +16 	j	fp_rx
00:005050 600ED1              +17 	la	(IPPROTO_UDP*/16)
00:005051 FF0ED2              +18 	call	(__socket)
(+01)0f
00:005052 200425              +19 	sa	socket1
00:005053 E600AA              +20 	jna	fp_error
  :                            21 
00:005054 9F0ED3              +22 	c	(bind) a (FPSERVER_PORT:d),,long
00:005055 F80004              +22 
00:005056 FCF003              +22 
00:005057 FF0ED5              +22 
00:005058 38000F              +22 
  :                            23 
  :                            24 .	lb, xi	FPSERVER_PORT
  :                            25 .	sb	7
  :                            26 .	z	6
  :                            27 .	call	(bind)
  :                            28 
(+01)0f
00:005059 200426              +29 	sa	fp_bound
00:00505A E600AA              +30 	jna	fp_error
  :                            31 
00:00505B CF000A              +32 	dl	10
(+01)0f
00:00505C C70427              +33 	ds	portcb_lva
  :                            34 
(+01)0f
00:00505D 780426              +35 fp_rx	tp	fp_bound
00:00505E B600AA              +36 	j	fp_error
  :                            37 
(+01)0f
00:00505F CF0427              +38 	dl	portcb_lva
00:005060 34002F              +39 	sabr	BSOCKET
  :                            40 
00:005061 68D006              +41 fp_rx1	lb	s:udp:socket_inq.head, b
00:005062 CE00AA              +42 	jzb	fp_no_traffic
  :                            43 
  :                            44 	$if	1
  :                            45 
00:005063 28000E              +46 	sb	fp
00:005064 650020              +47 	la	21+7+1+2+1,,xi
00:005065 FF0ED6              +48 	call	(udp_rtxbuffer)
00:005066 C600A6              +49 	jza	fp_release
00:005067 20F009              +50 	sa	response_axw
00:005068 60E003              +51 	la	descriptor:bytes
00:005069 68E006              +52 	lb	descriptor:apdata
00:00506A FF0ED7              +53 	call	(rstream_start_net)
  :                            54 
  :                            55 	$else
  :                            56 
  :                            57 	la	descriptor:bytes, b
  :                            58 	sa	BYTES
  :                            59 
  :                            60 	z	RDATAC
  :                            61 
  :                            62 	push	descriptor:apdata, b
  :                            63 	pop	q
  :                            64 
  :                            65 	la, xi	21+7+1+2+1
  :                            66 	call	(udp_rtxbuffer)
  :                            67 	jza	fp_release
  :                            68 
  :                            69 	ly	descriptor:apdata, a
  :                            70 	sa	response_axw
  :                            71 	sy	p
  :                            72 	z	WDATAC
  :                            73 	z	WDATA
  :                            74 
  :                            75 	$endif
  :                            76 
00:00506B FF0ED8              +77 	call	(floating_scan)
00:00506C 47F004              +78 	qs	left
  :                            79 
00:00506D FF0ED9              +80 	call	(symbol_scan)
00:00506E 20F008              +81 	sa	operator
  :                            82 
00:00506F FF0ED8              +83 	call	(floating_scan)
00:005070 47F000              +84 	qs	right
  :                            85 
00:005071 450000              +86 	lr, xi	0
00:005072 600013              +87 	la	LAST_BYTE_READ	.	LAST_BYTE_READ
00:005073 C5FFD4              +88 	aa, xi	-','
  :                            89 
00:005074 D6007A              +90 	jnza	fp_again
00:005075 FF0EDA              +91 	call	(iscan_skip)
00:005076 6D0001              +92 	lb, xi	1		.	nothing scanned
00:005077 CDFFFF              +93 	ab, xi	-1
00:005078 EE007A              +94 	jnb	fp_again
00:005079 400005              +95 	lr	b
  :                            96 
  :                            97 fp_again
00:00507A 60F008              +98 	la	operator
  :                            99 
00:00507B 680004              +100 	anu, xi	'+'
00:00507C DD002B              +100 
00:00507D CE0088              +101 	jzb	fp_add
00:00507E 680004              +102 	anu, xi	'-'
00:00507F DD002D              +102 
00:005080 CE008C              +103 	jzb	fp_add_negative
00:005081 680004              +104 	anu, xi	'*'
00:005082 DD002A              +104 
00:005083 CE0090              +105 	jzb	fp_multiply
00:005084 680004              +106 	anu, xi	'/'
00:005085 DD002F              +106 
00:005086 CE0094              +107 	jzb	fp_divide
00:005087 B60098              +108 	j	fp_nop
  :                            109 
  :                            110 fp_add
00:005088 4FF004              +111 	ql	left
  :                            112 fp_add_again
00:005089 67F000              +113 	fa	right
00:00508A 1E0089              +114 	jdr	fp_add_again
00:00508B B60099              +115 	j	fp_edit
  :                            116 
  :                            117 fp_add_negative
00:00508C 4FF004              +118 	ql	left
  :                            119 fp_add_negative_again
00:00508D 6FF000              +120 	fan	right
00:00508E 1E008D              +121 	jdr	fp_add_negative_again
00:00508F B60099              +122 	j	fp_edit
  :                            123 
  :                            124 fp_multiply
00:005090 4FF004              +125 	ql	left
  :                            126 fp_multiply_again
00:005091 77F000              +127 	fm	right
00:005092 1E0091              +128 	jdr	fp_multiply_again
00:005093 B60099              +129 	j	fp_edit
  :                            130 
  :                            131 fp_divide
00:005094 4FF004              +132 	ql	left
  :                            133 fp_divide_again
00:005095 7FF000              +134 	fd	right
00:005096 1E0095              +135 	jdr	fp_divide_again
00:005097 B60099              +136 	j	fp_edit
  :                            137 
00:005098 4FF004              +138 fp_nop	ql	left			. no operation
  :                            139 					. return scanned number if any
  :                            140 fp_edit
  :                            141 	$if	1
  :                            142 
00:005099 50F009              +143 	lx	response_axw
00:00509A 50A006              +144 	lx	descriptor:apdata, x
00:00509B FF0EDB              +145 	call	(wstream_start_net)
  :                            146 
  :                            147 	$else
  :                            148 
  :                            149 	z	BYTES
  :                            150 
  :                            151 	$endif
  :                            152 
00:00509C 75004E              +153 	ii	FP_XPO$FLAG		. must drain cached exponent overflow event
00:00509D 4F0EDC              +154 	ql	(-0.0)			. because fpser192 is also in this thread
  :                            155 					. also the event may have been in scan library
  :                            156 					. and not appear here as -0.0
00:00509E FF0EE0              +157 	call	(floating_iedit)
  :                            158 
00:00509F 600EE1              +159 	la	("":10:0:0)
00:0050A0 1D0018              +160 	wsr	24
  :                            161 	
00:0050A1 50F009              +162 	lx	response_axw
00:0050A2 600010              +163 	la	BYTES
00:0050A3 64C001              +164 	la, i	1, a
00:0050A4 20A003              +165 	sa	descriptor:bytes, x
  :                            166 
  :                            167 
00:0050A5 FF0EE2              +168 	call	(udp_acw_send)
  :                            169 
  :                            170 fp_release
(+01)0f
00:0050A6 500428              +171 	lx	portcb			. port structure in scalar frame
00:0050A7 FF0EE3              +172 	call	(release_udgram)
(+01)0f
00:0050A8 680428              +173 	lb	portcb			. port structure in scalar frame
00:0050A9 B60061              +174 	j	fp_rx1
  :                            175 fp_no_traffic
  :                            176 fp_error
  :                            177 
00:0050AA 54F00A              +178 	lx, i	$$frame, sp
00:0050AB 10000F              +179 	sx	sp
00:0050AC 3D0000              +180 	fret	0
  :                            181 	$root
  :                            138: 	$include fpser192
  :                            1 fp_192		$tree
  :                            2 $(1)
01:000429 000000              +3 socket1	+	0
01:00042A FFFFFF              +4 fp_bound -	1
  :                            5 portcb_lva	$res 1
  :                            6 portcb		$res 1
  :                            7 
  :                            8 $(0)
  :                            9 
  :                            10 
                                fp_server	$head_far	scalars(response_axw,	int	;
                                					operator,	int	;
                                					left,		8	;
00:0050AD FD0000              +14 					right,		8	)
00:0050AE FD0000              +14 
00:0050AF 8F0ECD              +14 
00:0050B0 8FF000              +14 
00:0050B1 8F0ECD              +14 
00:0050B2 8FF000              +14 
  :                            15 
(+01)0f
00:0050B3 700429              +16 	tz	socket1
00:0050B4 B600C2              +17 	j	fp_rx
00:0050B5 600ED1              +18 	la	(IPPROTO_UDP*/16)
00:0050B6 FF0ED2              +19 	call	(__socket)
(+01)0f
00:0050B7 200429              +20 	sa	socket1
00:0050B8 E60134              +21 	jna	fp_error
  :                            22 
00:0050B9 9F0EE4              +23 	c	(bind) a (FPSERVER_PORT2:d),,long
00:0050BA F80004              +23 
00:0050BB FCF003              +23 
00:0050BC FF0ED5              +23 
00:0050BD 38000F              +23 
  :                            24 
  :                            25 .	lb, xi	FPSERVER_PORT2
  :                            26 .	sb	7
  :                            27 .	z	6
  :                            28 .	call	(bind)
  :                            29 
(+01)0f
00:0050BE 20042A              +30 	sa	fp_bound
00:0050BF E60134              +31 	jna	fp_error
  :                            32 
00:0050C0 CF000A              +33 	dl	10
(+01)0f
00:0050C1 C7042B              +34 	ds	portcb_lva
  :                            35 
(+01)0f
00:0050C2 78042A              +36 fp_rx	tp	fp_bound
00:0050C3 B60134              +37 	j	fp_error
  :                            38 
(+01)0f
00:0050C4 CF042B              +39 	dl	portcb_lva
00:0050C5 34002F              +40 	sabr	BSOCKET
  :                            41 
00:0050C6 68D006              +42 fp_rx1	lb	s:udp:socket_inq.head, b
00:0050C7 CE0134              +43 	jzb	fp_no_traffic
  :                            44 
  :                            45 	$if	1
  :                            46 
00:0050C8 28000E              +47 	sb	fp			. take a copy of the input axw
00:0050C9 650036              +48 	la	43+7+1+2+1,,xi
00:0050CA FF0ED6              +49 	call	(udp_rtxbuffer)
00:0050CB C60130              +50 	jza	fp_release		. can't buffer  a response
  :                            51 					. so drop the question
00:0050CC 20F011              +52 	sa	response_axw
00:0050CD 60E003              +53 	la	descriptor:bytes
00:0050CE 68E006              +54 	lb	descriptor:apdata
00:0050CF FF0ED7              +55 	call	(rstream_start_net)
  :                            56 
  :                            57 	$else
  :                            58 
  :                            59 	la	descriptor:bytes, b
  :                            60 	sa	BYTES
  :                            61 
  :                            62 	z	RDATAC
  :                            63 
  :                            64 	push	descriptor:apdata, b
  :                            65 	pop	q
  :                            66 
  :                            67 	la, xi	43+7+1+2+1
  :                            68 	call	(udp_rtxbuffer)
  :                            69 	jza	fp_release
  :                            70 
  :                            71 	ly	descriptor:apdata, a
  :                            72 	sa	response_axw
  :                            73 	sy	p
  :                            74 	z	WDATAC
  :                            75 	z	WDATA
  :                            76 
  :                            77 	$endif
  :                            78 
00:0050D0 FF0EE6              +79 	call	(floating_scan192)
00:0050D1 47F008              +80 	qs	left
00:0050D2 4F0008              +81 	ql	$residue
00:0050D3 47F00C              +82 	qs	left+4
  :                            83 
00:0050D4 FF0ED9              +84 	call	(symbol_scan)
00:0050D5 20F010              +85 	sa	operator
  :                            86 
00:0050D6 FF0EE6              +87 	call	(floating_scan192)
00:0050D7 47F000              +88 	qs	right
00:0050D8 4F0008              +89 	ql	$residue
00:0050D9 47F004              +90 	qs	right+4
  :                            91 
00:0050DA 450000              +92 	lr, xi	0
00:0050DB 600013              +93 	la	LAST_BYTE_READ	.	LAST_BYTE_READ
00:0050DC C5FFD4              +94 	aa, xi	-','
  :                            95 
00:0050DD D600E3              +96 	jnza	fp_again
00:0050DE FF0EDA              +97 	call	(iscan_skip)
00:0050DF 6D0001              +98 	lb, xi	1		.	nothing scanned
00:0050E0 CDFFFF              +99 	ab, xi	-1
00:0050E1 EE00E3              +100 	jnb	fp_again
00:0050E2 400005              +101 	lr	b
  :                            102 
  :                            103 fp_again
00:0050E3 60F010              +104 	la	operator
  :                            105 
00:0050E4 680004              +106 	anu, xi	'+'
00:0050E5 DD002B              +106 
00:0050E6 CE00F1              +107 	jzb	fp_add
00:0050E7 680004              +108 	anu, xi	'-'
00:0050E8 DD002D              +108 
00:0050E9 CE00FD              +109 	jzb	fp_add_negative
00:0050EA 680004              +110 	anu, xi	'*'
00:0050EB DD002A              +110 
00:0050EC CE0109              +111 	jzb	fp_multiply
00:0050ED 680004              +112 	anu, xi	'/'
00:0050EE DD002F              +112 
00:0050EF CE0113              +113 	jzb	fp_divide
00:0050F0 B6011F              +114 	j	fp_nop
  :                            115 
  :                            116 fp_add
00:0050F1 4FF00C              +117 	ql	left+4
00:0050F2 470008              +118 	qs	$residue
00:0050F3 4FF008              +119 	ql	left		. doesn't appear that iscan_skip etc affects $residue 8:9:10:11
  :                            120 
  :                            121 fp_add1
00:0050F4 FCF000              +122 	c	(fp192_add)	right,,i
00:0050F5 FCF001              +122 
00:0050F6 FF0EE7              +122 
00:0050F7 38000F              +122 
  :                            123 
00:0050F8 050008              +124 	on	fp$r		. supernormalise to avoid accumulating rounding bumps
00:0050F9 670008              +125 	fa	$residue
00:0050FA 0D0008              +126 	off	fp$r
00:0050FB 1E00F4              +127 	jdr	fp_add1
  :                            128 
00:0050FC B60123              +129 	j	fp_edit
  :                            130 
  :                            131 fp_add_negative
00:0050FD 4FF00C              +132 	ql	left+4
00:0050FE 470008              +133 	qs	$residue
00:0050FF 4FF008              +134 	ql	left		. doesn't appear that iscan_skip etc affects $residue 8:9:10:11
  :                            135 
  :                            136 fp_add_negative1
00:005100 FCF000              +137 	c	(fp192_add_negative)	right,,i
00:005101 FCF001              +137 
00:005102 FF0EE8              +137 
00:005103 38000F              +137 
  :                            138 
00:005104 050008              +139 	on	fp$r		. supernormalise to avoid accumulating rounding bumps
00:005105 670008              +140 	fa	$residue
00:005106 0D0008              +141 	off	fp$r
  :                            142 
00:005107 1E0100              +143 	jdr	fp_add_negative1
  :                            144 
00:005108 B60123              +145 	j	fp_edit
  :                            146 
  :                            147 fp_multiply			. leaving this one how it was. It's just as good as (fp192_multiply)
00:005109 FCF000              +148 	c	(fp192_mfa)	left,,i	right,,i
00:00510A FCF009              +148 
00:00510B FCF002              +148 
00:00510C FF0EE9              +148 
00:00510D 38000F              +148 
00:00510E 1E0109              +149 	jdr	fp_multiply
00:00510F 4FF00C              +150 	ql	left+4		. this doesn't have a supernormalise
00:005110 470008              +151 	qs	$residue	. if iteratively multiplying change to call (fp192_multiply)
00:005111 4FF008              +152 	ql	left		. and add a supernormalise in the jdr loop
00:005112 B60123              +153 	j	fp_edit
  :                            154 
  :                            155 
  :                            156 .	the other 3 functions process two 192-bit inputs
  :                            157 
  :                            158 .	but 192-bit divide must test 
  :                            159 .	whether the divisor is represented in 1 or 2 floating numbers
  :                            160 
  :                            161 .	a 96-bit number sounds big
  :                            162 .	but if the divisor exponent is < 0 or > 31 decimal equivalent
  :                            163 .	then the 2nd divisor floating number is nonzero
  :                            164 .	for now deliver an indicative result in this case
  :                            165 .	by rounding both dividend and divisor to 96 bits
  :                            166 .	(adding their major and minor parts) and delivering a 96-bit quotient
  :                            167 
  :                            168 .	if the divisor is only one floating number (minor part is zero)
  :                            169 .	deliver a 192-bit quotient from a 192-bit dividend 
  :                            170 
  :                            171 fp_divide
00:005113 4FF00C              +172 	ql	left+4
00:005114 470008              +173 	qs	$residue
00:005115 4FF008              +174 	ql	left		. doesn't appear that iscan_skip etc affects $residue 8:9:10:11
  :                            175 
  :                            176 fp_divide1
00:005116 FCF000              +177 	c	(fp192_divide)	right,,i
00:005117 FCF001              +177 
00:005118 FF0EEA              +177 
00:005119 38000F              +177 
  :                            178 
00:00511A 050008              +179 	on	fp$r		. supernormalise 
00:00511B 670008              +180 	fa	$residue
00:00511C 0D0008              +181 	off	fp$r
00:00511D 1E0116              +182 	jdr	fp_divide1
  :                            183 
00:00511E B60123              +184 	j	fp_edit
  :                            185 
00:00511F B60123              +186 fp_nop	j	fp_edit
00:005120 4FF00C              +187 	ql	left+4		. no operation
00:005121 470008              +188 	qs	$residue	. return scanned number if any
00:005122 4FF008              +189 	ql	left
  :                            190 
  :                            191 fp_edit
  :                            192 	$if	1
  :                            193 
00:005123 50F011              +194 	lx	response_axw
00:005124 50A006              +195 	lx	descriptor:apdata, x
00:005125 FF0EDB              +196 	call	(wstream_start_net)
  :                            197 
  :                            198 	$else
  :                            199 
  :                            200 	z	BYTES
  :                            201 
  :                            202 	$endif
  :                            203 
00:005126 75004E              +204 	ii	FP_XPO$FLAG
00:005127 3E0137              +205 	lcal	fp_reactz
  :                            206 	
00:005128 FF0EEB              +207 	call	(floating_edit192)
  :                            208 
00:005129 600EE1              +209 	la	("":10:0:0)
00:00512A 1D0018              +210 	wsr	24
  :                            211 	
00:00512B 50F011              +212 	lx	response_axw
00:00512C 600010              +213 	la	BYTES
00:00512D 64C001              +214 	la, i	1, a
00:00512E 20A003              +215 	sa	descriptor:bytes, x
  :                            216 
  :                            217 
00:00512F FF0EE2              +218 	call	(udp_acw_send)
  :                            219 
  :                            220 fp_release
(+01)0f
00:005130 50042C              +221 	lx	portcb			. port structure in scalar frame
00:005131 FF0EE3              +222 	call	(release_udgram)
(+01)0f
00:005132 68042C              +223 	lb	portcb			. port structure in scalar frame
00:005133 B600C6              +224 	j	fp_rx1
  :                            225 fp_no_traffic
  :                            226 fp_error
00:005134 54F012              +227 	lx, i	$$frame, sp
00:005135 10000F              +228 	sx	sp
00:005136 3D0000              +229 	fret	0
  :                            230 	$root
  :                            139: 	$include fp_react
  :                            1 
  :                            2 
  :                            3 fp_reactz
00:005137 4F0EDC              +4 	ql	(-0.0)
00:005138 470008              +5 	qs	$residue
00:005139 350000              +6 	lret	0
  :                            7 
  :                            8 edit_prepend
00:00513A F80004              +9 	push	a
00:00513B 600EEC              +10 	la	('* '*/8s)
00:00513C 1D0010              +11 	wsr	16
00:00513D 650002              +12 	la	2,,xi
00:00513E 200010              +13 	sa	BYTES
00:00513F 380004              +14 	pop	a
00:005140 350000              +15 	lret	0
  :                            16 
  :                            140 
  :                            141: 	$include telnet
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 .	$include	../fs/fs.def
  :                            41 
  :                            42 $(66::,x)
42:000000                     +43 lookfor_app	filep
42:000001                     +43 
42:000002                     +43 
42:000004                     +43 
  :                            44 
  :                            45 $(3)
03:000006 000000              +46 thandle	+	0
03:000007 FFFFFF              +47 tnetbound -	1
03:000008 FFFFFFFFFFFF        +48 tlsoc_va  -	1:d
03:00000A 000000              +49 telnet_tpaside	0
  :                            50 
                                tn_help		"commands are":HT:"h":HT:"help":LF:;
                                		HT:HT:"e":HT:"echo":LF:;
                                		HT:HT:"w":HT:"webhost threads":LF:;
                                		HT:HT:"m":HT:"memory free":LF:;
                                		HT:HT:"stay":HT:"no timeout":LF:;
                                		HT:HT:"t":HT:"threads active":LF:;
                                		HT:HT:"a":HT:"applications and shells":LF:;
03:00000B 636F6D6D616E64732061726509680968656C700A09096509
                              +58 		HT:HT:"r":HT:"run ":ESC:"[91mname":ESC:"[0m":LF:
03:000013 6563686F0A09097709776562686F73742074687265616473
                              +58 
03:00001B 0A09096D096D656D6F727920667265650A09097374617909
                              +58 
03:000023 6E6F2074696D656F75740A09097409746872656164732061
                              +58 
03:00002B 63746976650A090961096170706C69636174696F6E732061
                              +58 
03:000033 6E64207368656C6C730A0909720972756E201B5B39316D6E
                              +58 
03:00003B 616D651B5B306D0A00  +58 
  :                            59 
  :                            60 tn_help_bytes  $equ    $bits/$byte
  :                            61 
  :                            62 tn_editline	$res	24
  :                            63 telnet_istring
  :                            64 telnet_run_name	$res	160//3
  :                            65 telnet_repeats	$res	1
  :                            66 telnet_start_time $res	2
  :                            67 telnet_name_words $res	1
  :                            68 
  :                            69 $(0)
  :                            70 telnet_i
  :                            71 
00:005141 3E033F              +72 	lcal	span_mounts
  :                            73 
  :                            74 	$if	TELNET_THREADED
00:005142 4F0EED              +75 	ql	(telnet_start,,,THREAD_FP(1):q)
00:005143 750047              +76 	ii	THREAD$
00:005144 C60147              +77 	jza	telnet_zstart
(+03)10
00:005145 6D2628              +78 	lb	$3("*telnet":0),,xi
00:005146 750049              +79 	ii	TAG$
  :                            80 telnet_zstart
00:005147 3D0000              +81 	fret	0
  :                            82 
  :                            83 telnet_start
  :                            84 	$endif
  :                            85 
(+03)0f
00:005148 700006              +86 	tz	thandle
00:005149 B60157              +87 	j	telnet_tstate?
  :                            88 
00:00514A 600EF1              +89 	la	(IPPROTO_TCP*/16)
00:00514B FF0ED2              +90 	call	(__socket)
00:00514C E6017E              +91 	jna	telnet_z
(+03)0f
00:00514D 200006              +92 	sa	thandle
  :                            93 
00:00514E 9F0EF2              +94 	c	(bind) a (23d),,long
00:00514F F80004              +94 
00:005150 FCF003              +94 
00:005151 FF0ED5              +94 
00:005152 38000F              +94 
  :                            95 
(+03)0f
00:005153 200007              +96 	sa	tnetbound
00:005154 E6017E              +97 	jna	telnet_z
00:005155 CF000A              +98 	dl	10
(+03)0f
00:005156 C70008              +99 	ds	tlsoc_va
  :                            100 	
  :                            101 telnet_tstate?
(+03)0f
00:005157 780007              +102 	tp	tnetbound	
00:005158 B6017E              +103 	j	telnet_z
  :                            104 
  :                            105 
(+03)0f
00:005159 CF0008              +106 	dl	tlsoc_va
00:00515A 34002F              +107 	sabr	BSOCKET
00:00515B 500EF4              +108 	lx	(BSOCKET*/12)
00:00515C 60D005              +109 	la	s:tcp:tbase, b
00:00515D 34002F              +110 	sabr	BSOCKET
  :                            111 
  :                            112         $if	0
                                	c	(fsrom_find)	applookupp,,xi			;
                                			 	APPLICATION_BASE/*12,,xi	;
                                				(0:d),,long			;
                                				(TREE$*/16)			;
                                				2,,xi				;
  :                            118 				$3("lookup"),,xi
  :                            119 	$endif
  :                            120 
  :                            121 	$if	0
  :                            122 
  :                            123 telnet_span_mounts
  :                            124 	lx	*apps_fsp
  :                            125 	inc	apps_fsp
  :                            126 
  :                            127 	tp	x
  :                            128 	j	telnet_mounts_spanned
  :                            129 	tnz	x
  :                            130 	j	telnet_span_mounts
  :                            131 
  :                            132 	la	lookfor_app:bank
  :                            133 	sabr	32
  :                            134 	ql	*(32*/12++68)
  :                            135 	xor	(MOUNT$,,3)
  :                            136 	jnza	telnet_span_mounts
  :                            137 	c	(fsrom_da)	x	lookfor_app:bank	6,,long
  :                            138 
  :                            139 	j	telnet_span_mounts
  :                            140 
  :                            141 telnet_mounts_spanned
  :                            142 
  :                            143 	$endif
  :                            144 
  :                            145 .	lcal	$autorun:autorun
  :                            146 
  :                            147 telnet_walk_on
00:00515E 500EF5              +148 	lx	(BSOCKET*/12++tlist:chain(1)+TPORTCHAIN(23))
  :                            149 
  :                            150 telnet_walk
00:00515F 60A000              +151 	la	transmission:next
00:005160 C6017C              +152 	jza	telnet_x
00:005161 500004              +153 	lx	a
00:005162 480EF6              +154 	lk	(00FFFF)
00:005163 650017              +155 	la, xi	23
00:005164 AFA007              +156 	mta	transmission:socket_address+1
00:005165 B6015F              +157 	j	telnet_walk
  :                            158 
00:005166 60A001              +159 	la	transmission:state
00:005167 A5003F              +160 	and, xi	63
00:005168 680004              +161 	anu, xi	TCP_ESTABLISHED
00:005169 DD0005              +161 
00:00516A CE0176              +162 	jzb	telnet_traffic?
00:00516B 680004              +163 	anu, xi	TCP_SYNRECEIVED
00:00516C DD0004              +163 
00:00516D DE0171              +164 	jnzb	telnet_state?
  :                            165 
00:00516E FF0EF7              +166 	call	(xaccept)
00:00516F E6015F              +167 	jna	telnet_walk	. could not accept
  :                            168 
00:005170 B6015F              +169 	j	telnet_walk
  :                            170 
  :                            171 telnet_state?
00:005171 680004              +172 	anu, xi	TCP_CLOSEWAIT
00:005172 DD0008              +172 
00:005173 DE015F              +173 	jnzb	telnet_walk
00:005174 FF0EF8              +174 	call	(xdisco)
00:005175 B6015E              +175 	j	telnet_walk_on
  :                            176 
  :                            177 telnet_traffic?
00:005176 60A010              +178 	la	transmission:receiveq:head
00:005177 C6015F              +179 	jza	telnet_walk
00:005178 FF0EF9              +180 	call	(subagent?)
00:005179 B6015F              +181 	j	telnet_walk
00:00517A 3E017F              +182 	lcal	telnet_console
00:00517B B6015F              +183 	j	telnet_walk
  :                            184 
  :                            185 telnet_x
00:00517C 750041              +186 	ii	YIELD$
00:00517D B6015E              +187 	j	telnet_walk_on
  :                            188 telnet_z
00:00517E 3D0000              +189 	fret	0
  :                            190 
  :                            191 telnet_console
00:00517F 3E0182              +192 	lcal	telnet_command
00:005180 FF0EFA              +193 	call	(tcp_release_rxline)
00:005181 350000              +194 	lret	0
  :                            195 
  :                            196 telnet_command
(+03)0f
00:005182 10000A              +197 	sx	telnet_tpaside
00:005183 58A010              +198 	ly	transmission:receiveq:head
  :                            199 
00:005184 60B003              +200 	la	descriptor:bytes, y
00:005185 68B006              +201 	lb	descriptor:apdata, y
00:005186 FF0ED7              +202 	call	(rstream_start_net)
  :                            203 
00:005187 60800D              +204 	la	*q		. check text or something else
00:005188 A00EFB              +205 	and	(00F000)	. a configuration sequence?
00:005189 B00EFB              +206 	xor	(00F000)
  :                            207 
00:00518A C60279              +208 	jza	telnet_configure
  :                            209 
  :                            210 telnet_text_command
00:00518B 650006              +211 	la, xi	6		. input a command text word
00:00518C 6D000A              +212 	lb, xi	10		. max 2 registers in size
00:00518D FF0EFC              +213 	call	(token_net)
  :                            214 
00:00518E CF000A              +215 	dl	10
  :                            216 
00:00518F 680004              +217 	anu	('t'*/16:s)
00:005190 D80EFD              +217 
00:005191 CE01BD              +218 	jzb	telnet_threads
00:005192 680004              +219 	anu	('h'*/16:s)
00:005193 D80EFE              +219 
00:005194 CE01C4              +220 	jzb	telnet_help
  :                            221 
00:005195 680004              +222 	anu	('m'*/16:s)
00:005196 D80EFF              +222 
00:005197 CE01F9              +223 	jzb	telnet_memory
  :                            224 
00:005198 680004              +225 	anu	('w'*/16:s)
00:005199 D80F00              +225 
00:00519A CE0205              +226 	jzb	webhost_threads
  :                            227 
00:00519B 680004              +228 	anu	('e'*/16:s)
00:00519C D80F01              +228 
00:00519D CE01F4              +229 	jzb	telnet_echo
  :                            230 
00:00519E 680004              +231 	anu	('u'*/16:s)
00:00519F D80F02              +231 
00:0051A0 CE01D8              +232 	jzb	telnet_library_speedtest
  :                            233 
00:0051A1 680004              +234 	anu	('q'*/16s)
00:0051A2 D80F03              +234 
00:0051A3 CE01F0              +235 	jzb	telnet_quicktimeout	. a test
  :                            236 
00:0051A4 680004              +237 	anu	('r'*/16s)
00:0051A5 D80F04              +237 
00:0051A6 CE0211              +238 	jzb	telnet_run)
  :                            239 
00:0051A7 680004              +240 	anu	('z'*/16s)
00:0051A8 D80F05              +240 
00:0051A9 CE0247              +241 	jzb	telnet_thread_term
  :                            242 
00:0051AA 680004              +243 	anu	('iq'*/8s)
00:0051AB D80F06              +243 
00:0051AC CE024D              +244 	jzb	telnet_ilist
  :                            245 
  :                            246 
00:0051AD 680004              +247 	anu	("smp")
00:0051AE D80F07              +247 
00:0051AF CE0242              +248 	jzb	telnet_smp
  :                            249 
00:0051B0 CF000A              +250 	dl	10
  :                            251 	
00:0051B1 DF0F08              +252 	dan	("stay")
00:0051B2 7C01CA              +253 	jdz	telnet_zero_timer1
  :                            254 
00:0051B3 CF000A              +255 	dl	10
00:0051B4 DF0F0A              +256 	dan	("time")
00:0051B5 7C01CE              +257 	jdz	telnet_print_dayclock
  :                            258 
00:0051B6 CF000A              +259 	dl	10
00:0051B7 DF0F0C              +260 	dan	("ifsync")
00:0051B8 7C023C              +261 	jdz	telnet_align_trunk
  :                            262 
00:0051B9 CF000A              +263 	dl	10
00:0051BA DF0F0E              +264 	dan	("ifswap")
00:0051BB 7C023F              +265 	jdz	telnet_mirror_trunk
  :                            266 
00:0051BC B601C7              +267 	j	telnet_prompt
  :                            268 
  :                            269 telnet_threads
(+03)10
00:0051BD 6D262B              +270 	lb, xi	$3("console threads display":10)
00:0051BE 650018              +271 	la	$bits/$byte,,xi
00:0051BF F80002              +272 	push	x
00:0051C0 3E027A              +273 	lcal	telnet_respond
00:0051C1 3E0288              +274 	lcal	telnet_threadlist
00:0051C2 380002              +275 	pop	x
00:0051C3 350000              +276 	lret	0
  :                            277 
  :                            278 telnet_help
00:0051C4 650098              +279 	la, xi	tn_help_bytes
(+03)10
00:0051C5 6D000B              +280 	lb, xi	tn_help
00:0051C6 B6027A              +281 	j	telnet_respond
  :                            282 
  :                            283 telnet_prompt
(+03)10
00:0051C7 6D2633              +284 	lb, xi	$3("key h for command list":10)
00:0051C8 650017              +285 	la	$bits/$byte,,xi
00:0051C9 B6027A              +286 	j	telnet_respond
  :                            287 
  :                            288 telnet_zero_timer1
00:0051CA 30A004              +289 	z	transmission:timer(1)
(+03)10
00:0051CB 6D263B              +290 	lb, xi	$3("no timeout":10)	
00:0051CC 65000B              +291 	la	$bits/$byte,,xi
00:0051CD B6027A              +292 	j	telnet_respond
  :                            293 
  :                            294 telnet_print_dayclock
  :                            295 
  :                            296 	$if	0
  :                            297 
  :                            298 	c	(date_timef1)	0,,xi	tn_editline,,xi
  :                            299 	la	(10*/16)
  :                            300 	sa	tn_editline+7
  :                            301 	la	3*7+1,,xi
  :                            302 	lb	tn_editline,,xi
  :                            303 
  :                            304 
  :                            305 	$elseif	0
  :                            306 
  :                            307 	c	(date_timef2)	0,,xi	tn_editline,,xi
  :                            308 	la	(10*/16)
  :                            309 	sa	tn_editline+8
  :                            310 	la	3*8+1,,xi
  :                            311 	lb	tn_editline,,xi
  :                            312 
  :                            313 
  :                            314 	$elseif	1
  :                            315 
(+03)10
00:0051CE FD003E              +316 	c	(date_timef3)	0,,xi	tn_editline,,xi
00:0051CF FD0000              +316 
00:0051D0 FCF002              +316 
00:0051D1 FF0F10              +316 
00:0051D2 38000F              +316 
00:0051D3 600EE1              +317 	la	(10*/16)
(+03)0f
00:0051D4 200046              +318 	sa	tn_editline+8
00:0051D5 650019              +319 	la	 3*8+1,,xi
(+03)10
00:0051D6 6D003E              +320 	lb	tn_editline,,xi
  :                            321 
  :                            322 	$else
  :                            323 
  :                            324 	call	(dayclock_ydsm_gmt)
                                	c	(__sprintf)	tn_editline,,xi			;
                                				$3("%d.%d:%d.%d":10:0),,xi	;
  :                            327 				8 9 10 11
  :                            328 
  :                            329 	lx	telnet_tpaside
  :                            330 	lb	tn_editline,,xi
  :                            331 	la	BYTES
  :                            332 	$endif
  :                            333 
00:0051D7 B6027A              +334 	j	telnet_respond
  :                            335 
  :                            336 telnet_library_speedtest
  :                            337 
00:0051D8 FF0F11              +338 	call	(iscan)
(+03)0f
00:0051D9 28008C              +339 	sb	telnet_repeats
  :                            340 
00:0051DA CF0096              +341 	dl	DAYCLOCK$U
(+03)0f
00:0051DB C7008D              +342 	ds	telnet_start_time
  :                            343 
  :                            344 telnet_test_repeat
(+03)10
00:0051DC FD0056              +345 	lc	telnet_atest	telnet_istring,,xi
00:0051DD FCF001              +345 
00:0051DE 3E02E1              +345 
00:0051DF 38000F              +345 
(+03)0f
00:0051E0 1F008C              +346 	dec	telnet_repeats
(+03)0f
00:0051E1 70008C              +347 	tz	telnet_repeats
00:0051E2 B601DC              +348 	j	telnet_test_repeat
  :                            349 
00:0051E3 CF0096              +350 	dl	DAYCLOCK$U
(+03)0f
00:0051E4 DF008D              +351 	dan	telnet_start_time
  :                            352 
(+03)10
00:0051E5 FD0056              +353 	c	(__sprintf)	tn_editline,,xi	$3("%ld mS %s":10:0),,xi    a,,long	telnet_istring,,xi
00:0051E6 9F0004              +353 
(+03)10
00:0051E7 FD263F              +353 
(+03)10
00:0051E8 FD003E              +353 
00:0051E9 FCF005              +353 
00:0051EA FF0F12              +353 
00:0051EB 38000F              +353 
(+03)10
00:0051EC 6D003E              +354 	lb	tn_editline,,xi
00:0051ED 600010              +355 	la	BYTES
(+03)0f
00:0051EE 50000A              +356 	lx	telnet_tpaside
00:0051EF B6027A              +357 	j	telnet_respond
  :                            358 
  :                            359 telnet_quicktimeout
  :                            360 
  :                            361 	$if	1
00:0051F0 0FA001              +362 	n	transmission:state
  :                            363 	$else
  :                            364 
  :                            365 	la	DAYCLOCK$
  :                            366 	or	1,,xi		. elminate zero = timeout never
  :                            367 
  :                            368 telnet_nonzero
  :                            369 
  :                            370 	sa	transmission:timer(1)
  :                            371 	$endif
  :                            372 
(+03)10
00:0051F1 6D2643              +373 	lb, xi	$3("zero timeout":LF)
00:0051F2 65000D              +374 	la, xi	$bits/$byte
00:0051F3 B6027A              +375 	j	telnet_respond
  :                            376 
  :                            377 telnet_echo
00:0051F4 60B003              +378 	la	descriptor:bytes, y
00:0051F5 68B006              +379 	lb	descriptor:apdata, y
00:0051F6 FD4520              +380 	push	'E ',,xi
00:0051F7 38D000              +381 	pop	0, b	
00:0051F8 B6027D              +382 	j	telnet_stream16_respond
  :                            383 
  :                            384 telnet_memory
00:0051F9 750048              +385 	ii	TOTAL$FREE
(+03)10
00:0051FA FD003E              +386 	push,xi	tn_editline
00:0051FB 38000C              +387 	pop	p
00:0051FC 300010              +388 	z	BYTES
00:0051FD FF0F13              +389 	call	(iedit48ua)
00:0051FE 1D0010              +390 	wsr	16
00:0051FF 600010              +391 	la	BYTES
(+03)10
00:005200 6D003E              +392 	lb, xi	tn_editline
00:005201 3E0282              +393 	lcal	telnet_insert
(+03)10
00:005202 6D2648              +394 	lb,xi	$3(" words free":10)
  :                            395 
00:005203 65000C              +396 	la,xi	$bits/$byte
  :                            397 	
00:005204 B6027A              +398 	j	telnet_respond
  :                            399 
  :                            400 webhost_threads
(+03)0f
00:005205 600098              +401 	la	http_threads
(+03)10
00:005206 FD003E              +402 	push	tn_editline,,xi
00:005207 38000C              +403 	pop	p
00:005208 300010              +404 	z	BYTES
00:005209 FF0F14              +405 	call	(ieditua)
00:00520A 1D0010              +406 	wsr	16
00:00520B 600010              +407 	la	BYTES
(+03)10
00:00520C 6D003E              +408 	lb	tn_editline,,xi
00:00520D 3E0282              +409 	lcal	telnet_insert
(+03)10
00:00520E 6D264C              +410 	lb, xi	$3(" webhost threads":10)
00:00520F 650011              +411 	la, xi	$bits/$byte
00:005210 B6027A              +412 	j	telnet_respond
  :                            413 
  :                            414 telnet_run
00:005211 6500A0              +415 	la	160,,xi
(+03)10
00:005212 6D0056              +416 	lb	telnet_run_name,,xi
00:005213 FF0EFC              +417 	call	(token_net)
  :                            418 
(+03)0f
00:005214 20008F              +419 	sa	telnet_name_words
  :                            420 
(+03)0f
00:005215 600056              +421 	la	telnet_run_name
00:005216 480F15              +422 	lk	(255*/$word-$byte:s)
00:005217 AF0F16              +423 	mta	('/'*/$word-$byte:s)	. a script name?
00:005218 B6021F              +424 	j	telnet_run_binary	. no
(+03)10
00:005219 FD0056              +425 	c	(run_start)	telnet_run_name,,xi
00:00521A FCF001              +425 
00:00521B FF0F17              +425 
00:00521C 38000F              +425 
(+03)0f
00:00521D 50000A              +426 	lx	telnet_tpaside		. recover the connection pointer
00:00521E 350000              +427 	lret	0
  :                            428 
  :                            429 telnet_run_binary
(+03)0f
00:00521F 60008F              +430 	la	telnet_name_words
(+03)0f
00:005220 50000A              +431 	lx	telnet_tpaside		. pick up the connection
00:005221 50A010              +432 	lx	transmission:receiveq.head
00:005222 17A006              +433 	inc	descriptor:apdata, x	. drop 2 input bytes [ r SP ]
00:005223 FDFFFE              +434 	push	-2,,xi
00:005224 2FA003              +435 	popA	descriptor:bytes, x
  :                            436 
(+03)10
00:005225 FD0056              +437 	c	(online_xqt)	a	telnet_run_name,,xi
00:005226 F80004              +437 
00:005227 FCF002              +437 
00:005228 FF0F18              +437 
00:005229 38000F              +437 
(+03)0f
00:00522A 50000A              +438 	lx	telnet_tpaside
00:00522B C60232              +439 	jza	telnet_norun
  :                            440 
00:00522C FF0F19              +441 	call	(tnet_callstring)
(+03)0f
00:00522D 50000A              +442 	lx	telnet_tpaside
  :                            443 
00:00522E 3E0234              +444         lcal	telnet_run_report
00:00522F 750071              +445 	ii	NET2SYM$
00:005230 FF0F1A              +446 	call	(subagent)
  :                            447 
00:005231 350000              +448 	lret	0			. stdin line -> call line in TCB	
  :                            449 					. input consumed, can drop
  :                            450 telnet_norun
00:005232 3E0234              +451 	lcal	telnet_run_report
00:005233 350000              +452 	lret	0
  :                            453 
  :                            454 telnet_run_report
(+03)0f
00:005234 50000A              +455 	lx	telnet_tpaside
00:005235 F80004              +456 	push	a
00:005236 3E0291              +457 	lcal	telnet_display_quartets
  :                            458 
00:005237 650001              +459 	la	1,,xi
(+03)10
00:005238 6D2652              +460 	lb	$3("":10),,xi
  :                            461 
00:005239 3E027A              +462 	lcal	telnet_respond
00:00523A 380004              +463 	pop	a
00:00523B 350000              +464 	lret	0
  :                            465 
  :                            466 telnet_align_trunk
00:00523C 550005              +467 	lx	5,,xi
00:00523D FF0F1B              +468 	call	(__ift2_align)
00:00523E B60249              +469 	j	telnet_zout
  :                            470 
  :                            471 telnet_mirror_trunk
00:00523F 550005              +472 	lx	5,,xi
00:005240 FF0F1C              +473 	call	(__ift2_mirror)
00:005241 B60249              +474 	j	telnet_zout
  :                            475 
  :                            476 telnet_smp
00:005242 FF0F1D              +477 	call	(scanhex)
00:005243 A5FFFE              +478 	and	-2,,xi
00:005244 480004              +479 	lk	a
00:005245 75007E              +480 	ii	$SMP
00:005246 B60249              +481 	j	telnet_zout
  :                            482 
  :                            483 telnet_thread_term
00:005247 FF0F1D              +484 	call	(scanhex)
00:005248 75007C              +485 	ii	$ZETA
  :                            486 
  :                            487 telnet_zout
(+03)0f
00:005249 50000A              +488 	lx	telnet_tpaside
00:00524A 650001              +489 	la	1,,xi
(+03)10
00:00524B 6D2653              +490 	lb	$3(">":0:0),,xi
00:00524C B6027A              +491 	j	telnet_respond
  :                            492 
  :                            493 telnet_ilist
00:00524D FF0F1D              +494 	call	(scanhex)
00:00524E C60276              +495 	jza	telnet_thread_not_active
00:00524F 750072              +496 	ii	THREAD$STATE
00:005250 B60276              +497 	j	telnet_thread_not_active
  :                            498 
00:005251 34001F              +499 	sabr	31
00:005252 680F1E              +500 	lb	(31*/12++XINTT-01000)
  :                            501 
  :                            502 telnet_uireqs
00:005253 50D001              +503 	lx	xitable:rcursor		. read cursor
00:005254 F80005              +504 	push	b
00:005255 F80002              +505 	push	x
  :                            506 
  :                            507 telnet_uirnext
00:005256 800005              +508 	ax	b			. x += working address window
00:005257 CFA000              +509 	dl	0, x			. read table entry
  :                            510 
00:005258 C60272              +511 	jza	telnet_uireqx		. entry used or not yet written
  :                            512 
00:005259 F80005              +513 	push	b
00:00525A FF0F1F              +514 	call	(display_quartets)
(+03)0f
00:00525B C7003E              +515 	ds	tn_editline
00:00525C 380004              +516 	pop	a
00:00525D FF0F1F              +517 	call	(display_quartets)
(+03)0f
00:00525E C70040              +518 	ds	tn_editline+2
  :                            519 
(+03)0f
00:00525F 50000A              +520 	lx	telnet_tpaside
00:005260 65000C              +521 	la	12,,xi
(+03)10
00:005261 6D003E              +522 	lb	tn_editline,,xi
00:005262 3E0282              +523 	lcal	telnet_insert
  :                            524 
00:005263 650001              +525 	la	1,,xi
(+03)10
00:005264 6D2652              +526 	lb	$3("":10:0),,xi
00:005265 3E027A              +527 	lcal	telnet_respond
  :                            528 
00:005266 50F000              +529 	lx	0, sp			. retrieve table relative read cursor
00:005267 68F001              +530 	lb	1, sp			. retrieve table
  :                            531 
00:005268 40D003              +532 	lr	xitable:limit		. read table size
00:005269 850002              +533 	ax	2,,xi			. advance read cursor
00:00526A 10F000              +534 	sx	0, sp
00:00526B F60270              +535 	jxge	telnet_ufirst		. jump to wrap
  :                            536 	
  :                            537 telnet_ulast?
00:00526C 600002              +538 	la	x
00:00526D B0D002              +539 	xor	xitable:wcursor		. lapped the write pointer?
00:00526E C60272              +540 	jza	telnet_uireqx		. yes
00:00526F B60256              +541 	j	telnet_uirnext		. no
  :                            542 
  :                            543 telnet_ufirst
00:005270 550004              +544 	lx	4,,xi			. table relative 1st entry
00:005271 B6026C              +545 	j	telnet_ulast?
  :                            546 
  :                            547 telnet_uireqx
00:005272 38F000              +548 	pop	0, sp
00:005273 38F000              +549 	pop	0, sp
(+03)0f
00:005274 50000A              +550 	lx	telnet_tpaside
00:005275 350000              +551 	lret	0
  :                            552 
  :                            553 telnet_thread_not_active
(+03)10
00:005276 6D2654              +554 	lb	$3("thread not active":10),,xi
00:005277 650012              +555 	la	$bits/$byte,,xi
00:005278 B6027A              +556 	j	telnet_respond
  :                            557 
  :                            558 telnet_configure
  :                            559 		. something received clearly not keyed text
  :                            560 		. it should include line mode
  :                            561 		. nothing much will happen if not
  :                            562 		. for the moment just lay the welcome mat
  :                            563 
00:005279 3E0285              +564 	lcal	telnet_configuration
  :                            565 
  :                            566 .	fall	thru	
  :                            567 
  :                            568 telnet_respond
  :                            569 .	sb	q
  :                            570 .	push,xi	05000++TCP_ACK++TCP_PSH
  :                            571 .	pop	SOCKET_CALL_FLAGS
  :                            572 
00:00527A 4D5018              +573 	lk	05000++TCP_ACK++TCP_PSH,,xi
00:00527B FF0F20              +574 	call	(tcp_tx)
00:00527C 350000              +575 	lret	0
  :                            576 
  :                            577 telnet_stream16_respond
  :                            578 .	sb	q
00:00527D 300014              +579 	z	RDATAC
00:00527E 050020              +580 	on	b$stream16r
  :                            581 .	push	05000++TCP_ACK++TCP_PSH
  :                            582 .	pop	SOCKET_CALL_FLAGS
  :                            583 
00:00527F 4D5018              +584 	lk	05000++TCP_ACK++TCP_PSH,,xi
00:005280 FF0F21              +585 	call	(tcp_addx)
00:005281 350000              +586 	lret	0
  :                            587 
  :                            588 telnet_insert
  :                            589 .	sb	q
  :                            590 .	push,xi 05000++TCP_ACK
  :                            591 .	pop	SOCKET_CALL_FLAGS
  :                            592 
00:005282 4D5010              +593 	lk	05000++TCP_ACK,,xi
00:005283 FF0F20              +594 	call	(tcp_tx)
00:005284 350000              +595 	lret	0
  :                            596 
  :                            597 telnet_configuration
  :                            598 		. for the moment no analysis. just encourage
  :                            599 
(+03)10
00:005285 6D265A              +600 	lb, xi	$3("RTA1 smaragd7 OS shared console":10)
00:005286 650020              +601 	la, xi	$bits/$byte
00:005287 350000              +602 	lret	0
  :                            603 
  :                            604 
  :                            605 
  :                            606 telnet_threadlist
  :                            607 .	la	(' '*/$word-$byte)
  :                            608 .	sa	tn_editline+2
00:005288 051F00              +609 	on	+(see$7*/MANAGER_BANKS)-see$7
00:005289 40304A              +610 	lr	tdescriptor_high_index
00:00528A 583049              +611 	ly	next_tdescriptor_sp
  :                            612 	
  :                            613 telnet_thread1
00:00528B FE028F              +614 	jyge	telnet_threadx
00:00528C 3E02BD              +615 	lcal	telnet_thread_display
00:00528D 8D0008              +616 	ay	TDESCRIPTOR_WORDS,,xi
00:00528E B6028B              +617 	j	telnet_thread1
  :                            618 telnet_threadx	
00:00528F 0D1F00              +619 	off	+(see$7*/MANAGER_BANKS)-see$7
00:005290 350000              +620 	lret	0
  :                            621 
  :                            622 telnet_pop2hex* $proc
  :                            623 	pop	a
  :                            624 	lcal	telnet_display_quartets
  :                            625 	$end
  :                            626 
  :                            627 telnet_display_quartets
00:005291 FF0F1F              +628 	call	(display_quartets)
(+03)0f
00:005292 C7003E              +629 	ds	tn_editline
00:005293 650007              +630 	la	7,,xi
(+03)10
00:005294 6D003E              +631 	lb	tn_editline,,xi
00:005295 3E0282              +632 	lcal	telnet_insert
00:005296 350000              +633 	lret	0
  :                            634 
  :                            635 telnet_thread_name
00:005297 F80002              +636 	push	x			. connection
00:005298 780004              +637 	tp	a
00:005299 0F0004              +638 	n	a
00:00529A 340020              +639 	sabr	32			. place thread control block
00:00529B 500F22              +640 	lx	(32*/12++TAG-4096)	. in file access space a moment
  :                            641 
00:00529C 608F23              +642 	la	*(32*/12++TDESCRIPTOR-01000)
00:00529D B00003              +643 	xor	y			. is TCB connected to descriptor?
00:00529E C602A3              +644 	jza	telnet_thread_name_clear	. yes fine
  :                            645 
00:00529F 608F24              +646 	la	*(32*/12++TCB-TCB)	. is its information overwritten yet?
00:0052A0 B00F25              +647 	xor	('TCB')
00:0052A1 C602A3              +648 	jza	telnet_thread_name_clear
(+03)10
00:0052A2 552665              +649 	lx	$3("[reused]":0:0:0:0),,xi	. nothing readable likely
  :                            650 
  :                            651 telnet_thread_name_clear
00:0052A3 44A024              +652 	lr	36, x, i
00:0052A4 4D00FF              +653 	lk	255,,xi
(+03)10
00:0052A5 6D003E              +654 	lb	tn_editline,,xi
  :                            655 
  :                            656 telnet_name_display
00:0052A6 F602AD              +657 	jxge	telnet_name_z
00:0052A7 60A000              +658 	la	0, x
00:0052A8 20D000              +659 	sa	0, b
00:0052A9 6CD001              +660 	lb	1, b, i
00:0052AA 850001              +661 	ax	1,,xi
00:0052AB AF0F26              +662 	mta	(0)			. trailing zero in this name?
00:0052AC B602A6              +663 	j	telnet_name_display
  :                            664 
  :                            665 telnet_name_z
(+03)10
00:0052AD DD003E              +666 	anb	tn_editline,,xi		. words in this part
00:0052AE 45FFFD              +667 	lr	-3,,xi			. maximum zero bytes last word
  :                            668 
  :                            669 telnet_count
00:0052AF 660008              +670 	ral	$byte
00:0052B0 AF0F26              +671 	mtane	(0)
00:0052B1 B602B3              +671 
00:0052B2 B602B5              +672 	j	telnet_counted_name
00:0052B3 170000              +673 	inc	r
00:0052B4 B602AF              +674 	j	telnet_count
  :                            675 
  :                            676 telnet_counted_name
  :                            677 
00:0052B5 600005              +678 	la	b
00:0052B6 C00000              +679 	aa	r
00:0052B7 2E0001              +680 	sbl	1
00:0052B8 C00005              +681 	aa	b			. 3 * words + bytes
(+03)10
00:0052B9 6D003E              +682 	lb	tn_editline,,xi
00:0052BA 380002              +683 	pop	x
00:0052BB 3E0282              +684 	lcal	telnet_insert
00:0052BC 350000              +685 	lret	0
  :                            686 
  :                            687 telnet_thread_display
  :                            688 
00:0052BD F80003              +689 	push	y
00:0052BE F80000              +690 	push	r
00:0052BF 50F004              +691 	lx	4, sp
00:0052C0 051F00              +692 	on	+(see$7*/MANAGER_BANKS)-see$7		. see kernel storage
  :                            693 
  :                            694 	$do	TDESCRIPTOR_WORDS**1,		push	TDESCRIPTOR_WORDS**-2, y
  :                            695 	$do	TDESCRIPTOR_WORDS**2^=0,	dpush	TDESCRIPTOR_WORDS**-4, y
00:0052C1 8FB004              +696 ?	$do	TDESCRIPTOR_WORDS/4,		qpush	+(TDESCRIPTOR_WORDS**-4)-?*4, y
00:0052C2 8FB000              +696 
  :                            697 
00:0052C3 0D1F00              +698 	off	+(see$7*/MANAGER_BANKS)-see$7		. see application storage
  :                            699 
00:0052C4 600F27              +700 	la	(' '*/$word-$byte)
(+03)0f
00:0052C5 200040              +701 	sa	tn_editline+2
  :                            702 
00:0052C6 380004              +703 	$do	TDESCRIPTOR_WORDS,	telnet_pop2hex
00:0052C7 3E0291              +703 
00:0052C8 380004              +703 
00:0052C9 3E0291              +703 
00:0052CA 380004              +703 
00:0052CB 3E0291              +703 
00:0052CC 380004              +703 
00:0052CD 3E0291              +703 
00:0052CE 380004              +703 
00:0052CF 3E0291              +703 
00:0052D0 380004              +703 
00:0052D1 3E0291              +703 
00:0052D2 380004              +703 
00:0052D3 3E0291              +703 
00:0052D4 380004              +703 
00:0052D5 3E0291              +703 
  :                            704 	
00:0052D6 051F00              +705 	on	+(see$7*/MANAGER_BANKS)-see$7
00:0052D7 58F001              +706 	ly	1, sp					. snoop in the
00:0052D8 60B003              +707 	la	3, y					. thread control block
00:0052D9 0D1F00              +708 	off	+(see$7*/MANAGER_BANKS)-see$7
00:0052DA 3E0297              +709 	lcal	telnet_thread_name
  :                            710 
(+03)10
00:0052DB 6D2652              +711 	lb	$3("":LF),,xi
00:0052DC 650001              +712 	la, xi	$bits/$byte
00:0052DD 3E027A              +713 	lcal	telnet_respond
00:0052DE 380000              +714 	pop	r
00:0052DF 380003              +715 	pop	y
00:0052E0 350000              +716 	lret	0
  :                            717 
                                telnet_atest $head_near	 params(tn_ostringp,	int	)	;
                                								;
                                			scalars(save_BYTES,	int,	BYTES	;
                                				save_q,		int,	q	;
                                				save_RDATACD,	long,	RDATAC	;
                                				tn_left,	float		;
                                				tn_right,	float		;
                                				tn_tight_repeat,int		;
00:0052E1 F80010              +726 				tn_operation,	int		)
00:0052E2 F8000D              +726 
00:0052E3 9F0014              +726 
00:0052E4 8F0ECD              +726 
00:0052E5 8F0ECD              +726 
00:0052E6 FD0000              +726 
00:0052E7 FD0000              +726 
  :                            727 
00:0052E8 FF0ED8              +728 	call	(floating_scan)
00:0052E9 47F006              +729 	qs	tn_left
00:0052EA FF0ED9              +730 	call	(symbol_scan)
00:0052EB 20F000              +731 	sa	tn_operation
00:0052EC FF0ED8              +732 	call	(floating_scan)
00:0052ED 47F002              +733 	qs	tn_right
  :                            734 
00:0052EE 600013              +735 	la	LAST_BYTE_READ
00:0052EF C5FFD4              +736 	aa	-',',,xi
00:0052F0 D602F5              +737 	jnza	tn_operate
00:0052F1 FF0F11              +738 	call	(iscan)
00:0052F2 CE02F4              +739 	jzb	$+2
00:0052F3 CDFFFF              +740 	ab	-1,,xi
00:0052F4 28F001              +741 	sb	tn_tight_repeat
  :                            742 	
  :                            743 tn_operate
00:0052F5 40F001              +744 	lr	tn_tight_repeat
00:0052F6 60F000              +745 	la	tn_operation
00:0052F7 C5FFD5              +746 	aa	-'+',,xi
00:0052F8 C60301              +747 	jza	tn_add
00:0052F9 C5FFFE              +748 	aa	'+'-'-',,xi
00:0052FA C60305              +749 	jza	tn_negadd
00:0052FB C50003              +750 	aa	'-'-'*',,xi
00:0052FC C60309              +751 	jza	tn_mul
00:0052FD C5FFFB              +752 	aa	'*'-'/',,xi
00:0052FE C6030D              +753 	jza	tn_div
00:0052FF 4FF006              +754 	ql	tn_left
00:005300 B60310              +755 	j	tn_edit
  :                            756 
00:005301 4FF006              +757 tn_add	ql	tn_left
00:005302 67F002              +758 	fa	tn_right
00:005303 1E0302              +759 	jdr	$-1
00:005304 B60310              +760 	j	tn_edit
  :                            761 
  :                            762 tn_negadd
00:005305 4FF006              +763 	ql	tn_left
00:005306 6FF002              +764 	fan	tn_right
00:005307 1E0306              +765 	jdr	$-1
00:005308 B60310              +766 	j	tn_edit
  :                            767 
00:005309 4FF006              +768 tn_mul	ql	tn_left
00:00530A 77F002              +769 	fm	tn_right
00:00530B 1E030A              +770 	jdr	$-1
00:00530C B60310              +771 	j	tn_edit
  :                            772 
00:00530D 4FF006              +773 tn_div	ql	tn_left
00:00530E 7FF002              +774 	fd	tn_right
00:00530F 1E030E              +775 	jdr	$-1
  :                            776 
00:005310 50F010              +777 tn_edit	lx	tn_ostringp
00:005311 FF0F28              +778 	call	(wstream_starta)
00:005312 FF0F29              +779 	call	(fedita)
00:005313 650000              +780 	la	0,,xi
00:005314 1D0018              +781 	wsr	24
  :                            782 
00:005315 FCF00A              +783 	push	save_RDATACD,,i
00:005316 38000F              +784 	pop	sp
  :                            785 
00:005317 380014              +786 	dpop	RDATAC
00:005318 380015              +786 
  :                            787 
00:005319 38000D              +788 	pop	q
00:00531A 380010              +789 	pop	BYTES
00:00531B 350000              +790 	lret	0
  :                            791 
  :                            142: 	$include search_x
  :                            1 
  :                            2 search_onlinexqt
                                	$head_far	 params(search_name_words,	int	;
                                				search_run_namep,	int)	;
                                								;
                                			scalars(online_devicep,	int,	vpointer(17),,xi	;
00:00531C FD2910              +7 				startpx,		int	)
00:00531D FD0000              +7 
  :                            8 
  :                            9 online_search_app
00:00531E 60F001              +10 	la	online_devicep
00:00531F 052000              +11 	on	see$2
00:005320 60C000              +12 	la	0, a
00:005321 0D2000              +13 	off	see$2
00:005322 E6033B              +14 	jna	online_norun	. at end of pointers?
00:005323 17F001              +15 	inc	online_devicep	. before incrementing
00:005324 C6031E              +16 	jza	online_search_app . pointer cancelled. Look for more
  :                            17 
00:005325 340020              +18 	sabr	32
00:005326 20F000              +19 	sa	startpx
00:005327 4F8F2A              +20 	ql	*(32*/12++68)
00:005328 AF0F2B              +21 	mta	(MOUNT$,,3)
00:005329 B6031E              +22 	j	online_search_app
  :                            23 
00:00532A CF0006              +24 	dl	6		. -> descriptor word offset application_templates
00:00532B 36000C              +25 	dsl	12
00:00532C 9D0020              +26 	orB	32,,xi
00:00532D C0F000              +27 	aa	startpx
00:00532E 340020              +28 	sabr	32
00:00532F 4E000C              +29 	rbr	12
00:005330 CFD002              +30 	dl	2, b		. granule identifier directory block
00:005331 360006              +31 	dsl	6		. -> word offset in device
  :                            32 
                                	c 	(qstart)	startpx					;
                                				a,,long					;
                                				search_name_words			;
00:005332 F8F006              +36 				search_run_namep
00:005333 F8F006              +36 
00:005334 9F0004              +36 
00:005335 F8F004              +36 
00:005336 FCF005              +36 
00:005337 FF0F2C              +36 
00:005338 38000F              +36 
  :                            37 
00:005339 C6031E              +38 	jza	online_search_app		
00:00533A B6033C              +39 	j	online_run	. end of search with process started
  :                            40 
  :                            41 online_norun
00:00533B 650000              +42 	la	0,,xi		. end of search with no hit
  :                            43 online_run
00:00533C FCF002              +44 	$ret
00:00533D 38000F              +44 
00:00533E 3D0000              +44 
  :                            45 
  :                            143: 	$include span_rom
  :                            1 
  :                            2 span_mounts
                                	$head_near	scalars(fspac,		6)	;
                                							;
00:00533F FD0000              +5 			 xframe(startpagex,	1024	)
00:005340 FD0000              +5 
00:005341 8F0ECD              +5 
00:005342 FDFC00              +5 
00:005343 2F000E              +5 
  :                            6 
(+03)10
00:005344 FD2669              +7 	c	(fspath)	$3("/application_iframes/start_page_index":0),,xi
00:005345 FCF001              +7 
00:005346 FF0F2D              +7 
00:005347 38000F              +7 
00:005348 C6035C              +8 	jza	span_mountx
00:005349 9F0004              +9 	c	(fs24_open)	fspac,,i	a,,long
00:00534A FCF002              +9 
00:00534B FCF003              +9 
00:00534C FF0F2E              +9 
00:00534D 38000F              +9 
00:00534E FD0400              +10 	c	(fs24_read)	fspac,,i	startpagex,,i	1024,,xi
00:00534F FCE000              +10 
00:005350 FCF002              +10 
00:005351 FCF003              +10 
00:005352 FF0F2F              +10 
00:005353 38000F              +10 
00:005354 5CE000              +11 	ly	startpagex,,i
00:005355 552911              +12 	lx	vpointer(18),,xi
  :                            13 
  :                            14 span_mount
00:005356 60B000              +15 	la	0, y
00:005357 E6035C              +16 	jna	span_mountx
00:005358 750054              +17 	ii	WRITE_XVECTOR$
00:005359 850001              +18 	ax	1,,xi
00:00535A 8D0001              +19 	ay	1,,xi
00:00535B B60356              +20 	j	span_mount
  :                            21 
  :                            22 span_mountx
00:00535C FCF006              +23 	$ret
00:00535D 38000F              +23 
00:00535E FCE400              +23 
00:00535F 38000E              +23 
00:005360 350000              +23 
  :                            24 
  :                            144: 	$include startups
  :                            1 $(66::,x)
42:000000                     +2 fspaxq	fileq
42:000001                     +2 
42:000002                     +2 
42:000004                     +2 
  :                            3 
  :                            4 $(1)
  :                            5 
01:00042D 000000000000        +6 startup_osocket_encoding	0L
  :                            7 
  :                            8 $(0)
  :                            9 
  :                            10 startups	$tree
  :                            11 
  :                            12 USTDOUT	$equ	18		. historic assignement message send
  :                            13 
  :                            14 	.	vector name initial_startups
  :                            15 
00:005361 4F0F30              +16 initial	ql	(read_startups, 1, 0, THREAD_FP(1)q)
00:005362 750047              +17 	ii	THREAD$
00:005363 C60366              +18 	jza	startupz
(+03)10
00:005364 6D2676              +19 	lb	$3("initial startups":0),,xi
00:005365 750049              +20 	ii	TAG$
  :                            21 
  :                            22 startupz
00:005366 3D0000              +23 	fret	0
  :                            24 
  :                            25 read_startups
                                	$head_near	scalars(socko,		int		;
00:005367 FD0000              +27 				config_retry,	int,	40,,xi	)
00:005368 FD0028              +27 
  :                            28 
00:005369 600ED1              +29 	la	(IPPROTO_UDP*/16)
00:00536A FF0ED2              +30 	call	(__socket)
00:00536B E60393              +31 	jna	no_stdout
00:00536C 20F001              +32 	sa	socko
00:00536D 9F0F34              +33 	c	(bind)	a	(0L),,long
00:00536E F80004              +33 
00:00536F FCF003              +33 
00:005370 FF0ED5              +33 
00:005371 38000F              +33 
00:005372 E60393              +34 	jna	no_stdout
00:005373 60F001              +35 	la	socko
00:005374 750055              +36 	ii	READ_SOCKET$
(+01)0f
00:005375 C7042D              +37 	ds	startup_osocket_encoding
00:005376 CF000A              +38 	dl	10
00:005377 34002F              +39 	sabr	BSOCKET
00:005378 580005              +40 	ly	b
00:005379 CF0F36              +41 	dl	($net_socket	255.255.255.255:USTDOUT)
00:00537A C7B002              +42 	ds	sbind:remote_address, y
  :                            43 					. leave an extra gap for ifconfig
00:00537B 750041              +44 config?	ii	YIELD$			. there should have been one already
00:00537C 4F0F38              +45 	ql	(00FFFF00FFFFq)
00:00537D FF0F3C              +46 	call	(__route)
00:00537E 700002              +47 	tnz	x
00:00537F B60381              +47 
00:005380 B60393              +48 	j	no_stdout		. hopeless and theoretically impossible
00:005381 CFA007              +49 	dl	ro:next_hop
00:005382 78A002              +50 	tn	ro:i_f			. that's the gateway
00:005383 B60385              +50 
00:005384 B60389              +51 	j	local_address
  :                            52 
00:005385 1FF000              +53 	dec	config_retry
00:005386 70F000              +54 	tz	config_retry
00:005387 B6037B              +55 	j	config?
  :                            56 
00:005388 CF0F3D              +57 	dl	(00AC1D000707)		. configuration hasn't run
  :                            58 					. or doesn't have a broadcast route
  :                            59 local_address
00:005389 58000B              +60 	ly	11
00:00538A 2E0008              +61 	sbl	8
00:00538B 360008              +62 	dsl	8
00:00538C 480EF6              +63 	lk	(00FFFF)
00:00538D BFB001              +64 	mlb	sbind:socket_address+1, y
00:00538E C7B000              +65 	ds	sbind:socket_address, y
  :                            66 
(+03)10
00:00538F FD267C              +67 	c	(run_start)	$3("/initial/script":0),,xi
00:005390 FCF001              +67 
00:005391 FF0F17              +67 
00:005392 38000F              +67 
  :                            68 
  :                            69 no_stdout
00:005393 FCF002              +70 	$ret
00:005394 38000F              +70 
00:005395 350000              +70 
  :                            71 
  :                            72 .       read consective text lines from the text file at script path
  :                            73 .	scripts may be nested. A new script name in the text starts /path
  :                            74 .	other text lines are application names + optional following lines of stdin
  :                            75 
  :                            76 .	first stdin line to an application is its own command line
  :                            77 .	no command except application names and nested /script_path is expected
  :                            78 .	but stdin text may be commands to applications like shells
  :                            79 
  :                            80 .	script execution is sequential to make proper sense
  :                            81 .	waiting for each started process to finish before reading more text
  :                            82 .	but you can call run_start from multiple simultaneous threads
  :                            83 
                                run	$head_far	 params(script_path,	int	)	;
                                								;
                                			scalars(file_position,	long		;
                                				siobloc,	int		;
00:005396 9F0F34              +88 				zdepth,		int		)
00:005397 FD0000              +88 
00:005398 FD0000              +88 
  :                            89 
00:005399 F8F007              +90 	c	(fspath)	script_path
00:00539A FCF001              +90 
00:00539B FF0F2D              +90 
00:00539C 38000F              +90 
00:00539D C603B1              +91 	jza	no_run
00:00539E C7F002              +92 	ds	file_position
  :                            93 
00:00539F F80F3F              +94 	c	(fileshare_assign)	(FS$DEVICE$ARRAY,,7s))
00:0053A0 FCF001              +94 
00:0053A1 FF0F40              +94 
00:0053A2 38000F              +94 
00:0053A3 700002              +95 	tnz	x
00:0053A4 B603A6              +95 
00:0053A5 B603B1              +96 	j	no_run
  :                            97 
00:0053A6 30A006              +98 	z	fspaxq:o:column
00:0053A7 10F001              +99 	sx	siobloc
00:0053A8 9FF002              +100 	lc	runfile_scan	zdepth   x   file_position,,long
00:0053A9 F80002              +100 
00:0053AA F8F003              +100 
00:0053AB FCF004              +100 
00:0053AC 3E03B4              +100 
00:0053AD 38000F              +100 
  :                            101 
00:0053AE 50F001              +102 	lx	siobloc		 . free shared open file state bloc
00:0053AF 650007              +103 	la	7,,xi
00:0053B0 20A000              +104 	sa	0, x
  :                            105 
00:0053B1 FCF004              +106 no_run	$ret
00:0053B2 38000F              +106 
00:0053B3 3D0000              +106 
  :                            107 
                                runfile_scan $head_near	 params(depth,		int		;
                                				share_iobloc,	int		;
                                				fposition,	long	)	;
                                								;
                                			scalars(save_fspp,	8,	0, x)	;
                                								;
                                			 xframe(search_name,	80		;
00:0053B4 8FA004              +115 				text,		80		)
00:0053B5 8FA000              +115 
00:0053B6 FDFF60              +115 
00:0053B7 2F000E              +115 
  :                            116 
00:0053B8 17F00A              +117 	inc	depth
00:0053B9 50F00A              +118 	lx	depth
00:0053BA 450004              +119 	lr	4,,xi
00:0053BB F603F2              +120 	jxge	runfile_breakpoint	. 3 nested scripts are plenty
  :                            121 	
00:0053BC 50F00B              +122 	lx	share_iobloc
00:0053BD 30A006              +123 	z	fspaxq:o:column
00:0053BE 9FF00C              +124 	c	(fs24_open)	share_iobloc	fposition,,long
00:0053BF F8F00D              +124 
00:0053C0 FCF003              +124 
00:0053C1 FF0F2E              +124 
00:0053C2 38000F              +124 
  :                            125 
  :                            126 read_script
00:0053C3 FF0F41              +127 	call	(fileshare_space_open)
  :                            128 
  :                            129 .	c	(fs24_snoop)	share_iobloc	text,,i	80,,xi
00:0053C4 FD00F0              +130 	c	(fgets_datafile)	share_iobloc	text,,i	80*3,,xi
00:0053C5 FCE050              +130 
00:0053C6 F8F00D              +130 
00:0053C7 FCF003              +130 
00:0053C8 FF0F42              +130 
00:0053C9 38000F              +130 
  :                            131 
00:0053CA E603F2              +132 	jna	runfile_breakpoint
00:0053CB C603F2              +133 	jza	runfile_breakpoint
  :                            134 
00:0053CC 160018              +135 	dsr	24
00:0053CD 1D0018              +136 	wsr	24
  :                            137 
  :                            138 .	call	(fileshare_space_open)
  :                            139 .	lx	share_iobloc		. get non-snoop read position in open file
  :                            140 					. then pull the string left over whitespace
  :                            141 
00:0053CE FD0000              +142 	c	(normal_string)   search_name,,i   text,,i   80*3-3,,xi	0,,xi	. fspaxq:o:column
00:0053CF FD00ED              +142 
00:0053D0 FCE050              +142 
00:0053D1 FCE000              +142 
00:0053D2 FCF004              +142 
00:0053D3 FF0F43              +142 
00:0053D4 38000F              +142 
  :                            143 
00:0053D5 C603C3              +144 	jza	read_script		. blank line read past it
  :                            145 
00:0053D6 400004              +146 	lr	a			. save containing words of extracted token
  :                            147 
00:0053D7 60E000              +148 	la	search_name
00:0053D8 480F15              +149 	lk	(255*/$word-$byte:s)
00:0053D9 AF0F16              +150 	mta	('/'*/$word-$byte:s)	. a nested path?
00:0053DA B603E9              +151 	j	text_command		. no
  :                            152 
  :                            153 					. now consume the snooped text
  :                            154 .	c	(fgets_datafile)   share_iobloc   text,,i   80*3,,xi
  :                            155 .	dsr	24
  :                            156 .	wsr	24			. push last bytes thru WDATA
  :                            157 					. staging register
00:0053DB FF0F41              +158 	call	(fileshare_space_open)
00:0053DC FCE050              +159 	c	(fspath)	text,,i
00:0053DD FCF001              +159 
00:0053DE FF0F2D              +159 
00:0053DF 38000F              +159 
00:0053E0 C603C3              +160 	jza	read_script		. skip silently if you can't find it
  :                            161 
00:0053E1 50F00B              +162 	lx	share_iobloc
00:0053E2 9F0004              +163 	lc	runfile_scan	depth   x   a,,long
00:0053E3 F80002              +163 
00:0053E4 F8F00D              +163 
00:0053E5 FCF004              +163 
00:0053E6 3E03B4              +163 
00:0053E7 38000F              +163 
  :                            164 					. recurse within limits
00:0053E8 B603C3              +165 	j	read_script
  :                            166 
  :                            167 text_command
  :                            168 
00:0053E9 50F00B              +169 	lx	share_iobloc
  :                            170 
  :                            171 	$if	0
  :                            172 	dl	fspaxq:serialp:absolute_pointer	. mark file position
  :                            173 	ds	fposition			. in case it doesn't move
  :                            174 	$endif
  :                            175 
00:0053EA FCE050              +176 	lc	action_command	  x	r	search_name,,i	text,,i
00:0053EB FCE000              +176 
00:0053EC F80000              +176 
00:0053ED F80002              +176 
00:0053EE FCF004              +176 
00:0053EF 3E03F9              +176 
00:0053F0 38000F              +176 
  :                            177 
  :                            178 	$if	0
  :                            179 	lx	share_iobloc
  :                            180 	dl	fspaxq:serialp:absolute_pointer
  :                            181 	dan	fposition
  :                            182 	jdz	text_skip		. so lazy he never read his own name
  :                            183 	j	read_script
  :                            184 
  :                            185 text_skip
  :                            186 	c	(fgets_datafile)	share_iobloc   text,,i	80*3-3,,xi
  :                            187 	$endif
  :                            188 
00:0053F1 B603C3              +189 	j	read_script
  :                            190 
  :                            191 runfile_breakpoint
00:0053F2 50F00B              +192 	lx	share_iobloc
00:0053F3 FF0F41              +193 	call	(fileshare_space_open)
00:0053F4 87A000              +194 	qpop	0, x
00:0053F5 87A004              +195 	qpop	4, x			. retrieve the previous file open state
00:0053F6 FDFF60              +196 	push	-80*2,,xi		. clear external stack
00:0053F7 2F000E              +197 	popA	fp
00:0053F8 350000              +198 	lret	0
  :                            199 
  :                            200 
                                action_command	 $head_near	 params(share_ioblocp,	int	;
                                					textw,		int	;
                                					searchp,	int	;
                                					textp,		int)	;
                                								;
00:0053F9 FD0000              +206 				scalars(new_process,	int	)
  :                            207 
00:0053FA F8F005              +208 	c	(online_xqt)	textw	searchp
00:0053FB F8F005              +208 
00:0053FC FCF002              +208 
00:0053FD FF0F18              +208 
00:0053FE 38000F              +208 
  :                            209 
00:0053FF C60414              +210 	jza	action_skip
00:005400 E60414              +211 	jna	action_skip
00:005401 20F000              +212 	sa	new_process
  :                            213 
00:005402 340020              +214 	sabr	32				. start with the new thread control block
00:005403 58F006              +215 	ly	textp
00:005404 FF0F44              +216 	call	(forward_callstring)		. called app name + arguments
00:005405 608F45              +217 	la	*(32*/12++ABT+2-01000)		. progress to his vector list
00:005406 340020              +218 	sabr	32
00:005407 600F46              +219 	la	(3*/16)
00:005408 68F003              +220 	lb	share_ioblocp			. hand over the shared file open state
00:005409 C78F47              +221 	ds	*(32*/12++handle(1)-02000)	. as his stdin
  :                            222 
00:00540A 750059              +223 	ii	KERNEL$B1_1			. into kernel 1st B1 block
(+01)0f
00:00540B CF042D              +224 	dl	startup_osocket_encoding	. hand over UDP broacast socket encoding
00:00540C 750058              +225 	ii	B1$				. back to application actual B1 block
00:00540D C78F48              +226 	ds	*(32*/12++handle(2)-02000)	. as his stdout
00:00540E C78F49              +227 	ds	*(32*/12++handle(3)-02000)	. and his stderr
  :                            228 
00:00540F 60F000              +229 	la	new_process
  :                            230 action_running?
00:005410 750041              +231 	ii	YIELD$
00:005411 750072              +232 	ii	THREAD$STATE
00:005412 B60414              +233 	j	action_concluded		
00:005413 B60410              +234 	j	action_running?
  :                            235 
  :                            236 action_concluded
  :                            237 action_skip
00:005414 FCF001              +238 	$ret
00:005415 38000F              +238 
00:005416 350000              +238 
  :                            239 
  :                            240 	$endif
  :                            241 
  :                            242 	$root
  :                            145: 	$include normal_s
  :                            1 .	vector_name	normal_string
  :                            2 .	align a string skipping whitespace
  :                            3 
  :                            4 normal_s $tree
                                	$head_far	 params(to,	int		;
                                				from,	int		;
                                				chars,	int		;
  :                            8 				offset,	int		)
  :                            9 
00:005417 68F004              +10 	lb	from
00:005418 FF0F4A              +11 	call	(rstream_starta)
  :                            12 
00:005419 50F006              +13 	lx	offset		. columns aready read from 1st word
00:00541A 450003              +14 	lr	$word/$byte,,xi	. drop the request if column is out of range
00:00541B F60420              +15 	jxge	clear_end
00:00541C 97A421              +16 	ex	align1, x
  :                            17 
00:00541D 60F005              +18 	la	chars		. maximum output columns
00:00541E 68F003              +19 	lb	to		. input is zero-terminated whitespace skipped
00:00541F FF0EFC              +20 	call	(tokena)
  :                            21 
  :                            22 clear_end
  :                            23 
00:005420 3D0000              +24 	$ret
  :                            25 
  :                            26 align1
00:005421 150000              +27 ?	$do	$word/$byte,	rsr	?*$byte-$byte
00:005422 150008              +27 
00:005423 150010              +27 
  :                            28 
  :                            29 	$root
  :                            30 
  :                            146 
  :                            147 	$list	5
  :                            148 
  :                            149: 	$include http.msm
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 HTTP_USER $equ	1		. there may be a second web pages tree
  :                            41 				. for the customer
  :                            42 HTTP_PORT $equ	80
  :                            43 
  :                            44 	$if	0		. moved to ascii.def
  :                            45 CR	$equ	0d
  :                            46 LF	$equ	0a
  :                            47 HT	$equ	09
  :                            48 	$endif
  :                            49 
  :                            50 $(67::,y)
43:000000                     +51 fs_lookup	$filetag
43:000001                     +51 
43:000002                     +51 
43:000004                     +51 
43:000006                     +51 
43:000007                     +51 
  :                            52 
  :                            53 $(3)
03:000090 000000              +54 http_s	+	0
03:000091 FFFFFF              +55 http_bound -	1
03:000092 FFFFFFFFFFFF        +56 http_sla   -	1:d
  :                            57 
03:000094 FFFFFFFFFFFF        +58 fs24_sla   -	1:d
  :                            59 . fs24_cursor -	1:d
  :                            60 
  :                            61 . http_file_octets
  :                            62 .	+	0:d
  :                            63 
  :                            64 	$if	HTTP_USER
03:000096 FFFFFFFFFFFF        +65 fs24_sla2  -	1:d
  :                            66 	$endif
  :                            67 
03:000098 000001              +68 http_threads	1
  :                            69 
  :                            70 http_formation1
                                	"HTTP/1.1 200 OK":CR:LF:;
                                	"Content-Type: text/html; charset=UTF-8":CR:LF:;
03:000099 485454502F312E3120323030204F4B0D0A436F6E74656E74
                              +73 	"Content-Length: "
03:0000A1 2D547970653A20746578742F68746D6C3B20636861727365
                              +73 
03:0000A9 743D5554462D380D0A436F6E74656E742D4C656E6774683A
                              +73 
03:0000B1 200000              +73 
  :                            74 http_formation1_length $equ	$bits/$byte
  :                            75 http_formation2
03:0000B2 000000              +76 	$do	8,	+	0
03:0000B3 000000              +76 
03:0000B4 000000              +76 
03:0000B5 000000              +76 
03:0000B6 000000              +76 
03:0000B7 000000              +76 
03:0000B8 000000              +76 
03:0000B9 000000              +76 
  :                            77 
  :                            78 http_listening_transmission
03:0000BA 000000              +79 	+	0
  :                            80 . http_name_buffer
  :                            81 	$res	84/3
  :                            82 
  :                            83 $(0)
  :                            84 http_serve
  :                            85 
  :                            86 	$if	HTTP_THREADED
  :                            87 
00:005424 4F0F4B              +88 	ql	(http_thread,,,:q)
00:005425 750047              +89 	ii	THREAD$
  :                            90 
00:005426 C60429              +91 	jza	http_zstart
(+03)10
00:005427 6D2682              +92 	lb	$3("*http"),,xi
00:005428 750049              +93 	ii	TAG$
  :                            94 
  :                            95 http_zstart
00:005429 3D0000              +96 	fret	0
  :                            97 
  :                            98 http_thread
  :                            99 	$endif
  :                            100 
(+03)0f
00:00542A 700090              +101 	tz	http_s
00:00542B B60443              +102 	j	http_bound?
00:00542C 600EF1              +103 	la	(IPPROTO_TCP*/16)
00:00542D FF0ED2              +104 	call	(__socket)
00:00542E E60467              +105 	jna	http_zserve
(+03)0f
00:00542F 200090              +106 	sa	http_s
  :                            107 
00:005430 9F0F4F              +108 	c	(bind) a (HTTP_PORT:d),,long
00:005431 F80004              +108 
00:005432 FCF003              +108 
00:005433 FF0ED5              +108 
00:005434 38000F              +108 
  :                            109 
  :                            110 .	lb	(HTTP_PORT)
  :                            111 .	sb	7
  :                            112 .	z	6
  :                            113 .	call	(bind)
  :                            114 
(+03)0f
00:005435 200091              +115 	sa	http_bound
00:005436 E60467              +116 	jna	http_zserve
00:005437 CF000A              +117 	dl	10
(+03)0f
00:005438 C70092              +118 	ds	http_sla
  :                            119 
00:005439 450001              +120 	lr, xi	1
(+01)10
00:00543A 5D05D2              +121 	ly, xi	$1("web")
00:00543B 160030              +122 	dsr	48
00:00543C FF0F51              +123 	call	(fs_find)
(+03)0f
00:00543D C70094              +124 	ds	fs24_sla
  :                            125 
  :                            126 	$if	HTTP_USER
00:00543E 450002              +127 	lr	2,,xi
(+01)10
00:00543F 5D05D3              +128 	ly, xi	$1("web2")
00:005440 160030              +129 	dsr	48
00:005441 FF0F51              +130 	call	(fs_find)
(+03)0f
00:005442 C70096              +131 	ds	fs24_sla2
  :                            132 	$endif
  :                            133 
  :                            134 http_bound?
(+03)0f
00:005443 780091              +135 	tp	http_bound
00:005444 B60467              +136 	j	http_zserve
  :                            137 
(+03)0f
00:005445 CF0092              +138 	dl	http_sla
00:005446 34002F              +139 	sabr	BSOCKET
00:005447 60D005              +140 	la	s:tcp:tbase
00:005448 34002F              +141 	sabr	BSOCKET
  :                            142 
  :                            143 .	call	(tcp_hash_localsocket)
  :                            144 
  :                            145 http_walk_q
00:005449 500F52              +146 	lx	(BSOCKET*/12++tlist:chain(1)+TPORTCHAIN(HTTP_PORT))
  :                            147 
(+03)0f
00:00544A 1000BA              +148 	sx	http_listening_transmission
  :                            149 
  :                            150 
  :                            151 http_walk
00:00544B 50A000              +152 	lx	transmission:next
00:00544C 700002              +153 	tz	x
00:00544D B6044F              +154 	j	$+2
00:00544E B60465              +155 	j	http_xserve
  :                            156 
00:00544F 600F53              +157 	la	(HTTP_PORT)
00:005450 480EF6              +158 	lk	(00FFFF)
00:005451 AFA007              +159 	mta	transmission:socket_address+1
00:005452 B6044B              +160 	j	http_walk
  :                            161 
(+03)0f
00:005453 1000BA              +162 	sx	http_listening_transmission
  :                            163 
00:005454 60A001              +164 	la	transmission:state
00:005455 C5FFFB              +165 	aa, xi	-TCP_ESTABLISHED
00:005456 C6045B              +166 	jza	http_traffic?
00:005457 C50001              +167 	aa	TCP_ESTABLISHED-TCP_SYNRECEIVED,,xi
00:005458 D60460              +168 	jnza	http_remote_close?
00:005459 FF0EF7              +169 	call	(xaccept)
00:00545A B6044B              +170 	j	http_walk		. next
  :                            171 
  :                            172 http_traffic?
00:00545B FF0F54              +173 	call	(tcpr)			. a message of some sort? 
00:00545C C6044B              +174 	jza	http_walk		. far call to read segment queue
  :                            175 
00:00545D 10C007              +176 	sx	descriptor:tcbloc, a
  :                            177 
  :                            178 	$if	0			. nothing gained by more threads
  :                            179 	sa	6			. parameter
  :                            180 	z	7
  :                            181 .	ql	(http_request_thread,,,:q)
  :                            182 	dl	(http_request_thread,:d)
  :                            183 				. assign the connection as parameter
  :                            184 	ii	THREAD$
  :                            185 	jnza	http_walk		. thread started
  :                            186 	$endif
  :                            187 
  :                            188 					. thread not started but message read accepted
00:00545E 3E0468              +189 	lcal	http_request_thread	. serve request in this thread
00:00545F B6044B              +190 	j	http_walk		. if connection not really established
  :                            191 					. the call will return without action
  :                            192 http_remote_close?
00:005460 C5FFFC              +193 	aa, xi	TCP_SYNRECEIVED-TCP_CLOSEWAIT
00:005461 D6044B              +194 	jnza	http_walk
00:005462 FF0EF8              +195 	call	(xdisco)
00:005463 750041              +196 	ii	YIELD$			. in case TCP servicing needed
00:005464 B60449              +197 	j	http_walk_q		. start at the list start
  :                            198 					. after you have done this
  :                            199 http_xserve
  :                            200         $if     HTTP_THREADED
  :                            201 	$if	1
00:005465 750041              +202 	ii	YIELD$
  :                            203 	$else
  :                            204 	dl	(10d)
  :                            205         ii      TWAIT$
  :                            206 	$endif
00:005466 B60449              +207         j       http_walk_q
  :                            208         $endif
  :                            209 http_zserve
00:005467 3D0000              +210         fret    0
  :                            211 
  :                            212 
                                http_request_thread $head_near	scalars(http_thread_request, 	int, a		;
                                					http_thread_transmission, int, descriptor:tcbloc, a	;
                                					fs24_cursor,		long		;
                                					http_file_octets,	long		;	
00:005468 F80004              +217 					http_target_name, 	72//3		)
00:005469 F8C007              +217 
00:00546A 9F0F34              +217 
00:00546B 9F0F34              +217 
00:00546C 8F0ECD              +217 
00:00546D 8FF000              +217 
00:00546E 8FF000              +217 
00:00546F 8FF000              +217 
00:005470 8FF000              +217 
00:005471 8FF000              +217 
  :                            218 
  :                            219 
(+03)0f
00:005472 170098              +220 	inc	http_threads
  :                            221 .	lx	desciptor:tcbloc, a
  :                            222 .	sx	http_thread_transmission
  :                            223 
00:005473 5CF000              +224 	ly	http_target_name,,i
00:005474 3E04CA              +225 	lcal	http_get_what
  :                            226 
(+03)0f
00:005475 CF0094              +227 	dl	fs24_sla		. fs descriptor from
  :                            228 
  :                            229 	$if	HTTP_USER
00:005476 C60479              +230 	jza	http_search2
  :                            231 	$else
  :                            232 	jza	http_drop_request	. global initialisation
  :                            233 	$endif
  :                            234 
00:005477 FF0F55              +235 	call	(fs_dsearch)
00:005478 D60484              +236 	jnza	http_located
  :                            237 
  :                            238 	$if	HTTP_USER
  :                            239 http_search2
(+03)0f
00:005479 CF0096              +240 	dl	fs24_sla2		. user pages directory
00:00547A C604BF              +241 	jza	http_drop_request
00:00547B FF0F55              +242 	call	(fs_dsearch)
00:00547C D60484              +243 	jnza	http_located
(+03)0f
00:00547D CF0094              +244 	dl	fs24_sla		. need to ask a second time
00:00547E C604BF              +245 	jza	http_drop_request
  :                            246 	$endif
  :                            247 
(+01)10
00:00547F 5D05D5              +248 	ly, xi	$1("index.html")
00:005480 450004              +249 	lr, xi	4
  :                            250 
(+03)0f
00:005481 CF0094              +251 	dl	fs24_sla
00:005482 FF0F55              +252 	call	(fs_dsearch)
00:005483 C604BF              +253 	jza	http_drop_request	. if you can't find the default page
  :                            254 					. something's wrong with the fs
  :                            255 http_located
00:005484 C7F01A              +256 	ds	fs24_cursor		. fs_dsearch returned fs_lookup in b
  :                            257 					. although it's typed as ,y
  :                            258 
  :                            259 .	dpush	fs_lookup:quanta, b
  :                            260 
  :                            261 	$if	1
(+03)10
00:005485 6D0099              +262 	lb	http_formation1,,xi
00:005486 4D5010              +263 	lk	05010,,xi
00:005487 650049              +264 	la	http_formation1_length,,xi
  :                            265 	$else
  :                            266 
  :                            267 	push,xi	http_formation1
  :                            268 	pop	q
  :                            269 	la, xi	http_formation1_length
  :                            270 
  :                            271 	push,xi	05010
  :                            272 	pop	SOCKET_CALL_FLAGS
  :                            273 	$endif
  :                            274 
00:005488 50F01C              +275 	lx	http_thread_transmission
00:005489 FF0F20              +276 	call	(tcp_tx)
00:00548A E604C4              +277 	jna	http_hangup
  :                            278 
00:00548B 58F01B              +279 	ly	fs24_cursor+1
00:00548C CFB007              +280 	dl	fs_lookup:quanta
00:00548D C7F018              +281 	ds	http_file_octets
  :                            282 
  :                            283 
(+03)10
00:00548E FD00B2              +284 	push, xi http_formation2
00:00548F 38000C              +285 	pop	p
  :                            286 
00:005490 300016              +287 	z	WDATAC
00:005491 300010              +288 	z	BYTES
00:005492 FF0F13              +289 	call	(iedit48ua)
  :                            290 .	la, xi	0
00:005493 1D0010              +291 	wsr	16
00:005494 600010              +292 	la	BYTES
  :                            293 
  :                            294 	$if	1
(+03)10
00:005495 6D00B2              +295 	lb	http_formation2,,xi
00:005496 4D5010              +296 	lk	05000++TCP_ACK,,xi
  :                            297 	$else
  :                            298 
  :                            299 	push,xi	http_formation2
  :                            300 	pop	q
  :                            301 	$endif
  :                            302 
00:005497 50F01C              +303 	lx	http_thread_transmission
00:005498 FF0F20              +304 	call	(tcp_tx)
00:005499 E604C4              +305 	jna	http_hangup
  :                            306 
  :                            307 	$if	1
00:00549A 4D5010              +308 	lk	05000++TCP_ACK,,xi
(+03)10
00:00549B 6D2684              +309 	lb	$3("":CR:LF:CR:LF),,xi
  :                            310 	$else
  :                            311 
  :                            312 	push,xi $1("":CR:LF:CR:LF)
  :                            313 	pop	q
  :                            314 	$endif
  :                            315 
00:00549C 650004              +316 	la, xi	$bits/$byte
00:00549D 50F01C              +317 	lx	http_thread_transmission
00:00549E FF0F20              +318 	call	(tcp_tx)
00:00549F E604C4              +319 	jna	http_hangup
  :                            320 
  :                            321 http_next_extent
00:0054A0 CFF01A              +322 	dl	fs24_cursor
00:0054A1 C604B8              +323 	jza	http_pushover
00:0054A2 FF0F56              +324 	call	(fs_xbase)
00:0054A3 C7F01A              +325 	ds	fs24_cursor		. extent words are in r
  :                            326 					. data address is in y 
  :                            327 .	sy	q
00:0054A4 680000              +328 	lb	r
00:0054A5 E50003              +329 	m, xi	3		
00:0054A6 C70006              +330 	ds	6
  :                            331 
00:0054A7 CFF018              +332 	dl	http_file_octets
00:0054A8 DF0006              +333 	dan	6
00:0054A9 5E04B2              +334 	jnc	http_final_extent
00:0054AA C7F018              +335 	ds	http_file_octets
00:0054AB 600007              +336 	la	7
00:0054AC 680003              +337 	lb	y
00:0054AD 4D5010              +338 	lk	05000++TCP_ACK,,xi
  :                            339 
00:0054AE 50F01C              +340 	lx	http_thread_transmission
00:0054AF FF0F20              +341 	call	(tcp_tx)
00:0054B0 E604C4              +342 	jna	http_hangup
00:0054B1 B604A0              +343 	j	http_next_extent
  :                            344 
  :                            345 http_final_extent
00:0054B2 680003              +346 	lb	y
00:0054B3 60F019              +347 	la	http_file_octets+1
00:0054B4 50F01C              +348 	lx	http_thread_transmission
00:0054B5 4D5010              +349 	lk	05000++TCP_ACK,,xi
00:0054B6 FF0F20              +350 	call	(tcp_tx)
00:0054B7 E604C4              +351 	jna	http_hangup
  :                            352 
  :                            353 http_pushover
  :                            354 	$if	1
(+03)10
00:0054B8 6D2686              +355 	lb	$3("":CR:LF),,xi
00:0054B9 650002              +356 	la	2,,xi
00:0054BA 4D5018              +357 	lk	05000++TCP_ACK++TCP_PSH,,xi
  :                            358 	$else
  :                            359 	push,xi	$1("":CR:LF)
  :                            360 	pop	q
  :                            361 	la, xi	2
  :                            362 	push, xi	05018
  :                            363 	pop		SOCKET_CALL_FLAGS
  :                            364 	$endif
  :                            365 
00:0054BB 50F01C              +366 	lx	http_thread_transmission
00:0054BC FF0F20              +367 	call	(tcp_tx)
00:0054BD E604C4              +368 	jna	http_hangup
  :                            369 
  :                            370 http_norequest
00:0054BE B604C4              +371 	j	http_hangup
  :                            372 
  :                            373 http_drop_request
                                	lb, xi	$3("HTTP/1.1 200 OK":CR:LF:;
                                                   "Content-Type: text/html; charset=UTF-8":CR:LF:;
                                		   "Content-Length: 36":CR:LF:CR:LF:;
                                		   "<html><div>":CR:LF:;
(+03)10
00:0054BF 6D2687              +378 		   "web archive not found":CR:LF:"</div></html>":CR:LF)
  :                            379 
  :                            380 .	sb	q
00:0054C0 650082              +381 	la	$bits/$byte,,xi
00:0054C1 50F01C              +382 	lx	http_thread_transmission
00:0054C2 4D5018              +383 	lk	05000++TCP_ACK++TCP_PSH,,xi
00:0054C3 FF0F20              +384 	call	(tcp_tx)
  :                            385 
  :                            386 http_hangup
  :                            387 http_thread_exit
00:0054C4 60F01D              +388 	la	http_thread_request
00:0054C5 FF0F57              +389 	call	(tcpz)
(+03)0f
00:0054C6 1F0098              +390 	dec	http_threads
00:0054C7 FCF01E              +391 	$ret				.	thread end
00:0054C8 38000F              +391 
00:0054C9 350000              +391 
  :                            392 
  :                            393 
  :                            394 http_get_what				. y = caller's name buffer
  :                            395 					. a = descriptor request message
  :                            396 http_name_buffer $equf	0, y
00:0054CA F80003              +397 	push	y
00:0054CB F8C006              +398 	push	descriptor:apdata, a
00:0054CC 38000D              +399 	pop	q
00:0054CD 300014              +400 	z	RDATAC
00:0054CE 050020              +401 	on	b$stream16r
00:0054CF 0D0040              +402 	off	b$streamZR
00:0054D0 150010              +403 	rsr	16
00:0054D1 150008              +404 	rsr	8
00:0054D2 4DFFFF              +405 	lk, xi	-1
00:0054D3 AF0F58              +406 	mta	("GET")
00:0054D4 B60500              +407 	j	http_get_default
00:0054D5 150010              +408 	rsr	16
00:0054D6 4D00FF              +409 	lk, xi	255
00:0054D7 AF0F59              +410 	mta	('/')
00:0054D8 B60500              +411 	j	http_get_default
  :                            412 
00:0054D9 150008              +413 	rsr	8
00:0054DA AF0F5A              +414 	mtane	(' ')
00:0054DB B604DD              +414 
00:0054DC B60500              +415 	j	http_get_default
00:0054DD AF0F5B              +416 	mtane	('?')
00:0054DE B604E0              +416 
00:0054DF 150008              +417 	rsr	8
  :                            418 
00:0054E0 44B018              +419 	lr, i	http_name_buffer+72//3
00:0054E1 A500FF              +420 	and, xi 255
  :                            421 
00:0054E2 B604E5              +422 	j	http_name_2nd_read
  :                            423 
  :                            424 http_name
00:0054E3 3E04F5              +425 	lcal	http_name_mark
00:0054E4 B604F0              +426 	j	http_name1
  :                            427 http_name_2nd_read
00:0054E5 3E04F5              +428 	lcal	http_name_mark
00:0054E6 B604ED              +429 	j	http_name2
00:0054E7 3E04F5              +430 	lcal	http_name_mark
00:0054E8 B604EE              +431 	j	http_name3
  :                            432 
00:0054E9 20B000              +433 	sa	0, y
00:0054EA 650000              +434 	la, xi	0
00:0054EB 8D0001              +435 	ay, xi	1
  :                            436 
00:0054EC B604E3              +437 	j	http_name
  :                            438 	
  :                            439 
  :                            440 http_name2
00:0054ED 260008              +441 	sal	8
  :                            442 http_name3
00:0054EE 20B000              +443 	sa	0, y
00:0054EF 8D0001              +444 	ay, xi	1
  :                            445 http_name1
00:0054F0 600003              +446 	la	y
00:0054F1 D0F000              +447 	ana	0, sp
00:0054F2 400004              +448 	lr	a
00:0054F3 380003              +449 	pop	y
00:0054F4 350000              +450 	lret	0
  :                            451 
  :                            452 	
  :                            453 http_name_mark
00:0054F5 150008              +454 	rsr	8
00:0054F6 AF0F5A              +455 	mtane	(' ')
00:0054F7 B604F9              +455 
00:0054F8 B604FE              +456 	j	http_name_x		. end, truncate the ASCII space
00:0054F9 AF0F5B              +457 	mtane	('?')
00:0054FA B604FC              +457 
00:0054FB B604FE              +458 	j	http_name_x		. end, truncate the quizzical
00:0054FC AF0F5C              +459 	mta	('=')			. out of range character?
00:0054FD 350001              +460 	lret	1			. character OK for being in name
  :                            461 http_name_x
00:0054FE A5FF00              +462 	and,xi	-256			. truncate the out-of-range character
00:0054FF 350000              +463 	lret	0
  :                            464 
  :                            465 
  :                            466 http_get_default
00:005500 450004              +467 	lr, xi	4
(+01)10
00:005501 5D05D5              +468 	ly, xi	$1("index.html")
00:005502 17000F              +469 	inc	sp
00:005503 350000              +470 	lret	0
  :                            150: 	$include iserver1
  :                            1 
  :                            2 	$path		../
  :                            3 .	$include	def/rta.def
  :                            4 .	$include	def/ii.def
  :                            5 .	$include	def.sys/banks.def
  :                            6 .	$include	def.sys/base.def
  :                            7 .	$include	language/stack.def
  :                            8 .	$include	lib/alib.def
  :                            9 .	$include	lib/register.def
  :                            10: 	$include	lib/aquiform.def
  :                            1 
  :                            2 READ_STREAM_START* $proc
  :                            3 
  :                            4 	$if	COUNTED_STREAM
  :                            5 	sa	BYTES
  :                            6 	$else
  :                            7 	z	BYTES
  :                            8 	$endif
  :                            9 
  :                            10 	sb	q	. once per input buffer
  :                            11 	z	RDATAC
  :                            12 	READ_START
  :                            13 	la	' ',,xi
  :                            14 	sa	LAST_BYTE_READ
  :                            15 	$end
  :                            16 
  :                            17 WRITE_STREAM_START* $proc
  :                            18 	z	BYTES
  :                            19 	sx	p
  :                            20 	z	WDATAC
  :                            21 	WRITE_START
  :                            22 	$end
  :                            23 
  :                            24 READ_START* $proc	. once per input specification
  :                            25 	$if	AQUIFORM_NET16
  :                            26 	on	b$stream16r++b$streamZR
  :                            27 	off	half$w
  :                            28 	$else
  :                            29 	on	b$streamZR
  :                            30 	off	b$stream16r++half$w
  :                            31 	$endif
  :                            32 	$end		. it is up to the calling application
  :                            33 			. to change b$stream16R back if it needs
  :                            34 
  :                            35 WRITE_START* $proc
  :                            36 	$if	AQUIFORM_NET16
  :                            37 	on	b$stream16w
  :                            38 	off	half$w
  :                            39 	$else
  :                            40 	off	b$stream16w++half$w
  :                            41 	$endif
  :                            42 	$end
  :                            43 
  :                            44 READ_BYTE* $proc *
  :                            45 	la	LAST_BYTE_READ
  :                            46 	jza	thats_all
  :                            47 	rsr	$byte
  :                            48 	sa	LAST_BYTE_READ
  :                            49 	tz	BYTES
  :                            50 	lcal	counted_stream
  :                            51 thats_all
  :                            52 	$end
  :                            53 
  :                            54 p	$proc
  :                            55 WRITE_BYTE* $name
  :                            56 	sal	$word-$byte
  :                            57 WRITE_UBYTE* $name
  :                            58 	wsr	$byte
  :                            59 	inc	BYTES
  :                            60 	$end
  :                            61 
  :                            62 WRITE3_BYTES* $proc		. only works for 3 octets
  :                            63 	wsr	16
  :                            64 	wsr	8
  :                            65 	push	3,,xi
  :                            66 	popA	BYTES
  :                            67 	$end
  :                            68 
  :                            69 WRITE_BYTES* $proc
  :                            70 BITS	$set	WRITE_BYTES(1, 1)*$byte
  :                            71 	$if	BITS>16
  :                            72 	wsr	16
  :                            73 	wsr	BITS-16
  :                            74 	$else
  :                            75 	wsr	BITS
  :                            76 	$endif
  :                            77 	push	BITS/$byte,,xi
  :                            78 	popA	BYTES
  :                            79 	$end
  :                            80 
  :                            81 
  :                            11 .	$include	t77.4/dq.def
  :                            12 .	$include	t77.4/ip.def
  :                            13 .	$include	t77.4/socket.def
  :                            14 	$path
  :                            15 
  :                            16 . AQUIFORM_NET16	$equ	1
  :                            17 . COUNTED_STREAM	$equ	1
  :                            18 ISERVER_PORT	$equ	129
  :                            19 
  :                            20 iserve	$tree
  :                            21 
  :                            22 $(0)
  :                            23 integer_serve
00:005504 4F0F5D              +24 	ql	(iserve:i_server1,,,:q)
00:005505 750047              +25 	ii	THREAD$
00:005506 C60509              +26 	jza	iserver_zstart
(+03)10
00:005507 6D26B3              +27 	lb	$3("*iserver":0),,xi
00:005508 750049              +28 	ii	TAG$
  :                            29 iserver_zstart
00:005509 3D0000              +30 	fret
  :                            31 
  :                            32 $(1)
01:00042F 000000              +33 socketi	+	0
01:000430 FFFFFF              +34 i_bound -	1
01:000431 000000              +35 portcb_lva	0
01:000432 000000              +36 portcb		0
  :                            37 
  :                            38 $(70::,fp)
  :                            39 descriptor	acw
  :                            40 
  :                            41 $(66::,x)
42:000000                     +42 so	$socket
42:000002                     +42 
42:000004                     +42 
42:000005                     +42 
42:000006                     +42 
42:000007                     +42 
42:000005                     +42 
42:000006                     +42 
42:000007                     +42 
  :                            43 
  :                            44 $(0)
                                i_server1	$head_near	scalars(response_axw,	int	;		
                                					operator,	int	;
                                					left,		float	;
                                					right,		float	;
                                					xtra,		float	;
                                					signs1,		int	;
00:00550A FD0000              +51 					signs,		long	)
00:00550B FD0000              +51 
00:00550C 8F0ECD              +51 
00:00550D 8F0ECD              +51 
00:00550E 8F0ECD              +51 
00:00550F FD0000              +51 
00:005510 9F0F34              +51 
  :                            52 
  :                            53 .	tz	socketi
  :                            54 .	j	i_rx
00:005511 600ED1              +55 	la	(IPPROTO_UDP*/16)
00:005512 FF0ED2              +56 	call	(__socket)
(+01)0f
00:005513 20042F              +57 	sa	socketi
00:005514 E60591              +58 	jna	i_error
  :                            59 
00:005515 9F0F61              +60 	c	(bind) a (ISERVER_PORT:d),,long
00:005516 F80004              +60 
00:005517 FCF003              +60 
00:005518 FF0ED5              +60 
00:005519 38000F              +60 
  :                            61 
  :                            62 .	lb, xi	ISERVER_PORT
  :                            63 .	sb	7
  :                            64 .	z	6
  :                            65 .	call	(bind)
  :                            66 
(+01)0f
00:00551A 200430              +67 	sa	i_bound
00:00551B E60591              +68 	jna	i_error
  :                            69 
00:00551C CF000A              +70 	dl	10
(+01)0f
00:00551D C70431              +71 	ds	portcb_lva
  :                            72 
  :                            73 . i_rx
(+01)0f
00:00551E 780430              +74 	tp	i_bound
00:00551F B60591              +75 	j	i_error
  :                            76 
(+01)0f
00:005520 CF0431              +77 	dl	portcb_lva
00:005521 34002F              +78 	sabr	BSOCKET
  :                            79 
00:005522 050070              +80 	on	b$stream16r++b$streamZR++b$stream16w
  :                            81 
  :                            82 .	la	(0000000s)
  :                            83 .	ii	FP_GUARD$
  :                            84 
00:005523 68D006              +85 i_rx1	lb	so:udp:socket_inq.head, b
00:005524 CE058E              +86 	jzb	i_no_traffic
  :                            87 
  :                            88 	$if	1
  :                            89 
00:005525 28000E              +90 	sb	fp
00:005526 600024              +91 	la	5+23+8
00:005527 FF0ED6              +92 	call	(udp_rtxbuffer)
00:005528 C6058A              +93 	jza	i_release
00:005529 20F010              +94 	sa	response_axw
00:00552A 60E003              +95 	la	descriptor:bytes
00:00552B 68E006              +96 	lb	descriptor:apdata
00:00552C FF0ED7              +97 	call	(rstream_start_net)
  :                            98 
  :                            99 	$else
  :                            100 
  :                            101 	la	descriptor:bytes, b
  :                            102 	sa	BYTES
  :                            103 
  :                            104 	z	RDATAC
  :                            105 
  :                            106 	push	descriptor:apdata, b
  :                            107 	pop	q
  :                            108 
  :                            109 	la, xi	5+23+8
  :                            110 	call	(udp_rtxbuffer)
  :                            111 	jza	i_release
  :                            112 
  :                            113 	ly	descriptor:apdata, a
  :                            114 	sa	response_axw
  :                            115 	sy	p
  :                            116 	z	WDATAC
  :                            117 	z	WDATA
  :                            118 
  :                            119 	$endif
  :                            120 
00:00552D FF0F63              +121 	call	(iscan72)
00:00552E 47F00B              +122 	qs	left
  :                            123 
00:00552F FF0ED9              +124 	call	(symbol_scan)
00:005530 20F00F              +125 	sa	operator
  :                            126 
00:005531 FF0F63              +127 	call	(iscan72)
00:005532 47F007              +128 	qs	right
  :                            129 
  :                            130 
00:005533 450000              +131 	lr, xi	0
00:005534 600013              +132 	la	LAST_BYTE_READ	.	LAST_BYTE_READ
00:005535 C5FFD4              +133 	aa, xi	-','
  :                            134 
00:005536 D6053C              +135 	jnza	i_again
00:005537 FF0EDA              +136 	call	(iscan_skip)
00:005538 6D0001              +137 	lb, xi	1		.	nothing scanned
00:005539 CDFFFF              +138 	ab, xi	-1
00:00553A EE053C              +139 	jnb	i_again
00:00553B 400005              +140 	lr	b
  :                            141 
  :                            142 i_again
00:00553C 60F00F              +143 	la	operator
  :                            144 
00:00553D 680004              +145 	anu, xi	'+'
00:00553E DD002B              +145 
00:00553F CE054A              +146 	jzb	i_add
00:005540 680004              +147 	anu, xi	'-'
00:005541 DD002D              +147 
00:005542 CE0554              +148 	jzb	i_add_negative
00:005543 680004              +149 	anu, xi	'*'
00:005544 DD002A              +149 
00:005545 CE055F              +150 	jzb	i_multiply
00:005546 680004              +151 	anu, xi	'/'
00:005547 DD002F              +151 
00:005548 CE0567              +152 	jzb	i_divide
00:005549 B60570              +153 	j	i_nop
  :                            154 
  :                            155 i_add
  :                            156 i_add_again
00:00554A CFF00D              +157 	dl	left+2
00:00554B D7F009              +158 	da	right+2
00:00554C C7F00D              +159 	ds	left+2
00:00554D B70004              +160 	sc	a
00:00554E 68F00C              +161 	lb	left+1
00:00554F C8F008              +162 	ab	right+1
00:005550 C80004              +163 	ab	a
00:005551 28F00C              +164 	sb	left+1
00:005552 1E054A              +165 	jdr	i_add_again
00:005553 B60570              +166 	j	i_edit
  :                            167 
  :                            168 i_add_negative
  :                            169 i_add_negative_again
00:005554 CFF00D              +170 	dl	left+2
00:005555 DFF009              +171 	dan	right+2
00:005556 C7F00D              +172 	ds	left+2
00:005557 B70004              +173 	sc	a
00:005558 C5FFFF              +174 	aa, xi	-1
00:005559 68F00C              +175 	lb	left+1
00:00555A C80004              +176 	ab	a
00:00555B D8F008              +177 	anb	right+1
00:00555C 28F00C              +178 	sb	left+1
00:00555D 1E0554              +179 	jdr	i_add_negative_again
00:00555E B60570              +180 	j	i_edit
  :                            181 
  :                            182 i_multiply
  :                            183 i_multiply_again
  :                            184 
  :                            185 	$if	1
  :                            186 
00:00555F FCF00C              +187 	c	(im72_72)	left+1,,i	right+1,,i	left+1,,i
00:005560 FCF009              +187 
00:005561 FCF00E              +187 
00:005562 FCF003              +187 
00:005563 FF0F64              +187 
00:005564 38000F              +187 
  :                            188 
  :                            189 	$elseif	0
  :                            190 
                                	i72m	left+1		;	. multiplicand
                                		right+3		;	. multiplier
  :                            193 		left+1			. product
  :                            194 
  :                            195 	$else
  :                            196 
  :                            197 	lb	left+3
  :                            198 	mf	right+3
  :                            199 	sb	left+3
  :                            200 	dsa	24
  :                            201 	ds	6
  :                            202 	lb	left+2
  :                            203 	mf	right+3
  :                            204 	da	6
  :                            205 	sb	left+2
  :                            206 	sa	7
  :                            207 	lb	left+1
  :                            208 	m	right+3
  :                            209 	ab	7
  :                            210 	sb	left+1
  :                            211 
  :                            212 	$endif
  :                            213 
00:005565 1E055F              +214 	jdr	i_multiply_again
00:005566 B60570              +215 	j	i_edit
  :                            216 
  :                            217 	$if	1
  :                            218 				. integer divide instruction executed
  :                            219 				. simply and once gives 48-bit signed
  :                            220 				. quotient and 24-bit signed remainder
  :                            221 				. from 48-bit dividend and 24-bit divisor
  :                            222 
  :                            223 				. quotient high order bits are in register 6
  :                            224 				. quotient low-order bits are in a
  :                            225 				. remainder is in b
  :                            226 
  :                            227 				. this sequence produces 72-bit signed
  :                            228 				. quotient from 72-bit dividend
  :                            229 i_divide
  :                            230 i_divide_again
  :                            231 
  :                            232 	$if	1
  :                            233 
00:005567 FCF004              +234 	c	(id72_72)	left+1,,i	right+1,,i	left+1,,i	xtra+1,,i
00:005568 FCF00D              +234 
00:005569 FCF00A              +234 
00:00556A FCF00F              +234 
00:00556B FCF004              +234 
00:00556C FF0F65              +234 
00:00556D 38000F              +234 
  :                            235 
  :                            236 	$elseif	0
  :                            237 
                                	i72d	left+1 		;	. dividend
                                		right+3		;	. divisor
                                		left+1		;	. quotient
  :                            241 		left			. remainder
  :                            242 
  :                            243 	$else
  :                            244 
  :                            245 	dl	left+1		. read first 48 dividend bits
  :                            246 	d	right+3		. only 24 divisor bits can be used
  :                            247 				. with integer divide instruction
  :                            248 				. for more than that use floating point
  :                            249 				. or program a bit-race routine
  :                            250 
  :                            251 	sb	7		. set aside the first remainder
  :                            252 	sa	b		. reassemble the first 48-bit quotient
  :                            253 	la	6		. recover the ms 24 quotient bits
  :                            254 	ds	left+1		. store the upper 48 quotient bits
  :                            255 	la	7		. recover 1st remainder
  :                            256 	lb	left+3		. zone with 3rd dividend word
  :                            257 	d	right+3		. divide stage 2
  :                            258 	sb	left		. store final remainder
  :                            259 	sa	left+3		. store third quotient word
  :                            260 
  :                            261 	la	6		. add ms word 2nd quotient to 1st quotient
  :                            262 	dsa	24		. this part is important in decrementing
  :                            263 	da	left+1		. the 2s complement effect on 
  :                            264 	ds	left+1		. the 1st 2 words of a negative quotient
  :                            265 
  :                            266 	$endif
  :                            267 
  :                            268 i_div_dont
  :                            269 
00:00556E 1E0567              +270 	jdr	i_divide_again
  :                            271 
00:00556F B60570              +272 	j	i_edit
  :                            273 
  :                            274 	$else
  :                            275 				. this is a cautious method until
  :                            276 				. the efficient sign-handling version
  :                            277 				. above is checked for all cases
  :                            278 
  :                            279 				. it flips everything to positive
  :                            280 				. magnitude and flips the results
  :                            281 				. back to intended polarities
  :                            282 
  :                            283 				. temporary measure while examining
  :                            284 				. the effects to successive divides
  :                            285 				. in 2s complement
  :                            286 i_divide
  :                            287 	ql	right
  :                            288 	z	right
  :                            289 	jpb	i_divide_p2
  :                            290 	n	right
  :                            291 	call	(n72comp2)
  :                            292 	la	right
  :                            293 	qs	right
  :                            294 i_divide_again
  :                            295 i_divide_p2
  :                            296 	ql	left
  :                            297 	la	b
  :                            298 	saa	24
  :                            299 	sa	left
  :                            300 	jpb	i_divide_p1
  :                            301 	call	(n72comp2)
  :                            302 	la	left
  :                            303 	qs	left
  :                            304 i_divide_p1
  :                            305 	dl	left+1
  :                            306 	d	right+3
  :                            307 	sb	7
  :                            308 	sa	b
  :                            309 	la	6
  :                            310 	ds	left+1
  :                            311 	la	7
  :                            312 	lb	left+3
  :                            313 	d	right+3
  :                            314 	sa	left+3
  :                            315 
  :                            316 	la	left	.	read the dividend sign
  :                            317 	jzb	i_store_remainder
  :                            318 	jpa	i_store_remainder
  :                            319 	xorB,xi	-1	.	if 1s flip the remainder
  :                            320 	ab, xi	1	.	and add 1 to it
  :                            321 i_store_remainder
  :                            322 	sb	left
  :                            323 
  :                            324 	xor	right	.	record mixed or equal signs
  :                            325 	sa	signs	.	
  :                            326 	ql	left
  :                            327 	tp	signs
  :                            328 	call	(n72comp2)
  :                            329 	la	left	.	retrieve the remainder
  :                            330 	qs	left
  :                            331 
  :                            332 	jdr	i_divide_again
  :                            333 	j	i_edit
  :                            334 
  :                            335 	$endif
  :                            336 
  :                            337 i_nop
  :                            338 i_edit
  :                            339 	$if	1
00:005570 50F010              +340 	lx	response_axw
00:005571 50A006              +341 	lx	descriptor:apdata, x
00:005572 FF0EDB              +342 	call	(wstream_start_net)
  :                            343 	$else
  :                            344 	z	BYTES
  :                            345 	$endif
  :                            346 
00:005573 4FF00B              +347 	ql	left
00:005574 FF0F66              +348 	call	(edit72s)
  :                            349 
00:005575 60F00F              +350 	la	operator
00:005576 C5FFD1              +351 	aa, xi	-'/'			. operation was divide?
00:005577 D60581              +352 	jnza	i_ecomplete		. no
  :                            353 
  :                            354 	$if	1
  :                            355 
00:005578 68F004              +356 	lb	xtra+1
00:005579 98F005              +357 	orB	xtra+2
00:00557A 98F006              +358 	orB	xtra+3
00:00557B CE0581              +359 	jzb	i_ecomplete
00:00557C 600F27              +360 	la	(" ":0:0)
00:00557D 1D0008              +361 	wsr	$byte
00:00557E 170010              +362 	inc	BYTES
00:00557F 4FF003              +363 	ql	xtra
00:005580 FF0F66              +364 	call	(edit72s)
  :                            365 
  :                            366 	$else
  :                            367 
  :                            368 	lb	left			. remainder?
  :                            369 	jzb	i_ecomplete		. no
  :                            370 	la	(" ":0:0)
  :                            371 	wsr	$byte			. it's a counted stream 
  :                            372 	inc	BYTES			. but we haven't set macro settings for it
  :                            373 	la	b
  :                            374 	call	(edits)			. sprint the remainder
  :                            375 
  :                            376 	$endif
  :                            377 
  :                            378 i_ecomplete
00:005581 600EE1              +379 	la	("":10:0:0)
00:005582 1D0010              +380 	wsr	$byte*2			. LF + 8 bits to flush
00:005583 1D0008              +381 	WRITE_UBYTE
00:005584 170010              +381 
00:005585 170010              +382 	inc	BYTES			. count LF but not the 8 flushing bits
  :                            383 	
00:005586 50F010              +384 	lx	response_axw
00:005587 600010              +385 	la	BYTES
00:005588 20A003              +386 	sa	descriptor:bytes, x
  :                            387 
  :                            388 
00:005589 FF0EE2              +389 	call	(udp_acw_send)
  :                            390 
  :                            391 i_release
(+01)0f
00:00558A 500432              +392 	lx	portcb			. port structure in scalar frame
00:00558B FF0EE3              +393 	call	(release_udgram)
(+01)0f
00:00558C 680432              +394 	lb	portcb			. port structure in scalar frame
00:00558D B60523              +395 	j	i_rx1
  :                            396 i_no_traffic
00:00558E 750041              +397 	ii	YIELD$
(+01)0f
00:00558F 680432              +398 	lb	portcb
00:005590 B60523              +399 	j	i_rx1
  :                            400 i_error
  :                            401 
00:005591 54F011              +402 	lx, i	$$frame, sp
00:005592 10000F              +403 	sx	sp
00:005593 3D0000              +404 	fret	0
  :                            405 
  :                            406 	$root
  :                            151 
  :                            152 	$path	../fponline
  :                            153: 	$include fponline
  :                            1 
  :                            2 fponline $tree
  :                            3 
  :                            4 UDPQ	$equ	1			. takes less space if you use
  :                            5 					. the socket layer interface
  :                            6 
  :                            7 COMMANDS_EOP $equ d$save1		. high address commands+ in the remote assembly
  :                            8 ZENITH	$equ	d$save			. limit of literal table in the remote assembly
  :                            9 STACK_GUARD $equ d$save2
  :                            10 MESSAGE	$equ	d$save3
  :                            11 
  :                            12 $(3)
03:0000D7 000000              +13 s1		0
03:0000D8 000000000000        +14 socket_lva	0:d
[+0017]18
03:0000DA 000000              +15 editp	+	floating_edit192
  :                            16 buffer	$res	200
  :                            17 
  :                            18 . information	"-0.0":HT:". exponent overflow"
  :                            19 . information_bytes $equ	$bits/$byte
  :                            20 
  :                            21 $(0)
00:005594 4F0F67              +22 launch	ql	(server,,,:q)
00:005595 750047              +23 	ii	THREAD$
00:005596 C60599              +24 	jza	zstart
(+03)10
00:005597 6D26B6              +25 	lb	$3("*fponline":0),,xi
00:005598 750049              +26 	ii	TAG$
00:005599 3D0000              +27 zstart	fret
  :                            28 
00:00559A 600ED1              +29 server	la	(IPPROTO_UDP*/16)
00:00559B FF0ED2              +30 	call	(__socket)
00:00559C E605D3              +31 	jna	leave			. you have no socket
(+03)0f
00:00559D 2000D7              +32 	sa	s1
  :                            33 
00:00559E 9F0F6B              +34 	c	(bind) a (FPONLINE_PORT:d),,long
00:00559F F80004              +34 
00:0055A0 FCF003              +34 
00:0055A1 FF0ED5              +34 
00:0055A2 38000F              +34 
  :                            35 
  :                            36 .	ql	(,,,FPONLINE_PORT:q)
  :                            37 .	la	s1
  :                            38 .	call	(bind)
  :                            39 
00:0055A3 E605D1              +40 	jna	free_socket		. you could not bind
  :                            41 
  :                            42 	$if	UDPQ
00:0055A4 CF000A              +43 	dl	10			. this is a thread
(+03)0f
00:0055A5 C700D8              +44 	ds	socket_lva		. so the socket structure 
  :                            45 	$endif				. should stay based
  :                            46 
  :                            47 
00:0055A6 34002F              +48 	sabr	BSOCKET			. this is a thread
  :                            49 					. this must stay in its window
  :                            50 
  :                            51 .	la	(0E00000s)
  :                            52 .	ii	FP_GUARD$
  :                            53 
  :                            54 rxnext
  :                            55 	$if	UDPQ
(+03)0f
00:0055A7 6800D9              +56 	lb	socket_lva+1
00:0055A8 68D006              +57 	lb	s:udp:socket_inq:head, b
00:0055A9 CE05CD              +58 	jzb	wait
  :                            59 
[+0017]10
00:0055AA 650000              +60 	la	floating_edit192,,xi	. default output edit
(+03)0f
00:0055AB 2000DA              +61 	sa	editp
  :                            62 
00:0055AC 60D003              +63 	la	descriptor:bytes, b
00:0055AD 200010              +64 	sa	BYTES
00:0055AE 60D006              +65 	la	descriptor:apdata, b
00:0055AF 20000D              +66 	sa	q
  :                            67 
00:0055B0 650036              +68 	la	43+7+1+2+1,,xi		. character columns largest response	
00:0055B1 FF0ED6              +69 	call	(udp_rtxbuffer)
00:0055B2 C605CA              +70 	jza	release_request
  :                            71 
00:0055B3 20000E              +72 	sa	fp
  :                            73 	
(+03)10
00:0055B4 5500DB              +74 	lx	buffer,,xi
00:0055B5 FF0F6D              +75 	call	(xdr_inopaque24)	. BYTES [q]->[x]
(+03)10
00:0055B6 5D00DB              +76 	ly	buffer,,xi
00:0055B7 3E05D4              +77 	lcal	pdu
  :                            78 
00:0055B8 50E006              +79 	lx	descriptor:apdata
00:0055B9 FF0EDB              +80 	call	(wstream_start_net)
00:0055BA 300010              +81 	z	BYTES
00:0055BB 300016              +82 	z	WDATAC
00:0055BC 300017              +83 	z	WDATA
  :                            84 
00:0055BD 75004E              +85 	ii	FP_XPO$FLAG
00:0055BE B605C1              +86 	j	inform
  :                            87 
(+03)0f
00:0055BF FF00DA              +88 	call	editp
00:0055C0 B605C4              +89 	j	respond
  :                            90 
(+03)0f
00:0055C1 5C26BA              +91 inform	ly	$3("-0.0":HT:HT:". ":01b:05b:"41;1;37m":"exponent overflow":01b:05b:"0m"),,i
00:0055C2 450027              +92 	lr	$bits/$byte,,xi
00:0055C3 FF0F6E              +93 	call	(xdr_outopaque24)
  :                            94 	
  :                            95 
  :                            96 respond
  :                            97 	$if	1
00:0055C4 650000              +98 	la	0,,xi
00:0055C5 1D0008              +99 	wsr	8
00:0055C6 600010              +100 	la	BYTES
  :                            101 	$else
  :                            102 	la	(LF*/16)
  :                            103 	wsr	24
  :                            104 	la	BYTES
  :                            105 	la	1, a, i
  :                            106 	$endif
  :                            107 
00:0055C7 20E003              +108 	sa	descriptor:bytes
00:0055C8 50000E              +109 	lx	fp
00:0055C9 FF0EE2              +110 	call	(udp_acw_send)
  :                            111 release_request
(+03)0f
00:0055CA 5000D9              +112 	lx	socket_lva+1
00:0055CB FF0EE3              +113 	call	(release_udgram)
00:0055CC B605A7              +114 	j	rxnext
  :                            115 
  :                            116 	$else
                                	c	(recv)	s1		;
                                			buffer,,xi	;
                                			600,,xi		;
  :                            120 			(UDP_AUTO_CONNECT:s)
  :                            121 
  :                            122 
  :                            123 	jna	disengage_free		. bound but not reading
  :                            124 	jza	wait
  :                            125 
  :                            126 	ly	buffer,,xi
  :                            127 	lcal	pdu
  :                            128 	ly	buffer,,xi
  :                            129 	sy	p
  :                            130 	z	BYTES
  :                            131 	z	WDATAC
  :                            132 	z	WDATA
  :                            133 
  :                            134 	ii	FP_XPO$FLAG
  :                            135 	j	complain
  :                            136 
  :                            137 	call	(floating_edit192)
  :                            138 
  :                            139 	la	(LF*/16:s)
  :                            140 	wsr	24
  :                            141 
                                	c	(send)	s1		;
                                			buffer,,xi	;
                                			BYTES		;
  :                            145 			0
  :                            146 	$endif
  :                            147 
00:0055CD 750041              +148 wait	ii	YIELD$
00:0055CE B605A7              +149 	j	rxnext
  :                            150 
  :                            151 disengage_free
(+03)0f
00:0055CF 6000D7              +152 	la	s1
00:0055D0 FF0F6F              +153 	call	(net_disengage)
  :                            154 
  :                            155 free_socket
(+03)0f
00:0055D1 6000D7              +156 	la	s1
00:0055D2 750051              +157 	ii	FREE_HANDLE$
00:0055D3 750046              +158 leave	ii	EXIT$
  :                            159 
00:0055D4 50000F              +160 pdu	lx	sp
00:0055D5 100012              +161 	sx	STACK_GUARD
  :                            162 
00:0055D6 CFB000              +163 	dl	0, y
00:0055D7 C5FFE6              +164 	aa	-X_CODES,,xi		. does it look like an fponline PDU ?
00:0055D8 D606AA              +165 	jnza	outrage
  :                            166 
00:0055D9 600005              +167 	la	b			. range test what this says
00:0055DA C5FF4A              +168 	aa	-FPONLINE_MESSAGE_LIMIT+8*2+2,,xi
00:0055DB 7E06AA              +169 	jc	outrage			. test maximum message less 2 operands
  :                            170 
00:0055DC C80003              +171 	ab	y			. change offset to address
00:0055DD 60D001              +172 	la	1, b			. $zenith function is only real
00:0055DE C70010              +173 	ds	ZENITH			. after all literals have been generated on 2nd pass
  :                            174 
00:0055DF C5FF38              +175 	aa	-FPONLINE_MESSAGE_LIMIT,,xi
00:0055E0 7E06AA              +176 	jc	outrage
  :                            177 
00:0055E1 180013              +178 	sy	MESSAGE
  :                            179 
00:0055E2 400011              +180 command	lr	COMMANDS_EOP		. high address of commands list+
00:0055E3 8D0002              +181 	ay	2,,xi
00:0055E4 FE06AC              +182 	jyge	exitu
00:0055E5 50B000              +183 	lx	0, y
00:0055E6 45001A              +184 	lr	X_CODES,,xi		. a known command?
00:0055E7 F606AA              +185 	jxge	outrage
00:0055E8 400010              +186 	lr	ZENITH			. message-relative end of operands
00:0055E9 B6A5EA              +187 	j	$+1, x
00:0055EA B606AC              +188 	j	exitu
00:0055EB B60604              +189 	j	fpo_load
00:0055EC B6060C              +190 	j	fpo_load_negative
00:0055ED B60614              +191 	j	fpo_push
00:0055EE B60617              +192 	j	fpo_add
00:0055EF B6061F              +193 	j	fpo_add_negative
00:0055F0 B60627              +194 	j	fpo_multiply
00:0055F1 B6062F              +195 	j	fpo_divide
00:0055F2 B60637              +196 	j	fpo_pop_add
00:0055F3 B6063E              +197 	j	fpo_pop_add_negative
00:0055F4 B60645              +198 	j	fpo_pop_multiply
00:0055F5 B6064C              +199 	j	fpo_pop_divide
00:0055F6 B60653              +200 	j	fpo_square_root
00:0055F7 B6066B              +201 	j	fpo_sine
00:0055F8 B60659              +202 	j	fpo_square
00:0055F9 B6065F              +203 	j	fpo_cube_root
00:0055FA B60665              +204 	j	fpo_cube
00:0055FB B60671              +205 	j	fpo_cosine
00:0055FC B60677              +206 	j	fpo_tangent
00:0055FD B6067D              +207 	j	fpo_cotangent
00:0055FE B60683              +208 	j	fpo_sine96
00:0055FF B60689              +209 	j	fpo_cosine96
00:005600 B6068F              +210 	j	fpo_tangent96
00:005601 B60695              +211 	j	fpo_cotangent96
00:005602 B6069B              +212 	j	fpo_fraction
00:005603 B606A1              +213 	j	fpo_integer
  :                            214 
  :                            215 fpo_load
00:005604 50B001              +216 	lx      1, y				. operand index
00:005605 F606AA              +217 	jxge	outrage				. surely some mistake
00:005606 800013              +218 	ax	MESSAGE				. change offset to address
00:005607 F80002              +219 	c	(fp192_load)	x
00:005608 FCF001              +219 
00:005609 FF0F70              +219 
00:00560A 38000F              +219 
00:00560B B605E2              +220 	j	command
  :                            221 
  :                            222 fpo_load_negative
00:00560C 50B001              +223 	lx	1, y				. operand index
00:00560D F606AA              +224 	jxge	outrage
00:00560E 800013              +225 	ax	MESSAGE				. change offset to address
00:00560F F80002              +226 	c	(fp192_load_negative) x
00:005610 FCF001              +226 
00:005611 FF0F71              +226 
00:005612 38000F              +226 
00:005613 B605E2              +227 	j	command
  :                            228 
  :                            229 fpo_push
00:005614 8F0008              +230 	qpush	8
00:005615 8F0004              +231 	qpush	a
00:005616 B605E2              +232 	j	command
  :                            233 
00:005617 50B001              +234 fpo_add	lx      1, y				. operand index
00:005618 F606AA              +235 	jxge	outrage
00:005619 800013              +236 	ax	MESSAGE				. change offset to address
00:00561A F80002              +237 	c	(fp192_add)   x
00:00561B FCF001              +237 
00:00561C FF0EE7              +237 
00:00561D 38000F              +237 
00:00561E B605E2              +238 	j	command
  :                            239 
  :                            240 fpo_add_negative
00:00561F 50B001              +241 	lx	1, y
00:005620 F606AA              +242 	jxge    outrage
00:005621 800013              +243 	ax	MESSAGE
00:005622 F80002              +244 	c       (fp192_add_negative)   x
00:005623 FCF001              +244 
00:005624 FF0EE8              +244 
00:005625 38000F              +244 
  :                            245 
  :                            246 .	on	fp$r
  :                            247 .	fa	$residue
  :                            248 .	off	fp$r
  :                            249 
00:005626 B605E2              +250 	j	command
  :                            251 
  :                            252 fpo_multiply
00:005627 50B001              +253 	lx	1, y
00:005628 F606AA              +254 	jxge	outrage
00:005629 800013              +255 	ax	MESSAGE
00:00562A F80002              +256 	c	(fp192_multiply)   x
00:00562B FCF001              +256 
00:00562C FF0F72              +256 
00:00562D 38000F              +256 
00:00562E B605E2              +257 	j	command
  :                            258 
  :                            259 fpo_divide
00:00562F 50B001              +260 	lx	1, y
00:005630 F606AA              +261 	jxge	outrage
00:005631 800013              +262 	ax	MESSAGE
00:005632 F80002              +263 	c	(fp192_divide)	x
00:005633 FCF001              +263 
00:005634 FF0EEA              +263 
00:005635 38000F              +263 
00:005636 B605E2              +264 	j	command
  :                            265 
  :                            266 fpo_pop_add
00:005637 FCF000              +267 	c	(fp192_add)	0, sp, i
00:005638 FCF001              +267 
00:005639 FF0EE7              +267 
00:00563A 38000F              +267 
00:00563B 54F008              +268 	lx	8, sp, i
00:00563C 10000F              +269 	sx	sp
00:00563D B605E2              +270 	j	command
  :                            271 
  :                            272 fpo_pop_add_negative
00:00563E FCF000              +273 	c	(fp192_add_negative)	0, sp, i
00:00563F FCF001              +273 
00:005640 FF0EE8              +273 
00:005641 38000F              +273 
00:005642 54F008              +274 	lx	 8, sp, i
00:005643 10000F              +275 	sx	sp
00:005644 B605E2              +276 	j	command
  :                            277 
  :                            278 fpo_pop_multiply
00:005645 FCF000              +279 	c	(fp192_multiply)	0, sp, i
00:005646 FCF001              +279 
00:005647 FF0F72              +279 
00:005648 38000F              +279 
00:005649 54F008              +280 	lx	8, sp, i
00:00564A 10000F              +281 	sx	sp
00:00564B B605E2              +282 	j	command
  :                            283 
  :                            284 fpo_pop_divide
00:00564C FCF000              +285 	c	 (fp192_divide)	0, sp, i
00:00564D FCF001              +285 
00:00564E FF0EEA              +285 
00:00564F 38000F              +285 
00:005650 54F008              +286 	lx	8, sp, i
00:005651 10000F              +287 	sx	sp
00:005652 B605E2              +288 	j	command
  :                            289 
  :                            290 fpo_square_root
00:005653 8F0008              +291 	c	(square_root192)	a,,float192
00:005654 8F0004              +291 
00:005655 FCF008              +291 
00:005656 FF0F73              +291 
00:005657 38000F              +291 
00:005658 B605E2              +292 	j	command
  :                            293 
  :                            294 fpo_square
00:005659 8F0008              +295 	c	(square192)	a,,float192
00:00565A 8F0004              +295 
00:00565B FCF008              +295 
00:00565C FF0F74              +295 
00:00565D 38000F              +295 
00:00565E B605E2              +296 	j	command
  :                            297 
  :                            298 fpo_cube_root
00:00565F 8F0008              +299 	c	(cube_root192)	a,,float192
00:005660 8F0004              +299 
00:005661 FCF008              +299 
00:005662 FF0F75              +299 
00:005663 38000F              +299 
00:005664 B605E2              +300 	j	command
  :                            301 
  :                            302 fpo_cube
00:005665 8F0008              +303 	c	(cube192)	a,,float192
00:005666 8F0004              +303 
00:005667 FCF008              +303 
00:005668 FF0F76              +303 
00:005669 38000F              +303 
00:00566A B605E2              +304 	j	command
  :                            305 
  :                            306 fpo_sine
00:00566B 8F0008              +307 	c	(sine192)	a,,float192
00:00566C 8F0004              +307 
00:00566D FCF008              +307 
00:00566E FF0F77              +307 
00:00566F 38000F              +307 
00:005670 B605E2              +308 	j	command
  :                            309 
  :                            310 fpo_cosine
00:005671 8F0008              +311 	c	(cosine192)	a,,float192
00:005672 8F0004              +311 
00:005673 FCF008              +311 
00:005674 FF0F78              +311 
00:005675 38000F              +311 
00:005676 B605E2              +312 	j	command
  :                            313 
  :                            314 fpo_tangent
00:005677 8F0008              +315 	c	(tangent192)	a,,float192
00:005678 8F0004              +315 
00:005679 FCF008              +315 
00:00567A FF0F79              +315 
00:00567B 38000F              +315 
00:00567C B605E2              +316 	j	command
  :                            317 
  :                            318 fpo_cotangent
00:00567D 8F0008              +319 	c	(cotangent192)	a,,float192
00:00567E 8F0004              +319 
00:00567F FCF008              +319 
00:005680 FF0F7A              +319 
00:005681 38000F              +319 
00:005682 B605E2              +320 	j	command
  :                            321 
  :                            322 fpo_sine96
00:005683 8F0004              +323 	c	(sine96)		a,,float
00:005684 FCF004              +323 
00:005685 FF0F7B              +323 
00:005686 38000F              +323 
00:005687 3E06A7              +324 	lcal	trigx
00:005688 B605E2              +325 	j	command
  :                            326 
  :                            327 fpo_cosine96
00:005689 8F0004              +328 	c	(cosine96)		a,,float
00:00568A FCF004              +328 
00:00568B FF0F7C              +328 
00:00568C 38000F              +328 
00:00568D 3E06A7              +329 	lcal	trigx
00:00568E B605E2              +330 	j	command
  :                            331 
  :                            332 fpo_tangent96
00:00568F 8F0004              +333 	c	(tangent96)	a,,float
00:005690 FCF004              +333 
00:005691 FF0F7D              +333 
00:005692 38000F              +333 
00:005693 3E06A7              +334 	lcal	trigx
00:005694 B605E2              +335 	j	command
  :                            336 
  :                            337 fpo_cotangent96
00:005695 8F0004              +338 	c	(cotangent96)	a,,float
00:005696 FCF004              +338 
00:005697 FF0F7E              +338 
00:005698 38000F              +338 
00:005699 3E06A7              +339 	lcal	trigx
00:00569A B605E2              +340 	j	command
  :                            341 
  :                            342 fpo_fraction
00:00569B 8F0008              +343 	c	(fraction192)	a,,float192
00:00569C 8F0004              +343 
00:00569D FCF008              +343 
00:00569E FF0F7F              +343 
00:00569F 38000F              +343 
00:0056A0 B605E2              +344 	j	command
  :                            345 
  :                            346 fpo_integer
00:0056A1 8F0008              +347 	c	(integer192)	a,,float192
00:0056A2 8F0004              +347 
00:0056A3 FCF008              +347 
00:0056A4 FF0F80              +347 
00:0056A5 38000F              +347 
00:0056A6 B605E2              +348 	j	command
  :                            349 
  :                            350 trigx
  :                            351 	$if	1
[+0015]10
00:0056A7 FD0000              +352 	push	floating_edit,,xi
  :                            353 	$else
  :                            354 	push	floating_edit9p,,xi
  :                            355 	$endif
  :                            356 
(+03)0f
00:0056A8 3800DA              +357 	pop	editp
00:0056A9 350000              +358 	lret	0
  :                            359 
00:0056AA 4F0EDC              +360 outrage	ql	(-0.0)			. indicate the command list didn't make sense
00:0056AB 470008              +361 	qs	8
  :                            362 
00:0056AC 500012              +363 exitu	lx	STACK_GUARD
00:0056AD 10000F              +364 	sx	sp
  :                            365 
00:0056AE 050008              +366 	on	fp$r
00:0056AF 670008              +367 	fa	8
00:0056B0 0D0008              +368 	off	fp$r
00:0056B1 350000              +369 	lret	0
  :                            370 
  :                            371 	$root
  :                            154 	$path	../apps.lib
  :                            155: 	$include aplib192
  :                            1 ap_lib192	$tree
  :                            2 
  :                            3 .	arguments in internal stack
  :                            4 .	as for programming languages
  :                            5 .	read-only arguments may be by pointer
  :                            6 .	return is in registers a:b:mantissa2:mantissa3:8:9:10:11
  :                            7 
  :                            8 square_root
                                	$head_far	 params(magnitude2,	float192)		;
                                			scalars(trial2,		float192, magnitude2	;
                                				diminuition2,	float192, (0.5o)	;
00:0056B2 8FF007              +12 				signs2,		int, magnitude2		)
00:0056B3 8FF007              +12 
00:0056B4 8F0F85              +12 
00:0056B5 8F0F81              +12 
00:0056B6 F8F013              +12 
  :                            13 
  :                            14 .	vector name is square_root
  :                            15 
00:0056B7 60F000              +16 	la	signs2
00:0056B8 A606BD              +17 	jpa	square_away
00:0056B9 54F014              +18 	lx	magnitude2,,i
00:0056BA 3E0765              +19 	lcal	flip8
00:0056BB 54F009              +20 	lx	trial2,,i
00:0056BC 3E0765              +21 	lcal	flip8	
  :                            22 
  :                            23 square_away
  :                            24 
00:0056BD 600F89              +25 	la	(0400000)
00:0056BE D0F009              +26 	ana	trial2
00:0056BF 7E06C6              +27 	jc	uprate			. exponent: 0400000- 
  :                            28 					.        a: 0400000-exponent
  :                            29 
  :                            30 .	some smallest numbers need kinder rounding
  :                            31 .	but leave that to the caller
  :                            32 
00:0056C0 60F009              +33 	la	trial2
00:0056C1 A00F8A              +34 	and	(03FFFFF)
00:0056C2 C50001              +35 	aa	1,,xi			. halve scale above midpoint
00:0056C3 060001              +36 	sar	1			. 0400001 changes to 0400001
00:0056C4 900F89              +37 	or	(0400000)
  :                            38 
00:0056C5 B606C9              +39 	j	start_variation
  :                            40 
00:0056C6 C50001              +41 uprate	aa	1,,xi			. add half the undershot to midpoint
00:0056C7 060001              +42 	sar	1			. 0400000 changes to 0400000
00:0056C8 C0F009              +43 	aa	trial2
  :                            44 
  :                            45 start_variation
  :                            46 
00:0056C9 20F001              +47 	sa	diminuition2		. set initial exponent of +- variable
00:0056CA 20F009              +48 	sa	trial2
00:0056CB C5FFB8              +49 	aa	-72,,xi
00:0056CC 20F00D              +50 	sa	trial2+4
00:0056CD 450090              +51 	lr	144,,xi			. start the fateful count
  :                            52 					. don't worry, you may escape before the count is out
  :                            53 downrate
00:0056CE 4FF00D              +54 	ql	trial2+4
00:0056CF 470008              +55 	qs	8
  :                            56 
  :                            57 downrate_again!
00:0056D0 4FF009              +58 	ql	trial2
  :                            59 
00:0056D1 FCF009              +60 	c	(fp192_multiply)	trial2,,i
00:0056D2 FCF001              +60 
00:0056D3 FF0F72              +60 
00:0056D4 38000F              +60 
00:0056D5 FCF014              +61 	c	(fp192_add_negative)	magnitude2,,i
00:0056D6 FCF001              +61 
00:0056D7 FF0EE8              +61 
00:0056D8 38000F              +61 
  :                            62 
00:0056D9 7C06EF              +63 	jdz	arrive
00:0056DA A606E3              +64 	jpa	downrate_down
  :                            65 
00:0056DB 4FF00D              +66 	ql	trial2+4
00:0056DC 470008              +67 	qs	8
00:0056DD 4FF009              +68 	ql	trial2
  :                            69 
00:0056DE FCF001              +70 	c	(fp192_add)		diminuition2,,i
00:0056DF FCF001              +70 
00:0056E0 FF0EE7              +70 
00:0056E1 38000F              +70 
00:0056E2 B606EA              +71 	j	downrate_again?
  :                            72 
  :                            73 downrate_down
  :                            74 
00:0056E3 4FF00D              +75 	ql	trial2+4
00:0056E4 470008              +76 	qs	8
00:0056E5 4FF009              +77 	ql	trial2
  :                            78 
00:0056E6 FCF001              +79 	c	(fp192_add_negative)	diminuition2,,i
00:0056E7 FCF001              +79 
00:0056E8 FF0EE8              +79 
00:0056E9 38000F              +79 
  :                            80 
  :                            81 downrate_again?
00:0056EA 47F009              +82 	qs	trial2			. store the candidate value
00:0056EB 4F0008              +83 	ql	8
00:0056EC 47F00D              +84 	qs	trial2+4
  :                            85 
00:0056ED 1FF001              +86 	dec	diminuition2		. scale of variation
00:0056EE 1E06D0              +87 	jdr	downrate_again!
  :                            88 
00:0056EF 54F009              +89 arrive	lx	trial2,,i
00:0056F0 78F000              +90 	tp	signs2
00:0056F1 3E0765              +91 	lcal	flip8
00:0056F2 FCF009              +92 	push	8+1, sp, i
00:0056F3 38000F              +93 	pop	sp
  :                            94 
00:0056F4 870004              +95 	qpop	a
00:0056F5 870008              +96 	qpop	8
00:0056F6 3D0000              +97 	fret	0
  :                            98 
  :                            99 .	vector name square
  :                            100 
                                square	$head_far	 params(root, 		float192)	;
                                			scalars(polar,		int, root	;
00:0056F7 F8F003              +103 				caller_x,	int, x)
00:0056F8 F80002              +103 
  :                            104 
00:0056F9 FCF005              +105 	c	(fp192_mfa)	root,,i	root,,i
00:0056FA FCF006              +105 
00:0056FB FCF002              +105 
00:0056FC FF0EE9              +105 
00:0056FD 38000F              +105 
  :                            106 
00:0056FE 4FF005              +107 	ql	root		. load and supernormalise
00:0056FF 050008              +108 	on	fp$r
00:005700 67F009              +109 	fa	root+4
00:005701 0D0008              +110 	off	fp$r
  :                            111 
00:005702 550004              +112 	lx	a,,xi		. retrieve input sign
00:005703 78F001              +113 	tp	polar
00:005704 3E0765              +114 	lcal	flip8
  :                            115 
00:005705 380002              +116 	pop	x		. restore caller x
00:005706 17000F              +117 	inc	sp		. clear stack
00:005707 3D0000              +118 	fret	0
  :                            119 
  :                            120 
  :                            121 cube_root
                                	$head_far	 params(magnitude3,	float192)		;
                                			scalars(trial3,		float192, magnitude3	;
                                				diminuition3,	float192, (0.5o)	;
00:005708 8FF007              +125 				signs3,		int,	  magnitude3	)
00:005709 8FF007              +125 
00:00570A 8F0F85              +125 
00:00570B 8F0F81              +125 
00:00570C F8F013              +125 
  :                            126 
  :                            127 .	vector name cube_root
  :                            128 
00:00570D 60F014              +129 	la	magnitude3
00:00570E A60713              +130 	jpa	root3_start
  :                            131 
00:00570F 54F014              +132 	lx	magnitude3,,i		. must work in positive magnitude
00:005710 3E0765              +133 	lcal	flip8			. because of subtraction
00:005711 54F009              +134 	lx	trial3,,i		. which compares the filtered trial root
00:005712 3E0765              +135 	lcal	flip8
  :                            136 
  :                            137 root3_start
00:005713 680F89              +138 	lb	(0400000)
00:005714 D8F009              +139 	anb	trial3
00:005715 7E071C              +140 	jc	up3wards		. scale is midpoint/less
  :                            141 
00:005716 68F009              +142 	lb	trial3
00:005717 A80F8A              +143 	andB	(03FFFFF)		. isolate the net positive scale
  :                            144 
00:005718 CD0002              +145 	ab	2,,xi			. 0400001..2 -> 0400001
00:005719 E80F8B              +146 	mf	(0555556)		. thirdify the net positive scale
  :                            147 
00:00571A 900F89              +148 	or	(0400000)		. new exponent in a
00:00571B B6071E              +149 	j	scale_away3
  :                            150 
  :                            151 up3wards	. distance up to midpoint is positive in b
  :                            152 
00:00571C E80F8B              +153 	mf	(0555556)		. thirdify he and round he down
00:00571D C0F009              +154 	aa	trial3			. quotient is in a
  :                            155 
  :                            156 scale_away3
  :                            157 
00:00571E 20F001              +158 	sa	diminuition3		. set initial exponent of +- variable
00:00571F 20F009              +159 	sa	trial3
00:005720 C5FFB8              +160 	aa	-72,,xi			. minor part is already normalised
00:005721 20F00D              +161 	sa	trial3+4
00:005722 450090              +162 	lr	144,,xi			. start the fateful count
  :                            163 					. don't worry, you may escape before the count is out
  :                            164 downrate3
00:005723 4FF00D              +165 	ql	trial3+4
00:005724 470008              +166 	qs	8
  :                            167 downrate3_again!
00:005725 4FF009              +168 	ql	trial3
  :                            169 
00:005726 FCF009              +170 	c	(fp192_multiply)	trial3,,i
00:005727 FCF001              +170 
00:005728 FF0F72              +170 
00:005729 38000F              +170 
00:00572A FCF009              +171 	c	(fp192_multiply)	trial3,,i
00:00572B FCF001              +171 
00:00572C FF0F72              +171 
00:00572D 38000F              +171 
00:00572E FCF014              +172 	c	(fp192_add_negative)	magnitude3,,i
00:00572F FCF001              +172 
00:005730 FF0EE8              +172 
00:005731 38000F              +172 
  :                            173 
00:005732 7C074D              +174 	jdz	arrive3
00:005733 A60740              +175 	jpa	downrate3_down
  :                            176 
00:005734 4FF009              +177 	ql	trial3
00:005735 050008              +178 	on	fp$r
00:005736 67F00D              +179 	fa	trial3+4
00:005737 0D0008              +180 	off	fp$r
  :                            181 
  :                            182 			. for the benefit of fractions
  :                            183 			. if under, don't diminish the diminuend
  :                            184 			. and don't decrement the count in r
  :                            185 			. just add to the candidate root and loop back
  :                            186 
00:005738 FCF001              +187 	c	(fp192_add)		diminuition3,,i
00:005739 FCF001              +187 
00:00573A FF0EE7              +187 
00:00573B 38000F              +187 
00:00573C 47F009              +188 	qs	trial3
00:00573D 4F0008              +189 	ql	8
00:00573E 47F00D              +190 	qs	trial3+4
00:00573F B60725              +191 	j	downrate3_again!	. _again?
  :                            192 
  :                            193 downrate3_down
  :                            194 
00:005740 4FF009              +195 	ql	trial3
00:005741 050008              +196 	on	fp$r
00:005742 67F00D              +197 	fa	trial3+4
00:005743 0D0008              +198 	off	fp$r
  :                            199 
00:005744 FCF001              +200 	c	(fp192_add_negative)	diminuition3,,i
00:005745 FCF001              +200 
00:005746 FF0EE8              +200 
00:005747 38000F              +200 
  :                            201 
00:005748 1FF001              +202 	dec	diminuition3		. scale of variation
  :                            203 
  :                            204 downrate3_again?
  :                            205 
00:005749 47F009              +206 	qs	trial3			. store the candidate value
00:00574A 4F0008              +207 	ql	8
00:00574B 47F00D              +208 	qs	trial3+4
  :                            209 
  :                            210 .	dec	diminuition3		. scale of variation
00:00574C 1E0725              +211 	jdr	downrate3_again!
  :                            212 
00:00574D 54F009              +213 arrive3	lx	trial3,,i
00:00574E 78F000              +214 	tp	signs3
00:00574F 3E0765              +215 	lcal	flip8
  :                            216 
00:005750 FCF009              +217 	push	8+1, sp, i
00:005751 38000F              +218 	pop	sp
  :                            219 
00:005752 870004              +220 	qpop	a
00:005753 870008              +221 	qpop	8
00:005754 050008              +222 	on	fp$r
00:005755 670008              +223 	fa	$residue
00:005756 0D0008              +224 	off	fp$r
00:005757 3D0000              +225 	fret	0
  :                            226 
  :                            227 .	vector name cube
  :                            228 
  :                            229 cube	$head_far	 params(cubase,	float192)
00:005758 4FF003              +230 	ql	cubase
00:005759 050008              +231 	on	fp$r
00:00575A 67F007              +232 	fa	cubase+4
00:00575B 0D0008              +233 	off	fp$r
  :                            234 
00:00575C FCF003              +235 	c	(fp192_multiply)	cubase,,i
00:00575D FCF001              +235 
00:00575E FF0F72              +235 
00:00575F 38000F              +235 
00:005760 FCF003              +236 	c	(fp192_multiply)	cubase,,i
00:005761 FCF001              +236 
00:005762 FF0F72              +236 
00:005763 38000F              +236 
00:005764 3D0000              +237 	fret	0
  :                            238 
00:005765 0FA000              +239 flip8	n	0, x
00:005766 0FA001              +240 	n	1, x
00:005767 0FA002              +241 	n	2, x
00:005768 0FA003              +242 	n	3, x
00:005769 0FA004              +243 	n	4, x
00:00576A 0FA005              +244 	n	5, x
00:00576B 0FA006              +245 	n	6, x
00:00576C 0FA007              +246 	n	7, x
00:00576D 350000              +247 	lret	0
  :                            248 
  :                            249 .	vector name fraction
  :                            250 
  :                            251 fraction $tree
                                	$head_far	 params(input,	float192)	;
00:00576E 8F0000              +253 			scalars(i_rkxy,	float,	r	)
  :                            254 
00:00576F 4FF007              +255 	ql	input		. read and supernormalise
00:005770 050008              +256 	on 	fp$r
00:005771 67F00B              +257 	fa	input+4
00:005772 0D0008              +258 	off	fp$r
  :                            259 
00:005773 500004              +260 	lx	a		. obtain exponent magnitude
00:005774 780002              +261 	tp	x
00:005775 0F0002              +262 	n	x
  :                            263 
00:005776 800F8C              +264 	ax	(-0400000)	. obtain relation to midpoint
00:005777 700002              +265 	tz	x
00:005778 780002              +266 	tp	x
00:005779 B6078B              +267 	j	all_fraction	. there is no integer part: return all of it
00:00577A 450090              +268 	lr	144,,xi
00:00577B F60788              +269 	jxge	all_integer	. there is no fraction part: return zero
  :                            270 
00:00577C 8F0008              +271 	c	(integer192)	a,,float192
00:00577D 8F0004              +271 
00:00577E FCF008              +271 
00:00577F FF0F80              +271 
00:005780 38000F              +271 
  :                            272 
00:005781 550004              +273 	lx	a,,xi
00:005782 3E0765              +274 	lcal	ap_lib192:flip8	. reverse polarity to effect subtract from addend
  :                            275 
00:005783 FCF007              +276 	c	(fp192_add)	input,,i
00:005784 FCF001              +276 
00:005785 FF0EE7              +276 
00:005786 38000F              +276 
00:005787 B6078B              +277 	j	complete
  :                            278 	
  :                            279 all_integer
00:005788 960030              +280 	dsa	48
00:005789 C70006              +281 	ds	6
00:00578A 470008              +282 	qs	8
  :                            283 all_fraction
  :                            284 complete
00:00578B 870000              +285 	qpop	r
00:00578C 3D0000              +286 	fret	0
  :                            287 
  :                            288 	$root
  :                            289 
  :                            290 .	vector name integer
  :                            291 
  :                            292 integer	$tree
                                	$head_far	 params(input,	float192)	;
00:00578D 8F0000              +294 			scalars(i_rkxy,	float,	r	)
  :                            295 
00:00578E 4FF007              +296 	ql	input		. read and supernormalise
00:00578F 050008              +297 	on	fp$r
00:005790 67F00B              +298 	fa	input+4
00:005791 0D0008              +299 	off	fp$r
  :                            300 
00:005792 500004              +301 	lx	a		. obtain exponent magnitude
00:005793 780002              +302 	tp	x
00:005794 0F0002              +303 	n	x
  :                            304 
00:005795 800F8C              +305 	ax	(-0400000)	. obtain relation to midpoint
00:005796 700002              +306 	tz	x
00:005797 780002              +307 	tp	x
00:005798 B607B1              +308 	j	all_fraction	. there is no integer part: return 0
00:005799 450090              +309 	lr	144,,xi
00:00579A F607B4              +310 	jxge	all_integer	. there is no fraction part: return all of it
  :                            311 
00:00579B 450048              +312 	lr	72,,xi
00:00579C F607A4              +313 	jxge	major_part_plus	. the result includes the major part
  :                            314 				. and possibly some of the minor part
  :                            315 major_part_only
00:00579D C7F007              +316 	ds	input
00:00579E 960030              +317 	dsa	48		. some signs for the minor part
00:00579F C70008              +318 	ds	8		. the result is some of the major part
00:0057A0 C7000A              +319 	ds	10
00:0057A1 CFF007              +320 	dl	input		.
  :                            321 
00:0057A2 3E07E0              +322 	lcal	ap_lib96:sign_around
00:0057A3 B607B4              +323 	j	complete
  :                            324 
  :                            325 major_part_plus
  :                            326 
00:0057A4 500008              +327 	lx	8		. obtain magnitude minor exponent
00:0057A5 780002              +328 	tp	x
00:0057A6 0F0002              +329 	n	x
  :                            330 
00:0057A7 800F8C              +331 	ax	(-0400000)	. obtain relation to midpoint
00:0057A8 700002              +332 	tz	x
00:0057A9 780002              +333 	tp	x
00:0057AA B6079D              +334 	j	major_part_only	. all expected bits were signs
  :                            335 				. and normalised out
  :                            336 
00:0057AB 47F007              +337 	qs	input
00:0057AC 4F0008              +338 	ql	8
00:0057AD 3E07E0              +339 	lcal	ap_lib96:sign_around
00:0057AE 470008              +340 	qs	8
00:0057AF 4FF007              +341 	ql	input
00:0057B0 B607B4              +342 	j	complete
  :                            343 	
  :                            344 all_fraction
00:0057B1 960030              +345 	dsa	48
00:0057B2 C70006              +346 	ds	6
00:0057B3 470008              +347 	qs	8
  :                            348 all_integer
  :                            349 complete
00:0057B4 870000              +350 	qpop	r
00:0057B5 3D0000              +351 	fret	0
  :                            352 
  :                            353 	$root		. of routine ap_lib192:integer
  :                            354 
  :                            355 	$root		. of block ap_lib:192
  :                            156: 	$include aplib96
  :                            1 
  :                            2 ap_lib96 $tree
  :                            3 
  :                            4 .	vector name fraction96
  :                            5 
  :                            6 fraction $tree
                                	$head_far	 params(input,	float	)	;
00:0057B6 8F0000              +8 			scalars(i_rkxy,	float,	r	)
  :                            9 
00:0057B7 4FF007              +10 	ql	input
00:0057B8 500004              +11 	lx	a
00:0057B9 780002              +12 	tp	x		. obtain magnitude exponent
00:0057BA 0F0002              +13 	n	x
00:0057BB 800F8C              +14 	ax	(-0400000)	. obtain relation to midpoint
00:0057BC 700002              +15 	tz	x
00:0057BD 780002              +16 	tp	x
00:0057BE B607CD              +17 	j	all_fraction	. no integer part, don't tamper
00:0057BF 450048              +18 	lr	72,,xi
00:0057C0 F607CB              +19 	jxge	all_integer	. no fraction part, zero the fraction
  :                            20 
00:0057C1 8FF007              +21 	c	(integer96)	input,,float
00:0057C2 FCF004              +21 
00:0057C3 FF0F8D              +21 
00:0057C4 38000F              +21 
00:0057C5 0F0004              +22 	n	a
00:0057C6 0F0005              +23 	n	b
00:0057C7 0F0006              +24 	n	6
00:0057C8 0F0007              +25 	n	7		. subtract the integer part
00:0057C9 67F007              +26 	fa	input		. fromm the fraction
00:0057CA B607CD              +27 	j	complete
  :                            28 
  :                            29 all_integer
00:0057CB 960030              +30 	dsa	48
00:0057CC C70006              +31 	ds	6
  :                            32 
  :                            33 all_fraction
  :                            34 complete
00:0057CD 870000              +35 	qpop	r
00:0057CE 3D0000              +36 	fret	0
  :                            37 
  :                            38 	$root
  :                            39 
  :                            40 
  :                            41 .	vector name integer96
  :                            42 
  :                            43 integer	$tree
                                	$head_far	 params(input,	float	)	;	. pointer rto float
00:0057CF 8F0000              +45 			scalars(i_rkxy,	float,	r	)
  :                            46 
00:0057D0 4FF007              +47 	ql	input
00:0057D1 500004              +48 	lx	a
00:0057D2 780002              +49 	tp	x		. obtain magnitude exponent
00:0057D3 0F0002              +50 	n	x
00:0057D4 800F8C              +51 	ax	(-0400000)	. obtain relation to midpoint
00:0057D5 700002              +52 	tz	x
00:0057D6 780002              +53 	tp	x
00:0057D7 B607DC              +54 	j	all_fraction	. no integer part, zero the integer
00:0057D8 450048              +55 	lr	72,,xi
00:0057D9 F607DE              +56 	jxge	all_integer	. no fraction part, don't tamper
  :                            57 
00:0057DA 3E07E0              +58 	lcal	ap_lib96:sign_around
  :                            59 
00:0057DB B607DE              +60 	j	complete
  :                            61 
  :                            62 all_fraction
00:0057DC 960030              +63 	dsa	48
00:0057DD C70006              +64 	ds	6
  :                            65 
  :                            66 all_integer
  :                            67 complete
00:0057DE 870000              +68 	qpop	r
00:0057DF 3D0000              +69 	fret	0
  :                            70 	$root
  :                            71 
  :                            72 sign_around					. write signs to mantissa bits [x]+
00:0057E0 8F0004              +73 	$head_near	scalars(output,	float,	a)
  :                            74 
00:0057E1 860018              +75 	saa	24
  :                            76 
00:0057E2 450030              +77 	lr	48,,xi
00:0057E3 F607F4              +78 	jxge	insert7
00:0057E4 450018              +79 	lr	24,,xi
00:0057E5 F607ED              +80 	jxge	insert6
  :                            81 
00:0057E6 20F003              +82 	sa	output+3
00:0057E7 20F002              +83 	sa	output+2
00:0057E8 68F001              +84 	lb	output+1
00:0057E9 76A000              +85 	drl	0, x
00:0057EA 46A000              +86 	rar	0, x
00:0057EB 20F001              +87 	sa	output+1
00:0057EC B607F9              +88 	j	reload
  :                            89 
00:0057ED 20F003              +90 insert6	sa	output+3
00:0057EE 68F002              +91 	lb	output+2
00:0057EF 85FFE8              +92 	ax	-24,,xi
00:0057F0 76A000              +93 	drl	0, x
00:0057F1 46A000              +94 	rar	0, x
00:0057F2 20F002              +95 	sa	output+2
00:0057F3 B607F9              +96 	j	reload
  :                            97 
00:0057F4 68F003              +98 insert7	lb	output+3
00:0057F5 85FFD0              +99 	ax	-48,,xi
00:0057F6 76A000              +100 	drl	0, x
00:0057F7 46A000              +101 	rar	0, x
00:0057F8 20F003              +102 	sa	output+3
  :                            103 	
00:0057F9 870004              +104 reload	qpop	a
00:0057FA 350000              +105 	lret	0
  :                            106 
  :                            107 	$root
  :                            157 
  :                            158: 	$include trig192
  :                            1 trig192	$tree
  :                            2 
  :                            3 RECIPROCAL_READY $equ	1
  :                            4 
  :                            5 	$if	1
  :                            6 _RADIAN_FACTOR $equ	1.7453292519943295769236907684886127134428719z*-2
  :                            7 	$else
  :                            8 _RADIAN_FACTOR $equ 0.01745329252z	. 168-bit expression expression + 24 extra signs
  :                            9 	$endif
  :                            10 
  :                            11 _PASSES	$equ	18
  :                            12 
  :                            13 .	vector name sine
  :                            14 
  :                            15 sine	$tree									. quadrant looks after itself
                                	$head_far	 params(angle,	float192)			;	. trim to % 360 degrees here
00:0057FB 8F0000              +17 			scalars(u_rkxy,	float,		r		)
  :                            18 
00:0057FC FCF007              +19 	lc	trig192:_sine	angle,,i
00:0057FD FCF001              +19 
00:0057FE 3E0841              +19 
00:0057FF 38000F              +19 
00:005800 870000              +20 	qpop	r
00:005801 3D0000              +21 	fret	0
  :                            22 	$root
  :                            23 
  :                            24 
  :                            25 .	vector name cosine
  :                            26 
  :                            27 cosine	$tree
                                	$head_far	 params(angle,	float192)			;
00:005802 8F0000              +29 			scalars(u_rkxy,	float,		r		)
  :                            30 
  :                            31 							. trim to % 360 degrees before the next step
  :                            32 							. or values > 180 are negative to infinity
  :                            33 							. instead of retraversing + and - quadrants
  :                            34 
00:005803 4F0ECD              +35 	ql	(0.0)				. 	constant 90.0 is loaded up
00:005804 470008              +36 	qs	8					. because it can't be pointed in reference
00:005805 4F0F8E              +37 	ql	(90.0)					. to a different B0 section, fp192lib
00:005806 FCF007              +38 	c	(fp192_add_negative)	angle,,i
00:005807 FCF001              +38 
00:005808 FF0EE8              +38 
00:005809 38000F              +38 
00:00580A 47F007              +39 	qs	angle
00:00580B 4F0008              +40 	ql	8
00:00580C 47F00B              +41 	qs	angle+4
  :                            42 
00:00580D FCF007              +43 	lc	trig192:_sine	angle,,i
00:00580E FCF001              +43 
00:00580F 3E0841              +43 
00:005810 38000F              +43 
00:005811 870000              +44 	qpop	r
00:005812 3D0000              +45 	fret	0
  :                            46 	$root
  :                            47 
  :                            48 
  :                            49 .	vector name tangent
  :                            50 
  :                            51 tangent	$tree
                                	$head_far	 params(angle,	float192)		;
                                								;
                                			scalars(cosine,	float192		;
00:005813 8F0ECD              +55 				u_rkxy,	float,	r		)
00:005814 8FF000              +55 
00:005815 8F0000              +55 
  :                            56 
00:005816 8FF013              +57 	c	(cosine192)		angle,,float192		. this is a copy on the internal stack
00:005817 8FF013              +57 
00:005818 FCF008              +57 
00:005819 FF0F78              +57 
00:00581A 38000F              +57 
00:00581B 47F004              +58 	qs	cosine						. angle gets changed to radian
00:00581C 4F0008              +59 	ql	8
00:00581D 47F008              +60 	qs	cosine+4
  :                            61 
00:00581E FCF00F              +62 	lc	trig192:_sine		angle,,i		. this is not copied. _sine updates it
00:00581F FCF001              +62 
00:005820 3E0841              +62 
00:005821 38000F              +62 
00:005822 FCF004              +63 	c	(fp192_divide)	cosine,,i
00:005823 FCF001              +63 
00:005824 FF0EEA              +63 
00:005825 38000F              +63 
  :                            64 
00:005826 870000              +65 	qpop	r
00:005827 FCF008              +66 	push	8,sp,i
00:005828 38000F              +67 	pop	sp
00:005829 3D0000              +68 	fret	0
  :                            69 
  :                            70 	$root
  :                            71 
  :                            72 cotangent $tree
                                	$head_far	 params(angle,	float192)		;
                                								;
                                			scalars(sine,	float192, angle		;
00:00582A 8FF007              +76 				u_rkxy,	float,	r		)
00:00582B 8FF007              +76 
00:00582C 8F0000              +76 
  :                            77 
00:00582D FCF004              +78 	lc	trig192:_sine		sine,,i			. second copy of angle, updated
00:00582E FCF001              +78 
00:00582F 3E0841              +78 
00:005830 38000F              +78 
00:005831 47F004              +79 	qs	sine
00:005832 4F0008              +80 	ql	8
00:005833 47F008              +81 	qs	sine+4
  :                            82 
00:005834 8FF013              +83 	c	(cosine192)		angle,,float192		. this is copied and not an address
00:005835 8FF013              +83 
00:005836 FCF008              +83 
00:005837 FF0F78              +83 
00:005838 38000F              +83 
00:005839 FCF004              +84 	c	(fp192_divide)	sine,,i
00:00583A FCF001              +84 
00:00583B FF0EEA              +84 
00:00583C 38000F              +84 
  :                            85 
00:00583D 870000              +86 	qpop	r
00:00583E FCF008              +87 	push	8, sp, i
00:00583F 38000F              +88 	pop	sp
00:005840 3D0000              +89 	fret	0
  :                            90 	$root
  :                            91 
  :                            92 _sine
  :                            93 	$if	RECIPROCAL_READY
  :                            94 
                                	$head_near	 params(anglep, int)			;
                                								;
                                			scalars(power,	float192		;
00:005841 8F0ECD              +98 				square,	float192		)
00:005842 8FF000              +98 
00:005843 8F0ECD              +98 
00:005844 8FF000              +98 
  :                            99 
00:005845 5D08E7              +100 	ly	reciprocal_factorials,,xi
  :                            101 
  :                            102 	$else
  :                            103 
                                	$head_near	 params(anglep, int)					;
                                										;
                                			 scalars(power,	float192				;
                                				square,	float192				;
                                				factorial, float192 		;
  :                            109 				factor,	float192		)
  :                            110 
  :                            111 	ql	(6.0)
  :                            112 	qs	factorial
  :                            113 	ql	(3.0)
  :                            114 	qs	factor
  :                            115 	ql	(0.0)
  :                            116 	qs	factorial+4
  :                            117 	qs	factor+4
  :                            118 
  :                            119 	$endif
  :                            120 
00:005846 F8F012              +121 	lc	encircle	anglep			. 360 remainder
00:005847 FCF001              +121 
00:005848 3E08C6              +121 
00:005849 38000F              +121 
  :                            122 
00:00584A 50F012              +123 	lx	anglep
00:00584B 4F08A2              +124 	ql	_radian_factor+4			. _RADIAN_FACTOR constant is loaded up
00:00584C 470008              +125 	qs	8					. because it can't be pointed in reference
00:00584D 4F089E              +126 	ql	_radian_factor				. to a different B0 section, fp192lib
  :                            127 
00:00584E F80002              +128 	c	(fp192_multiply)	x
00:00584F FCF001              +128 
00:005850 FF0F72              +128 
00:005851 38000F              +128 
  :                            129 
00:005852 47A000              +130 	qs	0, x
00:005853 4F0008              +131 	ql	8
00:005854 47A004              +132 	qs	4, x
00:005855 4FA000              +133 	ql	0, x
  :                            134 
00:005856 F80002              +135 	c	(fp192_multiply) x			. square the angle in radians
00:005857 FCF001              +135 
00:005858 FF0F72              +135 
00:005859 38000F              +135 
00:00585A 47F000              +136 	qs	square					. square is the power multiplier
00:00585B 4F0008              +137 	ql	8
00:00585C 47F004              +138 	qs	square+4
00:00585D 4FF000              +139 	ql	square
  :                            140 
00:00585E F80002              +141 	c	(fp192_multiply) x			. and cube is the initial power
00:00585F FCF001              +141 
00:005860 FF0F72              +141 
00:005861 38000F              +141 
  :                            142 
00:005862 47F008              +143 	qs	power
00:005863 4F0008              +144 	ql	8
00:005864 47F00C              +145 	qs	power+4					. initially power is cube
00:005865 4FF008              +146 	ql	power
  :                            147 
00:005866 450012              +148 	lr	_PASSES,,xi
00:005867 B60885              +149 	j	_nomial					. start on the minus kick
  :                            150 
  :                            151 _NEXT_FACTORIAL* $proc
  :                            152 	$if	RECIPROCAL_READY
  :                            153 	ay	8,,xi
  :                            154 	$else
  :                            155 	ql	factor
  :                            156 	fa	(1.0)
  :                            157 	qs	factor
  :                            158 	c	(fp192_mfa)	factorial,,i	factor,,i
  :                            159 	ql	factor
  :                            160 	fa	(1.0)
  :                            161 	qs	factor
  :                            162 	c	(fp192_mfa)	factorial,,i	factor,,i
  :                            163 	$endif
  :                            164 	$end
  :                            165 
  :                            166 _NEXT_POWER* $proc
  :                            167 	c	(fp192_mfa)	power,,i	square,,i
  :                            168 	$end
  :                            169 
00:005868 47A000              +170 _poly	qs	0, x					. the plus kick
00:005869 4F0008              +171 	ql	8
00:00586A 47A004              +172 	qs	4, x
00:00586B 8D0008              +173 	_NEXT_FACTORIAL
00:00586C FCF000              +174 	_NEXT_POWER
00:00586D FCF009              +174 
00:00586E FCF002              +174 
00:00586F FF0EE9              +174 
00:005870 38000F              +174 
  :                            175 
  :                            176 	$if	RECIPROCAL_READY
00:005871 4FB000              +177 	ql	0, y
00:005872 050008              +178 	on	fp$r
00:005873 67B004              +179 	fa	4, y
  :                            180 	$else
  :                            181 	c	(reciprocal192)	factorial,,float192
  :                            182 	$endif
00:005874 FCF008              +183 	c	(fp192_multiply)	power,,i	. 
00:005875 FCF001              +183 
00:005876 FF0F72              +183 
00:005877 38000F              +183 
  :                            184 .	c	(fp192_divide) factorial,,i		. divide power(angle) by factorial
00:005878 F80002              +185 	c	(fp192_add) x			. add quotient to running total
00:005879 FCF001              +185 
00:00587A FF0EE7              +185 
00:00587B 38000F              +185 
00:00587C 47A000              +186 	qs	0, x
00:00587D 4F0008              +187 	ql	8
00:00587E 47A004              +188 	qs	4, x
00:00587F 8D0008              +189 	_NEXT_FACTORIAL
00:005880 FCF000              +190 	_NEXT_POWER
00:005881 FCF009              +190 
00:005882 FCF002              +190 
00:005883 FF0EE9              +190 
00:005884 38000F              +190 
  :                            191 _nomial
  :                            192 	$if	RECIPROCAL_READY
00:005885 4FB000              +193 	ql	0, y
00:005886 050008              +194 	on	fp$r
00:005887 67B004              +195 	fa	4, y
  :                            196 	$else
  :                            197 	c	(reciprocal192)	factorial,,float192
  :                            198 	$endif
00:005888 FCF008              +199 	c	(fp192_multiply)	power,,i
00:005889 FCF001              +199 
00:00588A FF0F72              +199 
00:00588B 38000F              +199 
  :                            200 .	c	(fp192_divide) factorial,,i		. divide power(angle) by factorial
00:00588C 0F0004              +201 	n	a
00:00588D 0F0005              +202 	n	b
00:00588E 0F0006              +203 	n	6
00:00588F 0F0007              +204 	n	7
00:005890 0F0008              +205 	n	8
00:005891 0F0009              +206 	n	9
00:005892 0F000A              +207 	n	10
00:005893 0F000B              +208 	n	11
00:005894 F80002              +209 	c	(fp192_add)	x			. subtract quotient from runnning total
00:005895 FCF001              +209 
00:005896 FF0EE7              +209 
00:005897 38000F              +209 
00:005898 1E0868              +210 	jdr	_poly
  :                            211 
00:005899 3E08B6              +212 	lcal	eliminate_microdust
00:00589A 3E08A6              +213 	lcal	trim
  :                            214 
00:00589B FCF010              +215 	$ret
00:00589C 38000F              +215 
00:00589D 350000              +215 
  :                            216 
00:00589E 3FFFFB8EFA351294E9C8AE0E
                              +217 _radian_factor	major_minor	_RADIAN_FACTOR
00:0058A2 3FFFB3C5F66E9485C4D900B8
                              +217 
  :                            218 
  :                            219 	$if	1
00:0058A6 F80004              +220 trim	push	a		. if 96 mantissa bits are nonsign change it all to nonsign
00:0058A7 860018              +221 	saa	24		. it's likely to round up after that
00:0058A8 4DFFFF              +222 	lk	-1,,xi		. mask = all 24 bits
00:0058A9 B5FFFF              +223 	xor	-1,,xi		. test = value = not signs
00:0058AA AF0005              +224 	mta	b
00:0058AB B608B4              +225 	j	trimmed
00:0058AC AF0006              +226 	mta	6
00:0058AD B608B4              +227 	j	trimmed
00:0058AE AF0007              +228 	mta	7
00:0058AF B608B4              +229 	j	trimmed
00:0058B0 AF0009              +230 	mta	9		. don't mess with the normalised position of minor mantissa
00:0058B1 B608B4              +231 	j	trimmed		. or its exponent in register 8
00:0058B2 20000A              +232 	sa	10
00:0058B3 20000B              +233 	sa	11
00:0058B4 380004              +234 trimmed	pop	a
00:0058B5 350000              +235 	lret	0
  :                            236 	$endif
  :                            237 
  :                            238 	$if	1
  :                            239 eliminate_microdust			. change any microscopic number to true result 0
00:0058B6 480F92              +240 	lk	(0800000s)
00:0058B7 AF0005              +241 	mta	b
00:0058B8 3E08BA              +242 	lcal	eliminate_normalised	. it is nonzero so check its range
00:0058B9 350000              +243 	lret	0
  :                            244 
  :                            245 eliminate_normalised
00:0058BA 8F0004              +246 	qpush	a
00:0058BB 960018              +247 	dsa	24
00:0058BC B80004              +248 	xorB	a
00:0058BD D80F93              +249 	anb	(0400000-112)		
00:0058BE 7E08C4              +250 	jc	eliminated		. it is larger than microscopic
00:0058BF 200005              +251 	sa	b			. it is microscopic. Change to 192 signs
00:0058C0 C7F000              +252 	ds	0, sp
00:0058C1 C7F002              +253 	ds	2, sp
00:0058C2 C70006              +254 	ds	6
00:0058C3 470008              +255 	qs	8
  :                            256 eliminated
00:0058C4 870004              +257 	qpop	a
00:0058C5 350000              +258 	lret	0
  :                            259 	$endif
  :                            260 
  :                            261 encircle
                                	$head_near	 params(degreep,	int)						;
                                												;
                                			scalars(downward,	float192,					;
00:0058C6 8F0F98              +265 				(major_minor 2.777777777777777777777777777777777777777778e-3)	)
00:0058C7 8F0F94              +265 
  :                            266 				
00:0058C8 50F00A              +267 	lx	degreep
00:0058C9 CFA000              +268 	dl	0, x
00:0058CA A608CD              +269 	jpa	magnitude_obtained
00:0058CB B5FFFF              +270 	xor	-1,,xi
00:0058CC BDFFFF              +271 	xorB	-1,,xi
  :                            272 
  :                            273 magnitude_obtained
00:0058CD DF0F9C              +274 	dan	(360.0)			. just the front half of the constant
  :                            275 					. real dirty dancing that
00:0058CE 5E08DA              +276 	jnc	encircled
  :                            277 
00:0058CF F8F00A              +278 	c	(fp192_mfa)	downward,,i	degreep
00:0058D0 FCF001              +278 
00:0058D1 FCF002              +278 
00:0058D2 FF0EE9              +278 
00:0058D3 38000F              +278 
00:0058D4 8FF004              +279 	c	(fraction192)	downward,,float192
00:0058D5 8FF004              +279 
00:0058D6 FCF008              +279 
00:0058D7 FF0F7F              +279 
00:0058D8 38000F              +279 
  :                            280 
00:0058D9 3E08DD              +281 	lcal	q360
  :                            282 
  :                            283 encircled
00:0058DA FCF008              +284 	$ret
00:0058DB 38000F              +284 
00:0058DC 350000              +284 
  :                            285 
00:0058DD 8F0008              +286 q360	qpush	8
00:0058DE 050008              +287 	on	fp$r
00:0058DF 770F9C              +288 	fm	(360.0)
00:0058E0 47A000              +289 	qs	0, x
00:0058E1 870004              +290 	qpop	a
00:0058E2 0D0008              +291 	off	fp$r
00:0058E3 770F9C              +292 	fm	(360.0)
00:0058E4 670008              +293 	fa	8
00:0058E5 47A004              +294 	qs	4, x
00:0058E6 350000              +295 	lret	0
  :                            296 	
  :                            297 
  :                            298 	$if	RECIPROCAL_READY
  :                            299 reciprocal_factorials
  :                            300: 	$include	rfactori
  :                            1 .	these are 192-bit floating reciprocals of factorials
  :                            2 .	captured over debug console
  :                            3 
  :                            4 .	they are one tiny bit more precise than dividing
  :                            5 .	the factorials into 1 interactively
  :                            6 
  :                            7 .	because scan library only considers the 43 mantissa digits
  :                            8 .	which it can completely assimilate
  :                            9 .	not the 44 digits it might mostly assimilate
  :                            10 
  :                            11 .	these are the reciprocals of odd-humber factorials
  :                            12 .	starting factorial 3
  :                            13 
00:0058E7 3FFFFEAAAAAAAAAAAAAAAAAA3FFFB6AAAAAAAAAAAAAAAAAB
                              +14 	03FFFFEAAAAAAAAAAAAAAAAAA3FFFB6AAAAAAAAAAAAAAAAABo
00:0058EF 3FFFFA8888888888888888883FFFB2888888888888888889
                              +15 	03FFFFA8888888888888888883FFFB2888888888888888889o
00:0058F7 3FFFF4D00D00D00D00D00D003FFFACD00D00D00D00D00D02
                              +16 	03FFFF4D00D00D00D00D00D003FFFACD00D00D00D00D00D02o
00:0058FF 3FFFEEB8EF1D2AB6399C7D563FFFA2E4472800B8EF1D2AC0
                              +17 	03FFFEEB8EF1D2AB6399C7D563FFFA2E4472800B8EF1D2AC0o
00:005907 3FFFE7D7322B3FAA271C7F3A3FFF9DFC9706FB8E3C4056E8
                              +18 	03FFFE7D7322B3FAA271C7F3A3FFF9DFC9706FB8E3C4056E8o
00:00590F 3FFFE0B092309D43684BE51C3FFF95CC748EBDA134ECDD60
                              +19 	03FFFE0B092309D43684BE51C3FFF95CC748EBDA134ECDD60o
00:005917 3FFFD8D73F9F399DC0F88EC33FFF8EAD61DD195FD23D7AC0
                              +20 	03FFFD8D73F9F399DC0F88EC33FFF8EAD61DD195FD23D7AC0o
00:00591F 3FFFD0CA963B81856A5359303FFF86A32EEE35FFD4EE91A8
                              +21 	03FFFD0CA963B81856A5359303FFF86A32EEE35FFD4EE91A8o
00:005927 3FFFC897A4DA340A0AB926503FFF80F61DBDCB3A5ABF5BA1
                              +22 	03FFFC897A4DA340A0AB926503FFF80F61DBDCB3A5ABF5BA1o
00:00592F 3FFFBFB8DC77B6E7AB8C5F783FFF77A37E77372290C243D1
                              +23 	03FFFBFB8DC77B6E7AB8C5F783FFF77A37E77372290C243D1o
00:005937 3FFFB6BB0DA098B1C0CECBDC3FFF6CE09BAFEC4F309ADFE4
                              +24 	03FFFB6BB0DA098B1C0CECBDC3FFF6CE09BAFEC4F309ADFE4o
00:00593F 3FFFAD9F9E66E8B2FD46A7223FFF64A419776F10B893FFF4
                              +25 	03FFFAD9F9E66E8B2FD46A7223FFF64A419776F10B893FFF4o
00:005947 3FFFA3E8D58E16E67519054D3FFF57C78AEA13B9A503A500
                              +26 	03FFFA3E8D58E16E67519054D3FFF57C78AEA13B9A503A500o
00:00594F 3FFF9A92CFCC5A1AC56BD5F23FFF51ED51F335965091DD08
                              +27 	03fff9a92cfcc5a1ac56bd5f23fff51ed51f335965091dd08o
00:005957 3FFF90A1A6973C1FADE217103FFF48F63F7190C8AA0DAF15
                              +28 	03fff90a1a6973c1fade217103fff48f63f7190c8aa0daf15o
00:00595F 3FFF869CC092A6E86A8DA9C23FFF3EE544FB6B954B73B068
                              +29 	03fff869cc092a6e86a8da9c23fff3ee544fb6b954b73b068o
00:005967 3FFF7C86E2CE38B6C8F9419F3FFF34CA23FA32723EF993C0
                              +30 	03fff7c86e2ce38b6c8f9419f3fff34ca23fa32723ef993c0o
00:00596F 3FFF71CF6468E4A742D7A6403FFF26B7B21AB59193EFE1F0
                              +31 	03fff71cf6468e4a742d7a6403fff26b7b21ab59193efe1f0o
00:005977 3FFF678F4CA24D25D66F00853FFF1EEBAF40EFCD83376296
                              +32 	03fff678f4ca24d25d66f00853fff1eebaf40efcd83376296o
00:00597F 3FFF5CB2F30E1CE812063F183FFF11E9BF14859B16AEBE30
                              +33 	03fff5cb2f30e1ce812063f183fff11e9bf14859b16aebe30o
00:005987 3FFF51CAEDA292BF28916E643FFF098435C2B7748B12DB29
                              +34 	03fff51caeda292bf28916e643fff098435c2b7748b12db29o
00:00598F 3FFF46D1E5C39110323C701E3FFEFDB178709ACA2662D8D8
                              +35 	03fff46d1e5c39110323c701e3ffefdb178709aca2662d8d8o
00:005997 3FFF3BC6D4705093F5CDBC623FFEF399C3740B38F438397F
                              +36 	03fff3bc6d4705093f5cdbc623ffef399c3740b38f438397fo
00:00599F 3FFF30AD21786FF5842ECA5A3FFEE88C0D33F34BE51568FE
                              +37 	03fff30ad21786ff5842eca5a3ffee88c0d33f34be51568feo
00:0059A7 3FFF258B0C395FBDC119BB9E3FFEDDB82FA31E321062A6B0
                              +38 	03fff258b0c395fbdc119bb9e3ffeddb82fa31e321062a6b0o
00:0059AF 3FFF19CEA7882C33A6FA079C3FFED1E5D67274F6043CDCB0
                              +39 	03fff19cea7882c33a6fa079c3ffed1e5d67274f6043cdcb0o
00:0059B7 3FFF0E8E8047D562E281503E3FFEC58D11403E587A45F862
                              +40 	03fff0e8e8047d562e281503e3ffec58d11403e587a45f862o
00:0059BF 3FFF02B6DBC9E443DCB7E6A63FFEBAB975C700051AAC2C14
                              +41 	03fff02b6dbc9e443dcb7e6a63ffebab975c700051aac2c14o
00:0059C7 3FFEF6DADFE0BFD4BE9401613FFEAE827623542631490DB2
                              +42 	03ffef6dadfe0bfd4be9401613ffeae827623542631490db2o
00:0059CF 3FFEEAF4F2B6B24FBB42DFB23FFEA2B8C23DC8DE1B77E842
                              +43 	03ffeeaf4f2b6b24fbb42dfb23ffea2b8c23dc8de1b77e842o
00:0059D7 3FFEDF806E7B519070DDB8CC3FFE97EFDC7FCB8AA858E285
                              +44 	03ffedf806e7b519070ddb8cc3ffe97efdc7fcb8aa858e285o
00:0059DF 3FFED2FCE9515DAA38D811543FFE8AD3C8E0121E1E9C2983
                              +45 	03ffed2fce9515daa38d811543ffe8ad3c8e0121e1e9c2983o
00:0059E7 3FFEC6EA4424ED47A5148E7E3FFE7EA4C98D816B4ECDF5A6
                              +46 	03ffec6ea4424ed47a5148e7e3ffe7ea4c98d816b4ecdf5a6o
00:0059EF 3FFEBACC82330155E571C1253FFE6F95831E3408210BF8C8
                              +47 	03ffebacc82330155e571c1253ffe6f95831e3408210bf8c8o
00:0059F7 3FFEAEA88B71D6DCFDCA6F2C3FFE65E2C13DB0EBB219B464
                              +48 	03ffeaea88b71d6dcfdca6f2c3ffe65e2c13db0ebb219b464o
00:0059FF 3FFEA28358CC0D243B1050673FFE5AD9240036213E1AFE92
                              +49 	03ffea28358cc0d243b1050673ffe5ad9240036213e1afe92o
00:005A07 3FFE95C1DF698524F6F60A033FFE4CDBFB8E2D564F783DF2
                              +50 	03ffe95c1df698524f6f60a033ffe4cdbfb8e2d564f783df2o
  :                            51 
  :                            301 	$endif
  :                            302 
  :                            303 	$root
  :                            159: 	$include trig96
  :                            1 trig96	$tree
  :                            2 
  :                            3 	$if	1
  :                            4 _RADIAN_FACTOR $equ 1.7453292519943295769236907684886127134428719*-2
  :                            5 	$else
  :                            6 _RADIAN_FACTOR $equ 0.01745329252	. generated as 96-bit float
  :                            7 	$endif
  :                            8 
  :                            9 _PASSES	$equ	11
  :                            10 
  :                            11 .	vector name sine96
  :                            12 
  :                            13 sine	$tree								. quadrant looks after itself
                                	$head_far	 params(angle,	float)			;	. trim to % 360 degrees here
                                			scalars(u_8,	float,	8		;
00:005A0F 8F0008              +16 				u_rkxy,	float,	r		)
00:005A10 8F0000              +16 
  :                            17 
00:005A11 FCF00B              +18 	lc	trig96:_sine	angle,,i
00:005A12 FCF001              +18 
00:005A13 3E0A46              +18 
00:005A14 38000F              +18 
00:005A15 870000              +19 	qpop	r
00:005A16 870008              +20 	qpop	8
00:005A17 3D0000              +21 	fret	0
  :                            22 	$root
  :                            23 
  :                            24 cosine	$tree
                                	$head_far	 params(angle,	float)			;
                                			scalars(u_8,	float,	8		;
00:005A18 8F0008              +27 				u_rkxy,	float,	r		)
00:005A19 8F0000              +27 
00:005A1A 4F0F8E              +28 	ql	(90.0)							. trim to % 360 degrees 
00:005A1B 6FF00B              +29 	fan	angle							. before this step
00:005A1C 47F00B              +30 	qs	angle
  :                            31 
00:005A1D FCF00B              +32 	lc	trig96:_sine	angle,,i
00:005A1E FCF001              +32 
00:005A1F 3E0A46              +32 
00:005A20 38000F              +32 
00:005A21 870000              +33 	qpop	r
00:005A22 870008              +34 	qpop	8
00:005A23 3D0000              +35 	fret	0
  :                            36 	$root
  :                            37 
  :                            38 tangent	$tree
                                	$head_far	 params(angle,	float)			;
                                								;
                                			scalars(cosine,	float			;
                                				u_8,	float,	8		;
00:005A24 8F0ECD              +43 				u_rkxy,	float,	r		)
00:005A25 8F0008              +43 
00:005A26 8F0000              +43 
  :                            44 
00:005A27 8FF00F              +45 	c	(cosine96)	angle,,float			. angle is copied not referenced
00:005A28 FCF004              +45 
00:005A29 FF0F7C              +45 
00:005A2A 38000F              +45 
00:005A2B 47F008              +46 	qs	cosine
00:005A2C FCF00F              +47 	lc	trig96:_sine	angle,,i			. angle is referenced and changed to a radian
00:005A2D FCF001              +47 
00:005A2E 3E0A46              +47 
00:005A2F 38000F              +47 
00:005A30 7FF008              +48 	fd	cosine
00:005A31 870000              +49 	qpop	r
00:005A32 870008              +50 	qpop	8
00:005A33 87F000              +51 	qpop	0, sp
00:005A34 3D0000              +52 	fret	0
  :                            53 	$root
  :                            54 
  :                            55 cotangent $tree
                                	$head_far	 params(angle,	float)			;
                                								;
                                			scalars(sine,	float,	angle		;
                                				u_8,	float,	8		;
00:005A35 8FF003              +60 				u_rkxy,	float,	r		)
00:005A36 8F0008              +60 
00:005A37 8F0000              +60 
  :                            61 
00:005A38 FCF008              +62 	lc	trig96:_sine	sine,,i				. separate copy of angle, updated
00:005A39 FCF001              +62 
00:005A3A 3E0A46              +62 
00:005A3B 38000F              +62 
00:005A3C 47F008              +63 	qs	sine
00:005A3D 8FF00F              +64 	c	(cosine96)	angle,,float
00:005A3E FCF004              +64 
00:005A3F FF0F7C              +64 
00:005A40 38000F              +64 
00:005A41 7FF008              +65 	fd	sine
00:005A42 870000              +66 	qpop	r
00:005A43 870008              +67 	qpop	8
00:005A44 87F000              +68 	qpop	0, sp
00:005A45 3D0000              +69 	fret	0
  :                            70 	$root
  :                            71 
                                _sine	$head_near	 params(anglep, int)			;
                                								;
                                			scalars(power,	float			;
                                				square,	float			;
                                				factorial, float, 	(6.0)	;
00:005A46 8F0ECD              +77 				factor,	float,		(3.0)	)
00:005A47 8F0ECD              +77 
00:005A48 8F0FA0              +77 
00:005A49 8F0FA4              +77 
  :                            78 
00:005A4A F8F012              +79 	lc	encircle	anglep
00:005A4B FCF001              +79 
00:005A4C 3E0A9A              +79 
00:005A4D 38000F              +79 
  :                            80 
00:005A4E 50F012              +81 	lx	anglep
00:005A4F 4FA000              +82 	ql	0, x
00:005A50 770FA8              +83 	fm	(_RADIAN_FACTOR)
00:005A51 47A000              +84 	qs	0, x
  :                            85 
00:005A52 77A000              +86 	fm	0, x
00:005A53 47F008              +87 	qs	square
00:005A54 77A000              +88 	fm	0, x
00:005A55 47F00C              +89 	qs	power		. initially power is cube
  :                            90 
00:005A56 45000B              +91 	lr	_PASSES,,xi
00:005A57 B60A72              +92 	j	_nomial		. the minus kick
  :                            93 
  :                            94 _NEXT_FACTORIAL* $proc
  :                            95 	ql	factor
  :                            96 	fa	(1.0)
  :                            97 	qs	8
  :                            98 	fa	(1.0)
  :                            99 	qs	factor
  :                            100 	fm	factorial
  :                            101 	fm	8
  :                            102 	qs	factorial
  :                            103 	$end
  :                            104 
  :                            105 _NEXT_POWER* $proc
  :                            106 	ql	power
  :                            107 	fm	square
  :                            108 	qs	power
  :                            109 	$end
  :                            110 
00:005A58 47A000              +111 _poly	qs	0, x		. the plus kick
00:005A59 4FF000              +112 	_NEXT_FACTORIAL
00:005A5A 670FAC              +112 
00:005A5B 470008              +112 
00:005A5C 670FAC              +112 
00:005A5D 47F000              +112 
00:005A5E 77F004              +112 
00:005A5F 770008              +112 
00:005A60 47F004              +112 
00:005A61 4FF00C              +113 	_NEXT_POWER
00:005A62 77F008              +113 
00:005A63 47F00C              +113 
00:005A64 7FF004              +114 	fd	factorial
00:005A65 67A000              +115 	fa	0, x
00:005A66 47A000              +116 	qs	0, x
00:005A67 4FF000              +117 	_NEXT_FACTORIAL
00:005A68 670FAC              +117 
00:005A69 470008              +117 
00:005A6A 670FAC              +117 
00:005A6B 47F000              +117 
00:005A6C 77F004              +117 
00:005A6D 770008              +117 
00:005A6E 47F004              +117 
00:005A6F 4FF00C              +118 	_NEXT_POWER
00:005A70 77F008              +118 
00:005A71 47F00C              +118 
00:005A72 7FF004              +119 _nomial	fd	factorial
00:005A73 0F0004              +120 	n	a
00:005A74 0F0005              +121 	n	b
00:005A75 0F0006              +122 	n	6
00:005A76 0F0007              +123 	n	7
00:005A77 67A000              +124 	fa	0, x
00:005A78 1E0A58              +125 	jdr	_poly
  :                            126 
00:005A79 3E0A8C              +127 	lcal	eliminate_microdust
00:005A7A 3E0A7E              +128 	lcal	trim
  :                            129 
00:005A7B FCF010              +130 	$ret
00:005A7C 38000F              +130 
00:005A7D 350000              +130 
  :                            131 
  :                            132 	$if	1		. if 64 mantissa bits are nonsign
00:005A7E F80004              +133 trim	push	a		. make all 72 bits nonsign
00:005A7F 860018              +134 	saa	24
00:005A80 B5FFFF              +135 	xor	-1,,xi
00:005A81 4DFFFF              +136 	lk	-1,,xi
00:005A82 AF0005              +137 	mta	b		. test mantissa bits 71..48
00:005A83 B60A8A              +138 	j	trimmed
00:005A84 AF0006              +139 	mta	6		. test mantissa bits 47..24
00:005A85 B60A8A              +140 	j	trimmed
00:005A86 4DFF00              +141 	lk	-256,,xi
00:005A87 AF0007              +142 	mta	7		. test mantissa bits 23..8
00:005A88 B60A8A              +143 	j	trimmed
00:005A89 200007              +144 	sa	7
00:005A8A 380004              +145 trimmed	pop	a
00:005A8B 350000              +146 	lret	0
  :                            147 	$endif
  :                            148 
  :                            149 eliminate_microdust
00:005A8C 480F92              +150 	lk	(0800000s)
00:005A8D AF0005              +151 	mta	b
00:005A8E 3E0A90              +152 	lcal	eliminate_normalised
00:005A8F 350000              +153 	lret	0
  :                            154 
  :                            155 eliminate_normalised
00:005A90 8F0004              +156 	qpush	a
00:005A91 960018              +157 	dsa	24
00:005A92 B80004              +158 	xorB	a
00:005A93 D80FB0              +159 	anb	(0400000-35)
00:005A94 7E0A98              +160 	jc	eliminated
00:005A95 200005              +161 	sa	b
00:005A96 C7F000              +162 	ds	0, sp
00:005A97 C7F002              +163 	ds	2, sp
  :                            164 eliminated
00:005A98 870004              +165 	qpop	a
00:005A99 350000              +166 	lret	0
  :                            167 
  :                            168 encircle	$head_near	 params(degreep,	int	)
  :                            169 
00:005A9A 50F002              +170 	lx	degreep
00:005A9B CFA000              +171 	dl	0, x
00:005A9C A60A9F              +172 	jpa	magnitude_found
  :                            173 
00:005A9D B5FFFF              +174 	xor	-1,,xi
00:005A9E BDFFFF              +175 	xorB	-1,,xi
  :                            176 
  :                            177 magnitude_found
00:005A9F DF0F9C              +178 	dan	(360.0)		. we'll use both halves of that constant later
00:005AA0 5E0AA9              +179 	jnc	encircled
  :                            180 
00:005AA1 4F0FB1              +181 	ql	(2.777777777777777777777777777777777777777778e-3)
00:005AA2 77A000              +182 	fm	0, x
00:005AA3 8F0004              +183 	c	(fraction96)	a,,float
00:005AA4 FCF004              +183 
00:005AA5 FF0FB5              +183 
00:005AA6 38000F              +183 
00:005AA7 770F9C              +184 	fm	(360.0)
00:005AA8 47A000              +185 	qs	0, x
  :                            186 
  :                            187 encircled
00:005AA9 350000              +188 	lret	0
  :                            189 
  :                            190 	$root
  :                            160 
  :                            161 	$path	../mib
  :                            162: 	$include snmpv1
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 AGENT2_TUPLES	$equ	24
  :                            41 A2_WORDS	$equ	500
  :                            42 
  :                            43 $(1)
01:000433 000000              +44 a2_socket	+	0
01:000434 FFFFFF              +45 a2_bound	-	1
01:000435 FFFFFFFFFFFF        +46 a2_sva		-	1:d
  :                            47 
  :                            48 $(3)
  :                            49 
                                ?	$do	AGENT2_TUPLES,;
  :                            51 a2_ber_transient(?)	ber_template
  :                            52 
03:000233 000000              +53 a2_permission	+	0
03:000234 000000              +54 a2_ix		+	0
03:000235 000000              +55 ber_command	+	0
  :                            56 snmp_tferq	$res	A2_WORDS
  :                            57 
  :                            58 $(0)
  :                            59 
  :                            60 	$if	SNMP_AGENT_THREADED
  :                            61 snmp_agent_launch
00:005AAA 4F0FB6              +62 	ql	(agent_2, 7, 0, 0q)
00:005AAB 750047              +63 	ii	THREAD$
(+03)10
00:005AAC 6D26C7              +64 	lb	$3("*snmp_agent":0),,xi
00:005AAD 750049              +65 	ii	TAG$
00:005AAE 3D0000              +66 	fret	0
  :                            67 
  :                            68 	$endif
  :                            69 
00:005AAF 3E0AB3              +70 agent_2	lcal	agent_2scan
  :                            71 
  :                            72 	$if	SNMP_AGENT_THREADED
00:005AB0 750041              +73 	ii	YIELD$
00:005AB1 B60AAF              +74 	j	agent_2
  :                            75 	$endif
  :                            76 
00:005AB2 3D0000              +77 	fret	0
  :                            78 
                                agent_2scan $head_near	scalars(snmp_rseq,	24	;
                                				a2_total8,	int	;
                                				a2_highest_tuple, int	;
                                				a2_octets,	int	;
                                				a2_inaxw,	int	;
                                				a2_restartp,	int	;
                                				a2_restartbits,	long	;
00:005AB3 8F0ECD              +86 				a2_axw,		int)
00:005AB4 8FF000              +86 
00:005AB5 8FF000              +86 
00:005AB6 8FF000              +86 
00:005AB7 8FF000              +86 
00:005AB8 8FF000              +86 
00:005AB9 FD0000              +86 
00:005ABA FD0000              +86 
00:005ABB FD0000              +86 
00:005ABC FD0000              +86 
00:005ABD FD0000              +86 
00:005ABE 9F0F34              +86 
00:005ABF FD0000              +86 
  :                            87 
(+01)0f
00:005AC0 700433              +88 	tz	a2_socket
00:005AC1 B60AD0              +89 	j	a2_sample
00:005AC2 600ED1              +90 	la	(IPPROTO_UDP*/16)
00:005AC3 FF0ED2              +91 	call	(__socket)
00:005AC4 E60B67              +92 	jna	a2_stop
(+01)0f
00:005AC5 200433              +93 	sa	a2_socket
  :                            94 
00:005AC6 9F0FBA              +95 	c	(bind) a (SNMP_PORT:d),,long
00:005AC7 F80004              +95 
00:005AC8 FCF003              +95 
00:005AC9 FF0ED5              +95 
00:005ACA 38000F              +95 
  :                            96 
(+01)0f
00:005ACB 200434              +97 	sa	a2_bound
00:005ACC E60B67              +98 	jna	a2_stop
00:005ACD CF000A              +99 	dl	10
(+01)0f
00:005ACE C70435              +100 	ds	a2_sva
00:005ACF FF0FBC              +101 	call	(mib_start)	. agent1 did that
  :                            102 a2_sample
(+01)0f
00:005AD0 780434              +103 	tp	a2_bound
00:005AD1 B60B67              +104 	j	a2_stop
(+01)0f
00:005AD2 CF0435              +105 	dl	a2_sva
00:005AD3 34002F              +106 	sabr	BSOCKET
00:005AD4 500005              +107 	lx	b
00:005AD5 68A006              +108 a2_next	lb	s:udp:socket_inq:head, x
00:005AD6 CE0B67              +109 	jzb	a2_defer
  :                            110 
00:005AD7 28F004              +111 	sb	a2_inaxw
00:005AD8 60D003              +112 	la	descriptor:bytes, b
00:005AD9 20F005              +113 	sa	a2_octets
00:005ADA 200010              +114 	sa	BYTES
  :                            115 
00:005ADB 60D006              +116 	la	descriptor:apdata, b
00:005ADC 20000D              +117 	sa	q
00:005ADD 300014              +118 	z	RDATAC
  :                            119 
(+03)0f
00:005ADE 640236              +120 	la, i	snmp_tferq
00:005ADF 20000C              +121 	sa	p
  :                            122 
00:005AE0 050060              +123 	on	b$streamZR++b$stream16r
00:005AE1 0D0010              +124 	off	b$stream16w
  :                            125 
(+03)0f
00:005AE2 300234              +126 	z	a2_ix		. error_index, if it is ever needed
  :                            127 
00:005AE3 150008              +128 	rsr	8
00:005AE4 680004              +129 	anu, xi	SNMP_SEQUENCE
00:005AE5 DD0030              +129 
00:005AE6 DE0B63              +130 	jnzb	a2_drop
  :                            131 
(+03)0f
00:005AE7 2001A3              +132 	sa	a2_ber_transient(1):ojet
00:005AE8 3E0CC0              +133 	lcal	ber_swap_compare
(+03)0f
00:005AE9 2001A4              +134 	sa	a2_ber_transient(1):bytes
00:005AEA 5E0B63              +135 	jnc	a2_drop
  :                            136 
(+03)10
00:005AEB 5D01A9              +137 	ly, xi	a2_ber_transient(2)
00:005AEC 3E0CE3              +138 	lcal	ber_ri
00:005AED B60B63              +139 	j	a2_drop
  :                            140 
00:005AEE 150008              +141 	rsr	8
00:005AEF 680004              +142 	anu, xi	SNMP_STRING
00:005AF0 DD0004              +142 
00:005AF1 DE0B63              +143 	jnzb	a2_drop		. there must be a community string
(+03)0f
00:005AF2 2001AF              +144 	sa	a2_ber_transient(3):ojet
  :                            145 	
  :                            146 
00:005AF3 60000C              +147 	la	p
(+03)0f
00:005AF4 2001B1              +148 	sa	a2_ber_transient(3):data
(+03)10
00:005AF5 5D01AF              +149 	ly, xi	a2_ber_transient(3)
00:005AF6 3E0CC7              +150 	lcal	ber_rs
  :                            151 
  :                            152 
  :                            153 
  :                            154 .	the parts to pull out are
  :                            155 .	_________________________
  :                            156 
  :                            157 .	30LL	binding and length		00..7F 81:80..FF 82:0100..FFFF
  :                            158 .	0201vv	SNMP version	00 = v 1
  :                            159 
  :                            160 .	then for v 1 at least...
  :                            161 
  :                            162 .	04LLalpha community string
  :                            163 
  :                            164 .	AxLL	command byte pdu length		00..7F 81:80..FF 82:0100..FFFF
  :                            165 .	160 = get 161 = getnext 163 = set
  :                            166 
  :                            167 .	0204xxxxxxxx	request ID typically 4 bytes
  :                            168 
  :                            169 .	020100	status
  :                            170 .	020100	error index
  :                            171 
  :                            172 .	30LL	binding and length		00..7F 81:80..FF 82:0100..FFFF
  :                            173 .	30LL-2	maybe another one nested
  :                            174 
  :                            175 .	06LLxxxxxx...0500	oids with NULLtype zeroL for get / getnext
  :                            176 .	06LLxxxxxx...4103yyyyyy	oids with typeLL / value for set
  :                            177 
  :                            178 .	strings may be > 127 bytes, length is encoded
  :                            179 .						00..7F 81:80..FF 82:0100..FFFF
  :                            180 
  :                            181 .	______________________________________________________________
  :                            182 
  :                            183 .	if the command is not A0 A1 A3 the request is dropped silently
  :                            184 
  :                            185 .	if the bindings lengths don't figure with the containing lengths
  :                            186 .	the request is dropped silently
  :                            187 
  :                            188 .	if community string is unknown the request is dropped silently
  :                            189 
  :                            190 
  :                            191 .	the response is as the request except
  :                            192 .	_____________________________________
  :                            193 
  :                            194 .	the command byte or response is SNMP_RESPONSE A2 162
  :                            195 
  :                            196 .	the response to successful get / getnext contains
  :                            197 .	a value encoding, not NULLtype/zeroL 0500
  :                            198 
  :                            199 
  :                            200 .	if anything has went wrong
  :                            201 
  :                            202 .		status is the error
  :                            203 
  :                            204 .		1 = something was too large in some way		tooBig
  :                            205 .		2 = that does not exist				noSuchName
  :                            206 .		3 = value wrong type or out of range		badValue
  :                            207 .		4 = object may not be wrote			readOnly
  :                            208 .		5 = something else was wrong			genErr
  :                            209 
  :                            210 .		error index indicates the [1st] oid binding which is in error
  :                            211 .		relative 1, 1 = 1st oid binding in the PDU
  :                            212 
  :                            213 .	the plan is
  :                            214 .	take all the actions and table the results as BER templates
  :                            215 
  :                            216 .	if anything is wrong, send the bindings back as received
  :                            217 .	with error-code set to the mistake
  :                            218 .	and error-index pointing to the first binding which is in error
  :                            219 
  :                            220 .	(no further ones need be scanned if that happens)
  :                            221 .	this means the update values are returned but not actioned
  :                            222 
  :                            223 .	and the read-requests are returned with null values as received
  :                            224 
  :                            225 .	even multiple get-nexts can be sensibly answered on this principle
  :                            226 
  :                            227 .	and if everything has went right, produce the BER-encoded results
  :                            228 
  :                            229 
00:005AF7 150008              +230 	rsr	8
(+03)0f
00:005AF8 2001B5              +231 	sa	a2_ber_transient(4):ojet
  :                            232 
00:005AF9 680004              +233 	anu, xi	SNMP_GETNEXTREQ
00:005AFA DD00A1              +233 
00:005AFB CE0B02              +234 	jzb	a2_getnext
00:005AFC 680004              +235 	anu, xi	SNMP_SETREQ
00:005AFD DD00A3              +235 
00:005AFE CE0B02              +236 	jzb	a2_set
00:005AFF 680004              +237 	anu, xi	SNMP_GETREQ
00:005B00 DD00A0              +237 
00:005B01 DE0B63              +238 	jnzb	a2_drop
  :                            239 
  :                            240 a2_get
  :                            241 a2_getnext
(+03)0f
00:005B02 200235              +242 a2_set	sa	ber_command
00:005B03 3E0CC0              +243 	lcal	ber_swap_compare
(+03)0f
00:005B04 2001B6              +244 	sa	a2_ber_transient(4):bytes
00:005B05 5E0B63              +245 	jnc	a2_drop
  :                            246 
  :                            247 
(+03)10
00:005B06 5D01BB              +248 	ly, xi	a2_ber_transient(5)
00:005B07 3E0B6A              +249 	lcal	a2_seq_sta_erx
00:005B08 B60B63              +250 	j	a2_drop
  :                            251 
00:005B09 CF0014              +252 	dl	RDATAC		. snapshot the start point
00:005B0A C7F001              +253 	ds	a2_restartbits	. of the enveloping binding
00:005B0B 60000D              +254 	la	q
00:005B0C 20F003              +255 	sa	a2_restartp	. it might decide to go wrong
  :                            256 				. on a binding which is not the 1st one
  :                            257 a2_getcluster
00:005B0D 150008              +258 	rsr	8
00:005B0E 680004              +259 	anu, xi	SNMP_SEQUENCE
00:005B0F DD0030              +259 
  :                            260 
00:005B10 DE0B63              +261 	jnzb	a2_drop
  :                            262 
00:005B11 3E0CAF              +263 	lcal	ber_rl
00:005B12 680010              +264 	lb	BYTES
00:005B13 D80004              +265 	anb	a
00:005B14 280010              +266 	sb	BYTES
  :                            267 
00:005B15 FCF008              +268 	lc	ber_sequence_scan	a	snmp_rseq,,i
00:005B16 F80004              +268 
00:005B17 FCF002              +268 
00:005B18 3E0D1C              +268 
00:005B19 38000F              +268 
  :                            269 
00:005B1A D60B3B              +270 	jnza	a2_error_response
  :                            271 
00:005B1B C8F007              +272 	ab	a2_total8
00:005B1C 28F007              +273 	sb	a2_total8
  :                            274 
00:005B1D 5CB006              +275 	ly	BER_TRANSIENT_SIZE, y, i
00:005B1E 780010              +276 	tp	BYTES
00:005B1F B60B22              +277 	j	a2_construct_response
00:005B20 700010              +278 	tz	BYTES
00:005B21 B60B0D              +279 	j	a2_getcluster
  :                            280 
  :                            281 
  :                            282 a2_construct_response
00:005B22 18F006              +283 	sy	a2_highest_tuple
  :                            284 
00:005B23 60F007              +285 	la	a2_total8
00:005B24 3E0B74              +286 	lcal	a2_gener8
00:005B25 20F007              +287 	sa	a2_total8
  :                            288 
(+01)0f
00:005B26 CF0435              +289 	dl	a2_sva
00:005B27 34002F              +290 	sabr	BSOCKET
00:005B28 68D006              +291 	lb	s:udp:socket_inq:head
  :                            292 
00:005B29 60F007              +293 	la	a2_total8
  :                            294 
00:005B2A FF0ED6              +295 	call	(udp_rtxbuffer)
00:005B2B C60B63              +296 	jza	a2_drop
00:005B2C 20F000              +297 	sa	a2_axw
  :                            298 
00:005B2D 68F007              +299 	lb	a2_total8
00:005B2E 28C003              +300 	sb	descriptor:bytes, a
  :                            301 
00:005B2F 3E0B8D              +302 	lcal	a2_write_headers
  :                            303 
(+03)10
00:005B30 5D01CD              +304 	ly, xi	a2_ber_transient(8)
  :                            305 
  :                            306 a2_add_tuple
00:005B31 3E0C10              +307 	lcal	ber_release_mo
00:005B32 8D0006              +308 	ay, xi	BER_TRANSIENT_SIZE
00:005B33 40F006              +309 	lr	a2_highest_tuple
00:005B34 FE0B36              +310 	jyge	a2_transmit_response1
00:005B35 B60B31              +311 	j	a2_add_tuple
  :                            312 
  :                            313 
  :                            314 a2_transmit_response1
00:005B36 1D0008              +315 	wsr	$byte	. push the last byte if uneven numbered
  :                            316 
00:005B37 50F000              +317 	lx	a2_axw
00:005B38 FF0EE2              +318 	call	(udp_acw_send)
  :                            319 
00:005B39 B60B63              +320 	j	a2_drop
  :                            321 
  :                            322 a2_snmp_gerr
00:005B3A 650005              +323 	la, xi	5
  :                            324 a2_error_response			. error response from MIB
(+03)0f
00:005B3B 2001C4              +325 	sa	a2_ber_transient(6):data+1
(+03)0f
00:005B3C 3001C2              +326 	z	a2_ber_transient(6):bytes	. zero has effect 1
(+03)0f
00:005B3D 600234              +327 	la	a2_ix
(+03)0f
00:005B3E 2001CA              +328 	sa	a2_ber_transient(7):data+1
(+03)0f
00:005B3F 3001C8              +329 	z	a2_ber_transient(7):bytes	. zero has effect 1
  :                            330 
  :                            331 a2_mirror
00:005B40 60F003              +332 	la	a2_restartp		. retrieve the whole input bindingS
00:005B41 20000D              +333 	sa	q
00:005B42 CFF001              +334 	dl	a2_restartbits
00:005B43 C70014              +335 	ds	RDATAC
  :                            336 
00:005B44 150008              +337 	rsr	8
00:005B45 C5FFD0              +338 	aa	-SNMP_SEQUENCE,,xi
00:005B46 D60B63              +339 	jnza	a2_drop
00:005B47 60F005              +340 	la	a2_octets		. retrieve the input message length
00:005B48 68F004              +341 	lb	a2_inaxw		. it copies addressing
00:005B49 FF0ED6              +342 	call	(udp_rtxbuffer)
00:005B4A C60B63              +343 	jza	a2_drop
00:005B4B 20F000              +344 	sa	a2_axw
00:005B4C 68F005              +345 	lb	a2_octets
00:005B4D 28C003              +346 	sb	descriptor:bytes, a
00:005B4E 50C006              +347 	lx	descriptor:apdata, a
00:005B4F 58F004              +348 	ly	a2_inaxw
00:005B50 58B006              +349 	ly	descriptor:apdata, y
00:005B51 CDFFFF              +350 	ab	-1,,xi
00:005B52 0E0003              +351 	sbr	3			. byte_count//8-1
00:005B53 400005              +352 	lr	b
  :                            353 a2_qload
00:005B54 4FB000              +354 	ql	0, y
00:005B55 47A000              +355 	qs	0, x
00:005B56 850004              +356 	ax	4,,xi
00:005B57 8D0004              +357 	ay	4,,xi
00:005B58 1E0B54              +358 	jdr	a2_qload
  :                            359 
00:005B59 3E0CAF              +360 	lcal	ber_rl
00:005B5A 680004              +361 	lb	a			. calculate length of length
00:005B5B 0E0007              +362 	sbr	7			. 1 extra for 128..255, 1 more extra for 256..65535
00:005B5C C4D002              +363 	aa	2,b,i			. self-include sequence and length of length
  :                            364 
00:005B5D 3E0B74              +365 	lcal	a2_gener8
00:005B5E 20F007              +366 	sa	a2_total8
  :                            367 
00:005B5F 60F000              +368 	la	a2_axw
00:005B60 3E0B8D              +369 	lcal	a2_write_headers
  :                            370 
  :                            371 a2_release
00:005B61 50F000              +372 	lx	a2_axw
00:005B62 FF0EE2              +373 	call	(udp_acw_send)
  :                            374 
(+01)0f
00:005B63 500436              +375 a2_drop	lx	a2_sva+1
00:005B64 60F000              +376 	la	a2_axw
00:005B65 FF0EE3              +377 	call	(release_udgram)
00:005B66 B60AD5              +378 	j	a2_next
  :                            379 
  :                            380 a2_defer
00:005B67 FCF020              +381 a2_stop	$ret
00:005B68 38000F              +381 
00:005B69 350000              +381 
  :                            382 
  :                            383 a2_seq_sta_erx
00:005B6A 3E0CE3              +384 	lcal	ber_ri
00:005B6B 350000              +385 	lret	0
00:005B6C 8D0006              +386 	ay, xi	a2_ber_transient(6)-a2_ber_transient(5)
  :                            387 
00:005B6D 3E0CE3              +388 	lcal	ber_ri
00:005B6E 350000              +389 	lret	0
00:005B6F 8D0006              +390 	ay, xi	a2_ber_transient(7)-a2_ber_transient(6)
  :                            391 
00:005B70 3E0CE3              +392 	lcal	ber_ri
00:005B71 350000              +393 	lret	0
00:005B72 8D0006              +394 	ay, xi	a2_ber_transient(8)-a2_ber_transient(7)
  :                            395 
00:005B73 350001              +396 	lret	1			.	good return
  :                            397 	
  :                            398 
  :                            399 .	this part writes cluster contents into cluster length tags
  :                            400 .	add adds together the sums of the containing sequences
  :                            401 
  :                            402 a2_gener8
00:005B74 F80004              +403 	push	a			.	data clusters length
(+03)10
00:005B75 5D01BB              +404 	ly, xi	a2_ber_transient(5)	.	request_id
00:005B76 3E0CF2              +405 	lcal	ber_edit_semantic_i
00:005B77 F80004              +406 	push	a
(+03)10
00:005B78 5D01C1              +407 	ly, xi	a2_ber_transient(6)	.	status
00:005B79 3E0CF2              +408 	lcal	ber_edit_semantic_i
00:005B7A F80004              +409 	push	a
(+03)10
00:005B7B 5D01C7              +410 	ly, xi	a2_ber_transient(7)	.	error_index
00:005B7C 3E0CF2              +411 	lcal	ber_edit_semantic_i	
00:005B7D 2F0004              +412 	popA	a			.	plus status integr
00:005B7E 2F0004              +413 	popA	a			.	plus request ID 
00:005B7F 2F0004              +414 	popA	a			.	plus data clusters
  :                            415 
(+03)0f
00:005B80 2001B6              +416 	sa	a2_ber_transient(4):bytes .	PDU Type/Length
  :                            417 
00:005B81 3E0D0C              +418 	lcal	ber_edit_cluster	.	PDU containing length
00:005B82 F80004              +419 	push	a
  :                            420 
(+03)10
00:005B83 5D01A9              +421 	ly, xi	a2_ber_transient(2)	.	protocol version
00:005B84 3E0CF2              +422 	lcal	ber_edit_semantic_i	.	protocol version size
00:005B85 F80004              +423 	push	a			
(+03)0f
00:005B86 6001B0              +424 	la	a2_ber_transient(3):bytes	
00:005B87 3E0D0C              +425 	lcal	ber_edit_cluster	.	community string effect
  :                            426 
00:005B88 2F0004              +427 	popA	a			.	plus protocol version field
00:005B89 2F0004              +428 	popA	a			.	plus PDU containing length
  :                            429 
(+03)0f
00:005B8A 2001A4              +430 	sa	a2_ber_transient(1):bytes .	initial sequence content length
  :                            431 
00:005B8B 3E0D0C              +432 	lcal	ber_edit_cluster	.	total buffer size
  :                            433 
00:005B8C 350000              +434 	lret	0
  :                            435 
  :                            436 a2_write_headers
00:005B8D F8C006              +437 	push	descriptor:apdata, a
00:005B8E 38000C              +438 	pop	p
  :                            439 
00:005B8F 050010              +440 	on	b$stream16w
00:005B90 300016              +441 	z	WDATAC
  :                            442 
00:005B91 6D00A2              +443 	lb, xi	SNMP_GETRESP
(+03)0f
00:005B92 2801B5              +444 	sb	a2_ber_transient(4):ojet
  :                            445 
(+03)10
00:005B93 5D01A3              +446 	ly, xi	a2_ber_transient(1)	.	30.length
00:005B94 3E0D16              +447 	lcal	ber_release_cluster_p
(+03)10
00:005B95 5D01A9              +448 	ly, xi	a2_ber_transient(2)	.	protocol version
00:005B96 3E0C0E              +449 	lcal	ber_release_protocol_i
(+03)10
00:005B97 5D01AF              +450 	ly, xi	a2_ber_transient(3)	.	community string
00:005B98 3E0C46              +451 	lcal	ber_release_protocol_s
(+03)10
00:005B99 5D01B5              +452 	ly, xi	a2_ber_transient(4)	.	PDU type.length
00:005B9A 3E0D16              +453 	lcal	ber_release_cluster_p
(+03)10
00:005B9B 5D01BB              +454 	ly, xi	a2_ber_transient(5)	.	request ID
00:005B9C 3E0C0E              +455 	lcal	ber_release_protocol_i
(+03)10
00:005B9D 5D01C1              +456 	ly, xi	a2_ber_transient(6)	.	status
00:005B9E 3E0C0E              +457 	lcal	ber_release_protocol_i
(+03)10
00:005B9F 5D01C7              +458 	ly, xi	a2_ber_transient(7)	.	error-index
00:005BA0 3E0C0E              +459 	lcal	ber_release_protocol_i
  :                            460 
00:005BA1 350000              +461 	lret	0
  :                            462 
  :                            163: 	$include ber
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(67::,y)
  :                            41 ber_t	ber_template
  :                            42 
  :                            43 $(0)
  :                            44 
  :                            45 ber_edit_mojet
00:005BA2 60A003              +46 	la	mo:type
00:005BA3 20B000              +47 	sa	ber_t:ojet
  :                            48 
00:005BA4 680004              +49 	anu, xi	SNMP_INT
00:005BA5 DD0002              +49 
00:005BA6 CE0BBA              +50 	jzb	ber_edit_integer
00:005BA7 680004              +51 	anu, xi	SNMP_COUNTER
00:005BA8 DD0041              +51 
00:005BA9 CE0BBA              +52 	jzb	ber_edit_integer	. manager does not like ber_edit_unsigned
00:005BAA 680004              +53 	anu, xi	SNMP_GAUGE
00:005BAB DD0042              +53 
00:005BAC CE0BBA              +54 	jzb	ber_edit_integer	. manager does not like ber_edit_unsigned
00:005BAD 680004              +55 	anu, xi	SNMP_TIMETICKS
00:005BAE DD0043              +55 
00:005BAF CE0BBA              +56 	jzb	ber_edit_integer	. manager does not like ber_edit_unsigned
00:005BB0 680004              +57 	anu, xi	SNMP_STRING
00:005BB1 DD0004              +57 
00:005BB2 CE0C08              +58 	jzb	ber_edit_string
00:005BB3 680004              +59 	anu, xi	SNMP_NETWORKADDRESS
00:005BB4 DD0040              +59 
00:005BB5 CE0C08              +60 	jzb	ber_edit_string
00:005BB6 680004              +61 	anu, xi	SNMP_OID
00:005BB7 DD0006              +61 
00:005BB8 CE0C02              +62 	jzb	ber_edit_oid
00:005BB9 350000              +63 	lret	0
  :                            64 
  :                            65 ber_edit_integer
00:005BBA 68A001              +66 	lb	mo:data
00:005BBB 60A004              +67 	la	mo:bytes
00:005BBC C5FFFC              +68 	aa, xi	-4
00:005BBD 7E0BCB              +69 	jc	ber_edit_long	. stored value > 1 word
  :                            70 
00:005BBE F8D000              +71 	push	0, b		. stored value 1 word
00:005BBF A7F000              +72 	lsc	0, sp		. count signs
00:005BC0 CDFFFF              +73 	ab, xi	-1		. leave at least one sign
00:005BC1 ADFFF8              +74 	andB,xi	-8		. suppress a whole number
00:005BC2 380004              +75 	pop	a		. of leading octets if any
00:005BC3 26D000              +76 	sal	0, b		. suppress by shifting left
00:005BC4 20B002              +77 	sa	ber_t:data
00:005BC5 650018              +78 	la, xi	24		. calculate the number
00:005BC6 D00005              +79 	ana	b		. of unsuppressed octets
00:005BC7 060003              +80 	sar	3
00:005BC8 20B001              +81 	sa	ber_t:bytes
00:005BC9 C50002              +82 	aa, xi	2
00:005BCA 350000              +83 	lret	0
  :                            84 
  :                            85 ber_edit_long			. stored value 2 words
00:005BCB 9FD000              +86 	dpush	0, b
00:005BCC E7F000              +87 	dlsc	0, sp		. count signs
  :                            88 
00:005BCD 600006              +89 	la	6
00:005BCE C5FFFF              +90 	aa, xi	-1		. leave at least one sign
00:005BCF A5FFF8              +91 	and,xi	-8		. suppress a whole number
00:005BD0 200006              +92 	sa	6		. of leading octets if any
  :                            93 
00:005BD1 380004              +94 	dpop	a
00:005BD2 380005              +94 
00:005BD3 368006              +95 	dsl	*6		. suppress by shifting left
00:005BD4 C7B002              +96 	ds	ber_t:data
00:005BD5 650030              +97 	la, xi	48		. calculate the number
00:005BD6 D00006              +98 	ana	6		. of unsuppresed octets
00:005BD7 060003              +99 	sar	3
00:005BD8 20B001              +100 	sa	ber_t:bytes
00:005BD9 C50002              +101 	aa, xi	2
00:005BDA 350000              +102 	lret	0
  :                            103 
  :                            104 
  :                            105 ber_edit_unsigned
00:005BDB 68A001              +106 	lb	mo:data
00:005BDC 60A004              +107 	la	mo:bytes
00:005BDD C5FFFC              +108 	aa, xi	-4
00:005BDE 7E0BEF              +109 	jc	ber_edit_ul	. stored number > 1 word
  :                            110 				. stored number = 1 word
00:005BDF F8D000              +111 	push	0, b
00:005BE0 A7F000              +112 	lsc	0, sp		. calculate whole zero octets
00:005BE1 ADFFF8              +113 	andB,xi	-8		. to suppress
00:005BE2 380004              +114 	pop	a		. but 1s are not signs
00:005BE3 A60BE5              +115 	jpa	ber_edit_rotate1
00:005BE4 6D0000              +116 	lb, xi	0		. force out 3 unsigned octets
  :                            117 ber_edit_rotate1
00:005BE5 26D000              +118 	sal	0, b
00:005BE6 20B002              +119 	sa	ber_t:data
00:005BE7 650018              +120 	la, xi	24		. calculate output octets
00:005BE8 D00005              +121 	ana	b
00:005BE9 D60BEB              +122 	jnza	ber_edit_length1
00:005BEA 650008              +123 	la, xi	8		. force 1 byte out
  :                            124 ber_edit_length1
00:005BEB 060003              +125 	sar	3
00:005BEC 20B001              +126 	sa	ber_t:bytes
00:005BED C50002              +127 	aa, xi	2
00:005BEE 350000              +128 	lret	0
  :                            129 
  :                            130 ber_edit_ul
00:005BEF 9FD000              +131 	dpush	0, b
00:005BF0 E7F000              +132 	dlsc	0, sp		. calculate whole zero octets
00:005BF1 600006              +133 	la	6		. to suppress
00:005BF2 A5FFF8              +134 	and, xi	-8
00:005BF3 200006              +135 	sa	6
00:005BF4 380004              +136 	dpop	a		. but 1s are not signs
00:005BF5 380005              +136 
00:005BF6 A60BF8              +137 	jpa	ber_edit_rotate2
00:005BF7 300006              +138 	z	6		. force out 6 unsigned octets
  :                            139 ber_edit_rotate2
00:005BF8 368006              +140 	dsl	*6
00:005BF9 C7B002              +141 	ds	ber_t:data
00:005BFA 650030              +142 	la, xi	48		. calculate output octets
00:005BFB D00006              +143 	ana	6
00:005BFC D60BFE              +144 	jnza	ber_edit_length2
00:005BFD 650008              +145 	la, xi	8		. force 1 byte out
  :                            146 ber_edit_length2
00:005BFE 060003              +147 	sar	3
00:005BFF 20B001              +148 	sa	ber_t:bytes
00:005C00 C50002              +149 	aa, xi	2
00:005C01 350000              +150 	lret	0
  :                            151 	
  :                            152 
  :                            153 
  :                            154 ber_edit_oid
00:005C02 60A004              +155 	la	mo:bytes
00:005C03 20B001              +156 	sa	ber_t:bytes
00:005C04 68A001              +157 	lb	mo:data
00:005C05 28B003              +158 	sb	ber_t:storage
00:005C06 C50002              +159 	aa, xi	2
00:005C07 350000              +160 	lret	0
  :                            161 
  :                            162 ber_edit_string
00:005C08 60A004              +163 	la	mo:bytes
00:005C09 20B001              +164 	sa	ber_t:bytes
00:005C0A 3E0D0C              +165 	lcal	ber_edit_cluster
00:005C0B 68A001              +166 	lb	mo:data
00:005C0C 28B003              +167 	sb	ber_t:storage
00:005C0D 350000              +168 	lret	0
  :                            169 
  :                            170 ber_release_protocol_i
00:005C0E 650002              +171 	la, xi	SNMP_INT
00:005C0F B60C20              +172 	j	ber_release_moi
  :                            173 
  :                            174 ber_release_mo
00:005C10 60B000              +175 	la	ber_t:ojet
  :                            176 
00:005C11 680004              +177 	anu, xi	SNMP_SEQUENCE
00:005C12 DD0030              +177 
00:005C13 CE0D17              +178 	jzb	ber_release_cluster
00:005C14 680004              +179 	anu, xi	SNMP_STRING
00:005C15 DD0004              +179 
00:005C16 CE0C48              +180 	jzb	ber_release_string
00:005C17 680004              +181 	anu, xi	SNMP_NETWORKADDRESS
00:005C18 DD0040              +181 
00:005C19 CE0C48              +182 	jzb	ber_release_netaddress
00:005C1A 680004              +183 	anu, xi	SNMP_OID
00:005C1B DD0006              +183 
00:005C1C CE0C48              +184 	jzb	ber_release_oid
  :                            185 
00:005C1D F80004              +186 	push	a
00:005C1E 3E0C3F              +187 	lcal	ber_release_identifier
00:005C1F 380004              +188 	pop	a
  :                            189 
  :                            190 ber_release_moi
00:005C20 260010              +191 	sal	16
00:005C21 1D0008              +192 	wsr	8
00:005C22 60B001              +193 	la	ber_t:bytes
00:005C23 400004              +194 	lr	a
00:005C24 260010              +195 	sal	16
00:005C25 1D0008              +196 	wsr	8
  :                            197 
00:005C26 CFB002              +198 	dl	ber_t:data
00:005C27 B60C2B              +199 	j	ber_release_ioctet?
  :                            200 
  :                            201 ber_release_ioctet!
00:005C28 1D0008              +202 	wsr	8
00:005C29 060008              +203 	sar	8
00:005C2A 360008              +204 	dsl	8
  :                            205 ber_release_ioctet?
00:005C2B 1E0C28              +206 	jdr	ber_release_ioctet!
  :                            207 
00:005C2C 350000              +208 	lret	0
  :                            209 
  :                            210 
  :                            211 ber_release_xlength
00:005C2D 680004              +212 	anu, xi	128
00:005C2E DD0080              +212 
00:005C2F 7E0C33              +213 	jc	ber_xlength2?
00:005C30 260010              +214 	sal	16
00:005C31 1D0008              +215 	wsr	8
00:005C32 350000              +216 	lret	0
  :                            217 ber_xlength2?
00:005C33 680004              +218 	anu, xi	256
00:005C34 DD0100              +218 
00:005C35 7E0C3A              +219 	jc	ber_xlength3!
00:005C36 958100              +220 	or, xi	08100
00:005C37 260008              +221 	sal	8
00:005C38 1D0010              +222 	wsr	16
00:005C39 350000              +223 	lret	0
  :                            224 ber_xlength3!
00:005C3A A00EF6              +225 	and	(65535)
00:005C3B 900FBD              +226 	or	(0820000:s)
00:005C3C 1D0008              +227 	wsr	8
00:005C3D 1D0010              +228 	wsr	16
00:005C3E 350000              +229 	lret	0
  :                            230 
  :                            231 ber_release_identifier
00:005C3F 60B004              +232 	la	ber_t:oidl
00:005C40 160001              +233 	dsr	1
00:005C41 F8B005              +234 	push	ber_t:oid
00:005C42 38000D              +235 	pop	q
00:005C43 400004              +236 	lr	a
00:005C44 300014              +237 	z	RDATAC
00:005C45 B60C5A              +238 	j	ber_release16?
  :                            239 
  :                            240 ber_release_protocol_s
00:005C46 650004              +241 	la, xi	SNMP_STRING
00:005C47 B60C4B              +242 	j	ber_release_svalue
  :                            243 
  :                            244 ber_release_oid
  :                            245 ber_release_netaddress
  :                            246 ber_release_string
  :                            247 
00:005C48 F80004              +248 	push	a
00:005C49 3E0C3F              +249 	lcal	ber_release_identifier
00:005C4A 380004              +250 	pop	a
  :                            251 
  :                            252 ber_release_svalue
00:005C4B 260010              +253 	sal	16	. output the type code
00:005C4C 1D0008              +254 	wsr	8
  :                            255 
00:005C4D 60B001              +256 	la	ber_t:bytes
00:005C4E 3E0C2D              +257 	lcal	ber_release_xlength
  :                            258 
00:005C4F 60B001              +259 	la	ber_t:bytes
00:005C50 160001              +260 	dsr	1
  :                            261 
00:005C51 F8B003              +262 	push	ber_t:storage
00:005C52 38000D              +263 	pop	q
  :                            264 
00:005C53 400004              +265 	lr	a
00:005C54 300014              +266 	z	RDATAC
00:005C55 0D0020              +267 	off	b$stream16r
  :                            268 
00:005C56 B60C5A              +269 	j	ber_release16?
  :                            270 
  :                            271 ber_release16!
00:005C57 150010              +272 	rsr	16
00:005C58 260008              +273 	sal	8
00:005C59 1D0010              +274 	wsr	16
  :                            275 ber_release16?
00:005C5A 1E0C57              +276 	jdr	ber_release16!
  :                            277 
00:005C5B AE0C5F              +278 	jpb	ber_string_released
00:005C5C 150008              +279 	rsr	8
00:005C5D 260010              +280 	sal	16
00:005C5E 1D0008              +281 	wsr	8
  :                            282 ber_string_released
00:005C5F 350000              +283 	lret	0
  :                            284 
  :                            285 
  :                            286 
  :                            287 ber_load_oid
00:005C60 150008              +288 	rsr	8
  :                            289 ber_load_oid?
00:005C61 680004              +290 	anu, xi	SNMP_OID
00:005C62 DD0006              +290 
00:005C63 DE0C75              +291 	jnzb	ber_load_oidx
00:005C64 20A000              +292 	sa	0, x
00:005C65 54A002              +293 	lx, i	2, x
00:005C66 100006              +294 	sx	6		. save the start of the string
  :                            295 				. itself
00:005C67 4D007F              +296 	lk, xi	127
  :                            297 
00:005C68 150008              +298 	rsr	8		. read the octets length
00:005C69 400004              +299 	lr	a
  :                            300 
00:005C6A 680010              +301 	lb	BYTES
00:005C6B DCC002              +302 	anb, i	2, a
00:005C6C 280010              +303 	sb	BYTES
  :                            304 
00:005C6D 6D0000              +305 	lb, xi	0
  :                            306 
00:005C6E B60C74              +307 	j	ber_load_oid_octet?
  :                            308 ber_load_oid_octet!
00:005C6F 150008              +309 	rsr	8
00:005C70 BF0004              +310 	mlb	a		. place 7 bits in the token
00:005C71 A50080              +311 	and, xi	128		. flagged for more?
00:005C72 C60C76              +312 	jza	ber_store_oid_token
00:005C73 2E0007              +313 	sbl	7		. shift to take 7 more bits
  :                            314 
  :                            315 ber_load_oid_octet?
00:005C74 1E0C6F              +316 	jdr	ber_load_oid_octet!
  :                            317 ber_load_oidx
00:005C75 350000              +318 	lret	0		. OID badly formed, still
  :                            319 				. expecting completion of
  :                            320 				. a token
  :                            321 
  :                            322 				. if there is an agent
  :                            323 				. which wants this result
  :                            324 				. then the last token is
  :                            325 				. in b and */7 positions
  :                            326 
  :                            327 				. and the count of tokens
  :                            328 				. up to there is
  :                            329 				. p minus ber_t:storage
  :                            330 
  :                            331 ber_store_oid_token
00:005C76 28A000              +332 	sb	0, x
00:005C77 850001              +333 	ax, xi	1
00:005C78 6D0000              +334 	lb, xi	0
00:005C79 1E0C6F              +335 	jdr	ber_load_oid_octet!
  :                            336 
00:005C7A 600002              +337 	la	x
00:005C7B 680006              +338 	lb	6
00:005C7C D00006              +339 	ana	6		. return buffer in b
00:005C7D CDFFFE              +340 	ab, xi	-2
00:005C7E 20D001              +341 	sa	1, b		. and the word count in a
  :                            342 
  :                            343 				. the # tokens must be
  :                            344 				. stored in the list
  :                            345 				. because mib get next
  :                            346 				. writes a new one there
  :                            347 
00:005C7F 350001              +348 	lret	1		. well formed OID
  :                            349 
  :                            350 
  :                            351 
00:005C80 40A001              +352 ber_woi	lr	1, x		. edit the list of integer tokens
00:005C81 300017              +353 	z	WDATA		. to a transmission format oid
00:005C82 650010              +354 	la, xi	16		. force 16 zero bits out first
00:005C83 200016              +355 	sa	WDATAC
00:005C84 60000C              +356 	la	p
00:005C85 200007              +357 	sa	7		. save 1st word address
00:005C86 300006              +358 	z	6		. start the octets count
  :                            359 
00:005C87 B60CA4              +360 	j	ber_woi_token?
  :                            361 
  :                            362 ber_woi_token!
00:005C88 68A002              +363 	lb	2, x
00:005C89 850001              +364 	ax, xi	1
  :                            365 
00:005C8A 360003              +366 	dsl	3
00:005C8B A50007              +367 	and, xi	7
00:005C8C C60C9C              +368 	jza	ber_woi21?
00:005C8D 950080              +369 	or, xi	128
00:005C8E 260010              +370 	sal	16
00:005C8F 1D0008              +371 	wsr	8
00:005C90 170006              +372 	inc	6
  :                            373 
00:005C91 360007              +374 	dsl	7
  :                            375 ber_woi21!
00:005C92 950080              +376 	or, xi	128
00:005C93 260010              +377 	sal	16
00:005C94 1D0008              +378 	wsr	8
00:005C95 170006              +379 	inc	6
  :                            380 
00:005C96 360007              +381 	dsl	7
  :                            382 ber_woi14!
00:005C97 950080              +383 	or, xi	128
00:005C98 260010              +384 	sal	16
00:005C99 1D0008              +385 	wsr	8
00:005C9A 170006              +386 	inc	6
00:005C9B B60CA0              +387 	j	ber_woi7
  :                            388 
  :                            389 ber_woi21?
00:005C9C 360007              +390 	dsl	7
00:005C9D D60C92              +391 	jnza	ber_woi21!
00:005C9E 360007              +392 	dsl	7
00:005C9F D60C97              +393 	jnza	ber_woi14!
  :                            394 
  :                            395 ber_woi7
00:005CA0 360007              +396 	dsl	7
00:005CA1 260010              +397 	sal	16
00:005CA2 1D0008              +398 	wsr	8
00:005CA3 170006              +399 	inc	6
  :                            400 
  :                            401 ber_woi_token?
00:005CA4 1E0C88              +402 	jdr	ber_woi_token!
  :                            403 
00:005CA5 1D0010              +404 	wsr	16		. force the last word out
  :                            405 
00:005CA6 CF0006              +406 	dl	6
00:005CA7 44C002              +407 	lr, i	2, a		. total octets with 06.LL
00:005CA8 00B004              +408 	sr	ber_t:oidl
00:005CA9 950600              +409 	or, xi	SNMP_OID*/8
00:005CAA 260008              +410 	sal	8		. make room for the 1st token
  :                            411 
00:005CAB 90D000              +412 	or	0, b		. update the 1st string word written
00:005CAC 28B005              +413 	sb	ber_t:oid
00:005CAD 20D000              +414 	sa	0, b		. with SNMP_OID.# octets
00:005CAE 350000              +415 	lret	0
  :                            416 
  :                            417 
00:005CAF 150008              +418 ber_rl	rsr	8
00:005CB0 680004              +419 	lb	a
00:005CB1 AD0080              +420 	andB,xi	128
00:005CB2 DE0CB6              +421 	jnzb	ber_rll
00:005CB3 1F0010              +422 	dec	BYTES	. the command or data type or nest
00:005CB4 1F0010              +423 	dec	BYTES	. the length byte
00:005CB5 350000              +424 	lret	0
  :                            425 
00:005CB6 A50003              +426 ber_rll	and, xi	3
00:005CB7 680010              +427 	lb	BYTES
00:005CB8 DCC002              +428 	anb, i	2, a	. command/dtype + length bytes
00:005CB9 280010              +429 	sb	BYTES
00:005CBA 97CCBC              +430 	ex	ber_rlx, a	
00:005CBB 350000              +431 	lret	0
  :                            432 
00:005CBC 150000              +433 ber_rlx	rsr	0
00:005CBD 150008              +434 	rsr	8
00:005CBE 150010              +435 	rsr	16
00:005CBF 350000              +436 	lret	0	. too big error
  :                            437 
  :                            438 ber_swap_compare
00:005CC0 3E0CAF              +439 	lcal	ber_rl
00:005CC1 680010              +440 	lb	BYTES
00:005CC2 200010              +441 	sa	BYTES
00:005CC3 D80004              +442 	anb	a
00:005CC4 350000              +443 	lret	0
  :                            444 
  :                            445 ber_read_data
00:005CC5 150008              +446 	rsr	8
  :                            447 ber_read_datai
00:005CC6 20B000              +448 	sa	ber_t:ojet
  :                            449 
00:005CC7 3E0CAF              +450 ber_rs	lcal	ber_rl		. subtract encoding + field length 
00:005CC8 680010              +451 	lb	BYTES		. from capsule size
00:005CC9 D80004              +452 	anb	a
00:005CCA 280010              +453 	sb	BYTES
  :                            454 
00:005CCB 400004              +455 	lr	a
00:005CCC 20B001              +456 	sa	ber_t:bytes	. record byte count in dynamic descriptor
00:005CCD 68000C              +457 	lb	p		. and cache start location of savearea
  :                            458 
00:005CCE 300016              +459 	z	WDATAC		. suppress residual store pending bit count
00:005CCF 0D0010              +460 	off	b$stream16w	. write 24 bits per storage word
  :                            461 
00:005CD0 B60CD4              +462 	j	ber_rs?
00:005CD1 150008              +463 ber_rs!	rsr	8		. read input stream
00:005CD2 260010              +464 	sal	16		. shift to high-order positions
00:005CD3 1D0008              +465 	wsr	8		. write store stream		
00:005CD4 1E0CD1              +466 ber_rs?	jdr	ber_rs!		. count down octet count
  :                            467 
00:005CD5 1D0010              +468 	wsr	16		. store last containing word
  :                            469 
  :                            470 	$if	1		. numbers must have word count zero
  :                            471 				. because word count field for strings
  :                            472 				. is allowed ranges for numbers
  :                            473 
  :                            474 				. this is zero for network protocols
  :                            475 				. unless they have a semantic for
  :                            476 				. transmitting range tuples
  :                            477 
  :                            478 
00:005CD6 60B000              +479 	la	ber_t:ojet	. data class
00:005CD7 C5FFFE              +480 	aa, xi	-SNMP_INT
00:005CD8 C60CE1              +481 	jza	ber_rs_no_word_count
00:005CD9 C5FFC1              +482 	aa, xi	+SNMP_INT-SNMP_COUNTER
00:005CDA C60CE1              +483 	jza	ber_rs_no_word_count
00:005CDB C5FFFF              +484 	aa, xi	+SNMP_COUNTER-SNMP_GAUGE
00:005CDC C60CE1              +485 	jza	ber_rs_no_word_count
00:005CDD C5FFFF              +486 	aa, xi	+SNMP_GAUGE-SNMP_TIMETICKS
00:005CDE C60CE1              +487 	jza	ber_rs_no_word_count
  :                            488 	$endif
  :                            489 
00:005CDF 60000C              +490 	la	p		. calculate word count
00:005CE0 D00005              +491 	ana	b
  :                            492 		.
  :                            493 ber_rs_no_word_count
00:005CE1 C7B002              +494 	ds	ber_t:data	. store word count:location
00:005CE2 350000              +495 	lret	0
  :                            496 
00:005CE3 150008              +497 ber_ri	rsr	8
00:005CE4 680004              +498 	anu, xi	SNMP_INT
00:005CE5 DD0002              +498 
00:005CE6 CE0CE8              +499 	jzb	ber_rii
00:005CE7 350000              +500 	lret	0		. not an integr
  :                            501 
00:005CE8 3E0CC6              +502 ber_rii	lcal	ber_read_datai	. read a number in the headers
00:005CE9 640006              +503 	la, i	6
00:005CEA D0B001              +504 	ana	ber_t:bytes
00:005CEB 260003              +505 	sal	3
00:005CEC 500004              +506 	lx	a
00:005CED 60B003              +507 	la	ber_t:storage
00:005CEE CFC000              +508 	dl	0, a
00:005CEF 96A000              +509 	dsa	0, x
00:005CF0 C7B002              +510 	ds	ber_t:data
00:005CF1 350001              +511 	lret	1		. an integer
  :                            512 
  :                            513 ber_edit_semantic_i		. write a number in the headers
00:005CF2 60B001              +514 	la	ber_t:bytes
00:005CF3 A50007              +515 	and, xi	7
00:005CF4 500004              +516 	lx	a
00:005CF5 CFB002              +517 	dl	ber_t:data
00:005CF6 97ACFC              +518 	ex	ber_esi_shift, x
00:005CF7 C7B002              +519 	ds	ber_t:data
00:005CF8 60AD04              +520 	la	ber_esi_effect, x
00:005CF9 20B001              +521 	sa	ber_t:bytes
00:005CFA C50002              +522 	aa, xi	2
00:005CFB 350000              +523 	lret	0
  :                            524 
  :                            525 ber_esi_shift
00:005CFC 360028              +526 	dsl	40
00:005CFD 360028              +527 	dsl	40
00:005CFE 360020              +528 	dsl	32
00:005CFF 360018              +529 	dsl	24
00:005D00 360010              +530 	dsl	16
00:005D01 360008              +531 	dsl	8
00:005D02 360000              +532 	dsl	0
00:005D03 360000              +533 	dsl	0
  :                            534 
  :                            535 ber_esi_effect
00:005D04 000001              +536 	+	1
00:005D05 000001              +537 	+	1
00:005D06 000002              +538 	+	2
00:005D07 000003              +539 	+	3
00:005D08 000004              +540 	+	4
00:005D09 000005              +541 	+	5
00:005D0A 000006              +542 	+	6
00:005D0B 000006              +543 	+	6
  :                            544 
  :                            545 
  :                            546 ber_edit_cluster
00:005D0C F80004              +547 	push	a
00:005D0D A7F000              +548 	lsc	0, sp
00:005D0E CDFFF0              +549 	ab, xi	-16
00:005D0F EE0D11              +550 	jnb	$+2
00:005D10 CD0007              +551 	ab, xi	7
00:005D11 0E0003              +552 	sbr	3
00:005D12 650003              +553 	la, xi	3
00:005D13 D00005              +554 	ana	b
00:005D14 2F0004              +555 	popA	a
00:005D15 350000              +556 	lret	0
  :                            557 
  :                            558 ber_release_cluster_p
00:005D16 60B000              +559 	la	ber_t:ojet
  :                            560 ber_release_cluster
00:005D17 260010              +561 	sal	16
00:005D18 1D0008              +562 	wsr	8
00:005D19 60B001              +563 	la	ber_t:bytes
00:005D1A 3E0C2D              +564 	lcal	ber_release_xlength
00:005D1B 350000              +565 	lret	0
  :                            164: 	$include sequo
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
                                ber_sequence_scan	;
                                	$head_near	 params(ber_inbytes,	int		;
                                				ber_oid_array,	int)		;
                                								;
                                			scalars(ber_akku,	int		;
                                				ber_savebytes,	int,	BYTES	;
00:005D1C FD0000              +46 				ber_transientp,	int,	y	)
00:005D1D F80010              +46 
00:005D1E F80003              +46 
  :                            47 
00:005D1F 650030              +48 	la, xi	SNMP_SEQUENCE
00:005D20 20B000              +49 	sa	ber_t:ojet
  :                            50 
00:005D21 60F005              +51 	la	ber_inbytes
00:005D22 200010              +52 	sa	BYTES
  :                            53 
  :                            54 ber_sequence_scan_cluster
  :                            55 .	ay, xi	BER_TRANSIENT_SIZE
00:005D23 600010              +56 	la	BYTES
00:005D24 E60D6B              +57 	jna	ber_sequence_scanx
00:005D25 C60D6B              +58 	jza	ber_sequence_scanx
  :                            59 
00:005D26 150008              +60 	rsr	$byte
00:005D27 680004              +61 	anu, xi	SNMP_SEQUENCE
00:005D28 DD0030              +61 
00:005D29 DE0D38              +62 	jnzb	ber_sequence_variable?
  :                            63 
00:005D2A 3E0CAF              +64 	lcal	ber_rl
00:005D2B 680010              +65 	lb	BYTES
00:005D2C D80004              +66 	anb	a
00:005D2D 280010              +67 	sb	BYTES
  :                            68 
00:005D2E 8D0006              +69 	ay, xi	BER_TRANSIENT_SIZE
  :                            70 
00:005D2F F8F006              +71 	lc	ber_sequence_scan	a	ber_oid_array
00:005D30 F80004              +71 
00:005D31 FCF002              +71 
00:005D32 3E0D1C              +71 
00:005D33 38000F              +71 
  :                            72 
00:005D34 D60D72              +73 	jnza	ber_sequence_scanz
  :                            74 .	sb	ber_t:bytes
  :                            75 
00:005D35 C8F002              +76 	ab	ber_akku
00:005D36 28F002              +77 	sb	ber_akku
00:005D37 B60D23              +78 	j	ber_sequence_scan_cluster
  :                            79 
  :                            80 ber_sequence_variable?
(+03)0f
00:005D38 170234              +81 	inc	a2_ix
00:005D39 50F006              +82 	lx	ber_oid_array
00:005D3A 3E0C61              +83 	lcal	ber_load_oid?		. SNMP_OID is already read
00:005D3B B60D69              +84 	j	ber_sequence_generr	. it wasn't a good oid
  :                            85 
00:005D3C 8D0006              +86 	ay, xi	BER_TRANSIENT_SIZE
  :                            87 
00:005D3D 3E0CC5              +88 	lcal	ber_read_data
  :                            89 
(+03)0f
00:005D3E 600235              +90 	la	ber_command
00:005D3F 180008              +91 	sy	8			. save the transient descriptor
  :                            92 					. mib walk will overwrite y
  :                            93 
00:005D40 680004              +94 	anu, xi	SNMP_GETNEXTREQ
00:005D41 DD00A1              +94 
00:005D42 CE0D4D              +95 	jzb	ber_sequence_getnext
  :                            96 
00:005D43 680004              +97 	anu, xi	SNMP_SETREQ
00:005D44 DD00A3              +97 
00:005D45 CE0D54              +98 	jzb	ber_sequence_set
  :                            99 
  :                            100 ber_sequence_scan_get
(+03)0f
00:005D46 F80233              +101 	c	(mib_get)	ber_oid_array	a2_permission
00:005D47 F8F007              +101 
00:005D48 FCF002              +101 
00:005D49 FF0FBE              +101 
00:005D4A 38000F              +101 
00:005D4B D60D72              +102 	jnza	ber_sequence_scanz
00:005D4C B60D5F              +103 	j	ber_sequence_represent
  :                            104 
  :                            105 ber_sequence_getnext
(+03)0f
00:005D4D F80233              +106 	c	(mib_getnext)	ber_oid_array	a2_permission
00:005D4E F8F007              +106 
00:005D4F FCF002              +106 
00:005D50 FF0FBF              +106 
00:005D51 38000F              +106 
00:005D52 D60D72              +107 	jnza	ber_sequence_scanz
00:005D53 B60D5F              +108 	j	ber_sequence_represent
  :                            109 
  :                            110 ber_sequence_set
                                	c	(mib_set)	ber_oid_array	a2_permission	;
                                				ber_t:ojet	ber_t:bytes	;
                                				ber_t:storage	ber_t:data	;
00:005D54 FD0000              +114 				0,,xi
00:005D55 F8B002              +114 
00:005D56 F8B003              +114 
00:005D57 F8B001              +114 
00:005D58 F8B000              +114 
(+03)0f
00:005D59 F80233              +114 
00:005D5A F8F00C              +114 
00:005D5B FCF007              +114 
00:005D5C FF0FC0              +114 
00:005D5D 38000F              +114 
  :                            115 
00:005D5E D60D72              +116 	jnza	ber_sequence_scanz
  :                            117 
  :                            118 .	j	ber_sequence_represent
  :                            119 
  :                            120 ber_sequence_represent
00:005D5F 580008              +121 	ly	8	.	transient descriptor
00:005D60 280008              +122 	sb	8	.	MIB object descriptor
00:005D61 50F006              +123 	lx	ber_oid_array
00:005D62 3E0C80              +124 	lcal	ber_woi
  :                            125 
00:005D63 500008              +126 	lx	8	.	MIB object descriptor
00:005D64 3E0BA2              +127 	lcal	ber_edit_mojet
  :                            128 
00:005D65 C0B004              +129 	aa	ber_t:oidl
00:005D66 C0F002              +130 	aa	ber_akku
00:005D67 20F002              +131 	sa	ber_akku
  :                            132 
00:005D68 B60D6B              +133 	j	ber_sequence_scanx
  :                            134 
  :                            135 ber_sequence_generr
00:005D69 650005              +136 	la, xi	SNMP_GENERR
00:005D6A B60D72              +137 	j	ber_sequence_scanz
  :                            138 
  :                            139 ber_sequence_scanx
00:005D6B 60F001              +140 	la	ber_savebytes
00:005D6C 200010              +141 	sa	BYTES
00:005D6D 60F002              +142 	la	ber_akku
00:005D6E 68F000              +143 	lb	ber_transientp
00:005D6F 20D001              +144 	sa	ber_t:bytes, b
00:005D70 3E0D0C              +145 	lcal	ber_edit_cluster
00:005D71 160018              +146 	dsr	24
  :                            147 
  :                            148 ber_sequence_scanz
00:005D72 54F003              +149 	lx, i	$$frame, sp
00:005D73 10000F              +150 	sx	sp
00:005D74 350000              +151 	lret	0
  :                            165 
  :                            166 	$path	../netapps2
  :                            167: 	$include subagent
  :                            1 $(3)
  :                            2 subagent_ithread
03:00042A 000000              +3 	$do	170,	0
03:00042B 000000              +3 
03:00042C 000000              +3 
03:00042D 000000              +3 
03:00042E 000000              +3 
03:00042F 000000              +3 
03:000430 000000              +3 
03:000431 000000              +3 
03:000432 000000              +3 
03:000433 000000              +3 
03:000434 000000              +3 
03:000435 000000              +3 
03:000436 000000              +3 
03:000437 000000              +3 
03:000438 000000              +3 
03:000439 000000              +3 
03:00043A 000000              +3 
03:00043B 000000              +3 
03:00043C 000000              +3 
03:00043D 000000              +3 
03:00043E 000000              +3 
03:00043F 000000              +3 
03:000440 000000              +3 
03:000441 000000              +3 
03:000442 000000              +3 
03:000443 000000              +3 
03:000444 000000              +3 
03:000445 000000              +3 
03:000446 000000              +3 
03:000447 000000              +3 
03:000448 000000              +3 
03:000449 000000              +3 
03:00044A 000000              +3 
03:00044B 000000              +3 
03:00044C 000000              +3 
03:00044D 000000              +3 
03:00044E 000000              +3 
03:00044F 000000              +3 
03:000450 000000              +3 
03:000451 000000              +3 
03:000452 000000              +3 
03:000453 000000              +3 
03:000454 000000              +3 
03:000455 000000              +3 
03:000456 000000              +3 
03:000457 000000              +3 
03:000458 000000              +3 
03:000459 000000              +3 
03:00045A 000000              +3 
03:00045B 000000              +3 
03:00045C 000000              +3 
03:00045D 000000              +3 
03:00045E 000000              +3 
03:00045F 000000              +3 
03:000460 000000              +3 
03:000461 000000              +3 
03:000462 000000              +3 
03:000463 000000              +3 
03:000464 000000              +3 
03:000465 000000              +3 
03:000466 000000              +3 
03:000467 000000              +3 
03:000468 000000              +3 
03:000469 000000              +3 
03:00046A 000000              +3 
03:00046B 000000              +3 
03:00046C 000000              +3 
03:00046D 000000              +3 
03:00046E 000000              +3 
03:00046F 000000              +3 
03:000470 000000              +3 
03:000471 000000              +3 
03:000472 000000              +3 
03:000473 000000              +3 
03:000474 000000              +3 
03:000475 000000              +3 
03:000476 000000              +3 
03:000477 000000              +3 
03:000478 000000              +3 
03:000479 000000              +3 
03:00047A 000000              +3 
03:00047B 000000              +3 
03:00047C 000000              +3 
03:00047D 000000              +3 
03:00047E 000000              +3 
03:00047F 000000              +3 
03:000480 000000              +3 
03:000481 000000              +3 
03:000482 000000              +3 
03:000483 000000              +3 
03:000484 000000              +3 
03:000485 000000              +3 
03:000486 000000              +3 
03:000487 000000              +3 
03:000488 000000              +3 
03:000489 000000              +3 
03:00048A 000000              +3 
03:00048B 000000              +3 
03:00048C 000000              +3 
03:00048D 000000              +3 
03:00048E 000000              +3 
03:00048F 000000              +3 
03:000490 000000              +3 
03:000491 000000              +3 
03:000492 000000              +3 
03:000493 000000              +3 
03:000494 000000              +3 
03:000495 000000              +3 
03:000496 000000              +3 
03:000497 000000              +3 
03:000498 000000              +3 
03:000499 000000              +3 
03:00049A 000000              +3 
03:00049B 000000              +3 
03:00049C 000000              +3 
03:00049D 000000              +3 
03:00049E 000000              +3 
03:00049F 000000              +3 
03:0004A0 000000              +3 
03:0004A1 000000              +3 
03:0004A2 000000              +3 
03:0004A3 000000              +3 
03:0004A4 000000              +3 
03:0004A5 000000              +3 
03:0004A6 000000              +3 
03:0004A7 000000              +3 
03:0004A8 000000              +3 
03:0004A9 000000              +3 
03:0004AA 000000              +3 
03:0004AB 000000              +3 
03:0004AC 000000              +3 
03:0004AD 000000              +3 
03:0004AE 000000              +3 
03:0004AF 000000              +3 
03:0004B0 000000              +3 
03:0004B1 000000              +3 
03:0004B2 000000              +3 
03:0004B3 000000              +3 
03:0004B4 000000              +3 
03:0004B5 000000              +3 
03:0004B6 000000              +3 
03:0004B7 000000              +3 
03:0004B8 000000              +3 
03:0004B9 000000              +3 
03:0004BA 000000              +3 
03:0004BB 000000              +3 
03:0004BC 000000              +3 
03:0004BD 000000              +3 
03:0004BE 000000              +3 
03:0004BF 000000              +3 
03:0004C0 000000              +3 
03:0004C1 000000              +3 
03:0004C2 000000              +3 
03:0004C3 000000              +3 
03:0004C4 000000              +3 
03:0004C5 000000              +3 
03:0004C6 000000              +3 
03:0004C7 000000              +3 
03:0004C8 000000              +3 
03:0004C9 000000              +3 
03:0004CA 000000              +3 
03:0004CB 000000              +3 
03:0004CC 000000              +3 
03:0004CD 000000              +3 
03:0004CE 000000              +3 
03:0004CF 000000              +3 
03:0004D0 000000              +3 
03:0004D1 000000              +3 
03:0004D2 000000              +3 
03:0004D3 000000              +3 
  :                            4 
  :                            5 $(0)
  :                            6 
  :                            7 .	routines have static data in IP process so only callable from IP process
  :                            8 
  :                            9 .	far call vector name (subagent)
  :                            10 .	transmission control block x-> is leased to another process a
  :                            11 
  :                            12 subagent_insert
00:005D75 F80004              +13 	push	a
00:005D76 3E0D8F              +14 	lcal	subagent_point
00:005D77 38C000              +15 	pop	0, a			. store the process control block index
00:005D78 3D0000              +16 	fret	0
  :                            17 
  :                            18 .	far call vector name (subagent?)
  :                            19 .	is transmission control block x-> leased to another process?
  :                            20 
  :                            21 subagent_lookup
00:005D79 3E0D8F              +22 	lcal	subagent_point
00:005D7A 70C000              +23 	tz	0, a			. has this connection a subagent?
00:005D7B 3E0D7E              +24 	lcal	subagent_running?	. currently?
00:005D7C 3D0001              +25 	fret	1			. either no or not active
00:005D7D 3D0000              +26 	fret	0			. yes and still using this handle
  :                            27 
  :                            28 subagent_running?
00:005D7E 580004              +29 	ly	a
00:005D7F 60C000              +30 	la	0, a
00:005D80 750072              +31 	ii	THREAD$STATE		. is this the thread leasing this connection?
00:005D81 B60D8C              +32 	j	subagent_cancel		. either it isn't or it isn't running
  :                            33 
00:005D82 340020              +34 	sabr	32			. base target threadCB in volatile-use window
00:005D83 608F45              +35 	la	*(32*/12++ABT-01000+2s)	. pull up vector list pointer
00:005D84 340020              +36 	sabr	32			. base target process vector list
  :                            37 	
00:005D85 600002              +38 	la	x			. construct connection handle encoding
00:005D86 680FC1              +39 	lb	(TCP_TCB*/16)		. from transmission control block pointer x
00:005D87 76000C              +40 	drl	12
00:005D88 46000C              +41 	rar	12
00:005D89 682185              +42 	lb	tcx_v4(1)		. storage pointer connections memory window[b] into b
  :                            43 
  :                            44 					. compare
00:005D8A DF8F47              +45 	dan	*(32*/12++handle(1)-02000)
00:005D8B 7C0D8E              +46 	jdz	subagent_running!	. target process got this handle from us
  :                            47 					. or rather no it didn't. This must be a new process
  :                            48 subagent_cancel
00:005D8C 30B000              +49 	z	0, y
00:005D8D 350000              +50 	lret	0
  :                            51 
  :                            52 subagent_running!
00:005D8E 350001              +53 	lret	1
  :                            54 
  :                            55 subagent_point
00:005D8F 680002              +56 	lb	x
00:005D90 AD0FFF              +57 	andB	4095,,xi		. maximum connections in one table 169
00:005D91 E80FC2              +58 	mf	(0AAAAAB/*4)		. jerst multiply hee by one liddle ole reciprocal of 24yar
(+03)10
00:005D92 C5042A              +59 	aa	subagent_ithread,,xi	. that way you stay inside a table of 170 entries
00:005D93 350000              +60 	lret	0
  :                            61 
  :                            168: 	$include ../lib/x72_48if
  :                            1 .	calls from 48-radix routines
  :                            2 .	all have leftside operand in register a:b
  :                            3 
  :                            4 "$$swap"
00:005D94 9F0004              +5 	dpush	a
00:005D95 9F0006              +6 	dpush	6
00:005D96 870004              +7 	qpop	a
00:005D97 350000              +8 	lret	0
  :                            9 
  :                            10 .	vector name x72_xtend
  :                            11 
  :                            12 
  :                            13 	$if	1
  :                            14 x72xtend
00:005D98 9F0004              +15 	dpush	a
00:005D99 960030              +16 	dsa	48
00:005D9A C70006              +17 	ds	6
00:005D9B 380004              +18 	dpop	a
00:005D9C 380005              +18 
00:005D9D 3D0000              +19 	fret	0
  :                            20 	$endif
  :                            21 
  :                            22 .	vector name x72_aU
  :                            23 
  :                            24 x72au	$tree
  :                            25 
                                	$head_far	 params(addend2w,	long		;
                                				signs_length,	int	)	;
                                								;
                                			scalars(carry,	long			;	
                                				i47_0,	long,	a		;
00:005D9E 9F0F34              +31 				caller_x, int,	x		)
00:005D9F 9F0004              +31 
00:005DA0 F80002              +31 
  :                            32 
00:005DA1 B7F004              +33 	sc	carry+1
00:005DA2 CFF008              +34 	dl	addend2w
00:005DA3 50F00A              +35 	lx	signs_length
00:005DA4 96A000              +36 	dsa	0, x		. [data word] + extended signs
00:005DA5 D70006              +37 	da	6
00:005DA6 D7F003              +38 	da	carry
00:005DA7 C7F003              +39 	ds	carry
00:005DA8 380002              +40 	pop	x
00:005DA9 870004              +41 	qpop	a
00:005DAA 3D0000              +42 	fret	0
  :                            43 
  :                            44 	$root
  :                            45 	
  :                            46 
  :                            47 .	vector name x72_anU
  :                            48 
  :                            49 x72anu	$tree
                                	$head_far	 params(subtrahend2w,		long	;
                                				signs_length,		int)	;
                                								;
                                			scalars(carry,	long			;
                                				i47_0,	long,	a		;
00:005DAB 9F0F34              +55 				caller_x, int,	x		)
00:005DAC 9F0004              +55 
00:005DAD F80002              +55 
  :                            56 
00:005DAE B7F004              +57 	sc	carry+1
00:005DAF CFF008              +58 	dl	subtrahend2w
00:005DB0 B5FFFF              +59 	xor	-1,,xi		. add antisigns
00:005DB1 BDFFFF              +60 	xorB	-1,,xi
00:005DB2 50F00A              +61 	lx	signs_length
00:005DB3 96A000              +62 	dsa	0, x
00:005DB4 D7F003              +63 	da	carry
00:005DB5 D70006              +64 	da	6
00:005DB6 C7F003              +65 	ds	carry
00:005DB7 380002              +66 	pop	x
00:005DB8 870004              +67 	qpop	a
00:005DB9 3D0000              +68 	fret	0
  :                            69 	$root
  :                            70 
  :                            71 .	vector name x72_m48_24
  :                            72 
  :                            73 x48m24	$tree
  :                            74 	$head_far	 params(multiplier,	int)
  :                            75 
00:005DBA F8F003              +76 	c	(m48_24)	multiplier
00:005DBB FCF001              +76 
00:005DBC FF0FC3              +76 
00:005DBD 38000F              +76 
  :                            77 
00:005DBE 3E0D94              +78 	lcal	$$swap
00:005DBF 3D0000              +79 	$ret
  :                            80 	$root
  :                            81 
  :                            82 .	vector name x72_m72_24[]
  :                            83 x72m24	$tree
  :                            84 
  :                            85 	$if	1
  :                            86 
  :                            87 	$head_far	 params(multiplier,	int	)
  :                            88 
00:005DC0 F8F003              +89 	c	(i72_multiply)	7	a,,long		multiplier
00:005DC1 9F0004              +89 
00:005DC2 F80007              +89 
00:005DC3 FCF004              +89 
00:005DC4 FF0FC4              +89 
00:005DC5 38000F              +89 
00:005DC6 3E0D94              +90 	lcal	$$swap
00:005DC7 3D0000              +91 	$ret
  :                            92 
  :                            93 	$else
  :                            94 
                                	$head_far	 params(multiplier,	int	)	;
                                								;
                                			scalars(caller_8_11,	float,	8	;
                                				product,	long,	a	;
  :                            99 				productu,	long,	6	)
  :                            100 
  :                            101 	c	(i72_multiply)	productu+1,,triple	multiplier	productu+1,,i
  :                            102 
  :                            103 	pop	a
  :                            104 	pop	a
  :                            105 	dsa	24
  :                            106 	ds	6
  :                            107 	dpop	a
  :                            108 	qpop	8
  :                            109 
  :                            110 	fret	0
  :                            111 
  :                            112 	$endif
  :                            113 
  :                            114 	$root
  :                            115 
  :                            116 
  :                            117 .	vector name x72_m48_48
  :                            118 
  :                            119 x48m48	$tree
  :                            120 	$head_far	 params(multiplier,	long)
  :                            121 
00:005DC8 9FF003              +122 	c	(m48_48)	multiplier,,long
00:005DC9 FCF002              +122 
00:005DCA FF0FC5              +122 
00:005DCB 38000F              +122 
00:005DCC 3E0D94              +123 	lcal	$$swap
00:005DCD 3D0000              +124 	$ret
  :                            125 	$root
  :                            126 
  :                            127 
  :                            128 .	vector name x72_m72_48
  :                            129 
  :                            130 x72m48	$tree
                                	$head_far	 params(multiplier_i48,	long		)	;
                                									;
                                			scalars(multiplier,	float			;
                                				caller891011,	float,	8		;
                                				multiplicand,	long,	a		;
                                				multiplicand_u,	long,	6		;
                                				caller_rkxy,	float,	r		;
00:005DCE 8F0ECD              +138 				mguard,		int,	fp$guard	)
00:005DCF 8F0008              +138 
00:005DD0 9F0004              +138 
00:005DD1 9F0006              +138 
00:005DD2 8F0000              +138 
00:005DD3 F80093              +138 
  :                            139 
00:005DD4 650000              +140 	la	0,,xi
00:005DD5 75005E              +141 	ii	FP_GUARD$
  :                            142 
00:005DD6 CFF014              +143 	dl	multiplier_i48
00:005DD7 FF0FC6              +144 	call	(i48_2float)
00:005DD8 47F00D              +145 	qs	multiplier
00:005DD9 54F006              +146 	lx	multiplicand_u+1,,i
00:005DDA FF0FC7              +147 	call	(tripl2float)
00:005DDB 77F00D              +148 	fm	multiplier
00:005DDC FF0FC8              +149 	call	(float2i72)
00:005DDD C7F007              +150 	ds	multiplicand			. multiplicand_u
00:005DDE CF0006              +151 	dl	6
00:005DDF C7F005              +152 	ds	multiplicand_u			. multiplicand
  :                            153 
00:005DE0 380004              +154 	pop	a
00:005DE1 75005E              +155 	ii	FP_GUARD$
00:005DE2 870000              +156 	qpop	r
00:005DE3 870004              +157 	qpop	a
00:005DE4 870008              +158 	qpop	8
00:005DE5 87F000              +159 	qpop	0, sp
  :                            160 
00:005DE6 3D0000              +161 	fret	0
  :                            162 	$root
  :                            163 
  :                            164 .	vector name x72_m72_72
  :                            165 
  :                            166 x72m72	$tree
                                	$head_far	 params(multiplierp,	int		)	;
                                									;
                                                        scalars(multiplier,	float			;
                                				caller_891011,	float,	8		;
                                				multiplicand,	long,	a		;
                                				multiplicand_u, long,	6		;
                                				muser_rkxy,	float, 	r		;
00:005DE7 8F0ECD              +174                                 mguard,		int,	fp$guard	)
00:005DE8 8F0008              +174 
00:005DE9 9F0004              +174 
00:005DEA 9F0006              +174 
00:005DEB 8F0000              +174 
00:005DEC F80093              +174 
  :                            175 
00:005DED 650000              +176         la      0,,xi                   . everything stays in integer range
00:005DEE 75005E              +177         ii      FP_GUARD$               . with no rounding
  :                            178                                         . scale return > 72 = lost significant bits
  :                            179 
00:005DEF 50F014              +180         lx      multiplierp
00:005DF0 FF0FC7              +181 	call	(tripl2float)
00:005DF1 47F00D              +182         qs      multiplier
  :                            183 
00:005DF2 54F006              +184         lx      multiplicand_u+1,,i
00:005DF3 FF0FC7              +185         call    (tripl2float)
  :                            186 
00:005DF4 77F00D              +187         fm      multiplier
00:005DF5 FF0FC8              +188         call    (float2i72)
00:005DF6 C7F007              +189 	ds	multiplicand		. multiplicand_u
00:005DF7 CF0006              +190 	dl	6
00:005DF8 C7F005              +191 	ds	multiplicand_u		. multiplicand
  :                            192 
00:005DF9 380004              +193 	pop	a
00:005DFA 75005E              +194 	ii	FP_GUARD$
00:005DFB 870000              +195 	qpop	r
00:005DFC 870004              +196 	qpop	a
00:005DFD 870008              +197 	qpop	8
00:005DFE 87F000              +198 	qpop	0, sp
00:005DFF 3D0000              +199 	fret	0
  :                            200 	$root
  :                            201 
  :                            202 
  :                            203 .	vector name x72_d72_24[]
  :                            204 
  :                            205 x72d24	$tree
  :                            206 
                                	$head_far	 params(divisor,	int		;
                                				remainderp,	int	)	;
                                								;
                                			scalars(quotient,	long,	a	;
00:005E00 9F0004              +211 				quotientu,	long,	6	)
00:005E01 9F0006              +211 
  :                            212 
                                	c	(i72_divide)	quotientu+1,,triple	;
                                				divisor			;
                                				quotientu+1,,i		;
00:005E02 F8F008              +216 				remainderp
00:005E03 FCF002              +216 
00:005E04 F8F009              +216 
00:005E05 9FF005              +216 
00:005E06 F8F006              +216 
00:005E07 FCF006              +216 
00:005E08 FF0FC9              +216 
00:005E09 38000F              +216 
  :                            217 
00:005E0A 380004              +218 	pop	a
00:005E0B 380004              +219 	pop	a
00:005E0C 960018              +220 	dsa	24
00:005E0D C70006              +221 	ds	6
00:005E0E 380004              +222 	dpop	a
00:005E0F 380005              +222 
  :                            223 
00:005E10 3D0000              +224 	fret	0
  :                            225 
  :                            226 	$root	
  :                            227 
  :                            228 .	vector name x72_d48_48
  :                            229 
  :                            230 x48d48	$tree
  :                            231 	$head_far	 params(divisor,	long)
  :                            232 
00:005E11 9FF003              +233 	c	(d48_48)	divisor,,long
00:005E12 FCF002              +233 
00:005E13 FF0FCA              +233 
00:005E14 38000F              +233 
00:005E15 3E0D94              +234 	lcal	$$swap
00:005E16 3D0000              +235 	$ret
  :                            236 	$root
  :                            237 
  :                            238 .	vector name x72_d72_48
  :                            239 
  :                            240 x72d48	$tree
                                	$head_far	 params(divisor48,	long	)	;
                                								;
                                			scalars(divisor,	float		;
                                				caller8_11,	float,	8	;
                                				dividend,	long,	a	;
                                				dividendu,	long,	6	;
                                				caller_rkxy,	float,	r	;
00:005E17 8F0ECD              +248 				save_fpguard,	int,	fp$guard)
00:005E18 8F0008              +248 
00:005E19 9F0004              +248 
00:005E1A 9F0006              +248 
00:005E1B 8F0000              +248 
00:005E1C F80093              +248 
  :                            249 
00:005E1D 650000              +250 	la	0,,xi
00:005E1E 75005E              +251 	ii	FP_GUARD$
  :                            252 
00:005E1F CFF014              +253 	dl	divisor48
00:005E20 FF0FC6              +254 	call	(i48_2float)
00:005E21 47F00D              +255 	qs	divisor
00:005E22 54F006              +256 	lx	dividendu+1,,i
00:005E23 FF0FC7              +257 	call	(tripl2float)
00:005E24 7FF00D              +258 	fd	divisor
00:005E25 FF0FC8              +259 	call	(float2i72)
00:005E26 C7F007              +260 	ds	dividend
00:005E27 CF0006              +261 	dl	6
00:005E28 C7F005              +262 	ds	dividendu
  :                            263 
00:005E29 380004              +264 	pop	a
00:005E2A 75005E              +265 	ii	FP_GUARD$
00:005E2B 870000              +266 	qpop	r
00:005E2C 870004              +267 	qpop	a
00:005E2D 870008              +268 	qpop	8
00:005E2E 87F000              +269 	qpop	0, sp
00:005E2F 3D0000              +270 	fret	0
  :                            271 
  :                            272 	$root
  :                            273 
  :                            274 .	vector name x72_d72_72
  :                            275 
  :                            276 x72d72	$tree
                                	$head_far	 params(divisorp,	int	)	;
                                								;
                                			scalars(divisor,	float		;
                                				caller_891011,	float,	8	;
                                				dividend,	long,	a	;
                                				dividendu,	long,	6	;
                                				caller_rkxy,	long,	r	;
00:005E30 8F0ECD              +284 				save_fpguard,	int,	fp$guard)
00:005E31 8F0008              +284 
00:005E32 9F0004              +284 
00:005E33 9F0006              +284 
00:005E34 9F0000              +284 
00:005E35 F80093              +284 
00:005E36 650000              +285 	la	0,,xi
00:005E37 75005E              +286 	ii	FP_GUARD$
  :                            287 
00:005E38 50F012              +288 	lx	divisorp
00:005E39 FF0FC7              +289 	call	(tripl2float)
00:005E3A 47F00B              +290 	qs	divisor
00:005E3B 54F004              +291 	lx	dividendu+1,,i
00:005E3C FF0FC7              +292 	call	(tripl2float)
00:005E3D 7FF00B              +293 	fd	divisor
00:005E3E FF0FC8              +294 	call	(float2i72)
00:005E3F C7F005              +295 	ds	dividend
00:005E40 CF0006              +296 	dl	6
00:005E41 C7F003              +297 	ds	dividendu
  :                            298 
00:005E42 380004              +299 	pop	a
00:005E43 75005E              +300 	ii	FP_GUARD$
00:005E44 870000              +301 	qpop	r
00:005E45 870004              +302 	qpop	a
00:005E46 870008              +303 	qpop	8
00:005E47 87F000              +304 	qpop	0, sp
00:005E48 3D0000              +305 	fret	0
  :                            306 	$root
  :                            307 
  :                            308 .	vector name x72_sl
  :                            309 x72sl	$tree
                                	$head_far	 params(countL,	int	)	;
                                							;
                                			scalars(usr89,	long,	8	;
00:005E49 9F0008              +313 				usrxy,	long,	x	)
00:005E4A 9F0002              +313 
  :                            314 
00:005E4B 5D0003              +315 	ly	3,,xi
00:005E4C 50F007              +316 	lx	countL
00:005E4D C70008              +317 	ds	8			. copy acculumators to data LS positions
  :                            318 
  :                            319 sl_again
00:005E4E 85FFE8              +320 	ax	-24,,xi			. any completely jumped data words?
00:005E4F 780002              +321 	tp	x
00:005E50 B60E5A              +322 	j	sl_round
  :                            323 
00:005E51 9F0008              +324 	dpush	8
00:005E52 380007              +325 	pop	7
00:005E53 380008              +326 	pop	8
00:005E54 300009              +327 	z	9
  :                            328 
00:005E55 700003              +329 	tz	y
00:005E56 B60E4E              +330 	j	sl_again
  :                            331 
00:005E57 160030              +332 	dsr	48			. no registers in scope of shift
00:005E58 C70006              +333 	ds	6			. 2s complement integer
00:005E59 B60E5E              +334 	j	sl_return		. remove anything like signs
  :                            335 
  :                            336 sl_round
00:005E5A 850018              +337 	ax	24,,xi
00:005E5B 700002              +338 	tz	x
00:005E5C 3E0E63              +339 	lcal	sl_pullup_store
00:005E5D CF0008              +340 	dl	8
  :                            341 
  :                            342 sl_return
00:005E5E 380002              +343 	dpop	x
00:005E5F 380003              +343 
00:005E60 380008              +344 	dpop	8
00:005E61 380009              +344 
00:005E62 3D0000              +345 	fret	0
  :                            346 
  :                            347 sl_pullup_store
00:005E63 CF0008              +348 	dl	8
00:005E64 F80004              +349 	push	a
00:005E65 36A000              +350 	dsl	0, x
00:005E66 C70008              +351 	ds	8
00:005E67 380005              +352 	pop	b
00:005E68 600007              +353 	la	7
00:005E69 F80004              +354 	push	a
00:005E6A 36A000              +355 	dsl	0, x
00:005E6B 200007              +356 	sa	7
00:005E6C 380005              +357 	pop	b
00:005E6D 600006              +358 	la	6
00:005E6E 36A000              +359 	dsl	0, x
00:005E6F 200006              +360 	sa	6
00:005E70 350000              +361 	lret	0
  :                            362 
Note: ../netapps2/../lib/x72_48if.msm Line 363: $endif not in scope of $if
  :                            363 	$endif
  :                            364 
  :                            365 	$root
  :                            366 
  :                            367 .	vector name x72_sa
  :                            368 x72sa	$tree
                                	$head_far	 params(countR,		int	)	;
                                								;
                                			scalars(caller_89,	long,	8	;
00:005E71 9F0008              +372 				caller_xy,	long,	x	)
00:005E72 9F0002              +372 
  :                            373 
00:005E73 5D0003              +374 	ly	3,,xi
00:005E74 50F007              +375 	lx	countR
00:005E75 C70008              +376 	ds	8			. borrow part of the lookaside area
00:005E76 600006              +377 	la	mantissa2		. this should be a word of signs
00:005E77 860018              +378 	saa	24
  :                            379 
  :                            380 sa_again
00:005E78 85FFE8              +381 	ax	-24,,xi			. roll down adding leading signs
00:005E79 780002              +382 	tp	x			. until shift distance <= 1 data word
00:005E7A B60E85              +383 	j	sa_round
  :                            384 	
00:005E7B 9F0007              +385 	dpush	7
00:005E7C 380008              +386 	pop	8
00:005E7D 380009              +387 	pop	9			. until the stack comes back up
00:005E7E 200007              +388 	sa	7			. add 1 word signs in front
  :                            389 
00:005E7F 8DFFFF              +390 	ay	-1,,xi
00:005E80 700003              +391 	tz	y
00:005E81 B60E78              +392 	j	sa_again
  :                            393 
00:005E82 160030              +394 	dsr	48			. shift count out of range
00:005E83 C70006              +395 	ds	6			. 2s complement integer
00:005E84 B60E89              +396 	j	sa_return		. so all - signs is not zero
  :                            397 
  :                            398 sa_round
00:005E85 850018              +399 	ax	24,,xi
  :                            400 .	sa	6			. signs -> high order shift word. It is anyway
  :                            401 
00:005E86 700002              +402 	tz	x			. save some work if no net bit offset
00:005E87 3E0E8E              +403 	lcal	sa_pushdown_store	. shift overlapping word pairs right
  :                            404 					. by shift distance /// word size
00:005E88 CF0008              +405 	dl	8			. get manipulated data bits 47..0
  :                            406 					. back into accumulators
  :                            407 sa_return
00:005E89 380002              +408 	dpop	x
00:005E8A 380003              +408 
00:005E8B 380008              +409 	dpop	8
00:005E8C 380009              +409 
00:005E8D 3D0000              +410 	fret	0
  :                            411 
  :                            412 sa_pushdown_store
00:005E8E CF0006              +413 	dl	6
00:005E8F F80005              +414 	push	b
00:005E90 96A000              +415 	dsa	0, x
00:005E91 C70006              +416 	ds	6
00:005E92 380004              +417 	pop	a
00:005E93 680008              +418 	lb	8
00:005E94 F80005              +419 	push	b
00:005E95 16A000              +420 	dsr	0, x
00:005E96 280008              +421 	sb	8
00:005E97 380004              +422 	pop	a
00:005E98 680009              +423 	lb	9
00:005E99 16A000              +424 	dsr	0, x
00:005E9A 280009              +425 	sb	9
00:005E9B 350000              +426 	lret	0
  :                            427 
  :                            428 	$root
  :                            429 
  :                            430 .	vector name x72_orU
  :                            431 x72oru	$tree
                                	$head_far	 params(uwords,	long		;
                                				signs_length,	int)	;
                                							;
                                			scalars(ab,	long,	a	;
00:005E9C 9F0004              +436 				caller_x, int,	x	)
00:005E9D F80002              +436 
  :                            437 
00:005E9E CFF006              +438 	dl	uwords
00:005E9F 50F008              +439 	lx	signs_length
00:005EA0 96A000              +440 	dsa	0, x
00:005EA1 900006              +441 	or	6
00:005EA2 980007              +442 	orB	7
00:005EA3 C70006              +443 	ds	6
00:005EA4 380002              +444 	pop	x
00:005EA5 380004              +445 	dpop	a
00:005EA6 380005              +445 
00:005EA7 3D0000              +446 	fret	0
  :                            447 	$root
  :                            448 
  :                            449 .	vector name x72_andU
  :                            450 
  :                            451 x72andu	$tree
                                	$head_far	 params(uwords,	long		;
                                				signs_length,	int)	;
                                							;
                                			scalars(ab,	long,	a	;
00:005EA8 9F0004              +456 				caller_x, int,	x	)
00:005EA9 F80002              +456 
  :                            457 
00:005EAA CFF006              +458 	dl	uwords
00:005EAB 50F008              +459 	lx	signs_length
00:005EAC 96A000              +460 	dsa	0, x
00:005EAD A00006              +461 	and	6
00:005EAE A80007              +462 	andB	7
00:005EAF C70006              +463 	ds	6
00:005EB0 380002              +464 	pop	x
00:005EB1 380004              +465 	dpop	a
00:005EB2 380005              +465 
00:005EB3 3D0000              +466 	fret	0
  :                            467 	$root
  :                            468 
  :                            469 
  :                            470 .	vector name x72_xorU[]
  :                            471 
  :                            472 x72xoru	$tree
                                	$head_far	 params(uwords,	long		;
                                				signs_length,	int)	;
                                							;
                                			scalars(ab,	long,	a	;
00:005EB4 9F0004              +477 				caller_x, int,	x	)
00:005EB5 F80002              +477 
00:005EB6 CFF006              +478 	dl	uwords
00:005EB7 50F008              +479 	lx	signs_length
00:005EB8 96A000              +480 	dsa	0, x
00:005EB9 B00006              +481 	xor	6
00:005EBA B80007              +482 	xorB	7
00:005EBB C70006              +483 	ds	6
00:005EBC 380002              +484 	pop	x
00:005EBD 380004              +485 	dpop	a
00:005EBE 380005              +485 
00:005EBF 3D0000              +486 	fret	0
  :                            487 	$root
  :                            169: 	$include sysinfo
  :                            1 sys_info
00:005EC0 4F0FCB              +2 	ql	(0, 0, 0, CHAINS:q)	. chains per tcp hash table
00:005EC1 04007C              +3 	inA	ram$threshold	. end of ROM / start of RAM
00:005EC2 0C0080              +4 	inB	128		. system memory page high index
00:005EC3 A80F8A              +5 	andB	(03FFFFF)	. without memory type flags
00:005EC4 3D0000              +6 	fret	0
  :                            7 
  :                            170 
  :                            171 $(0)
  :                            172 	$do	$<256,$(0:256)
  :                            173 	$do	$zenith>4096,	$flag	A_PROTOS_BANK1 too large
  :                            174 
  :                            175 
00:005ec5+000141
00:005ec6+000140
00:005ec7+000145
00:005ec8+000146
00:005ec9+000144
00:005eca+00014B
00:005ecb+000142
00:005ecc+000143
00:005ecd+000000000000000000000000
00:005ed1+110000
00:005ed2+000081
00:005ed3+000000000080
00:005ed5+000085
00:005ed6+0000B4
00:005ed7+[002A]18:000000
00:005ed8+[0014]18:000000
00:005ed9+[0018]18:000000
00:005eda+[0023]18:000000
00:005edb+[002B]18:000000
00:005edc+FFFFFFFFFFFFFFFFFFFFFFFF
00:005ee0+[0016]18:000000
00:005ee1+0A0000
00:005ee2+0000B7
00:005ee3+000087
00:005ee4+000000000082
00:005ee6+[0019]18:000000
00:005ee7+[002C]18:000000
00:005ee8+[002D]18:000000
00:005ee9+[002E]18:000000
00:005eea+[002F]18:000000
00:005eeb+[0017]18:000000
00:005eec+2A2000
00:005eed+000148000000000000006000
00:005ef1+060000
00:005ef2+000000000017
00:005ef4+02F000
00:005ef5+02F01F
00:005ef6+00FFFF
00:005ef7+0000A8
00:005ef8+0000A9
00:005ef9+000148
00:005efa+0000AD
00:005efb+00F000
00:005efc+[0029]18:000000
00:005efd+740000
00:005efe+680000
00:005eff+6D0000
00:005f00+770000
00:005f01+650000
00:005f02+750000
00:005f03+710000
00:005f04+720000
00:005f05+7A0000
00:005f06+697100
00:005f07+736D70
00:005f08+737461790000
00:005f0a+74696D650000
00:005f0c+696673796E63
00:005f0e+696673776170
00:005f10+[0030]18:000000
00:005f11+[0024]18:000000
00:005f12+[0031]18:000000
00:005f13+[001E]18:000000
00:005f14+[001A]18:000000
00:005f15+FF0000
00:005f16+2F0000
00:005f17+00014A
00:005f18+000149
00:005f19+[0032]18:000000
00:005f1a+000147
00:005f1b+[0033]18:000000
00:005f1c+[0034]18:000000
00:005f1d+[0035]18:000000
00:005f1e+01F180
00:005f1f+[0036]18:000000
00:005f20+0000B1
00:005f21+0000B2
00:005f22+020140
00:005f23+020001
00:005f24+020000
00:005f25+544342
00:005f26+000000
00:005f27+200000
00:005f28+[0037]18:000000
00:005f29+[0015]18:000000
00:005f2a+020044
00:005f2b+4D0003
00:005f2c+[0038]18:000000
00:005f2d+[0039]18:000000
00:005f2e+[003A]18:000000
00:005f2f+[003B]18:000000
00:005f30+000367000001000000006000
00:005f34+000000000000
00:005f36+FFFFFFFF0012
00:005f38+00000000000000FFFF00FFFF
00:005f3c+000088
00:005f3d+00AC1D000707
00:005f3f+030007
00:005f40+[003C]18:000000
00:005f41+[003D]18:000000
00:005f42+[003E]18:000000
00:005f43+00014C
00:005f44+[003F]18:000000
00:005f45+020042
00:005f46+030000
00:005f47+020188
00:005f48+02018A
00:005f49+02018C
00:005f4a+[0040]18:000000
00:005f4b+00042A000000000000000000
00:005f4f+000000000050
00:005f51+[0041]18:000000
00:005f52+02F01A
00:005f53+000050
00:005f54+0000AB
00:005f55+[0042]18:000000
00:005f56+[0043]18:000000
00:005f57+0000AC
00:005f58+474554
00:005f59+00002F
00:005f5a+000020
00:005f5b+00003F
00:005f5c+00003D
00:005f5d+00050A000000000000000000
00:005f61+000000000081
00:005f63+[0026]18:000000
00:005f64+[0044]18:000000
00:005f65+[0045]18:000000
00:005f66+[0022]18:000000
00:005f67+00059A000000000000000000
00:005f6b+000000000083
00:005f6d+[0046]18:000000
00:005f6e+[0047]18:000000
00:005f6f+000086
00:005f70+[0048]18:000000
00:005f71+[0049]18:000000
00:005f72+[004A]18:000000
00:005f73+00017D
00:005f74+00017C
00:005f75+00017F
00:005f76+00017E
00:005f77+000174
00:005f78+000175
00:005f79+000176
00:005f7a+000177
00:005f7b+000178
00:005f7c+000179
00:005f7d+00017A
00:005f7e+00017B
00:005f7f+000170
00:005f80+000171
00:005f81+400000800000000000000000000000000000000000000000
00:005f89+400000
00:005f8a+3FFFFF
00:005f8b+555556
00:005f8c+C00000
00:005f8d+000173
00:005f8e+400007B40000000000000000
00:005f92+800000
00:005f93+3FFF90
00:005f94+3FFFF8B60B60B60B60B60B60
3FFFB0B60B60B60B60B60B62
00:005f9c+400009B40000000000000000
00:005fa0+400003C00000000000000000
00:005fa4+400002C00000000000000000
00:005fa8+3FFFFB8EFA351294E9C8AE0F
00:005fac+400001800000000000000000
00:005fb0+3FFFDD
00:005fb1+3FFFF8B60B60B60B60B60B61
00:005fb5+000172
00:005fb6+000AAF000007000000000000
00:005fba+0000000000A1
00:005fbc+000243
00:005fbd+820000
00:005fbe+000240
00:005fbf+000241
00:005fc0+000242
00:005fc1+3F0000
00:005fc2+0AAAAA
00:005fc3+[004B]18:000000
00:005fc4+[004C]18:000000
00:005fc5+[004D]18:000000
00:005fc6+[004E]18:000000
00:005fc7+[004F]18:000000
00:005fc8+[0050]18:000000
00:005fc9+[0051]18:000000
00:005fca+[0052]18:000000
00:005fcb+000000000000000000000020
  :                            176 $(0::A_PROTOS_BANK2)
00:009000 B60040              +177 mib_get*	$vector	mib_read
00:009001 B60072              +178 mib_getnext*	$vector	mib_walk
00:009002 B600E3              +179 mib_set*	$vector	mib_write
00:009003 B601D6              +180 mib_start*	$vector	mib_initial
00:009004 B601DF              +181 mib_line*	$vector	mib_wline
00:009005 B60245              +182 mib2ticks*	$vector	mib2tick
  :                            183 
00:009006 B6024D              +184 udp_agent1*	$vector	udpagent_net
00:009007 B6025E              +185 udp_agent2*	$vector	udpagent_port
  :                            186 
00:009008 B6029D              +187 if_agentidx	$vector	ifagent_idx
00:009009 B602BC              +188 if_agentdescr	$vector	ifagent_descr
00:00900A B602C7              +189 if_agenttype	$vector	ifagent_type
00:00900B B602D0              +190 if_agentMTU	$vector	ifagent_MTU
00:00900C B602D9              +191 if_agentspeed	$vector	ifagent_speed
00:00900D B602E0              +192 if_agentphy	$vector	ifagent_phy
00:00900E B602F0              +193 if_agentadmins	$vector	ifagent_admins
00:00900F B602F9              +194 if_agentosta	$vector	ifagent_osta
00:009010 B60302              +195 if_agentlastc	$vector	ifagent_lastc
00:009011 B6030A              +196 if_agentibytes	$vector	ifagent_ibytes
00:009012 B60313              +197 if_agentiucast	$vector	ifagent_iucast
00:009013 B6031C              +198 if_agentimcast	$vector	ifagent_imcast
00:009014 B60325              +199 if_agentidrops	$vector	ifagent_idrops
00:009015 B6032E              +200 if_agentierrs	$vector	ifagent_ierrs
00:009016 B60337              +201 if_agentinoproto $vector ifagent_inoproto
00:009017 B60340              +202 if_agentobytes	$vector	ifagent_obytes
00:009018 B60349              +203 if_agentoucast	$vector	ifagent_oucast
00:009019 B60352              +204 if_agentomcast	$vector	ifagent_omcast
00:00901A B6035B              +205 if_agentodrops	$vector	ifagent_odrops
00:00901B B60364              +206 if_agentoerrs	$vector	ifagent_oerrs
00:00901C B6036D              +207 if_agentoqlen	$vector	ifagent_oqlen
00:00901D B60376              +208 if_agentsmib	$vector	ifagent_smib
  :                            209 
00:00901E B60452              +210 tcp_agent_add	$vector	tcpagent_add
00:00901F B6046F              +211 tcp_agent_free	$vector	tcpagent_free
00:009020 B60480              +212 tcp_agent_state	$vector	tcpagent_state
00:009021 B604A9              +213 tcp_agent_neta	$vector	tcpagent_neta
00:009022 B604B4              +214 tcp_agent_port	$vector	tcpagent_port
00:009023 B604C0              +215 tcp_agent_remote_neta $vector tcpagent_neta_remote
00:009024 B604CB              +216 tcp_agent_remote_port $vector tcpagent_port_remote
00:009025 B60529              +217 tcp_agent_established $vector tcpagent_established
  :                            218 
00:009026 B603AF              +219 ip_agent_address		$vector	ipagent_address
00:009027 B603BE              +220 ip_agent_address_ifidx		$vector	ipagent_address_ifidx
00:009028 B603CB              +221 ip_agent_address_netmask	$vector ipagent_address_netmask
  :                            222 
  :                            223 .	placeholders kept as dummy in case BROADCAST_AND_MAXREASM is switched on
  :                            224 .	place held to avoid displacing subsequent vector locations
  :                            225 .	not that these MIB function names seem to be exported
  :                            226 .	these can be switched on but don't seem necessary in operation
  :                            227 
00:009029 3D0000              +228 ip_agent_address_broadcast	fret	0	. $vector	ipagent_address_broadcast
00:00902A 3D0000              +229 ip_agent_address_maxreasm	fret	0	. $vector	ipagent_address_maxreasm
  :                            230 
00:00902B B60408              +231 ip_agent_route_dest	$vector	ipagent_route_dest
00:00902C B60417              +232 ip_agent_route_ifidx	$vector	ipagent_route_ifidx
00:00902D B60434              +233 ip_agent_route_next_hop	$vector	ipagent_route_next_hop
00:00902E B60443              +234 ip_agent_route_type	$vector	ipagent_route_type
00:00902F B60425              +235 ip_agent_route_mask	$vector	ipagent_route_mask
  :                            236 
00:009030 B6056E              +237 ip_agent_cidr_route_dest_type			$vector	ipagent_cidr_route_dest_type
00:009031 B6057B              +238 ip_agent_cidr_route_dest			$vector	ipagent_cidr_route_dest
00:009032 B6058A              +239 ip_agent_cidr_route_mask_log			$vector	ipagent_cidr_route_mask_log
00:009033 B60597              +240 ip_agent_cidr_route_next_hop_type 		$vector ipagent_cidr_route_next_hop_type
00:009034 B605A5              +241 ip_agent_cidr_route_next_hop			$vector	ipagent_cidr_route_next_hop
00:009035 B605B7              +242 ip_agent_cidr_route_ifidx			$vector	ipagent_cidr_route_ifidx
00:009036 B605C5              +243 ip_agent_cidr_route_type			$vector	ipagent_cidr_route_type
  :                            244 
  :                            245 	$do	$>64,	flag	jump pad overfull A_PROTOS_BANK2
00:009037 3D0000              +246 	$do	64-$,	fret	0
00:009038 3D0000              +246 
00:009039 3D0000              +246 
00:00903A 3D0000              +246 
00:00903B 3D0000              +246 
00:00903C 3D0000              +246 
00:00903D 3D0000              +246 
00:00903E 3D0000              +246 
00:00903F 3D0000              +246 
  :                            247 	
  :                            248 	$path	../mib
  :                            249: 	$include mib-II
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 $(66::,x)
42:000000                     +42 mo	mobjet
42:000001                     +42 
42:000002                     +42 
42:000003                     +42 
42:000004                     +42 
42:000005                     +42 
42:000006                     +42 
  :                            43 
  :                            44 $(67::,y)
43:000000                     +45 om	mvoi
Note: ../mib/mib-II.msm Line 45: void section literal request dropped
43:000001                     +45 
43:000002                     +45 
Note: ../mib/mib-II.msm Line 45: void section: discarding relocation tuple
43:000003                     +45 
43:000004                     +45 
43:000005                     +45 
  :                            46 
  :                            47 $(3)
  :                            48 mib*	$res	MIB
  :                            49 
  :                            50 $(1)
(+03)18
01:000437 0004D4              +51 mib_floor	+	mib
01:000438 000000              +52 mib_root	mobjet	0 0 SNMP_NULL	
01:000439 000000              +52 
01:00043A 000000              +52 
01:00043B 000005              +52 
01:00043C 000000              +52 
01:00043D 000000              +52 
01:00043E 000000              +52 
  :                            53 
  :                            54 $(0)
  :                            55 
                                mib_read $head_far	 params(rlist,	int	;
  :                            57 				rflags,	int)
  :                            58 
00:009040 60F003              +59 	la	rlist
00:009041 68C000              +60 	lb	0, a
00:009042 DD0006              +61 	anb, xi	SNMP_OID
00:009043 DE0063              +62 	jnzb	mib_rr_badvalue
  :                            63 
00:009044 40C001              +64 	lr	1, a
00:009045 5CC002              +65 	ly, i	2, a
(+01)10
00:009046 550438              +66 	lx, xi	mib_root
  :                            67 
00:009047 B60059              +68 	j	mib_rr?
  :                            69 
00:009048 60A003              +70 mib_rr!	la	mo:type
00:009049 680004              +71 	anu, xi	MIB_FUNCTION
00:00904A DD0064              +71 
00:00904B CE0069              +72 	jzb	mib_rr_function
00:00904C 680004              +73 	anu,xi	SNMP_NULL
00:00904D DD0005              +73 
00:00904E DE0066              +74 	jnzb	mib_rr_nosuchname
00:00904F 50A001              +75 	lx	mo:down
  :                            76 mib_rr_seq?
00:009050 60A002              +77 	la	mo:seq
00:009051 C60058              +78 	jza	mib_rr_token_pass	. zero is wild card
00:009052 D0B000              +79 	ana	0, y
00:009053 C60058              +80 	jza	mib_rr_token_pass
00:009054 7E0066              +81 	jc	mib_rr_nosuchname
00:009055 50A000              +82 	lx	mo:along
00:009056 700002              +83 	tz	x
00:009057 B60050              +84 	j	mib_rr_seq?
  :                            85 
  :                            86 mib_rr_token_pass
00:009058 8D0001              +87 	ay, xi	1
00:009059 1E0048              +88 mib_rr?	jdr	mib_rr!
  :                            89 
00:00905A 60A003              +90 	la	mo:type
00:00905B 680004              +91 	anu, xi	MIB_FUNCTION
00:00905C DD0064              +91 
00:00905D CE0069              +92 	jzb	mib_rr_function
00:00905E D50005              +93 	ana,xi	SNMP_NULL
00:00905F C60066              +94 	jza	mib_rr_nosuchname
  :                            95 
00:009060 680002              +96 	lb	x
00:009061 650000              +97 	la, xi	0
00:009062 B60071              +98 	j	mib_rr_x
  :                            99 
  :                            100 mib_rr_badvalue
00:009063 650003              +101 	la, xi	SNMP_BADVALUE
00:009064 6D0000              +102 	lb, xi	0
00:009065 B60071              +103 	j	mib_rr_x
  :                            104 
  :                            105 mib_rr_nosuchname
00:009066 650002              +106 	la, xi	SNMP_NOSUCHNAME
00:009067 6D0000              +107 	lb, xi	0
00:009068 B60071              +108 	j	mib_rr_x
  :                            109 
  :                            110 mib_rr_function
00:009069 FD00A0              +111 	c	mo:down	rlist	rflags	SNMP_GETREQ,,xi
00:00906A F8F005              +111 
00:00906B F8F005              +111 
00:00906C FCF003              +111 
00:00906D FFA001              +111 
00:00906E 38000F              +111 
00:00906F 700005              +112 	tz	b
00:009070 300004              +113 	z	a
  :                            114 
  :                            115 mib_rr_x
00:009071 3D0000              +116 	fret	0
  :                            117 
                                mib_walk $head_far	 params(slist,	int	;
                                				sflags,	int)	;
                                						;
                                			scalars(slevel,	20	;
00:009072 8F09CD              +122 				sdepth,	int)
00:009073 8FF000              +122 
00:009074 8FF000              +122 
00:009075 8FF000              +122 
00:009076 8FF000              +122 
00:009077 FD0000              +122 
  :                            123 
  :                            124 
00:009078 60F018              +125 	la	slist
00:009079 68C000              +126 	lb	0, a
00:00907A DD0006              +127 	anb,xi	SNMP_OID
00:00907B DE00CC              +128 	jnzb	mib_ww_badvalue
  :                            129 
00:00907C 40C001              +130 	lr	1, a
00:00907D 5CC001              +131 	ly, i	1, a
(+01)10
00:00907E 550438              +132 	lx, xi	mib_root
  :                            133 .	z	sdepth
  :                            134 
  :                            135 
00:00907F 60F000              +136 mib_ww!	la	sdepth
00:009080 D00000              +137 	ana	r
00:009081 7E00A3              +138 	jc	mib_ww?
  :                            139 
00:009082 60A003              +140 	la	mo:type			. seek down or across
00:009083 D50005              +141 	ana, xi	SNMP_NULL
00:009084 C60089              +142 	jza	mib_ww_down
  :                            143 
00:009085 60A002              +144 	la	mo:seq			. bottomed out on equal
00:009086 D0B000              +145 	ana	0, y			. but longer string
00:009087 C60092              +146 	jza	mib_ww_seek_peer
00:009088 B6009D              +147 	j	mib_ww_peer
  :                            148 mib_ww_down
00:009089 60A001              +149 	la	mo:down
00:00908A C60092              +150 	jza	mib_ww_seek_peer
  :                            151 
00:00908B 6CF001              +152 	lb, i	slevel
00:00908C C8F000              +153 	ab	sdepth
00:00908D 10D000              +154 	sx	0, b
  :                            155 
00:00908E 500004              +156 	lx	a
00:00908F 17F000              +157 	inc	sdepth
00:009090 170003              +158 	inc	y
00:009091 B6009D              +159 	j	mib_ww_peer
  :                            160 
  :                            161 
  :                            162 mib_ww_seek_peer
00:009092 50A000              +163 	lx	mo:along		. it has no down if it
00:009093 700002              +164 	tz	x
00:009094 B6009D              +165 	j	mib_ww_peer		. is an mo = tree leaf
  :                            166 
00:009095 1FF000              +167 	dec	sdepth
00:009096 78F000              +168 	tp	sdepth
00:009097 B600C9              +169 	j	mib_ww_nosuchname
00:009098 54F001              +170 	lx, i	slevel
00:009099 80F000              +171 	ax	sdepth			. contains pointer to pointer!
  :                            172 
00:00909A 50A000              +173 	lx	0, x			. this is the above and you want
  :                            174 					. the along of the above
00:00909B 1F0003              +175 	dec	y
00:00909C B60092              +176 	j	mib_ww_seek_peer
  :                            177 
  :                            178 
  :                            179 mib_ww_peer
00:00909D 60A002              +180 	la	mo:seq
00:00909E C6007F              +181 	jza	mib_ww!			. zero is wild card
00:00909F D0B000              +182 	ana	0, y
00:0090A0 5E0092              +183 	jnc	mib_ww_seek_peer
  :                            184 
00:0090A1 D600A6              +185 	jnza	mib_ww_ruano?
  :                            186 
  :                            187 .	la	mo:type
  :                            188 .	aa, xi	-SNMP_NULL
  :                            189 .	jza	mib_ww_seek_peer
  :                            190 
00:0090A2 B6007F              +191 	j	mib_ww!
  :                            192 
  :                            193 .	jza	mib_ww!
  :                            194 
  :                            195 					. one search never goes back
  :                            196 					. above this line
  :                            197 .	j	mib_ww_ruano?
  :                            198 
00:0090A3 60A003              +199 mib_ww?	la	mo:type
00:0090A4 D50005              +200 	ana, xi	SNMP_NULL
00:0090A5 D600BE              +201 	jnza	mib_ww_along?
  :                            202 
  :                            203 
  :                            204 				
  :                            205 mib_ww_ruano?
00:0090A6 60A003              +206 	la	mo:type		. you now want the next object at all
00:0090A7 680004              +207 	anu, xi	MIB_FUNCTION
00:0090A8 DD0064              +207 
00:0090A9 CE00B5              +208 	jzb	mib_ww_function
00:0090AA 680004              +209 	anu, xi	SNMP_NULL
00:0090AB DD0005              +209 
00:0090AC DE00CF              +210 	jnzb	mib_www
  :                            211 
00:0090AD 60A001              +212 	la	mo:down
00:0090AE C600BE              +213 	jza	mib_ww_along?
  :                            214 
00:0090AF 6CF001              +215 	lb, i	slevel
00:0090B0 C8F000              +216 	ab	sdepth
00:0090B1 10D000              +217 	sx	0, b
00:0090B2 17F000              +218 	inc	sdepth
  :                            219 
00:0090B3 500004              +220 	lx	a
00:0090B4 B600A6              +221 	j	mib_ww_ruano?
  :                            222 
  :                            223 mib_ww_function
00:0090B5 FD00A1              +224 	c	mo:down slist sflags SNMP_GETNEXTREQ,,xi
00:0090B6 F8F01A              +224 
00:0090B7 F8F01A              +224 
00:0090B8 FCF003              +224 
00:0090B9 FFA001              +224 
00:0090BA 38000F              +224 
00:0090BB CE00C0              +225 	jzb	mib_ww_up
00:0090BC 500005              +226 	lx	b
00:0090BD B600CF              +227 	j	mib_www
  :                            228 
  :                            229 mib_ww_along?
00:0090BE 60A000              +230 	la	mo:along
00:0090BF D600C7              +231 	jnza	mib_ww_along!
  :                            232 mib_ww_up
00:0090C0 1FF000              +233 	dec	sdepth
00:0090C1 78F000              +234 	tp	sdepth
00:0090C2 B600C9              +235 	j	mib_ww_nosuchname
00:0090C3 54F001              +236 	lx, i	slevel
00:0090C4 80F000              +237 	ax	sdepth
00:0090C5 50A000              +238 	lx	0, x
00:0090C6 B600BE              +239 	j	mib_ww_along?
  :                            240 
  :                            241 mib_ww_along!
00:0090C7 500004              +242 	lx	a
00:0090C8 B600A6              +243 	j	mib_ww_ruano?
  :                            244 
  :                            245 mib_ww_nosuchname
00:0090C9 650002              +246 	la, xi	SNMP_NOSUCHNAME
00:0090CA 6D0000              +247 	lb, xi	0
00:0090CB B600E0              +248 	j	mib_ww_x
  :                            249 	
  :                            250 mib_ww_badvalue
00:0090CC 650003              +251 	la, xi	SNMP_BADVALUE
00:0090CD 6D0000              +252 	lb, xi	0
00:0090CE B600E0              +253 	j	mib_ww_x
  :                            254 
00:0090CF 60F000              +255 mib_www	la	sdepth
00:0090D0 C4F001              +256 	aa, i	slevel
00:0090D1 10C000              +257 	sx	0, a
  :                            258 
00:0090D2 58F018              +259 	ly	slist
00:0090D3 6CF002              +260 	lb, i	slevel+1
00:0090D4 40F000              +261 	lr	sdepth
00:0090D5 00B001              +262 	sr	1, y
00:0090D6 B600DD              +263 	j	mib_ww_slingback?
  :                            264 
  :                            265 mib_ww_slingback!
00:0090D7 60D000              +266 	la	0, b
00:0090D8 60C002              +267 	la	mo:seq, a
00:0090D9 C600DB              +268 	jza	mib_ww_slungback	. it's in the string already
00:0090DA 20B002              +269 	sa	2, y
  :                            270 mib_ww_slungback
00:0090DB 6CD001              +271 	lb, i	1, b
00:0090DC 8D0001              +272 	ay, xi	1	
  :                            273 
  :                            274 mib_ww_slingback?
00:0090DD 1E00D7              +275 	jdr	mib_ww_slingback!
  :                            276 
00:0090DE 680002              +277 	lb	x
00:0090DF 650000              +278 	la, xi	0
  :                            279 
  :                            280 mib_ww_x
  :                            281 
00:0090E0 54F015              +282 	lx, i	$$frame, sp
00:0090E1 10000F              +283 	sx	sp
00:0090E2 3D0000              +284 	fret	0
  :                            285 
                                mib_write $head_far	 params(olist,	int	;
                                				oflags,	int	;
                                				oclass,	int	;
                                				obytes,	int	;
                                				odata,	int	;
                                				orules, int	;
                                				orange, int)	;
                                						;
                                			scalars(mibw_floorb4,	int,	mib_floor	;
                                				mibw_parent,	int			;
                                				mibw_first,	int			;
(+01)0f
00:0090E3 F80437              +297 				mibw_prior,	int)
00:0090E4 FD0000              +297 
00:0090E5 FD0000              +297 
00:0090E6 FD0000              +297 
  :                            298 
  :                            299 
00:0090E7 60F007              +300 	la	olist
00:0090E8 68C000              +301 	lb	0, a
00:0090E9 DD0006              +302 	anb, xi	SNMP_OID
00:0090EA DE01CF              +303 	jnzb	mib_nowrite
00:0090EB 40C001              +304 	lr	1, a
  :                            305 
00:0090EC 5CC002              +306 	ly, i	2, a
(+01)10
00:0090ED 550438              +307 	lx, xi	mib_root
00:0090EE B6012B              +308 	j	mib_wlocate?
  :                            309 
  :                            310 
  :                            311 mib_wlocate!
  :                            312 
00:0090EF 68A003              +313 	lb	mo:type
00:0090F0 DD0005              +314 	anb, xi	SNMP_NULL
00:0090F1 DE01CC              +315 	jnzb	mib_wbadvalue
  :                            316 
00:0090F2 68B000              +317 	lb	0, y
00:0090F3 8D0001              +318 	ay, xi	1
  :                            319 
00:0090F4 280006              +320 	sb	6		.	sequence
  :                            321 
00:0090F5 60A001              +322 	la	mo:down
00:0090F6 D60100              +323 	jnza	mib_downpathw
  :                            324 
(+01)0f
00:0090F7 600437              +325 	la	mib_floor
00:0090F8 20A001              +326 	sa	mo:down
  :                            327 
00:0090F9 30C001              +328 	z	mo:down, a
00:0090FA 28C002              +329 	sb	mo:seq, a
00:0090FB 30C000              +330 	z	mo:along, a
  :                            331 
00:0090FC 6D0005              +332 	lb, xi	SNMP_NULL
00:0090FD 28C003              +333 	sb	mo:type, a
00:0090FE 6CC004              +334 	lb, i	4, a
(+01)0f
00:0090FF 280437              +335 	sb	mib_floor
  :                            336 
  :                            337 mib_downpathw
00:009100 10F002              +338 	sx	mibw_parent
00:009101 500004              +339 	lx	a
00:009102 10F001              +340 	sx	mibw_first
00:009103 30F000              +341 	z	mibw_prior	. automatically zero
  :                            342 
  :                            343 mib_rightwardw
00:009104 60A002              +344 	la	mo:seq
00:009105 D00006              +345 	ana	6		. seq
00:009106 7E0116              +346 	jc	mib_right_awayw	. new seq not > encountered
  :                            347 				. seq
  :                            348 
00:009107 60A000              +349 	la	mo:along
00:009108 D60113              +350 	jnza	mib_right_onw
(+01)0f
00:009109 600437              +351 	la	mib_floor
00:00910A 20A000              +352 	sa	mo:along
00:00910B 30C001              +353 	z	mo:down, a
00:00910C 680006              +354 	lb	6
00:00910D 28C002              +355 	sb	mo:seq, a
00:00910E 30C000              +356 	z	mo:along, a
00:00910F 6D0005              +357 	lb, xi	SNMP_NULL
00:009110 28C003              +358 	sb	mo:type, a
  :                            359 
00:009111 6CC004              +360 	lb, i	4, a
(+01)0f
00:009112 280437              +361 	sb	mib_floor
  :                            362 
  :                            363 mib_right_onw
  :                            364 	
00:009113 10F000              +365 	sx	mibw_prior
00:009114 500004              +366 	lx	a
00:009115 B60104              +367 	j	mib_rightwardw
  :                            368 
  :                            369 mib_right_awayw
  :                            370 
00:009116 600006              +371 	la	6	. seq
00:009117 680004              +372 	anu	mo:seq
00:009118 D8A002              +372 
00:009119 7E012B              +373 	jc	mib_wlocate?
  :                            374 
(+01)0f
00:00911A 680437              +375 	lb	mib_floor
00:00911B 30D001              +376 	z	mo:down, b
00:00911C 20D002              +377 	sa	mo:seq, b
00:00911D 650005              +378 	la, xi	SNMP_NULL
00:00911E 20D003              +379 	sa	mo:type, b
00:00911F 10D000              +380 	sx	mo:along, b
  :                            381 
00:009120 500005              +382 	lx	b
00:009121 64D004              +383 	la, i	4, b
(+01)0f
00:009122 200437              +384 	sa	mib_floor
  :                            385 
00:009123 60F000              +386 	la	mibw_prior
00:009124 C60127              +387 	jza	mib_firstinroww
00:009125 10C000              +388 	sx	mo:along, a
00:009126 B6012B              +389 	j	mib_setinroww
  :                            390 
  :                            391 mib_firstinroww
00:009127 60F002              +392 	la	mibw_parent
00:009128 10C001              +393 	sx	mo:down, a
00:009129 60F001              +394 	la	mibw_first
00:00912A 20A000              +395 	sa	mo:along
  :                            396 	
  :                            397 mib_setinroww
  :                            398 mib_wlocate?
00:00912B 1E00EF              +399 	jdr	mib_wlocate!
  :                            400 
  :                            401 	.	the header has been found or inserted
  :                            402 	.	found = update
  :                            403 	.	inserted = new
  :                            404 
(+01)0f
00:00912C 600437              +405 	la	mib_floor
00:00912D 680004              +406 	anu	mibw_floorb4
00:00912E D8F003              +406 
  :                            407 
00:00912F CE016B              +408 	jzb	mib_modify
  :                            409 
  :                            410 .	here is a large difference between
  :                            411 .	first and subsequent store of any
  :                            412 .	managed object
  :                            413 
  :                            414 .	when you first store a managed object
  :                            415 .	you store its rules and the address
  :                            416 .	where its data is
  :                            417 
  :                            418 .	when you subsequently store the same
  :                            419 .	managed object, you write new data
  :                            420 .	at the address in the descriptor
  :                            421 .	and the rules initially stored apply
  :                            422 
00:009130 60F009              +423 	la	oclass
00:009131 20A003              +424 	sa	mo:type
  :                            425 
00:009132 68F00B              +426 	lb	odata
00:009133 28A001              +427 	sb	mo:data
  :                            428 
00:009134 68F00A              +429 	lb	obytes
00:009135 28A004              +430 	sb	mo:bytes
  :                            431 
00:009136 68F008              +432 	lb	oflags
00:009137 28A005              +433 	sb	mo:flags
  :                            434 
00:009138 68F00C              +435 	lb	orules
00:009139 28A006              +436 	sb	mo:ranges
  :                            437 
00:00913A 100008              +438 	sx	8
00:00913B 850007              +439 	ax, xi	7
  :                            440 
00:00913C 400005              +441 	lr	b		. a list of allowed size ranges?
  :                            442 
00:00913D 680004              +443 	anu,xi	SNMP_NETWORKADDRESS
00:00913E DD0040              +443 
00:00913F CE0166              +444 	jzb	mib_store_new_x1
00:009140 680004              +445 	anu,xi	SNMP_STRING
00:009141 DD0004              +445 
00:009142 CE0166              +446 	jzb	mib_store_new_x1
00:009143 680004              +447 	anu,xi	SNMP_OID
00:009144 DD0006              +447 
00:009145 CE0166              +448 	jzb	mib_store_new_x1 . none of those has number ranges
  :                            449 				 . but a maxcopy bucket size instead
  :                            450 
00:009146 680004              +451 	anu, xi	MIB_FUNCTION
00:009147 DD0064              +451 
00:009148 CE0160              +452 	jzb	mib_store_new_x
  :                            453 
00:009149 68F00C              +454 	lb	orules
00:00914A CE0168              +455 	jzb	mib_store_new
  :                            456 
00:00914B 58F00D              +457 	ly	orange		. pointer to tuple list
  :                            458 
00:00914C 60F00A              +459 	la	obytes
  :                            460 
00:00914D C601CA              +461 	jza	mib_wgenerr
00:00914E 680004              +462 	anu, xi	7
00:00914F DD0007              +462 
00:009150 7E01C8              +463 	jc	mib_wtoobig
  :                            464 
00:009151 D50004              +465 	ana, xi	4
00:009152 7E0158              +466 	jc	mib_store_long_range?
00:009153 B6015E              +467 	j	mib_store_range?
  :                            468 
  :                            469 .	the method of having signed and unsigned range checks
  :                            470 .	without noticing too much
  :                            471 
  :                            472 .	firstly, if the high-order bit of the upper and lower limit
  :                            473 .	are identical, just do unsigned compares, and that will give
  :                            474 .	the right result whether the candidate integer is meant to
  :                            475 .	be signed or not
  :                            476 
  :                            477 .	secondly, if the high order bits of the two limits are 
  :                            478 .	different, then
  :                            479 
  :                            480 .	if the upper limit interpreted as unsigned is greater than
  :                            481 .	the lower limit interpreted as unsigned (the high order bit
  :                            482 .	of the upper limit is on, and not the high order bit of the
  :                            483 .	lower limit), just do an unsigned compare, because the
  :                            484 .	low-high difference cannot be a negative difference between
  :                            485 .	two signed integers. It can only be a lower limit in the
  :                            486 .	lower half of the number space, and an upper limit in the
  :                            487 .	upper half of the unsigned number space
  :                            488 
  :                            489 .	in all the above cases, the candidate integer is within
  :                            490 .	the range tested, if both carry is generated from the
  :                            491 .	subtraction of the lower limit from the integer, and also
  :                            492 .	carry is generated from the subtraction of the integer from
  :                            493 .	the upper limit
  :                            494 
  :                            495 .	this depends upon carry being consistent with adding the
  :                            496 .	minus of one number to the plus of another
  :                            497 
  :                            498 .	RTA1 is logically correct for this. The result and carried
  :                            499 .	result of
  :                            500 
  :                            501 .		ana	THIS
  :                            502 .		anb	THAT
  :                            503 .		dan	THE_OTHER
  :                            504 
  :                            505 
  :                            506 .	are identical to the result and carried result of
  :                            507 
  :                            508 .		aa	MINUS_THIS
  :                            509 .		ab	MINUS_THAT
  :                            510 .		da	MINUS_THE_OTHER
  :                            511 
  :                            512 .	carry$ set after ana anb dan means the unsigned number in
  :                            513 .	the accumulators was at least as large as the number
  :                            514 .	subtracted from it
  :                            515 .		
  :                            516 .
  :                            517 .	if the high-order bit of the lower limit is on and not the
  :                            518 .	high order bit of the upper limit, this is a signed range
  :                            519 .	which includes the value zero between its upper and lower
  :                            520 .	bounds. Then the candidate integer is within the range
  :                            521 .	tested if both the result of the integer minus the lower limit
  :                            522 .	is of positive polarity, and also the result of the upper limit
  :                            523 .	minus the integer is positive polarity
  :                            524 
  :                            525 .	polarity (and zero) are tested in the registers holding the
  :                            526 .	results, because the only condition flag in RTA1 is carry$
  :                            527 
  :                            528 .	examples of instructions testing results other than carry are
  :                            529 
  :                            530 .		jpa	here
  :                            531 .		jnb	there
  :                            532 .		jdz	everywhere
  :                            533 .		jzb	b_is_zero
  :                            534 .		jpe	a_has_even_parity
  :                            535 
  :                            536 .		tp	location_a_few_million
  :                            537 .		j	the_word_at_location_a_few_million_is_negative
  :                            538 
  :                            539 .		tz	2, sp
  :                            540 .		j	the_third_register_in_the_internal_stack_is_nonzero
  :                            541 
  :                            542 
  :                            543 mib_store_long_range!
00:009154 8FB000              +544 	qpush	0, y
00:009155 87A000              +545 	qpop	0, x
00:009156 850004              +546 	ax, xi	4
00:009157 8D0004              +547 	ay, xi	4
  :                            548 mib_store_long_range?
00:009158 1E0154              +549 	jdr	mib_store_long_range!
00:009159 B60168              +550 	j	mib_store_new
  :                            551 	
  :                            552 mib_store_range!
00:00915A CFB000              +553 	dl	0, y
00:00915B C7A000              +554 	ds	0, x
00:00915C 850002              +555 	ax, xi	2
00:00915D 8D0002              +556 	ay, xi	2
  :                            557 mib_store_range?
00:00915E 1E015A              +558 	jdr	mib_store_range!
00:00915F B60168              +559 	j	mib_store_new
  :                            560 
  :                            561 mib_store_new_x
00:009160 60F00A              +562 	la	obytes		. a function may have a table
00:009161 C60168              +563 	jza	mib_store_new	. row repeat for GETNEXT
00:009162 60F001              +564 	la	mibw_first
00:009163 680008              +565 	lb	8
00:009164 20D000              +566 	sa	mo:along, b
00:009165 B60168              +567 	j	mib_store_new
  :                            568 
  :                            569 mib_store_new_x1		. strings must have a bucket size
00:009166 60F00C              +570 	la	orules		.
00:009167 C601CA              +571 	jza	mib_wgenerr	.
  :                            572 
  :                            573 				. but they can store zero
  :                            574 				. length string in a bucket
  :                            575 				. of nonzero size, whereas
  :                            576 				. numbers always squeeze
  :                            577 				. a byte out
  :                            578 
  :                            579 mib_store_new
00:009168 680008              +580 	lb	8		. managed object header
(+01)0f
00:009169 100437              +581 	sx	mib_floor
00:00916A B601D2              +582 	j	mib_storeb
  :                            583 
  :                            584 mib_modify
00:00916B 60F008              +585 	la	oflags
00:00916C 90A005              +586 	or	mo:flags
00:00916D A50002              +587 	and, xi	MIB_WRITE_ALLOWED
00:00916E C601CE              +588 	jza	mib_wreadonly
  :                            589 
00:00916F 60F009              +590 	la	oclass
00:009170 680004              +591 	anu	mo:type
00:009171 D8A003              +591 
00:009172 DE01CC              +592 	jnzb	mib_wbadvalue
  :                            593 
00:009173 680004              +594 	anu, xi	MIB_FUNCTION
00:009174 DD0064              +594 
00:009175 CE01CE              +595 	jzb	mib_wreadonly
  :                            596 
00:009176 680004              +597 	anu, xi	SNMP_NETWORKADDRESS
00:009177 DD0040              +597 
00:009178 CE01BC              +598 	jzb	mib_checkwlen
00:009179 680004              +599 	anu, xi	SNMP_STRING
00:00917A DD0004              +599 
00:00917B CE01BC              +600 	jzb	mib_checkwlen
00:00917C 680004              +601 	anu, xi	SNMP_OID
00:00917D DD0006              +601 
00:00917E CE01BC              +602 	jzb	mib_checkwlen
  :                            603 
00:00917F 300007              +604 	z	7		. we say, unsigned
00:009180 680004              +605 	anu, xi	SNMP_GAUGE
00:009181 DD0042              +605 
00:009182 CE018D              +606 	jzb	mib_wnumber
00:009183 680004              +607 	anu, xi	SNMP_COUNTER
00:009184 DD0041              +607 
00:009185 CE018D              +608 	jzb	mib_wnumber
00:009186 680004              +609 	anu, xi	SNMP_TIMETICKS
00:009187 DD0043              +609 
00:009188 CE018D              +610 	jzb	mib_wnumber
00:009189 680004              +611 	anu, xi	SNMP_INT
00:00918A DD0002              +611 
00:00918B DE01CC              +612 	jnzb	mib_wbadvalue	. well what else is it then?
00:00918C 0F0007              +613 	n	7		. _INT is the only signed one
  :                            614 
  :                            615 mib_wnumber
00:00918D 60A004              +616 	la	mo:bytes	. start measuring
  :                            617 
00:00918E 680004              +618 	anu, xi	4
00:00918F DD0004              +618 
00:009190 280006              +619 	sb	6		. target > 24 bits or not
  :                            620 
00:009191 680004              +621 	anu	obytes		. more data than the target number?
00:009192 D8F00A              +621 
00:009193 5E01C8              +622 	jnc	mib_wtoobig
  :                            623 
00:009194 2E0003              +624 	sbl	3		. calculate the shift count
00:009195 40A006              +625 	lr	mo:ranges
00:009196 5CA007              +626 	ly, i	mo:range
  :                            627 
00:009197 780006              +628 	tp	6
00:009198 B601A8              +629 	j	mib_store1
  :                            630 
00:009199 280006              +631 	sb	6
00:00919A 68F00B              +632 	lb	odata		. get the input at last
00:00919B CFD000              +633 	dl	0, b
  :                            634 
00:00919C 780007              +635 	tp	7
00:00919D B601A3              +636 	j	mib_long_signed	. signed
  :                            637 
00:00919E 168006              +638 	dsr	*6		. unsigned
  :                            639 
00:00919F 700000              +640 	tz	r		. ranges allowed
00:0091A0 3E022D              +641 	lcal	mib_checkunsigned_l
00:0091A1 B601B9              +642 	j	mib_store_l
00:0091A2 B601CC              +643 	j	mib_wbadvalue
  :                            644 
  :                            645 mib_long_signed
00:0091A3 968006              +646 	dsa	*6		. signed
  :                            647 
00:0091A4 700000              +648 	tz	r		. ranges allowed
00:0091A5 3E0238              +649 	lcal	mib_checksigned_l
00:0091A6 B601B9              +650 	j	mib_store_l
00:0091A7 B601CC              +651 	j	mib_wbadvalue
  :                            652 
  :                            653 mib_store1
00:0091A8 60F00B              +654 	la	odata
00:0091A9 60C000              +655 	la	0, a
  :                            656 	
00:0091AA 780007              +657 	tp	7		. signed?
00:0091AB B601B1              +658 	j	mib_single_signed
  :                            659 
00:0091AC 06D000              +660 	sar	0, b		. unsigned
  :                            661 
00:0091AD 700000              +662 	tz	r		. ranges allowed
00:0091AE 3E0219              +663 	lcal	mib_checkunsigned_s
00:0091AF B601B6              +664 	j	mib_store_s
00:0091B0 B601CC              +665 	j	mib_wbadvalue
  :                            666 
  :                            667 mib_single_signed
00:0091B1 86D000              +668 	saa	0, b
  :                            669 
00:0091B2 700000              +670 	tz	r		. ranges allowed
00:0091B3 3E0223              +671 	lcal	mib_checksigned_s
00:0091B4 B601B6              +672 	j	mib_store_s
00:0091B5 B601CC              +673 	j	mib_wbadvalue
  :                            674 
  :                            675 mib_store_s
00:0091B6 68A001              +676 	lb	mo:data
00:0091B7 20D000              +677 	sa	0, b
00:0091B8 B601D1              +678 	j	mib_store
  :                            679 
  :                            680 mib_store_l
00:0091B9 58A001              +681 	ly	mo:data
00:0091BA C7B000              +682 	ds	0, y
00:0091BB B601D1              +683 	j	mib_store
  :                            684 
  :                            685 mib_checkwlen
00:0091BC 60A006              +686 	la	mo:bucket
00:0091BD D00000              +687 	ana	r
00:0091BE 5E01C8              +688 	jnc	mib_wtoobig
00:0091BF 58F00B              +689 	ly	odata
00:0091C0 60A001              +690 	la	mo:data
00:0091C1 B601C6              +691 	j	mib_warray?
  :                            692 
  :                            693 mib_warray!
00:0091C2 68B000              +694 	lb	0, y
00:0091C3 8D0001              +695 	ay, xi	1
00:0091C4 28C000              +696 	sb	0, a
00:0091C5 64C001              +697 	la, i	1, a
  :                            698 mib_warray?
00:0091C6 1E01C2              +699 	jdr	mib_warray!
  :                            700 	
00:0091C7 B601D1              +701 	j	mib_store
  :                            702 
  :                            703 mib_wtoobig
00:0091C8 65FFFF              +704 	la, xi	-SNMP_TOOBIG
00:0091C9 B601CF              +705 	j	mib_nowrite
  :                            706 
  :                            707 mib_wgenerr
00:0091CA 65FFFB              +708 	la, xi	-SNMP_GENERR
00:0091CB B601CF              +709 	j	mib_nowrite
  :                            710 
  :                            711 mib_wbadvalue
00:0091CC 65FFFD              +712 	la, xi	-SNMP_BADVALUE
00:0091CD B601CF              +713 	j	mib_nowrite
  :                            714 
  :                            715 mib_wreadonly
00:0091CE 65FFFC              +716 	la, xi	-SNMP_READONLY
  :                            717 mib_nowrite
00:0091CF 6D0000              +718 	lb, xi	0		. result no pointer in b
00:0091D0 B601D3              +719 	j	mib_writex	. problem -index in a
  :                            720 
  :                            721 mib_store
00:0091D1 680002              +722 	lb	x
  :                            723 mib_storeb
00:0091D2 650000              +724 	la, xi	0
  :                            725 mib_writex
00:0091D3 54F004              +726 	lx, i	$$frame, sp
00:0091D4 10000F              +727 	sx	sp
00:0091D5 3D0000              +728 	fret	0
  :                            729 
  :                            730 mib_initial
00:0091D6 5D05D4              +731 	ly, xi	sysDescr
  :                            732 
  :                            733 mib_initial_next
00:0091D7 60B000              +734 	la	om:words
00:0091D8 C601DE              +735 	jza	mib_initial_x
00:0091D9 FF09D1              +736 	call	(mib_line)
00:0091DA 60B000              +737 	la	om:words
00:0091DB A500FF              +738 	and, xi	255
00:0091DC 880004              +739 	ay	a
00:0091DD B601D7              +740 	j	mib_initial_next
  :                            741 mib_initial_x
00:0091DE 3D0000              +742 	fret	0
  :                            743 
                                mib_wline 	$head_far	scalars(invoi,	int	;
                                					ityp,	int	;
                                					safety,	4	;
00:0091DF FD0000              +747 					ilist,	24)
00:0091E0 FD0000              +747 
00:0091E1 8F09CD              +747 
00:0091E2 8F09CD              +747 
00:0091E3 8FF000              +747 
00:0091E4 8FF000              +747 
00:0091E5 8FF000              +747 
00:0091E6 8FF000              +747 
00:0091E7 8FF000              +747 
  :                            748 						
00:0091E8 50B001              +749 	lx	om:o			. pointer to oid string
00:0091E9 18F01D              +750 	sy	invoi
  :                            751 
00:0091EA 160010              +752 	dsr	16
00:0091EB 0E0010              +753 	sbr	16
00:0091EC 20F01C              +754 	sa	ityp
  :                            755 
00:0091ED 5CF000              +756 	ly, i	ilist
00:0091EE 650006              +757 	la, xi	SNMP_OID
00:0091EF C7B000              +758 	ds	0, y
  :                            759 
00:0091F0 CCB002              +760 	ab	2, y, i			. high index of store y ->
00:0091F1 400005              +761 	lr	b
  :                            762 
  :                            763 load_oid?
00:0091F2 FE01F5              +764 	jyge	oid_loaded		. until y >= r
00:0091F3 3E0204              +765 	lcal	mib_unpack		. decode oid string
00:0091F4 B601F2              +766 	j	load_oid?		. into internal stack
  :                            767 
  :                            768 oid_loaded
  :                            769 
00:0091F5 58F01D              +770 	ly	invoi
  :                            771 
                                	c	(mib_set)	ilist,,i	om:flags	;
                                				ityp		om:l		;
                                				om:data		om:ranges	;
00:0091F6 FCB006              +775 				om:range,,i
00:0091F7 F8B005              +775 
00:0091F8 F8B003              +775 
00:0091F9 F8B002              +775 
00:0091FA F8F020              +775 
00:0091FB F8B004              +775 
00:0091FC FCF006              +775 
00:0091FD FCF007              +775 
00:0091FE FF09D2              +775 
00:0091FF 38000F              +775 
  :                            776 
  :                            777 
00:009200 58F01D              +778 	ly	invoi	
00:009201 54F01E              +779 	lx, i	$$frame, sp
00:009202 10000F              +780 	sx	sp
00:009203 3D0000              +781 	fret	0
  :                            782 
  :                            783 mib_unpack
00:009204 4D0080              +784 	lk, xi	128
00:009205 68A000              +785 	lb	0, x
00:009206 850001              +786 	ax, xi	1
  :                            787 
00:009207 3E020B              +788 	lcal	mib_decode
00:009208 3E020B              +789 	lcal	mib_decode
00:009209 3E020B              +790 	lcal	mib_decode
00:00920A 350000              +791 	lret	0
  :                            792 
  :                            793 mib_decode
00:00920B 650000              +794 	la, xi	0
00:00920C 360008              +795 	dsl	8
00:00920D AF0001              +796 	mta	k
00:00920E B60216              +797 	j	mib_decode_simple
00:00920F A5001F              +798 	and, xi	31
00:009210 C60215              +799 	jza	mib_decoded
  :                            800 mib_space
00:009211 30B002              +801 	z	2, y
00:009212 8D0001              +802 	ay, xi	1
00:009213 C5FFFF              +803 	aa, xi	-1
00:009214 D60211              +804 	jnza	mib_space
  :                            805 mib_decoded
00:009215 350000              +806 	lret	0
  :                            807 mib_decode_simple
00:009216 20B002              +808 	sa	2, y
00:009217 8D0001              +809 	ay, xi	1
00:009218 350000              +810 	lret	0
  :                            811 
  :                            812 mib_checkunsigned_s
00:009219 B60221              +813 	j	mib_checkunsigned_s?
  :                            814 mib_checkunsigned_s!
00:00921A 680004              +815 	anu	0, y
00:00921B D8B000              +815 
00:00921C 5E0220              +816 	jnc	mib_checkunsigned_snext
00:00921D 68B001              +817 	lb	1, y
00:00921E D80004              +818 	anb	a
00:00921F 7E0244              +819 	jc	mib_check_good
  :                            820 
  :                            821 mib_checkunsigned_snext
00:009220 8D0002              +822 	ay, xi	2
  :                            823 mib_checkunsigned_s?
00:009221 1E021A              +824 	jdr	mib_checkunsigned_s!
00:009222 350001              +825 	lret	1	. counter_intuitively the bad result
  :                            826 
  :                            827 mib_checksigned_s
00:009223 B6022B              +828 	j	mib_checksigned_s?
  :                            829 mib_checksigned_s!
00:009224 680004              +830 	anu	0, y
00:009225 D8B000              +830 
00:009226 EE022A              +831 	jnb	mib_checksigned_snext
00:009227 68B001              +832 	lb	1, y
00:009228 D80004              +833 	anb	a
00:009229 AE0244              +834 	jpb	mib_check_good
  :                            835 
  :                            836 mib_checksigned_snext
00:00922A 8D0002              +837 	ay, xi	2
  :                            838 mib_checksigned_s?
00:00922B 1E0224              +839 	jdr	mib_checksigned_s!
00:00922C 350001              +840 	lret	1
  :                            841 
  :                            842 mib_checkunsigned_l
00:00922D C70006              +843 	ds	6
00:00922E B60236              +844 	j	mib_checkunsigned_l?
  :                            845 mib_checkunsigned_l!
00:00922F CF0006              +846 	dl	6
00:009230 DFB000              +847 	dan	0, y
00:009231 5E0235              +848 	jnc	mib_checkunsigned_lnext
00:009232 CFB002              +849 	dl	2, y
00:009233 DF0006              +850 	dan	6
00:009234 7E0243              +851 	jc	mib_check_double_good
  :                            852 mib_checkunsigned_lnext
00:009235 8D0004              +853 	ay, xi	4
  :                            854 mib_checkunsigned_l?
00:009236 1E022F              +855 	jdr	mib_checkunsigned_l!
00:009237 350001              +856 	lret	1
  :                            857 
  :                            858 
  :                            859 mib_checksigned_l
00:009238 C70006              +860 	ds	6
00:009239 B60241              +861 	j	mib_checksigned_l?
  :                            862 mib_checksigned_l!
00:00923A CF0006              +863 	dl	6
00:00923B DFB000              +864 	dan	0, y
00:00923C E60240              +865 	jna	mib_checksigned_lnext
00:00923D CFB002              +866 	dl	2, y
00:00923E DF0006              +867 	dan	6
00:00923F A60243              +868 	jpa	mib_check_double_good
  :                            869 mib_checksigned_lnext
00:009240 8D0004              +870 	ay, xi	4
  :                            871 mib_checksigned_l?
00:009241 1E023A              +872 	jdr	mib_checksigned_l!
00:009242 350001              +873 	lret	1
  :                            874 
  :                            875 mib_check_double_good
00:009243 CF0006              +876 	dl	6
  :                            877 mib_check_good
00:009244 350000              +878 	lret	0
  :                            879 
  :                            250: 	$include mib2tick
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(1)
                                mib2ticko mobjet 	0	3	SNMP_TIMETICKS	6	;
01:00043F 000000              +42 			1	0	0		ticko
(+01)18
01:000440 000446              +42 
01:000441 000003              +42 
01:000442 000043              +42 
01:000443 000006              +42 
01:000444 000001              +42 
01:000445 000001              +42 
  :                            43 
01:000446 000000000000        +44 ticko	+	0:d
  :                            45 
  :                            46 $(0)
                                mib2tick	$head_far	 params(tseq,	int	;
                                					tflags,	int	;
                                					troutine, int	;
  :                            50 					tnext,	int)
  :                            51 
  :                            52 mib2tick_deliver
00:009245 CF0096              +53 	dl	DAYCLOCK$U
00:009246 F5000A              +54 	d, xi	10		. msecs to 100ths
00:009247 200005              +55 	sa	b
00:009248 600006              +56 	la	6
(+01)0f
00:009249 C70446              +57 	ds	ticko
00:00924A 650000              +58 	la, xi	0
(+01)10
00:00924B 6D043F              +59 	lb, xi	mib2ticko
00:00924C 3D0000              +60 	fret	0
  :                            251: 	$include udpagent
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 $(1)
  :                            41 
                                mib_uneto	mobjet		0	1	SNMP_NETWORKADDRESS	4	;
01:000448 000000              +43 				1	0	0		mib_uneta
(+01)18
01:000449 000456              +43 
01:00044A 000001              +43 
01:00044B 000040              +43 
01:00044C 000004              +43 
01:00044D 000001              +43 
01:00044E 000001              +43 
  :                            44 
                                mib_uporto	mobjet	mib_uneto	2	SNMP_INT		2	;
(+01)18
01:00044F 000448              +46 				1	0	0		mib_uneta+1
(+01)18
01:000450 000457              +46 
01:000451 000002              +46 
01:000452 000002              +46 
01:000453 000002              +46 
01:000454 000001              +46 
01:000455 000001              +46 
  :                            47 
01:000456 0000000000A1        +48 mib_uneta	$netp		0,161
  :                            49 
  :                            50 
  :                            51 $(0)
  :                            52 
                                udpagent_net	$head_far	 params(nuseq,		int	;
                                					nuflags,	int	;
  :                            55 					nuroutine,	int)
  :                            56 
00:00924D 60F005              +57 	la	nuroutine
00:00924E D500A0              +58 	ana, xi	SNMP_GETREQ
00:00924F 68F003              +59 	lb	nuseq
00:009250 D60255              +60 	jnza	udpagent_netagain
00:009251 3E0265              +61 	lcal	udpagent_direct
00:009252 CE025D              +62 	jzb	udpagent_nohit
(+01)0f
00:009253 C70456              +63 	ds	mib_uneta
00:009254 B6025B              +64 	j	udpagent_netresult
  :                            65 
  :                            66 udpagent_netagain
00:009255 3E0274              +67 	lcal	udpagent_search_forward
00:009256 CE025D              +68 	jzb	udpagent_nohit
  :                            69 
(+01)0f
00:009257 C70456              +70 	ds	mib_uneta
00:009258 A809D3              +71 	andB	(65535)
00:009259 60F003              +72 	la	nuseq
00:00925A 28C009              +73 	sb	9, a
  :                            74 
  :                            75 udpagent_netresult
(+01)10
00:00925B 6D0448              +76 	lb, xi	mib_uneto
00:00925C 3D0000              +77 	fret	0
  :                            78 
  :                            79 udpagent_nohit
00:00925D 3D0000              +80 	fret	0
  :                            81 
                                udpagent_port	$head_far	 params(useq,		int	;
                                					uflags, 	int	;
  :                            84 					uroutine	int)
  :                            85 
00:00925E 68F003              +86 	lb	useq
00:00925F 3E0265              +87 	lcal	udpagent_direct
00:009260 CE0264              +88 	jzb	udpagent_nohitp
  :                            89 	
00:009261 A809D3              +90 	andB	(65535)
(+01)0f
00:009262 C70456              +91 	ds	mib_uneta
(+01)10
00:009263 6D044F              +92 	lb, xi	mib_uporto
  :                            93 
  :                            94 udpagent_nohitp
00:009264 3D0000              +95 	fret	0
  :                            96 
  :                            97 
  :                            98 udpagent_direct
00:009265 60D009              +99 	la	9, b
00:009266 160009              +100 	dsr	9
00:009267 A5007F              +101 	and, xi	127
00:009268 C52080              +102 	aa, xi	usockb(1)
00:009269 60C000              +103 	la	0, a
00:00926A C60271              +104 	jza	udpagent_nodirect
00:00926B 34002F              +105 	sabr	BSOCKET
00:00926C 0E000F              +106 	sbr	15
00:00926D 9D5E00              +107 	orB, xi	BSOCKET*/9
00:00926E 2E0003              +108 	sbl	3
00:00926F CFD000              +109 	dl	0, b
00:009270 350000              +110 	lret	0
  :                            111 
  :                            112 udpagent_nodirect
00:009271 650002              +113 	la, xi	SNMP_NOSUCHNAME
00:009272 6D0000              +114 	lb, xi	0
00:009273 350000              +115 	lret	0
  :                            116 
  :                            117 
  :                            118 udpagent_search_forward
00:009274 60D001              +119 	la	1, b
  :                            120 
00:009275 C5FFF8              +121 	aa, xi	-8
00:009276 5E0283              +122 	jnc	udpagent_start_tree
  :                            123 
00:009277 C5FFFF              +124 	aa, xi	-1
00:009278 5E027C              +125 	jnc	udpagent_search_equal
  :                            126 
00:009279 60D009              +127 	la	9, b
00:00927A C50001              +128 	aa, xi	1
00:00927B B6027D              +129 	j	udpagent_locate
  :                            130 
  :                            131 udpagent_search_equal
00:00927C 60D009              +132 	la	9, b
  :                            133 
  :                            134 udpagent_locate
00:00927D 160009              +135 	dsr	9
00:00927E 0E000F              +136 	sbr	15
00:00927F 9D5E00              +137 	orB, xi	BSOCKET*/9
00:009280 2E0003              +138 	sbl	3
00:009281 C52080              +139 	aa, xi	usockb(1)
00:009282 B60285              +140 	j	udpagent_start_search
  :                            141 
  :                            142 udpagent_start_tree
00:009283 652080              +143 	la, xi  usockb(1)
00:009284 6809D4              +144 	lb      (BSOCKET*/12)
  :                            145 
  :                            146 udpagent_start_search
00:009285 F80002              +147 	push	x
00:009286 500005              +148 	lx	b
00:009287 4009D5              +149 	lr	(BSOCKET+1*/12))
00:009288 F80004              +150 	push	a
  :                            151 
  :                            152 udpagent_search_on
00:009289 65DF00              +153 	la, xi	-usockb(128)-1
00:00928A C0F000              +154 	aa	0, sp
00:00928B 7E0298              +155 	jc	udpagent_nofind
00:00928C 60F000              +156 	la	0, sp
00:00928D 60C000              +157 	la	0, a
00:00928E C60295              +158 	jza	udpagent_next_bank
00:00928F 34002F              +159 	sabr	BSOCKET
  :                            160 udpagent_next_port
00:009290 CFA000              +161 	dl	0, x
00:009291 DE029A              +162 	jnzb	udpagent_eosearch
00:009292 850008              +163 	ax, xi	8
00:009293 F60295              +164 	jxge	udpagent_next_bank
00:009294 B60290              +165 	j	udpagent_next_port
  :                            166 udpagent_next_bank
00:009295 17F000              +167 	inc	0, sp 
00:009296 5009D4              +168 	lx	(BSOCKET*/12)
00:009297 B60289              +169 	j	udpagent_search_on
  :                            170 
  :                            171 udpagent_nofind
00:009298 6D0000              +172 	lb, xi	0
00:009299 650002              +173 	la, xi	SNMP_NOSUCHNAME
  :                            174 udpagent_eosearch
00:00929A 380002              +175 	pop	x
00:00929B 380002              +176 	pop	x
00:00929C 350000              +177 	lret	0
  :                            252: 	$include ifagent
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 IFNUMBER_I* $set	ifNumber:i
  :                            41 
  :                            42 $(1)
  :                            43 
01:000458 000000              +44 ifagent_i24	mobjet	0	0	SNMP_INT	3	1 
01:000459 000000              +44 
01:00045A 000000              +44 
01:00045B 000002              +44 
01:00045C 000003              +44 
01:00045D 000001              +44 
01:00045E 000000              +44 
01:00045F 000000              +45 ifagent_string	mobjet	0	2	SNMP_STRING	18	1
01:000460 000000              +45 
01:000461 000002              +45 
01:000462 000004              +45 
01:000463 000012              +45 
01:000464 000001              +45 
01:000465 000000              +45 
01:000466 000000              +46 ifagent_string48 mobjet	0	6	SNMP_STRING	6	1
01:000467 000000              +46 
01:000468 000006              +46 
01:000469 000004              +46 
01:00046A 000006              +46 
01:00046B 000001              +46 
01:00046C 000000              +46 
01:00046D 000000              +47 ifagent_t48	mobjet	0	9	SNMP_TIMETICKS	6	1
01:00046E 000000              +47 
01:00046F 000009              +47 
01:000470 000043              +47 
01:000471 000006              +47 
01:000472 000001              +47 
01:000473 000000              +47 
01:000474 000000              +48 ifagent_g48	mobjet	0	5	SNMP_GAUGE	5	1
01:000475 000000              +48 
01:000476 000005              +48 
01:000477 000042              +48 
01:000478 000005              +48 
01:000479 000001              +48 
01:00047A 000000              +48 
01:00047B 000000              +49 ifagent_c48	mobjet	0	0	SNMP_COUNTER	6	1
01:00047C 000000              +49 
01:00047D 000000              +49 
01:00047E 000041              +49 
01:00047F 000006              +49 
01:000480 000001              +49 
01:000481 000000              +49 
                                ifagent_onone	mobjet	0	22	SNMP_OID	2	1	;
01:000482 000000              +51 			0	0	ifagent_onone
(+01)18
01:000483 000482              +51 
01:000484 000016              +51 
01:000485 000006              +51 
01:000486 000002              +51 
01:000487 000001              +51 
01:000488 000001              +51 
01:000489 000000000000        +52 ifagent_p48	0L
  :                            53 
  :                            54 $(0)
  :                            55 
                                ifagent_idx	$head_far	 params(ifidxseq,	int	;
                                					ifidxflags,	int	;
  :                            58 					ifidxroutine,	int)
  :                            59 
00:00929D 68F003              +60 	lb	ifidxseq
00:00929E 60F005              +61 	la	ifidxroutine
00:00929F D500A0              +62 	ana, xi	SNMP_GETREQ
  :                            63 
00:0092A0 C602A3              +64 	jza	ifagent_this_row
00:0092A1 3E037B              +65 	lcal	ifagent_find_next_if
  :                            66 
00:0092A2 B602A4              +67 	j	ifagent_row?
  :                            68 
  :                            69 ifagent_this_row
00:0092A3 3E0385              +70 	lcal	ifagent_find_i_f
  :                            71 ifagent_row?
00:0092A4 CE02AD              +72 	jzb	ifagent_noidx
  :                            73 
00:0092A5 64D000              +74 	la, i	this_if:id, b
(+01)0f
00:0092A6 200459              +75 	sa	ifagent_i24:data
  :                            76 
00:0092A7 60C000              +77 	la	0, a
  :                            78 
00:0092A8 68F003              +79 	lb	ifidxseq
00:0092A9 20D009              +80 	sa	9, b
  :                            81 
  :                            82 
00:0092AA 650001              +83 	la, xi	1
(+01)0f
00:0092AB 20045A              +84 	sa	ifagent_i24:seq
  :                            85 
  :                            86 .	la, xi	9
  :                            87 .	sa	1, b
  :                            88 
(+01)10
00:0092AC 6D0458              +89 	lb, xi	ifagent_i24
  :                            90 
  :                            91 ifagent_noidx
00:0092AD 3D0000              +92 	fret	0
  :                            93 
00:0092AE 4D00FF              +94 stril	lk, xi	+(1*/$byte)-1
00:0092AF 6D0000              +95 	lb, xi	0
00:0092B0 200006              +96 	sa	6
00:0092B1 608006              +97 strilw*	la	*6
00:0092B2 170006              +98 	inc	6
00:0092B3 CD0003              +99 	ab, xi	$word/$byte
00:0092B4 AF09D6              +100 	mta	(0)
00:0092B5 B602B1              +101 	j	strilw
  :                            102 
00:0092B6 950001              +103 	or, xi	1
  :                            104 
00:0092B7 CDFFFF              +105 strail	ab, xi	-1
00:0092B8 460008              +106 	rar	$byte
00:0092B9 AF09D6              +107 	mta	(0)
00:0092BA 350000              +108 	lret	0
00:0092BB B602B7              +109 	j	strail	
  :                            110 
  :                            111 
                                ifagent_descr	$head_far	 params(ifdescseq,	int	;
                                					ifdescflags,	int	;
  :                            114 					ifdescroutine,	int)
  :                            115 
00:0092BC 68F003              +116 	lb	ifdescseq
00:0092BD 3E0385              +117 	lcal	ifagent_find_i_f
00:0092BE CE02C6              +118 	jzb	ifagent_nodescr
  :                            119 
00:0092BF 64D026              +120 	la, i	this_if:description, b
(+01)0f
00:0092C0 200460              +121 	sa	ifagent_string:data
  :                            122 
00:0092C1 F8D025              +123 	push	this_if:description_bytes, b
(+01)0f
00:0092C2 380463              +124 	pop	ifagent_string:bytes
  :                            125 
  :                            126 .	lb	ifdescseq
00:0092C3 650002              +127 	la, xi	2
  :                            128 .	sa	10, b
(+01)0f
00:0092C4 200461              +129 	sa	ifagent_string:seq
  :                            130 
(+01)10
00:0092C5 6D045F              +131 	lb, xi	ifagent_string
  :                            132 ifagent_nodescr
00:0092C6 3D0000              +133 	fret	0
  :                            134 
  :                            135 
                                ifagent_type	$head_far	 params(iftypseq,	int	;
                                					iftypflags,	int	;
  :                            138 					iftyproutine,	int)
  :                            139 
00:0092C7 68F003              +140 	lb	iftypseq
00:0092C8 3E0385              +141 	lcal	ifagent_find_i_f
00:0092C9 CE02CF              +142 	jzb	ifagent_notype
  :                            143 
00:0092CA 64D003              +144 	la, i	this_if:type, b
(+01)0f
00:0092CB 200459              +145 	sa	ifagent_i24:data
  :                            146 
  :                            147 .	lb	iftypseq
00:0092CC 650003              +148 	la, xi	3
  :                            149 .	sa	10, b
(+01)0f
00:0092CD 20045A              +150 	sa	ifagent_i24:seq
  :                            151 
(+01)10
00:0092CE 6D0458              +152 	lb, xi	ifagent_i24
  :                            153 ifagent_notype
00:0092CF 3D0000              +154 	fret	0
  :                            155 
  :                            156 
                                ifagent_MTU	$head_far	 params(ifmtuseq,	int	;
                                					ifmtuflags,	int	;
  :                            159 					ifmturoutine,	int)
  :                            160 
00:0092D0 68F003              +161 	lb	ifmtuseq
00:0092D1 3E0385              +162 	lcal	ifagent_find_i_f
00:0092D2 CE02D8              +163 	jzb	ifagent_noMTU
  :                            164 
00:0092D3 64D004              +165 	la, i	this_if:mtu, b
(+01)0f
00:0092D4 200459              +166 	sa	ifagent_i24:data
  :                            167 
  :                            168 .	lb	ifmtuseq
00:0092D5 650004              +169 	la, xi	4
  :                            170 .	sa	10, b
(+01)0f
00:0092D6 20045A              +171 	sa	ifagent_i24:seq
  :                            172 
(+01)10
00:0092D7 6D0458              +173 	lb, xi	ifagent_i24
  :                            174 ifagent_noMTU
00:0092D8 3D0000              +175 	fret	0
  :                            176 
  :                            177 
                                ifagent_speed	$head_far	 params(ifrateseq,	int	;
                                					ifrateflags,	int	;
  :                            180 					ifrateroutine,	int)
  :                            181 
00:0092D9 68F003              +182 	lb	ifrateseq
00:0092DA 3E0385              +183 	lcal	ifagent_find_i_f
00:0092DB CE02DF              +184 	jzb	ifagent_nospeed
  :                            185 
00:0092DC 64D006              +186 	la,i	this_if:bitrate, b
(+01)0f
00:0092DD 200475              +187 	sa	ifagent_g48:data
  :                            188 
  :                            189 .	la, xi	5
  :                            190 .	lb	ifrateseq
  :                            191 .	sa	10, b
  :                            192 
(+01)10
00:0092DE 6D0474              +193 	lb, xi	ifagent_g48
  :                            194 
  :                            195 ifagent_nospeed
00:0092DF 3D0000              +196 	fret	0
  :                            197 
  :                            198 
                                ifagent_phy	$head_far	 params(ifphyseq,	int	;
                                					ifphyflags,	int	;
                                					ifphyroutine,	int)	;
00:0092E0 F80002              +202 				scalars(ifphycaller_x,	int, x)
  :                            203 
00:0092E1 68F004              +204 	lb	ifphyseq
00:0092E2 3E0385              +205 	lcal	ifagent_find_i_f
00:0092E3 CE02EE              +206 	jzb	ifagent_nophy
  :                            207 
00:0092E4 500005              +208 	lx	b
00:0092E5 CFA008              +209 	dl	this_if:physa		. BER editing wants this
00:0092E6 2E0008              +210 	sbl	8			. in internal format
00:0092E7 360008              +211 	dsl	8			. and it's in network format
00:0092E8 4809D3              +212 	lk	(00FFFF)
00:0092E9 BFA00A              +213 	mlb	this_if:physa+2		. BER turns it back into network 
(+01)0f
00:0092EA C70489              +214 	ds	ifagent_p48		. format, but packing it here is
(+01)10
00:0092EB 650489              +215 	la	ifagent_p48,,xi		. less extra code than adding an
  :                            216 					. extra data type to BER
(+01)0f
00:0092EC 200467              +217 	sa	ifagent_string48:data
  :                            218 
  :                            219 .	la, xi	6
  :                            220 .	lb	ifphyseq
  :                            221 .	sa	10, b
  :                            222 
(+01)10
00:0092ED 6D0466              +223 	lb, xi	ifagent_string48
  :                            224 
  :                            225 ifagent_nophy
00:0092EE 380002              +226 	pop	x
00:0092EF 3D0000              +227 	fret	0
  :                            228 
  :                            229 
                                ifagent_admins	$head_far	 params(ifastaseq,	int	;
                                					ifastaflags,	int	;
  :                            232 					ifastaroutine,	int)
00:0092F0 68F003              +233 	lb	ifastaseq
00:0092F1 3E0385              +234 	lcal	ifagent_find_i_f
00:0092F2 CE02F8              +235 	jzb	ifagent_noadmins
  :                            236 
00:0092F3 64D005              +237 	la, i	this_if:state, b
(+01)0f
00:0092F4 200459              +238 	sa	ifagent_i24:data
  :                            239 
  :                            240 .	lb	ifastaseq
00:0092F5 650007              +241 	la, xi	7
  :                            242 .	sa	10, b
(+01)0f
00:0092F6 20045A              +243 	sa	ifagent_i24:seq
  :                            244 
(+01)10
00:0092F7 6D0458              +245 	lb, xi	ifagent_i24
  :                            246 
  :                            247 ifagent_noadmins
00:0092F8 3D0000              +248 	fret	0
  :                            249 
  :                            250 
                                ifagent_osta	$head_far	 params(ifostaseq,	int	;
                                					ifostaflags,	int	;
  :                            253 					ifostaroutine,	int)
  :                            254 
00:0092F9 68F003              +255 	lb	ifostaseq
00:0092FA 3E0385              +256 	lcal	ifagent_find_i_f
00:0092FB CE0301              +257 	jzb	ifagent_noosta
  :                            258 
00:0092FC 64D005              +259 	la, i	this_if:state, b
(+01)0f
00:0092FD 200459              +260 	sa	ifagent_i24:data
  :                            261 
00:0092FE 650008              +262 	la, xi	8
  :                            263 .	lb	ifostaseq
  :                            264 .	sa	10, b
(+01)0f
00:0092FF 20045A              +265 	sa	ifagent_i24:seq
  :                            266 
(+01)10
00:009300 6D0458              +267 	lb, xi	ifagent_i24
  :                            268 
  :                            269 ifagent_noosta
00:009301 3D0000              +270 	fret	0
  :                            271 
  :                            272 
                                ifagent_lastc	$head_far	 params(iflcseq,	int	;
                                					iflcflags,	int	;
  :                            275 					iflcroutine,	int)
00:009302 68F003              +276 	lb	iflcseq
00:009303 3E0385              +277 	lcal	ifagent_find_i_f
00:009304 CE0309              +278 	jzb	ifagent_nolastc
  :                            279 
00:009305 64D00A              +280 	la, i	this_if:lastchange, b
(+01)0f
00:009306 20046E              +281 	sa	ifagent_t48:data
  :                            282 
  :                            283 .	lb	iflcseq
00:009307 650009              +284 	la, xi	9
  :                            285 .	sa	10, b
(+01)10
00:009308 6D046D              +286 	lb, xi	ifagent_t48
  :                            287 
  :                            288 ifagent_nolastc
00:009309 3D0000              +289 	fret	0
  :                            290 
  :                            291 
                                ifagent_ibytes	$head_far	 params(ifibytseq,	int	;
                                					ifibytflags,	int	;
  :                            294 					ifibytroutine,	int)
  :                            295 
00:00930A 68F003              +296 	lb	ifibytseq
00:00930B 3E0385              +297 	lcal	ifagent_find_i_f
00:00930C CE0312              +298 	jzb	ifagent_noibytes
  :                            299 
00:00930D 64D00C              +300 	la, i	this_if:inoctets, b
(+01)0f
00:00930E 20047C              +301 	sa	ifagent_c48:data
  :                            302 
00:00930F 65000A              +303 	la, xi	10
  :                            304 .	lb	ifibytseq
  :                            305 .	sa	10, b
(+01)0f
00:009310 20047D              +306 	sa	ifagent_c48:seq
  :                            307 
(+01)10
00:009311 6D047B              +308 	lb, xi	ifagent_c48
  :                            309 
  :                            310 ifagent_noibytes
00:009312 3D0000              +311 	fret	0
  :                            312 
  :                            313 
                                ifagent_iucast	$head_far	 params(ifiucaseq,	int	;
                                					ifiucaflags,	int	;
  :                            316 					ifiucaroutine,	int)
  :                            317 
  :                            318 
00:009313 68F003              +319 	lb	ifiucaseq
00:009314 3E0385              +320 	lcal	ifagent_find_i_f
00:009315 CE031B              +321 	jzb	ifagent_noiucast
  :                            322 
00:009316 64D010              +323 	la, i	this_if:inpackets, b
(+01)0f
00:009317 20047C              +324 	sa	ifagent_c48:data
  :                            325 
00:009318 65000B              +326 	la, xi	11
  :                            327 .	lb	ifiucaseq
  :                            328 .	sa	10, b
(+01)0f
00:009319 20047D              +329 	sa	ifagent_c48:seq
  :                            330 
(+01)10
00:00931A 6D047B              +331 	lb, xi	ifagent_c48
  :                            332 
  :                            333 ifagent_noiucast
00:00931B 3D0000              +334 	fret	0
  :                            335 
  :                            336 
                                ifagent_imcast	$head_far	 params(ifimcaseq,	int	;
                                					ifimcaflags,	int	;
  :                            339 					ifimcaroutine,	int)
  :                            340 
  :                            341 
  :                            342 
00:00931C 68F003              +343 	lb	ifimcaseq
00:00931D 3E0385              +344 	lcal	ifagent_find_i_f
00:00931E CE0324              +345 	jzb	ifagent_noimcast
  :                            346 
00:00931F 64D014              +347 	la, i	this_if:inmcast, b
(+01)0f
00:009320 20047C              +348 	sa	ifagent_c48:data
  :                            349 
00:009321 65000C              +350 	la, xi	12
  :                            351 .	lb	ifimcaseq
  :                            352 .	sa	10, b
(+01)0f
00:009322 20047D              +353 	sa	ifagent_c48:seq
  :                            354 
(+01)10
00:009323 6D047B              +355 	lb, xi	ifagent_c48
  :                            356 
  :                            357 ifagent_noimcast
00:009324 3D0000              +358 	fret	0
  :                            359 
  :                            360 
                                ifagent_idrops	$head_far	 params(ifidropseq,	int	;
                                					ifidropflags,	int	;
  :                            363 					ifidroproutine,	int)
  :                            364 
  :                            365 
00:009325 68F003              +366 	lb	ifidropseq
00:009326 3E0385              +367 	lcal	ifagent_find_i_f
00:009327 CE032D              +368 	jzb	ifagent_noidrops
  :                            369 
00:009328 64D018              +370 	la, i	this_if:indrops, b
(+01)0f
00:009329 20047C              +371 	sa	ifagent_c48:data
  :                            372 
00:00932A 65000D              +373 	la, xi	13
  :                            374 .	lb	ifidropseq
  :                            375 .	sa	10, b
(+01)0f
00:00932B 20047D              +376 	sa	ifagent_c48:seq
  :                            377 
(+01)10
00:00932C 6D047B              +378 	lb, xi	ifagent_c48
  :                            379 
  :                            380 ifagent_noidrops
00:00932D 3D0000              +381 	fret	0
  :                            382 
  :                            383 
                                ifagent_ierrs	$head_far	 params(ifierseq,	int	;
                                					ifierflags,	int	;
  :                            386 					ifierroutine,	int)
  :                            387 
  :                            388 
00:00932E 68F003              +389 	lb	ifierseq
00:00932F 3E0385              +390 	lcal	ifagent_find_i_f
00:009330 CE0336              +391 	jzb	ifagent_noierrs
  :                            392 
00:009331 64D01C              +393 	la, i	this_if:inerrs, b
(+01)0f
00:009332 20047C              +394 	sa	ifagent_c48:data
  :                            395 
00:009333 65000E              +396 	la, xi	14
  :                            397 .	lb	ifierseq
  :                            398 .	sa	10, b
(+01)0f
00:009334 20047D              +399 	sa	ifagent_c48:seq
  :                            400 
(+01)10
00:009335 6D047B              +401 	lb, xi	ifagent_c48
  :                            402 
  :                            403 ifagent_noierrs
00:009336 3D0000              +404 	fret	0
  :                            405 
  :                            406 
                                ifagent_inoproto $head_far	 params(ifinoproseq,	int	;
                                					ifinoproflags,	int	;
  :                            409 					ifinoproroutine, int)
  :                            410 
  :                            411 
00:009337 68F003              +412 	lb	ifinoproseq
00:009338 3E0385              +413 	lcal	ifagent_find_i_f
00:009339 CE033F              +414 	jzb	ifagent_noinoproto
  :                            415 
00:00933A 64D020              +416 	la, i	this_if:inoproto, b
(+01)0f
00:00933B 20047C              +417 	sa	ifagent_c48:data
  :                            418 
00:00933C 65000F              +419 	la, xi	15
  :                            420 .	lb	ifinoproseq
  :                            421 .	sa	10, b
(+01)0f
00:00933D 20047D              +422 	sa	ifagent_c48:seq
  :                            423 
(+01)10
00:00933E 6D047B              +424 	lb, xi	ifagent_c48
  :                            425 
  :                            426 ifagent_noinoproto
00:00933F 3D0000              +427 	fret	0
  :                            428 
  :                            429 
                                ifagent_obytes	$head_far	 params(ifobytseq,	int	;
                                					ifobytflags,	int	;
  :                            432 					ifobytroutine,	int)
  :                            433 
  :                            434 
00:009340 68F003              +435 	lb	ifobytseq
00:009341 3E0385              +436 	lcal	ifagent_find_i_f
00:009342 CE0348              +437 	jzb	ifagent_noobytes
  :                            438 
00:009343 64D00E              +439 	la, i	this_if:outoctets, b
(+01)0f
00:009344 20047C              +440 	sa	ifagent_c48:data
  :                            441 
00:009345 650010              +442 	la, xi	16
  :                            443 .	lb	ifobytseq
  :                            444 .	sa	10, b
(+01)0f
00:009346 20047D              +445 	sa	ifagent_c48:seq
  :                            446 
(+01)10
00:009347 6D047B              +447 	lb, xi	ifagent_c48
  :                            448 
  :                            449 ifagent_noobytes
00:009348 3D0000              +450 	fret	0
  :                            451 
  :                            452 
                                ifagent_oucast	$head_far	 params(ifoucaseq,	int	;
                                					ifoucaflags,	int	;
  :                            455 					ifoucaroutine,	int)
  :                            456 
  :                            457 
00:009349 68F003              +458 	lb	ifoucaseq
00:00934A 3E0385              +459 	lcal	ifagent_find_i_f
00:00934B CE0351              +460 	jzb	ifagent_nooucast
  :                            461 
00:00934C 64D012              +462 	la, i	this_if:outpackets, b
(+01)0f
00:00934D 20047C              +463 	sa	ifagent_c48:data
  :                            464 
00:00934E 650011              +465 	la, xi	17
  :                            466 .	lb	ifoucaseq
  :                            467 .	sa	10, b
(+01)0f
00:00934F 20047D              +468 	sa	ifagent_c48:seq
  :                            469 
(+01)10
00:009350 6D047B              +470 	lb, xi	ifagent_c48
  :                            471 
  :                            472 ifagent_nooucast
00:009351 3D0000              +473 	fret	0
  :                            474 
  :                            475 
                                ifagent_omcast	$head_far	 params(ifomcaseq,	int	;
                                					ifomcaflags,	int	;
  :                            478 					ifomcaroutine,	int)
  :                            479 
  :                            480 
00:009352 68F003              +481 	lb	ifomcaseq
00:009353 3E0385              +482 	lcal	ifagent_find_i_f
00:009354 CE035A              +483 	jzb	ifagent_noomcast
  :                            484 
00:009355 64D016              +485 	la, i	this_if:outmcast, b
(+01)0f
00:009356 20047C              +486 	sa	ifagent_c48:data
  :                            487 
00:009357 650012              +488 	la, xi	18
  :                            489 .	lb	ifomcaseq
  :                            490 .	sa	10, b
(+01)0f
00:009358 20047D              +491 	sa	ifagent_c48:seq
  :                            492 
(+01)10
00:009359 6D047B              +493 	lb, xi	ifagent_c48
  :                            494 
  :                            495 ifagent_noomcast
00:00935A 3D0000              +496 	fret	0
  :                            497 
  :                            498 
                                ifagent_odrops	$head_far	 params(ifodropseq,	int	;
                                					ifodropflags,	int	;
  :                            501 					ifodroproutine,	int)
  :                            502 
  :                            503 
  :                            504 
00:00935B 68F003              +505 	lb	ifodropseq
00:00935C 3E0385              +506 	lcal	ifagent_find_i_f
00:00935D CE0363              +507 	jzb	ifagent_noodrops
  :                            508 
00:00935E 64D01A              +509 	la, i	this_if:outdrops, b
(+01)0f
00:00935F 20047C              +510 	sa	ifagent_c48:data
  :                            511 
00:009360 650013              +512 	la, xi	19
  :                            513 .	lb	ifodropseq
  :                            514 .	sa	10, b
(+01)0f
00:009361 20047D              +515 	sa	ifagent_c48:seq
  :                            516 
(+01)10
00:009362 6D047B              +517 	lb, xi	ifagent_c48
  :                            518 
  :                            519 ifagent_noodrops
00:009363 3D0000              +520 	fret	0
  :                            521 
  :                            522 
                                ifagent_oerrs	$head_far	 params(ifoerseq,	int	;
                                					ifoerflags,	int	;
  :                            525 					ifoerroutine,	int)
  :                            526 
  :                            527 
  :                            528 
00:009364 68F003              +529 	lb	ifoerseq
00:009365 3E0385              +530 	lcal	ifagent_find_i_f
00:009366 CE036B              +531 	jzb	ifagent_nooerrs
  :                            532 
00:009367 64D01E              +533 	la, i	this_if:outerrs, b
(+01)0f
00:009368 20047C              +534 	sa	ifagent_c48:data
  :                            535 
00:009369 650014              +536 	la, xi	20
  :                            537 .	lb	ifoerseq
  :                            538 .	sa	10, b
(+01)0f
00:00936A 20047D              +539 	sa	ifagent_c48:seq
  :                            540 
  :                            541 ifagent_nooerrs
(+01)10
00:00936B 6D047B              +542 	lb, xi	ifagent_c48
  :                            543 
00:00936C 3D0000              +544 	fret	0
  :                            545 
  :                            546 
                                ifagent_oqlen	$head_far	 params(ifoqlseq,	int	;
                                					ifoqlflags,	int	;
  :                            549 					ifoqlroutine,	int)
  :                            550 
  :                            551 
00:00936D 68F003              +552 	lb	ifoqlseq
00:00936E 3E0385              +553 	lcal	ifagent_find_i_f
00:00936F CE0375              +554 	jzb	ifagent_nooqlen
  :                            555 
00:009370 64D022              +556 	la, i	this_if:oqlen, b
(+01)0f
00:009371 20047C              +557 	sa	ifagent_c48:data
  :                            558 
00:009372 650015              +559 	la, xi	21
  :                            560 .	lb	ifoqlseq
  :                            561 .	sa	10, b
(+01)0f
00:009373 20047D              +562 	sa	ifagent_c48:seq
  :                            563 
(+01)10
00:009374 6D047B              +564 	lb, xi	ifagent_c48
  :                            565 
  :                            566 ifagent_nooqlen
00:009375 3D0000              +567 	fret	0
  :                            568 
  :                            569 
                                ifagent_smib	$head_far	 params(ifsmibseq,	int	;
                                					ifsmibflags,	int	;
  :                            572 					ifsmibroutine,	int)
  :                            573 
00:009376 68F003              +574 	lb	ifsmibseq
00:009377 3E0385              +575 	lcal	ifagent_find_i_f
00:009378 CE037A              +576 	jzb	ifagent_nosmib
  :                            577 
(+01)10
00:009379 6D0482              +578 	lb, xi	ifagent_onone
  :                            579 
  :                            580 ifagent_nosmib
00:00937A 3D0000              +581 	fret	0
  :                            582 
  :                            583 ifagent_find_next_if
00:00937B 60D001              +584 	la	1, b
00:00937C C5FFF8              +585 	aa, xi	-8
00:00937D 7E0380              +586 	jc	ifagent_find_another
(+01)10
00:00937E 6D000A              +587 	lb, xi	interface(1)
00:00937F 350000              +588 	lret	0
  :                            589 
  :                            590 ifagent_find_another			. you have the instance stem
00:009380 C5FFFF              +591 	aa, xi	-1
00:009381 5E0385              +592 	jnc	ifagent_find_i_f
  :                            593 
00:009382 60D009              +594 	la	9, b			. you have the attribute tag
00:009383 44C001              +595 	lr, i	1, a			. so increment the instance stem
00:009384 B60386              +596 	j	ifagent_find
  :                            597 
  :                            598 ifagent_find_i_f
00:009385 40D009              +599 	lr	9, b
  :                            600 ifagent_find
(+01)0f
00:009386 600000              +601 	la	i_f_pointer_array
00:009387 680004              +602 	anu	r
00:009388 D80000              +602 
00:009389 5E038E              +603 	jnc	ifagent_idx_2hi
(+01)10
00:00938A 650000              +604 	la, xi	i_f_pointer_array
00:00938B C00000              +605 	aa	r
00:00938C 68C000              +606 	lb	0, a
00:00938D 350000              +607 	lret	0
  :                            608 ifagent_idx_2hi
00:00938E 650002              +609 	la, xi	SNMP_NOSUCHNAME
00:00938F 6D0000              +610 	lb, xi	0
00:009390 350000              +611 	lret	0
  :                            253: 	$include ipagent
  :                            1 
  :                            2 $(1)
  :                            3 
01:00048B 000063              +4 ip_mib_i_f	+	99
01:00048C FFFFFFFFFF9D        +5 ip_mib_xnet	-	99L
  :                            6 
                                ip_mib_oaddress	mobjet	0	1	SNMP_NETWORKADDRESS	4	1	;
01:00048E 000000              +8 			0	0	ip_mib_xnet
(+01)18
01:00048F 00048C              +8 
01:000490 000001              +8 
01:000491 000040              +8 
01:000492 000004              +8 
01:000493 000001              +8 
01:000494 000001              +8 
  :                            9 
                                ip_mib_oifidx	mobjet	0	2	SNMP_INT		2	1	;
01:000495 000000              +11 			0	0	ip_mib_i_f
(+01)18
01:000496 00048B              +11 
01:000497 000002              +11 
01:000498 000002              +11 
01:000499 000002              +11 
01:00049A 000001              +11 
01:00049B 000001              +11 
  :                            12 
  :                            13 
  :                            14 $(0)
                                ipagent_tabler		$head_near	 params(iptabseq,	int	;
                                						lexical_list,	int	;
                                						odynamic,	int	;
                                						iptabroutine,	int	;
  :                            19 						table_id,	int)
  :                            20 
00:009391 50F003              +21 	lx	lexical_list
00:009392 60F002              +22 	la	iptabseq			. force first table row
00:009393 68C001              +23 	lb	1, a				. when entering table sequentially
00:009394 CDFFF3              +24 	ab	-13,,xi				. oid including address?
00:009395 5E03AA              +25 	jnc	iptabler_readdress		. no, apply first table row
00:009396 68C008              +26 	lb	8, a
00:009397 B8F006              +27 	xorB	table_id			. oid addressing called table?
00:009398 DE03AA              +28 	jnzb	iptabler_readdress		. no, apply first table row
  :                            29 
00:009399 68F002              +30 	lb	iptabseq
00:00939A 60F005              +31 	la	iptabroutine
00:00939B C5FF60              +32 	aa	-SNMP_GETREQ,,xi
00:00939C D6039F              +33 	jnza	iptabler_address_along
  :                            34 
00:00939D 3E03E5              +35 	lcal	ipagent_search_exact		. get exact
00:00939E B603AD              +36 	j	iptabler_address!		. = hit or none
  :                            37 
  :                            38 iptabler_address_along
00:00939F 3E03EC              +39 	lcal	ipagent_search_forward		. get higher
00:0093A0 680002              +40 	lb	x
00:0093A1 60F002              +41 	la	iptabseq
00:0093A2 DE03AA              +42 	jnzb	iptabler_readdress
  :                            43 
00:0093A3 1FC001              +44 	dec	1, a
00:0093A4 17C00A              +45 	inc	10, a				. next subtable
00:0093A5 30C00B              +46 	z	11, a	
00:0093A6 30C00C              +47 	z	12, a
00:0093A7 30C00D              +48 	z	13, a
00:0093A8 30C00E              +49 	z	14, a
00:0093A9 B603AD              +50 	j	iptabler_noaddress
  :                            51 
  :                            52 iptabler_readdress
00:0093AA 3E03DA              +53 	lcal	ipagent_write_oid_tokens	. write address field oid
00:0093AB 60F004              +54 	la	odynamic			. low order oid knot is in mobjet
00:0093AC 28C002              +55 	sb	mo:seq, a			. whichever mobjet
  :                            56 
  :                            57 iptabler_address!				. whether a cache line is found
  :                            58 iptabler_noaddress				. or not
00:0093AD 680002              +59 	lb	x
00:0093AE 350000              +60 	$ret
  :                            61 
                                ipagent_address		$head_far	 params(ipnetseq,	int	;
                                						ipnetflags,	int	;
  :                            64 						ipnetroutine,	int	)
  :                            65 
                                	lc	ipagent_tabler	ipnetseq		;
                                				net_alexical		;
                                				ip_mib_oaddress,,xi	;
                                				ipnetroutine		;
00:0093AF FD0014              +70 				20,,xi
00:0093B0 F8F006              +70 
(+01)10
00:0093B1 FD048E              +70 
(+01)0f
00:0093B2 F8033E              +70 
00:0093B3 F8F007              +70 
00:0093B4 FCF005              +70 
00:0093B5 3E0391              +70 
00:0093B6 38000F              +70 
  :                            71 
00:0093B7 CE03BD              +72 	jzb	ipagent_noaddress
  :                            73 
00:0093B8 CFA003              +74 	dl	ifaddr:net
00:0093B9 2E0008              +75 	sbl	8
00:0093BA 360008              +76 	dsl	8
(+01)0f
00:0093BB C7048C              +77 	ds	ip_mib_xnet
(+01)10
00:0093BC 6D048E              +78 	lb	ip_mib_oaddress,,xi
  :                            79 
  :                            80 ipagent_noaddress
00:0093BD 3D0000              +81 	fret	0
  :                            82 
  :                            83 
                                ipagent_address_ifidx	$head_far	 params(ipifidxseq,	int	;
                                						ipifidxflags,	int	;
  :                            86 						ifixidxroutine,	int	)
  :                            87 
                                	lc	ipagent_tabler	ipifidxseq		;
                                				net_alexical		;
                                				ip_mib_oifidx,,xi	;
                                				ifidxroutine		;
00:0093BE FD0014              +92 				20,,xi
00:0093BF F8F006              +92 
(+01)10
00:0093C0 FD0495              +92 
(+01)0f
00:0093C1 F8033E              +92 
00:0093C2 F8F007              +92 
00:0093C3 FCF005              +92 
00:0093C4 3E0391              +92 
00:0093C5 38000F              +92 
  :                            93 
00:0093C6 CE03CA              +94 	jzb	ipagent_noifidx
  :                            95 
00:0093C7 60A002              +96 	la	ifaddr:i_f
(+01)0f
00:0093C8 20048B              +97 	sa	ip_mib_i_f
(+01)10
00:0093C9 6D0495              +98 	lb	ip_mib_oifidx,,xi
  :                            99 
  :                            100 ipagent_noifidx
00:0093CA 3D0000              +101 	fret	0
  :                            102 
                                ipagent_address_netmask $head_far	 params(ipmaskseq,	int	;
                                						ipmaskflags,	int	;
  :                            105 						ipmaskroutine,	int	)
  :                            106 
  :                            107 
                                	lc	ipagent_tabler	ipmaskseq		;
                                				net_alexical		;
                                				ip_mib_oaddress,,xi	;
                                				ipmaskroutine		;
00:0093CB FD0014              +112 				20,,xi
00:0093CC F8F006              +112 
(+01)10
00:0093CD FD048E              +112 
(+01)0f
00:0093CE F8033E              +112 
00:0093CF F8F007              +112 
00:0093D0 FCF005              +112 
00:0093D1 3E0391              +112 
00:0093D2 38000F              +112 
  :                            113 
00:0093D3 CE03D9              +114 	jzb	ipagent_nomask
  :                            115 
00:0093D4 CFA005              +116 	dl	ifaddr:mask
00:0093D5 2E0008              +117 	sbl	8
00:0093D6 360008              +118 	dsl	8
(+01)0f
00:0093D7 C7048C              +119 	ds	ip_mib_xnet
(+01)10
00:0093D8 6D048E              +120 	lb	ip_mib_oaddress,,xi
  :                            121 
  :                            122 ipagent_nomask
00:0093D9 3D0000              +123 	fret	0
  :                            124 
  :                            125 
  :                            126 	$if	BROADCAST_AND_MAXREASM
  :                            127 
                                ipagent_address_broadcast $head_far	 params(ipbcastseq,	int	;
                                						ipbcastflags,	int	;
  :                            130 						ipbcastroutine,	int	)
  :                            131 
                                	lc	ipagent_tabler	ipbcastseq		net_alexical	;
  :                            133 				ip_mib_oaddress,,xi	ipbcastroutine	20,,xi
  :                            134 	jzb	ipagent_nobcast
  :                            135 
  :                            136 	dl	ifaddr:broadcast
  :                            137 	sbl	8
  :                            138 	dsl	8
  :                            139 	ds	ip_mib_xnet
  :                            140 	lb	ip_mib_oaddress,,xi
  :                            141 
  :                            142 ipagent_nobcast
  :                            143 	fret	0
  :                            144 
                                ipagent_address_maxreasm $head_far	 params(iprasmseq,	int	;
                                						iprasmflags,	int	;
  :                            147 						iprasmroutine,	int	)
  :                            148 
                                	lc	ipagent_tabler	iprasmseq		net_alexical	;
  :                            150 				ip_mib_oifidx,,xi	iprasmroutine	20,,xi
  :                            151 	jzb	ipagent_norasm
  :                            152 
  :                            153 	la	16384,,xi
  :                            154 	sa	ip_mib_i_f
  :                            155 	lb	ip_mib_oifidx,,xi
  :                            156 
  :                            157 ipagent_norasm
  :                            158 	fret	0
  :                            159 
  :                            160 	$endif			. BROADCAST_AND_MAXREASM
  :                            161 
  :                            162 ipagent_write_oid_tokens
00:0093DA 5CC00B              +163 	ly	11, a, i	. input / output oid + 11
00:0093DB CFA003              +164 	dl	ifaddr:net
  :                            165 
  :                            166 ipagent_write2oid		. input is 00nnnn:00nnnn
00:0093DC F80005              +167 	push	b
00:0093DD 160008              +168 	dsr	8
00:0093DE 0E0010              +169 	sbr	16
00:0093DF C7B000              +170 	ds	0, y
00:0093E0 380004              +171 	pop	a
00:0093E1 160008              +172 	dsr	8
00:0093E2 0E0010              +173 	sbr	16
00:0093E3 C7B002              +174 	ds	2, y
00:0093E4 350000              +175 	lret	0
  :                            176 
  :                            177 ipagent_search_exact
00:0093E5 5CD00B              +178 	ly	11, b, i
  :                            179 
  :                            180 ipagent_search_id
00:0093E6 3E03FE              +181 	lcal	ipagent_seek
00:0093E7 700002              +182 	tz	x
00:0093E8 7C03EB              +183 	jdz	ipagent_exact
00:0093E9 550000              +184 	lx	0,,xi		. already zero or encountered > argument
00:0093EA 350000              +185 	lret	0		. x -> none at all
  :                            186 
  :                            187 ipagent_exact
00:0093EB 350000              +188 	lret	0		. x -> correct
  :                            189 
  :                            190 ipagent_search_forward
00:0093EC 5CD00B              +191 	ly	11, b, i
  :                            192 
  :                            193 ipagent_search_nextid
00:0093ED 3E03FE              +194 	lcal	ipagent_seek
00:0093EE 700002              +195 	tz	x
00:0093EF 7C03F1              +196 	jdz	ipagent_1more	. found equal
  :                            197 
00:0093F0 350000              +198 	lret	0		. x -> higher or none at all
  :                            199 
  :                            200 ipagent_1more
00:0093F1 50A001              +201 	lx	ifaddr:lexical	. higher or none at all
00:0093F2 350000              +202 	lret	0
  :                            203 
  :                            204 ipagent_readoid2netform
00:0093F3 CFB000              +205 	dl	0, y		. get 00.00.aa : 00.00.bb from oid
00:0093F4 2E0010              +206 	sbl	16		
00:0093F5 360008              +207 	dsl	8		. 00.aa.bb
00:0093F6 68B002              +208 	lb	2, y
00:0093F7 2E0010              +209 	sbl	16
00:0093F8 360008              +210 	dsl	8		. aa.bb.cc
00:0093F9 68B003              +211 	lb	3, y
00:0093FA 2E0010              +212 	sbl	16		. aa.bb.cc.dd.00.00
00:0093FB 160008              +213 	dsr	8
00:0093FC 0E0008              +214 	sbr	8		. 00.aa.bb.00.cc.dd
00:0093FD 350000              +215 	lret	0
  :                            216 
  :                            217 ipagent_seek
00:0093FE 3E03F3              +218 	lcal	ipagent_readoid2netform
  :                            219 .	lx	net_alexical
00:0093FF C70006              +220 	ds	6
00:009400 B60405              +221 	j	ipagent_seek_nane?
  :                            222 
  :                            223 ipagent_seek_next
00:009401 CFA003              +224 	dl	ifaddr:net
00:009402 DF0006              +225 	dan	6
00:009403 7E0407              +226 	jc	ipagent_find_ge
  :                            227 
00:009404 50A001              +228 	lx	ifaddr:lexical
  :                            229 
  :                            230 ipagent_seek_nane?
00:009405 700002              +231 	tz	x
00:009406 B60401              +232 	j	ipagent_seek_next
  :                            233 
  :                            234 ipagent_find_ge
00:009407 350000              +235 	lret	0
  :                            236 
  :                            254: 	$include roagent
  :                            1 
  :                            2 $(1)
  :                            3 
01:00049C 000063              +4 ipromib_i_f	+	99
01:00049D FFFFFFFFFF9D        +5 ipromib_xnet	-	99L
  :                            6 
                                ipromib_oaddress mobjet 0	1	SNMP_NETWORKADDRESS	4	1	;
01:00049F 000000              +8 			0	0	ipromib_xnet
(+01)18
01:0004A0 00049D              +8 
01:0004A1 000001              +8 
01:0004A2 000040              +8 
01:0004A3 000004              +8 
01:0004A4 000001              +8 
01:0004A5 000001              +8 
  :                            9 
                                ipromib_oifidx	mobjet	0	2	SNMP_INT		2	1	;
01:0004A6 000000              +11 			0	0	ipromib_i_f
(+01)18
01:0004A7 00049C              +11 
01:0004A8 000002              +11 
01:0004A9 000002              +11 
01:0004AA 000002              +11 
01:0004AB 000001              +11 
01:0004AC 000001              +11 
  :                            12 
  :                            13 
  :                            14 $(0)
  :                            15 
                                ipagent_route_dest	$head_far	 params(ipronetseq,	int	;
                                						ipronetflags,	int	;
  :                            18 						ipronetroutine,	int	)
  :                            19 
                                	lc	ipagent_tabler	ipronetseq		;
                                				route_lexical		;
                                				ipromib_oaddress,,xi	;
                                				ipronetroutine		;
00:009408 FD0015              +24 				21,,xi
00:009409 F8F006              +24 
(+01)10
00:00940A FD049F              +24 
(+01)0f
00:00940B F8024C              +24 
00:00940C F8F007              +24 
00:00940D FCF005              +24 
00:00940E 3E0391              +24 
00:00940F 38000F              +24 
  :                            25 
00:009410 CE0416              +26 	jzb	ipagent_route_nodest
  :                            27 
00:009411 CFA003              +28 	dl	ro:net
00:009412 2E0008              +29 	sbl	8
00:009413 360008              +30 	dsl	8
(+01)0f
00:009414 C7049D              +31 	ds	ipromib_xnet
(+01)10
00:009415 6D049F              +32 	lb	ipromib_oaddress,,xi
  :                            33 
  :                            34 ipagent_route_nodest
00:009416 3D0000              +35 	fret	0
  :                            36 
  :                            37 
                                ipagent_route_ifidx	$head_far	 params(iproifidxseq,	int	;
                                						iproifidxflags,	int	;
  :                            40 						roifidxroutine,	int	)
  :                            41 
                                	lc	ipagent_tabler	iproifidxseq		;
                                				route_lexical		;
                                				ipromib_oifidx,,xi	;
                                				roifidxroutine		;
00:009417 FD0015              +46 				21,,xi
00:009418 F8F006              +46 
(+01)10
00:009419 FD04A6              +46 
(+01)0f
00:00941A F8024C              +46 
00:00941B F8F007              +46 
00:00941C FCF005              +46 
00:00941D 3E0391              +46 
00:00941E 38000F              +46 
  :                            47 
00:00941F CE0424              +48 	jzb	ipagent_route_noifidx
  :                            49 
00:009420 60A002              +50 	la	ro:i_f
00:009421 A57FFF              +51 	and	07FFF,,xi
(+01)0f
00:009422 20049C              +52 	sa	ipromib_i_f
(+01)10
00:009423 6D04A6              +53 	lb	ipromib_oifidx,,xi
  :                            54 
  :                            55 ipagent_route_noifidx
00:009424 3D0000              +56 	fret	0
  :                            57 
                                ipagent_route_mask $head_far	 params(ipromaskseq,	int	;
                                					ipromaskflags,	int	;
  :                            60 					ipromaskroutine,	int	)
  :                            61 
  :                            62 
                                	lc	ipagent_tabler	ipromaskseq		;
                                				route_lexical		;
                                				ipromib_oaddress,,xi	;
                                				ipromaskroutine		;
00:009425 FD0015              +67 				21,,xi
00:009426 F8F006              +67 
(+01)10
00:009427 FD049F              +67 
(+01)0f
00:009428 F8024C              +67 
00:009429 F8F007              +67 
00:00942A FCF005              +67 
00:00942B 3E0391              +67 
00:00942C 38000F              +67 
  :                            68 
00:00942D CE0433              +69 	jzb	ipagent_route_nomask
  :                            70 
00:00942E CFA005              +71 	dl	ro:mask
00:00942F 2E0008              +72 	sbl	8
00:009430 360008              +73 	dsl	8
(+01)0f
00:009431 C7049D              +74 	ds	ipromib_xnet
(+01)10
00:009432 6D049F              +75 	lb	ipromib_oaddress,,xi
  :                            76 
  :                            77 ipagent_route_nomask
00:009433 3D0000              +78 	fret	0
  :                            79 
  :                            80 
  :                            81 
                                ipagent_route_next_hop	$head_far	 params(iprohopseq,	int	;
                                						iprohopflags,	int	;
  :                            84 						iprohoproutine,	int	)
  :                            85 
                                	lc	ipagent_tabler	iprohopseq		;
                                				route_lexical		;
                                				ipromib_oaddress,,xi	;
                                				iprohoproutine		;
00:009434 FD0015              +90 				21,,xi
00:009435 F8F006              +90 
(+01)10
00:009436 FD049F              +90 
(+01)0f
00:009437 F8024C              +90 
00:009438 F8F007              +90 
00:009439 FCF005              +90 
00:00943A 3E0391              +90 
00:00943B 38000F              +90 
  :                            91 
00:00943C CE0442              +92 	jzb	ipagent_route_nonext_hop
  :                            93 
00:00943D CFA007              +94 	dl	ro:next_hop
00:00943E 2E0008              +95 	sbl	8
00:00943F 360008              +96 	dsl	8
(+01)0f
00:009440 C7049D              +97 	ds	ipromib_xnet
(+01)10
00:009441 6D049F              +98 	lb	ipromib_oaddress,,xi
  :                            99 
  :                            100 ipagent_route_nonext_hop
00:009442 3D0000              +101 	fret	0
  :                            102 
                                ipagent_route_type $head_far	 params(iprotypseq,	int	;
                                					iprotypflags,	int	;
  :                            105 					iprotyproutine,	int	)
  :                            106 
                                	lc	ipagent_tabler	iprotypseq		;
                                				route_lexical		;
                                				ipromib_oifidx,,xi	;
                                				iprotyproutine		;
00:009443 FD0015              +111 				21,,xi
00:009444 F8F006              +111 
(+01)10
00:009445 FD04A6              +111 
(+01)0f
00:009446 F8024C              +111 
00:009447 F8F007              +111 
00:009448 FCF005              +111 
00:009449 3E0391              +111 
00:00944A 38000F              +111 
  :                            112 
00:00944B CE0451              +113 	jzb	ipagent_route_notype
  :                            114 
00:00944C 60A002              +115 	la	ro:i_f
00:00944D 060017              +116 	sar	23			. indirect flag
00:00944E 64C003              +117 	la	3, a, i			. make it 3 or 4
(+01)0f
00:00944F 20049C              +118 	sa	ipromib_i_f
(+01)10
00:009450 6D04A6              +119 	lb	ipromib_oifidx,,xi
  :                            120 
  :                            121 ipagent_route_notype
00:009451 3D0000              +122 	fret	0
  :                            123 
  :                            255: 	$include tcpagent
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 TCP_MIB		$equ	4096/24*2-2
  :                            41 
  :                            42 $(1)
01:0004AD 000000              +43 tcp_mib_chain	+	0
01:0004AE 000000              +44 tcp_mib_free	+	0
(+03)18
01:0004AF 0024D4              +45 tcp_mib_high	+	tcp_mib
  :                            46 
                                tcp_mib_ostat	mobjet	0	1	SNMP_INT		3	1	;
01:0004B0 000000              +48 			0	0	tcp_mib_xstate
(+01)18
01:0004B1 0004C5              +48 
01:0004B2 000001              +48 
01:0004B3 000002              +48 
01:0004B4 000003              +48 
01:0004B5 000001              +48 
01:0004B6 000001              +48 
  :                            49 
                                tcp_mib_oneta	mobjet	0	2	SNMP_NETWORKADDRESS	4	1	;
01:0004B7 000000              +51 			0	0	tcp_mib_xnet
(+01)18
01:0004B8 0004C6              +51 
01:0004B9 000002              +51 
01:0004BA 000040              +51 
01:0004BB 000004              +51 
01:0004BC 000001              +51 
01:0004BD 000001              +51 
  :                            52 
                                tcp_mib_oport	mobjet	0	4	SNMP_INT		2	1	;
01:0004BE 000000              +54 			0	0	tcp_mib_xnet+1
(+01)18
01:0004BF 0004C7              +54 
01:0004C0 000004              +54 
01:0004C1 000002              +54 
01:0004C2 000002              +54 
01:0004C3 000001              +54 
01:0004C4 000001              +54 
  :                            55 
01:0004C5 000063              +56 tcp_mib_xstate	+	99
01:0004C6 FFFFFFFFFF9D        +57 tcp_mib_xnet	-	99:d
  :                            58 
  :                            59 $(3)
  :                            60 tcp_mib		$res	TCP_MIB
  :                            61 
  :                            62 .	this is done with a wrapper because 
  :                            63 .	few connections are MIB-visible and 
  :                            64 .	density requires that they don't all
  :                            65 .	have a lexical-order chain pointer
  :                            66 .	as well as a hash link
  :                            67 
  :                            68 .	the new connection pointer is x
  :                            69 
  :                            70 
  :                            71 $(0)
  :                            72 
  :                            73 tcpagent_add
(+01)0f
00:009452 6004AE              +74 	la	tcp_mib_free
00:009453 C60457              +75 	jza	tcp_agent_add_new
00:009454 F8C000              +76 	push	0, a
(+01)0f
00:009455 3804AE              +77 	pop	tcp_mib_free
00:009456 B6045D              +78 	j	tcpagent_add_assigned
  :                            79 
  :                            80 tcp_agent_add_new
(+01)0f
00:009457 6004AF              +81 	la	tcp_mib_high
00:009458 680004              +82 	anu, xi	tcp_mib+TCP_MIB
(+03)10
00:009459 DD2626              +82 
00:00945A 7E046E              +83 	jc	tcpagent_add_x
00:00945B 44C002              +84 	lr, i	2, a
(+01)0f
00:00945C 0004AF              +85 	sr	tcp_mib_high
  :                            86 
  :                            87 tcpagent_add_assigned		. the wrapper is assigned
00:00945D 10C001              +88 	sx	1, a		. the connection is wrapped
  :                            89 
00:00945E 400004              +90 	lr	a
00:00945F 4FA006              +91 	ql	transmission:socket_address
00:009460 470008              +92 	qs	8
  :                            93 
00:009461 3E0507              +94 	lcal	tcpagent_search
00:009462 700003              +95 	tz	y		. add on the end?
00:009463 7C0469              +96 	jdz	tcpagent_add_nop . it seeems to be there
  :                            97 				. already
00:009464 00A000              +98 	sr	0, x		. next after before
00:009465 600000              +99 	la	r
00:009466 18C000              +100 	sy	0, a
00:009467 50C001              +101 	lx	1, a		. restore the connection
00:009468 3D0000              +102 	fret	0		. pointer
  :                            103 
  :                            104 tcpagent_add_nop		. listed already
00:009469 600000              +105 	la	r
00:00946A 50C001              +106 	lx	1, a		. restore the connection *
(+01)0f
00:00946B F804AE              +107 	push	tcp_mib_free	. give the wrapper back
00:00946C 38C000              +108 	pop	0, a
(+01)0f
00:00946D 2004AE              +109 	sa	tcp_mib_free
  :                            110 tcpagent_add_x
00:00946E 3D0000              +111 	fret	0
  :                            112 
  :                            113 
  :                            114 tcpagent_free
00:00946F F80003              +115 	push	y
00:009470 F80005              +116 	push	b
(+01)10
00:009471 6D04AD              +117 	lb, xi	tcp_mib_chain
  :                            118 
  :                            119 tcpagent_free_search
00:009472 580005              +120 	ly	b
00:009473 68D000              +121 	lb	0, b
00:009474 CE047D              +122 	jzb	tcpagent_free_nop
00:009475 60D001              +123 	la	1, b
00:009476 D00002              +124 	ana	x
00:009477 D60472              +125 	jnza	tcpagent_free_search
00:009478 F8D000              +126 	push	0, b
00:009479 38B000              +127 	pop	0, y
  :                            128 
(+01)0f
00:00947A F804AE              +129 	push	tcp_mib_free
00:00947B 38D000              +130 	pop	0, b
(+01)0f
00:00947C 2804AE              +131 	sb	tcp_mib_free
  :                            132 tcpagent_free_nop
00:00947D 380005              +133 	pop	b
00:00947E 380003              +134 	pop	y
00:00947F 3D0000              +135 	fret	0
  :                            136 
                                tcpagent_state	$head_far	 params(taseq,		int	;
                                					taflags,	int	;
  :                            139 					taroutine,	int)
  :                            140 
00:009480 602185              +141 	la	tcx_v4(1)
00:009481 34002F              +142 	sabr	BSOCKET
  :                            143 
00:009482 68F003              +144 	lb	taseq
00:009483 60F005              +145 	la	taroutine
00:009484 D500A0              +146 	ana,xi	SNMP_GETREQ
00:009485 D60489              +147 	jnza	tcpagent_state_along
  :                            148 
00:009486 3E04D7              +149 	lcal	tcpagent_search_exact
00:009487 CE0491              +150 	jzb	tcpagent_nostate
00:009488 B6048E              +151 	j	tcpagent_state!
  :                            152 
  :                            153 tcpagent_state_along
00:009489 3E04E3              +154 	lcal	tcpagent_search_forward
00:00948A CE0491              +155 	jzb	tcpagent_nostate
  :                            156 
00:00948B 500005              +157 	lx	b
00:00948C 60F003              +158 	la	taseq
  :                            159 
00:00948D 3E0492              +160 	lcal	tcpagent_write_oid_tokens
  :                            161 
  :                            162 tcpagent_state!
00:00948E 60D001              +163 	la	transmission:state, b
(+01)0f
00:00948F 2004C5              +164 	sa	tcp_mib_xstate
  :                            165 
(+01)10
00:009490 6D04B0              +166 	lb, xi	tcp_mib_ostat
  :                            167 tcpagent_nostate
00:009491 3D0000              +168 	fret	0
  :                            169 	
  :                            170 tcpagent_write_oid_tokens
00:009492 F80005              +171 	push	b
00:009493 F80003              +172 	push	y
  :                            173 
00:009494 5CC009              +174 	ly, i	9, a
00:009495 CFA006              +175 	dl	transmission:socket_address
00:009496 3E049D              +176 	lcal	tcpagent_write_address
  :                            177 
00:009497 CFA008              +178 	dl	transmission:remote_address
00:009498 5CB005              +179 	ly, i	5, y
00:009499 3E049D              +180 	lcal	tcpagent_write_address
  :                            181 	
00:00949A 380003              +182 	pop	y
00:00949B 380005              +183 	pop	b
  :                            184 
00:00949C 350000              +185 	lret	0
  :                            186 
  :                            187 tcpagent_write_address		. distribute the address
00:00949D 9F0004              +188 	dpush	a		. into 5 tokens pre-BER
00:00949E 160010              +189 	dsr	16
00:00949F 0E0010              +190 	sbr	16
00:0094A0 C7B000              +191 	ds	0, y
00:0094A1 380004              +192 	pop	a
00:0094A2 A500FF              +193 	and, xi	255
00:0094A3 20B002              +194 	sa	2, y
00:0094A4 380004              +195 	pop	a
00:0094A5 160010              +196 	dsr	16
00:0094A6 0E0008              +197 	sbr	8
00:0094A7 C7B003              +198 	ds	3, y
00:0094A8 350000              +199 	lret	0
  :                            200 
                                tcpagent_neta	$head_far	 params(tanseq,		int	;
                                					tanflags,	int	;
  :                            203 					tanroutine,	int)
  :                            204 
  :                            205 
00:0094A9 602185              +206         la      tcx_v4(1)
00:0094AA 34002F              +207         sabr    BSOCKET
  :                            208 
00:0094AB 68F003              +209 	lb	tanseq
00:0094AC 3E04D7              +210 	lcal	tcpagent_search_exact
00:0094AD CE04B3              +211 	jzb	tcpagent_noneta
  :                            212 
00:0094AE CFD006              +213 	dl	transmission:socket_address, b
(+01)0f
00:0094AF C704C6              +214 	ds	tcp_mib_xnet
  :                            215 
00:0094B0 650002              +216 	la, xi	2
(+01)0f
00:0094B1 2004B9              +217 	sa	tcp_mib_oneta:seq
  :                            218 
(+01)10
00:0094B2 6D04B7              +219 	lb, xi	tcp_mib_oneta
  :                            220 
  :                            221 tcpagent_noneta
00:0094B3 3D0000              +222 	fret	0
  :                            223 
                                tcpagent_port	$head_far	 params(tapseq,		int	;
                                					tapflags,	int	;
  :                            226 					taproutine,	int)
  :                            227 
  :                            228 
00:0094B4 602185              +229         la      tcx_v4(1)
00:0094B5 34002F              +230         sabr    BSOCKET
  :                            231 
00:0094B6 68F003              +232 	lb	tapseq
00:0094B7 3E04D7              +233 	lcal	tcpagent_search_exact
00:0094B8 CE04BF              +234 	jzb	tcpagent_noport
  :                            235 
00:0094B9 CFD006              +236 	dl	transmission:socket_address, b
00:0094BA A809D3              +237 	andB	(65535)
(+01)0f
00:0094BB C704C6              +238 	ds	tcp_mib_xnet
  :                            239 
00:0094BC 650003              +240 	la, xi	3
(+01)0f
00:0094BD 2004C0              +241 	sa	tcp_mib_oport:seq
  :                            242 
(+01)10
00:0094BE 6D04BE              +243 	lb, xi	tcp_mib_oport
  :                            244 
  :                            245 tcpagent_noport
00:0094BF 3D0000              +246 	fret	0
  :                            247 
  :                            248 
  :                            249 
                                tcpagent_neta_remote	$head_far	 params(tanrseq,	int	;
                                						tanrflags,	int	;
  :                            252 						tanrroutine,	int)
  :                            253 
  :                            254 
00:0094C0 602185              +255         la      tcx_v4(1)
00:0094C1 34002F              +256         sabr    BSOCKET
  :                            257 
00:0094C2 68F003              +258 	lb	tanrseq
00:0094C3 3E04D7              +259 	lcal	tcpagent_search_exact
00:0094C4 CE04CA              +260 	jzb	tcpagent_noneta_remote
  :                            261 
00:0094C5 CFD008              +262 	dl	transmission:remote_address, b
(+01)0f
00:0094C6 C704C6              +263 	ds	tcp_mib_xnet
  :                            264 
00:0094C7 650004              +265 	la, xi	4
(+01)0f
00:0094C8 2004B9              +266 	sa	tcp_mib_oneta:seq
  :                            267 
(+01)10
00:0094C9 6D04B7              +268 	lb, xi	tcp_mib_oneta
  :                            269 
  :                            270 tcpagent_noneta_remote
00:0094CA 3D0000              +271 	fret	0
  :                            272 
                                tcpagent_port_remote	$head_far	 params(taprseq,	int	;
                                						taprflags,	int	;
  :                            275 						taprroutine,	int)
  :                            276 
00:0094CB 602185              +277         la      tcx_v4(1)
00:0094CC 34002F              +278         sabr    BSOCKET
  :                            279 
  :                            280 
00:0094CD 68F003              +281 	lb	taprseq
00:0094CE 3E04D7              +282 	lcal	tcpagent_search_exact
00:0094CF CE04D6              +283 	jzb	tcpagent_noport_remote
  :                            284 
00:0094D0 CFD008              +285 	dl	transmission:remote_address, b
00:0094D1 A809D3              +286 	andB	(65535)
(+01)0f
00:0094D2 C704C6              +287 	ds	tcp_mib_xnet
  :                            288 
00:0094D3 650005              +289 	la, xi	5
(+01)0f
00:0094D4 2004C0              +290 	sa	tcp_mib_oport:seq
  :                            291 
(+01)10
00:0094D5 6D04BE              +292 	lb, xi	tcp_mib_oport
  :                            293 
  :                            294 tcpagent_noport_remote
00:0094D6 3D0000              +295 	fret	0
  :                            296 
  :                            297 
  :                            298 tcpagent_search_exact
00:0094D7 8F0008              +299 	qpush	8
00:0094D8 3E0517              +300 	lcal	tcpagent_compress_tokens
00:0094D9 3E0507              +301 	lcal	tcpagent_search
00:0094DA 870008              +302 	qpop	8
  :                            303 
00:0094DB 700003              +304 	tz	y
00:0094DC 7C04E0              +305 	jdz	tcpagent_find
  :                            306 
  :                            307 tcpagent_runout
00:0094DD 6D0000              +308 	lb, xi	0
00:0094DE 650002              +309 	la, xi	SNMP_NOSUCHNAME
00:0094DF 350000              +310 	lret	0
  :                            311 
  :                            312 tcpagent_find
00:0094E0 68B001              +313 	lb	1, y
00:0094E1 650000              +314 	la, xi	0
00:0094E2 350000              +315 	lret	0
  :                            316 
  :                            317 tcpagent_search_forward
00:0094E3 60D001              +318 	la	1, b	. < 8 tokens = front of list 
00:0094E4 C5FFF8              +319 	aa, xi	-8	. 8..17 tokens means row
  :                            320 			.	          or row after
  :                            321 			. 18 tokens means row after
  :                            322 
00:0094E5 7E04EA              +323 	jc	tcpagent_search_on
(+01)0f
00:0094E6 5804AD              +324 	ly	tcp_mib_chain
00:0094E7 700003              +325 	tz	y
00:0094E8 B604E0              +326 	j	tcpagent_find
00:0094E9 B604DD              +327 	j	tcpagent_runout
  :                            328 
  :                            329 tcpagent_search_on	. 8 or more tokens
00:0094EA C5FFF6              +330 	aa, xi	-10
00:0094EB 7E04FA              +331 	jc	tcpagent_search_higher
  :                            332 	
00:0094EC 58D002              +333 	ly	2, b
00:0094ED 8CD002              +334 	ay, i	2, b	. zero the unsupplied tokens
  :                            335 tcpagent_zerof
00:0094EE C50001              +336 	aa, xi	1
00:0094EF 7E04F3              +337 	jc	tcpagent_search_as_high
00:0094F0 30B000              +338 	z	0, y
00:0094F1 5CB001              +339 	ly, i	1, y
00:0094F2 B604EE              +340 	j	tcpagent_zerof
  :                            341 
  :                            342 tcpagent_search_as_high
00:0094F3 8F0008              +343 	qpush	8
00:0094F4 3E0517              +344 	lcal	tcpagent_compress_tokens
00:0094F5 3E0507              +345 	lcal	tcpagent_search
00:0094F6 870008              +346 	qpop	8
  :                            347 
00:0094F7 700003              +348 	tz	y
00:0094F8 B604E0              +349 	j	tcpagent_find	. found equal or higher = OK
00:0094F9 B604DD              +350 	j	tcpagent_runout	. found lower or none
  :                            351 
  :                            352 tcpagent_search_higher
00:0094FA 8F0008              +353 	qpush	8
00:0094FB 3E0517              +354 	lcal	tcpagent_compress_tokens
00:0094FC 3E0507              +355 	lcal	tcpagent_search
00:0094FD 870008              +356 	qpop	8
  :                            357 
00:0094FE 700003              +358 	tz	y
00:0094FF B60501              +359 	j	$+2
00:009500 B604DD              +360 	j	tcpagent_runout	. found lower or none
00:009501 7C0503              +361 	jdz	$+2		. found equal
00:009502 B604E0              +362 	j	tcpagent_find	. found higher = OK
00:009503 58B000              +363 	ly	0, y		. next
00:009504 700003              +364 	tz	y
00:009505 B604E0              +365 	j	tcpagent_find	. found higher = OK
00:009506 B604DD              +366 	j	tcpagent_runout	
  :                            367 
  :                            368 
  :                            369 tcpagent_search
(+01)10
00:009507 5D04AD              +370 	ly, xi	tcp_mib_chain
  :                            371 
  :                            372 tcpagent_search_next	. seach until the connection
00:009508 500003              +373 	lx	y	. in the list is not <
00:009509 58B000              +374 	ly	0, y	. then decide if what you got
  :                            375 			. is what you wanted
00:00950A 700003              +376 	tz	y
00:00950B B6050D              +377 	j	tcpagent_test_local
00:00950C 350000              +378 	lret	0
  :                            379 
  :                            380 tcpagent_test_local
00:00950D 60B001              +381 	la	1, y
00:00950E 4FC006              +382 	ql	transmission:socket_address, a
00:00950F DF0008              +383 	dan	8
00:009510 5E0508              +384 	jnc	tcpagent_search_next
00:009511 7C0513              +385 	jdz	tcpagent_test_remote
00:009512 350000              +386 	lret	0	. connection in list is >
  :                            387 tcpagent_test_remote
00:009513 CF0006              +388 	dl	6
00:009514 DF000A              +389 	dan	10
00:009515 5E0508              +390 	jnc	tcpagent_search_next
00:009516 350000              +391 	lret	0
  :                            392 	
  :                            393 
  :                            394 
  :                            395 tcpagent_compress_tokens
00:009517 4809D3              +396 	lk	(00FFFF)
00:009518 5CD009              +397 	ly, i	9, b
00:009519 3E051F              +398 	lcal	tcpagent_compress_address
00:00951A 5CB005              +399 	ly, i	5, y
00:00951B C70008              +400 	ds	8
00:00951C 3E051F              +401 	lcal	tcpagent_compress_address
00:00951D C7000A              +402 	ds	10
00:00951E 350000              +403 	lret	0
  :                            404 
  :                            405 tcpagent_compress_address
00:00951F CFB000              +406 	dl	0, y
00:009520 2E0010              +407 	sbl	16
00:009521 360008              +408 	dsl	8
00:009522 68B002              +409 	lb	2, y
00:009523 2E0010              +410 	sbl	16
00:009524 360008              +411 	dsl	8
00:009525 68B003              +412 	lb	3, y
00:009526 2E0010              +413 	sbl	16
00:009527 BFB004              +414 	mlb	4, y
00:009528 350000              +415 	lret	0
  :                            256: 	$include tcpagen2
  :                            1 
  :                            2 
  :                            3 $(1)
  :                            4 
                                tco_total_o	mobjet	0	9	SNMP_GAUGE.6	6	;
01:0004C8 000000              +6 			1	0	0	tco_total_i
(+01)18
01:0004C9 0004CF              +6 
01:0004CA 000009              +6 
01:0004CB 000042              +6 
01:0004CC 000006              +6 
01:0004CD 000001              +6 
01:0004CE 000001              +6 
  :                            7 
  :                            8 
01:0004CF 000000000000        +9 tco_total_i	0L
  :                            10 
  :                            11 $(0)
  :                            12 
  :                            13 tcpagent_established $tree
  :                            14 
00:009529 054000              +15 	on	see$1
00:00952A F8106F              +16 	push	ABT+BSOCKET
00:00952B 0D4000              +17 	off	see$1				. save socket page
  :                            18 
00:00952C 3E0533              +19 	lcal	accumulate
(+01)0f
00:00952D C704CF              +20 	ds	tco_total_i
  :                            21 
00:00952E 380004              +22 	pop	a
00:00952F 34002F              +23 	sabr	BSOCKET				. rebase socket page
  :                            24 
00:009530 650000              +25 	la	0,,xi
(+01)10
00:009531 6D04C8              +26 	lb	tco_total_o,,xi
00:009532 3D0000              +27 	fret	0
  :                            28 
  :                            29 accumulate
00:009533 300007              +30 	z	7
00:009534 300006              +31 	z	6
00:009535 602185              +32 	la	tcx_v4(1)
00:009536 5009D7              +33 	lx	(BSOCKET*/18++028:s)		. 1st table starts @ + 40
  :                            34 
00:009537 34002F              +35 nextp	sabr	BSOCKET
00:009538 4089D8              +36 	lr	*(BSOCKET*/18++tlist:top:s)	. all tables end where they end
  :                            37 
00:009539 F60544              +38 nextc	jxge	along				. possibly before they start
  :                            39 
00:00953A 60A001              +40 	la	transmission:state
00:00953B C5FFFB              +41 	aa	-TCP_ESTABLISHED,,xi
00:00953C C6053F              +42 	jza	upcount
00:00953D C5FFF8              +43 	aa	-TCP_CLOSEWAIT,,xi
00:00953E D60542              +44 	jnza	next
  :                            45 
00:00953F 6D0001              +46 upcount	lb	1,,xi				. 000000 000001 -> [ a b ]
00:009540 D70006              +47 	da	6
00:009541 C70006              +48 	ds	6
  :                            49 
00:009542 850018              +50 next	ax	24,,xi				. next connection
00:009543 B60539              +51 	j	nextc
  :                            52 
00:009544 6089D9              +53 along	la	*(BSOCKET*/18++tlist:link:s)	. next table
00:009545 5009DA              +54 	lx	(BSOCKET*/18++040:s)	. tables after 1st start @ + 64
00:009546 D60537              +55 	jnza	nextp
  :                            56 
00:009547 CF0006              +57 	dl	6
00:009548 350000              +58 	lret	0
  :                            59 
  :                            60 	$root
  :                            257 
  :                            258: 	$include idragent
  :                            1 $(1)
  :                            2 
01:0004D1 000063              +3 inetcidr_gauge	+	99
01:0004D2 FFFFFFFFFF9D        +4 inetcidr_xnet	-	99L
  :                            5 
                                inetcidr_ogauge	mobjet	0	0	SNMP_GAUGE	3	1	;
01:0004D4 000000              +7 			0	0	inetcidr_gauge
(+01)18
01:0004D5 0004D1              +7 
01:0004D6 000000              +7 
01:0004D7 000042              +7 
01:0004D8 000003              +7 
01:0004D9 000001              +7 
01:0004DA 000001              +7 
  :                            8 
                                inetcidr_oaddress mobjet 0	0	SNMP_STRING	4	1	;
01:0004DB 000000              +10 			0	0	inetcidr_xnet
(+01)18
01:0004DC 0004D2              +10 
01:0004DD 000000              +10 
01:0004DE 000004              +10 
01:0004DF 000004              +10 
01:0004E0 000001              +10 
01:0004E1 000001              +10 
  :                            11 
  :                            12 $(0)
  :                            13 
                                ipagent_cidr_tabler	$head_near	 params(ipacidrseq,	int	;
                                						ipacidrlist,	int	;
                                						ipcidro,	int	;
                                						ipcidrroutine,	int	;
  :                            18 						ipcidr_tableidx,int	)
  :                            19 
00:009549 50F003              +20 	lx	ipacidrlist		. entering table sequentially?
00:00954A 60F002              +21 	la	ipacidrseq		. check length of oid
00:00954B 68C001              +22 	lb	1, a
00:00954C CDFFF0              +23 	ab	-16,,xi
00:00954D 5E0562              +24 	jnc	ipagent_cidr_tabler_readdress
  :                            25 
00:00954E 68C008              +26 	lb	8, a			. correct table?
00:00954F B8F006              +27 	xorB	ipcidr_tableidx
00:009550 DE0562              +28 	jnzb	ipagent_cidr_tabler_readdress
  :                            29 
00:009551 68F002              +30 	lb	ipacidrseq
00:009552 60F005              +31 	la	ipcidrroutine
00:009553 C5FF60              +32 	aa	-SNMP_GETREQ,,xi
00:009554 D60557              +33 	jnza	ipagent_cidr_address_along
  :                            34 
00:009555 3E056A              +35 	lcal	ipagent_cidr_search_exact
00:009556 B60565              +36 	j	ipagent_cidr_tabler_address!
  :                            37 		
  :                            38 ipagent_cidr_address_along
00:009557 3E056C              +39 	lcal	ipagent_cidr_search_forward
00:009558 680002              +40 	lb	x
00:009559 60F002              +41 	la	ipacidrseq
00:00955A DE0562              +42 	jnzb	ipagent_cidr_tabler_readdress
  :                            43 
00:00955B 1FC001              +44 	dec	1, a			. tweak oid length to prompt next subtable
00:00955C 17C009              +45 	inc	9, a			. this is the 7 specifier after the 24 specifier
00:00955D 30C00C              +46 	z	12, a
00:00955E 30C00D              +47 	z	13, a
00:00955F 30C00E              +48 	z	14, a
00:009560 30C00F              +49 	z	15, a			. clear the address field of the oid
00:009561 B60565              +50 	j	ipagent_cidr_tabler_noaddress
  :                            51 	
  :                            52 ipagent_cidr_tabler_readdress
00:009562 3E0567              +53 	lcal	ipagent_cidr_write_oid_tokens
00:009563 60F004              +54 	la	ipcidro
00:009564 28C002              +55 	sb	mo:seq, a
  :                            56 
  :                            57 ipagent_cidr_tabler_address!
  :                            58 ipagent_cidr_tabler_noaddress
00:009565 680002              +59 	lb	x
00:009566 350000              +60 	$ret
  :                            61 
  :                            62 ipagent_cidr_write_oid_tokens
00:009567 5CC00E              +63 	ly	14, a, i
00:009568 CFA003              +64 	dl	ro:net
00:009569 B603DC              +65 	j	ipagent_write2oid
  :                            66 
  :                            67 ipagent_cidr_search_exact
00:00956A 5CD00E              +68 	ly	14, b, i
00:00956B B603E6              +69 	j	ipagent_search_id	
  :                            70 
  :                            71 ipagent_cidr_search_forward
00:00956C 5CD00E              +72 	ly	14, b, i
00:00956D B603ED              +73 	j	ipagent_search_nextid
  :                            74 
  :                            75 
  :                            76 ipagent_cidr_route_dest_type		. seq 1 value 1 for ipv4
                                	$head_far		 params(cidrdesttypeseq,	int	;
                                					cidrdesttypeflags,	int	;
  :                            79 					cidrdesttyperoutine,	int	)
  :                            80 
                                	lc	ipagent_cidr_tabler	cidrdesttypeseq		;
                                					route_lexical		;
                                					ipromib_oifidx,,xi	;
                                					cidrdesttyperoutine	;
00:00956E FD0018              +85 					24,,xi
00:00956F F8F006              +85 
(+01)10
00:009570 FD04A6              +85 
(+01)0f
00:009571 F8024C              +85 
00:009572 F8F007              +85 
00:009573 FCF005              +85 
00:009574 3E0549              +85 
00:009575 38000F              +85 
  :                            86 
00:009576 CE057A              +87 	jzb	ipagent_cidr_route_dest_notype
00:009577 650001              +88 	la	1,,xi
(+01)0f
00:009578 20049C              +89 	sa	ipromib_i_f
(+01)10
00:009579 6D04A6              +90 	lb	ipromib_oifidx,,xi
  :                            91 
  :                            92 ipagent_cidr_route_dest_notype
00:00957A 3D0000              +93 	fret	0
  :                            94 
  :                            95 
  :                            96 ipagent_cidr_route_dest			. seq 2
                                	$head_far		 params(cidrdestseq,		int	;
                                					cidrdestflags,		int	;
  :                            99 					cidrdestroutine,	int	)
  :                            100 
                                	lc	ipagent_cidr_tabler	cidrdestseq		;
                                					route_lexical		;
                                					inetcidr_oaddress,,xi	;
                                					cidrdestroutine		;
00:00957B FD0018              +105 					24,,xi
00:00957C F8F006              +105 
(+01)10
00:00957D FD04DB              +105 
(+01)0f
00:00957E F8024C              +105 
00:00957F F8F007              +105 
00:009580 FCF005              +105 
00:009581 3E0549              +105 
00:009582 38000F              +105 
  :                            106 
00:009583 CE0589              +107 	jzb	ipagent_cidr_route_nodest
00:009584 CFA003              +108 	dl	ro:net
00:009585 2E0008              +109 	sbl	8			. compress 2 halves network address
00:009586 360008              +110 	dsl	8			. giving n.n.n.n : 0000
(+01)0f
00:009587 C704D2              +111 	ds	inetcidr_xnet
(+01)10
00:009588 6D04DB              +112 	lb	inetcidr_oaddress,,xi
  :                            113 
  :                            114 ipagent_cidr_route_nodest
00:009589 3D0000              +115 	fret	0
  :                            116 
  :                            117 ipagent_cidr_route_mask_log		. seq 3
                                	$head_far		 params(cidrmasklogseq,		int	;
                                					cidrmasklogflags,	int	;
  :                            120 					cidrmasklogroutine,	int	)
  :                            121 
                                	lc	ipagent_cidr_tabler	cidrmasklogseq		;
                                					route_lexical		;
                                					inetcidr_ogauge,,xi	;
                                					cidrmasklogroutine	;
00:00958A FD0018              +126 					24,,xi
00:00958B F8F006              +126 
(+01)10
00:00958C FD04D4              +126 
(+01)0f
00:00958D F8024C              +126 
00:00958E F8F007              +126 
00:00958F FCF005              +126 
00:009590 3E0549              +126 
00:009591 38000F              +126 
  :                            127 
00:009592 CE0596              +128 	jzb	ipagent_cidr_route_nomask_log
00:009593 60A009              +129 	la	ro:mask_log
(+01)0f
00:009594 2004D1              +130 	sa	inetcidr_gauge
(+01)10
00:009595 6D04D4              +131 	lb	inetcidr_ogauge,,xi
  :                            132 
  :                            133 ipagent_cidr_route_nomask_log
00:009596 3D0000              +134 	fret	0
  :                            135 
  :                            136 ipagent_cidr_route_next_hop_type	. seq 5 value 0 for local, 1 for for ipv4 remote
                                	$head_far		 params(cidrnexthoptypeseq,	int	;
                                					cidrnexthoptypeflags,	int	;
  :                            139 					cidrnexthoptyperoutine,	int	)
  :                            140 
                                	lc	ipagent_cidr_tabler	cidrnexthoptypeseq	;
                                					route_lexical		;
                                					ipromib_oifidx,,xi	;
                                					cidrnexthoptyperoutine	;
00:009597 FD0018              +145 					24,,xi
00:009598 F8F006              +145 
(+01)10
00:009599 FD04A6              +145 
(+01)0f
00:00959A F8024C              +145 
00:00959B F8F007              +145 
00:00959C FCF005              +145 
00:00959D 3E0549              +145 
00:00959E 38000F              +145 
  :                            146 
00:00959F CE05A4              +147 	jzb	ipagent_cidr_route_nonext_hop_type
00:0095A0 60A002              +148 	la	ro:i_f
00:0095A1 060017              +149 	sar	23			. gives 0 for not remote
(+01)0f
00:0095A2 20049C              +150 	sa	ipromib_i_f		. or 1 for ipv4
(+01)10
00:0095A3 6D04A6              +151 	lb	ipromib_oifidx,,xi
  :                            152 
  :                            153 ipagent_cidr_route_nonext_hop_type
00:0095A4 3D0000              +154 	fret	0
  :                            155 
  :                            156 ipagent_cidr_route_next_hop		. seq 6 0.0.0.0 for local, gateway for remote
                                	$head_far		 params(cidrnexthopseq,		int	;
                                					cidrnexthopflags,	int	;
  :                            159 					cidrnexthoproutine,	int	)
  :                            160 
                                	lc	ipagent_cidr_tabler	cidrnexthopseq		;
                                					route_lexical		;
                                					inetcidr_oaddress,,xi	;
                                					cidrnexthoproutine	;
00:0095A5 FD0018              +165 					24,,xi
00:0095A6 F8F006              +165 
(+01)10
00:0095A7 FD04DB              +165 
(+01)0f
00:0095A8 F8024C              +165 
00:0095A9 F8F007              +165 
00:0095AA FCF005              +165 
00:0095AB 3E0549              +165 
00:0095AC 38000F              +165 
  :                            166 
00:0095AD CE05B6              +167 	jzb	ipagent_cidr_route_nonext_hop
00:0095AE CFA007              +168 	dl	ro:next_hop
00:0095AF 2E0008              +169 	sbl	8			. compress two halves network address
00:0095B0 360008              +170 	dsl	8			. giving n.n.n.n : 0000
00:0095B1 78A002              +171 	tn	ro:i_f			. remote / indirect route?
00:0095B2 B605B4              +171 
00:0095B3 160030              +172 	dsr	48			. zero for local so they say
(+01)0f
00:0095B4 C704D2              +173 	ds	inetcidr_xnet
(+01)10
00:0095B5 6D04DB              +174 	lb	inetcidr_oaddress,,xi
  :                            175 
  :                            176 ipagent_cidr_route_nonext_hop
00:0095B6 3D0000              +177 	fret	0
  :                            178 
  :                            179 ipagent_cidr_route_ifidx		. seq 7
                                	$head_far		 params(cidrrouteifidxseq,	int	;
                                					cidrrouteifidxflags,	int	;
  :                            182 					cidrrouteifidxroutine,	int	)
  :                            183 
                                	lc	ipagent_cidr_tabler	cidrrouteifidxseq	;
                                					route_lexical		;
                                					ipromib_oifidx,,xi	;
                                					cidrrouteifidxroutine	;
00:0095B7 FD0018              +188 					24,,xi
00:0095B8 F8F006              +188 
(+01)10
00:0095B9 FD04A6              +188 
(+01)0f
00:0095BA F8024C              +188 
00:0095BB F8F007              +188 
00:0095BC FCF005              +188 
00:0095BD 3E0549              +188 
00:0095BE 38000F              +188 
  :                            189 
00:0095BF CE05C4              +190 	jzb	ipagent_cidr_route_noifidx
00:0095C0 60A002              +191 	la	ro:i_f
00:0095C1 A57FFF              +192 	and	07FFF,,xi		. drop the indirection bit
(+01)0f
00:0095C2 20049C              +193 	sa	ipromib_i_f		. leaving relative-1 i/f number
(+01)10
00:0095C3 6D04A6              +194 	lb	ipromib_oifidx,,xi
  :                            195 
  :                            196 ipagent_cidr_route_noifidx
00:0095C4 3D0000              +197 	fret	0
  :                            198 
  :                            199 ipagent_cidr_route_type			. seq 8 value 3 for local 4 for remote
                                	$head_far		 params(cidrroutetypeseq,	int	;
                                					cidrroutetypeflags,	int	;
  :                            202 					cidrroutetyperoutine,	int	)
  :                            203 
                                	lc	ipagent_cidr_tabler	cidrroutetypeseq	;
                                					route_lexical		;
                                					ipromib_oifidx,,xi	;
                                					cidrroutetyperoutine	;
00:0095C5 FD0018              +208 					24,,xi
00:0095C6 F8F006              +208 
(+01)10
00:0095C7 FD04A6              +208 
(+01)0f
00:0095C8 F8024C              +208 
00:0095C9 F8F007              +208 
00:0095CA FCF005              +208 
00:0095CB 3E0549              +208 
00:0095CC 38000F              +208 
  :                            209 
00:0095CD CE05D3              +210 	jzb	ipagent_cidr_route_notype
00:0095CE 60A002              +211 	la	ro:i_f
00:0095CF 060017              +212 	sar	23			. add 3 to the indirection bit
00:0095D0 64C003              +213 	la	3, a, i			. giving 3 direct or 4 indirect
(+01)0f
00:0095D1 20049C              +214 	sa	ipromib_i_f
(+01)10
00:0095D2 6D04A6              +215 	lb	ipromib_oifidx,,xi
  :                            216 
  :                            217 ipagent_cidr_route_notype
00:0095D3 3D0000              +218 	fret	0
  :                            259: 	$include loadplan
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 	$sterm	'.'
  :                            41 
00:0095D4 040706              +42 sysDescr	mvo	SNMP_OID.7.43.6.1.2.1.1.1	SNMP_STRING.24	 "RTA1 running OS smaragd7"
00:0095D5 0009DB              +42 
00:0095D6 000018              +42 
(+01)18
00:0095D7 0004E2              +42 
00:0095D8 000001              +42 
00:0095D9 000008              +42 
01:0004E2 525441312072756E6E696E67204F5320736D617261676437
                              +42 
00:0095DA 060706              +43 sysObjectID	mvo	SNMP_OID.7.43.6.1.2.1.1.2	SNMP_OID.2	 0.0
00:0095DB 0009DE              +43 
00:0095DC 000002              +43 
(+01)18
00:0095DD 0004EA              +43 
00:0095DE 000001              +43 
00:0095DF 000001              +43 
01:0004EA 0009D6              +43 
00:0095E0 640706              +44 sysUpTime	mvo	SNMP_OID.7.43.6.1.2.1.1.3	MIB_FUNCTION	 mib2ticks
00:0095E1 0009E1              +44 
00:0095E2 000000              +44 
00:0095E3 000245              +44 
00:0095E4 000001              +44 
00:0095E5 000000              +44 
00:0095E6 040706              +45 sysContact	mvo	SNMP_OID.7.43.6.1.2.1.1.4	SNMP_STRING.18	 "TimMilesCox@gmx.ch"
00:0095E7 0009E4              +45 
00:0095E8 000012              +45 
(+01)18
00:0095E9 0004EB              +45 
00:0095EA 000001              +45 
00:0095EB 000006              +45 
01:0004EB 54696D4D696C6573436F7840676D782E6368
                              +45 
00:0095EC 040706              +46 sysName	mvo	SNMP_OID.7.43.6.1.2.1.1.5	SNMP_STRING.4	 "RTA1"
00:0095ED 0009E7              +46 
00:0095EE 000004              +46 
(+01)18
00:0095EF 0004F1              +46 
00:0095F0 000001              +46 
00:0095F1 000002              +46 
01:0004F1 525441310000        +46 
00:0095F2 040706              +47 sysLocation	mvo	SNMP_OID.7.43.6.1.2.1.1.6	SNMP_STRING.9	 "worldwide"
00:0095F3 0009EA              +47 
00:0095F4 000009              +47 
(+01)18
00:0095F5 0004F3              +47 
00:0095F6 000001              +47 
00:0095F7 000003              +47 
01:0004F3 776F726C6477696465  +47 
00:0095F8 020706              +48 sysServices	mvo	SNMP_OID.7.43.6.1.2.1.1.7	SNMP_INT.3	 0
00:0095F9 0009ED              +48 
00:0095FA 000003              +48 
(+01)18
00:0095FB 0004F6              +48 
00:0095FC 000001              +48 
00:0095FD 000000              +48 
01:0004F6 000000              +48 
  :                            49 
00:0095FE 020706              +50 ifNumber	mvo	SNMP_OID.7.43.6.1.2.1.2.1	SNMP_INT.3	 0
00:0095FF 0009F0              +50 
00:009600 000003              +50 
(+01)18
00:009601 0004F7              +50 
00:009602 000001              +50 
00:009603 000000              +50 
01:0004F7 000000              +50 
00:009604 640906              +51 ifIndex		mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.1	MIB_FUNCTION	 if_agentidx
00:009605 0009F3              +51 
00:009606 000000              +51 
00:009607 000248              +51 
00:009608 000001              +51 
00:009609 000000              +51 
00:00960A 640906              +52 ifDescr         mvo     SNMP_OID.9.43.6.1.2.1.2.2.0.2   MIB_FUNCTION	 if_agentdescr 
00:00960B 0009F6              +52 
00:00960C 000000              +52 
00:00960D 000249              +52 
00:00960E 000001              +52 
00:00960F 000000              +52 
00:009610 640906              +53 ifType		mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.3   MIB_FUNCTION	 if_agenttype
00:009611 0009F9              +53 
00:009612 000000              +53 
00:009613 00024A              +53 
00:009614 000001              +53 
00:009615 000000              +53 
00:009616 640906              +54 ifMTU		mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.4	MIB_FUNCTION	 if_agentMTU
00:009617 0009FC              +54 
00:009618 000000              +54 
00:009619 00024B              +54 
00:00961A 000001              +54 
00:00961B 000000              +54 
00:00961C 640906              +55 ifSpeed		mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.5	MIB_FUNCTION	 if_agentspeed
00:00961D 0009FF              +55 
00:00961E 000000              +55 
00:00961F 00024C              +55 
00:009620 000001              +55 
00:009621 000000              +55 
00:009622 640906              +56 ifPhysAddress	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.6	MIB_FUNCTION	 if_agentphy
00:009623 000A02              +56 
00:009624 000000              +56 
00:009625 00024D              +56 
00:009626 000001              +56 
00:009627 000000              +56 
00:009628 640906              +57 ifAdminStatus	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.7	MIB_FUNCTION	 if_agentadmins
00:009629 000A05              +57 
00:00962A 000000              +57 
00:00962B 00024E              +57 
00:00962C 000001              +57 
00:00962D 000000              +57 
00:00962E 640906              +58 ifOperStatus	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.8	MIB_FUNCTION	 if_agentosta
00:00962F 000A08              +58 
00:009630 000000              +58 
00:009631 00024F              +58 
00:009632 000001              +58 
00:009633 000000              +58 
00:009634 640906              +59 ifLastChange	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.9	MIB_FUNCTION	 if_agentlastc
00:009635 000A0B              +59 
00:009636 000000              +59 
00:009637 000250              +59 
00:009638 000001              +59 
00:009639 000000              +59 
00:00963A 640906              +60 ifInOctets	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.10	MIB_FUNCTION	 if_agentibytes
00:00963B 000A0E              +60 
00:00963C 000000              +60 
00:00963D 000251              +60 
00:00963E 000001              +60 
00:00963F 000000              +60 
00:009640 640906              +61 ifInUcastPkts	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.11	MIB_FUNCTION	 if_agentiucast
00:009641 000A11              +61 
00:009642 000000              +61 
00:009643 000252              +61 
00:009644 000001              +61 
00:009645 000000              +61 
00:009646 640906              +62 ifInNUcastPkts	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.12	MIB_FUNCTION	 if_agentimcast
00:009647 000A14              +62 
00:009648 000000              +62 
00:009649 000253              +62 
00:00964A 000001              +62 
00:00964B 000000              +62 
00:00964C 640906              +63 ifInDiscards	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.13	MIB_FUNCTION	 if_agentidrops
00:00964D 000A17              +63 
00:00964E 000000              +63 
00:00964F 000254              +63 
00:009650 000001              +63 
00:009651 000000              +63 
00:009652 640906              +64 ifInErrors	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.14	MIB_FUNCTION	 if_agentierrs
00:009653 000A1A              +64 
00:009654 000000              +64 
00:009655 000255              +64 
00:009656 000001              +64 
00:009657 000000              +64 
00:009658 640906              +65 ifInUnknownProtos mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.15	MIB_FUNCTION	 if_agentinoproto
00:009659 000A1D              +65 
00:00965A 000000              +65 
00:00965B 000256              +65 
00:00965C 000001              +65 
00:00965D 000000              +65 
00:00965E 640906              +66 ifOutOctets	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.16	MIB_FUNCTION	 if_agentobytes
00:00965F 000A20              +66 
00:009660 000000              +66 
00:009661 000257              +66 
00:009662 000001              +66 
00:009663 000000              +66 
00:009664 640906              +67 ifOutUcastPkts	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.17	MIB_FUNCTION	 if_agentoucast
00:009665 000A23              +67 
00:009666 000000              +67 
00:009667 000258              +67 
00:009668 000001              +67 
00:009669 000000              +67 
00:00966A 640906              +68 ifOutNUcastPkts	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.18	MIB_FUNCTION	 if_agentomcast
00:00966B 000A26              +68 
00:00966C 000000              +68 
00:00966D 000259              +68 
00:00966E 000001              +68 
00:00966F 000000              +68 
00:009670 640906              +69 ifOutDiscards	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.19	MIB_FUNCTION	 if_agentodrops
00:009671 000A29              +69 
00:009672 000000              +69 
00:009673 00025A              +69 
00:009674 000001              +69 
00:009675 000000              +69 
00:009676 640906              +70 ifOutErrors	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.20	MIB_FUNCTION	 if_agentoerrs
00:009677 000A2C              +70 
00:009678 000000              +70 
00:009679 00025B              +70 
00:00967A 000001              +70 
00:00967B 000000              +70 
00:00967C 640906              +71 ifOutQLen	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.21	MIB_FUNCTION	 if_agentoqlen
00:00967D 000A2F              +71 
00:00967E 000000              +71 
00:00967F 00025C              +71 
00:009680 000001              +71 
00:009681 000000              +71 
00:009682 640906              +72 ifSpecific	mvo	SNMP_OID.9.43.6.1.2.1.2.2.0.22	MIB_FUNCTION.7	 if_agentsmib
00:009683 000A32              +72 
00:009684 000007              +72 
00:009685 00025D              +72 
00:009686 000001              +72 
00:009687 000000              +72 
  :                            73 
  :                            74 	$if	AT_AGENT
  :                            75 atIfIndex	mvo	SNMP_OID.9.43.6.1.2.1.3.1.1.1	MIB_FUNCTION	at_agentifindex
  :                            76 atPhysAddress	mvo	SNMP_OID.9.43.6.1.2.1.3.1.1.2	MIB_FUNCTION	at_agentphysa
  :                            77 atNetAddress	mvo	SNMP_OID.9.43.6.1.2.1.3.1.1.3	MIB_FUNCTION	at_agentnetaddress
  :                            78 	$endif
  :                            79 
00:009688 020708              +80 ipForwarding	mvo	SNMP_OID.7.43.6.1.2.1.4.1	SNMP_INT.3	 1	1:2
00:009689 000A35              +80 
00:00968A 000003              +80 
(+01)18
00:00968B 0004F8              +80 
00:00968C 000003              +80 
00:00968D 000001              +80 
00:00968E 000001000002        +80 
01:0004F8 000001              +80 
00:009690 020706              +81 ipDefaultTTL	mvo	SNMP_OID.7.43.6.1.2.1.4.2	SNMP_INT.3	 60
00:009691 000A38              +81 
00:009692 000003              +81 
(+01)18
00:009693 0004F9              +81 
00:009694 000001              +81 
00:009695 000000              +81 
01:0004F9 00003C              +81 
00:009696 410706              +82 ipInReceives	mvo	SNMP_OID.7.43.6.1.2.1.4.3	SNMP_COUNTER.6	 0
00:009697 000A3B              +82 
00:009698 000006              +82 
(+01)18
00:009699 0004FA              +82 
00:00969A 000001              +82 
00:00969B 000000              +82 
01:0004FA 000000000000        +82 
00:00969C 410706              +83 ipInHdrErrors	mvo	SNMP_OID.7.43.6.1.2.1.4.4	SNMP_COUNTER.6	 0
00:00969D 000A3E              +83 
00:00969E 000006              +83 
(+01)18
00:00969F 0004FC              +83 
00:0096A0 000001              +83 
00:0096A1 000000              +83 
01:0004FC 000000000000        +83 
00:0096A2 410706              +84 ipInAddrErrors	mvo	SNMP_OID.7.43.6.1.2.1.4.5	SNMP_COUNTER.6	 0
00:0096A3 000A41              +84 
00:0096A4 000006              +84 
(+01)18
00:0096A5 0004FE              +84 
00:0096A6 000001              +84 
00:0096A7 000000              +84 
01:0004FE 000000000000        +84 
00:0096A8 410706              +85 ipForwDatagrams	mvo	SNMP_OID.7.43.6.1.2.1.4.6	SNMP_COUNTER.6	 0
00:0096A9 000A44              +85 
00:0096AA 000006              +85 
(+01)18
00:0096AB 000500              +85 
00:0096AC 000001              +85 
00:0096AD 000000              +85 
01:000500 000000000000        +85 
00:0096AE 410706              +86 ipInUnknownProtos mvo	SNMP_OID.7.43.6.1.2.1.4.7	SNMP_COUNTER.6	 0
00:0096AF 000A47              +86 
00:0096B0 000006              +86 
(+01)18
00:0096B1 000502              +86 
00:0096B2 000001              +86 
00:0096B3 000000              +86 
01:000502 000000000000        +86 
00:0096B4 410706              +87 ipInDiscards	mvo	SNMP_OID.7.43.6.1.2.1.4.8	SNMP_COUNTER.6	 0
00:0096B5 000A4A              +87 
00:0096B6 000006              +87 
(+01)18
00:0096B7 000504              +87 
00:0096B8 000001              +87 
00:0096B9 000000              +87 
01:000504 000000000000        +87 
00:0096BA 410706              +88 ipInDelivers	mvo	SNMP_OID.7.43.6.1.2.1.4.9	SNMP_COUNTER.6	 0
00:0096BB 000A4D              +88 
00:0096BC 000006              +88 
(+01)18
00:0096BD 000506              +88 
00:0096BE 000001              +88 
00:0096BF 000000              +88 
01:000506 000000000000        +88 
00:0096C0 410706              +89 ipOutRequests	mvo	SNMP_OID.7.43.6.1.2.1.4.10	SNMP_COUNTER.6	 0
00:0096C1 000A50              +89 
00:0096C2 000006              +89 
(+01)18
00:0096C3 000508              +89 
00:0096C4 000001              +89 
00:0096C5 000000              +89 
01:000508 000000000000        +89 
00:0096C6 410706              +90 ipOutDiscards	mvo	SNMP_OID.7.43.6.1.2.1.4.11	SNMP_COUNTER.6	 0
00:0096C7 000A53              +90 
00:0096C8 000006              +90 
(+01)18
00:0096C9 00050A              +90 
00:0096CA 000001              +90 
00:0096CB 000000              +90 
01:00050A 000000000000        +90 
00:0096CC 410706              +91 ipOutNoRoutes	mvo	SNMP_OID.7.43.6.1.2.1.4.12	SNMP_COUNTER.6	 0
00:0096CD 000A56              +91 
00:0096CE 000006              +91 
(+01)18
00:0096CF 00050C              +91 
00:0096D0 000001              +91 
00:0096D1 000000              +91 
01:00050C 000000000000        +91 
00:0096D2 020706              +92 ipReasmTimeOut	mvo	SNMP_OID.7.43.6.1.2.1.4.13	SNMP_INT.3	 8
00:0096D3 000A59              +92 
00:0096D4 000003              +92 
(+01)18
00:0096D5 00050E              +92 
00:0096D6 000001              +92 
00:0096D7 000000              +92 
01:00050E 000008              +92 
00:0096D8 410706              +93 ipReasmReqds	mvo	SNMP_OID.7.43.6.1.2.1.4.14	SNMP_COUNTER.6	 0
00:0096D9 000A5C              +93 
00:0096DA 000006              +93 
(+01)18
00:0096DB 00050F              +93 
00:0096DC 000001              +93 
00:0096DD 000000              +93 
01:00050F 000000000000        +93 
00:0096DE 410706              +94 ipReasmOKs	mvo	SNMP_OID.7.43.6.1.2.1.4.15	SNMP_COUNTER.6	 0
00:0096DF 000A5F              +94 
00:0096E0 000006              +94 
(+01)18
00:0096E1 000511              +94 
00:0096E2 000001              +94 
00:0096E3 000000              +94 
01:000511 000000000000        +94 
00:0096E4 410706              +95 ipReasmFails	mvo	SNMP_OID.7.43.6.1.2.1.4.16	SNMP_COUNTER.6	 0
00:0096E5 000A62              +95 
00:0096E6 000006              +95 
(+01)18
00:0096E7 000513              +95 
00:0096E8 000001              +95 
00:0096E9 000000              +95 
01:000513 000000000000        +95 
00:0096EA 410706              +96 ipFragOKs	mvo	SNMP_OID.7.43.6.1.2.1.4.17	SNMP_COUNTER.6	 0
00:0096EB 000A65              +96 
00:0096EC 000006              +96 
(+01)18
00:0096ED 000515              +96 
00:0096EE 000001              +96 
00:0096EF 000000              +96 
01:000515 000000000000        +96 
00:0096F0 410706              +97 ipFragFails	mvo	SNMP_OID.7.43.6.1.2.1.4.18	SNMP_COUNTER.6	 0
00:0096F1 000A68              +97 
00:0096F2 000006              +97 
(+01)18
00:0096F3 000517              +97 
00:0096F4 000001              +97 
00:0096F5 000000              +97 
01:000517 000000000000        +97 
00:0096F6 410706              +98 ipFragCreates	mvo	SNMP_OID.7.43.6.1.2.1.4.19	SNMP_COUNTER.6	 0
00:0096F7 000A6B              +98 
00:0096F8 000006              +98 
(+01)18
00:0096F9 000519              +98 
00:0096FA 000001              +98 
00:0096FB 000000              +98 
01:000519 000000000000        +98 
  :                            99 
  :                            100 
  :                            101 IP_ADDRESS_AGENT $equ	1
  :                            102 IP_ROUTE_AGENT	$equ	1
  :                            103 
  :                            104 		$if	IP_ADDRESS_AGENT
00:0096FC 640D06              +105 ipAdEntAddr	mvo	SNMP_OID.13.43.6.1.2.1.4.20.1.1.128++4	MIB_FUNCTION.7	ip_agent_address
00:0096FD 000A6E              +105 
00:0096FE 000007              +105 
00:0096FF 000266              +105 
00:009700 000001              +105 
00:009701 000000              +105 
00:009702 640D06              +106 ipAdEntIfIndex	mvo	SNMP_OID.13.43.6.1.2.1.4.20.1.2.128++4	MIB_FUNCTION.7	ip_agent_address_ifidx
00:009703 000A72              +106 
00:009704 000007              +106 
00:009705 000267              +106 
00:009706 000001              +106 
00:009707 000000              +106 
00:009708 640D06              +107 ipAdEntNetMask	mvo	SNMP_OID.13.43.6.1.2.1.4.20.1.3.128++4	MIB_FUNCTION.7	ip_agent_address_netmask
00:009709 000A76              +107 
00:00970A 000007              +107 
00:00970B 000268              +107 
00:00970C 000001              +107 
00:00970D 000000              +107 
  :                            108 
  :                            109 		$if	BROADCAST_AND_MAXREASM	. considered less useful / less necessary
  :                            110 ipAdEntBcastAdr	mvo	SNMP_OID.13.43.6.1.2.1.4.20.1.4.128++4	MIB_FUNCTION.7	ip_agent_address_broadcast
  :                            111 ipAdAntReasmMaxSize mvo	SNMP_OID.13.43.6.1.2.1.4.20.1.5.128++4	MIB_FUNCTION.7	ip_agent_address_maxreasm
  :                            112 		$endif
  :                            113 		$endif
  :                            114 
  :                            115 		$if	IP_ROUTE_AGENT
00:00970E 640D06              +116 ipRouteDest	mvo	SNMP_OID.13.43.6.1.2.1.4.21.1.1.128++4	MIB_FUNCTION.7	ip_agent_route_dest
00:00970F 000A7A              +116 
00:009710 000007              +116 
00:009711 00026B              +116 
00:009712 000001              +116 
00:009713 000000              +116 
00:009714 640D06              +117 ipRouteIfIndex	mvo	SNMP_OID.13.43.6.1.2.1.4.21.1.2.128++4	MIB_FUNCTION.7	ip_agent_route_ifidx
00:009715 000A7E              +117 
00:009716 000007              +117 
00:009717 00026C              +117 
00:009718 000001              +117 
00:009719 000000              +117 
00:00971A 640D06              +118 ipRouteNextHop	mvo	SNMP_OID.13.43.6.1.2.1.4.21.1.7.128++4	MIB_FUNCTION.7	ip_agent_route_next_hop
00:00971B 000A82              +118 
00:00971C 000007              +118 
00:00971D 00026D              +118 
00:00971E 000001              +118 
00:00971F 000000              +118 
00:009720 640D06              +119 ipRouteType	mvo	SNMP_OID.13.43.6.1.2.1.4.21.1.8.128++4	MIB_FUNCTION.7	ip_agent_route_type
00:009721 000A86              +119 
00:009722 000007              +119 
00:009723 00026E              +119 
00:009724 000001              +119 
00:009725 000000              +119 
00:009726 640D06              +120 ipRouteNetMask	mvo	SNMP_OID.13.43.6.1.2.1.4.21.1.11.128++4	MIB_FUNCTION.7	ip_agent_route_mask
00:009727 000A8A              +120 
00:009728 000007              +120 
00:009729 00026F              +120 
00:00972A 000001              +120 
00:00972B 000000              +120 
  :                            121 		$endif
  :                            122 
  :                            123 
00:00972C 410706              +124 ipRoutingDiscards	mvo	SNMP_OID.7.43.6.1.2.1.4.23	SNMP_COUNTER.6	 0
00:00972D 000A8E              +124 
00:00972E 000006              +124 
(+01)18
00:00972F 00051B              +124 
00:009730 000001              +124 
00:009731 000000              +124 
01:00051B 000000000000        +124 
00:009732 410706              +125 icmpInMsgs	mvo	SNMP_OID.7.43.6.1.2.1.5.1	SNMP_COUNTER.6	 0
00:009733 000A91              +125 
00:009734 000006              +125 
(+01)18
00:009735 00051D              +125 
00:009736 000001              +125 
00:009737 000000              +125 
01:00051D 000000000000        +125 
00:009738 410706              +126 icmpInErrors	mvo	SNMP_OID.7.43.6.1.2.1.5.2	SNMP_COUNTER.6	 0
00:009739 000A94              +126 
00:00973A 000006              +126 
(+01)18
00:00973B 00051F              +126 
00:00973C 000001              +126 
00:00973D 000000              +126 
01:00051F 000000000000        +126 
00:00973E 410706              +127 icmpInDestUnReachs	mvo	SNMP_OID.7.43.6.1.2.1.5.3	SNMP_COUNTER.6	 0
00:00973F 000A97              +127 
00:009740 000006              +127 
(+01)18
00:009741 000521              +127 
00:009742 000001              +127 
00:009743 000000              +127 
01:000521 000000000000        +127 
00:009744 410706              +128 icmpInTimeExcds	mvo	SNMP_OID.7.43.6.1.2.1.5.4	SNMP_COUNTER.6	 0
00:009745 000A9A              +128 
00:009746 000006              +128 
(+01)18
00:009747 000523              +128 
00:009748 000001              +128 
00:009749 000000              +128 
01:000523 000000000000        +128 
00:00974A 410706              +129 icmpParmProbs	mvo	SNMP_OID.7.43.6.1.2.1.5.5	SNMP_COUNTER.6	 0
00:00974B 000A9D              +129 
00:00974C 000006              +129 
(+01)18
00:00974D 000525              +129 
00:00974E 000001              +129 
00:00974F 000000              +129 
01:000525 000000000000        +129 
00:009750 410706              +130 icmpInSrcQuenchs	mvo	SNMP_OID.7.43.6.1.2.1.5.6	SNMP_COUNTER.6	 0
00:009751 000AA0              +130 
00:009752 000006              +130 
(+01)18
00:009753 000527              +130 
00:009754 000001              +130 
00:009755 000000              +130 
01:000527 000000000000        +130 
00:009756 410706              +131 icmpInRedirects	mvo	SNMP_OID.7.43.6.1.2.1.5.7	SNMP_COUNTER.6	 0
00:009757 000AA3              +131 
00:009758 000006              +131 
(+01)18
00:009759 000529              +131 
00:00975A 000001              +131 
00:00975B 000000              +131 
01:000529 000000000000        +131 
00:00975C 410706              +132 icmpInEchos	mvo	SNMP_OID.7.43.6.1.2.1.5.8	SNMP_COUNTER.6	 0
00:00975D 000AA6              +132 
00:00975E 000006              +132 
(+01)18
00:00975F 00052B              +132 
00:009760 000001              +132 
00:009761 000000              +132 
01:00052B 000000000000        +132 
00:009762 410706              +133 icmpInEchoReps	mvo	SNMP_OID.7.43.6.1.2.1.5.9	SNMP_COUNTER.6	 0
00:009763 000AA9              +133 
00:009764 000006              +133 
(+01)18
00:009765 00052D              +133 
00:009766 000001              +133 
00:009767 000000              +133 
01:00052D 000000000000        +133 
00:009768 410706              +134 icmpInTimeStamps	mvo	SNMP_OID.7.43.6.1.2.1.5.10	SNMP_COUNTER.6	 0
00:009769 000AAC              +134 
00:00976A 000006              +134 
(+01)18
00:00976B 00052F              +134 
00:00976C 000001              +134 
00:00976D 000000              +134 
01:00052F 000000000000        +134 
00:00976E 410706              +135 icmpInTimestampReps	mvo	SNMP_OID.7.43.6.1.2.1.5.11	SNMP_COUNTER.6	 0
00:00976F 000AAF              +135 
00:009770 000006              +135 
(+01)18
00:009771 000531              +135 
00:009772 000001              +135 
00:009773 000000              +135 
01:000531 000000000000        +135 
00:009774 410706              +136 icmpInAddrMasks	mvo	SNMP_OID.7.43.6.1.2.1.5.12	SNMP_COUNTER.6	 0
00:009775 000AB2              +136 
00:009776 000006              +136 
(+01)18
00:009777 000533              +136 
00:009778 000001              +136 
00:009779 000000              +136 
01:000533 000000000000        +136 
00:00977A 410706              +137 icmpInAddrMaskReps	mvo	SNMP_OID.7.43.6.1.2.1.5.13	SNMP_COUNTER.6	 0
00:00977B 000AB5              +137 
00:00977C 000006              +137 
(+01)18
00:00977D 000535              +137 
00:00977E 000001              +137 
00:00977F 000000              +137 
01:000535 000000000000        +137 
00:009780 410706              +138 icmpOutMsgs	mvo	SNMP_OID.7.43.6.1.2.1.5.14	SNMP_COUNTER.6	 0
00:009781 000AB8              +138 
00:009782 000006              +138 
(+01)18
00:009783 000537              +138 
00:009784 000001              +138 
00:009785 000000              +138 
01:000537 000000000000        +138 
00:009786 410706              +139 icmpOutErrors	mvo	SNMP_OID.7.43.6.1.2.1.5.15	SNMP_COUNTER.6	 0
00:009787 000ABB              +139 
00:009788 000006              +139 
(+01)18
00:009789 000539              +139 
00:00978A 000001              +139 
00:00978B 000000              +139 
01:000539 000000000000        +139 
00:00978C 410706              +140 icmpOutDestUnreaches	mvo	SNMP_OID.7.43.6.1.2.1.5.16	SNMP_COUNTER.6	 0
00:00978D 000ABE              +140 
00:00978E 000006              +140 
(+01)18
00:00978F 00053B              +140 
00:009790 000001              +140 
00:009791 000000              +140 
01:00053B 000000000000        +140 
00:009792 410706              +141 icmpOutTimeExcds	mvo	SNMP_OID.7.43.6.1.2.1.5.17	SNMP_COUNTER.6	 0
00:009793 000AC1              +141 
00:009794 000006              +141 
(+01)18
00:009795 00053D              +141 
00:009796 000001              +141 
00:009797 000000              +141 
01:00053D 000000000000        +141 
00:009798 410706              +142 icmpOutParmProbs	mvo	SNMP_OID.7.43.6.1.2.1.5.18	SNMP_COUNTER.6	 0
00:009799 000AC4              +142 
00:00979A 000006              +142 
(+01)18
00:00979B 00053F              +142 
00:00979C 000001              +142 
00:00979D 000000              +142 
01:00053F 000000000000        +142 
00:00979E 410706              +143 icmpOutSrcQuenchs	mvo	SNMP_OID.7.43.6.1.2.1.5.19	SNMP_COUNTER.6	 0
00:00979F 000AC7              +143 
00:0097A0 000006              +143 
(+01)18
00:0097A1 000541              +143 
00:0097A2 000001              +143 
00:0097A3 000000              +143 
01:000541 000000000000        +143 
00:0097A4 410706              +144 icmpOutRedirects	mvo	SNMP_OID.7.43.6.1.2.1.5.20	SNMP_COUNTER.6	 0
00:0097A5 000ACA              +144 
00:0097A6 000006              +144 
(+01)18
00:0097A7 000543              +144 
00:0097A8 000001              +144 
00:0097A9 000000              +144 
01:000543 000000000000        +144 
00:0097AA 410706              +145 icmpOutEchos	mvo	SNMP_OID.7.43.6.1.2.1.5.21	SNMP_COUNTER.6	 0
00:0097AB 000ACD              +145 
00:0097AC 000006              +145 
(+01)18
00:0097AD 000545              +145 
00:0097AE 000001              +145 
00:0097AF 000000              +145 
01:000545 000000000000        +145 
00:0097B0 410706              +146 icmpOutEchoReps	mvo	SNMP_OID.7.43.6.1.2.1.5.22	SNMP_COUNTER.6	 0
00:0097B1 000AD0              +146 
00:0097B2 000006              +146 
(+01)18
00:0097B3 000547              +146 
00:0097B4 000001              +146 
00:0097B5 000000              +146 
01:000547 000000000000        +146 
00:0097B6 410706              +147 icmpOutTimeStamps	mvo	SNMP_OID.7.43.6.1.2.1.5.23	SNMP_COUNTER.6	 0
00:0097B7 000AD3              +147 
00:0097B8 000006              +147 
(+01)18
00:0097B9 000549              +147 
00:0097BA 000001              +147 
00:0097BB 000000              +147 
01:000549 000000000000        +147 
00:0097BC 410706              +148 icmpOutTimestampReps	mvo	SNMP_OID.7.43.6.1.2.1.5.24	SNMP_COUNTER.6	 0
00:0097BD 000AD6              +148 
00:0097BE 000006              +148 
(+01)18
00:0097BF 00054B              +148 
00:0097C0 000001              +148 
00:0097C1 000000              +148 
01:00054B 000000000000        +148 
00:0097C2 410706              +149 icmpOutAddrMasks	mvo	SNMP_OID.7.43.6.1.2.1.5.25	SNMP_COUNTER.6	 0
00:0097C3 000AD9              +149 
00:0097C4 000006              +149 
(+01)18
00:0097C5 00054D              +149 
00:0097C6 000001              +149 
00:0097C7 000000              +149 
01:00054D 000000000000        +149 
00:0097C8 410706              +150 icmpOutAddrMaskReps	mvo	SNMP_OID.7.43.6.1.2.1.5.26	SNMP_COUNTER.6	 0
00:0097C9 000ADC              +150 
00:0097CA 000006              +150 
(+01)18
00:0097CB 00054F              +150 
00:0097CC 000001              +150 
00:0097CD 000000              +150 
01:00054F 000000000000        +150 
00:0097CE 020706              +151 tcpRtoAlgorithm	mvo	SNMP_OID.7.43.6.1.2.1.6.1	SNMP_INT.3	 0
00:0097CF 000ADF              +151 
00:0097D0 000003              +151 
(+01)18
00:0097D1 000551              +151 
00:0097D2 000001              +151 
00:0097D3 000000              +151 
01:000551 000000              +151 
00:0097D4 020706              +152 tcpRtoMin	mvo	SNMP_OID.7.43.6.1.2.1.6.2	SNMP_INT.3	 0
00:0097D5 000AE2              +152 
00:0097D6 000003              +152 
(+01)18
00:0097D7 000552              +152 
00:0097D8 000001              +152 
00:0097D9 000000              +152 
01:000552 000000              +152 
00:0097DA 020706              +153 tcpRtoMax	mvo	SNMP_OID.7.43.6.1.2.1.6.3	SNMP_INT.3	 0
00:0097DB 000AE5              +153 
00:0097DC 000003              +153 
(+01)18
00:0097DD 000553              +153 
00:0097DE 000001              +153 
00:0097DF 000000              +153 
01:000553 000000              +153 
00:0097E0 020706              +154 tcpMaxConn	mvo	SNMP_OID.7.43.6.1.2.1.6.4	SNMP_INT.6	 7500000
00:0097E1 000AE8              +154 
00:0097E2 000006              +154 
(+01)18
00:0097E3 000554              +154 
00:0097E4 000001              +154 
00:0097E5 000000              +154 
01:000554 0000007270E0        +154 
00:0097E6 410706              +155 tcpActiveOpens	mvo	SNMP_OID.7.43.6.1.2.1.6.5	SNMP_COUNTER.6	 0
00:0097E7 000AEB              +155 
00:0097E8 000006              +155 
(+01)18
00:0097E9 000556              +155 
00:0097EA 000001              +155 
00:0097EB 000000              +155 
01:000556 000000000000        +155 
00:0097EC 410706              +156 tcpPassiveOpens	mvo	SNMP_OID.7.43.6.1.2.1.6.6	SNMP_COUNTER.6	 0
00:0097ED 000AEE              +156 
00:0097EE 000006              +156 
(+01)18
00:0097EF 000558              +156 
00:0097F0 000001              +156 
00:0097F1 000000              +156 
01:000558 000000000000        +156 
00:0097F2 410706              +157 tcpAttemptFails	mvo	SNMP_OID.7.43.6.1.2.1.6.7	SNMP_COUNTER.6	 0
00:0097F3 000AF1              +157 
00:0097F4 000006              +157 
(+01)18
00:0097F5 00055A              +157 
00:0097F6 000001              +157 
00:0097F7 000000              +157 
01:00055A 000000000000        +157 
00:0097F8 410706              +158 tcpEstabResets	mvo	SNMP_OID.7.43.6.1.2.1.6.8	SNMP_COUNTER.6	 0
00:0097F9 000AF4              +158 
00:0097FA 000006              +158 
(+01)18
00:0097FB 00055C              +158 
00:0097FC 000001              +158 
00:0097FD 000000              +158 
01:00055C 000000000000        +158 
00:0097FE 640706              +159 tcpCurrEstab	mvo	SNMP_OID.7.43.6.1.2.1.6.9	MIB_FUNCTION	 tcp_agent_established
00:0097FF 000AF7              +159 
00:009800 000000              +159 
00:009801 000265              +159 
00:009802 000001              +159 
00:009803 000000              +159 
00:009804 410706              +160 tcpInSegs	mvo	SNMP_OID.7.43.6.1.2.1.6.10	SNMP_COUNTER.6	 0
00:009805 000AFA              +160 
00:009806 000006              +160 
(+01)18
00:009807 00055E              +160 
00:009808 000001              +160 
00:009809 000000              +160 
01:00055E 000000000000        +160 
00:00980A 410706              +161 tcpOutSegs	mvo	SNMP_OID.7.43.6.1.2.1.6.11	SNMP_COUNTER.6	 0
00:00980B 000AFD              +161 
00:00980C 000006              +161 
(+01)18
00:00980D 000560              +161 
00:00980E 000001              +161 
00:00980F 000000              +161 
01:000560 000000000000        +161 
00:009810 410706              +162 tcpRetransSegs	mvo	SNMP_OID.7.43.6.1.2.1.6.12	SNMP_COUNTER.6	 0
00:009811 000B00              +162 
00:009812 000006              +162 
(+01)18
00:009813 000562              +162 
00:009814 000001              +162 
00:009815 000000              +162 
01:000562 000000000000        +162 
  :                            163 
  :                            164 
                                tcpConnState	mvo	SNMP_OID.18.43.6.1.2.1.6.13.128++10.1	;
00:009816 641206              +166 			MIB_FUNCTION	tcp_agent_state
00:009817 000B03              +166 
00:009818 000000              +166 
00:009819 000260              +166 
00:00981A 000001              +166 
00:00981B 000000              +166 
  :                            167 
                                tcpConnLocalAddress mvo	SNMP_OID.18.43.6.1.2.1.6.13.128++10.2	;
00:00981C 641206              +169 			MIB_FUNCTION	tcp_agent_neta
00:00981D 000B06              +169 
00:00981E 000000              +169 
00:00981F 000261              +169 
00:009820 000001              +169 
00:009821 000000              +169 
  :                            170 
                                tcpConnLocalPort    mvo	SNMP_OID.18.43.6.1.2.1.6.13.128++10.3	;
00:009822 641206              +172 			MIB_FUNCTION	tcp_agent_port
00:009823 000B09              +172 
00:009824 000000              +172 
00:009825 000262              +172 
00:009826 000001              +172 
00:009827 000000              +172 
  :                            173 
                                tcpConnRemAddress   mvo	SNMP_OID.18.43.6.1.2.1.6.13.128++10.4	;
00:009828 641206              +175 			MIB_FUNCTION	tcp_agent_remote_neta
00:009829 000B0C              +175 
00:00982A 000000              +175 
00:00982B 000263              +175 
00:00982C 000001              +175 
00:00982D 000000              +175 
  :                            176 
                                tcpConnRemPort	mvo	SNMP_OID.18.43.6.1.2.1.6.13.128++10.5	;
00:00982E 641206              +178 			MIB_FUNCTION.7	tcp_agent_remote_port
00:00982F 000B0F              +178 
00:009830 000007              +178 
00:009831 000264              +178 
00:009832 000001              +178 
00:009833 000000              +178 
  :                            179 
00:009834 410706              +180 tcpInErrs	mvo	SNMP_OID.7.43.6.1.2.1.6.14	SNMP_COUNTER.6	 0
00:009835 000B12              +180 
00:009836 000006              +180 
(+01)18
00:009837 000564              +180 
00:009838 000001              +180 
00:009839 000000              +180 
01:000564 000000000000        +180 
00:00983A 410706              +181 tcpOutRsts	mvo	SNMP_OID.7.43.6.1.2.1.6.15	SNMP_COUNTER.6	 0
00:00983B 000B15              +181 
00:00983C 000006              +181 
(+01)18
00:00983D 000566              +181 
00:00983E 000001              +181 
00:00983F 000000              +181 
01:000566 000000000000        +181 
00:009840 410706              +182 tcpAddWait	mvo	SNMP_OID.7.43.6.1.2.1.6.16	SNMP_COUNTER.6	0
00:009841 000B18              +182 
00:009842 000006              +182 
(+01)18
00:009843 000568              +182 
00:009844 000001              +182 
00:009845 000000              +182 
01:000568 000000000000        +182 
00:009846 410706              +183 tcpAddRelinquish mvo	SNMP_OID.7.43.6.1.2.1.6.21	SNMP_COUNTER.6	0
00:009847 000B1B              +183 
00:009848 000006              +183 
(+01)18
00:009849 00056A              +183 
00:00984A 000001              +183 
00:00984B 000000              +183 
01:00056A 000000000000        +183 
00:00984C 410706              +184 tcpInDrops	mvo	SNMP_OID.7.43.6.1.2.1.6.22	SNMP_COUNTER.6	0
00:00984D 000B1E              +184 
00:00984E 000006              +184 
(+01)18
00:00984F 00056C              +184 
00:009850 000001              +184 
00:009851 000000              +184 
01:00056C 000000000000        +184 
00:009852 410706              +185 tcpDupDrops	mvo	SNMP_OID.7.43.6.1.2.1.6.23	SNMP_COUNTER.6	0
00:009853 000B21              +185 
00:009854 000006              +185 
(+01)18
00:009855 00056E              +185 
00:009856 000001              +185 
00:009857 000000              +185 
01:00056E 000000000000        +185 
00:009858 410706              +186 tcpOutAckDrops	mvo	SNMP_OID.7.43.6.1.2.1.6.24	SNMP_COUNTER.6	0
00:009859 000B24              +186 
00:00985A 000006              +186 
(+01)18
00:00985B 000570              +186 
00:00985C 000001              +186 
00:00985D 000000              +186 
01:000570 000000000000        +186 
  :                            187 
00:00985E 410706              +188 udpInDatagrams	mvo	SNMP_OID.7.43.6.1.2.1.7.1	SNMP_COUNTER.6	 0
00:00985F 000B27              +188 
00:009860 000006              +188 
(+01)18
00:009861 000572              +188 
00:009862 000001              +188 
00:009863 000000              +188 
01:000572 000000000000        +188 
00:009864 410706              +189 udpNoPorts	mvo	SNMP_OID.7.43.6.1.2.1.7.2	SNMP_COUNTER.3	 65536
00:009865 000B2A              +189 
00:009866 000003              +189 
(+01)18
00:009867 000574              +189 
00:009868 000001              +189 
00:009869 000000              +189 
01:000574 010000              +189 
00:00986A 410706              +190 udpInErrors	mvo	SNMP_OID.7.43.6.1.2.1.7.3	SNMP_COUNTER.6	 0
00:00986B 000B2D              +190 
00:00986C 000006              +190 
(+01)18
00:00986D 000575              +190 
00:00986E 000001              +190 
00:00986F 000000              +190 
01:000575 000000000000        +190 
00:009870 410706              +191 udpOutDatagrams	mvo	SNMP_OID.7.43.6.1.2.1.7.4	SNMP_COUNTER.6	 0
00:009871 000B30              +191 
00:009872 000006              +191 
(+01)18
00:009873 000577              +191 
00:009874 000001              +191 
00:009875 000000              +191 
01:000577 000000000000        +191 
00:009876 640906              +192 udpLocalAddress	mvo	SNMP_OID.9.43.6.1.2.1.7.5.0.1	MIB_FUNCTION	 udp_agent1
00:009877 000B33              +192 
00:009878 000000              +192 
00:009879 000246              +192 
00:00987A 000001              +192 
00:00987B 000000              +192 
00:00987C 640906              +193 udpLocalPort	mvo	SNMP_OID.9.43.6.1.2.1.7.5.0.2	MIB_FUNCTION.7	 udp_agent2
00:00987D 000B36              +193 
00:00987E 000007              +193 
00:00987F 000247              +193 
00:009880 000001              +193 
00:009881 000000              +193 
00:009882 410706              +194 egpInMsgs	mvo	SNMP_OID.7.43.6.1.2.1.8.1	SNMP_COUNTER.6	 0
00:009883 000B39              +194 
00:009884 000006              +194 
(+01)18
00:009885 000579              +194 
00:009886 000001              +194 
00:009887 000000              +194 
01:000579 000000000000        +194 
00:009888 410706              +195 egpInErrors	mvo	SNMP_OID.7.43.6.1.2.1.8.2	SNMP_COUNTER.6	 0
00:009889 000B3C              +195 
00:00988A 000006              +195 
(+01)18
00:00988B 00057B              +195 
00:00988C 000001              +195 
00:00988D 000000              +195 
01:00057B 000000000000        +195 
00:00988E 410706              +196 egpOutMsgs	mvo	SNMP_OID.7.43.6.1.2.1.8.3	SNMP_COUNTER.6	 0
00:00988F 000B3F              +196 
00:009890 000006              +196 
(+01)18
00:009891 00057D              +196 
00:009892 000001              +196 
00:009893 000000              +196 
01:00057D 000000000000        +196 
00:009894 410706              +197 egpOutErrors	mvo	SNMP_OID.7.43.6.1.2.1.8.4	SNMP_COUNTER.6	 0
00:009895 000B42              +197 
00:009896 000006              +197 
(+01)18
00:009897 00057F              +197 
00:009898 000001              +197 
00:009899 000000              +197 
01:00057F 000000000000        +197 
00:00989A 020906              +198 egpNeighState	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.1	SNMP_INT.3	 0
00:00989B 000B45              +198 
00:00989C 000003              +198 
(+01)18
00:00989D 000581              +198 
00:00989E 000001              +198 
00:00989F 000000              +198 
01:000581 000000              +198 
00:0098A0 400906              +199 egpNeighAddr	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.2	SNMP_NETWORKADDRESS.4
00:0098A1 000B48              +199 
00:0098A2 000004              +199 
(+01)18
00:0098A3 000582              +199 
00:0098A4 000001              +199 
00:0098A5 000002              +199 
01:000582 000000000000        +199 
00:0098A6 020906              +200 egpNeighAs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.3	SNMP_INT.3	 0
00:0098A7 000B4B              +200 
00:0098A8 000003              +200 
(+01)18
00:0098A9 000584              +200 
00:0098AA 000001              +200 
00:0098AB 000000              +200 
01:000584 000000              +200 
00:0098AC 410906              +201 egpNeighInMsgs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.4	SNMP_COUNTER.6	 0
00:0098AD 000B4E              +201 
00:0098AE 000006              +201 
(+01)18
00:0098AF 000585              +201 
00:0098B0 000001              +201 
00:0098B1 000000              +201 
01:000585 000000000000        +201 
00:0098B2 410906              +202 egpNeighInErrs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.5	SNMP_COUNTER.6	 0
00:0098B3 000B51              +202 
00:0098B4 000006              +202 
(+01)18
00:0098B5 000587              +202 
00:0098B6 000001              +202 
00:0098B7 000000              +202 
01:000587 000000000000        +202 
00:0098B8 410906              +203 egpNeighOutMsgs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.6	SNMP_COUNTER.6	 0
00:0098B9 000B54              +203 
00:0098BA 000006              +203 
(+01)18
00:0098BB 000589              +203 
00:0098BC 000001              +203 
00:0098BD 000000              +203 
01:000589 000000000000        +203 
00:0098BE 410906              +204 egpNeighOutErrs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.7	SNMP_COUNTER.6	 0
00:0098BF 000B57              +204 
00:0098C0 000006              +204 
(+01)18
00:0098C1 00058B              +204 
00:0098C2 000001              +204 
00:0098C3 000000              +204 
01:00058B 000000000000        +204 
00:0098C4 410906              +205 egpNeighInErrMsgs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.8	SNMP_COUNTER.6	 0
00:0098C5 000B5A              +205 
00:0098C6 000006              +205 
(+01)18
00:0098C7 00058D              +205 
00:0098C8 000001              +205 
00:0098C9 000000              +205 
01:00058D 000000000000        +205 
00:0098CA 410906              +206 egpNeighOutErrMsgs	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.9	SNMP_COUNTER.6	 0
00:0098CB 000B5D              +206 
00:0098CC 000006              +206 
(+01)18
00:0098CD 00058F              +206 
00:0098CE 000001              +206 
00:0098CF 000000              +206 
01:00058F 000000000000        +206 
00:0098D0 410906              +207 egpNeighStateUps	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.10	SNMP_COUNTER.6	 0
00:0098D1 000B60              +207 
00:0098D2 000006              +207 
(+01)18
00:0098D3 000591              +207 
00:0098D4 000001              +207 
00:0098D5 000000              +207 
01:000591 000000000000        +207 
00:0098D6 410906              +208 egpNeighStateDowns	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.11	SNMP_COUNTER.6	 0
00:0098D7 000B63              +208 
00:0098D8 000006              +208 
(+01)18
00:0098D9 000593              +208 
00:0098DA 000001              +208 
00:0098DB 000000              +208 
01:000593 000000000000        +208 
00:0098DC 020906              +209 egpNeighIntervalHello	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.12	SNMP_INT.3	 0
00:0098DD 000B66              +209 
00:0098DE 000003              +209 
(+01)18
00:0098DF 000595              +209 
00:0098E0 000001              +209 
00:0098E1 000000              +209 
01:000595 000000              +209 
00:0098E2 020906              +210 egpNeighIntervalPoll	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.13	SNMP_INT.3	 0
00:0098E3 000B69              +210 
00:0098E4 000003              +210 
(+01)18
00:0098E5 000596              +210 
00:0098E6 000001              +210 
00:0098E7 000000              +210 
01:000596 000000              +210 
00:0098E8 020906              +211 egpNeighMode	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.14	SNMP_INT.3	 0
00:0098E9 000B6C              +211 
00:0098EA 000003              +211 
(+01)18
00:0098EB 000597              +211 
00:0098EC 000001              +211 
00:0098ED 000000              +211 
01:000597 000000              +211 
00:0098EE 020906              +212 egpNeighEventTrigger	mvo	SNMP_OID.9.43.6.1.2.1.8.5.1.15	SNMP_INT.3	 0
00:0098EF 000B6F              +212 
00:0098F0 000003              +212 
(+01)18
00:0098F1 000598              +212 
00:0098F2 000001              +212 
00:0098F3 000000              +212 
01:000598 000000              +212 
00:0098F4 020706              +213 egpAs	mvo	SNMP_OID.7.43.6.1.2.1.8.6	SNMP_INT.3	 0
00:0098F5 000B72              +213 
00:0098F6 000003              +213 
(+01)18
00:0098F7 000599              +213 
00:0098F8 000001              +213 
00:0098F9 000000              +213 
01:000599 000000              +213 
00:0098FA 410706              +214 snmpInPkts	mvo	SNMP_OID.7.43.6.1.2.1.11.1	SNMP_COUNTER.6	 0
00:0098FB 000B75              +214 
00:0098FC 000006              +214 
(+01)18
00:0098FD 00059A              +214 
00:0098FE 000001              +214 
00:0098FF 000000              +214 
01:00059A 000000000000        +214 
00:009900 410706              +215 snmpOutPkts	mvo	SNMP_OID.7.43.6.1.2.1.11.2	SNMP_COUNTER.6	 0
00:009901 000B78              +215 
00:009902 000006              +215 
(+01)18
00:009903 00059C              +215 
00:009904 000001              +215 
00:009905 000000              +215 
01:00059C 000000000000        +215 
00:009906 410706              +216 snmpInBadVersions	mvo	SNMP_OID.7.43.6.1.2.1.11.3	SNMP_COUNTER.6	 0
00:009907 000B7B              +216 
00:009908 000006              +216 
(+01)18
00:009909 00059E              +216 
00:00990A 000001              +216 
00:00990B 000000              +216 
01:00059E 000000000000        +216 
00:00990C 410706              +217 snmpInBadCommunityNames	mvo	SNMP_OID.7.43.6.1.2.1.11.4	SNMP_COUNTER.6	 0
00:00990D 000B7E              +217 
00:00990E 000006              +217 
(+01)18
00:00990F 0005A0              +217 
00:009910 000001              +217 
00:009911 000000              +217 
01:0005A0 000000000000        +217 
00:009912 410706              +218 snmpInBadCommunityUses	mvo	SNMP_OID.7.43.6.1.2.1.11.5	SNMP_COUNTER.6	 0
00:009913 000B81              +218 
00:009914 000006              +218 
(+01)18
00:009915 0005A2              +218 
00:009916 000001              +218 
00:009917 000000              +218 
01:0005A2 000000000000        +218 
00:009918 410706              +219 snmpInASNParseErrors	mvo	SNMP_OID.7.43.6.1.2.1.11.6	SNMP_COUNTER.6	 0
00:009919 000B84              +219 
00:00991A 000006              +219 
(+01)18
00:00991B 0005A4              +219 
00:00991C 000001              +219 
00:00991D 000000              +219 
01:0005A4 000000000000        +219 
00:00991E 410706              +220 snmpInTooBigs	mvo	SNMP_OID.7.43.6.1.2.1.11.8	SNMP_COUNTER.6	 0
00:00991F 000B87              +220 
00:009920 000006              +220 
(+01)18
00:009921 0005A6              +220 
00:009922 000001              +220 
00:009923 000000              +220 
01:0005A6 000000000000        +220 
00:009924 410706              +221 snmpInNoSuchNames	mvo	SNMP_OID.7.43.6.1.2.1.11.9	SNMP_COUNTER.6	 0
00:009925 000B8A              +221 
00:009926 000006              +221 
(+01)18
00:009927 0005A8              +221 
00:009928 000001              +221 
00:009929 000000              +221 
01:0005A8 000000000000        +221 
00:00992A 410706              +222 snmpInBadValues	mvo	SNMP_OID.7.43.6.1.2.1.11.10	SNMP_COUNTER.6	 0
00:00992B 000B8D              +222 
00:00992C 000006              +222 
(+01)18
00:00992D 0005AA              +222 
00:00992E 000001              +222 
00:00992F 000000              +222 
01:0005AA 000000000000        +222 
00:009930 410706              +223 snmpInReadOnlys	mvo	SNMP_OID.7.43.6.1.2.1.11.11	SNMP_COUNTER.6	 0
00:009931 000B90              +223 
00:009932 000006              +223 
(+01)18
00:009933 0005AC              +223 
00:009934 000001              +223 
00:009935 000000              +223 
01:0005AC 000000000000        +223 
00:009936 410706              +224 snmpInGenErrs	mvo	SNMP_OID.7.43.6.1.2.1.11.12	SNMP_COUNTER.6	 0
00:009937 000B93              +224 
00:009938 000006              +224 
(+01)18
00:009939 0005AE              +224 
00:00993A 000001              +224 
00:00993B 000000              +224 
01:0005AE 000000000000        +224 
00:00993C 410706              +225 snmpInTotalReqVars	mvo	SNMP_OID.7.43.6.1.2.1.11.13	SNMP_COUNTER.6	 0
00:00993D 000B96              +225 
00:00993E 000006              +225 
(+01)18
00:00993F 0005B0              +225 
00:009940 000001              +225 
00:009941 000000              +225 
01:0005B0 000000000000        +225 
00:009942 410706              +226 snmpInTotalSetVars	mvo	SNMP_OID.7.43.6.1.2.1.11.14	SNMP_COUNTER.6	 0
00:009943 000B99              +226 
00:009944 000006              +226 
(+01)18
00:009945 0005B2              +226 
00:009946 000001              +226 
00:009947 000000              +226 
01:0005B2 000000000000        +226 
00:009948 410706              +227 snmpInGetRequests	mvo	SNMP_OID.7.43.6.1.2.1.11.15	SNMP_COUNTER.6	 0
00:009949 000B9C              +227 
00:00994A 000006              +227 
(+01)18
00:00994B 0005B4              +227 
00:00994C 000001              +227 
00:00994D 000000              +227 
01:0005B4 000000000000        +227 
00:00994E 410706              +228 snmpInGetNexts	mvo	SNMP_OID.7.43.6.1.2.1.11.16	SNMP_COUNTER.6	 0
00:00994F 000B9F              +228 
00:009950 000006              +228 
(+01)18
00:009951 0005B6              +228 
00:009952 000001              +228 
00:009953 000000              +228 
01:0005B6 000000000000        +228 
00:009954 410706              +229 snmpInSetRequests	mvo	SNMP_OID.7.43.6.1.2.1.11.17	SNMP_COUNTER.6	 0
00:009955 000BA2              +229 
00:009956 000006              +229 
(+01)18
00:009957 0005B8              +229 
00:009958 000001              +229 
00:009959 000000              +229 
01:0005B8 000000000000        +229 
00:00995A 410706              +230 snmpInGetResponses	mvo	SNMP_OID.7.43.6.1.2.1.11.18	SNMP_COUNTER.6	 0
00:00995B 000BA5              +230 
00:00995C 000006              +230 
(+01)18
00:00995D 0005BA              +230 
00:00995E 000001              +230 
00:00995F 000000              +230 
01:0005BA 000000000000        +230 
00:009960 410706              +231 snmpInTraps	mvo	SNMP_OID.7.43.6.1.2.1.11.19	SNMP_COUNTER.6	 0
00:009961 000BA8              +231 
00:009962 000006              +231 
(+01)18
00:009963 0005BC              +231 
00:009964 000001              +231 
00:009965 000000              +231 
01:0005BC 000000000000        +231 
00:009966 410706              +232 snmpOutTooBigs	mvo	SNMP_OID.7.43.6.1.2.1.11.20	SNMP_COUNTER.6	 0
00:009967 000BAB              +232 
00:009968 000006              +232 
(+01)18
00:009969 0005BE              +232 
00:00996A 000001              +232 
00:00996B 000000              +232 
01:0005BE 000000000000        +232 
00:00996C 410706              +233 snmpOutNoSuchNames	mvo	SNMP_OID.7.43.6.1.2.1.11.21	SNMP_COUNTER.6	 0
00:00996D 000BAE              +233 
00:00996E 000006              +233 
(+01)18
00:00996F 0005C0              +233 
00:009970 000001              +233 
00:009971 000000              +233 
01:0005C0 000000000000        +233 
00:009972 410706              +234 snmpOutBadValues	mvo	SNMP_OID.7.43.6.1.2.1.11.22	SNMP_COUNTER.6	 0
00:009973 000BB1              +234 
00:009974 000006              +234 
(+01)18
00:009975 0005C2              +234 
00:009976 000001              +234 
00:009977 000000              +234 
01:0005C2 000000000000        +234 
00:009978 410706              +235 snmpOutGenErrs	mvo	SNMP_OID.7.43.6.1.2.1.11.24	SNMP_COUNTER.6	 0
00:009979 000BB4              +235 
00:00997A 000006              +235 
(+01)18
00:00997B 0005C4              +235 
00:00997C 000001              +235 
00:00997D 000000              +235 
01:0005C4 000000000000        +235 
00:00997E 410706              +236 snmpOutGetRequests	mvo	SNMP_OID.7.43.6.1.2.1.11.25	SNMP_COUNTER.6	 0
00:00997F 000BB7              +236 
00:009980 000006              +236 
(+01)18
00:009981 0005C6              +236 
00:009982 000001              +236 
00:009983 000000              +236 
01:0005C6 000000000000        +236 
00:009984 410706              +237 snmpOutGetNexts	mvo	SNMP_OID.7.43.6.1.2.1.11.26	SNMP_COUNTER.6	 0
00:009985 000BBA              +237 
00:009986 000006              +237 
(+01)18
00:009987 0005C8              +237 
00:009988 000001              +237 
00:009989 000000              +237 
01:0005C8 000000000000        +237 
00:00998A 410706              +238 snmpOutSetRequests	mvo	SNMP_OID.7.43.6.1.2.1.11.27	SNMP_COUNTER.6	 0
00:00998B 000BBD              +238 
00:00998C 000006              +238 
(+01)18
00:00998D 0005CA              +238 
00:00998E 000001              +238 
00:00998F 000000              +238 
01:0005CA 000000000000        +238 
00:009990 410706              +239 snmpOutGetResponses	mvo	SNMP_OID.7.43.6.1.2.1.11.28	SNMP_COUNTER.6	 0
00:009991 000BC0              +239 
00:009992 000006              +239 
(+01)18
00:009993 0005CC              +239 
00:009994 000001              +239 
00:009995 000000              +239 
01:0005CC 000000000000        +239 
00:009996 410706              +240 snmpOutTraps	mvo	SNMP_OID.7.43.6.1.2.1.11.29	SNMP_COUNTER.6	 0
00:009997 000BC3              +240 
00:009998 000006              +240 
(+01)18
00:009999 0005CE              +240 
00:00999A 000001              +240 
00:00999B 000000              +240 
01:0005CE 000000000000        +240 
00:00999C 020706              +241 snmpEnableAuthenTraps	mvo	SNMP_OID.7.43.6.1.2.1.11.30	SNMP_INT.3	 0
00:00999D 000BC6              +241 
00:00999E 000003              +241 
(+01)18
00:00999F 0005D0              +241 
00:0099A0 000001              +241 
00:0099A1 000000              +241 
01:0005D0 000000              +241 
  :                            242 
  :                            243 	$list		5
  :                            244: 	$include	loadp2
  :                            1 IP_CIDR_ROUTE_AGENT	$equ	1
  :                            2 
  :                            3 			$if	IP_CIDR_ROUTE_AGENT
00:0099A2 641006              +4 inetCidrRouteDestType	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.1.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_dest_type	. 1
00:0099A3 000BC9              +4 
00:0099A4 000007              +4 
00:0099A5 000270              +4 
00:0099A6 000001              +4 
00:0099A7 000000              +4 
00:0099A8 641006              +5 inetCidrRouteDest	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.2.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_dest
00:0099A9 000BCE              +5 
00:0099AA 000007              +5 
00:0099AB 000271              +5 
00:0099AC 000001              +5 
00:0099AD 000000              +5 
00:0099AE 641006              +6 inetCidrRoutePfxLen	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.3.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_mask_log	. /LOG
00:0099AF 000BD3              +6 
00:0099B0 000007              +6 
00:0099B1 000272              +6 
00:0099B2 000001              +6 
00:0099B3 000000              +6 
00:0099B4 641006              +7 inetCidrRouteNextHopType mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.5.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_next_hop_type . 0 / 1
00:0099B5 000BD8              +7 
00:0099B6 000007              +7 
00:0099B7 000273              +7 
00:0099B8 000001              +7 
00:0099B9 000000              +7 
00:0099BA 641006              +8 inetCidrRouteNextHop	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.6.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_next_hop	. 0.0.0.0 / gateway
00:0099BB 000BDD              +8 
00:0099BC 000007              +8 
00:0099BD 000274              +8 
00:0099BE 000001              +8 
00:0099BF 000000              +8 
00:0099C0 641006              +9 inetCidrRouteIfIndex	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.7.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_ifidx
00:0099C1 000BE2              +9 
00:0099C2 000007              +9 
00:0099C3 000275              +9 
00:0099C4 000001              +9 
00:0099C5 000000              +9 
00:0099C6 641006              +10 inetCidrRouteType	mvo	SNMP_OID.16.43.6.1.2.1.4.24.7.1.8.1.6.128++4	MIB_FUNCTION.7	ip_agent_cidr_route_type	. 3 / 4
00:0099C7 000BE7              +10 
00:0099C8 000007              +10 
00:0099C9 000276              +10 
00:0099CA 000001              +10 
00:0099CB 000000              +10 
  :                            11 			$endif
  :                            245 	$list		4
  :                            246 
01:0005D1 000000              +247 	0
  :                            248 	$sterm	':'
  :                            249 $(0)
00:0099CC 000000              +250 	+	0
  :                            251 
  :                            260 
  :                            261 $(0)
  :                            262 	$do	$<256,$(0:256)
  :                            263 	$do	$zenith>4096,	$flag	ap_bank2 overflow
  :                            126 
  :                            127 b1_high	$set	$(1)
[b1_high][0000000000000000000000000000000000000000000005d2]
  :                            128 	$trace	b1_high
  :                            129 
[$zenith(3)][0000000000000000000000000000000000000000000026cb]
  :                            130 	$trace	$zenith(3)
  :                            131 
  :                            1436 	$path
*EOF*
00:0099cd+000000000000000000000000
00:0099d1+000244
00:0099d2+000242
00:0099d3+00FFFF
00:0099d4+02F000
00:0099d5+030000
00:0099d6+000000
00:0099d7+BC0028
00:0099d8+BC0002
00:0099d9+BC0000
00:0099da+BC0040
00:0099db+2B0601020101010000
00:0099de+2B0601020101020000
00:0099e1+2B0601020101030000
00:0099e4+2B0601020101040000
00:0099e7+2B0601020101050000
00:0099ea+2B0601020101060000
00:0099ed+2B0601020101070000
00:0099f0+2B0601020102010000
00:0099f3+2B0601020102020001
00:0099f6+2B0601020102020002
00:0099f9+2B0601020102020003
00:0099fc+2B0601020102020004
00:0099ff+2B0601020102020005
00:009a02+2B0601020102020006
00:009a05+2B0601020102020007
00:009a08+2B0601020102020008
00:009a0b+2B0601020102020009
00:009a0e+2B060102010202000A
00:009a11+2B060102010202000B
00:009a14+2B060102010202000C
00:009a17+2B060102010202000D
00:009a1a+2B060102010202000E
00:009a1d+2B060102010202000F
00:009a20+2B0601020102020010
00:009a23+2B0601020102020011
00:009a26+2B0601020102020012
00:009a29+2B0601020102020013
00:009a2c+2B0601020102020014
00:009a2f+2B0601020102020015
00:009a32+2B0601020102020016
00:009a35+2B0601020104010000
00:009a38+2B0601020104020000
00:009a3b+2B0601020104030000
00:009a3e+2B0601020104040000
00:009a41+2B0601020104050000
00:009a44+2B0601020104060000
00:009a47+2B0601020104070000
00:009a4a+2B0601020104080000
00:009a4d+2B0601020104090000
00:009a50+2B06010201040A0000
00:009a53+2B06010201040B0000
00:009a56+2B06010201040C0000
00:009a59+2B06010201040D0000
00:009a5c+2B06010201040E0000
00:009a5f+2B06010201040F0000
00:009a62+2B0601020104100000
00:009a65+2B0601020104110000
00:009a68+2B0601020104120000
00:009a6b+2B0601020104130000
00:009a6e+2B0601020104140101840000
00:009a72+2B0601020104140102840000
00:009a76+2B0601020104140103840000
00:009a7a+2B0601020104150101840000
00:009a7e+2B0601020104150102840000
00:009a82+2B0601020104150107840000
00:009a86+2B0601020104150108840000
00:009a8a+2B060102010415010B840000
00:009a8e+2B0601020104170000
00:009a91+2B0601020105010000
00:009a94+2B0601020105020000
00:009a97+2B0601020105030000
00:009a9a+2B0601020105040000
00:009a9d+2B0601020105050000
00:009aa0+2B0601020105060000
00:009aa3+2B0601020105070000
00:009aa6+2B0601020105080000
00:009aa9+2B0601020105090000
00:009aac+2B06010201050A0000
00:009aaf+2B06010201050B0000
00:009ab2+2B06010201050C0000
00:009ab5+2B06010201050D0000
00:009ab8+2B06010201050E0000
00:009abb+2B06010201050F0000
00:009abe+2B0601020105100000
00:009ac1+2B0601020105110000
00:009ac4+2B0601020105120000
00:009ac7+2B0601020105130000
00:009aca+2B0601020105140000
00:009acd+2B0601020105150000
00:009ad0+2B0601020105160000
00:009ad3+2B0601020105170000
00:009ad6+2B0601020105180000
00:009ad9+2B0601020105190000
00:009adc+2B06010201051A0000
00:009adf+2B0601020106010000
00:009ae2+2B0601020106020000
00:009ae5+2B0601020106030000
00:009ae8+2B0601020106040000
00:009aeb+2B0601020106050000
00:009aee+2B0601020106060000
00:009af1+2B0601020106070000
00:009af4+2B0601020106080000
00:009af7+2B0601020106090000
00:009afa+2B06010201060A0000
00:009afd+2B06010201060B0000
00:009b00+2B06010201060C0000
00:009b03+2B06010201060D8A01
00:009b06+2B06010201060D8A02
00:009b09+2B06010201060D8A03
00:009b0c+2B06010201060D8A04
00:009b0f+2B06010201060D8A05
00:009b12+2B06010201060E0000
00:009b15+2B06010201060F0000
00:009b18+2B0601020106100000
00:009b1b+2B0601020106150000
00:009b1e+2B0601020106160000
00:009b21+2B0601020106170000
00:009b24+2B0601020106180000
00:009b27+2B0601020107010000
00:009b2a+2B0601020107020000
00:009b2d+2B0601020107030000
00:009b30+2B0601020107040000
00:009b33+2B0601020107050001
00:009b36+2B0601020107050002
00:009b39+2B0601020108010000
00:009b3c+2B0601020108020000
00:009b3f+2B0601020108030000
00:009b42+2B0601020108040000
00:009b45+2B0601020108050101
00:009b48+2B0601020108050102
00:009b4b+2B0601020108050103
00:009b4e+2B0601020108050104
00:009b51+2B0601020108050105
00:009b54+2B0601020108050106
00:009b57+2B0601020108050107
00:009b5a+2B0601020108050108
00:009b5d+2B0601020108050109
00:009b60+2B060102010805010A
00:009b63+2B060102010805010B
00:009b66+2B060102010805010C
00:009b69+2B060102010805010D
00:009b6c+2B060102010805010E
00:009b6f+2B060102010805010F
00:009b72+2B0601020108060000
00:009b75+2B060102010B010000
00:009b78+2B060102010B020000
00:009b7b+2B060102010B030000
00:009b7e+2B060102010B040000
00:009b81+2B060102010B050000
00:009b84+2B060102010B060000
00:009b87+2B060102010B080000
00:009b8a+2B060102010B090000
00:009b8d+2B060102010B0A0000
00:009b90+2B060102010B0B0000
00:009b93+2B060102010B0C0000
00:009b96+2B060102010B0D0000
00:009b99+2B060102010B0E0000
00:009b9c+2B060102010B0F0000
00:009b9f+2B060102010B100000
00:009ba2+2B060102010B110000
00:009ba5+2B060102010B120000
00:009ba8+2B060102010B130000
00:009bab+2B060102010B140000
00:009bae+2B060102010B150000
00:009bb1+2B060102010B160000
00:009bb4+2B060102010B180000
00:009bb7+2B060102010B190000
00:009bba+2B060102010B1A0000
00:009bbd+2B060102010B1B0000
00:009bc0+2B060102010B1C0000
00:009bc3+2B060102010B1D0000
00:009bc6+2B060102010B1E0000
00:009bc9+2B0601020104180701010106840000
00:009bce+2B0601020104180701020106840000
00:009bd3+2B0601020104180701030106840000
00:009bd8+2B0601020104180701050106840000
00:009bdd+2B0601020104180701060106840000
00:009be2+2B0601020104180701070106840000
00:009be7+2B0601020104180701080106840000
01:0005d2+776562
01:0005d3+776562320000
01:0005d5+696E6465782E68746D6C0000
03:002626+2A6970000000
03:002628+2A74656C6E65740000
03:00262b+636F6E736F6C65207468726561647320646973706C61790A
03:002633+6B6579206820666F7220636F6D6D616E64206C6973740A00
03:00263b+6E6F2074696D656F75740A00
03:00263f+256C64206D532025730A0000
03:002643+7A65726F2074696D656F75740A0000
03:002648+20776F72647320667265650A
03:00264c+20776562686F737420746872656164730A00
03:002652+0A0000
03:002653+3E0000
03:002654+746872656164206E6F74206163746976650A
03:00265a+5254413120736D617261676437204F532073686172656420
636F6E736F6C650A00
03:002665+5B7265757365645D00000000
03:002669+2F6170706C69636174696F6E5F696672616D65732F737461
72745F706167655F696E6465780000
03:002676+696E697469616C2073746172747570730000
03:00267c+2F696E697469616C2F736372697074000000
03:002682+2A6874747000
03:002684+0D0A0D0A0000
03:002686+0D0A00
03:002687+485454502F312E3120323030204F4B0D0A436F6E74656E74
2D547970653A20746578742F68746D6C3B20636861727365
743D5554462D380D0A436F6E74656E742D4C656E6774683A
2033360D0A0D0A3C68746D6C3E3C6469763E0D0A77656220
61726368697665206E6F7420666F756E640D0A3C2F646976
3E3C2F68746D6C3E0D0A0000
03:0026b3+2A6973657276657200
03:0026b6+2A66706F6E6C696E65000000
03:0026ba+2D302E3009092E201B5B34313B313B33376D6578706F6E65
6E74206F766572666C6F771B5B306D
03:0026c7+2A736E6D705F6167656E7400
$$call_space=000003
$$frame=000000
$$list=000006
$$params=000003
$$swap=$00:000D94
$$xframe=$46:000000
$$zero_stack=000000
$0p1=$00:000007
$1=$01:000007
$192=:N65:F:0:000000
$3=$03:000007
$FINESSE=000001
$LOCK_SWITCH=000001
$SMP+=$00:00007E
$ZETA+=$00:00007C
$bind=$00:000ECC
$bind:construct_port_block=$00:000ECC
$bind:zero_port_block=$00:000ED2
$bind:bind_in_block=$00:000ED9
$bind:ports_block_up=$00:000EE0
$bind:ports_block_online=$00:000EE2
$bind:seek_random_free_port=$00:000EE5
$bind:another_random_port=$00:000EF2
$bind:bind_show_random_result=$00:000EF4
$bind:find_in_blocks_range=$00:000EF5
$bind:find_in_blocks_exit=$00:000EFC
$bind:network_bind=$00:000EFD
$bind:handle=000003,00000F
$bind:sockaddress=000004,00000F
$bind:network_bindz=$00:000F08
$bind:autobind=$00:000F0A
$bind:encoding=000004,00000F
$bind:sockad=000005,00000F
$bind:connections_tablep=000000,00000F
$bind:net_bind_tcp?=$00:000F11
$bind:assign_port=$00:000F18
$bind:net_bind_memory_up=$00:000F23
$bind:net_bind_memory_online=$00:000F25
$bind:assign_wildcard_socket=$00:000F2B
$bind:assign_socket=$00:000F32
$bind:net_nontcp=$00:000F3E
$bind:net_bind_no_protocol=$00:000F40
$bind:already_bound=$00:000F42
$bind:net_bind_no_storage=$00:000F44
$bind:net_bind_z=$00:000F45
$bits=000048
$command=.24.24
$fraction=:N65:F:0:000002
$i_f_part=:N65:F:0:000000
$if0p+=$01:000000
$if2p+=$01:000002
$ifzp+=$01:000009
$initial_ift1
$integer=:N65:F:0:000001
$light_flight
$net_ipv4=:N65:F:0:000000
$net_socket=:N129:P:0:000000
$neta=:F1:000051
$netp=.32.16
$normalised=:N65:F:0:000000
$p0=$00:000007
$rxtx_ift1
$rxtx_lo
$sockaddr=:N129:P:0:000000
$socket=:N129:P:0:000000
$sockif+=$00:000A85
$sockif:socket_connect=$00:000A85
$sockif:handle1=000007,00000F
$sockif:target_address=000008,00000F
$sockif:socket_address=000002,00000F
$sockif:handle_encoding=000000,00000F
$sockif:socket_nane=$00:000A92
$sockif:tcp_connect=$00:000A94
$sockif:update_tcp_handle=$00:000AA2
$sockif:connect_x=$00:000AA5
$sockif:active_connect=$00:000AAA
$sockif:addresses=000007,00000F
$sockif:fast_release=00000B,00000F
$sockif:connect_socketpointer=000002,00000F
$sockif:default_ifp=000001,00000F
$sockif:send_syn_tries=000000,00000F
$sockif:connect_local_wildcard=$00:000AC4
$sockif:connect_fixport=$00:000ACF
$sockif:connect_socket_storage_assigned=$00:000AD2
$sockif:connect_bound_source?=$00:000AD8
$sockif:connect_routed_source=$00:000ADC
$sockif:connect_source_net=$00:000AE1
$sockif:connect_syn_tx=$00:000AF4
$sockif:connect_no_tx=$00:000AFB
$sockif:connect_syn_sent=$00:000B03
$sockif:connect_review=$00:000B0E
$sockif:port_structure_unprepared=$00:000B1A
$sockif:you_may_not=$00:000B1C
$sockif:connect_reverse=$00:000B1D
$sockif:connect_no_path=$00:000B27
$sockif:connect_bad_argument=$00:000B29
$sockif:connect_return=$00:000B2A
$sockif:tcp_await_connection=$00:000B2E
$sockif:port_socket=000004,00000F
$sockif:txarray_bank=000000,00000F
$sockif:tcp_search_new=$00:000B46
$sockif:tcp_test_new=$00:000B4C
$sockif:tcp_porthandle_wrong=$00:000B55
$sockif:tcp_awaitx=$00:000B56
$sockif:tcp_newhandle=$00:000B5B
$sockif:tcp_newhandle_x=$00:000B5F
$sockif:net_disengage=$00:000B60
$sockif:close_handle=000003,00000F
$sockif:disengage_port?=$00:000B6A
$sockif:disengage_tcp_port?=$00:000B72
$sockif:disengage_handle=$00:000B7A
$sockif:port_disengage_udp=$00:000B7E
$sockif:port_disengage=$00:000B82
$sockif:port_disengage_z=$00:000B85
$sockif:disconnect_free=$00:000B86
$sockif:free_tcp_port=$00:000B87
$sockif:free_tcp_port_z=$00:000B8E
$sockif:app_tcp_port=$00:000B8F
$sockif:app_tcp_port_x=$00:000B92
$sockif:tcp_fin1=$00:000B93
$sockif:tcp_fin=$00:000B94
$sockif:tcp_disconnect_z=$00:000B96
$sockif:sock_structure_port=$00:000B98
$sockif:sock_structure_connection=$00:000B9D
$sockif:sock_structure=$00:000B9F
$sockif:tcp_port_socket=$00:000BA4
$x_=:N129:P:0:000000
$x_add=:N129:P:0:000000
$x_divide=:N129:P:0:000000
$x_load=:N129:P:0:000000
$x_load_negative=:N129:P:0:000000
$x_multiply=:N129:P:0:000000
$x_reserve=:N129:P:0:000000
$x_retrieve_add=:N129:P:0:000000
$x_retrieve_divide=:N129:P:0:000000
$x_retrieve_multiply=:N129:P:0:000000
$x_retrieve_subtract=:N129:P:0:000000
$x_subtract=:N129:P:0:000000
$xbase=:P1:0:00003C
A$IDX+=$00:000073
A2_WORDS=0001F4
ACTIVITY_SPACE=000001
ACW_SIZE=$46:000008
AF_INET=000002
AGENT1_PORT=000000
AGENT2_TUPLES=000018
ALREADY_CONNECTED=000038
ANYNET=000000
APPLICATION_HEADER_WORDS=080000
APPLICATION_PROTOCOLS=:N129:P:0:000000
AP_DATA=000010
ARP=000806
ARP_REFRESH=124F80
ARP_REPLY=000002
ARP_REQUEST=000001
AT_AGENT
B$IDX+=$00:000074
B4=000088
BAD_ADDRESS=00000E
BAD_ARGUMENT=000016
BANKS=000086
BER_TRANSIENT_SIZE=000006
BROADCAST_AND_MAXREASM
BYTES=000010
CACHE_NETB$+=$00:00006C
CALIBRATE_PORT=000000
CHAINS=000020
CHAINS_LOG=000005
CHAINS_MASK=00001F
COULD_NOT=000023
CR=00000D
D0_WORDS=003000
DIRECTORY=000015
DISALLOWED=000001
DLT_E10MB=000001
DLT_FDDI=00000A
DLT_IEEE802_11=000069
DLT_LOOP=00006C
DLT_NULL=000000
DLT_SLIP=000008
DMAXINB=0A0000
DMAXINP=002800
DYNAMIC_CHAIN_HEAD=000006
DYNAMIC_CHAIN_TAIL=000007
DYNAMIC_IP_HEADER=000000
ENERGY$+=$00:00007D
ESC=00001B
ETHERNET_CSMACD=000006
ETHERNET_SPACE=000001
EXISTS=000011
FILE$HANDLE+=$00:00007B
FILE_NOT_OPEN=000020
FLAGS_FRAGMENT=000008
FO$FRAME+=$00:000079
FO$HEAP+=$00:00007A
FPONLINE_MESSAGE_LIMIT=0000C8
FPONLINE_PORT=000083
FPSERVER_PORT=000080
FPSERVER_PORT2=000082
FREE=:P1:0:000063
FREE_DEVB$+=$00:00006E
FREE_NETB$+=$00:000070
FREE_SOCKB$+=$00:00006F
HEADER_BYTES=000010
HEADER_LONGWORDS=000010
HEADER_SUM=000006
HL_FLAGS=00001B
HORIZONTAL_TAB=000009
HT=000009
HTTP_PORT=000050
HTTP_THREADED=000001
HTTP_USER=000001
HVBANK=000000
HVSOCKET=000001
ICMP_DESTINATION_UNREACHABLE=000003
ICMP_DU_DF=000004
ICMP_DU_HOST=000001
ICMP_DU_NET=000000
ICMP_DU_PORT=000003
ICMP_DU_PROTOCOL=000002
ICMP_DU_SRF=000005
ICMP_ECHO_REQUEST=000008
ICMP_ECHO_RESPONSE=000000
ICMP_REDIRECT=000005
IFCONFIG=006969
IFGW=000004
IFNUMBER_I+=$01:0004F7
IF_WORDS=$42:000048,000002
II_FREE=:N129:P:0:000000
II_LOCK=:N129:P:0:000000
INTERFACES=000008
INT_SYSCALL=000004
IO_ERROR=000005
IP=000800
IPPROTO_ICMP=000001
IPPROTO_TCP=000006
IPPROTO_UDP=000011
IPV4_DINITIAL_BANK=003000
IPV4_FRAGMENTED_DGRAMS=000000
IPV4_OVERHAUL=0000A0
IP_ADDRESS_AGENT=000001
IP_CIDR_ROUTE_AGENT=000001
IP_DEFAULT_TTL=003C00
IP_DNF=004000
IP_MORE=002000
IP_OFFSET_MASK=001FFF
IP_ROUTE_AGENT=000001
ISERVER_PORT=000081
I_F=000012
I_F_IDX=00000A
I_F_P=000008
I_SERVER_THREADED=000001
JUMBOMAX=004000
LAST_BYTE_READ=000013
LF=00000A
LIBRARY=006000
LOCK=:P1:0:000062
LOG=:F1:00003F
LOG1BIT=:F1:00005D
LONGEST_LL_HEADER=000007
MAXIMUM=002000
MIB=002000
MIB_ACOUNT48=:N129:P:0:000000
MIB_FUNCTION=000064
MIB_FUNCTION_RETRIEVE=000063
MIB_ICOUNT48=:N129:P:0:000000
MIB_READ_ALLOWED=000001
MIB_WRITE_ALLOWED=000002
MSG_NONBLOCK=000004
MSS=00001A
MTU=000011
NET2SYM$+=$00:000071
NETBUF_MAX=002020
NETMASK_ABSOLUTE=000007
NETSERVER_INTENSIVE$=000001
NETWORK_D=003000
NET_ADAPTING=000001
NET_ADDRESSES=000018
NET_ATTENTION_PORT=000079
NET_BANKS=000010
NET_BASE=000030
NET_BUFFER_THRESHOLD=000080
NET_FREECHAINS=000101
NET_GRANULE=000020
NET_LOG=000005
NON_BLOCKING=00001B
NOT_DEVICE=000013
NOT_DIRECTORY=000014
NOT_THERE=000002
NOT_YOU=00000D
NO_CONNECTION=000020
NO_DATA=000060
NO_DEVICE=000006
NO_FILE_TYPE=000009
NO_HANDLE=000016
NO_PATH=000041
NO_PIPE=000020
NO_PROTOCOL=00002A
NO_STORAGE=00000C
ONETIME_SAVE$=$00:000076
ONE_TIME_SAVE1=000091
ON_NETB$+=$00:00006D
OPEN=:P1:0:000064
OUTSIZE=000087
OVERSIZE=000028
PD_INET=000800
PER_SECOND=00003B9ACA00
PF_INET=000002
PLATFORM_RELAY=000064
PLATFORM_RELAY2=000065
PORT_ALREADY_BOUND=00003A
PORT_NOT_BOUND=000039
QSIMULTANEOUS=000001
QUAD=000008
QUIET_SAVE=:P1:0:000039
READ_BYTE=:P3:0:0000B7
READ_START=:P1:0:0000B5
READ_STREAM_START=:P1:0:0000B3
REBOUND75=:P1:0:000038
RECORD_MARK=000011
RECORD_MARK_FLAG=000010
RELAY_ROUTE=000800
REMOTE_REFUSED=00003D
REPACKED=000001
REQUIRED=000086
RESTART_EI$=$00:000075
REST_GRANULE=0001F4
ROUTES=000018
ROUTE_CONFIG=006767
ROUTING_HEADER=000010
RPAGES=000080
RPAGEW=000400
RX_APDATA=000010
RX_BANKS=00000C
RX_BASE=000020
RX_BUFFER=000000C00000
RX_FRAGMENTS=000000
RX_LL_HL=000010
SCALE=000012
SCALE_TRIPPED=000012
SHUT=:P1:0:000065
SIGALERT=000000
SIGNS=000011
SIZE=000086
SNMP_AGENT_THREADED=000001
SNMP_BADVALUE=000003
SNMP_COUNTER=000041
SNMP_GAUGE=000042
SNMP_GENERIC_TRAP_6=000006
SNMP_GENERR=000005
SNMP_GETNEXTREQ=0000A1
SNMP_GETREQ=0000A0
SNMP_GETRESP=0000A2
SNMP_INT=000002
SNMP_NETWORKADDRESS=000040
SNMP_NOSUCHNAME=000002
SNMP_NULL=000005
SNMP_OID=000006
SNMP_PORT=0000A1
SNMP_READONLY=000004
SNMP_SEQUENCE=000030
SNMP_SETREQ=0000A3
SNMP_STRING=000004
SNMP_TIMETICKS=000043
SNMP_TOOBIG=000001
SNMP_TRAPREQ=0000A4
SNMP_TRAP_PORT=0000A2
SOCKET_CALL_FLAGS=00001B
SOCKET_ENGAGED=FFFFFE
SOCKET_LPOINTER=000012
SOCKET_NO_PROTOCOL=FFFFFF
SOFTWARELOOPBACK=000018
SOFTWARE_I_F=000001
SOFT_I_F_CAPACITY=004000
STACKED_ITEST=000000
SUB=00001A
SUMMIT$3
T77_DRIVERS_THREADED=000000
TCP_5WORDH=005000
TCP_6WORDH=006000
TCP_ACK=000010
TCP_ALIGN_ON_REJECT=000000
TCP_CLOSED=000001
TCP_CLOSEWAIT=000008
TCP_CLOSING=00000A
TCP_DELETETCB=00000C
TCP_ESTABLISHED=000005
TCP_FIN=000001
TCP_FINWAIT1=000006
TCP_FINWAIT2=000007
TCP_FLAGS=000FFF
TCP_HL=00F000
TCP_LASTACK=000009
TCP_LISTEN=000002
TCP_MIB=000152
TCP_NOQ=000001
TCP_PSH=000008
TCP_REFLEX_SEQUENCE_ON_REJECT=000001
TCP_RELINQUISHED=000040
TCP_RST=000004
TCP_SEEK_ANOMALY=000000
TCP_STATES_BEAT=00000A
TCP_SYN=000002
TCP_SYNRECEIVED=000004
TCP_SYNSENT=000003
TCP_TCB=00003F
TCP_TIMER1=0927C0
TCP_TIMER2=000BB8
TCP_TIMEWAIT=00000B
TCP_TIMEWAIT_MS=002710
TCP_URG=000020
TCP_WINDOW_ON_REJECT=000000
TELNET_THREADED=000001
TERAFRAME$+=$00:000077
THREAD$STATE+=$00:000072
THREAD_FP(1)=006000
THRESHOLD_PACKETS=005DC0
TIMED_OUT=00003C
TPAYLOAD_BYTES=000012
TPORTCHAIN=:F1:00005F
TP_HEADER=000011
TRANSFER_PAGE_HIGH=$00:00079F
TRIPLE=000009
TX_AXW=000008
TX_BANKS=000004
TX_BASE=000020
TX_BUFFER=000000F00000
TX_DATAGRAM=000013
TX_DATAGRAML=00000B
TX_DESCRIPTORS=000003
TX_FLAG_OFFSET=00000A
TX_FRAGMENTS=000000
TX_FRAME=000009
UDGRAM_CHECK_WRITE
UDP_AUTO_CONNECT=100000
UDP_CHECK_WRITE=000000
UDP_NOSOURCENET=000027
UDP_NO_CHECKSUM=200000
UDP_TX_KEEP=000000800000
UPROTOCOL_BYTES=00000B
USOCKET$+=$00:000078
WINDOW=000013
WRITE3_BYTES=:P1:0:0000B9
WRITE_BYTE=:N129:P:0:000000
WRITE_BYTES=:P1:0:0000BA
WRITE_START=:P1:0:0000B6
WRITE_STREAM_START=:P1:0:0000B4
WRITE_UBYTE=:N129:P:0:000000
XDR_TCP_INLINE=000000
X_ADD=000004
X_ADD_NEGATIVE=000005
X_CODES=00001A
X_COSINE=000011
X_COSINE96=000015
X_COTANGENT=000013
X_COTANGENT96=000017
X_CUBE=000010
X_CUBE_ROOT=00000F
X_DEVICE=000012
X_DIVIDE=000007
X_EXIT=000000
X_FRACTION=000018
X_INTEGER=000019
X_LOAD=000001
X_LOAD_NEGATIVE=000002
X_MULTIPLY=000006
X_POP_ADD=000008
X_POP_ADD_NEGATIVE=000009
X_POP_DIVIDE=00000B
X_POP_MULTIPLY=00000A
X_PUSH=000003
X_SINE=00000D
X_SINE96=000014
X_SQUARE=00000E
X_SQUARE_ROOT=00000C
X_TANGENT=000012
X_TANGENT96=000016
__ALERTS=$00:000003
__II_LOCK=000000
__PAD=000004
__bind+=$00:000082
__connect+=$00:000083
__cosine=:N129:P:0:000000
__cotan=:N129:P:0:000000
__disconnect_free_tcp+=$00:000095
__free_tcp_port+=$00:000094
__ifconfig
__ift2_align
__ift2_mirror
__initial_ift2
__net_disengage+=$00:000091
__port_disengage+=$00:000092
__port_disengage_udp+=$00:000093
__route=$00:000088
__route_config
__rxtx_ift2
__sine=:N129:P:0:000000
__socket+=$00:000081
__sprintf
__tangent=:N129:P:0:000000
__tcp_connect+=$00:00008C
__tcp_socket+=$00:000096
_cosine=:N129:P:0:000000
_cotan=:N129:P:0:000000
_cube=:N129:P:0:000000
_fraction=:N129:P:0:000000
_integer=:N129:P:0:000000
_root=:N129:P:0:000000
_root3=:N129:P:0:000000
_sine=:N129:P:0:000000
_square=:N129:P:0:000000
_tangent=:N129:P:0:000000
a2_add_tuple=$00:000B31
a2_axw=000000,00000F
a2_ber_transient(1)=$03:0001A3
a2_ber_transient(1):ojet=$03:0001A3
a2_ber_transient(1):bytes=$03:0001A4
a2_ber_transient(1):data=$03:0001A5
a2_ber_transient(1):storage=$03:0001A6
a2_ber_transient(1):oidl=$03:0001A7
a2_ber_transient(1):oid=$03:0001A8
a2_ber_transient(10)=$03:0001D9
a2_ber_transient(10):ojet=$03:0001D9
a2_ber_transient(10):bytes=$03:0001DA
a2_ber_transient(10):data=$03:0001DB
a2_ber_transient(10):storage=$03:0001DC
a2_ber_transient(10):oidl=$03:0001DD
a2_ber_transient(10):oid=$03:0001DE
a2_ber_transient(11)=$03:0001DF
a2_ber_transient(11):ojet=$03:0001DF
a2_ber_transient(11):bytes=$03:0001E0
a2_ber_transient(11):data=$03:0001E1
a2_ber_transient(11):storage=$03:0001E2
a2_ber_transient(11):oidl=$03:0001E3
a2_ber_transient(11):oid=$03:0001E4
a2_ber_transient(12)=$03:0001E5
a2_ber_transient(12):ojet=$03:0001E5
a2_ber_transient(12):bytes=$03:0001E6
a2_ber_transient(12):data=$03:0001E7
a2_ber_transient(12):storage=$03:0001E8
a2_ber_transient(12):oidl=$03:0001E9
a2_ber_transient(12):oid=$03:0001EA
a2_ber_transient(13)=$03:0001EB
a2_ber_transient(13):ojet=$03:0001EB
a2_ber_transient(13):bytes=$03:0001EC
a2_ber_transient(13):data=$03:0001ED
a2_ber_transient(13):storage=$03:0001EE
a2_ber_transient(13):oidl=$03:0001EF
a2_ber_transient(13):oid=$03:0001F0
a2_ber_transient(14)=$03:0001F1
a2_ber_transient(14):ojet=$03:0001F1
a2_ber_transient(14):bytes=$03:0001F2
a2_ber_transient(14):data=$03:0001F3
a2_ber_transient(14):storage=$03:0001F4
a2_ber_transient(14):oidl=$03:0001F5
a2_ber_transient(14):oid=$03:0001F6
a2_ber_transient(15)=$03:0001F7
a2_ber_transient(15):ojet=$03:0001F7
a2_ber_transient(15):bytes=$03:0001F8
a2_ber_transient(15):data=$03:0001F9
a2_ber_transient(15):storage=$03:0001FA
a2_ber_transient(15):oidl=$03:0001FB
a2_ber_transient(15):oid=$03:0001FC
a2_ber_transient(16)=$03:0001FD
a2_ber_transient(16):ojet=$03:0001FD
a2_ber_transient(16):bytes=$03:0001FE
a2_ber_transient(16):data=$03:0001FF
a2_ber_transient(16):storage=$03:000200
a2_ber_transient(16):oidl=$03:000201
a2_ber_transient(16):oid=$03:000202
a2_ber_transient(17)=$03:000203
a2_ber_transient(17):ojet=$03:000203
a2_ber_transient(17):bytes=$03:000204
a2_ber_transient(17):data=$03:000205
a2_ber_transient(17):storage=$03:000206
a2_ber_transient(17):oidl=$03:000207
a2_ber_transient(17):oid=$03:000208
a2_ber_transient(18)=$03:000209
a2_ber_transient(18):ojet=$03:000209
a2_ber_transient(18):bytes=$03:00020A
a2_ber_transient(18):data=$03:00020B
a2_ber_transient(18):storage=$03:00020C
a2_ber_transient(18):oidl=$03:00020D
a2_ber_transient(18):oid=$03:00020E
a2_ber_transient(19)=$03:00020F
a2_ber_transient(19):ojet=$03:00020F
a2_ber_transient(19):bytes=$03:000210
a2_ber_transient(19):data=$03:000211
a2_ber_transient(19):storage=$03:000212
a2_ber_transient(19):oidl=$03:000213
a2_ber_transient(19):oid=$03:000214
a2_ber_transient(2)=$03:0001A9
a2_ber_transient(2):ojet=$03:0001A9
a2_ber_transient(2):bytes=$03:0001AA
a2_ber_transient(2):data=$03:0001AB
a2_ber_transient(2):storage=$03:0001AC
a2_ber_transient(2):oidl=$03:0001AD
a2_ber_transient(2):oid=$03:0001AE
a2_ber_transient(20)=$03:000215
a2_ber_transient(20):ojet=$03:000215
a2_ber_transient(20):bytes=$03:000216
a2_ber_transient(20):data=$03:000217
a2_ber_transient(20):storage=$03:000218
a2_ber_transient(20):oidl=$03:000219
a2_ber_transient(20):oid=$03:00021A
a2_ber_transient(21)=$03:00021B
a2_ber_transient(21):ojet=$03:00021B
a2_ber_transient(21):bytes=$03:00021C
a2_ber_transient(21):data=$03:00021D
a2_ber_transient(21):storage=$03:00021E
a2_ber_transient(21):oidl=$03:00021F
a2_ber_transient(21):oid=$03:000220
a2_ber_transient(22)=$03:000221
a2_ber_transient(22):ojet=$03:000221
a2_ber_transient(22):bytes=$03:000222
a2_ber_transient(22):data=$03:000223
a2_ber_transient(22):storage=$03:000224
a2_ber_transient(22):oidl=$03:000225
a2_ber_transient(22):oid=$03:000226
a2_ber_transient(23)=$03:000227
a2_ber_transient(23):ojet=$03:000227
a2_ber_transient(23):bytes=$03:000228
a2_ber_transient(23):data=$03:000229
a2_ber_transient(23):storage=$03:00022A
a2_ber_transient(23):oidl=$03:00022B
a2_ber_transient(23):oid=$03:00022C
a2_ber_transient(24)=$03:00022D
a2_ber_transient(24):ojet=$03:00022D
a2_ber_transient(24):bytes=$03:00022E
a2_ber_transient(24):data=$03:00022F
a2_ber_transient(24):storage=$03:000230
a2_ber_transient(24):oidl=$03:000231
a2_ber_transient(24):oid=$03:000232
a2_ber_transient(3)=$03:0001AF
a2_ber_transient(3):ojet=$03:0001AF
a2_ber_transient(3):bytes=$03:0001B0
a2_ber_transient(3):data=$03:0001B1
a2_ber_transient(3):storage=$03:0001B2
a2_ber_transient(3):oidl=$03:0001B3
a2_ber_transient(3):oid=$03:0001B4
a2_ber_transient(4)=$03:0001B5
a2_ber_transient(4):ojet=$03:0001B5
a2_ber_transient(4):bytes=$03:0001B6
a2_ber_transient(4):data=$03:0001B7
a2_ber_transient(4):storage=$03:0001B8
a2_ber_transient(4):oidl=$03:0001B9
a2_ber_transient(4):oid=$03:0001BA
a2_ber_transient(5)=$03:0001BB
a2_ber_transient(5):ojet=$03:0001BB
a2_ber_transient(5):bytes=$03:0001BC
a2_ber_transient(5):data=$03:0001BD
a2_ber_transient(5):storage=$03:0001BE
a2_ber_transient(5):oidl=$03:0001BF
a2_ber_transient(5):oid=$03:0001C0
a2_ber_transient(6)=$03:0001C1
a2_ber_transient(6):ojet=$03:0001C1
a2_ber_transient(6):bytes=$03:0001C2
a2_ber_transient(6):data=$03:0001C3
a2_ber_transient(6):storage=$03:0001C4
a2_ber_transient(6):oidl=$03:0001C5
a2_ber_transient(6):oid=$03:0001C6
a2_ber_transient(7)=$03:0001C7
a2_ber_transient(7):ojet=$03:0001C7
a2_ber_transient(7):bytes=$03:0001C8
a2_ber_transient(7):data=$03:0001C9
a2_ber_transient(7):storage=$03:0001CA
a2_ber_transient(7):oidl=$03:0001CB
a2_ber_transient(7):oid=$03:0001CC
a2_ber_transient(8)=$03:0001CD
a2_ber_transient(8):ojet=$03:0001CD
a2_ber_transient(8):bytes=$03:0001CE
a2_ber_transient(8):data=$03:0001CF
a2_ber_transient(8):storage=$03:0001D0
a2_ber_transient(8):oidl=$03:0001D1
a2_ber_transient(8):oid=$03:0001D2
a2_ber_transient(9)=$03:0001D3
a2_ber_transient(9):ojet=$03:0001D3
a2_ber_transient(9):bytes=$03:0001D4
a2_ber_transient(9):data=$03:0001D5
a2_ber_transient(9):storage=$03:0001D6
a2_ber_transient(9):oidl=$03:0001D7
a2_ber_transient(9):oid=$03:0001D8
a2_bound=$01:000434
a2_construct_response=$00:000B22
a2_defer=$00:000B67
a2_drop=$00:000B63
a2_error_response=$00:000B3B
a2_gener8=$00:000B74
a2_get=$00:000B02
a2_getcluster=$00:000B0D
a2_getnext=$00:000B02
a2_highest_tuple=000006,00000F
a2_inaxw=000004,00000F
a2_ix=$03:000234
a2_mirror=$00:000B40
a2_next=$00:000AD5
a2_octets=000005,00000F
a2_permission=$03:000233
a2_qload=$00:000B54
a2_release=$00:000B61
a2_restartbits=000001,00000F
a2_restartp=000003,00000F
a2_sample=$00:000AD0
a2_seq_sta_erx=$00:000B6A
a2_set=$00:000B02
a2_snmp_gerr=$00:000B3A
a2_socket=$01:000433
a2_stop=$00:000B67
a2_sva=$01:000435
a2_total8=000007,00000F
a2_transmit_response1=$00:000B36
a2_write_headers=$00:000B8D
a_protos_inline=$00:000047
accept+=$00:00008F
activate_exit=$00:0000F8
activate_thread=$00:0000EE
activity_revision=$03:000004
acw=:P1:0:000044
add_chain=$00:0001C4
add_chain_total=$00:0001CB
add_large_bank=$00:00022B
affinity_ii=$00:00061D
agent2+=$00:000146
agent_2=$00:000AAF
agent_2scan=$00:000AB3
akt=$03:000000
alert_ii=$00:0000FB
alert_iix=$00:00012E
alert_index22=$00:000105
alerts=$00:000109
anomaly=$00:00004A
ap_lib192=$00:0006B2
ap_lib192:square_root=$00:0006B2
ap_lib192:magnitude2=000014,00000F
ap_lib192:trial2=000009,00000F
ap_lib192:diminuition2=000001,00000F
ap_lib192:signs2=000000,00000F
ap_lib192:square_away=$00:0006BD
ap_lib192:uprate=$00:0006C6
ap_lib192:start_variation=$00:0006C9
ap_lib192:downrate=$00:0006CE
ap_lib192:downrate_again!=$00:0006D0
ap_lib192:downrate_down=$00:0006E3
ap_lib192:downrate_again?=$00:0006EA
ap_lib192:arrive=$00:0006EF
ap_lib192:square=$00:0006F7
ap_lib192:root=000005,00000F
ap_lib192:polar=000001,00000F
ap_lib192:caller_x=000000,00000F
ap_lib192:cube_root=$00:000708
ap_lib192:magnitude3=000014,00000F
ap_lib192:trial3=000009,00000F
ap_lib192:diminuition3=000001,00000F
ap_lib192:signs3=000000,00000F
ap_lib192:root3_start=$00:000713
ap_lib192:up3wards=$00:00071C
ap_lib192:scale_away3=$00:00071E
ap_lib192:downrate3=$00:000723
ap_lib192:downrate3_again!=$00:000725
ap_lib192:downrate3_down=$00:000740
ap_lib192:downrate3_again?=$00:000749
ap_lib192:arrive3=$00:00074D
ap_lib192:cube=$00:000758
ap_lib192:cubase=000003,00000F
ap_lib192:flip8=$00:000765
ap_lib192:fraction=$00:00076E
ap_lib192:fraction:input=000007,00000F
ap_lib192:fraction:i_rkxy=000000,00000F
ap_lib192:fraction:all_integer=$00:000788
ap_lib192:fraction:all_fraction=$00:00078B
ap_lib192:fraction:complete=$00:00078B
ap_lib192:integer=$00:00078D
ap_lib192:integer:input=000007,00000F
ap_lib192:integer:i_rkxy=000000,00000F
ap_lib192:integer:major_part_only=$00:00079D
ap_lib192:integer:major_part_plus=$00:0007A4
ap_lib192:integer:all_fraction=$00:0007B1
ap_lib192:integer:all_integer=$00:0007B4
ap_lib192:integer:complete=$00:0007B4
ap_lib96=$00:0007B6
ap_lib96:fraction=$00:0007B6
ap_lib96:fraction:input=000007,00000F
ap_lib96:fraction:i_rkxy=000000,00000F
ap_lib96:fraction:all_integer=$00:0007CB
ap_lib96:fraction:all_fraction=$00:0007CD
ap_lib96:fraction:complete=$00:0007CD
ap_lib96:integer=$00:0007CF
ap_lib96:integer:input=000007,00000F
ap_lib96:integer:i_rkxy=000000,00000F
ap_lib96:integer:all_fraction=$00:0007DC
ap_lib96:integer:all_integer=$00:0007DE
ap_lib96:integer:complete=$00:0007DE
ap_lib96:sign_around=$00:0007E0
ap_lib96:output=000000,00000F
ap_lib96:insert6=$00:0007ED
ap_lib96:insert7=$00:0007F4
ap_lib96:reload=$00:0007F9
app_protos+=$00:000160
app_threads+=$00:00015F
arp_cache=:N129:P:0:000000
arp_dgram=:N129:P:0:000000
arp_rx=$00:000F72
arp_store=:N65:F:0:000000
array=$00:000201
array_high_ix=$00:000203
array_ii=$00:00004E
assign_xvector_ii=$00:0005CF
athreads_start=$00:000040
available_banks=$00:0001BD
axw=$43:000000,000003
axw:next=$43:000000,000003
axw:frame=$43:000001,000003
axw:i_f=$43:000002,000003
axw:bytes=$43:000003,000003
axw:dgram=$43:000004,000003
axw:uproto=$43:000005,000003
axw:sobdi=$43:000006,000003
axw:apdata=$43:000006,000003
axw:tcbloc=$43:000007,000003
axw:ifql=$43:000007,000003
axw:lso=$43:000007,000003
axw:total_bytes=$43:000007,000003
axw:readpoint=$43:000007,000003
axw:next_bdi=$43:000007,000003
b1_high=$01:0005D2
b1_ii=$00:0005ED
b1_stack_given=$00:000376
bank=$00:0001D2
bank_free=$00:000156
bank_free_ii=$00:000057
bank_free_sysmem=$00:000060
bank_freed=$00:00006B
bank_freewheel=$00:000062
bank_ii=$00:000045
bank_is_free=$00:000187
bank_not_obtained=$00:000231
banks_lock_cell=$41:003003
base_management_bank=$00:000101
base_management_page=$00:0000EA
base_standard_netbuf_ii=$00:000684
ber_akku=000002,00000F
ber_command=$03:000235
ber_edit_cluster=$00:000D0C
ber_edit_integer=$00:000BBA
ber_edit_length1=$00:000BEB
ber_edit_length2=$00:000BFE
ber_edit_long=$00:000BCB
ber_edit_mojet=$00:000BA2
ber_edit_oid=$00:000C02
ber_edit_rotate1=$00:000BE5
ber_edit_rotate2=$00:000BF8
ber_edit_semantic_i=$00:000CF2
ber_edit_string=$00:000C08
ber_edit_ul=$00:000BEF
ber_edit_unsigned=$00:000BDB
ber_esi_effect=$00:000D04
ber_esi_shift=$00:000CFC
ber_inbytes=000005,00000F
ber_load_oid=$00:000C60
ber_load_oid?=$00:000C61
ber_load_oid_octet!=$00:000C6F
ber_load_oid_octet?=$00:000C74
ber_load_oidx=$00:000C75
ber_oid_array=000006,00000F
ber_read_data=$00:000CC5
ber_read_datai=$00:000CC6
ber_release16!=$00:000C57
ber_release16?=$00:000C5A
ber_release_cluster=$00:000D17
ber_release_cluster_p=$00:000D16
ber_release_identifier=$00:000C3F
ber_release_ioctet!=$00:000C28
ber_release_ioctet?=$00:000C2B
ber_release_mo=$00:000C10
ber_release_moi=$00:000C20
ber_release_netaddress=$00:000C48
ber_release_oid=$00:000C48
ber_release_protocol_i=$00:000C0E
ber_release_protocol_s=$00:000C46
ber_release_string=$00:000C48
ber_release_svalue=$00:000C4B
ber_release_xlength=$00:000C2D
ber_ri=$00:000CE3
ber_rii=$00:000CE8
ber_rl=$00:000CAF
ber_rll=$00:000CB6
ber_rlx=$00:000CBC
ber_rs=$00:000CC7
ber_rs!=$00:000CD1
ber_rs?=$00:000CD4
ber_rs_no_word_count=$00:000CE1
ber_savebytes=000001,00000F
ber_sequence_generr=$00:000D69
ber_sequence_getnext=$00:000D4D
ber_sequence_represent=$00:000D5F
ber_sequence_scan=$00:000D1C
ber_sequence_scan_cluster=$00:000D23
ber_sequence_scan_get=$00:000D46
ber_sequence_scanx=$00:000D6B
ber_sequence_scanz=$00:000D72
ber_sequence_set=$00:000D54
ber_sequence_variable?=$00:000D38
ber_store_oid_token=$00:000C76
ber_string_released=$00:000C5F
ber_swap_compare=$00:000CC0
ber_t=$43:000000,000003
ber_t:ojet=$43:000000,000003
ber_t:bytes=$43:000001,000003
ber_t:data=$43:000002,000003
ber_t:storage=$43:000003,000003
ber_t:oidl=$43:000004,000003
ber_t:oid=$43:000005,000003
ber_template=:N129:P:0:000000
ber_transientp=000000,00000F
ber_woi=$00:000C80
ber_woi14!=$00:000C97
ber_woi21!=$00:000C92
ber_woi21?=$00:000C9C
ber_woi7=$00:000CA0
ber_woi_token!=$00:000C88
ber_woi_token?=$00:000CA4
ber_xlength2?=$00:000C33
ber_xlength3!=$00:000C3A
bfound=$00:000224
bfound1=$00:000225
big_spiral=$00:0001AA
bind+=$00:000085
bsearch=$00:00020C
buy1=$00:000E3C
buy1_complete=$00:000E61
buy1_never=$00:000E3E
buy1_new=$00:000E52
buy1_new_now=$00:000E5C
buy1_soon=$00:000E40
cache_netb=:P1:0:00003D
cache_standard_netbuf_ii=$00:000676
call_ifconfig=$00:0000C9
call_route_config=$00:0000CB
cannot_add_bank=$00:000232
chain_insert=$00:00019C
chains_added=$00:0001CA
check8in=:P1:0:000071
check_complete=$00:00029F
check_handle=$00:00056B
check_part1=$00:00026E
check_part1_go=$00:000273
check_part1s=$00:000270
check_payload=$00:0004CB
check_payload_tx=$00:0004CA
check_updword(10)=$00:000297
check_updword(11)=$00:000296
check_updword(12)=$00:000295
check_updword(13)=$00:000294
check_updword(14)=$00:000293
check_updword(15)=$00:000292
check_updword(16)=$00:000291
check_updword(17)=$00:000290
check_updword(18)=$00:00028F
check_updword(19)=$00:00028E
check_updword(20)=$00:00028D
check_updword(21)=$00:00028C
check_updword(22)=$00:00028B
check_updword(23)=$00:00028A
check_updword(24)=$00:000289
check_updword(25)=$00:000288
check_updword(26)=$00:000287
check_updword(27)=$00:000286
check_updword(28)=$00:000285
check_updword(29)=$00:000284
check_updword(30)=$00:000283
check_updword(31)=$00:000282
check_updword(32)=$00:000281
check_updword(33)=$00:000280
check_updword(34)=$00:00027F
check_updword(35)=$00:00027E
check_updword(36)=$00:00027D
check_updword(37)=$00:00027C
check_updword(38)=$00:00027B
check_updword(39)=$00:00027A
check_updword(40)=$00:000279
check_updword(6)=$00:00029B
check_updword(7)=$00:00029A
check_updword(8)=$00:000299
check_updword(9)=$00:000298
choose=$00:0002F5
cidrdestflags=000004,00000F
cidrdestroutine=000005,00000F
cidrdestseq=000003,00000F
cidrdesttypeflags=000004,00000F
cidrdesttyperoutine=000005,00000F
cidrdesttypeseq=000003,00000F
cidrmasklogflags=000004,00000F
cidrmasklogroutine=000005,00000F
cidrmasklogseq=000003,00000F
cidrnexthopflags=000004,00000F
cidrnexthoproutine=000005,00000F
cidrnexthopseq=000003,00000F
cidrnexthoptypeflags=000004,00000F
cidrnexthoptyperoutine=000005,00000F
cidrnexthoptypeseq=000003,00000F
cidrrouteifidxflags=000004,00000F
cidrrouteifidxroutine=000005,00000F
cidrrouteifidxseq=000003,00000F
cidrroutetypeflags=000004,00000F
cidrroutetyperoutine=000005,00000F
cidrroutetypeseq=000003,00000F
connect+=$00:000084
construct_xdgram=$00:00014B
core_resume=$00:0002F0
core_resume1=$00:0002F3
cosine192+=$00:000175
cosine96+=$00:000179
cotangent192+=$00:000177
cotangent96+=$00:00017B
cube192+=$00:00017E
cube_root192+=$00:00017F
d48_48
datagram=:N129:P:0:000000
date_timef3
dayclock_u=$00:00010C
dayclock_w_ii=$00:0005F1
delete=$00:00026B
delete_another=$00:00026C
delivery=:N129:P:0:000000
descriptor=$46:000000,00000E
descriptor:next=$46:000000,00000E
descriptor:frame=$46:000001,00000E
descriptor:i_f=$46:000002,00000E
descriptor:bytes=$46:000003,00000E
descriptor:dgram=$46:000004,00000E
descriptor:uproto=$46:000005,00000E
descriptor:sobdi=$46:000006,00000E
descriptor:apdata=$46:000006,00000E
descriptor:tcbloc=$46:000007,00000E
descriptor:ifql=$46:000007,00000E
descriptor:lso=$46:000007,00000E
descriptor:total_bytes=$46:000007,00000E
descriptor:readpoint=$46:000007,00000E
descriptor:next_bdi=$46:000007,00000E
device_activate=$00:000112
device_key(1)=$41:003074
device_key(10)=$41:003086
device_key(11)=$41:003088
device_key(12)=$41:00308A
device_key(13)=$41:00308C
device_key(14)=$41:00308E
device_key(15)=$41:003090
device_key(16)=$41:003092
device_key(17)=$41:003094
device_key(18)=$41:003096
device_key(19)=$41:003098
device_key(2)=$41:003076
device_key(20)=$41:00309A
device_key(21)=$41:00309C
device_key(22)=$41:00309E
device_key(23)=$41:0030A0
device_key(24)=$41:0030A2
device_key(25)=$41:0030A4
device_key(26)=$41:0030A6
device_key(27)=$41:0030A8
device_key(28)=$41:0030AA
device_key(29)=$41:0030AC
device_key(3)=$41:003078
device_key(30)=$41:0030AE
device_key(31)=$41:0030B0
device_key(32)=$41:0030B2
device_key(33)=$41:0030B4
device_key(34)=$41:0030B6
device_key(35)=$41:0030B8
device_key(36)=$41:0030BA
device_key(37)=$41:0030BC
device_key(38)=$41:0030BE
device_key(39)=$41:0030C0
device_key(4)=$41:00307A
device_key(40)=$41:0030C2
device_key(41)=$41:0030C4
device_key(42)=$41:0030C6
device_key(43)=$41:0030C8
device_key(44)=$41:0030CA
device_key(45)=$41:0030CC
device_key(46)=$41:0030CE
device_key(47)=$41:0030D0
device_key(48)=$41:0030D2
device_key(49)=$41:0030D4
device_key(5)=$41:00307C
device_key(50)=$41:0030D6
device_key(51)=$41:0030D8
device_key(52)=$41:0030DA
device_key(53)=$41:0030DC
device_key(54)=$41:0030DE
device_key(55)=$41:0030E0
device_key(56)=$41:0030E2
device_key(57)=$41:0030E4
device_key(58)=$41:0030E6
device_key(59)=$41:0030E8
device_key(6)=$41:00307E
device_key(60)=$41:0030EA
device_key(61)=$41:0030EC
device_key(62)=$41:0030EE
device_key(63)=$41:0030F0
device_key(7)=$41:003080
device_key(8)=$41:003082
device_key(9)=$41:003084
dgram=$47:000000,00000F
dgram:vers_ihl_tos=$47:000000,00000F
dgram:bytes=$47:000001,00000F
dgram:id=$47:000002,00000F
dgram:flags_fragment=$47:000003,00000F
dgram:ttl_protocol=$47:000004,00000F
dgram:checksum=$47:000005,00000F
dgram:ipsource=$47:000006,00000F
dgram:ipdest=$47:000008,00000F
dgram_load(1)=$00:0001AE
dgram_load(10)=$00:0001A5
dgram_load(11)=$00:0001A4
dgram_load(12)=$00:0001A3
dgram_load(13)=$00:0001A2
dgram_load(14)=$00:0001A1
dgram_load(15)=$00:0001A0
dgram_load(16)=$00:00019F
dgram_load(17)=$00:00019E
dgram_load(18)=$00:00019D
dgram_load(19)=$00:00019C
dgram_load(2)=$00:0001AD
dgram_load(20)=$00:00019B
dgram_load(3)=$00:0001AC
dgram_load(4)=$00:0001AB
dgram_load(5)=$00:0001AA
dgram_load(6)=$00:0001A9
dgram_load(7)=$00:0001A8
dgram_load(8)=$00:0001A7
dgram_load(9)=$00:0001A6
display_quartets
dq=:P1:0:000040
e$E=:N65:F:0:000000
edit=[001b]000000
edit48=[001d]000000
edit48s=[001f]000000
edit48u=[001e]000000
edit72=[0020]000000
edit72s=[0022]000000
edit72u=[0021]000000
edit_prepend=$00:00013A
edits=[001c]000000
egpAs=$00:0008F4
egpAs:rw_typ_tokens_words=$00:0008F4
egpAs:o=$00:0008F5
egpAs:l=$00:0008F6
egpAs:data=$00:0008F7
egpAs:flags=$00:0008F8
egpAs:bucket=$00:0008F9
egpAs:ranges=$00:0008F9
egpAs:range=$00:0008FA
egpAs:advance=$00:0008FA
egpAs:netstring=:N129:P:0:000000
egpAs:i=$01:000599
egpInErrors=$00:000888
egpInErrors:rw_typ_tokens_words=$00:000888
egpInErrors:o=$00:000889
egpInErrors:l=$00:00088A
egpInErrors:data=$00:00088B
egpInErrors:flags=$00:00088C
egpInErrors:bucket=$00:00088D
egpInErrors:ranges=$00:00088D
egpInErrors:range=$00:00088E
egpInErrors:advance=$00:00088E
egpInErrors:netstring=:N129:P:0:000000
egpInErrors:i=$01:00057B
egpInMsgs=$00:000882
egpInMsgs:rw_typ_tokens_words=$00:000882
egpInMsgs:o=$00:000883
egpInMsgs:l=$00:000884
egpInMsgs:data=$00:000885
egpInMsgs:flags=$00:000886
egpInMsgs:bucket=$00:000887
egpInMsgs:ranges=$00:000887
egpInMsgs:range=$00:000888
egpInMsgs:advance=$00:000888
egpInMsgs:netstring=:N129:P:0:000000
egpInMsgs:i=$01:000579
egpNeighAddr=$00:0008A0
egpNeighAddr:rw_typ_tokens_words=$00:0008A0
egpNeighAddr:o=$00:0008A1
egpNeighAddr:l=$00:0008A2
egpNeighAddr:data=$00:0008A3
egpNeighAddr:flags=$00:0008A4
egpNeighAddr:bucket=$00:0008A5
egpNeighAddr:ranges=$00:0008A5
egpNeighAddr:advance=$00:0008A6
egpNeighAddr:netstring=:N129:P:0:000000
egpNeighAddr:n=$01:000582
egpNeighAs=$00:0008A6
egpNeighAs:rw_typ_tokens_words=$00:0008A6
egpNeighAs:o=$00:0008A7
egpNeighAs:l=$00:0008A8
egpNeighAs:data=$00:0008A9
egpNeighAs:flags=$00:0008AA
egpNeighAs:bucket=$00:0008AB
egpNeighAs:ranges=$00:0008AB
egpNeighAs:range=$00:0008AC
egpNeighAs:advance=$00:0008AC
egpNeighAs:netstring=:N129:P:0:000000
egpNeighAs:i=$01:000584
egpNeighEventTrigger=$00:0008EE
egpNeighEventTrigger:rw_typ_tokens_words=$00:0008EE
egpNeighEventTrigger:o=$00:0008EF
egpNeighEventTrigger:l=$00:0008F0
egpNeighEventTrigger:data=$00:0008F1
egpNeighEventTrigger:flags=$00:0008F2
egpNeighEventTrigger:bucket=$00:0008F3
egpNeighEventTrigger:ranges=$00:0008F3
egpNeighEventTrigger:range=$00:0008F4
egpNeighEventTrigger:advance=$00:0008F4
egpNeighEventTrigger:netstring=:N129:P:0:000000
egpNeighEventTrigger:i=$01:000598
egpNeighInErrMsgs=$00:0008C4
egpNeighInErrMsgs:rw_typ_tokens_words=$00:0008C4
egpNeighInErrMsgs:o=$00:0008C5
egpNeighInErrMsgs:l=$00:0008C6
egpNeighInErrMsgs:data=$00:0008C7
egpNeighInErrMsgs:flags=$00:0008C8
egpNeighInErrMsgs:bucket=$00:0008C9
egpNeighInErrMsgs:ranges=$00:0008C9
egpNeighInErrMsgs:range=$00:0008CA
egpNeighInErrMsgs:advance=$00:0008CA
egpNeighInErrMsgs:netstring=:N129:P:0:000000
egpNeighInErrMsgs:i=$01:00058D
egpNeighInErrs=$00:0008B2
egpNeighInErrs:rw_typ_tokens_words=$00:0008B2
egpNeighInErrs:o=$00:0008B3
egpNeighInErrs:l=$00:0008B4
egpNeighInErrs:data=$00:0008B5
egpNeighInErrs:flags=$00:0008B6
egpNeighInErrs:bucket=$00:0008B7
egpNeighInErrs:ranges=$00:0008B7
egpNeighInErrs:range=$00:0008B8
egpNeighInErrs:advance=$00:0008B8
egpNeighInErrs:netstring=:N129:P:0:000000
egpNeighInErrs:i=$01:000587
egpNeighInMsgs=$00:0008AC
egpNeighInMsgs:rw_typ_tokens_words=$00:0008AC
egpNeighInMsgs:o=$00:0008AD
egpNeighInMsgs:l=$00:0008AE
egpNeighInMsgs:data=$00:0008AF
egpNeighInMsgs:flags=$00:0008B0
egpNeighInMsgs:bucket=$00:0008B1
egpNeighInMsgs:ranges=$00:0008B1
egpNeighInMsgs:range=$00:0008B2
egpNeighInMsgs:advance=$00:0008B2
egpNeighInMsgs:netstring=:N129:P:0:000000
egpNeighInMsgs:i=$01:000585
egpNeighIntervalHello=$00:0008DC
egpNeighIntervalHello:rw_typ_tokens_words=$00:0008DC
egpNeighIntervalHello:o=$00:0008DD
egpNeighIntervalHello:l=$00:0008DE
egpNeighIntervalHello:data=$00:0008DF
egpNeighIntervalHello:flags=$00:0008E0
egpNeighIntervalHello:bucket=$00:0008E1
egpNeighIntervalHello:ranges=$00:0008E1
egpNeighIntervalHello:range=$00:0008E2
egpNeighIntervalHello:advance=$00:0008E2
egpNeighIntervalHello:netstring=:N129:P:0:000000
egpNeighIntervalHello:i=$01:000595
egpNeighIntervalPoll=$00:0008E2
egpNeighIntervalPoll:rw_typ_tokens_words=$00:0008E2
egpNeighIntervalPoll:o=$00:0008E3
egpNeighIntervalPoll:l=$00:0008E4
egpNeighIntervalPoll:data=$00:0008E5
egpNeighIntervalPoll:flags=$00:0008E6
egpNeighIntervalPoll:bucket=$00:0008E7
egpNeighIntervalPoll:ranges=$00:0008E7
egpNeighIntervalPoll:range=$00:0008E8
egpNeighIntervalPoll:advance=$00:0008E8
egpNeighIntervalPoll:netstring=:N129:P:0:000000
egpNeighIntervalPoll:i=$01:000596
egpNeighMode=$00:0008E8
egpNeighMode:rw_typ_tokens_words=$00:0008E8
egpNeighMode:o=$00:0008E9
egpNeighMode:l=$00:0008EA
egpNeighMode:data=$00:0008EB
egpNeighMode:flags=$00:0008EC
egpNeighMode:bucket=$00:0008ED
egpNeighMode:ranges=$00:0008ED
egpNeighMode:range=$00:0008EE
egpNeighMode:advance=$00:0008EE
egpNeighMode:netstring=:N129:P:0:000000
egpNeighMode:i=$01:000597
egpNeighOutErrMsgs=$00:0008CA
egpNeighOutErrMsgs:rw_typ_tokens_words=$00:0008CA
egpNeighOutErrMsgs:o=$00:0008CB
egpNeighOutErrMsgs:l=$00:0008CC
egpNeighOutErrMsgs:data=$00:0008CD
egpNeighOutErrMsgs:flags=$00:0008CE
egpNeighOutErrMsgs:bucket=$00:0008CF
egpNeighOutErrMsgs:ranges=$00:0008CF
egpNeighOutErrMsgs:range=$00:0008D0
egpNeighOutErrMsgs:advance=$00:0008D0
egpNeighOutErrMsgs:netstring=:N129:P:0:000000
egpNeighOutErrMsgs:i=$01:00058F
egpNeighOutErrs=$00:0008BE
egpNeighOutErrs:rw_typ_tokens_words=$00:0008BE
egpNeighOutErrs:o=$00:0008BF
egpNeighOutErrs:l=$00:0008C0
egpNeighOutErrs:data=$00:0008C1
egpNeighOutErrs:flags=$00:0008C2
egpNeighOutErrs:bucket=$00:0008C3
egpNeighOutErrs:ranges=$00:0008C3
egpNeighOutErrs:range=$00:0008C4
egpNeighOutErrs:advance=$00:0008C4
egpNeighOutErrs:netstring=:N129:P:0:000000
egpNeighOutErrs:i=$01:00058B
egpNeighOutMsgs=$00:0008B8
egpNeighOutMsgs:rw_typ_tokens_words=$00:0008B8
egpNeighOutMsgs:o=$00:0008B9
egpNeighOutMsgs:l=$00:0008BA
egpNeighOutMsgs:data=$00:0008BB
egpNeighOutMsgs:flags=$00:0008BC
egpNeighOutMsgs:bucket=$00:0008BD
egpNeighOutMsgs:ranges=$00:0008BD
egpNeighOutMsgs:range=$00:0008BE
egpNeighOutMsgs:advance=$00:0008BE
egpNeighOutMsgs:netstring=:N129:P:0:000000
egpNeighOutMsgs:i=$01:000589
egpNeighState=$00:00089A
egpNeighState:rw_typ_tokens_words=$00:00089A
egpNeighState:o=$00:00089B
egpNeighState:l=$00:00089C
egpNeighState:data=$00:00089D
egpNeighState:flags=$00:00089E
egpNeighState:bucket=$00:00089F
egpNeighState:ranges=$00:00089F
egpNeighState:range=$00:0008A0
egpNeighState:advance=$00:0008A0
egpNeighState:netstring=:N129:P:0:000000
egpNeighState:i=$01:000581
egpNeighStateDowns=$00:0008D6
egpNeighStateDowns:rw_typ_tokens_words=$00:0008D6
egpNeighStateDowns:o=$00:0008D7
egpNeighStateDowns:l=$00:0008D8
egpNeighStateDowns:data=$00:0008D9
egpNeighStateDowns:flags=$00:0008DA
egpNeighStateDowns:bucket=$00:0008DB
egpNeighStateDowns:ranges=$00:0008DB
egpNeighStateDowns:range=$00:0008DC
egpNeighStateDowns:advance=$00:0008DC
egpNeighStateDowns:netstring=:N129:P:0:000000
egpNeighStateDowns:i=$01:000593
egpNeighStateUps=$00:0008D0
egpNeighStateUps:rw_typ_tokens_words=$00:0008D0
egpNeighStateUps:o=$00:0008D1
egpNeighStateUps:l=$00:0008D2
egpNeighStateUps:data=$00:0008D3
egpNeighStateUps:flags=$00:0008D4
egpNeighStateUps:bucket=$00:0008D5
egpNeighStateUps:ranges=$00:0008D5
egpNeighStateUps:range=$00:0008D6
egpNeighStateUps:advance=$00:0008D6
egpNeighStateUps:netstring=:N129:P:0:000000
egpNeighStateUps:i=$01:000591
egpOutErrors=$00:000894
egpOutErrors:rw_typ_tokens_words=$00:000894
egpOutErrors:o=$00:000895
egpOutErrors:l=$00:000896
egpOutErrors:data=$00:000897
egpOutErrors:flags=$00:000898
egpOutErrors:bucket=$00:000899
egpOutErrors:ranges=$00:000899
egpOutErrors:range=$00:00089A
egpOutErrors:advance=$00:00089A
egpOutErrors:netstring=:N129:P:0:000000
egpOutErrors:i=$01:00057F
egpOutMsgs=$00:00088E
egpOutMsgs:rw_typ_tokens_words=$00:00088E
egpOutMsgs:o=$00:00088F
egpOutMsgs:l=$00:000890
egpOutMsgs:data=$00:000891
egpOutMsgs:flags=$00:000892
egpOutMsgs:bucket=$00:000893
egpOutMsgs:ranges=$00:000893
egpOutMsgs:range=$00:000894
egpOutMsgs:advance=$00:000894
egpOutMsgs:netstring=:N129:P:0:000000
egpOutMsgs:i=$01:00057D
encode_handle=$00:00054B
end_big_spiral=$00:0001BB
energy$advise=$41:003002
energy_ii=$00:0006FE
engage=$00:000040
established_count=000001,00000F
ethernet_relay=000006
event_free_ii=$00:000511
event_free_iix=$00:000521
event_time_limit=$00:00052A
event_wait_ii=$00:000522
exit=$00:000262
exit_ii=$00:000271
external_interrupts=$00:00006F
external_ix=$00:00009F
external_ixx=$00:0000A1
external_next=$00:00007B
external_zx=$00:00009E
extract_if=$00:000E1A
far_initpool+=$00:000099
far_q2+=$00:00009D
far_readq+=$00:00009C
fedit192a
fedita
feditia
fflush=:N129:P:0:000000
fgets=:N129:P:0:000000
fgets_datafile
fhandle_add_pointer=$00:000584
file_handle_ii=$00:000578
file_open_frame_ii=$00:0006D4
file_open_heap=$00:0006E1
files_open_heap_ii=$00:0006DD
fileshare_assign
fileshare_space_open
find_higher_point=$00:00017E
first_bdx=$41:003072
float2i72
floating_edit=[0015]000000
floating_edit192=[0017]000000
floating_iedit=[0016]000000
floating_scan=[0014]000000
floating_scan192=[0019]000000
forward=$00:0002FA
forward2thread=$00:000307
forward_callstring
found_higher_point=$00:000185
found_tdescriptor=$00:000483
fp192_add
fp192_add_negative
fp192_divide
fp192_load
fp192_load_negative
fp192_mfa
fp192_multiply
fp_192=$00:0000AD
fp_192:socket1=$01:000429
fp_192:fp_bound=$01:00042A
fp_192:portcb_lva=$01:00042B
fp_192:portcb=$01:00042C
fp_192:fp_server=$00:0000AD
fp_192:response_axw=000011,00000F
fp_192:operator=000010,00000F
fp_192:left=000008,00000F
fp_192:right=000000,00000F
fp_192:fp_rx=$00:0000C2
fp_192:fp_rx1=$00:0000C6
fp_192:fp_again=$00:0000E3
fp_192:fp_add=$00:0000F1
fp_192:fp_add1=$00:0000F4
fp_192:fp_add_negative=$00:0000FD
fp_192:fp_add_negative1=$00:000100
fp_192:fp_multiply=$00:000109
fp_192:fp_divide=$00:000113
fp_192:fp_divide1=$00:000116
fp_192:fp_nop=$00:00011F
fp_192:fp_edit=$00:000123
fp_192:fp_release=$00:000130
fp_192:fp_no_traffic=$00:000134
fp_192:fp_error=$00:000134
fp_96=$00:00004A
fp_96:socket1=$01:000425
fp_96:fp_bound=$01:000426
fp_96:portcb_lva=$01:000427
fp_96:portcb=$01:000428
fp_96:fp_server=$00:00004A
fp_96:response_axw=000009,00000F
fp_96:operator=000008,00000F
fp_96:left=000004,00000F
fp_96:right=000000,00000F
fp_96:fp_rx=$00:00005D
fp_96:fp_rx1=$00:000061
fp_96:fp_again=$00:00007A
fp_96:fp_add=$00:000088
fp_96:fp_add_again=$00:000089
fp_96:fp_add_negative=$00:00008C
fp_96:fp_add_negative_again=$00:00008D
fp_96:fp_multiply=$00:000090
fp_96:fp_multiply_again=$00:000091
fp_96:fp_divide=$00:000094
fp_96:fp_divide_again=$00:000095
fp_96:fp_nop=$00:000098
fp_96:fp_edit=$00:000099
fp_96:fp_release=$00:0000A6
fp_96:fp_no_traffic=$00:0000AA
fp_96:fp_error=$00:0000AA
fp_reactz=$00:000137
fp_server=$00:000142
fp_server_192=$00:000143
fponline=$00:000145
fponline:UDPQ=000001
fponline:COMMANDS_EOP=000011
fponline:ZENITH=000010
fponline:STACK_GUARD=000012
fponline:MESSAGE=000013
fponline:s1=$03:0000D7
fponline:socket_lva=$03:0000D8
fponline:editp=$03:0000DA
fponline:buffer=$03:0000DB
fponline:launch=$00:000594
fponline:zstart=$00:000599
fponline:server=$00:00059A
fponline:rxnext=$00:0005A7
fponline:inform=$00:0005C1
fponline:respond=$00:0005C4
fponline:release_request=$00:0005CA
fponline:wait=$00:0005CD
fponline:disengage_free=$00:0005CF
fponline:free_socket=$00:0005D1
fponline:leave=$00:0005D3
fponline:pdu=$00:0005D4
fponline:command=$00:0005E2
fponline:fpo_load=$00:000604
fponline:fpo_load_negative=$00:00060C
fponline:fpo_push=$00:000614
fponline:fpo_add=$00:000617
fponline:fpo_add_negative=$00:00061F
fponline:fpo_multiply=$00:000627
fponline:fpo_divide=$00:00062F
fponline:fpo_pop_add=$00:000637
fponline:fpo_pop_add_negative=$00:00063E
fponline:fpo_pop_multiply=$00:000645
fponline:fpo_pop_divide=$00:00064C
fponline:fpo_square_root=$00:000653
fponline:fpo_square=$00:000659
fponline:fpo_cube_root=$00:00065F
fponline:fpo_cube=$00:000665
fponline:fpo_sine=$00:00066B
fponline:fpo_cosine=$00:000671
fponline:fpo_tangent=$00:000677
fponline:fpo_cotangent=$00:00067D
fponline:fpo_sine96=$00:000683
fponline:fpo_cosine96=$00:000689
fponline:fpo_tangent96=$00:00068F
fponline:fpo_cotangent96=$00:000695
fponline:fpo_fraction=$00:00069B
fponline:fpo_integer=$00:0006A1
fponline:trigx=$00:0006A7
fponline:outrage=$00:0006AA
fponline:exitu=$00:0006AC
fprintf=:N129:P:0:000000
fpxpo_ii=$00:0000BF
fpxpo_read_clear_ii=$00:0005FD
fraction192+=$00:000170
fraction96+=$00:000172
frame2p=$00:0000B7
frame2proto=$00:0000B9
frame_to_protocol+=$00:000098
frames=$00:000092
framet1=:P1:0:000049
fread=:N129:P:0:000000
free_chain(1)=$41:003007
free_chain(10)=$41:003010
free_chain(11)=$41:003011
free_chain(12)=$41:003012
free_chain(13)=$41:003013
free_chain(14)=$41:003014
free_chain(15)=$41:003015
free_chain(16)=$41:003016
free_chain(17)=$41:003017
free_chain(18)=$41:003018
free_chain(19)=$41:003019
free_chain(2)=$41:003008
free_chain(20)=$41:00301A
free_chain(21)=$41:00301B
free_chain(22)=$41:00301C
free_chain(23)=$41:00301D
free_chain(24)=$41:00301E
free_chain(25)=$41:00301F
free_chain(26)=$41:003020
free_chain(27)=$41:003021
free_chain(28)=$41:003022
free_chain(29)=$41:003023
free_chain(3)=$41:003009
free_chain(30)=$41:003024
free_chain(31)=$41:003025
free_chain(32)=$41:003026
free_chain(33)=$41:003027
free_chain(34)=$41:003028
free_chain(35)=$41:003029
free_chain(36)=$41:00302A
free_chain(37)=$41:00302B
free_chain(38)=$41:00302C
free_chain(39)=$41:00302D
free_chain(4)=$41:00300A
free_chain(40)=$41:00302E
free_chain(41)=$41:00302F
free_chain(42)=$41:003030
free_chain(43)=$41:003031
free_chain(44)=$41:003032
free_chain(45)=$41:003033
free_chain(46)=$41:003034
free_chain(47)=$41:003035
free_chain(48)=$41:003036
free_chain(49)=$41:003037
free_chain(5)=$41:00300B
free_chain(50)=$41:003038
free_chain(51)=$41:003039
free_chain(52)=$41:00303A
free_chain(53)=$41:00303B
free_chain(54)=$41:00303C
free_chain(55)=$41:00303D
free_chain(56)=$41:00303E
free_chain(57)=$41:00303F
free_chain(58)=$41:003040
free_chain(59)=$41:003041
free_chain(6)=$41:00300C
free_chain(60)=$41:003042
free_chain(61)=$41:003043
free_chain(62)=$41:003044
free_chain(63)=$41:003045
free_chain(64)=$41:003046
free_chain(7)=$41:00300D
free_chain(8)=$41:00300E
free_chain(9)=$41:00300F
free_handle_ii=$00:000557
free_handle_test=$00:000562
free_tdescriptor=$41:003048
freetotal_ii=$00:000040
fs24_cursor=00001A,00000F
fs24_open
fs24_read
fs24_sla=$03:000094
fs24_sla2=$03:000096
fs_dsearch
fs_find
fs_lookup=$43:000000,000003
fs_lookup:e=$43:000000,000003
fs_lookup:e:rfw=$43:000000,000003
fs_lookup:e:granules=$43:000001,000003
fs_lookup:e:granule=$43:000002,000003
fs_lookup:e:next=$43:000004,000003
fs_lookup:e:next_offset=$43:000006,000003
fs_lookup:quanta=$43:000007,000003
fs_lookup:name=$43:000009,000003
fs_xbase
fscan192a
fscana
fscanf=:N129:P:0:000000
fsearch=$00:00018E
fspac=000000,00000F
fspath
fspaxq=$42:000000,000002
fspaxq:serialp=$42:000000,000002
fspaxq:serialp:fs_type=$42:000000,000002
fspaxq:serialp:device=$42:000001,000002
fspaxq:serialp:bank=$42:000001,000002
fspaxq:serialp:extent=$42:000002,000002
fspaxq:serialp:absolute_pointer=$42:000004,000002
fspaxq:o=$42:000006,000002
fspaxq:o:column=$42:000006,000002
fspaxq:o:flags=$42:000007,000002
fspaxq:rewind_extentp=$42:000008,000002
fspaxq:quantum_pointer=$42:00000A,000002
fsymbola
fwrite=:N129:P:0:000000
g_ibuffer=$00:0002B1
gate=$00:0003B1
gets=:N129:P:0:000000
guard_ii=$00:0002A3
handle_free_already=$00:00056A
handle_ii=$00:00053F
handle_out_of_range=$00:000573
http_bound=$03:000091
http_bound?=$00:000443
http_drop_request=$00:0004BF
http_file_octets=000018,00000F
http_final_extent=$00:0004B2
http_formation1=$03:000099
http_formation1_length=000049
http_formation2=$03:0000B2
http_get_default=$00:000500
http_get_what=$00:0004CA
http_hangup=$00:0004C4
http_listening_transmission=$03:0000BA
http_located=$00:000484
http_name=$00:0004E3
http_name1=$00:0004F0
http_name2=$00:0004ED
http_name3=$00:0004EE
http_name_2nd_read=$00:0004E5
http_name_buffer=000000,000003
http_name_mark=$00:0004F5
http_name_x=$00:0004FE
http_next_extent=$00:0004A0
http_norequest=$00:0004BE
http_pushover=$00:0004B8
http_remote_close?=$00:000460
http_request_thread=$00:000468
http_s=$03:000090
http_search2=$00:000479
http_serve=$00:000424
http_server=$00:000141
http_sla=$03:000092
http_target_name=000000,00000F
http_thread=$00:00042A
http_thread_exit=$00:0004C4
http_thread_request=00001D,00000F
http_thread_transmission=00001C,00000F
http_threads=$03:000098
http_traffic?=$00:00045B
http_walk=$00:00044B
http_walk_q=$00:000449
http_xserve=$00:000465
http_zserve=$00:000467
http_zstart=$00:000429
hvdq=:P1:0:000042
hvsocket_storage
hvsocket_write_rxq
i48_2float
i48d48=:N129:P:0:000000
i48m=:N129:P:0:000000
i48m48=:N129:P:0:000000
i72_divide
i72_multiply
i72a=:N129:P:0:000000
i72a48=:N129:P:0:000000
i72a48_48=:N129:P:0:000000
i72an=:N129:P:0:000000
i72an48=:N129:P:0:000000
i72an48_48=:N129:P:0:000000
i72compare=:N129:P:0:000000
i72compare48=:N129:P:0:000000
i72d=:N129:P:0:000000
i72d48=:N129:P:0:000000
i72d72=:N129:P:0:000000
i72m=:N129:P:0:000000
i72m48=:N129:P:0:000000
i72m72=:N129:P:0:000000
i_f=:P3:0:00004A
i_f_last=$01:000009
i_f_leave=$00:000099
i_f_pointer_array=$01:000000
i_timer=$00:0000CA
iattend=$00:000F47
iattended=$00:000F54
iattendu=$00:000F49
ibuffer=$00:0002B3
ibufferx=$00:0002C5
icapsule=$00:000F57
icarryalong=$00:000F68
icarryon=$00:000F65
icmp=$00:000363
icmpInAddrMaskReps=$00:00077A
icmpInAddrMaskReps:rw_typ_tokens_words=$00:00077A
icmpInAddrMaskReps:o=$00:00077B
icmpInAddrMaskReps:l=$00:00077C
icmpInAddrMaskReps:data=$00:00077D
icmpInAddrMaskReps:flags=$00:00077E
icmpInAddrMaskReps:bucket=$00:00077F
icmpInAddrMaskReps:ranges=$00:00077F
icmpInAddrMaskReps:range=$00:000780
icmpInAddrMaskReps:advance=$00:000780
icmpInAddrMaskReps:netstring=:N129:P:0:000000
icmpInAddrMaskReps:i=$01:000535
icmpInAddrMasks=$00:000774
icmpInAddrMasks:rw_typ_tokens_words=$00:000774
icmpInAddrMasks:o=$00:000775
icmpInAddrMasks:l=$00:000776
icmpInAddrMasks:data=$00:000777
icmpInAddrMasks:flags=$00:000778
icmpInAddrMasks:bucket=$00:000779
icmpInAddrMasks:ranges=$00:000779
icmpInAddrMasks:range=$00:00077A
icmpInAddrMasks:advance=$00:00077A
icmpInAddrMasks:netstring=:N129:P:0:000000
icmpInAddrMasks:i=$01:000533
icmpInDestUnReachs=$00:00073E
icmpInDestUnReachs:rw_typ_tokens_words=$00:00073E
icmpInDestUnReachs:o=$00:00073F
icmpInDestUnReachs:l=$00:000740
icmpInDestUnReachs:data=$00:000741
icmpInDestUnReachs:flags=$00:000742
icmpInDestUnReachs:bucket=$00:000743
icmpInDestUnReachs:ranges=$00:000743
icmpInDestUnReachs:range=$00:000744
icmpInDestUnReachs:advance=$00:000744
icmpInDestUnReachs:netstring=:N129:P:0:000000
icmpInDestUnReachs:i=$01:000521
icmpInEchoReps=$00:000762
icmpInEchoReps:rw_typ_tokens_words=$00:000762
icmpInEchoReps:o=$00:000763
icmpInEchoReps:l=$00:000764
icmpInEchoReps:data=$00:000765
icmpInEchoReps:flags=$00:000766
icmpInEchoReps:bucket=$00:000767
icmpInEchoReps:ranges=$00:000767
icmpInEchoReps:range=$00:000768
icmpInEchoReps:advance=$00:000768
icmpInEchoReps:netstring=:N129:P:0:000000
icmpInEchoReps:i=$01:00052D
icmpInEchos=$00:00075C
icmpInEchos:rw_typ_tokens_words=$00:00075C
icmpInEchos:o=$00:00075D
icmpInEchos:l=$00:00075E
icmpInEchos:data=$00:00075F
icmpInEchos:flags=$00:000760
icmpInEchos:bucket=$00:000761
icmpInEchos:ranges=$00:000761
icmpInEchos:range=$00:000762
icmpInEchos:advance=$00:000762
icmpInEchos:netstring=:N129:P:0:000000
icmpInEchos:i=$01:00052B
icmpInErrors=$00:000738
icmpInErrors:rw_typ_tokens_words=$00:000738
icmpInErrors:o=$00:000739
icmpInErrors:l=$00:00073A
icmpInErrors:data=$00:00073B
icmpInErrors:flags=$00:00073C
icmpInErrors:bucket=$00:00073D
icmpInErrors:ranges=$00:00073D
icmpInErrors:range=$00:00073E
icmpInErrors:advance=$00:00073E
icmpInErrors:netstring=:N129:P:0:000000
icmpInErrors:i=$01:00051F
icmpInMsgs=$00:000732
icmpInMsgs:rw_typ_tokens_words=$00:000732
icmpInMsgs:o=$00:000733
icmpInMsgs:l=$00:000734
icmpInMsgs:data=$00:000735
icmpInMsgs:flags=$00:000736
icmpInMsgs:bucket=$00:000737
icmpInMsgs:ranges=$00:000737
icmpInMsgs:range=$00:000738
icmpInMsgs:advance=$00:000738
icmpInMsgs:netstring=:N129:P:0:000000
icmpInMsgs:i=$01:00051D
icmpInRedirects=$00:000756
icmpInRedirects:rw_typ_tokens_words=$00:000756
icmpInRedirects:o=$00:000757
icmpInRedirects:l=$00:000758
icmpInRedirects:data=$00:000759
icmpInRedirects:flags=$00:00075A
icmpInRedirects:bucket=$00:00075B
icmpInRedirects:ranges=$00:00075B
icmpInRedirects:range=$00:00075C
icmpInRedirects:advance=$00:00075C
icmpInRedirects:netstring=:N129:P:0:000000
icmpInRedirects:i=$01:000529
icmpInSrcQuenchs=$00:000750
icmpInSrcQuenchs:rw_typ_tokens_words=$00:000750
icmpInSrcQuenchs:o=$00:000751
icmpInSrcQuenchs:l=$00:000752
icmpInSrcQuenchs:data=$00:000753
icmpInSrcQuenchs:flags=$00:000754
icmpInSrcQuenchs:bucket=$00:000755
icmpInSrcQuenchs:ranges=$00:000755
icmpInSrcQuenchs:range=$00:000756
icmpInSrcQuenchs:advance=$00:000756
icmpInSrcQuenchs:netstring=:N129:P:0:000000
icmpInSrcQuenchs:i=$01:000527
icmpInTimeExcds=$00:000744
icmpInTimeExcds:rw_typ_tokens_words=$00:000744
icmpInTimeExcds:o=$00:000745
icmpInTimeExcds:l=$00:000746
icmpInTimeExcds:data=$00:000747
icmpInTimeExcds:flags=$00:000748
icmpInTimeExcds:bucket=$00:000749
icmpInTimeExcds:ranges=$00:000749
icmpInTimeExcds:range=$00:00074A
icmpInTimeExcds:advance=$00:00074A
icmpInTimeExcds:netstring=:N129:P:0:000000
icmpInTimeExcds:i=$01:000523
icmpInTimeStamps=$00:000768
icmpInTimeStamps:rw_typ_tokens_words=$00:000768
icmpInTimeStamps:o=$00:000769
icmpInTimeStamps:l=$00:00076A
icmpInTimeStamps:data=$00:00076B
icmpInTimeStamps:flags=$00:00076C
icmpInTimeStamps:bucket=$00:00076D
icmpInTimeStamps:ranges=$00:00076D
icmpInTimeStamps:range=$00:00076E
icmpInTimeStamps:advance=$00:00076E
icmpInTimeStamps:netstring=:N129:P:0:000000
icmpInTimeStamps:i=$01:00052F
icmpInTimestampReps=$00:00076E
icmpInTimestampReps:rw_typ_tokens_words=$00:00076E
icmpInTimestampReps:o=$00:00076F
icmpInTimestampReps:l=$00:000770
icmpInTimestampReps:data=$00:000771
icmpInTimestampReps:flags=$00:000772
icmpInTimestampReps:bucket=$00:000773
icmpInTimestampReps:ranges=$00:000773
icmpInTimestampReps:range=$00:000774
icmpInTimestampReps:advance=$00:000774
icmpInTimestampReps:netstring=:N129:P:0:000000
icmpInTimestampReps:i=$01:000531
icmpOutAddrMaskReps=$00:0007C8
icmpOutAddrMaskReps:rw_typ_tokens_words=$00:0007C8
icmpOutAddrMaskReps:o=$00:0007C9
icmpOutAddrMaskReps:l=$00:0007CA
icmpOutAddrMaskReps:data=$00:0007CB
icmpOutAddrMaskReps:flags=$00:0007CC
icmpOutAddrMaskReps:bucket=$00:0007CD
icmpOutAddrMaskReps:ranges=$00:0007CD
icmpOutAddrMaskReps:range=$00:0007CE
icmpOutAddrMaskReps:advance=$00:0007CE
icmpOutAddrMaskReps:netstring=:N129:P:0:000000
icmpOutAddrMaskReps:i=$01:00054F
icmpOutAddrMasks=$00:0007C2
icmpOutAddrMasks:rw_typ_tokens_words=$00:0007C2
icmpOutAddrMasks:o=$00:0007C3
icmpOutAddrMasks:l=$00:0007C4
icmpOutAddrMasks:data=$00:0007C5
icmpOutAddrMasks:flags=$00:0007C6
icmpOutAddrMasks:bucket=$00:0007C7
icmpOutAddrMasks:ranges=$00:0007C7
icmpOutAddrMasks:range=$00:0007C8
icmpOutAddrMasks:advance=$00:0007C8
icmpOutAddrMasks:netstring=:N129:P:0:000000
icmpOutAddrMasks:i=$01:00054D
icmpOutDestUnreaches=$00:00078C
icmpOutDestUnreaches:rw_typ_tokens_words=$00:00078C
icmpOutDestUnreaches:o=$00:00078D
icmpOutDestUnreaches:l=$00:00078E
icmpOutDestUnreaches:data=$00:00078F
icmpOutDestUnreaches:flags=$00:000790
icmpOutDestUnreaches:bucket=$00:000791
icmpOutDestUnreaches:ranges=$00:000791
icmpOutDestUnreaches:range=$00:000792
icmpOutDestUnreaches:advance=$00:000792
icmpOutDestUnreaches:netstring=:N129:P:0:000000
icmpOutDestUnreaches:i=$01:00053B
icmpOutEchoReps=$00:0007B0
icmpOutEchoReps:rw_typ_tokens_words=$00:0007B0
icmpOutEchoReps:o=$00:0007B1
icmpOutEchoReps:l=$00:0007B2
icmpOutEchoReps:data=$00:0007B3
icmpOutEchoReps:flags=$00:0007B4
icmpOutEchoReps:bucket=$00:0007B5
icmpOutEchoReps:ranges=$00:0007B5
icmpOutEchoReps:range=$00:0007B6
icmpOutEchoReps:advance=$00:0007B6
icmpOutEchoReps:netstring=:N129:P:0:000000
icmpOutEchoReps:i=$01:000547
icmpOutEchos=$00:0007AA
icmpOutEchos:rw_typ_tokens_words=$00:0007AA
icmpOutEchos:o=$00:0007AB
icmpOutEchos:l=$00:0007AC
icmpOutEchos:data=$00:0007AD
icmpOutEchos:flags=$00:0007AE
icmpOutEchos:bucket=$00:0007AF
icmpOutEchos:ranges=$00:0007AF
icmpOutEchos:range=$00:0007B0
icmpOutEchos:advance=$00:0007B0
icmpOutEchos:netstring=:N129:P:0:000000
icmpOutEchos:i=$01:000545
icmpOutErrors=$00:000786
icmpOutErrors:rw_typ_tokens_words=$00:000786
icmpOutErrors:o=$00:000787
icmpOutErrors:l=$00:000788
icmpOutErrors:data=$00:000789
icmpOutErrors:flags=$00:00078A
icmpOutErrors:bucket=$00:00078B
icmpOutErrors:ranges=$00:00078B
icmpOutErrors:range=$00:00078C
icmpOutErrors:advance=$00:00078C
icmpOutErrors:netstring=:N129:P:0:000000
icmpOutErrors:i=$01:000539
icmpOutMsgs=$00:000780
icmpOutMsgs:rw_typ_tokens_words=$00:000780
icmpOutMsgs:o=$00:000781
icmpOutMsgs:l=$00:000782
icmpOutMsgs:data=$00:000783
icmpOutMsgs:flags=$00:000784
icmpOutMsgs:bucket=$00:000785
icmpOutMsgs:ranges=$00:000785
icmpOutMsgs:range=$00:000786
icmpOutMsgs:advance=$00:000786
icmpOutMsgs:netstring=:N129:P:0:000000
icmpOutMsgs:i=$01:000537
icmpOutParmProbs=$00:000798
icmpOutParmProbs:rw_typ_tokens_words=$00:000798
icmpOutParmProbs:o=$00:000799
icmpOutParmProbs:l=$00:00079A
icmpOutParmProbs:data=$00:00079B
icmpOutParmProbs:flags=$00:00079C
icmpOutParmProbs:bucket=$00:00079D
icmpOutParmProbs:ranges=$00:00079D
icmpOutParmProbs:range=$00:00079E
icmpOutParmProbs:advance=$00:00079E
icmpOutParmProbs:netstring=:N129:P:0:000000
icmpOutParmProbs:i=$01:00053F
icmpOutRedirects=$00:0007A4
icmpOutRedirects:rw_typ_tokens_words=$00:0007A4
icmpOutRedirects:o=$00:0007A5
icmpOutRedirects:l=$00:0007A6
icmpOutRedirects:data=$00:0007A7
icmpOutRedirects:flags=$00:0007A8
icmpOutRedirects:bucket=$00:0007A9
icmpOutRedirects:ranges=$00:0007A9
icmpOutRedirects:range=$00:0007AA
icmpOutRedirects:advance=$00:0007AA
icmpOutRedirects:netstring=:N129:P:0:000000
icmpOutRedirects:i=$01:000543
icmpOutSrcQuenchs=$00:00079E
icmpOutSrcQuenchs:rw_typ_tokens_words=$00:00079E
icmpOutSrcQuenchs:o=$00:00079F
icmpOutSrcQuenchs:l=$00:0007A0
icmpOutSrcQuenchs:data=$00:0007A1
icmpOutSrcQuenchs:flags=$00:0007A2
icmpOutSrcQuenchs:bucket=$00:0007A3
icmpOutSrcQuenchs:ranges=$00:0007A3
icmpOutSrcQuenchs:range=$00:0007A4
icmpOutSrcQuenchs:advance=$00:0007A4
icmpOutSrcQuenchs:netstring=:N129:P:0:000000
icmpOutSrcQuenchs:i=$01:000541
icmpOutTimeExcds=$00:000792
icmpOutTimeExcds:rw_typ_tokens_words=$00:000792
icmpOutTimeExcds:o=$00:000793
icmpOutTimeExcds:l=$00:000794
icmpOutTimeExcds:data=$00:000795
icmpOutTimeExcds:flags=$00:000796
icmpOutTimeExcds:bucket=$00:000797
icmpOutTimeExcds:ranges=$00:000797
icmpOutTimeExcds:range=$00:000798
icmpOutTimeExcds:advance=$00:000798
icmpOutTimeExcds:netstring=:N129:P:0:000000
icmpOutTimeExcds:i=$01:00053D
icmpOutTimeStamps=$00:0007B6
icmpOutTimeStamps:rw_typ_tokens_words=$00:0007B6
icmpOutTimeStamps:o=$00:0007B7
icmpOutTimeStamps:l=$00:0007B8
icmpOutTimeStamps:data=$00:0007B9
icmpOutTimeStamps:flags=$00:0007BA
icmpOutTimeStamps:bucket=$00:0007BB
icmpOutTimeStamps:ranges=$00:0007BB
icmpOutTimeStamps:range=$00:0007BC
icmpOutTimeStamps:advance=$00:0007BC
icmpOutTimeStamps:netstring=:N129:P:0:000000
icmpOutTimeStamps:i=$01:000549
icmpOutTimestampReps=$00:0007BC
icmpOutTimestampReps:rw_typ_tokens_words=$00:0007BC
icmpOutTimestampReps:o=$00:0007BD
icmpOutTimestampReps:l=$00:0007BE
icmpOutTimestampReps:data=$00:0007BF
icmpOutTimestampReps:flags=$00:0007C0
icmpOutTimestampReps:bucket=$00:0007C1
icmpOutTimestampReps:ranges=$00:0007C1
icmpOutTimestampReps:range=$00:0007C2
icmpOutTimestampReps:advance=$00:0007C2
icmpOutTimestampReps:netstring=:N129:P:0:000000
icmpOutTimestampReps:i=$01:00054B
icmpParmProbs=$00:00074A
icmpParmProbs:rw_typ_tokens_words=$00:00074A
icmpParmProbs:o=$00:00074B
icmpParmProbs:l=$00:00074C
icmpParmProbs:data=$00:00074D
icmpParmProbs:flags=$00:00074E
icmpParmProbs:bucket=$00:00074F
icmpParmProbs:ranges=$00:00074F
icmpParmProbs:range=$00:000750
icmpParmProbs:advance=$00:000750
icmpParmProbs:netstring=:N129:P:0:000000
icmpParmProbs:i=$01:000525
icmp_buy_msg=$00:0002FF
icmp_buy_msg_optional=$00:000300
icmp_buy_response=$00:00030A
icmp_drop=$00:00037E
icmp_du_port=$00:000383
icmp_echo=:N129:P:0:000000
icmp_exact=$00:000328
icmp_header=:N129:P:0:000000
icmp_iquick=$00:000336
icmp_mask=:N129:P:0:000000
icmp_noproto=$00:000383
icmp_noreply=$00:000309
icmp_noresponse=$00:00031E
icmp_nosocket=$00:000384
icmp_redirect_du=:N129:P:0:000000
icmp_rx_routinfo?=$00:00037E
icmp_rxq=$00:00031F
icmp_rxqlong=$00:00033A
icmp_rxqq=$00:00035B
icmpq=$01:000418
icmpq:head=$01:000418
icmpq:tail=$01:000419
icmpx=$00:000382
icool=$00:000F56
id72_72
iedit48a
iedit48as
iedit48ua
iedit72a
iedit72as
iedit72ua
iedita
ieditas
ieditua
ifAdminStatus=$00:000628
ifAdminStatus:rw_typ_tokens_words=$00:000628
ifAdminStatus:o=$00:000629
ifAdminStatus:l=$00:00062A
ifAdminStatus:data=$00:00062B
ifAdminStatus:flags=$00:00062C
ifAdminStatus:bucket=$00:00062D
ifAdminStatus:ranges=$00:00062D
ifAdminStatus:range=$00:00062E
ifAdminStatus:advance=$00:00062E
ifAdminStatus:netstring=:N129:P:0:000000
ifDescr=$00:00060A
ifDescr:rw_typ_tokens_words=$00:00060A
ifDescr:o=$00:00060B
ifDescr:l=$00:00060C
ifDescr:data=$00:00060D
ifDescr:flags=$00:00060E
ifDescr:bucket=$00:00060F
ifDescr:ranges=$00:00060F
ifDescr:range=$00:000610
ifDescr:advance=$00:000610
ifDescr:netstring=:N129:P:0:000000
ifInDiscards=$00:00064C
ifInDiscards:rw_typ_tokens_words=$00:00064C
ifInDiscards:o=$00:00064D
ifInDiscards:l=$00:00064E
ifInDiscards:data=$00:00064F
ifInDiscards:flags=$00:000650
ifInDiscards:bucket=$00:000651
ifInDiscards:ranges=$00:000651
ifInDiscards:range=$00:000652
ifInDiscards:advance=$00:000652
ifInDiscards:netstring=:N129:P:0:000000
ifInErrors=$00:000652
ifInErrors:rw_typ_tokens_words=$00:000652
ifInErrors:o=$00:000653
ifInErrors:l=$00:000654
ifInErrors:data=$00:000655
ifInErrors:flags=$00:000656
ifInErrors:bucket=$00:000657
ifInErrors:ranges=$00:000657
ifInErrors:range=$00:000658
ifInErrors:advance=$00:000658
ifInErrors:netstring=:N129:P:0:000000
ifInNUcastPkts=$00:000646
ifInNUcastPkts:rw_typ_tokens_words=$00:000646
ifInNUcastPkts:o=$00:000647
ifInNUcastPkts:l=$00:000648
ifInNUcastPkts:data=$00:000649
ifInNUcastPkts:flags=$00:00064A
ifInNUcastPkts:bucket=$00:00064B
ifInNUcastPkts:ranges=$00:00064B
ifInNUcastPkts:range=$00:00064C
ifInNUcastPkts:advance=$00:00064C
ifInNUcastPkts:netstring=:N129:P:0:000000
ifInOctets=$00:00063A
ifInOctets:rw_typ_tokens_words=$00:00063A
ifInOctets:o=$00:00063B
ifInOctets:l=$00:00063C
ifInOctets:data=$00:00063D
ifInOctets:flags=$00:00063E
ifInOctets:bucket=$00:00063F
ifInOctets:ranges=$00:00063F
ifInOctets:range=$00:000640
ifInOctets:advance=$00:000640
ifInOctets:netstring=:N129:P:0:000000
ifInUcastPkts=$00:000640
ifInUcastPkts:rw_typ_tokens_words=$00:000640
ifInUcastPkts:o=$00:000641
ifInUcastPkts:l=$00:000642
ifInUcastPkts:data=$00:000643
ifInUcastPkts:flags=$00:000644
ifInUcastPkts:bucket=$00:000645
ifInUcastPkts:ranges=$00:000645
ifInUcastPkts:range=$00:000646
ifInUcastPkts:advance=$00:000646
ifInUcastPkts:netstring=:N129:P:0:000000
ifInUnknownProtos=$00:000658
ifInUnknownProtos:rw_typ_tokens_words=$00:000658
ifInUnknownProtos:o=$00:000659
ifInUnknownProtos:l=$00:00065A
ifInUnknownProtos:data=$00:00065B
ifInUnknownProtos:flags=$00:00065C
ifInUnknownProtos:bucket=$00:00065D
ifInUnknownProtos:ranges=$00:00065D
ifInUnknownProtos:range=$00:00065E
ifInUnknownProtos:advance=$00:00065E
ifInUnknownProtos:netstring=:N129:P:0:000000
ifIndex=$00:000604
ifIndex:rw_typ_tokens_words=$00:000604
ifIndex:o=$00:000605
ifIndex:l=$00:000606
ifIndex:data=$00:000607
ifIndex:flags=$00:000608
ifIndex:bucket=$00:000609
ifIndex:ranges=$00:000609
ifIndex:range=$00:00060A
ifIndex:advance=$00:00060A
ifIndex:netstring=:N129:P:0:000000
ifLastChange=$00:000634
ifLastChange:rw_typ_tokens_words=$00:000634
ifLastChange:o=$00:000635
ifLastChange:l=$00:000636
ifLastChange:data=$00:000637
ifLastChange:flags=$00:000638
ifLastChange:bucket=$00:000639
ifLastChange:ranges=$00:000639
ifLastChange:range=$00:00063A
ifLastChange:advance=$00:00063A
ifLastChange:netstring=:N129:P:0:000000
ifMTU=$00:000616
ifMTU:rw_typ_tokens_words=$00:000616
ifMTU:o=$00:000617
ifMTU:l=$00:000618
ifMTU:data=$00:000619
ifMTU:flags=$00:00061A
ifMTU:bucket=$00:00061B
ifMTU:ranges=$00:00061B
ifMTU:range=$00:00061C
ifMTU:advance=$00:00061C
ifMTU:netstring=:N129:P:0:000000
ifNumber=$00:0005FE
ifNumber:rw_typ_tokens_words=$00:0005FE
ifNumber:o=$00:0005FF
ifNumber:l=$00:000600
ifNumber:data=$00:000601
ifNumber:flags=$00:000602
ifNumber:bucket=$00:000603
ifNumber:ranges=$00:000603
ifNumber:range=$00:000604
ifNumber:advance=$00:000604
ifNumber:netstring=:N129:P:0:000000
ifNumber:i=$01:0004F7
ifOperStatus=$00:00062E
ifOperStatus:rw_typ_tokens_words=$00:00062E
ifOperStatus:o=$00:00062F
ifOperStatus:l=$00:000630
ifOperStatus:data=$00:000631
ifOperStatus:flags=$00:000632
ifOperStatus:bucket=$00:000633
ifOperStatus:ranges=$00:000633
ifOperStatus:range=$00:000634
ifOperStatus:advance=$00:000634
ifOperStatus:netstring=:N129:P:0:000000
ifOutDiscards=$00:000670
ifOutDiscards:rw_typ_tokens_words=$00:000670
ifOutDiscards:o=$00:000671
ifOutDiscards:l=$00:000672
ifOutDiscards:data=$00:000673
ifOutDiscards:flags=$00:000674
ifOutDiscards:bucket=$00:000675
ifOutDiscards:ranges=$00:000675
ifOutDiscards:range=$00:000676
ifOutDiscards:advance=$00:000676
ifOutDiscards:netstring=:N129:P:0:000000
ifOutErrors=$00:000676
ifOutErrors:rw_typ_tokens_words=$00:000676
ifOutErrors:o=$00:000677
ifOutErrors:l=$00:000678
ifOutErrors:data=$00:000679
ifOutErrors:flags=$00:00067A
ifOutErrors:bucket=$00:00067B
ifOutErrors:ranges=$00:00067B
ifOutErrors:range=$00:00067C
ifOutErrors:advance=$00:00067C
ifOutErrors:netstring=:N129:P:0:000000
ifOutNUcastPkts=$00:00066A
ifOutNUcastPkts:rw_typ_tokens_words=$00:00066A
ifOutNUcastPkts:o=$00:00066B
ifOutNUcastPkts:l=$00:00066C
ifOutNUcastPkts:data=$00:00066D
ifOutNUcastPkts:flags=$00:00066E
ifOutNUcastPkts:bucket=$00:00066F
ifOutNUcastPkts:ranges=$00:00066F
ifOutNUcastPkts:range=$00:000670
ifOutNUcastPkts:advance=$00:000670
ifOutNUcastPkts:netstring=:N129:P:0:000000
ifOutOctets=$00:00065E
ifOutOctets:rw_typ_tokens_words=$00:00065E
ifOutOctets:o=$00:00065F
ifOutOctets:l=$00:000660
ifOutOctets:data=$00:000661
ifOutOctets:flags=$00:000662
ifOutOctets:bucket=$00:000663
ifOutOctets:ranges=$00:000663
ifOutOctets:range=$00:000664
ifOutOctets:advance=$00:000664
ifOutOctets:netstring=:N129:P:0:000000
ifOutQLen=$00:00067C
ifOutQLen:rw_typ_tokens_words=$00:00067C
ifOutQLen:o=$00:00067D
ifOutQLen:l=$00:00067E
ifOutQLen:data=$00:00067F
ifOutQLen:flags=$00:000680
ifOutQLen:bucket=$00:000681
ifOutQLen:ranges=$00:000681
ifOutQLen:range=$00:000682
ifOutQLen:advance=$00:000682
ifOutQLen:netstring=:N129:P:0:000000
ifOutUcastPkts=$00:000664
ifOutUcastPkts:rw_typ_tokens_words=$00:000664
ifOutUcastPkts:o=$00:000665
ifOutUcastPkts:l=$00:000666
ifOutUcastPkts:data=$00:000667
ifOutUcastPkts:flags=$00:000668
ifOutUcastPkts:bucket=$00:000669
ifOutUcastPkts:ranges=$00:000669
ifOutUcastPkts:range=$00:00066A
ifOutUcastPkts:advance=$00:00066A
ifOutUcastPkts:netstring=:N129:P:0:000000
ifPhysAddress=$00:000622
ifPhysAddress:rw_typ_tokens_words=$00:000622
ifPhysAddress:o=$00:000623
ifPhysAddress:l=$00:000624
ifPhysAddress:data=$00:000625
ifPhysAddress:flags=$00:000626
ifPhysAddress:bucket=$00:000627
ifPhysAddress:ranges=$00:000627
ifPhysAddress:range=$00:000628
ifPhysAddress:advance=$00:000628
ifPhysAddress:netstring=:N129:P:0:000000
ifSpecific=$00:000682
ifSpecific:rw_typ_tokens_words=$00:000682
ifSpecific:o=$00:000683
ifSpecific:l=$00:000684
ifSpecific:data=$00:000685
ifSpecific:flags=$00:000686
ifSpecific:bucket=$00:000687
ifSpecific:ranges=$00:000687
ifSpecific:range=$00:000688
ifSpecific:advance=$00:000688
ifSpecific:netstring=:N129:P:0:000000
ifSpeed=$00:00061C
ifSpeed:rw_typ_tokens_words=$00:00061C
ifSpeed:o=$00:00061D
ifSpeed:l=$00:00061E
ifSpeed:data=$00:00061F
ifSpeed:flags=$00:000620
ifSpeed:bucket=$00:000621
ifSpeed:ranges=$00:000621
ifSpeed:range=$00:000622
ifSpeed:advance=$00:000622
ifSpeed:netstring=:N129:P:0:000000
ifType=$00:000610
ifType:rw_typ_tokens_words=$00:000610
ifType:o=$00:000611
ifType:l=$00:000612
ifType:data=$00:000613
ifType:flags=$00:000614
ifType:bucket=$00:000615
ifType:ranges=$00:000615
ifType:range=$00:000616
ifType:advance=$00:000616
ifType:netstring=:N129:P:0:000000
if_agentMTU=$00:00024B
if_agentadmins=$00:00024E
if_agentdescr=$00:000249
if_agentibytes=$00:000251
if_agentidrops=$00:000254
if_agentidx=$00:000248
if_agentierrs=$00:000255
if_agentimcast=$00:000253
if_agentinoproto=$00:000256
if_agentiucast=$00:000252
if_agentlastc=$00:000250
if_agentobytes=$00:000257
if_agentodrops=$00:00025A
if_agentoerrs=$00:00025B
if_agentomcast=$00:000259
if_agentoqlen=$00:00025C
if_agentosta=$00:00024F
if_agentoucast=$00:000258
if_agentphy=$00:00024D
if_agentsmib=$00:00025D
if_agentspeed=$00:00024C
if_agenttype=$00:00024A
if_buy1+=$00:00009B
if_initpool=$00:0000CD
if_q2ifree+=$00:00009E
if_rx_nocheck+=$00:00009F
if_sell1+=$00:00009A
if_tx_nocheck+=$00:00009F
ifaddr=$42:000000,000002
ifaddr:next=$42:000000,000002
ifaddr:lexical=$42:000001,000002
ifaddr:i_f=$42:000002,000002
ifaddr:net=$42:000003,000002
ifaddr:mask=$42:000005,000002
ifaddr:broadcast=$42:000007,000002
ifagent_MTU=$00:0002D0
ifagent_admins=$00:0002F0
ifagent_c48=$01:00047B
ifagent_c48:along=$01:00047B
ifagent_c48:data=$01:00047C
ifagent_c48:down=$01:00047C
ifagent_c48:seq=$01:00047D
ifagent_c48:type=$01:00047E
ifagent_c48:bytes=$01:00047F
ifagent_c48:flags=$01:000480
ifagent_c48:bucket=$01:000481
ifagent_c48:ranges=$01:000481
ifagent_c48:range=$01:000482
ifagent_descr=$00:0002BC
ifagent_find=$00:000386
ifagent_find_another=$00:000380
ifagent_find_i_f=$00:000385
ifagent_find_next_if=$00:00037B
ifagent_g48=$01:000474
ifagent_g48:along=$01:000474
ifagent_g48:data=$01:000475
ifagent_g48:down=$01:000475
ifagent_g48:seq=$01:000476
ifagent_g48:type=$01:000477
ifagent_g48:bytes=$01:000478
ifagent_g48:flags=$01:000479
ifagent_g48:bucket=$01:00047A
ifagent_g48:ranges=$01:00047A
ifagent_g48:range=$01:00047B
ifagent_i24=$01:000458
ifagent_i24:along=$01:000458
ifagent_i24:data=$01:000459
ifagent_i24:down=$01:000459
ifagent_i24:seq=$01:00045A
ifagent_i24:type=$01:00045B
ifagent_i24:bytes=$01:00045C
ifagent_i24:flags=$01:00045D
ifagent_i24:bucket=$01:00045E
ifagent_i24:ranges=$01:00045E
ifagent_i24:range=$01:00045F
ifagent_ibytes=$00:00030A
ifagent_idrops=$00:000325
ifagent_idx=$00:00029D
ifagent_idx_2hi=$00:00038E
ifagent_ierrs=$00:00032E
ifagent_imcast=$00:00031C
ifagent_inoproto=$00:000337
ifagent_iucast=$00:000313
ifagent_lastc=$00:000302
ifagent_noMTU=$00:0002D8
ifagent_noadmins=$00:0002F8
ifagent_nodescr=$00:0002C6
ifagent_noibytes=$00:000312
ifagent_noidrops=$00:00032D
ifagent_noidx=$00:0002AD
ifagent_noierrs=$00:000336
ifagent_noimcast=$00:000324
ifagent_noinoproto=$00:00033F
ifagent_noiucast=$00:00031B
ifagent_nolastc=$00:000309
ifagent_noobytes=$00:000348
ifagent_noodrops=$00:000363
ifagent_nooerrs=$00:00036B
ifagent_noomcast=$00:00035A
ifagent_nooqlen=$00:000375
ifagent_noosta=$00:000301
ifagent_nooucast=$00:000351
ifagent_nophy=$00:0002EE
ifagent_nosmib=$00:00037A
ifagent_nospeed=$00:0002DF
ifagent_notype=$00:0002CF
ifagent_obytes=$00:000340
ifagent_odrops=$00:00035B
ifagent_oerrs=$00:000364
ifagent_omcast=$00:000352
ifagent_onone=$01:000482
ifagent_onone:along=$01:000482
ifagent_onone:data=$01:000483
ifagent_onone:down=$01:000483
ifagent_onone:seq=$01:000484
ifagent_onone:type=$01:000485
ifagent_onone:bytes=$01:000486
ifagent_onone:flags=$01:000487
ifagent_onone:bucket=$01:000488
ifagent_onone:ranges=$01:000488
ifagent_onone:range=$01:000489
ifagent_oqlen=$00:00036D
ifagent_osta=$00:0002F9
ifagent_oucast=$00:000349
ifagent_p48=$01:000489
ifagent_phy=$00:0002E0
ifagent_row?=$00:0002A4
ifagent_smib=$00:000376
ifagent_speed=$00:0002D9
ifagent_string=$01:00045F
ifagent_string:along=$01:00045F
ifagent_string:data=$01:000460
ifagent_string:down=$01:000460
ifagent_string:seq=$01:000461
ifagent_string:type=$01:000462
ifagent_string:bytes=$01:000463
ifagent_string:flags=$01:000464
ifagent_string:bucket=$01:000465
ifagent_string:ranges=$01:000465
ifagent_string:range=$01:000466
ifagent_string48=$01:000466
ifagent_string48:along=$01:000466
ifagent_string48:data=$01:000467
ifagent_string48:down=$01:000467
ifagent_string48:seq=$01:000468
ifagent_string48:type=$01:000469
ifagent_string48:bytes=$01:00046A
ifagent_string48:flags=$01:00046B
ifagent_string48:bucket=$01:00046C
ifagent_string48:ranges=$01:00046C
ifagent_string48:range=$01:00046D
ifagent_t48=$01:00046D
ifagent_t48:along=$01:00046D
ifagent_t48:data=$01:00046E
ifagent_t48:down=$01:00046E
ifagent_t48:seq=$01:00046F
ifagent_t48:type=$01:000470
ifagent_t48:bytes=$01:000471
ifagent_t48:flags=$01:000472
ifagent_t48:bucket=$01:000473
ifagent_t48:ranges=$01:000473
ifagent_t48:range=$01:000474
ifagent_this_row=$00:0002A3
ifagent_type=$00:0002C7
ifastaflags=000004,00000F
ifastaroutine=000005,00000F
ifastaseq=000003,00000F
ifbuy=$00:0000D1
ifconfig_frame=:N129:P:0:000000
ifdescflags=000004,00000F
ifdescroutine=000005,00000F
ifdescseq=000003,00000F
ifibytflags=000004,00000F
ifibytroutine=000005,00000F
ifibytseq=000003,00000F
ifidropflags=000004,00000F
ifidroproutine=000005,00000F
ifidropseq=000003,00000F
ifidxflags=000004,00000F
ifidxroutine=000005,00000F
ifidxseq=000003,00000F
ifierflags=000004,00000F
ifierroutine=000005,00000F
ifierseq=000003,00000F
ifimcaflags=000004,00000F
ifimcaroutine=000005,00000F
ifimcaseq=000003,00000F
ifinoproflags=000004,00000F
ifinoproroutine=000005,00000F
ifinoproseq=000003,00000F
ifiucaflags=000004,00000F
ifiucaroutine=000005,00000F
ifiucaseq=000003,00000F
ifixidxroutine=000005,00000F
iflcflags=000004,00000F
iflcroutine=000005,00000F
iflcseq=000003,00000F
ifmtuflags=000004,00000F
ifmturoutine=000005,00000F
ifmtuseq=000003,00000F
ifobytflags=000004,00000F
ifobytroutine=000005,00000F
ifobytseq=000003,00000F
ifodropflags=000004,00000F
ifodroproutine=000005,00000F
ifodropseq=000003,00000F
ifoerflags=000004,00000F
ifoerroutine=000005,00000F
ifoerseq=000003,00000F
ifomcaflags=000004,00000F
ifomcaroutine=000005,00000F
ifomcaseq=000003,00000F
ifoqlflags=000004,00000F
ifoqlroutine=000005,00000F
ifoqlseq=000003,00000F
ifostaflags=000004,00000F
ifostaroutine=000005,00000F
ifostaseq=000003,00000F
ifoucaflags=000004,00000F
ifoucaroutine=000005,00000F
ifoucaseq=000003,00000F
ifphycaller_x=000000,00000F
ifphyflags=000005,00000F
ifphyroutine=000006,00000F
ifphyseq=000004,00000F
ifq2=$00:0000D5
ifq2ifree=$00:0000D7
ifrateflags=000004,00000F
ifrateroutine=000005,00000F
ifrateseq=000003,00000F
ifrq=$00:0000D3
ifsellmsg=$00:0000CF
ifsmibflags=000004,00000F
ifsmibroutine=000005,00000F
ifsmibseq=000003,00000F
iftx_nocheck=$00:0000D9
iftypflags=000004,00000F
iftyproutine=000005,00000F
iftypseq=000003,00000F
ifxpointer(1)=$01:000001
ifxpointer(2)=$01:000002
ifxpointer(3)=$01:000003
ifxpointer(4)=$01:000004
ifxpointer(5)=$01:000005
ifxpointer(6)=$01:000006
ifxpointer(7)=$01:000007
ifxpointer(8)=$01:000008
ilist=000000,00000F
im72_72
image_in_rom=$00:000049
in8nocheck=:P1:0:000072
in_freechain_already=$00:00019E
in_order=$00:0002E9
inactive_thread=$00:0000F8
inetCidrRouteDest=$00:0009A8
inetCidrRouteDest:rw_typ_tokens_words=$00:0009A8
inetCidrRouteDest:o=$00:0009A9
inetCidrRouteDest:l=$00:0009AA
inetCidrRouteDest:data=$00:0009AB
inetCidrRouteDest:flags=$00:0009AC
inetCidrRouteDest:bucket=$00:0009AD
inetCidrRouteDest:ranges=$00:0009AD
inetCidrRouteDest:range=$00:0009AE
inetCidrRouteDest:advance=$00:0009AE
inetCidrRouteDest:netstring=:N129:P:0:000000
inetCidrRouteDestType=$00:0009A2
inetCidrRouteDestType:rw_typ_tokens_words=$00:0009A2
inetCidrRouteDestType:o=$00:0009A3
inetCidrRouteDestType:l=$00:0009A4
inetCidrRouteDestType:data=$00:0009A5
inetCidrRouteDestType:flags=$00:0009A6
inetCidrRouteDestType:bucket=$00:0009A7
inetCidrRouteDestType:ranges=$00:0009A7
inetCidrRouteDestType:range=$00:0009A8
inetCidrRouteDestType:advance=$00:0009A8
inetCidrRouteDestType:netstring=:N129:P:0:000000
inetCidrRouteIfIndex=$00:0009C0
inetCidrRouteIfIndex:rw_typ_tokens_words=$00:0009C0
inetCidrRouteIfIndex:o=$00:0009C1
inetCidrRouteIfIndex:l=$00:0009C2
inetCidrRouteIfIndex:data=$00:0009C3
inetCidrRouteIfIndex:flags=$00:0009C4
inetCidrRouteIfIndex:bucket=$00:0009C5
inetCidrRouteIfIndex:ranges=$00:0009C5
inetCidrRouteIfIndex:range=$00:0009C6
inetCidrRouteIfIndex:advance=$00:0009C6
inetCidrRouteIfIndex:netstring=:N129:P:0:000000
inetCidrRouteNextHop=$00:0009BA
inetCidrRouteNextHop:rw_typ_tokens_words=$00:0009BA
inetCidrRouteNextHop:o=$00:0009BB
inetCidrRouteNextHop:l=$00:0009BC
inetCidrRouteNextHop:data=$00:0009BD
inetCidrRouteNextHop:flags=$00:0009BE
inetCidrRouteNextHop:bucket=$00:0009BF
inetCidrRouteNextHop:ranges=$00:0009BF
inetCidrRouteNextHop:range=$00:0009C0
inetCidrRouteNextHop:advance=$00:0009C0
inetCidrRouteNextHop:netstring=:N129:P:0:000000
inetCidrRouteNextHopType=$00:0009B4
inetCidrRouteNextHopType:rw_typ_tokens_words=$00:0009B4
inetCidrRouteNextHopType:o=$00:0009B5
inetCidrRouteNextHopType:l=$00:0009B6
inetCidrRouteNextHopType:data=$00:0009B7
inetCidrRouteNextHopType:flags=$00:0009B8
inetCidrRouteNextHopType:bucket=$00:0009B9
inetCidrRouteNextHopType:ranges=$00:0009B9
inetCidrRouteNextHopType:range=$00:0009BA
inetCidrRouteNextHopType:advance=$00:0009BA
inetCidrRouteNextHopType:netstring=:N129:P:0:000000
inetCidrRoutePfxLen=$00:0009AE
inetCidrRoutePfxLen:rw_typ_tokens_words=$00:0009AE
inetCidrRoutePfxLen:o=$00:0009AF
inetCidrRoutePfxLen:l=$00:0009B0
inetCidrRoutePfxLen:data=$00:0009B1
inetCidrRoutePfxLen:flags=$00:0009B2
inetCidrRoutePfxLen:bucket=$00:0009B3
inetCidrRoutePfxLen:ranges=$00:0009B3
inetCidrRoutePfxLen:range=$00:0009B4
inetCidrRoutePfxLen:advance=$00:0009B4
inetCidrRoutePfxLen:netstring=:N129:P:0:000000
inetCidrRouteType=$00:0009C6
inetCidrRouteType:rw_typ_tokens_words=$00:0009C6
inetCidrRouteType:o=$00:0009C7
inetCidrRouteType:l=$00:0009C8
inetCidrRouteType:data=$00:0009C9
inetCidrRouteType:flags=$00:0009CA
inetCidrRouteType:bucket=$00:0009CB
inetCidrRouteType:ranges=$00:0009CB
inetCidrRouteType:range=$00:0009CC
inetCidrRouteType:advance=$00:0009CC
inetCidrRouteType:netstring=:N129:P:0:000000
inetcidr_gauge=$01:0004D1
inetcidr_oaddress=$01:0004DB
inetcidr_oaddress:along=$01:0004DB
inetcidr_oaddress:data=$01:0004DC
inetcidr_oaddress:down=$01:0004DC
inetcidr_oaddress:seq=$01:0004DD
inetcidr_oaddress:type=$01:0004DE
inetcidr_oaddress:bytes=$01:0004DF
inetcidr_oaddress:flags=$01:0004E0
inetcidr_oaddress:bucket=$01:0004E1
inetcidr_oaddress:ranges=$01:0004E1
inetcidr_oaddress:range=$01:0004E2
inetcidr_ogauge=$01:0004D4
inetcidr_ogauge:along=$01:0004D4
inetcidr_ogauge:data=$01:0004D5
inetcidr_ogauge:down=$01:0004D5
inetcidr_ogauge:seq=$01:0004D6
inetcidr_ogauge:type=$01:0004D7
inetcidr_ogauge:bytes=$01:0004D8
inetcidr_ogauge:flags=$01:0004D9
inetcidr_ogauge:bucket=$01:0004DA
inetcidr_ogauge:ranges=$01:0004DA
inetcidr_ogauge:range=$01:0004DB
inetcidr_xnet=$01:0004D2
init_pool=$00:000E24
init_pool:caller_y=00000C,00000F
init_pool:save_simd=000008,00000F
init_pool:initial_pointers=000004,00000F
init_pool:simd_control=000000,00000F
initial_startups+=$00:00014B
int=000014,00000F
integer192+=$00:000171
integer96+=$00:000173
integer_edit=[001a]000000
integer_server=$00:000144
interface!=$00:000F6C
interface(1)=$01:00000A
interface(1):id=$01:00000A
interface(1):flags=$01:00000B
interface(1):address_list=$01:00000C
interface(1):type=$01:00000D
interface(1):mtu=$01:00000E
interface(1):state=$01:00000F
interface(1):bitrate=$01:000010
interface(1):physa=$01:000012
interface(1):lastchange=$01:000014
interface(1):inoctets=$01:000016
interface(1):outoctets=$01:000018
interface(1):inpackets=$01:00001A
interface(1):outpackets=$01:00001C
interface(1):inmcast=$01:00001E
interface(1):outmcast=$01:000020
interface(1):indrops=$01:000022
interface(1):outdrops=$01:000024
interface(1):inerrs=$01:000026
interface(1):outerrs=$01:000028
interface(1):inoproto=$01:00002A
interface(1):oqlen=$01:00002C
interface(1):oqremaining=$01:00002D
interface(1):threshold_time=$01:00002E
interface(1):description_bytes=$01:00002F
interface(1):description=$01:000030
interface(1):IF_DESCRIPTION_BYTES=000010
interface(1):q2=$01:000038
interface(1):lock_cell_q1=$01:000039
interface(1):lock_cell_q2=$01:00003A
interface(1):oq=$01:00003B
interface(1):oq:head=$01:00003B
interface(1):oq:tail=$01:00003C
interface(1):oq2=$01:00003D
interface(1):oq2:head=$01:00003D
interface(1):oq2:head:bx=$01:00003D
interface(1):oq2:head:offset=$01:00003E
interface(1):oq2:tail=$01:00003F
interface(1):oq2:tail:bx=$01:00003F
interface(1):oq2:tail:offset=$01:000040
interface(1):initial=$01:000041
interface(1):rxtx_interface=$01:000042
interface(1):class=$01:000043
interface(1):llhl=$01:000044
interface(1):write_llh=$01:000045
interface(1):arp_rx=$01:000046
interface(1):arp_tx=$01:000047
interface(1):arp_resolve=$01:000048
interface(1):xarp=$01:000049
interface(1):ift1=$01:00004A
interface(1):ift1:rx_restart=$01:00004A
interface(1):ift1:rx_limit=$01:00004B
interface(1):ift1:tx_restart=$01:00004C
interface(1):ift1:tx_limit=$01:00004D
interface(1):ift1:base_rx=$01:00004E
interface(1):ift1:rx_cursor=$01:00004F
interface(1):ift1:base_tx=$01:000050
interface(1):ift1:tx_cursor=$01:000051
interface(1):sif=$01:00004A
interface(2)=$01:000052
interface(2):id=$01:000052
interface(2):flags=$01:000053
interface(2):address_list=$01:000054
interface(2):type=$01:000055
interface(2):mtu=$01:000056
interface(2):state=$01:000057
interface(2):bitrate=$01:000058
interface(2):physa=$01:00005A
interface(2):lastchange=$01:00005C
interface(2):inoctets=$01:00005E
interface(2):outoctets=$01:000060
interface(2):inpackets=$01:000062
interface(2):outpackets=$01:000064
interface(2):inmcast=$01:000066
interface(2):outmcast=$01:000068
interface(2):indrops=$01:00006A
interface(2):outdrops=$01:00006C
interface(2):inerrs=$01:00006E
interface(2):outerrs=$01:000070
interface(2):inoproto=$01:000072
interface(2):oqlen=$01:000074
interface(2):oqremaining=$01:000075
interface(2):threshold_time=$01:000076
interface(2):description_bytes=$01:000077
interface(2):description=$01:000078
interface(2):IF_DESCRIPTION_BYTES=00000E
interface(2):q2=$01:000080
interface(2):lock_cell_q1=$01:000081
interface(2):lock_cell_q2=$01:000082
interface(2):oq=$01:000083
interface(2):oq:head=$01:000083
interface(2):oq:tail=$01:000084
interface(2):oq2=$01:000085
interface(2):oq2:head=$01:000085
interface(2):oq2:head:bx=$01:000085
interface(2):oq2:head:offset=$01:000086
interface(2):oq2:tail=$01:000087
interface(2):oq2:tail:bx=$01:000087
interface(2):oq2:tail:offset=$01:000088
interface(2):initial=$01:000089
interface(2):rxtx_interface=$01:00008A
interface(2):class=$01:00008B
interface(2):llhl=$01:00008C
interface(2):write_llh=$01:00008D
interface(2):arp_rx=$01:00008E
interface(2):arp_tx=$01:00008F
interface(2):arp_resolve=$01:000090
interface(2):xarp=$01:000091
interface(2):ift1=$01:000092
interface(2):ift1:rx_restart=$01:000092
interface(2):ift1:rx_limit=$01:000093
interface(2):ift1:tx_restart=$01:000094
interface(2):ift1:tx_limit=$01:000095
interface(2):ift1:base_rx=$01:000096
interface(2):ift1:rx_cursor=$01:000097
interface(2):ift1:base_tx=$01:000098
interface(2):ift1:tx_cursor=$01:000099
interface(2):sif=$01:000092
interface(3)=$01:00009A
interface(3):id=$01:00009A
interface(3):flags=$01:00009B
interface(3):address_list=$01:00009C
interface(3):type=$01:00009D
interface(3):mtu=$01:00009E
interface(3):state=$01:00009F
interface(3):bitrate=$01:0000A0
interface(3):physa=$01:0000A2
interface(3):lastchange=$01:0000A4
interface(3):inoctets=$01:0000A6
interface(3):outoctets=$01:0000A8
interface(3):inpackets=$01:0000AA
interface(3):outpackets=$01:0000AC
interface(3):inmcast=$01:0000AE
interface(3):outmcast=$01:0000B0
interface(3):indrops=$01:0000B2
interface(3):outdrops=$01:0000B4
interface(3):inerrs=$01:0000B6
interface(3):outerrs=$01:0000B8
interface(3):inoproto=$01:0000BA
interface(3):oqlen=$01:0000BC
interface(3):oqremaining=$01:0000BD
interface(3):threshold_time=$01:0000BE
interface(3):description_bytes=$01:0000BF
interface(3):description=$01:0000C0
interface(3):IF_DESCRIPTION_BYTES=00000E
interface(3):q2=$01:0000C8
interface(3):lock_cell_q1=$01:0000C9
interface(3):lock_cell_q2=$01:0000CA
interface(3):oq=$01:0000CB
interface(3):oq:head=$01:0000CB
interface(3):oq:tail=$01:0000CC
interface(3):oq2=$01:0000CD
interface(3):oq2:head=$01:0000CD
interface(3):oq2:head:bx=$01:0000CD
interface(3):oq2:head:offset=$01:0000CE
interface(3):oq2:tail=$01:0000CF
interface(3):oq2:tail:bx=$01:0000CF
interface(3):oq2:tail:offset=$01:0000D0
interface(3):initial=$01:0000D1
interface(3):rxtx_interface=$01:0000D2
interface(3):class=$01:0000D3
interface(3):llhl=$01:0000D4
interface(3):write_llh=$01:0000D5
interface(3):arp_rx=$01:0000D6
interface(3):arp_tx=$01:0000D7
interface(3):arp_resolve=$01:0000D8
interface(3):xarp=$01:0000D9
interface(3):ift1=$01:0000DA
interface(3):ift1:rx_restart=$01:0000DA
interface(3):ift1:rx_limit=$01:0000DB
interface(3):ift1:tx_restart=$01:0000DC
interface(3):ift1:tx_limit=$01:0000DD
interface(3):ift1:base_rx=$01:0000DE
interface(3):ift1:rx_cursor=$01:0000DF
interface(3):ift1:base_tx=$01:0000E0
interface(3):ift1:tx_cursor=$01:0000E1
interface(3):sif=$01:0000DA
interface(4)=$01:0000E2
interface(4):id=$01:0000E2
interface(4):flags=$01:0000E3
interface(4):address_list=$01:0000E4
interface(4):type=$01:0000E5
interface(4):mtu=$01:0000E6
interface(4):state=$01:0000E7
interface(4):bitrate=$01:0000E8
interface(4):physa=$01:0000EA
interface(4):lastchange=$01:0000EC
interface(4):inoctets=$01:0000EE
interface(4):outoctets=$01:0000F0
interface(4):inpackets=$01:0000F2
interface(4):outpackets=$01:0000F4
interface(4):inmcast=$01:0000F6
interface(4):outmcast=$01:0000F8
interface(4):indrops=$01:0000FA
interface(4):outdrops=$01:0000FC
interface(4):inerrs=$01:0000FE
interface(4):outerrs=$01:000100
interface(4):inoproto=$01:000102
interface(4):oqlen=$01:000104
interface(4):oqremaining=$01:000105
interface(4):threshold_time=$01:000106
interface(4):description_bytes=$01:000107
interface(4):description=$01:000108
interface(4):IF_DESCRIPTION_BYTES=00000E
interface(4):q2=$01:000110
interface(4):lock_cell_q1=$01:000111
interface(4):lock_cell_q2=$01:000112
interface(4):oq=$01:000113
interface(4):oq:head=$01:000113
interface(4):oq:tail=$01:000114
interface(4):oq2=$01:000115
interface(4):oq2:head=$01:000115
interface(4):oq2:head:bx=$01:000115
interface(4):oq2:head:offset=$01:000116
interface(4):oq2:tail=$01:000117
interface(4):oq2:tail:bx=$01:000117
interface(4):oq2:tail:offset=$01:000118
interface(4):initial=$01:000119
interface(4):rxtx_interface=$01:00011A
interface(4):class=$01:00011B
interface(4):llhl=$01:00011C
interface(4):write_llh=$01:00011D
interface(4):arp_rx=$01:00011E
interface(4):arp_tx=$01:00011F
interface(4):arp_resolve=$01:000120
interface(4):xarp=$01:000121
interface(4):ift1=$01:000122
interface(4):ift1:rx_restart=$01:000122
interface(4):ift1:rx_limit=$01:000123
interface(4):ift1:tx_restart=$01:000124
interface(4):ift1:tx_limit=$01:000125
interface(4):ift1:base_rx=$01:000126
interface(4):ift1:rx_cursor=$01:000127
interface(4):ift1:base_tx=$01:000128
interface(4):ift1:tx_cursor=$01:000129
interface(4):sif=$01:000122
interface(5)=$01:00012A
interface(5):id=$01:00012A
interface(5):flags=$01:00012B
interface(5):address_list=$01:00012C
interface(5):type=$01:00012D
interface(5):mtu=$01:00012E
interface(5):state=$01:00012F
interface(5):bitrate=$01:000130
interface(5):physa=$01:000132
interface(5):lastchange=$01:000134
interface(5):inoctets=$01:000136
interface(5):outoctets=$01:000138
interface(5):inpackets=$01:00013A
interface(5):outpackets=$01:00013C
interface(5):inmcast=$01:00013E
interface(5):outmcast=$01:000140
interface(5):indrops=$01:000142
interface(5):outdrops=$01:000144
interface(5):inerrs=$01:000146
interface(5):outerrs=$01:000148
interface(5):inoproto=$01:00014A
interface(5):oqlen=$01:00014C
interface(5):oqremaining=$01:00014D
interface(5):threshold_time=$01:00014E
interface(5):description_bytes=$01:00014F
interface(5):description=$01:000150
interface(5):IF_DESCRIPTION_BYTES=00000F
interface(5):q2=$01:000158
interface(5):lock_cell_q1=$01:000159
interface(5):lock_cell_q2=$01:00015A
interface(5):oq=$01:00015B
interface(5):oq:head=$01:00015B
interface(5):oq:tail=$01:00015C
interface(5):oq2=$01:00015D
interface(5):oq2:head=$01:00015D
interface(5):oq2:head:bx=$01:00015D
interface(5):oq2:head:offset=$01:00015E
interface(5):oq2:tail=$01:00015F
interface(5):oq2:tail:bx=$01:00015F
interface(5):oq2:tail:offset=$01:000160
interface(5):initial=$01:000161
interface(5):rxtx_interface=$01:000162
interface(5):class=$01:000163
interface(5):llhl=$01:000164
interface(5):write_llh=$01:000165
interface(5):arp_rx=$01:000166
interface(5):arp_tx=$01:000167
interface(5):arp_resolve=$01:000168
interface(5):xarp=$01:000169
interface(5):ift1=$01:00016A
interface(5):ift1:rx_restart=$01:00016A
interface(5):ift1:rx_limit=$01:00016B
interface(5):ift1:tx_restart=$01:00016C
interface(5):ift1:tx_limit=$01:00016D
interface(5):ift1:base_rx=$01:00016E
interface(5):ift1:rx_cursor=$01:00016F
interface(5):ift1:base_tx=$01:000170
interface(5):ift1:tx_cursor=$01:000171
interface(5):sif=$01:00016A
interface(6)=$01:000172
interface(6):id=$01:000172
interface(6):flags=$01:000173
interface(6):address_list=$01:000174
interface(6):type=$01:000175
interface(6):mtu=$01:000176
interface(6):state=$01:000177
interface(6):bitrate=$01:000178
interface(6):physa=$01:00017A
interface(6):lastchange=$01:00017C
interface(6):inoctets=$01:00017E
interface(6):outoctets=$01:000180
interface(6):inpackets=$01:000182
interface(6):outpackets=$01:000184
interface(6):inmcast=$01:000186
interface(6):outmcast=$01:000188
interface(6):indrops=$01:00018A
interface(6):outdrops=$01:00018C
interface(6):inerrs=$01:00018E
interface(6):outerrs=$01:000190
interface(6):inoproto=$01:000192
interface(6):oqlen=$01:000194
interface(6):oqremaining=$01:000195
interface(6):threshold_time=$01:000196
interface(6):description_bytes=$01:000197
interface(6):description=$01:000198
interface(6):IF_DESCRIPTION_BYTES=000000
interface(6):q2=$01:0001A0
interface(6):lock_cell_q1=$01:0001A1
interface(6):lock_cell_q2=$01:0001A2
interface(6):oq=$01:0001A3
interface(6):oq:head=$01:0001A3
interface(6):oq:tail=$01:0001A4
interface(6):oq2=$01:0001A5
interface(6):oq2:head=$01:0001A5
interface(6):oq2:head:bx=$01:0001A5
interface(6):oq2:head:offset=$01:0001A6
interface(6):oq2:tail=$01:0001A7
interface(6):oq2:tail:bx=$01:0001A7
interface(6):oq2:tail:offset=$01:0001A8
interface(6):initial=$01:0001A9
interface(6):rxtx_interface=$01:0001AA
interface(6):class=$01:0001AB
interface(6):llhl=$01:0001AC
interface(6):write_llh=$01:0001AD
interface(6):arp_rx=$01:0001AE
interface(6):arp_tx=$01:0001AF
interface(6):arp_resolve=$01:0001B0
interface(6):xarp=$01:0001B1
interface(6):ift1=$01:0001B2
interface(6):ift1:rx_restart=$01:0001B2
interface(6):ift1:rx_limit=$01:0001B3
interface(6):ift1:tx_restart=$01:0001B4
interface(6):ift1:tx_limit=$01:0001B5
interface(6):ift1:base_rx=$01:0001B6
interface(6):ift1:rx_cursor=$01:0001B7
interface(6):ift1:base_tx=$01:0001B8
interface(6):ift1:tx_cursor=$01:0001B9
interface(6):sif=$01:0001B2
interface(7)=$01:0001BA
interface(7):id=$01:0001BA
interface(7):flags=$01:0001BB
interface(7):address_list=$01:0001BC
interface(7):type=$01:0001BD
interface(7):mtu=$01:0001BE
interface(7):state=$01:0001BF
interface(7):bitrate=$01:0001C0
interface(7):physa=$01:0001C2
interface(7):lastchange=$01:0001C4
interface(7):inoctets=$01:0001C6
interface(7):outoctets=$01:0001C8
interface(7):inpackets=$01:0001CA
interface(7):outpackets=$01:0001CC
interface(7):inmcast=$01:0001CE
interface(7):outmcast=$01:0001D0
interface(7):indrops=$01:0001D2
interface(7):outdrops=$01:0001D4
interface(7):inerrs=$01:0001D6
interface(7):outerrs=$01:0001D8
interface(7):inoproto=$01:0001DA
interface(7):oqlen=$01:0001DC
interface(7):oqremaining=$01:0001DD
interface(7):threshold_time=$01:0001DE
interface(7):description_bytes=$01:0001DF
interface(7):description=$01:0001E0
interface(7):IF_DESCRIPTION_BYTES=000000
interface(7):q2=$01:0001E8
interface(7):lock_cell_q1=$01:0001E9
interface(7):lock_cell_q2=$01:0001EA
interface(7):oq=$01:0001EB
interface(7):oq:head=$01:0001EB
interface(7):oq:tail=$01:0001EC
interface(7):oq2=$01:0001ED
interface(7):oq2:head=$01:0001ED
interface(7):oq2:head:bx=$01:0001ED
interface(7):oq2:head:offset=$01:0001EE
interface(7):oq2:tail=$01:0001EF
interface(7):oq2:tail:bx=$01:0001EF
interface(7):oq2:tail:offset=$01:0001F0
interface(7):initial=$01:0001F1
interface(7):rxtx_interface=$01:0001F2
interface(7):class=$01:0001F3
interface(7):llhl=$01:0001F4
interface(7):write_llh=$01:0001F5
interface(7):arp_rx=$01:0001F6
interface(7):arp_tx=$01:0001F7
interface(7):arp_resolve=$01:0001F8
interface(7):xarp=$01:0001F9
interface(7):ift1=$01:0001FA
interface(7):ift1:rx_restart=$01:0001FA
interface(7):ift1:rx_limit=$01:0001FB
interface(7):ift1:tx_restart=$01:0001FC
interface(7):ift1:tx_limit=$01:0001FD
interface(7):ift1:base_rx=$01:0001FE
interface(7):ift1:rx_cursor=$01:0001FF
interface(7):ift1:base_tx=$01:000200
interface(7):ift1:tx_cursor=$01:000201
interface(7):sif=$01:0001FA
interface(8)=$01:000202
interface(8):id=$01:000202
interface(8):flags=$01:000203
interface(8):address_list=$01:000204
interface(8):type=$01:000205
interface(8):mtu=$01:000206
interface(8):state=$01:000207
interface(8):bitrate=$01:000208
interface(8):physa=$01:00020A
interface(8):lastchange=$01:00020C
interface(8):inoctets=$01:00020E
interface(8):outoctets=$01:000210
interface(8):inpackets=$01:000212
interface(8):outpackets=$01:000214
interface(8):inmcast=$01:000216
interface(8):outmcast=$01:000218
interface(8):indrops=$01:00021A
interface(8):outdrops=$01:00021C
interface(8):inerrs=$01:00021E
interface(8):outerrs=$01:000220
interface(8):inoproto=$01:000222
interface(8):oqlen=$01:000224
interface(8):oqremaining=$01:000225
interface(8):threshold_time=$01:000226
interface(8):description_bytes=$01:000227
interface(8):description=$01:000228
interface(8):IF_DESCRIPTION_BYTES=000000
interface(8):q2=$01:000230
interface(8):lock_cell_q1=$01:000231
interface(8):lock_cell_q2=$01:000232
interface(8):oq=$01:000233
interface(8):oq:head=$01:000233
interface(8):oq:tail=$01:000234
interface(8):oq2=$01:000235
interface(8):oq2:head=$01:000235
interface(8):oq2:head:bx=$01:000235
interface(8):oq2:head:offset=$01:000236
interface(8):oq2:tail=$01:000237
interface(8):oq2:tail:bx=$01:000237
interface(8):oq2:tail:offset=$01:000238
interface(8):initial=$01:000239
interface(8):rxtx_interface=$01:00023A
interface(8):class=$01:00023B
interface(8):llhl=$01:00023C
interface(8):write_llh=$01:00023D
interface(8):arp_rx=$01:00023E
interface(8):arp_tx=$01:00023F
interface(8):arp_resolve=$01:000240
interface(8):xarp=$01:000241
interface(8):ift1=$01:000242
interface(8):ift1:rx_restart=$01:000242
interface(8):ift1:rx_limit=$01:000243
interface(8):ift1:tx_restart=$01:000244
interface(8):ift1:tx_limit=$01:000245
interface(8):ift1:base_rx=$01:000246
interface(8):ift1:rx_cursor=$01:000247
interface(8):ift1:base_tx=$01:000248
interface(8):ift1:tx_cursor=$01:000249
interface(8):sif=$01:000242
interface?=$00:000F70
invoi=00001D,00000F
ioaccesswordB=:N129:P:0:000000
ipAdEntAddr=$00:0006FC
ipAdEntAddr:rw_typ_tokens_words=$00:0006FC
ipAdEntAddr:o=$00:0006FD
ipAdEntAddr:l=$00:0006FE
ipAdEntAddr:data=$00:0006FF
ipAdEntAddr:flags=$00:000700
ipAdEntAddr:bucket=$00:000701
ipAdEntAddr:ranges=$00:000701
ipAdEntAddr:range=$00:000702
ipAdEntAddr:advance=$00:000702
ipAdEntAddr:netstring=:N129:P:0:000000
ipAdEntIfIndex=$00:000702
ipAdEntIfIndex:rw_typ_tokens_words=$00:000702
ipAdEntIfIndex:o=$00:000703
ipAdEntIfIndex:l=$00:000704
ipAdEntIfIndex:data=$00:000705
ipAdEntIfIndex:flags=$00:000706
ipAdEntIfIndex:bucket=$00:000707
ipAdEntIfIndex:ranges=$00:000707
ipAdEntIfIndex:range=$00:000708
ipAdEntIfIndex:advance=$00:000708
ipAdEntIfIndex:netstring=:N129:P:0:000000
ipAdEntNetMask=$00:000708
ipAdEntNetMask:rw_typ_tokens_words=$00:000708
ipAdEntNetMask:o=$00:000709
ipAdEntNetMask:l=$00:00070A
ipAdEntNetMask:data=$00:00070B
ipAdEntNetMask:flags=$00:00070C
ipAdEntNetMask:bucket=$00:00070D
ipAdEntNetMask:ranges=$00:00070D
ipAdEntNetMask:range=$00:00070E
ipAdEntNetMask:advance=$00:00070E
ipAdEntNetMask:netstring=:N129:P:0:000000
ipDefaultTTL=$00:000690
ipDefaultTTL:rw_typ_tokens_words=$00:000690
ipDefaultTTL:o=$00:000691
ipDefaultTTL:l=$00:000692
ipDefaultTTL:data=$00:000693
ipDefaultTTL:flags=$00:000694
ipDefaultTTL:bucket=$00:000695
ipDefaultTTL:ranges=$00:000695
ipDefaultTTL:range=$00:000696
ipDefaultTTL:advance=$00:000696
ipDefaultTTL:netstring=:N129:P:0:000000
ipDefaultTTL:i=$01:0004F9
ipForwDatagrams=$00:0006A8
ipForwDatagrams:rw_typ_tokens_words=$00:0006A8
ipForwDatagrams:o=$00:0006A9
ipForwDatagrams:l=$00:0006AA
ipForwDatagrams:data=$00:0006AB
ipForwDatagrams:flags=$00:0006AC
ipForwDatagrams:bucket=$00:0006AD
ipForwDatagrams:ranges=$00:0006AD
ipForwDatagrams:range=$00:0006AE
ipForwDatagrams:advance=$00:0006AE
ipForwDatagrams:netstring=:N129:P:0:000000
ipForwDatagrams:i=$01:000500
ipForwarding=$00:000688
ipForwarding:rw_typ_tokens_words=$00:000688
ipForwarding:o=$00:000689
ipForwarding:l=$00:00068A
ipForwarding:data=$00:00068B
ipForwarding:flags=$00:00068C
ipForwarding:bucket=$00:00068D
ipForwarding:ranges=$00:00068D
ipForwarding:range=$00:00068E
ipForwarding:advance=$00:000690
ipForwarding:netstring=:N129:P:0:000000
ipForwarding:i=$01:0004F8
ipFragCreates=$00:0006F6
ipFragCreates:rw_typ_tokens_words=$00:0006F6
ipFragCreates:o=$00:0006F7
ipFragCreates:l=$00:0006F8
ipFragCreates:data=$00:0006F9
ipFragCreates:flags=$00:0006FA
ipFragCreates:bucket=$00:0006FB
ipFragCreates:ranges=$00:0006FB
ipFragCreates:range=$00:0006FC
ipFragCreates:advance=$00:0006FC
ipFragCreates:netstring=:N129:P:0:000000
ipFragCreates:i=$01:000519
ipFragFails=$00:0006F0
ipFragFails:rw_typ_tokens_words=$00:0006F0
ipFragFails:o=$00:0006F1
ipFragFails:l=$00:0006F2
ipFragFails:data=$00:0006F3
ipFragFails:flags=$00:0006F4
ipFragFails:bucket=$00:0006F5
ipFragFails:ranges=$00:0006F5
ipFragFails:range=$00:0006F6
ipFragFails:advance=$00:0006F6
ipFragFails:netstring=:N129:P:0:000000
ipFragFails:i=$01:000517
ipFragOKs=$00:0006EA
ipFragOKs:rw_typ_tokens_words=$00:0006EA
ipFragOKs:o=$00:0006EB
ipFragOKs:l=$00:0006EC
ipFragOKs:data=$00:0006ED
ipFragOKs:flags=$00:0006EE
ipFragOKs:bucket=$00:0006EF
ipFragOKs:ranges=$00:0006EF
ipFragOKs:range=$00:0006F0
ipFragOKs:advance=$00:0006F0
ipFragOKs:netstring=:N129:P:0:000000
ipFragOKs:i=$01:000515
ipInAddrErrors=$00:0006A2
ipInAddrErrors:rw_typ_tokens_words=$00:0006A2
ipInAddrErrors:o=$00:0006A3
ipInAddrErrors:l=$00:0006A4
ipInAddrErrors:data=$00:0006A5
ipInAddrErrors:flags=$00:0006A6
ipInAddrErrors:bucket=$00:0006A7
ipInAddrErrors:ranges=$00:0006A7
ipInAddrErrors:range=$00:0006A8
ipInAddrErrors:advance=$00:0006A8
ipInAddrErrors:netstring=:N129:P:0:000000
ipInAddrErrors:i=$01:0004FE
ipInDelivers=$00:0006BA
ipInDelivers:rw_typ_tokens_words=$00:0006BA
ipInDelivers:o=$00:0006BB
ipInDelivers:l=$00:0006BC
ipInDelivers:data=$00:0006BD
ipInDelivers:flags=$00:0006BE
ipInDelivers:bucket=$00:0006BF
ipInDelivers:ranges=$00:0006BF
ipInDelivers:range=$00:0006C0
ipInDelivers:advance=$00:0006C0
ipInDelivers:netstring=:N129:P:0:000000
ipInDelivers:i=$01:000506
ipInDiscards=$00:0006B4
ipInDiscards:rw_typ_tokens_words=$00:0006B4
ipInDiscards:o=$00:0006B5
ipInDiscards:l=$00:0006B6
ipInDiscards:data=$00:0006B7
ipInDiscards:flags=$00:0006B8
ipInDiscards:bucket=$00:0006B9
ipInDiscards:ranges=$00:0006B9
ipInDiscards:range=$00:0006BA
ipInDiscards:advance=$00:0006BA
ipInDiscards:netstring=:N129:P:0:000000
ipInDiscards:i=$01:000504
ipInHdrErrors=$00:00069C
ipInHdrErrors:rw_typ_tokens_words=$00:00069C
ipInHdrErrors:o=$00:00069D
ipInHdrErrors:l=$00:00069E
ipInHdrErrors:data=$00:00069F
ipInHdrErrors:flags=$00:0006A0
ipInHdrErrors:bucket=$00:0006A1
ipInHdrErrors:ranges=$00:0006A1
ipInHdrErrors:range=$00:0006A2
ipInHdrErrors:advance=$00:0006A2
ipInHdrErrors:netstring=:N129:P:0:000000
ipInHdrErrors:i=$01:0004FC
ipInReceives=$00:000696
ipInReceives:rw_typ_tokens_words=$00:000696
ipInReceives:o=$00:000697
ipInReceives:l=$00:000698
ipInReceives:data=$00:000699
ipInReceives:flags=$00:00069A
ipInReceives:bucket=$00:00069B
ipInReceives:ranges=$00:00069B
ipInReceives:range=$00:00069C
ipInReceives:advance=$00:00069C
ipInReceives:netstring=:N129:P:0:000000
ipInReceives:i=$01:0004FA
ipInUnknownProtos=$00:0006AE
ipInUnknownProtos:rw_typ_tokens_words=$00:0006AE
ipInUnknownProtos:o=$00:0006AF
ipInUnknownProtos:l=$00:0006B0
ipInUnknownProtos:data=$00:0006B1
ipInUnknownProtos:flags=$00:0006B2
ipInUnknownProtos:bucket=$00:0006B3
ipInUnknownProtos:ranges=$00:0006B3
ipInUnknownProtos:range=$00:0006B4
ipInUnknownProtos:advance=$00:0006B4
ipInUnknownProtos:netstring=:N129:P:0:000000
ipInUnknownProtos:i=$01:000502
ipOutDiscards=$00:0006C6
ipOutDiscards:rw_typ_tokens_words=$00:0006C6
ipOutDiscards:o=$00:0006C7
ipOutDiscards:l=$00:0006C8
ipOutDiscards:data=$00:0006C9
ipOutDiscards:flags=$00:0006CA
ipOutDiscards:bucket=$00:0006CB
ipOutDiscards:ranges=$00:0006CB
ipOutDiscards:range=$00:0006CC
ipOutDiscards:advance=$00:0006CC
ipOutDiscards:netstring=:N129:P:0:000000
ipOutDiscards:i=$01:00050A
ipOutNoRoutes=$00:0006CC
ipOutNoRoutes:rw_typ_tokens_words=$00:0006CC
ipOutNoRoutes:o=$00:0006CD
ipOutNoRoutes:l=$00:0006CE
ipOutNoRoutes:data=$00:0006CF
ipOutNoRoutes:flags=$00:0006D0
ipOutNoRoutes:bucket=$00:0006D1
ipOutNoRoutes:ranges=$00:0006D1
ipOutNoRoutes:range=$00:0006D2
ipOutNoRoutes:advance=$00:0006D2
ipOutNoRoutes:netstring=:N129:P:0:000000
ipOutNoRoutes:i=$01:00050C
ipOutRequests=$00:0006C0
ipOutRequests:rw_typ_tokens_words=$00:0006C0
ipOutRequests:o=$00:0006C1
ipOutRequests:l=$00:0006C2
ipOutRequests:data=$00:0006C3
ipOutRequests:flags=$00:0006C4
ipOutRequests:bucket=$00:0006C5
ipOutRequests:ranges=$00:0006C5
ipOutRequests:range=$00:0006C6
ipOutRequests:advance=$00:0006C6
ipOutRequests:netstring=:N129:P:0:000000
ipOutRequests:i=$01:000508
ipReasmFails=$00:0006E4
ipReasmFails:rw_typ_tokens_words=$00:0006E4
ipReasmFails:o=$00:0006E5
ipReasmFails:l=$00:0006E6
ipReasmFails:data=$00:0006E7
ipReasmFails:flags=$00:0006E8
ipReasmFails:bucket=$00:0006E9
ipReasmFails:ranges=$00:0006E9
ipReasmFails:range=$00:0006EA
ipReasmFails:advance=$00:0006EA
ipReasmFails:netstring=:N129:P:0:000000
ipReasmFails:i=$01:000513
ipReasmOKs=$00:0006DE
ipReasmOKs:rw_typ_tokens_words=$00:0006DE
ipReasmOKs:o=$00:0006DF
ipReasmOKs:l=$00:0006E0
ipReasmOKs:data=$00:0006E1
ipReasmOKs:flags=$00:0006E2
ipReasmOKs:bucket=$00:0006E3
ipReasmOKs:ranges=$00:0006E3
ipReasmOKs:range=$00:0006E4
ipReasmOKs:advance=$00:0006E4
ipReasmOKs:netstring=:N129:P:0:000000
ipReasmOKs:i=$01:000511
ipReasmReqds=$00:0006D8
ipReasmReqds:rw_typ_tokens_words=$00:0006D8
ipReasmReqds:o=$00:0006D9
ipReasmReqds:l=$00:0006DA
ipReasmReqds:data=$00:0006DB
ipReasmReqds:flags=$00:0006DC
ipReasmReqds:bucket=$00:0006DD
ipReasmReqds:ranges=$00:0006DD
ipReasmReqds:range=$00:0006DE
ipReasmReqds:advance=$00:0006DE
ipReasmReqds:netstring=:N129:P:0:000000
ipReasmReqds:i=$01:00050F
ipReasmTimeOut=$00:0006D2
ipReasmTimeOut:rw_typ_tokens_words=$00:0006D2
ipReasmTimeOut:o=$00:0006D3
ipReasmTimeOut:l=$00:0006D4
ipReasmTimeOut:data=$00:0006D5
ipReasmTimeOut:flags=$00:0006D6
ipReasmTimeOut:bucket=$00:0006D7
ipReasmTimeOut:ranges=$00:0006D7
ipReasmTimeOut:range=$00:0006D8
ipReasmTimeOut:advance=$00:0006D8
ipReasmTimeOut:netstring=:N129:P:0:000000
ipReasmTimeOut:i=$01:00050E
ipRouteDest=$00:00070E
ipRouteDest:rw_typ_tokens_words=$00:00070E
ipRouteDest:o=$00:00070F
ipRouteDest:l=$00:000710
ipRouteDest:data=$00:000711
ipRouteDest:flags=$00:000712
ipRouteDest:bucket=$00:000713
ipRouteDest:ranges=$00:000713
ipRouteDest:range=$00:000714
ipRouteDest:advance=$00:000714
ipRouteDest:netstring=:N129:P:0:000000
ipRouteIfIndex=$00:000714
ipRouteIfIndex:rw_typ_tokens_words=$00:000714
ipRouteIfIndex:o=$00:000715
ipRouteIfIndex:l=$00:000716
ipRouteIfIndex:data=$00:000717
ipRouteIfIndex:flags=$00:000718
ipRouteIfIndex:bucket=$00:000719
ipRouteIfIndex:ranges=$00:000719
ipRouteIfIndex:range=$00:00071A
ipRouteIfIndex:advance=$00:00071A
ipRouteIfIndex:netstring=:N129:P:0:000000
ipRouteNetMask=$00:000726
ipRouteNetMask:rw_typ_tokens_words=$00:000726
ipRouteNetMask:o=$00:000727
ipRouteNetMask:l=$00:000728
ipRouteNetMask:data=$00:000729
ipRouteNetMask:flags=$00:00072A
ipRouteNetMask:bucket=$00:00072B
ipRouteNetMask:ranges=$00:00072B
ipRouteNetMask:range=$00:00072C
ipRouteNetMask:advance=$00:00072C
ipRouteNetMask:netstring=:N129:P:0:000000
ipRouteNextHop=$00:00071A
ipRouteNextHop:rw_typ_tokens_words=$00:00071A
ipRouteNextHop:o=$00:00071B
ipRouteNextHop:l=$00:00071C
ipRouteNextHop:data=$00:00071D
ipRouteNextHop:flags=$00:00071E
ipRouteNextHop:bucket=$00:00071F
ipRouteNextHop:ranges=$00:00071F
ipRouteNextHop:range=$00:000720
ipRouteNextHop:advance=$00:000720
ipRouteNextHop:netstring=:N129:P:0:000000
ipRouteType=$00:000720
ipRouteType:rw_typ_tokens_words=$00:000720
ipRouteType:o=$00:000721
ipRouteType:l=$00:000722
ipRouteType:data=$00:000723
ipRouteType:flags=$00:000724
ipRouteType:bucket=$00:000725
ipRouteType:ranges=$00:000725
ipRouteType:range=$00:000726
ipRouteType:advance=$00:000726
ipRouteType:netstring=:N129:P:0:000000
ipRoutingDiscards=$00:00072C
ipRoutingDiscards:rw_typ_tokens_words=$00:00072C
ipRoutingDiscards:o=$00:00072D
ipRoutingDiscards:l=$00:00072E
ipRoutingDiscards:data=$00:00072F
ipRoutingDiscards:flags=$00:000730
ipRoutingDiscards:bucket=$00:000731
ipRoutingDiscards:ranges=$00:000731
ipRoutingDiscards:range=$00:000732
ipRoutingDiscards:advance=$00:000732
ipRoutingDiscards:netstring=:N129:P:0:000000
ipRoutingDiscards:i=$01:00051B
ip_agent_address=$00:000266
ip_agent_address_broadcast=$00:000029
ip_agent_address_ifidx=$00:000267
ip_agent_address_maxreasm=$00:00002A
ip_agent_address_netmask=$00:000268
ip_agent_cidr_route_dest=$00:000271
ip_agent_cidr_route_dest_type=$00:000270
ip_agent_cidr_route_ifidx=$00:000275
ip_agent_cidr_route_mask_log=$00:000272
ip_agent_cidr_route_next_hop=$00:000274
ip_agent_cidr_route_next_hop_type=$00:000273
ip_agent_cidr_route_type=$00:000276
ip_agent_route_dest=$00:00026B
ip_agent_route_ifidx=$00:00026C
ip_agent_route_mask=$00:00026F
ip_agent_route_next_hop=$00:00026D
ip_agent_route_type=$00:00026E
ip_buy_datagram=$00:000212
ip_buy_datagram_alternate=$00:000213
ip_homed_route=$00:00017F
ip_mib_i_f=$01:00048B
ip_mib_oaddress=$01:00048E
ip_mib_oaddress:along=$01:00048E
ip_mib_oaddress:data=$01:00048F
ip_mib_oaddress:down=$01:00048F
ip_mib_oaddress:seq=$01:000490
ip_mib_oaddress:type=$01:000491
ip_mib_oaddress:bytes=$01:000492
ip_mib_oaddress:flags=$01:000493
ip_mib_oaddress:bucket=$01:000494
ip_mib_oaddress:ranges=$01:000494
ip_mib_oaddress:range=$01:000495
ip_mib_oifidx=$01:000495
ip_mib_oifidx:along=$01:000495
ip_mib_oifidx:data=$01:000496
ip_mib_oifidx:down=$01:000496
ip_mib_oifidx:seq=$01:000497
ip_mib_oifidx:type=$01:000498
ip_mib_oifidx:bytes=$01:000499
ip_mib_oifidx:flags=$01:00049A
ip_mib_oifidx:bucket=$01:00049B
ip_mib_oifidx:ranges=$01:00049B
ip_mib_oifidx:range=$01:00049C
ip_mib_xnet=$01:00048C
ip_next_route=$00:00015D
ip_no_txbuffer=$00:000231
ip_route=$00:00015C
ip_route_advance=$00:00015A
ip_route_x=$00:000166
ip_send=$00:000167
ip_send_now=$00:00018B
ip_send_now1=$00:00018C
ip_send_x=$00:00018F
ip_source_ifidx=$00:000257
ip_source_next=$00:000259
ip_source_no=$00:000261
ip_source_yes=$00:000260
ipacidrlist=000003,00000F
ipacidrseq=000002,00000F
ipagent_1more=$00:0003F1
ipagent_address=$00:0003AF
ipagent_address_ifidx=$00:0003BE
ipagent_address_netmask=$00:0003CB
ipagent_cidr_address_along=$00:000557
ipagent_cidr_route_dest=$00:00057B
ipagent_cidr_route_dest_notype=$00:00057A
ipagent_cidr_route_dest_type=$00:00056E
ipagent_cidr_route_ifidx=$00:0005B7
ipagent_cidr_route_mask_log=$00:00058A
ipagent_cidr_route_next_hop=$00:0005A5
ipagent_cidr_route_next_hop_type=$00:000597
ipagent_cidr_route_nodest=$00:000589
ipagent_cidr_route_noifidx=$00:0005C4
ipagent_cidr_route_nomask_log=$00:000596
ipagent_cidr_route_nonext_hop=$00:0005B6
ipagent_cidr_route_nonext_hop_type=$00:0005A4
ipagent_cidr_route_notype=$00:0005D3
ipagent_cidr_route_type=$00:0005C5
ipagent_cidr_search_exact=$00:00056A
ipagent_cidr_search_forward=$00:00056C
ipagent_cidr_tabler=$00:000549
ipagent_cidr_tabler_address!=$00:000565
ipagent_cidr_tabler_noaddress=$00:000565
ipagent_cidr_tabler_readdress=$00:000562
ipagent_cidr_write_oid_tokens=$00:000567
ipagent_exact=$00:0003EB
ipagent_find_ge=$00:000407
ipagent_noaddress=$00:0003BD
ipagent_noifidx=$00:0003CA
ipagent_nomask=$00:0003D9
ipagent_readoid2netform=$00:0003F3
ipagent_route_dest=$00:000408
ipagent_route_ifidx=$00:000417
ipagent_route_mask=$00:000425
ipagent_route_next_hop=$00:000434
ipagent_route_nodest=$00:000416
ipagent_route_noifidx=$00:000424
ipagent_route_nomask=$00:000433
ipagent_route_nonext_hop=$00:000442
ipagent_route_notype=$00:000451
ipagent_route_type=$00:000443
ipagent_search_exact=$00:0003E5
ipagent_search_forward=$00:0003EC
ipagent_search_id=$00:0003E6
ipagent_search_nextid=$00:0003ED
ipagent_seek=$00:0003FE
ipagent_seek_nane?=$00:000405
ipagent_seek_next=$00:000401
ipagent_tabler=$00:000391
ipagent_write2oid=$00:0003DC
ipagent_write_oid_tokens=$00:0003DA
ipcidr_tableidx=000006,00000F
ipcidro=000004,00000F
ipcidrroutine=000005,00000F
ipifidxflags=000004,00000F
ipifidxseq=000003,00000F
ipmaskflags=000004,00000F
ipmaskroutine=000005,00000F
ipmaskseq=000003,00000F
ipnetflags=000004,00000F
ipnetroutine=000005,00000F
ipnetseq=000003,00000F
ipq_add_options!=$00:0002EB
ipq_add_options?=$00:0002ED
ipq_construct_datagram_header=$00:0002DA
ipq_source_fragment=$00:0002D9
ipq_write=$00:0002C6
ipq_write2q=$00:0002D3
ipq_write_channel_program=$00:0002F1
ipq_write_sum=$00:0002EE
iprohopflags=000004,00000F
iprohoproutine=000005,00000F
iprohopseq=000003,00000F
iproifidxflags=000004,00000F
iproifidxseq=000003,00000F
ipromaskflags=000004,00000F
ipromaskroutine=000005,00000F
ipromaskseq=000003,00000F
ipromib_i_f=$01:00049C
ipromib_oaddress=$01:00049F
ipromib_oaddress:along=$01:00049F
ipromib_oaddress:data=$01:0004A0
ipromib_oaddress:down=$01:0004A0
ipromib_oaddress:seq=$01:0004A1
ipromib_oaddress:type=$01:0004A2
ipromib_oaddress:bytes=$01:0004A3
ipromib_oaddress:flags=$01:0004A4
ipromib_oaddress:bucket=$01:0004A5
ipromib_oaddress:ranges=$01:0004A5
ipromib_oaddress:range=$01:0004A6
ipromib_oifidx=$01:0004A6
ipromib_oifidx:along=$01:0004A6
ipromib_oifidx:data=$01:0004A7
ipromib_oifidx:down=$01:0004A7
ipromib_oifidx:seq=$01:0004A8
ipromib_oifidx:type=$01:0004A9
ipromib_oifidx:bytes=$01:0004AA
ipromib_oifidx:flags=$01:0004AB
ipromib_oifidx:bucket=$01:0004AC
ipromib_oifidx:ranges=$01:0004AC
ipromib_oifidx:range=$01:0004AD
ipromib_xnet=$01:00049D
ipronetflags=000004,00000F
ipronetroutine=000005,00000F
ipronetseq=000003,00000F
iprotypflags=000004,00000F
iprotyproutine=000005,00000F
iprotypseq=000003,00000F
ipsend+=$00:00008B
iptabler_address!=$00:0003AD
iptabler_address_along=$00:00039F
iptabler_noaddress=$00:0003AD
iptabler_readdress=$00:0003AA
iptabroutine=000005,00000F
iptabseq=000002,00000F
ipv4=$00:00014A
ipv44us?=$00:000265
ipv4_4us?+=$00:0000A0
ipv4_address_hit=$00:000245
ipv4_address_test=$00:00023B
ipv4_address_this_host?=$00:000246
ipv4_address_this_if?=$00:000239
ipv4_count_check=$00:0001FD
ipv4_drop=$00:00020B
ipv4_forus!=$00:000238
ipv4_forus?=$00:000232
ipv4_forward=$00:000252
ipv4_high=$00:000F75
ipv4_list_hit=$00:000251
ipv4_nex=$00:00024D
ipv4_next=$00:000241
ipv4_qcheckin(1)=$00:0001D2
ipv4_qcheckin(10)=$00:0001C9
ipv4_qcheckin(11)=$00:0001C8
ipv4_qcheckin(12)=$00:0001C7
ipv4_qcheckin(13)=$00:0001C6
ipv4_qcheckin(14)=$00:0001C5
ipv4_qcheckin(2)=$00:0001D1
ipv4_qcheckin(3)=$00:0001D0
ipv4_qcheckin(4)=$00:0001CF
ipv4_qcheckin(5)=$00:0001CE
ipv4_qcheckin(6)=$00:0001CD
ipv4_qcheckin(7)=$00:0001CC
ipv4_qcheckin(8)=$00:0001CB
ipv4_qcheckin(9)=$00:0001CA
ipv4_round_stack_word=$00:0001F1
ipv4_rx=$00:000191
ipv4_rxz=$00:00020F
ipv4_test_in_list=$00:000247
ipv4_this_host?+=$00:0000A2
ipv4_this_if?+=$00:0000A1
ipv4_uproto_rx=$00:000201
ipv4_uprotocol_checksum_addresses=$00:0001FD
ipv4_xforward=$00:000255
ipv4_yesforus=$00:0001E3
ipv4_zforward=$00:000256
ipv4thishost?=$00:00026B
ipv4thisif?=$00:000268
irespite=$00:0006FA
iscan=[0024]000000
iscan48=[0025]000000
iscan48a
iscan72=[0026]000000
iscan72a
iscan_skip=[0023]000000
iscan_skipa
iscana
iserve=$00:000504
iserve:integer_serve=$00:000504
iserve:iserver_zstart=$00:000509
iserve:socketi=$01:00042F
iserve:i_bound=$01:000430
iserve:portcb_lva=$01:000431
iserve:portcb=$01:000432
iserve:descriptor=$46:000000,00000E
iserve:descriptor:next=$46:000000,00000E
iserve:descriptor:frame=$46:000001,00000E
iserve:descriptor:i_f=$46:000002,00000E
iserve:descriptor:bytes=$46:000003,00000E
iserve:descriptor:dgram=$46:000004,00000E
iserve:descriptor:uproto=$46:000005,00000E
iserve:descriptor:sobdi=$46:000006,00000E
iserve:descriptor:apdata=$46:000006,00000E
iserve:descriptor:tcbloc=$46:000007,00000E
iserve:descriptor:ifql=$46:000007,00000E
iserve:descriptor:lso=$46:000007,00000E
iserve:descriptor:total_bytes=$46:000007,00000E
iserve:descriptor:readpoint=$46:000007,00000E
iserve:descriptor:next_bdi=$46:000007,00000E
iserve:so=$42:000000,000002
iserve:so:socket_address=$42:000000,000002
iserve:so:remote_address=$42:000002,000002
iserve:so:flags=$42:000004,000002
iserve:so:udp=$42:000005,000002
iserve:so:udp:tsq=$42:000005,000002
iserve:so:udp:socket_inq=$42:000006,000002
iserve:so:udp:socket_inq:head=$42:000006,000002
iserve:so:udp:socket_inq:tail=$42:000007,000002
iserve:so:tcp=$42:000005,000002
iserve:so:tcp:tbase=$42:000005,000002
iserve:so:tcp:tcbs=$42:000006,000002
iserve:so:tcp:rxbu_p=$42:000006,000002
iserve:so:tcp:rxowner=$42:000007,000002
iserve:so:tcp:txbu_p=$42:000007,000002
iserve:i_server1=$00:00050A
iserve:response_axw=000010,00000F
iserve:operator=00000F,00000F
iserve:left=00000B,00000F
iserve:right=000007,00000F
iserve:xtra=000003,00000F
iserve:signs1=000002,00000F
iserve:signs=000000,00000F
iserve:i_rx1=$00:000523
iserve:i_again=$00:00053C
iserve:i_add=$00:00054A
iserve:i_add_again=$00:00054A
iserve:i_add_negative=$00:000554
iserve:i_add_negative_again=$00:000554
iserve:i_multiply=$00:00055F
iserve:i_multiply_again=$00:00055F
iserve:i_divide=$00:000567
iserve:i_divide_again=$00:000567
iserve:i_div_dont=$00:00056E
iserve:i_nop=$00:000570
iserve:i_edit=$00:000570
iserve:i_ecomplete=$00:000581
iserve:i_release=$00:00058A
iserve:i_no_traffic=$00:00058E
iserve:i_error=$00:000591
itable_ii=$00:000611
itable_write=$00:000619
ityp=00001C,00000F
kernel_b1_ii=$00:0005E5
kernel_b1_ii_1=$00:0005DD
large_bank=$00:000206
large_bank_at_summit=$00:0001A0
large_bank_descriptor_sp=$41:003006
large_bank_free=$00:000189
large_system=$00:0000F9
lexical_list=000003,00000F
llheader=:N129:P:0:000000
load_image=$00:000131
load_oid?=$00:0001F2
locate_interfaces=$00:000074
locate_interfaces_again=$00:000078
locate_interfaces_next_device=$00:000082
locate_primed_interface?=$00:00008C
located_no_primed_interface=$00:000091
lookfor_app=$42:000000,000002
lookfor_app:fs_type=$42:000000,000002
lookfor_app:device=$42:000001,000002
lookfor_app:bank=$42:000001,000002
lookfor_app:extent=$42:000002,000002
lookfor_app:absolute_pointer=$42:000004,000002
lvp=:P1:0:000041
m48_24
m48_48
mabanks=$00:0000AD
major_minor=:N129:P:0:000000
management_pages_based=$00:0000EF
management_words=$00:0000A1
masked_test_jump=:N131:P:0:000000
maxmabanks=$00:0000B3
measure=$00:0000DA
memory_configured=$00:00010A
mib+=$03:0004D4
mib2tick=$00:000245
mib2tick_deliver=$00:000245
mib2ticko=$01:00043F
mib2ticko:along=$01:00043F
mib2ticko:data=$01:000440
mib2ticko:down=$01:000440
mib2ticko:seq=$01:000441
mib2ticko:type=$01:000442
mib2ticko:bytes=$01:000443
mib2ticko:flags=$01:000444
mib2ticko:bucket=$01:000445
mib2ticko:ranges=$01:000445
mib2ticko:range=$01:000446
mib2ticks+=$00:000245
mib_check_double_good=$00:000243
mib_check_good=$00:000244
mib_checksigned_l=$00:000238
mib_checksigned_l!=$00:00023A
mib_checksigned_l?=$00:000241
mib_checksigned_lnext=$00:000240
mib_checksigned_s=$00:000223
mib_checksigned_s!=$00:000224
mib_checksigned_s?=$00:00022B
mib_checksigned_snext=$00:00022A
mib_checkunsigned_l=$00:00022D
mib_checkunsigned_l!=$00:00022F
mib_checkunsigned_l?=$00:000236
mib_checkunsigned_lnext=$00:000235
mib_checkunsigned_s=$00:000219
mib_checkunsigned_s!=$00:00021A
mib_checkunsigned_s?=$00:000221
mib_checkunsigned_snext=$00:000220
mib_checkwlen=$00:0001BC
mib_decode=$00:00020B
mib_decode_simple=$00:000216
mib_decoded=$00:000215
mib_downpathw=$00:000100
mib_firstinroww=$00:000127
mib_floor=$01:000437
mib_get+=$00:000240
mib_getnext+=$00:000241
mib_initial=$00:0001D6
mib_initial_next=$00:0001D7
mib_initial_x=$00:0001DE
mib_line+=$00:000244
mib_long_signed=$00:0001A3
mib_modify=$00:00016B
mib_nowrite=$00:0001CF
mib_read=$00:000040
mib_right_awayw=$00:000116
mib_right_onw=$00:000113
mib_rightwardw=$00:000104
mib_root=$01:000438
mib_root:along=$01:000438
mib_root:data=$01:000439
mib_root:down=$01:000439
mib_root:seq=$01:00043A
mib_root:type=$01:00043B
mib_root:bytes=$01:00043C
mib_root:flags=$01:00043D
mib_root:bucket=$01:00043E
mib_root:ranges=$01:00043E
mib_root:range=$01:00043F
mib_rr!=$00:000048
mib_rr?=$00:000059
mib_rr_badvalue=$00:000063
mib_rr_function=$00:000069
mib_rr_nosuchname=$00:000066
mib_rr_seq?=$00:000050
mib_rr_token_pass=$00:000058
mib_rr_x=$00:000071
mib_set+=$00:000242
mib_setinroww=$00:00012B
mib_single_signed=$00:0001B1
mib_space=$00:000211
mib_start+=$00:000243
mib_store=$00:0001D1
mib_store1=$00:0001A8
mib_store_l=$00:0001B9
mib_store_long_range!=$00:000154
mib_store_long_range?=$00:000158
mib_store_new=$00:000168
mib_store_new_x=$00:000160
mib_store_new_x1=$00:000166
mib_store_range!=$00:00015A
mib_store_range?=$00:00015E
mib_store_s=$00:0001B6
mib_storeb=$00:0001D2
mib_uneta=$01:000456
mib_uneto=$01:000448
mib_uneto:along=$01:000448
mib_uneto:data=$01:000449
mib_uneto:down=$01:000449
mib_uneto:seq=$01:00044A
mib_uneto:type=$01:00044B
mib_uneto:bytes=$01:00044C
mib_uneto:flags=$01:00044D
mib_uneto:bucket=$01:00044E
mib_uneto:ranges=$01:00044E
mib_uneto:range=$01:00044F
mib_unpack=$00:000204
mib_uporto=$01:00044F
mib_uporto:along=$01:00044F
mib_uporto:data=$01:000450
mib_uporto:down=$01:000450
mib_uporto:seq=$01:000451
mib_uporto:type=$01:000452
mib_uporto:bytes=$01:000453
mib_uporto:flags=$01:000454
mib_uporto:bucket=$01:000455
mib_uporto:ranges=$01:000455
mib_uporto:range=$01:000456
mib_walk=$00:000072
mib_warray!=$00:0001C2
mib_warray?=$00:0001C6
mib_wbadvalue=$00:0001CC
mib_wgenerr=$00:0001CA
mib_wline=$00:0001DF
mib_wlocate!=$00:0000EF
mib_wlocate?=$00:00012B
mib_wnumber=$00:00018D
mib_wreadonly=$00:0001CE
mib_write=$00:0000E3
mib_writex=$00:0001D3
mib_wtoobig=$00:0001C8
mib_ww!=$00:00007F
mib_ww?=$00:0000A3
mib_ww_along!=$00:0000C7
mib_ww_along?=$00:0000BE
mib_ww_badvalue=$00:0000CC
mib_ww_down=$00:000089
mib_ww_function=$00:0000B5
mib_ww_nosuchname=$00:0000C9
mib_ww_peer=$00:00009D
mib_ww_ruano?=$00:0000A6
mib_ww_seek_peer=$00:000092
mib_ww_slingback!=$00:0000D7
mib_ww_slingback?=$00:0000DD
mib_ww_slungback=$00:0000DB
mib_ww_up=$00:0000C0
mib_ww_x=$00:0000E0
mib_www=$00:0000CF
mibw_first=000001,00000F
mibw_floorb4=000003,00000F
mibw_parent=000002,00000F
mibw_prior=000000,00000F
minimald
mo=$42:000000,000002
mo:along=$42:000000,000002
mo:data=$42:000001,000002
mo:down=$42:000001,000002
mo:seq=$42:000002,000002
mo:type=$42:000003,000002
mo:bytes=$42:000004,000002
mo:flags=$42:000005,000002
mo:bucket=$42:000006,000002
mo:ranges=$42:000006,000002
mo:range=$42:000007,000002
mobjet=:N129:P:0:000000
mpool=:P1:0:000043
mvo=:N129:P:(0)0:000000
mvoi=:N129:P:0:000000
net2sym_ii=$00:000636
net_address(1)=$01:000340
net_address(1):next=$01:000340
net_address(1):lexical=$01:000341
net_address(1):i_f=$01:000342
net_address(1):net=$01:000343
net_address(1):mask=$01:000345
net_address(1):broadcast=$01:000347
net_address(10)=$01:000391
net_address(10):next=$01:000391
net_address(10):lexical=$01:000392
net_address(10):i_f=$01:000393
net_address(10):net=$01:000394
net_address(10):mask=$01:000396
net_address(10):broadcast=$01:000398
net_address(11)=$01:00039A
net_address(11):next=$01:00039A
net_address(11):lexical=$01:00039B
net_address(11):i_f=$01:00039C
net_address(11):net=$01:00039D
net_address(11):mask=$01:00039F
net_address(11):broadcast=$01:0003A1
net_address(12)=$01:0003A3
net_address(12):next=$01:0003A3
net_address(12):lexical=$01:0003A4
net_address(12):i_f=$01:0003A5
net_address(12):net=$01:0003A6
net_address(12):mask=$01:0003A8
net_address(12):broadcast=$01:0003AA
net_address(13)=$01:0003AC
net_address(13):next=$01:0003AC
net_address(13):lexical=$01:0003AD
net_address(13):i_f=$01:0003AE
net_address(13):net=$01:0003AF
net_address(13):mask=$01:0003B1
net_address(13):broadcast=$01:0003B3
net_address(14)=$01:0003B5
net_address(14):next=$01:0003B5
net_address(14):lexical=$01:0003B6
net_address(14):i_f=$01:0003B7
net_address(14):net=$01:0003B8
net_address(14):mask=$01:0003BA
net_address(14):broadcast=$01:0003BC
net_address(15)=$01:0003BE
net_address(15):next=$01:0003BE
net_address(15):lexical=$01:0003BF
net_address(15):i_f=$01:0003C0
net_address(15):net=$01:0003C1
net_address(15):mask=$01:0003C3
net_address(15):broadcast=$01:0003C5
net_address(16)=$01:0003C7
net_address(16):next=$01:0003C7
net_address(16):lexical=$01:0003C8
net_address(16):i_f=$01:0003C9
net_address(16):net=$01:0003CA
net_address(16):mask=$01:0003CC
net_address(16):broadcast=$01:0003CE
net_address(17)=$01:0003D0
net_address(17):next=$01:0003D0
net_address(17):lexical=$01:0003D1
net_address(17):i_f=$01:0003D2
net_address(17):net=$01:0003D3
net_address(17):mask=$01:0003D5
net_address(17):broadcast=$01:0003D7
net_address(18)=$01:0003D9
net_address(18):next=$01:0003D9
net_address(18):lexical=$01:0003DA
net_address(18):i_f=$01:0003DB
net_address(18):net=$01:0003DC
net_address(18):mask=$01:0003DE
net_address(18):broadcast=$01:0003E0
net_address(19)=$01:0003E2
net_address(19):next=$01:0003E2
net_address(19):lexical=$01:0003E3
net_address(19):i_f=$01:0003E4
net_address(19):net=$01:0003E5
net_address(19):mask=$01:0003E7
net_address(19):broadcast=$01:0003E9
net_address(2)=$01:000349
net_address(2):next=$01:000349
net_address(2):lexical=$01:00034A
net_address(2):i_f=$01:00034B
net_address(2):net=$01:00034C
net_address(2):mask=$01:00034E
net_address(2):broadcast=$01:000350
net_address(20)=$01:0003EB
net_address(20):next=$01:0003EB
net_address(20):lexical=$01:0003EC
net_address(20):i_f=$01:0003ED
net_address(20):net=$01:0003EE
net_address(20):mask=$01:0003F0
net_address(20):broadcast=$01:0003F2
net_address(21)=$01:0003F4
net_address(21):next=$01:0003F4
net_address(21):lexical=$01:0003F5
net_address(21):i_f=$01:0003F6
net_address(21):net=$01:0003F7
net_address(21):mask=$01:0003F9
net_address(21):broadcast=$01:0003FB
net_address(22)=$01:0003FD
net_address(22):next=$01:0003FD
net_address(22):lexical=$01:0003FE
net_address(22):i_f=$01:0003FF
net_address(22):net=$01:000400
net_address(22):mask=$01:000402
net_address(22):broadcast=$01:000404
net_address(23)=$01:000406
net_address(23):next=$01:000406
net_address(23):lexical=$01:000407
net_address(23):i_f=$01:000408
net_address(23):net=$01:000409
net_address(23):mask=$01:00040B
net_address(23):broadcast=$01:00040D
net_address(24)=$01:00040F
net_address(24):next=$01:00040F
net_address(24):lexical=$01:000410
net_address(24):i_f=$01:000411
net_address(24):net=$01:000412
net_address(24):mask=$01:000414
net_address(24):broadcast=$01:000416
net_address(3)=$01:000352
net_address(3):next=$01:000352
net_address(3):lexical=$01:000353
net_address(3):i_f=$01:000354
net_address(3):net=$01:000355
net_address(3):mask=$01:000357
net_address(3):broadcast=$01:000359
net_address(4)=$01:00035B
net_address(4):next=$01:00035B
net_address(4):lexical=$01:00035C
net_address(4):i_f=$01:00035D
net_address(4):net=$01:00035E
net_address(4):mask=$01:000360
net_address(4):broadcast=$01:000362
net_address(5)=$01:000364
net_address(5):next=$01:000364
net_address(5):lexical=$01:000365
net_address(5):i_f=$01:000366
net_address(5):net=$01:000367
net_address(5):mask=$01:000369
net_address(5):broadcast=$01:00036B
net_address(6)=$01:00036D
net_address(6):next=$01:00036D
net_address(6):lexical=$01:00036E
net_address(6):i_f=$01:00036F
net_address(6):net=$01:000370
net_address(6):mask=$01:000372
net_address(6):broadcast=$01:000374
net_address(7)=$01:000376
net_address(7):next=$01:000376
net_address(7):lexical=$01:000377
net_address(7):i_f=$01:000378
net_address(7):net=$01:000379
net_address(7):mask=$01:00037B
net_address(7):broadcast=$01:00037D
net_address(8)=$01:00037F
net_address(8):next=$01:00037F
net_address(8):lexical=$01:000380
net_address(8):i_f=$01:000381
net_address(8):net=$01:000382
net_address(8):mask=$01:000384
net_address(8):broadcast=$01:000386
net_address(9)=$01:000388
net_address(9):next=$01:000388
net_address(9):lexical=$01:000389
net_address(9):i_f=$01:00038A
net_address(9):net=$01:00038B
net_address(9):mask=$01:00038D
net_address(9):broadcast=$01:00038F
net_afree+=$01:00033F
net_alexical+=$01:00033E
net_alock+=$01:00033D
net_buffer_acquired=$00:000149
net_buffer_bank=$00:000121
net_buffer_banks=$00:000117
net_buffer_page=$00:000110
net_buffer_pages=$00:000108
net_buffer_request=$00:000139
net_buffers=$00:0000F9
net_disengage+=$00:000086
net_drop=$00:0000E8
net_dropx=$00:0000EE
net_free=$00:0000DB
net_free_txb=$00:0000DD
net_free_txdatagram=$00:0000F0
net_free_txdatagramx=$00:0000F4
net_pass_xcall=$00:0000F7
net_request_allowable=$00:000103
net_transfer=$00:0000DF
net_transferx=$00:0000E6
netframe=:N129:P:0:000000
netpool_initial=$00:000127
netv4=:N129:P:0:000000
network=$00:000061
network_socket=$00:00006A
networkframe=$43:000000,000003
networkframe:flag=$43:000000,000003
networkframe:frame_length=$43:000001,000003
networkframe:ll_hl=$43:000002,000003
networkframe:interface=$43:000003,000003
networkframe:protocol=$43:000004,000003
networkframe:frame=$43:000005,000003
networks=$00:000080
networks_start=$00:000040
new_dayclock=$41:003000
new_handle=$00:000546
new_large_bank=$00:000218
new_tdescriptor=$00:000480
next=$41:003005
next_page_descriptor=$41:003072
next_stem=$00:0000BA
next_tdescriptor_sp=$41:003049
nframe=$42:000000,000002
nframe:llh=$42:000000,000002
nframe:llh:loopback=$42:000000,000002
nframe:llh:loopback:af=$42:000000,000002
nframe:llh:ethernet=$42:000000,000002
nframe:llh:ethernet:to=$42:000000,000002
nframe:llh:ethernet:from=$42:000003,000002
nframe:llh:ethernet:protocol=$42:000006,000002
nframe:llh:generic=$42:000000,000002
nframe:llh:generic:address=$42:000000,000002
nframe:llh:generic:protocol=$42:000006,000002
nframe:frame_axw(1)=$42:000007,000002
nframe:frame_axw(1):bytes=$42:000007,000002
nframe:frame_axw(1):word_pointer=$42:000008,000002
nframe:frame_axw(2)=$42:000009,000002
nframe:frame_axw(2):bytes=$42:000009,000002
nframe:frame_axw(2):word_pointer=$42:00000A,000002
nframe:frame_axw(3)=$42:00000B,000002
nframe:frame_axw(3):bytes=$42:00000B,000002
nframe:frame_axw(3):word_pointer=$42:00000C,000002
nframe:stack_index=$42:00000D,000002
nframe:next_hop=$42:00000E,000002
no_handle=$00:000554
no_new_task=$00:000471
no_new_task_descriptor=$00:00046F
no_new_thread=$00:0004F3
no_new_thread_descriptor=$00:0004F1
no_path2remote=$00:000E19
no_xflag=$00:000320
normal_s=$00:000417
normal_s:to=000003,00000F
normal_s:from=000004,00000F
normal_s:chars=000005,00000F
normal_s:offset=000006,00000F
normal_s:clear_end=$00:000420
normal_s:align1=$00:000421
normal_string+=$00:00014C
not_a_handle=$00:00056A
not_highest_bank=$00:00017A
not_on_list=$00:0001E4
nothing_banked=$00:000056
nothing_gained=$00:00004D
nuflags=000004,00000F
nuroutine=000005,00000F
nuseq=000003,00000F
obytes=00000A,00000F
oclass=000009,00000F
odata=00000B,00000F
odynamic=000004,00000F
oflags=000008,00000F
oid=:N129:P:0:000000
oid_loaded=$00:0001F5
olist=000007,00000F
om=$43:000000,000003
om:words=$43:000000,000003
om:o=$43:000001,000003
om:l=$43:000002,000003
om:data=$43:000003,000003
om:flags=$43:000004,000003
om:bucket=$43:000005,000003
om:ranges=$43:000005,000003
om:range=$43:000006,000003
one_time_save_ii=$00:0006E8
online_devicep=000001,00000F
online_norun=$00:00033B
online_run=$00:00033C
online_search_app=$00:00031E
online_xqt+=$00:000149
ooid=:N129:P:0:000000
orange=00000D,00000F
orules=00000C,00000F
otext=[0027]000000
out_of_range=$00:000179
out_of_spiral=$00:000178
pages_read=$00:0000F6
part(1)=000006
part(2)=000000
part(3)=$46:0000A0
ping=$42:000000,000002
ping:h=$42:000000,000002
ping:h:type_code=$42:000000,000002
ping:h:checksum=$42:000001,000002
ping:id=$42:000002,000002
ping:sequence=$42:000003,000002
ping:data=$42:000004,000002
platform_relay=000064
platform_relay2=000065
pool=$42:000000,000002
pool:lock_cell=$42:000000,000002
pool:next=$42:000001,000002
pool:free(1)=$42:000002,000002
pool:free(2)=$42:000003,000002
pool:free(3)=$42:000004,000002
pool:free(4)=$42:000005,000002
pool:free(5)=$42:000006,000002
pool:free(6)=$42:000007,000002
pool:free(7)=$42:000008,000002
pool:free(8)=$42:000009,000002
pool:free(9)=$42:00000A,000002
pool:free(10)=$42:00000B,000002
pool:free(11)=$42:00000C,000002
pool:free(12)=$42:00000D,000002
pool:free(13)=$42:00000E,000002
pool:free(14)=$42:00000F,000002
pool:free(15)=$42:000010,000002
pool:free(16)=$42:000011,000002
pool:free(17)=$42:000012,000002
pool:free(18)=$42:000013,000002
pool:free(19)=$42:000014,000002
pool:free(20)=$42:000015,000002
pool:free(21)=$42:000016,000002
pool:free(22)=$42:000017,000002
pool:free(23)=$42:000018,000002
pool:free(24)=$42:000019,000002
pool:free(25)=$42:00001A,000002
pool:free(26)=$42:00001B,000002
pool:free(27)=$42:00001C,000002
pool:free(28)=$42:00001D,000002
pool:free(29)=$42:00001E,000002
pool:free(30)=$42:00001F,000002
pool:free(31)=$42:000020,000002
pool:free(32)=$42:000021,000002
pool:free(33)=$42:000022,000002
pool:free(34)=$42:000023,000002
pool:free(35)=$42:000024,000002
pool:free(36)=$42:000025,000002
pool:free(37)=$42:000026,000002
pool:free(38)=$42:000027,000002
pool:free(39)=$42:000028,000002
pool:free(40)=$42:000029,000002
pool:free(41)=$42:00002A,000002
pool:free(42)=$42:00002B,000002
pool:free(43)=$42:00002C,000002
pool:free(44)=$42:00002D,000002
pool:free(45)=$42:00002E,000002
pool:free(46)=$42:00002F,000002
pool:free(47)=$42:000030,000002
pool:free(48)=$42:000031,000002
pool:free(49)=$42:000032,000002
pool:free(50)=$42:000033,000002
pool:free(51)=$42:000034,000002
pool:free(52)=$42:000035,000002
pool:free(53)=$42:000036,000002
pool:free(54)=$42:000037,000002
pool:free(55)=$42:000038,000002
pool:free(56)=$42:000039,000002
pool:free(57)=$42:00003A,000002
pool:free(58)=$42:00003B,000002
pool:free(59)=$42:00003C,000002
pool:free(60)=$42:00003D,000002
pool:free(61)=$42:00003E,000002
pool:free(62)=$42:00003F,000002
pool:free(63)=$42:000040,000002
pool:free(64)=$42:000041,000002
pool:free(65)=$42:000042,000002
pool:free(66)=$42:000043,000002
pool:free(67)=$42:000044,000002
pool:free(68)=$42:000045,000002
pool:free(69)=$42:000046,000002
pool:free(70)=$42:000047,000002
pool:free(71)=$42:000048,000002
pool:free(72)=$42:000049,000002
pool:free(73)=$42:00004A,000002
pool:free(74)=$42:00004B,000002
pool:free(75)=$42:00004C,000002
pool:free(76)=$42:00004D,000002
pool:free(77)=$42:00004E,000002
pool:free(78)=$42:00004F,000002
pool:free(79)=$42:000050,000002
pool:free(80)=$42:000051,000002
pool:free(81)=$42:000052,000002
pool:free(82)=$42:000053,000002
pool:free(83)=$42:000054,000002
pool:free(84)=$42:000055,000002
pool:free(85)=$42:000056,000002
pool:free(86)=$42:000057,000002
pool:free(87)=$42:000058,000002
pool:free(88)=$42:000059,000002
pool:free(89)=$42:00005A,000002
pool:free(90)=$42:00005B,000002
pool:free(91)=$42:00005C,000002
pool:free(92)=$42:00005D,000002
pool:free(93)=$42:00005E,000002
pool:free(94)=$42:00005F,000002
pool:free(95)=$42:000060,000002
pool:free(96)=$42:000061,000002
pool:free(97)=$42:000062,000002
pool:free(98)=$42:000063,000002
pool:free(99)=$42:000064,000002
pool:free(100)=$42:000065,000002
pool:free(101)=$42:000066,000002
pool:free(102)=$42:000067,000002
pool:free(103)=$42:000068,000002
pool:free(104)=$42:000069,000002
pool:free(105)=$42:00006A,000002
pool:free(106)=$42:00006B,000002
pool:free(107)=$42:00006C,000002
pool:free(108)=$42:00006D,000002
pool:free(109)=$42:00006E,000002
pool:free(110)=$42:00006F,000002
pool:free(111)=$42:000070,000002
pool:free(112)=$42:000071,000002
pool:free(113)=$42:000072,000002
pool:free(114)=$42:000073,000002
pool:free(115)=$42:000074,000002
pool:free(116)=$42:000075,000002
pool:free(117)=$42:000076,000002
pool:free(118)=$42:000077,000002
pool:free(119)=$42:000078,000002
pool:free(120)=$42:000079,000002
pool:free(121)=$42:00007A,000002
pool:free(122)=$42:00007B,000002
pool:free(123)=$42:00007C,000002
pool:free(124)=$42:00007D,000002
pool:free(125)=$42:00007E,000002
pool:free(126)=$42:00007F,000002
pool:free(127)=$42:000080,000002
pool:free(128)=$42:000081,000002
pool:free(129)=$42:000082,000002
pool:free(130)=$42:000083,000002
pool:free(131)=$42:000084,000002
pool:free(132)=$42:000085,000002
pool:free(133)=$42:000086,000002
pool:free(134)=$42:000087,000002
pool:free(135)=$42:000088,000002
pool:free(136)=$42:000089,000002
pool:free(137)=$42:00008A,000002
pool:free(138)=$42:00008B,000002
pool:free(139)=$42:00008C,000002
pool:free(140)=$42:00008D,000002
pool:free(141)=$42:00008E,000002
pool:free(142)=$42:00008F,000002
pool:free(143)=$42:000090,000002
pool:free(144)=$42:000091,000002
pool:free(145)=$42:000092,000002
pool:free(146)=$42:000093,000002
pool:free(147)=$42:000094,000002
pool:free(148)=$42:000095,000002
pool:free(149)=$42:000096,000002
pool:free(150)=$42:000097,000002
pool:free(151)=$42:000098,000002
pool:free(152)=$42:000099,000002
pool:free(153)=$42:00009A,000002
pool:free(154)=$42:00009B,000002
pool:free(155)=$42:00009C,000002
pool:free(156)=$42:00009D,000002
pool:free(157)=$42:00009E,000002
pool:free(158)=$42:00009F,000002
pool:free(159)=$42:0000A0,000002
pool:free(160)=$42:0000A1,000002
pool:free(161)=$42:0000A2,000002
pool:free(162)=$42:0000A3,000002
pool:free(163)=$42:0000A4,000002
pool:free(164)=$42:0000A5,000002
pool:free(165)=$42:0000A6,000002
pool:free(166)=$42:0000A7,000002
pool:free(167)=$42:0000A8,000002
pool:free(168)=$42:0000A9,000002
pool:free(169)=$42:0000AA,000002
pool:free(170)=$42:0000AB,000002
pool:free(171)=$42:0000AC,000002
pool:free(172)=$42:0000AD,000002
pool:free(173)=$42:0000AE,000002
pool:free(174)=$42:0000AF,000002
pool:free(175)=$42:0000B0,000002
pool:free(176)=$42:0000B1,000002
pool:free(177)=$42:0000B2,000002
pool:free(178)=$42:0000B3,000002
pool:free(179)=$42:0000B4,000002
pool:free(180)=$42:0000B5,000002
pool:free(181)=$42:0000B6,000002
pool:free(182)=$42:0000B7,000002
pool:free(183)=$42:0000B8,000002
pool:free(184)=$42:0000B9,000002
pool:free(185)=$42:0000BA,000002
pool:free(186)=$42:0000BB,000002
pool:free(187)=$42:0000BC,000002
pool:free(188)=$42:0000BD,000002
pool:free(189)=$42:0000BE,000002
pool:free(190)=$42:0000BF,000002
pool:free(191)=$42:0000C0,000002
pool:free(192)=$42:0000C1,000002
pool:free(193)=$42:0000C2,000002
pool:free(194)=$42:0000C3,000002
pool:free(195)=$42:0000C4,000002
pool:free(196)=$42:0000C5,000002
pool:free(197)=$42:0000C6,000002
pool:free(198)=$42:0000C7,000002
pool:free(199)=$42:0000C8,000002
pool:free(200)=$42:0000C9,000002
pool:free(201)=$42:0000CA,000002
pool:free(202)=$42:0000CB,000002
pool:free(203)=$42:0000CC,000002
pool:free(204)=$42:0000CD,000002
pool:free(205)=$42:0000CE,000002
pool:free(206)=$42:0000CF,000002
pool:free(207)=$42:0000D0,000002
pool:free(208)=$42:0000D1,000002
pool:free(209)=$42:0000D2,000002
pool:free(210)=$42:0000D3,000002
pool:free(211)=$42:0000D4,000002
pool:free(212)=$42:0000D5,000002
pool:free(213)=$42:0000D6,000002
pool:free(214)=$42:0000D7,000002
pool:free(215)=$42:0000D8,000002
pool:free(216)=$42:0000D9,000002
pool:free(217)=$42:0000DA,000002
pool:free(218)=$42:0000DB,000002
pool:free(219)=$42:0000DC,000002
pool:free(220)=$42:0000DD,000002
pool:free(221)=$42:0000DE,000002
pool:free(222)=$42:0000DF,000002
pool:free(223)=$42:0000E0,000002
pool:free(224)=$42:0000E1,000002
pool:free(225)=$42:0000E2,000002
pool:free(226)=$42:0000E3,000002
pool:free(227)=$42:0000E4,000002
pool:free(228)=$42:0000E5,000002
pool:free(229)=$42:0000E6,000002
pool:free(230)=$42:0000E7,000002
pool:free(231)=$42:0000E8,000002
pool:free(232)=$42:0000E9,000002
pool:free(233)=$42:0000EA,000002
pool:free(234)=$42:0000EB,000002
pool:free(235)=$42:0000EC,000002
pool:free(236)=$42:0000ED,000002
pool:free(237)=$42:0000EE,000002
pool:free(238)=$42:0000EF,000002
pool:free(239)=$42:0000F0,000002
pool:free(240)=$42:0000F1,000002
pool:free(241)=$42:0000F2,000002
pool:free(242)=$42:0000F3,000002
pool:free(243)=$42:0000F4,000002
pool:free(244)=$42:0000F5,000002
pool:free(245)=$42:0000F6,000002
pool:free(246)=$42:0000F7,000002
pool:free(247)=$42:0000F8,000002
pool:free(248)=$42:0000F9,000002
pool:free(249)=$42:0000FA,000002
pool:free(250)=$42:0000FB,000002
pool:free(251)=$42:0000FC,000002
pool:free(252)=$42:0000FD,000002
pool:free(253)=$42:0000FE,000002
pool:free(254)=$42:0000FF,000002
pool:free(255)=$42:000100,000002
pool:free(256)=$42:000101,000002
pool:free(257)=$42:000102,000002
position?=$00:000198
printf=:N129:P:0:000000
priority_out_of_range=$00:000471
protocol_socket=$00:000A7E
q2=$00:000EBC
q2first?=$00:000EB6
q2ifoq=00009A
q2ifoq1=$00:0000B5
q2ifoq_low=$00:0000B3
q2ifree=$00:0000A3
q2ifreel=$00:0000A2
q2ifreex=$00:0000B6
q2z=$00:000EC2
qpriority=$00:0002E3
qstart
queue=$43:000000,000003
queue:head=$43:000000,000003
queue:tail=$43:000001,000003
rbuffer=$00:000D2D
rbuffer1=$00:000D68
rbuffer2!=$00:000D60
rbuffer2?=$00:000D64
rbuffer32!=$00:000D31
rbuffer32?=$00:000D5A
rbufferq=:P1:0:000075
read_handle_ii=$00:000575
read_socket_ii=$00:0005A7
read_xvector_ii=$00:0005B6
readq=$00:000EC7
readqz=$00:000ECB
rebound75=$00:0000D3
receive_socket_protocol_wrong=$00:000BEF
receive_socket_x=$00:000BF0
recv+=$00:000089
release_udgram+=$00:000087
remove_thread=$00:000235
remove_threadx=$00:000240
replicate_abt=$00:000487
requeue=$00:0002EB
resolve_socket=$00:000BA6
restart=$00:000067
restart_ei=$00:0006E4
restart_go=$00:0002A2
retrieve_netb=:P1:0:00003E
retrieve_thread=$00:00023A
rflags=000004,00000F
rlist=000003,00000F
rnolastbytes=$00:000494
rnowordpair=$00:00048B
ro=$42:000000,000002
ro:next=$42:000000,000002
ro:lexical=$42:000001,000002
ro:i_f=$42:000002,000002
ro:net=$42:000003,000002
ro:mask=$42:000005,000002
ro:next_hop=$42:000007,000002
ro:mask_log=$42:000009,000002
roifidxroutine=000005,00000F
route=:N129:P:0:000000
route_(1)=$01:00024D
route_(1):next=$01:00024D
route_(1):lexical=$01:00024E
route_(1):i_f=$01:00024F
route_(1):net=$01:000250
route_(1):mask=$01:000252
route_(1):next_hop=$01:000254
route_(1):mask_log=$01:000256
route_(10)=$01:0002A7
route_(10):next=$01:0002A7
route_(10):lexical=$01:0002A8
route_(10):i_f=$01:0002A9
route_(10):net=$01:0002AA
route_(10):mask=$01:0002AC
route_(10):next_hop=$01:0002AE
route_(10):mask_log=$01:0002B0
route_(11)=$01:0002B1
route_(11):next=$01:0002B1
route_(11):lexical=$01:0002B2
route_(11):i_f=$01:0002B3
route_(11):net=$01:0002B4
route_(11):mask=$01:0002B6
route_(11):next_hop=$01:0002B8
route_(11):mask_log=$01:0002BA
route_(12)=$01:0002BB
route_(12):next=$01:0002BB
route_(12):lexical=$01:0002BC
route_(12):i_f=$01:0002BD
route_(12):net=$01:0002BE
route_(12):mask=$01:0002C0
route_(12):next_hop=$01:0002C2
route_(12):mask_log=$01:0002C4
route_(13)=$01:0002C5
route_(13):next=$01:0002C5
route_(13):lexical=$01:0002C6
route_(13):i_f=$01:0002C7
route_(13):net=$01:0002C8
route_(13):mask=$01:0002CA
route_(13):next_hop=$01:0002CC
route_(13):mask_log=$01:0002CE
route_(14)=$01:0002CF
route_(14):next=$01:0002CF
route_(14):lexical=$01:0002D0
route_(14):i_f=$01:0002D1
route_(14):net=$01:0002D2
route_(14):mask=$01:0002D4
route_(14):next_hop=$01:0002D6
route_(14):mask_log=$01:0002D8
route_(15)=$01:0002D9
route_(15):next=$01:0002D9
route_(15):lexical=$01:0002DA
route_(15):i_f=$01:0002DB
route_(15):net=$01:0002DC
route_(15):mask=$01:0002DE
route_(15):next_hop=$01:0002E0
route_(15):mask_log=$01:0002E2
route_(16)=$01:0002E3
route_(16):next=$01:0002E3
route_(16):lexical=$01:0002E4
route_(16):i_f=$01:0002E5
route_(16):net=$01:0002E6
route_(16):mask=$01:0002E8
route_(16):next_hop=$01:0002EA
route_(16):mask_log=$01:0002EC
route_(17)=$01:0002ED
route_(17):next=$01:0002ED
route_(17):lexical=$01:0002EE
route_(17):i_f=$01:0002EF
route_(17):net=$01:0002F0
route_(17):mask=$01:0002F2
route_(17):next_hop=$01:0002F4
route_(17):mask_log=$01:0002F6
route_(18)=$01:0002F7
route_(18):next=$01:0002F7
route_(18):lexical=$01:0002F8
route_(18):i_f=$01:0002F9
route_(18):net=$01:0002FA
route_(18):mask=$01:0002FC
route_(18):next_hop=$01:0002FE
route_(18):mask_log=$01:000300
route_(19)=$01:000301
route_(19):next=$01:000301
route_(19):lexical=$01:000302
route_(19):i_f=$01:000303
route_(19):net=$01:000304
route_(19):mask=$01:000306
route_(19):next_hop=$01:000308
route_(19):mask_log=$01:00030A
route_(2)=$01:000257
route_(2):next=$01:000257
route_(2):lexical=$01:000258
route_(2):i_f=$01:000259
route_(2):net=$01:00025A
route_(2):mask=$01:00025C
route_(2):next_hop=$01:00025E
route_(2):mask_log=$01:000260
route_(20)=$01:00030B
route_(20):next=$01:00030B
route_(20):lexical=$01:00030C
route_(20):i_f=$01:00030D
route_(20):net=$01:00030E
route_(20):mask=$01:000310
route_(20):next_hop=$01:000312
route_(20):mask_log=$01:000314
route_(21)=$01:000315
route_(21):next=$01:000315
route_(21):lexical=$01:000316
route_(21):i_f=$01:000317
route_(21):net=$01:000318
route_(21):mask=$01:00031A
route_(21):next_hop=$01:00031C
route_(21):mask_log=$01:00031E
route_(22)=$01:00031F
route_(22):next=$01:00031F
route_(22):lexical=$01:000320
route_(22):i_f=$01:000321
route_(22):net=$01:000322
route_(22):mask=$01:000324
route_(22):next_hop=$01:000326
route_(22):mask_log=$01:000328
route_(23)=$01:000329
route_(23):next=$01:000329
route_(23):lexical=$01:00032A
route_(23):i_f=$01:00032B
route_(23):net=$01:00032C
route_(23):mask=$01:00032E
route_(23):next_hop=$01:000330
route_(23):mask_log=$01:000332
route_(24)=$01:000333
route_(24):next=$01:000333
route_(24):lexical=$01:000334
route_(24):i_f=$01:000335
route_(24):net=$01:000336
route_(24):mask=$01:000338
route_(24):next_hop=$01:00033A
route_(24):mask_log=$01:00033C
route_(3)=$01:000261
route_(3):next=$01:000261
route_(3):lexical=$01:000262
route_(3):i_f=$01:000263
route_(3):net=$01:000264
route_(3):mask=$01:000266
route_(3):next_hop=$01:000268
route_(3):mask_log=$01:00026A
route_(4)=$01:00026B
route_(4):next=$01:00026B
route_(4):lexical=$01:00026C
route_(4):i_f=$01:00026D
route_(4):net=$01:00026E
route_(4):mask=$01:000270
route_(4):next_hop=$01:000272
route_(4):mask_log=$01:000274
route_(5)=$01:000275
route_(5):next=$01:000275
route_(5):lexical=$01:000276
route_(5):i_f=$01:000277
route_(5):net=$01:000278
route_(5):mask=$01:00027A
route_(5):next_hop=$01:00027C
route_(5):mask_log=$01:00027E
route_(6)=$01:00027F
route_(6):next=$01:00027F
route_(6):lexical=$01:000280
route_(6):i_f=$01:000281
route_(6):net=$01:000282
route_(6):mask=$01:000284
route_(6):next_hop=$01:000286
route_(6):mask_log=$01:000288
route_(7)=$01:000289
route_(7):next=$01:000289
route_(7):lexical=$01:00028A
route_(7):i_f=$01:00028B
route_(7):net=$01:00028C
route_(7):mask=$01:00028E
route_(7):next_hop=$01:000290
route_(7):mask_log=$01:000292
route_(8)=$01:000293
route_(8):next=$01:000293
route_(8):lexical=$01:000294
route_(8):i_f=$01:000295
route_(8):net=$01:000296
route_(8):mask=$01:000298
route_(8):next_hop=$01:00029A
route_(8):mask_log=$01:00029C
route_(9)=$01:00029D
route_(9):next=$01:00029D
route_(9):lexical=$01:00029E
route_(9):i_f=$01:00029F
route_(9):net=$01:0002A0
route_(9):mask=$01:0002A2
route_(9):next_hop=$01:0002A4
route_(9):mask_log=$01:0002A6
route_config_frame=:N129:P:0:000000
route_free+=$01:00024B
route_lexical+=$01:00024C
route_list+=$01:00024A
route_outward_interface=$00:000E15
rstream_registers=000000,00000F
rstream_scan_net=[0028]000000
rstream_scana
rstream_start_net
rstream_starta
run_device_nothread=$00:0000EC
run_device_thread=$00:0000D9
run_device_wrongcore=$00:0000EC
run_start+=$00:00014A
rx2!=$00:0004C0
rx2?=$00:0004C4
rx64!=$00:0004A2
rx64?=$00:0004B4
rx8!=$00:0004B7
rx8?=$00:0004BB
rx_nocheck=$00:00049D
rx_payload=$00:00044D
rxbuf=000008,00000F
rxbytes=000009,00000F
rxcheck64!=$00:000454
rxcheck64?=$00:000479
rxcheck8!=$00:00047C
rxcheck8?=$00:000482
rxflags=00000A,00000F
rxnocheckZ=$00:0004C9
s=$42:000000,000005
s:socket_address=$42:000000,000005
s:remote_address=$42:000002,000005
s:flags=$42:000004,000005
s:udp=$42:000005,000005
s:udp:tsq=$42:000005,000005
s:udp:socket_inq=$42:000006,000005
s:udp:socket_inq:head=$42:000006,000005
s:udp:socket_inq:tail=$42:000007,000005
s:tcp=$42:000005,000005
s:tcp:tbase=$42:000005,000005
s:tcp:tcbs=$42:000006,000005
s:tcp:rxbu_p=$42:000006,000005
s:tcp:rxowner=$42:000007,000005
s:tcp:txbu_p=$42:000007,000005
safety=000018,00000F
save_BYTES=00000D,00000F
save_RDATACD=00000A,00000F
save_chain_pointer=000000,00000F
save_q=00000C,00000F
sbind=$43:000000,000003
sbind:socket_address=$43:000000,000003
sbind:remote_address=$43:000002,000003
sbind:flags=$43:000004,000003
sbind:udp=$43:000005,000003
sbind:udp:tsq=$43:000005,000003
sbind:udp:socket_inq=$43:000006,000003
sbind:udp:socket_inq:head=$43:000006,000003
sbind:udp:socket_inq:tail=$43:000007,000003
sbind:tcp=$43:000005,000003
sbind:tcp:tbase=$43:000005,000003
sbind:tcp:tcbs=$43:000006,000003
sbind:tcp:rxbu_p=$43:000006,000003
sbind:tcp:rxowner=$43:000007,000003
sbind:tcp:txbu_p=$43:000007,000003
scanf=:N129:P:0:000000
scanhex
sdepth=000000,00000F
seal32vectors=$00:000457
search_name_words=000005,00000F
search_onlinexqt=$00:00031C
search_run_namep=000006,00000F
seg$load
segment=:N129:P:0:000000
sell1=$00:000E65
sell1_list=$00:000E9F
sell1_list?=$00:000EA6
sell1_log=$00:000E9F
sell1_more=$00:000E78
sell1_probe=:N129:P:0:000000
sell1_sample(1)=$00:000E8B
sell1_sample(2)=$00:000E90
sell1_sample(3)=$00:000E95
sell1_sample(4)=$00:000E9A
sell1_u=$00:000EB4
sell1_z=$00:000EB1
send+=$00:00008A
send1byte=$00:000D28
send2bytes!=$00:000D1F
send2bytes?=$00:000D23
send32bytes!=$00:000CE4
send32bytes?=$00:000D19
sendbytepair=:P1:0:000074
sense_data+=$00:000090
sense_socket_protocol_wrong=$00:000BCD
sense_socket_x=$00:000BCE
serx=000003,00000F
set_b1=$00:000394
sflags=000019,00000F
sine192+=$00:000174
sine96+=$00:000178
slevel=000001,00000F
slist=000018,00000F
smp_activate=$00:000115
smp_ii=$00:0006EB
smp_pend=$00:000132
smp_pendu=$00:000136
snmpEnableAuthenTraps=$00:00099C
snmpEnableAuthenTraps:rw_typ_tokens_words=$00:00099C
snmpEnableAuthenTraps:o=$00:00099D
snmpEnableAuthenTraps:l=$00:00099E
snmpEnableAuthenTraps:data=$00:00099F
snmpEnableAuthenTraps:flags=$00:0009A0
snmpEnableAuthenTraps:bucket=$00:0009A1
snmpEnableAuthenTraps:ranges=$00:0009A1
snmpEnableAuthenTraps:range=$00:0009A2
snmpEnableAuthenTraps:advance=$00:0009A2
snmpEnableAuthenTraps:netstring=:N129:P:0:000000
snmpEnableAuthenTraps:i=$01:0005D0
snmpInASNParseErrors=$00:000918
snmpInASNParseErrors:rw_typ_tokens_words=$00:000918
snmpInASNParseErrors:o=$00:000919
snmpInASNParseErrors:l=$00:00091A
snmpInASNParseErrors:data=$00:00091B
snmpInASNParseErrors:flags=$00:00091C
snmpInASNParseErrors:bucket=$00:00091D
snmpInASNParseErrors:ranges=$00:00091D
snmpInASNParseErrors:range=$00:00091E
snmpInASNParseErrors:advance=$00:00091E
snmpInASNParseErrors:netstring=:N129:P:0:000000
snmpInASNParseErrors:i=$01:0005A4
snmpInBadCommunityNames=$00:00090C
snmpInBadCommunityNames:rw_typ_tokens_words=$00:00090C
snmpInBadCommunityNames:o=$00:00090D
snmpInBadCommunityNames:l=$00:00090E
snmpInBadCommunityNames:data=$00:00090F
snmpInBadCommunityNames:flags=$00:000910
snmpInBadCommunityNames:bucket=$00:000911
snmpInBadCommunityNames:ranges=$00:000911
snmpInBadCommunityNames:range=$00:000912
snmpInBadCommunityNames:advance=$00:000912
snmpInBadCommunityNames:netstring=:N129:P:0:000000
snmpInBadCommunityNames:i=$01:0005A0
snmpInBadCommunityUses=$00:000912
snmpInBadCommunityUses:rw_typ_tokens_words=$00:000912
snmpInBadCommunityUses:o=$00:000913
snmpInBadCommunityUses:l=$00:000914
snmpInBadCommunityUses:data=$00:000915
snmpInBadCommunityUses:flags=$00:000916
snmpInBadCommunityUses:bucket=$00:000917
snmpInBadCommunityUses:ranges=$00:000917
snmpInBadCommunityUses:range=$00:000918
snmpInBadCommunityUses:advance=$00:000918
snmpInBadCommunityUses:netstring=:N129:P:0:000000
snmpInBadCommunityUses:i=$01:0005A2
snmpInBadValues=$00:00092A
snmpInBadValues:rw_typ_tokens_words=$00:00092A
snmpInBadValues:o=$00:00092B
snmpInBadValues:l=$00:00092C
snmpInBadValues:data=$00:00092D
snmpInBadValues:flags=$00:00092E
snmpInBadValues:bucket=$00:00092F
snmpInBadValues:ranges=$00:00092F
snmpInBadValues:range=$00:000930
snmpInBadValues:advance=$00:000930
snmpInBadValues:netstring=:N129:P:0:000000
snmpInBadValues:i=$01:0005AA
snmpInBadVersions=$00:000906
snmpInBadVersions:rw_typ_tokens_words=$00:000906
snmpInBadVersions:o=$00:000907
snmpInBadVersions:l=$00:000908
snmpInBadVersions:data=$00:000909
snmpInBadVersions:flags=$00:00090A
snmpInBadVersions:bucket=$00:00090B
snmpInBadVersions:ranges=$00:00090B
snmpInBadVersions:range=$00:00090C
snmpInBadVersions:advance=$00:00090C
snmpInBadVersions:netstring=:N129:P:0:000000
snmpInBadVersions:i=$01:00059E
snmpInGenErrs=$00:000936
snmpInGenErrs:rw_typ_tokens_words=$00:000936
snmpInGenErrs:o=$00:000937
snmpInGenErrs:l=$00:000938
snmpInGenErrs:data=$00:000939
snmpInGenErrs:flags=$00:00093A
snmpInGenErrs:bucket=$00:00093B
snmpInGenErrs:ranges=$00:00093B
snmpInGenErrs:range=$00:00093C
snmpInGenErrs:advance=$00:00093C
snmpInGenErrs:netstring=:N129:P:0:000000
snmpInGenErrs:i=$01:0005AE
snmpInGetNexts=$00:00094E
snmpInGetNexts:rw_typ_tokens_words=$00:00094E
snmpInGetNexts:o=$00:00094F
snmpInGetNexts:l=$00:000950
snmpInGetNexts:data=$00:000951
snmpInGetNexts:flags=$00:000952
snmpInGetNexts:bucket=$00:000953
snmpInGetNexts:ranges=$00:000953
snmpInGetNexts:range=$00:000954
snmpInGetNexts:advance=$00:000954
snmpInGetNexts:netstring=:N129:P:0:000000
snmpInGetNexts:i=$01:0005B6
snmpInGetRequests=$00:000948
snmpInGetRequests:rw_typ_tokens_words=$00:000948
snmpInGetRequests:o=$00:000949
snmpInGetRequests:l=$00:00094A
snmpInGetRequests:data=$00:00094B
snmpInGetRequests:flags=$00:00094C
snmpInGetRequests:bucket=$00:00094D
snmpInGetRequests:ranges=$00:00094D
snmpInGetRequests:range=$00:00094E
snmpInGetRequests:advance=$00:00094E
snmpInGetRequests:netstring=:N129:P:0:000000
snmpInGetRequests:i=$01:0005B4
snmpInGetResponses=$00:00095A
snmpInGetResponses:rw_typ_tokens_words=$00:00095A
snmpInGetResponses:o=$00:00095B
snmpInGetResponses:l=$00:00095C
snmpInGetResponses:data=$00:00095D
snmpInGetResponses:flags=$00:00095E
snmpInGetResponses:bucket=$00:00095F
snmpInGetResponses:ranges=$00:00095F
snmpInGetResponses:range=$00:000960
snmpInGetResponses:advance=$00:000960
snmpInGetResponses:netstring=:N129:P:0:000000
snmpInGetResponses:i=$01:0005BA
snmpInNoSuchNames=$00:000924
snmpInNoSuchNames:rw_typ_tokens_words=$00:000924
snmpInNoSuchNames:o=$00:000925
snmpInNoSuchNames:l=$00:000926
snmpInNoSuchNames:data=$00:000927
snmpInNoSuchNames:flags=$00:000928
snmpInNoSuchNames:bucket=$00:000929
snmpInNoSuchNames:ranges=$00:000929
snmpInNoSuchNames:range=$00:00092A
snmpInNoSuchNames:advance=$00:00092A
snmpInNoSuchNames:netstring=:N129:P:0:000000
snmpInNoSuchNames:i=$01:0005A8
snmpInPkts=$00:0008FA
snmpInPkts:rw_typ_tokens_words=$00:0008FA
snmpInPkts:o=$00:0008FB
snmpInPkts:l=$00:0008FC
snmpInPkts:data=$00:0008FD
snmpInPkts:flags=$00:0008FE
snmpInPkts:bucket=$00:0008FF
snmpInPkts:ranges=$00:0008FF
snmpInPkts:range=$00:000900
snmpInPkts:advance=$00:000900
snmpInPkts:netstring=:N129:P:0:000000
snmpInPkts:i=$01:00059A
snmpInReadOnlys=$00:000930
snmpInReadOnlys:rw_typ_tokens_words=$00:000930
snmpInReadOnlys:o=$00:000931
snmpInReadOnlys:l=$00:000932
snmpInReadOnlys:data=$00:000933
snmpInReadOnlys:flags=$00:000934
snmpInReadOnlys:bucket=$00:000935
snmpInReadOnlys:ranges=$00:000935
snmpInReadOnlys:range=$00:000936
snmpInReadOnlys:advance=$00:000936
snmpInReadOnlys:netstring=:N129:P:0:000000
snmpInReadOnlys:i=$01:0005AC
snmpInSetRequests=$00:000954
snmpInSetRequests:rw_typ_tokens_words=$00:000954
snmpInSetRequests:o=$00:000955
snmpInSetRequests:l=$00:000956
snmpInSetRequests:data=$00:000957
snmpInSetRequests:flags=$00:000958
snmpInSetRequests:bucket=$00:000959
snmpInSetRequests:ranges=$00:000959
snmpInSetRequests:range=$00:00095A
snmpInSetRequests:advance=$00:00095A
snmpInSetRequests:netstring=:N129:P:0:000000
snmpInSetRequests:i=$01:0005B8
snmpInTooBigs=$00:00091E
snmpInTooBigs:rw_typ_tokens_words=$00:00091E
snmpInTooBigs:o=$00:00091F
snmpInTooBigs:l=$00:000920
snmpInTooBigs:data=$00:000921
snmpInTooBigs:flags=$00:000922
snmpInTooBigs:bucket=$00:000923
snmpInTooBigs:ranges=$00:000923
snmpInTooBigs:range=$00:000924
snmpInTooBigs:advance=$00:000924
snmpInTooBigs:netstring=:N129:P:0:000000
snmpInTooBigs:i=$01:0005A6
snmpInTotalReqVars=$00:00093C
snmpInTotalReqVars:rw_typ_tokens_words=$00:00093C
snmpInTotalReqVars:o=$00:00093D
snmpInTotalReqVars:l=$00:00093E
snmpInTotalReqVars:data=$00:00093F
snmpInTotalReqVars:flags=$00:000940
snmpInTotalReqVars:bucket=$00:000941
snmpInTotalReqVars:ranges=$00:000941
snmpInTotalReqVars:range=$00:000942
snmpInTotalReqVars:advance=$00:000942
snmpInTotalReqVars:netstring=:N129:P:0:000000
snmpInTotalReqVars:i=$01:0005B0
snmpInTotalSetVars=$00:000942
snmpInTotalSetVars:rw_typ_tokens_words=$00:000942
snmpInTotalSetVars:o=$00:000943
snmpInTotalSetVars:l=$00:000944
snmpInTotalSetVars:data=$00:000945
snmpInTotalSetVars:flags=$00:000946
snmpInTotalSetVars:bucket=$00:000947
snmpInTotalSetVars:ranges=$00:000947
snmpInTotalSetVars:range=$00:000948
snmpInTotalSetVars:advance=$00:000948
snmpInTotalSetVars:netstring=:N129:P:0:000000
snmpInTotalSetVars:i=$01:0005B2
snmpInTraps=$00:000960
snmpInTraps:rw_typ_tokens_words=$00:000960
snmpInTraps:o=$00:000961
snmpInTraps:l=$00:000962
snmpInTraps:data=$00:000963
snmpInTraps:flags=$00:000964
snmpInTraps:bucket=$00:000965
snmpInTraps:ranges=$00:000965
snmpInTraps:range=$00:000966
snmpInTraps:advance=$00:000966
snmpInTraps:netstring=:N129:P:0:000000
snmpInTraps:i=$01:0005BC
snmpOutBadValues=$00:000972
snmpOutBadValues:rw_typ_tokens_words=$00:000972
snmpOutBadValues:o=$00:000973
snmpOutBadValues:l=$00:000974
snmpOutBadValues:data=$00:000975
snmpOutBadValues:flags=$00:000976
snmpOutBadValues:bucket=$00:000977
snmpOutBadValues:ranges=$00:000977
snmpOutBadValues:range=$00:000978
snmpOutBadValues:advance=$00:000978
snmpOutBadValues:netstring=:N129:P:0:000000
snmpOutBadValues:i=$01:0005C2
snmpOutGenErrs=$00:000978
snmpOutGenErrs:rw_typ_tokens_words=$00:000978
snmpOutGenErrs:o=$00:000979
snmpOutGenErrs:l=$00:00097A
snmpOutGenErrs:data=$00:00097B
snmpOutGenErrs:flags=$00:00097C
snmpOutGenErrs:bucket=$00:00097D
snmpOutGenErrs:ranges=$00:00097D
snmpOutGenErrs:range=$00:00097E
snmpOutGenErrs:advance=$00:00097E
snmpOutGenErrs:netstring=:N129:P:0:000000
snmpOutGenErrs:i=$01:0005C4
snmpOutGetNexts=$00:000984
snmpOutGetNexts:rw_typ_tokens_words=$00:000984
snmpOutGetNexts:o=$00:000985
snmpOutGetNexts:l=$00:000986
snmpOutGetNexts:data=$00:000987
snmpOutGetNexts:flags=$00:000988
snmpOutGetNexts:bucket=$00:000989
snmpOutGetNexts:ranges=$00:000989
snmpOutGetNexts:range=$00:00098A
snmpOutGetNexts:advance=$00:00098A
snmpOutGetNexts:netstring=:N129:P:0:000000
snmpOutGetNexts:i=$01:0005C8
snmpOutGetRequests=$00:00097E
snmpOutGetRequests:rw_typ_tokens_words=$00:00097E
snmpOutGetRequests:o=$00:00097F
snmpOutGetRequests:l=$00:000980
snmpOutGetRequests:data=$00:000981
snmpOutGetRequests:flags=$00:000982
snmpOutGetRequests:bucket=$00:000983
snmpOutGetRequests:ranges=$00:000983
snmpOutGetRequests:range=$00:000984
snmpOutGetRequests:advance=$00:000984
snmpOutGetRequests:netstring=:N129:P:0:000000
snmpOutGetRequests:i=$01:0005C6
snmpOutGetResponses=$00:000990
snmpOutGetResponses:rw_typ_tokens_words=$00:000990
snmpOutGetResponses:o=$00:000991
snmpOutGetResponses:l=$00:000992
snmpOutGetResponses:data=$00:000993
snmpOutGetResponses:flags=$00:000994
snmpOutGetResponses:bucket=$00:000995
snmpOutGetResponses:ranges=$00:000995
snmpOutGetResponses:range=$00:000996
snmpOutGetResponses:advance=$00:000996
snmpOutGetResponses:netstring=:N129:P:0:000000
snmpOutGetResponses:i=$01:0005CC
snmpOutNoSuchNames=$00:00096C
snmpOutNoSuchNames:rw_typ_tokens_words=$00:00096C
snmpOutNoSuchNames:o=$00:00096D
snmpOutNoSuchNames:l=$00:00096E
snmpOutNoSuchNames:data=$00:00096F
snmpOutNoSuchNames:flags=$00:000970
snmpOutNoSuchNames:bucket=$00:000971
snmpOutNoSuchNames:ranges=$00:000971
snmpOutNoSuchNames:range=$00:000972
snmpOutNoSuchNames:advance=$00:000972
snmpOutNoSuchNames:netstring=:N129:P:0:000000
snmpOutNoSuchNames:i=$01:0005C0
snmpOutPkts=$00:000900
snmpOutPkts:rw_typ_tokens_words=$00:000900
snmpOutPkts:o=$00:000901
snmpOutPkts:l=$00:000902
snmpOutPkts:data=$00:000903
snmpOutPkts:flags=$00:000904
snmpOutPkts:bucket=$00:000905
snmpOutPkts:ranges=$00:000905
snmpOutPkts:range=$00:000906
snmpOutPkts:advance=$00:000906
snmpOutPkts:netstring=:N129:P:0:000000
snmpOutPkts:i=$01:00059C
snmpOutSetRequests=$00:00098A
snmpOutSetRequests:rw_typ_tokens_words=$00:00098A
snmpOutSetRequests:o=$00:00098B
snmpOutSetRequests:l=$00:00098C
snmpOutSetRequests:data=$00:00098D
snmpOutSetRequests:flags=$00:00098E
snmpOutSetRequests:bucket=$00:00098F
snmpOutSetRequests:ranges=$00:00098F
snmpOutSetRequests:range=$00:000990
snmpOutSetRequests:advance=$00:000990
snmpOutSetRequests:netstring=:N129:P:0:000000
snmpOutSetRequests:i=$01:0005CA
snmpOutTooBigs=$00:000966
snmpOutTooBigs:rw_typ_tokens_words=$00:000966
snmpOutTooBigs:o=$00:000967
snmpOutTooBigs:l=$00:000968
snmpOutTooBigs:data=$00:000969
snmpOutTooBigs:flags=$00:00096A
snmpOutTooBigs:bucket=$00:00096B
snmpOutTooBigs:ranges=$00:00096B
snmpOutTooBigs:range=$00:00096C
snmpOutTooBigs:advance=$00:00096C
snmpOutTooBigs:netstring=:N129:P:0:000000
snmpOutTooBigs:i=$01:0005BE
snmpOutTraps=$00:000996
snmpOutTraps:rw_typ_tokens_words=$00:000996
snmpOutTraps:o=$00:000997
snmpOutTraps:l=$00:000998
snmpOutTraps:data=$00:000999
snmpOutTraps:flags=$00:00099A
snmpOutTraps:bucket=$00:00099B
snmpOutTraps:ranges=$00:00099B
snmpOutTraps:range=$00:00099C
snmpOutTraps:advance=$00:00099C
snmpOutTraps:netstring=:N129:P:0:000000
snmpOutTraps:i=$01:0005CE
snmp_agent+=$00:000146
snmp_agent_launch=$00:000AAA
snmp_rseq=000008,00000F
snmp_tferq=$03:000236
socket=:N129:P:0:000000
socket_call_udp_txaw=$00:000C1E
socket_out_of_range=$00:0005AC
socket_protocol_wrong=$00:000BBC
socket_receive=$00:000BD0
socket_receive_tcp?=$00:000BDF
socket_rx_established=$00:000BED
socket_rx_readable=$00:000BED
socket_send=$00:000BF4
socket_sense=$00:000BBE
socket_sense_tcp?=$00:000BC7
socket_tcp?=$00:000BB4
socket_transmit_tcp?=$00:000C22
socket_udp_fail5=$00:000C20
socket_unresolved=$00:000BBD
softwareLoopback=000018
sorx=000007,00000F
sotx=000007,00000F
span_mount=$00:000356
span_mounts=$00:00033F
span_mountx=$00:00035C
spawn=$00:00036E
spawn_ii=$00:00006C
spiral=$00:00016D
spiral_again=$00:000160
sprintf=:N129:P:0:000000
square192+=$00:00017C
square_root192+=$00:00017D
srequest=$00:000072
sscanf=:N129:P:0:000000
start=$00:000082
startpagex=$46:000000,00000E
startpx=000000,00000F
startup_osocket_encoding=$01:00042D
startups=$00:000361
startups:USTDOUT=000012
startups:initial=$00:000361
startups:startupz=$00:000366
startups:read_startups=$00:000367
startups:socko=000001,00000F
startups:config_retry=000000,00000F
startups:config?=$00:00037B
startups:local_address=$00:000389
startups:no_stdout=$00:000393
startups:run=$00:000396
startups:script_path=000007,00000F
startups:file_position=000002,00000F
startups:siobloc=000001,00000F
startups:zdepth=000000,00000F
startups:no_run=$00:0003B1
startups:runfile_scan=$00:0003B4
startups:depth=00000A,00000F
startups:share_iobloc=00000B,00000F
startups:fposition=00000C,00000F
startups:save_fspp=000000,00000F
startups:search_name=$46:000000,00000E
startups:text=$46:000050,00000E
startups:read_script=$00:0003C3
startups:text_command=$00:0003E9
startups:runfile_breakpoint=$00:0003F2
startups:action_command=$00:0003F9
startups:share_ioblocp=000003,00000F
startups:textw=000004,00000F
startups:searchp=000005,00000F
startups:textp=000006,00000F
startups:new_process=000000,00000F
startups:action_running?=$00:000410
startups:action_concluded=$00:000414
startups:action_skip=$00:000414
stderr=000002,,000005
stdin=000000,,000005
stdout=000001,,000005
stem(1)=$41:003050
stem(2)=$41:003054
stem(3)=$41:003058
stem(4)=$41:00305C
stem(5)=$41:003060
stem(6)=$41:003064
stem(7)=$41:003068
stem(8)=$41:00306C
stem_link=$00:0000B5
storage_block_idxa_ii=$00:000668
storage_block_idxb_ii=$00:00066F
store_upacket=$00:0003B7
strail=$00:0002B7
stril=$00:0002AE
strilw+=$00:0002B1
subagent+=$00:000147
subagent?+=$00:000148
subagent_cancel=$00:000D8C
subagent_insert=$00:000D75
subagent_ithread=$03:00042A
subagent_lookup=$00:000D79
subagent_point=$00:000D8F
subagent_running!=$00:000D8E
subagent_running?=$00:000D7E
switch_fp_guard_ii=$00:0005F8
switch_lock_cell=$41:003047
switch_select=$00:00030F
symbol_scan=[0018]000000
sysContact=$00:0005E6
sysContact:rw_typ_tokens_words=$00:0005E6
sysContact:o=$00:0005E7
sysContact:l=$00:0005E8
sysContact:data=$00:0005E9
sysContact:flags=$00:0005EA
sysContact:bucket=$00:0005EB
sysContact:ranges=$00:0005EB
sysContact:advance=$00:0005EC
sysContact:netstring=:N129:P:0:000000
sysContact:s=$01:0004EB
sysDescr=$00:0005D4
sysDescr:rw_typ_tokens_words=$00:0005D4
sysDescr:o=$00:0005D5
sysDescr:l=$00:0005D6
sysDescr:data=$00:0005D7
sysDescr:flags=$00:0005D8
sysDescr:bucket=$00:0005D9
sysDescr:ranges=$00:0005D9
sysDescr:advance=$00:0005DA
sysDescr:netstring=:N129:P:0:000000
sysDescr:s=$01:0004E2
sysLocation=$00:0005F2
sysLocation:rw_typ_tokens_words=$00:0005F2
sysLocation:o=$00:0005F3
sysLocation:l=$00:0005F4
sysLocation:data=$00:0005F5
sysLocation:flags=$00:0005F6
sysLocation:bucket=$00:0005F7
sysLocation:ranges=$00:0005F7
sysLocation:advance=$00:0005F8
sysLocation:netstring=:N129:P:0:000000
sysLocation:s=$01:0004F3
sysName=$00:0005EC
sysName:rw_typ_tokens_words=$00:0005EC
sysName:o=$00:0005ED
sysName:l=$00:0005EE
sysName:data=$00:0005EF
sysName:flags=$00:0005F0
sysName:bucket=$00:0005F1
sysName:ranges=$00:0005F1
sysName:advance=$00:0005F2
sysName:netstring=:N129:P:0:000000
sysName:s=$01:0004F1
sysObjectID=$00:0005DA
sysObjectID:rw_typ_tokens_words=$00:0005DA
sysObjectID:o=$00:0005DB
sysObjectID:l=$00:0005DC
sysObjectID:data=$00:0005DD
sysObjectID:flags=$00:0005DE
sysObjectID:bucket=$00:0005DF
sysObjectID:ranges=$00:0005DF
sysObjectID:advance=$00:0005E0
sysObjectID:netstring=:N129:P:0:000000
sysObjectID:oo=$01:0004EA
sysServices=$00:0005F8
sysServices:rw_typ_tokens_words=$00:0005F8
sysServices:o=$00:0005F9
sysServices:l=$00:0005FA
sysServices:data=$00:0005FB
sysServices:flags=$00:0005FC
sysServices:bucket=$00:0005FD
sysServices:ranges=$00:0005FD
sysServices:range=$00:0005FE
sysServices:advance=$00:0005FE
sysServices:netstring=:N129:P:0:000000
sysServices:i=$01:0004F6
sysUpTime=$00:0005E0
sysUpTime:rw_typ_tokens_words=$00:0005E0
sysUpTime:o=$00:0005E1
sysUpTime:l=$00:0005E2
sysUpTime:data=$00:0005E3
sysUpTime:flags=$00:0005E4
sysUpTime:bucket=$00:0005E5
sysUpTime:ranges=$00:0005E5
sysUpTime:range=$00:0005E6
sysUpTime:advance=$00:0005E6
sysUpTime:netstring=:N129:P:0:000000
sys_info=$00:000EC0
sysinfo+=$00:00015E
t_ibuffer=$00:0002A5
table_id=000006,00000F
taflags=000004,00000F
tag_ii=$00:0006C2
tag_ii_user_refp=$00:0006CC
tag_iiw=$00:0006CA
tag_iiz=$00:0006D1
take_any=$00:0001F7
take_any_bank=$00:0001F6
take_bank=$00:0001FC
takt=$03:000002
tanflags=000004,00000F
tangent192+=$00:000176
tangent96+=$00:00017A
tanrflags=000004,00000F
tanroutine=000005,00000F
tanrroutine=000005,00000F
tanrseq=000003,00000F
tanseq=000003,00000F
tapflags=000004,00000F
taprflags=000004,00000F
taproutine=000005,00000F
taprroutine=000005,00000F
taprseq=000003,00000F
tapseq=000003,00000F
taroutine=000005,00000F
taseq=000003,00000F
tbank=:N129:P:0:000000
tco_total_i=$01:0004CF
tco_total_o=$01:0004C8
tco_total_o:along=$01:0004C8
tco_total_o:data=$01:0004C9
tco_total_o:down=$01:0004C9
tco_total_o:seq=$01:0004CA
tco_total_o:type=$01:0004CB
tco_total_o:bytes=$01:0004CC
tco_total_o:flags=$01:0004CD
tco_total_o:bucket=$01:0004CE
tco_total_o:ranges=$01:0004CE
tco_total_o:range=$01:0004CF
tconnection_p=000000,00000F
tcp4_closed?=$00:0005BC
tcp4_construct_connections_bank=$00:000643
tcp4_construct_x=$00:00065B
tcp4_established!=$00:000598
tcp4_flags_weighed=$00:0005EB
tcp4_free_block=$00:0005C2
tcp4_free_no_mib_line=$00:0005CD
tcp4_globaltime!=$00:0005B3
tcp4_globaltime?=$00:0005B5
tcp4_high_volume=$00:000577
tcp4_list_processed=$00:0005D8
tcp4_locate_next_connection=$00:0005CF
tcp4_located_next_connection=$00:0005D1
tcp4_mark_time=$00:0005B9
tcp4_most_states=$00:0005A6
tcp4_net_free_txdatagram=$00:000954
tcp4_net_free_txdatagram_no_action=$00:00095A
tcp4_new_traffic?=$00:0005A0
tcp4_outstanding=$00:0005DB
tcp4_outstanding_later=$00:0005FB
tcp4_outstanding_next=$00:0005DD
tcp4_outstanding_release=$00:0005F7
tcp4_process_list=$00:00058F
tcp4_reset_dq=$00:00094E
tcp4_reset_dq_lx=$00:00094D
tcp4_reset_dqx=$00:000953
tcp4_retransmit1=$00:0005FF
tcp4_retransmit_next=$00:000602
tcp4_retransmit_rewind=$00:00060C
tcp4_retransmitted=$00:000621
tcp4_routine=$00:000577
tcp4_rxaction=$00:00095B
tcp4_rxaction:connection=000004,00000F
tcp4_rxaction:ACK_AWAITED=000003,00000F
tcp4_rxaction:received_seq=000001,00000F
tcp4_rxaction:save_fp=000000,00000F
tcp4_rxaction:tcp_reset_dq_lx=$00:000969
tcp4_rxaction:tcp_accept_fail2=$00:00096B
tcp4_rxaction:tcp4_accept=$00:00096D
tcp4_rxaction:tcp_connection_located=$00:000971
tcp4_rxaction:tcp_synsent?=$00:000982
tcp4_rxaction:tcp_no2ndsyn=$00:000982
tcp4_rxaction:tcp_compare_forward=$00:000996
tcp4_rxaction:tc_no_problem_p=$00:00099B
tcp4_rxaction:tcp_established=$00:0009B7
tcp4_rxaction:tcp_closewait=$00:0009B7
tcp4_rxaction:tcp_tx_segments_acked?=$00:0009B7
tcp4_rxaction:tcp_rx_in_range?=$00:0009B9
tcp4_rxaction:tcp_place_in_stream=$00:0009BD
tcp4_rxaction:tcp_rx_exact_sequence=$00:0009D2
tcp4_rxaction:tcp_lastack=$00:0009E0
tcp4_rxaction:tcp_lastack2closed=$00:0009E6
tcp4_rxaction:tcp_rx_payload?=$00:0009E9
tcp4_rxaction:tcp_rx_payload=$00:0009EC
tcp4_rxaction:tcp_rx_rechain=$00:0009FC
tcp4_rxaction:tcp_ack_point=$00:000A0D
tcp4_rxaction:tcp_rx_above_ack=$00:000A12
tcp4_rxaction:tcp_rx_already_acked=$00:000A1D
tcp4_rxaction:tcp_rx_above_range=$00:000A21
tcp4_rxaction:tcp_rx_ack_nopayload=$00:000A21
tcp4_rxaction:tcp_finwait1=$00:000A22
tcp4_rxaction:tcp_closing=$00:000A2C
tcp4_rxaction:tcp_finwait1_acked?=$00:000A2F
tcp4_rxaction:tcp_finwait1tofinwait2=$00:000A32
tcp4_rxaction:tcp_close2timewait=$00:000A35
tcp4_rxaction:tcp_finwait2=$00:000A39
tcp4_rxaction:tcp_timewait=$00:000A42
tcp4_rxaction:tcp_synreceived=$00:000A48
tcp4_rxaction:tcp_syn_ack_acked=$00:000A4B
tcp4_rxaction:tcp_ripdown_reset=$00:000A50
tcp4_rxaction:tcp_ripdown_silently=$00:000A5A
tcp4_rxaction:tcp_deletetcb=$00:000A63
tcp4_rxaction:tcp_closed=$00:000A65
tcp4_rxaction:tcp_synsent=$00:000A66
tcp4_rxaction:tcp_synsent1=$00:000A69
tcp4_rxaction:tcp_ack=$00:000A76
tcp4_rxaction:tcp_stepover_response=$00:000A78
tcp4_rxaction:tcp4xreact=$00:000A7A
tcp4_service=$00:000578
tcp4_service_connection_list=$00:00058B
tcp4_service_next_connection=$00:000591
tcp4_state?=$00:0005BC
tcp4_synreceived?=$00:0005A3
tcp4_synsent?=$00:0005AF
tcp4_zhash_chain=$00:00064D
tcp4x=$00:00058A
tcpActiveOpens=$00:0007E6
tcpActiveOpens:rw_typ_tokens_words=$00:0007E6
tcpActiveOpens:o=$00:0007E7
tcpActiveOpens:l=$00:0007E8
tcpActiveOpens:data=$00:0007E9
tcpActiveOpens:flags=$00:0007EA
tcpActiveOpens:bucket=$00:0007EB
tcpActiveOpens:ranges=$00:0007EB
tcpActiveOpens:range=$00:0007EC
tcpActiveOpens:advance=$00:0007EC
tcpActiveOpens:netstring=:N129:P:0:000000
tcpActiveOpens:i=$01:000556
tcpAddRelinquish=$00:000846
tcpAddRelinquish:rw_typ_tokens_words=$00:000846
tcpAddRelinquish:o=$00:000847
tcpAddRelinquish:l=$00:000848
tcpAddRelinquish:data=$00:000849
tcpAddRelinquish:flags=$00:00084A
tcpAddRelinquish:bucket=$00:00084B
tcpAddRelinquish:ranges=$00:00084B
tcpAddRelinquish:range=$00:00084C
tcpAddRelinquish:advance=$00:00084C
tcpAddRelinquish:netstring=:N129:P:0:000000
tcpAddRelinquish:i=$01:00056A
tcpAddWait=$00:000840
tcpAddWait:rw_typ_tokens_words=$00:000840
tcpAddWait:o=$00:000841
tcpAddWait:l=$00:000842
tcpAddWait:data=$00:000843
tcpAddWait:flags=$00:000844
tcpAddWait:bucket=$00:000845
tcpAddWait:ranges=$00:000845
tcpAddWait:range=$00:000846
tcpAddWait:advance=$00:000846
tcpAddWait:netstring=:N129:P:0:000000
tcpAddWait:i=$01:000568
tcpAttemptFails=$00:0007F2
tcpAttemptFails:rw_typ_tokens_words=$00:0007F2
tcpAttemptFails:o=$00:0007F3
tcpAttemptFails:l=$00:0007F4
tcpAttemptFails:data=$00:0007F5
tcpAttemptFails:flags=$00:0007F6
tcpAttemptFails:bucket=$00:0007F7
tcpAttemptFails:ranges=$00:0007F7
tcpAttemptFails:range=$00:0007F8
tcpAttemptFails:advance=$00:0007F8
tcpAttemptFails:netstring=:N129:P:0:000000
tcpAttemptFails:i=$01:00055A
tcpConnLocalAddress=$00:00081C
tcpConnLocalAddress:rw_typ_tokens_words=$00:00081C
tcpConnLocalAddress:o=$00:00081D
tcpConnLocalAddress:l=$00:00081E
tcpConnLocalAddress:data=$00:00081F
tcpConnLocalAddress:flags=$00:000820
tcpConnLocalAddress:bucket=$00:000821
tcpConnLocalAddress:ranges=$00:000821
tcpConnLocalAddress:range=$00:000822
tcpConnLocalAddress:advance=$00:000822
tcpConnLocalAddress:netstring=:N129:P:0:000000
tcpConnLocalPort=$00:000822
tcpConnLocalPort:rw_typ_tokens_words=$00:000822
tcpConnLocalPort:o=$00:000823
tcpConnLocalPort:l=$00:000824
tcpConnLocalPort:data=$00:000825
tcpConnLocalPort:flags=$00:000826
tcpConnLocalPort:bucket=$00:000827
tcpConnLocalPort:ranges=$00:000827
tcpConnLocalPort:range=$00:000828
tcpConnLocalPort:advance=$00:000828
tcpConnLocalPort:netstring=:N129:P:0:000000
tcpConnRemAddress=$00:000828
tcpConnRemAddress:rw_typ_tokens_words=$00:000828
tcpConnRemAddress:o=$00:000829
tcpConnRemAddress:l=$00:00082A
tcpConnRemAddress:data=$00:00082B
tcpConnRemAddress:flags=$00:00082C
tcpConnRemAddress:bucket=$00:00082D
tcpConnRemAddress:ranges=$00:00082D
tcpConnRemAddress:range=$00:00082E
tcpConnRemAddress:advance=$00:00082E
tcpConnRemAddress:netstring=:N129:P:0:000000
tcpConnRemPort=$00:00082E
tcpConnRemPort:rw_typ_tokens_words=$00:00082E
tcpConnRemPort:o=$00:00082F
tcpConnRemPort:l=$00:000830
tcpConnRemPort:data=$00:000831
tcpConnRemPort:flags=$00:000832
tcpConnRemPort:bucket=$00:000833
tcpConnRemPort:ranges=$00:000833
tcpConnRemPort:range=$00:000834
tcpConnRemPort:advance=$00:000834
tcpConnRemPort:netstring=:N129:P:0:000000
tcpConnState=$00:000816
tcpConnState:rw_typ_tokens_words=$00:000816
tcpConnState:o=$00:000817
tcpConnState:l=$00:000818
tcpConnState:data=$00:000819
tcpConnState:flags=$00:00081A
tcpConnState:bucket=$00:00081B
tcpConnState:ranges=$00:00081B
tcpConnState:range=$00:00081C
tcpConnState:advance=$00:00081C
tcpConnState:netstring=:N129:P:0:000000
tcpCurrEstab=$00:0007FE
tcpCurrEstab:rw_typ_tokens_words=$00:0007FE
tcpCurrEstab:o=$00:0007FF
tcpCurrEstab:l=$00:000800
tcpCurrEstab:data=$00:000801
tcpCurrEstab:flags=$00:000802
tcpCurrEstab:bucket=$00:000803
tcpCurrEstab:ranges=$00:000803
tcpCurrEstab:range=$00:000804
tcpCurrEstab:advance=$00:000804
tcpCurrEstab:netstring=:N129:P:0:000000
tcpDupDrops=$00:000852
tcpDupDrops:rw_typ_tokens_words=$00:000852
tcpDupDrops:o=$00:000853
tcpDupDrops:l=$00:000854
tcpDupDrops:data=$00:000855
tcpDupDrops:flags=$00:000856
tcpDupDrops:bucket=$00:000857
tcpDupDrops:ranges=$00:000857
tcpDupDrops:range=$00:000858
tcpDupDrops:advance=$00:000858
tcpDupDrops:netstring=:N129:P:0:000000
tcpDupDrops:i=$01:00056E
tcpEstabResets=$00:0007F8
tcpEstabResets:rw_typ_tokens_words=$00:0007F8
tcpEstabResets:o=$00:0007F9
tcpEstabResets:l=$00:0007FA
tcpEstabResets:data=$00:0007FB
tcpEstabResets:flags=$00:0007FC
tcpEstabResets:bucket=$00:0007FD
tcpEstabResets:ranges=$00:0007FD
tcpEstabResets:range=$00:0007FE
tcpEstabResets:advance=$00:0007FE
tcpEstabResets:netstring=:N129:P:0:000000
tcpEstabResets:i=$01:00055C
tcpInDrops=$00:00084C
tcpInDrops:rw_typ_tokens_words=$00:00084C
tcpInDrops:o=$00:00084D
tcpInDrops:l=$00:00084E
tcpInDrops:data=$00:00084F
tcpInDrops:flags=$00:000850
tcpInDrops:bucket=$00:000851
tcpInDrops:ranges=$00:000851
tcpInDrops:range=$00:000852
tcpInDrops:advance=$00:000852
tcpInDrops:netstring=:N129:P:0:000000
tcpInDrops:i=$01:00056C
tcpInErrs=$00:000834
tcpInErrs:rw_typ_tokens_words=$00:000834
tcpInErrs:o=$00:000835
tcpInErrs:l=$00:000836
tcpInErrs:data=$00:000837
tcpInErrs:flags=$00:000838
tcpInErrs:bucket=$00:000839
tcpInErrs:ranges=$00:000839
tcpInErrs:range=$00:00083A
tcpInErrs:advance=$00:00083A
tcpInErrs:netstring=:N129:P:0:000000
tcpInErrs:i=$01:000564
tcpInSegs=$00:000804
tcpInSegs:rw_typ_tokens_words=$00:000804
tcpInSegs:o=$00:000805
tcpInSegs:l=$00:000806
tcpInSegs:data=$00:000807
tcpInSegs:flags=$00:000808
tcpInSegs:bucket=$00:000809
tcpInSegs:ranges=$00:000809
tcpInSegs:range=$00:00080A
tcpInSegs:advance=$00:00080A
tcpInSegs:netstring=:N129:P:0:000000
tcpInSegs:i=$01:00055E
tcpMaxConn=$00:0007E0
tcpMaxConn:rw_typ_tokens_words=$00:0007E0
tcpMaxConn:o=$00:0007E1
tcpMaxConn:l=$00:0007E2
tcpMaxConn:data=$00:0007E3
tcpMaxConn:flags=$00:0007E4
tcpMaxConn:bucket=$00:0007E5
tcpMaxConn:ranges=$00:0007E5
tcpMaxConn:range=$00:0007E6
tcpMaxConn:advance=$00:0007E6
tcpMaxConn:netstring=:N129:P:0:000000
tcpMaxConn:i=$01:000554
tcpOutAckDrops=$00:000858
tcpOutAckDrops:rw_typ_tokens_words=$00:000858
tcpOutAckDrops:o=$00:000859
tcpOutAckDrops:l=$00:00085A
tcpOutAckDrops:data=$00:00085B
tcpOutAckDrops:flags=$00:00085C
tcpOutAckDrops:bucket=$00:00085D
tcpOutAckDrops:ranges=$00:00085D
tcpOutAckDrops:range=$00:00085E
tcpOutAckDrops:advance=$00:00085E
tcpOutAckDrops:netstring=:N129:P:0:000000
tcpOutAckDrops:i=$01:000570
tcpOutRsts=$00:00083A
tcpOutRsts:rw_typ_tokens_words=$00:00083A
tcpOutRsts:o=$00:00083B
tcpOutRsts:l=$00:00083C
tcpOutRsts:data=$00:00083D
tcpOutRsts:flags=$00:00083E
tcpOutRsts:bucket=$00:00083F
tcpOutRsts:ranges=$00:00083F
tcpOutRsts:range=$00:000840
tcpOutRsts:advance=$00:000840
tcpOutRsts:netstring=:N129:P:0:000000
tcpOutRsts:i=$01:000566
tcpOutSegs=$00:00080A
tcpOutSegs:rw_typ_tokens_words=$00:00080A
tcpOutSegs:o=$00:00080B
tcpOutSegs:l=$00:00080C
tcpOutSegs:data=$00:00080D
tcpOutSegs:flags=$00:00080E
tcpOutSegs:bucket=$00:00080F
tcpOutSegs:ranges=$00:00080F
tcpOutSegs:range=$00:000810
tcpOutSegs:advance=$00:000810
tcpOutSegs:netstring=:N129:P:0:000000
tcpOutSegs:i=$01:000560
tcpPassiveOpens=$00:0007EC
tcpPassiveOpens:rw_typ_tokens_words=$00:0007EC
tcpPassiveOpens:o=$00:0007ED
tcpPassiveOpens:l=$00:0007EE
tcpPassiveOpens:data=$00:0007EF
tcpPassiveOpens:flags=$00:0007F0
tcpPassiveOpens:bucket=$00:0007F1
tcpPassiveOpens:ranges=$00:0007F1
tcpPassiveOpens:range=$00:0007F2
tcpPassiveOpens:advance=$00:0007F2
tcpPassiveOpens:netstring=:N129:P:0:000000
tcpPassiveOpens:i=$01:000558
tcpRetransSegs=$00:000810
tcpRetransSegs:rw_typ_tokens_words=$00:000810
tcpRetransSegs:o=$00:000811
tcpRetransSegs:l=$00:000812
tcpRetransSegs:data=$00:000813
tcpRetransSegs:flags=$00:000814
tcpRetransSegs:bucket=$00:000815
tcpRetransSegs:ranges=$00:000815
tcpRetransSegs:range=$00:000816
tcpRetransSegs:advance=$00:000816
tcpRetransSegs:netstring=:N129:P:0:000000
tcpRetransSegs:i=$01:000562
tcpRtoAlgorithm=$00:0007CE
tcpRtoAlgorithm:rw_typ_tokens_words=$00:0007CE
tcpRtoAlgorithm:o=$00:0007CF
tcpRtoAlgorithm:l=$00:0007D0
tcpRtoAlgorithm:data=$00:0007D1
tcpRtoAlgorithm:flags=$00:0007D2
tcpRtoAlgorithm:bucket=$00:0007D3
tcpRtoAlgorithm:ranges=$00:0007D3
tcpRtoAlgorithm:range=$00:0007D4
tcpRtoAlgorithm:advance=$00:0007D4
tcpRtoAlgorithm:netstring=:N129:P:0:000000
tcpRtoAlgorithm:i=$01:000551
tcpRtoMax=$00:0007DA
tcpRtoMax:rw_typ_tokens_words=$00:0007DA
tcpRtoMax:o=$00:0007DB
tcpRtoMax:l=$00:0007DC
tcpRtoMax:data=$00:0007DD
tcpRtoMax:flags=$00:0007DE
tcpRtoMax:bucket=$00:0007DF
tcpRtoMax:ranges=$00:0007DF
tcpRtoMax:range=$00:0007E0
tcpRtoMax:advance=$00:0007E0
tcpRtoMax:netstring=:N129:P:0:000000
tcpRtoMax:i=$01:000553
tcpRtoMin=$00:0007D4
tcpRtoMin:rw_typ_tokens_words=$00:0007D4
tcpRtoMin:o=$00:0007D5
tcpRtoMin:l=$00:0007D6
tcpRtoMin:data=$00:0007D7
tcpRtoMin:flags=$00:0007D8
tcpRtoMin:bucket=$00:0007D9
tcpRtoMin:ranges=$00:0007D9
tcpRtoMin:range=$00:0007DA
tcpRtoMin:advance=$00:0007DA
tcpRtoMin:netstring=:N129:P:0:000000
tcpRtoMin:i=$01:000552
tcp_2nd_list=$01:000421
tcp_accept+=$00:00008D
tcp_ack_dropped=$00:0007EB
tcp_ack_fin=$00:00008E
tcp_ackq_started=$00:0007E6
tcp_add=$00:000C31
tcp_add:__x=$00:000C37
tcp_add:tcpa=$00:000C3A
tcp_add:caller_fp=000005,00000F
tcp_add:socket_call_flags=000004,00000F
tcp_add:mss=000003,00000F
tcp_add:lookaside=000002,00000F
tcp_add:outstanding=000001,00000F
tcp_add:requested=000000,00000F
tcp_add:add=$00:000C47
tcp_add:transfer=$00:000C59
tcp_add:add_words=$00:000C69
tcp_add:push?=$00:000C6C
tcp_add:release=$00:000C72
tcp_add:no_output=$00:000C78
tcp_add:add_x=$00:000C79
tcp_add:add_z=$00:000C7E
tcp_add:segment_transmit=$00:000C7F
tcp_add:insert_byte=$00:000C9A
tcp_add:buffer=$00:000CA2
tcp_add:new_segment=$00:000CA9
tcp_add:request=$00:000CAB
tcp_add:new_segment_request=$00:000CB0
tcp_add:request_maximum_segment_buffer=$00:000CB7
tcp_add:no_segment=$00:000CC4
tcp_add:segment=$00:000CD0
tcp_add:drop_request_closed=$00:000CD2
tcp_add:drop_request_zero=$00:000CD9
tcp_add_anomaly=$00:0006CE
tcp_add_connection=$00:000680
tcp_add_incoming_defaults=$00:0006B6
tcp_add_timer1=$00:000949
tcp_addx+=$00:0000B2
tcp_agent_add=$00:00025E
tcp_agent_add_new=$00:000457
tcp_agent_established=$00:000265
tcp_agent_free=$00:00025F
tcp_agent_neta=$00:000261
tcp_agent_port=$00:000262
tcp_agent_remote_neta=$00:000263
tcp_agent_remote_port=$00:000264
tcp_agent_state=$00:000260
tcp_auto_accept=$00:00065C
tcp_award_new_window=$00:0007AE
tcp_award_window=$00:0007A1
tcp_check_connection=$00:0006F2
tcp_compare_local=$00:0006FB
tcp_compare_remote=$00:000701
tcp_connection=:N129:P:0:000000
tcp_connection_made=$00:00068F
tcp_deflect_frame_safe=$00:000778
tcp_e0_accept=$00:00067D
tcp_e1_accept=$00:00067E
tcp_e2_accept=$00:00067E
tcp_escape=$00:00073B
tcp_escape_error=$00:00073A
tcp_event1_acknowledged?=$00:000933
tcp_free=$00:00092D
tcp_free_block_found=$00:00068D
tcp_free_rxtx=$00:000624
tcp_free_tx=$00:000930
tcp_freerxq=$00:000633
tcp_freerxq:qtuple=000000,00000F
tcp_freerxq:sample=$00:000634
tcp_freerxq:clear=$00:000639
tcp_freetxq=$00:00063B
tcp_freetxq:qtuple=000000,00000F
tcp_freetxq:sample=$00:00063C
tcp_freetxq:clear=$00:000641
tcp_hash_connect=$00:0008FA
tcp_hash_connection+=$00:0000AF
tcp_hash_fold=:N129:P:0:000000
tcp_hash_localsocket+=$00:0000AE
tcp_hashlocal=$00:0008FC
tcp_hashremote=$00:000905
tcp_hv_accept=$00:00066F
tcp_iquick=$00:000725
tcp_keep_mss=$00:0006B1
tcp_locate_connection=$00:0006E0
tcp_log_reset=$00:0006D3
tcp_log_rx_error=$00:00072E
tcp_lsegment_noport=$01:000420
tcp_message_segment_i=$00:000789
tcp_mib=$03:0024D4
tcp_mib_chain=$01:0004AD
tcp_mib_free=$01:0004AE
tcp_mib_high=$01:0004AF
tcp_mib_oneta=$01:0004B7
tcp_mib_oneta:along=$01:0004B7
tcp_mib_oneta:data=$01:0004B8
tcp_mib_oneta:down=$01:0004B8
tcp_mib_oneta:seq=$01:0004B9
tcp_mib_oneta:type=$01:0004BA
tcp_mib_oneta:bytes=$01:0004BB
tcp_mib_oneta:flags=$01:0004BC
tcp_mib_oneta:bucket=$01:0004BD
tcp_mib_oneta:ranges=$01:0004BD
tcp_mib_oneta:range=$01:0004BE
tcp_mib_oport=$01:0004BE
tcp_mib_oport:along=$01:0004BE
tcp_mib_oport:data=$01:0004BF
tcp_mib_oport:down=$01:0004BF
tcp_mib_oport:seq=$01:0004C0
tcp_mib_oport:type=$01:0004C1
tcp_mib_oport:bytes=$01:0004C2
tcp_mib_oport:flags=$01:0004C3
tcp_mib_oport:bucket=$01:0004C4
tcp_mib_oport:ranges=$01:0004C4
tcp_mib_oport:range=$01:0004C5
tcp_mib_ostat=$01:0004B0
tcp_mib_ostat:along=$01:0004B0
tcp_mib_ostat:data=$01:0004B1
tcp_mib_ostat:down=$01:0004B1
tcp_mib_ostat:seq=$01:0004B2
tcp_mib_ostat:type=$01:0004B3
tcp_mib_ostat:bytes=$01:0004B4
tcp_mib_ostat:flags=$01:0004B5
tcp_mib_ostat:bucket=$01:0004B6
tcp_mib_ostat:ranges=$01:0004B6
tcp_mib_ostat:range=$01:0004B7
tcp_mib_xnet=$01:0004C6
tcp_mib_xstate=$01:0004C5
tcp_no_2nd_list=$00:00058A
tcp_no_new_connection=$00:0006A3
tcp_nobuffer=$00:0008BE
tcp_nobuffer_shield=$00:000CDF
tcp_noresetbuffer=$00:000833
tcp_options_complete=$00:0006CF
tcp_qthru=$00:000728
tcp_rbuffer=$00:000D6C
tcp_rbuffer_complete=$00:000DA0
tcp_rbuffer_free=$00:000D8C
tcp_rbuffer_next=$00:000D6E
tcp_rbuffer_x=$00:000D94
tcp_rbuffer_y=$00:000DAF
tcp_rbuffer_z=$00:000DAD
tcp_read=$00:000DA6
tcp_read_disaster=$00:000D91
tcp_read_rxq=$00:0008CD
tcp_read_txq=$00:0008E1
tcp_read_words=$00:000D89
tcp_readtransfer=$00:000D7A
tcp_refuse=$00:0006DC
tcp_reject=$00:000802
tcp_release_rxline+=$00:0000AD
tcp_reset=$00:000834
tcp_reset_deflect=$00:000767
tcp_respond_fin_ack=$00:000785
tcp_respond_syn_ack=$00:000780
tcp_restart_timer1=$00:000948
tcp_restart_timer2=$00:000937
tcp_ripdown=$00:0006D8
tcp_rsegment=$00:0008EB
tcp_rx+=$00:0000B0
tcp_rx_error=$00:000738
tcp_rxbu_error=$00:000733
tcp_rxq=$00:000708
tcp_rxqexact=$00:000711
tcp_rxqlong=$00:00073F
tcp_scan_mss=$00:0006AC
tcp_scan_next_option=$00:0006A6
tcp_scan_next_option?=$00:0006B4
tcp_scan_option2=$00:0006B3
tcp_scan_options=$00:0006A4
tcp_seek=$00:0006F6
tcp_send_ack=$00:000839
tcp_send_i=$00:000788
tcp_send_on_window=$00:0007B1
tcp_send_on_window_next=$00:0007BD
tcp_send_option!=$00:0008A6
tcp_send_option?=$00:0008AC
tcp_send_options=$00:0008A2
tcp_send_syn=$00:00077B
tcp_sendq=$00:00083C
tcp_sendq2=$00:00083D
tcp_sent_all=$00:0007E8
tcp_sent_possible=$00:0007E8
tcp_service_2nd_list=$00:000580
tcp_shield_buffer=$00:000CDA
tcp_socket=$00:000927
tcp_socketx=$00:00092C
tcp_start_timewait=$00:000946
tcp_startbuffer=$00:000851
tcp_startbuffer:addresses=00000D,00000F
tcp_startbuffer:option_string=000005,00000F
tcp_startbuffer:save_rkxy=000001,00000F
tcp_startbuffer:axw_p=000000,00000F
tcp_startbuffer:tcp_sendno_options=$00:00088C
tcp_startbuffer:txp_nostart=$00:00089C
tcp_states_beat=$01:000422
tcp_states_step=$00:00056F
tcp_store_timer1=$00:00094B
tcp_stretch_timer2=$00:00093D
tcp_supercount=$01:000424
tcp_superpages=$01:000423
tcp_tbloc_found=$00:000706
tcp_textline_not_there=$00:0008F8
tcp_textline_release=$00:0008F4
tcp_tx+=$00:0000B1
tcp_txbuffer=$00:0008B4
tcp_txbuffer_initial=$00:0008B8
tcp_txbuffer_optional=$00:0008B5
tcp_txbufferx=$00:0008AF
tcp_window
tcp_write_hvsocket_rxq=$00:0008CB
tcp_write_rxq=$00:0008BF
tcp_write_txq=$00:0008D7
tcp_xaccept=$00:000676
tcp_xclose=$00:000917
tcp_xclosewait=$00:00091F
tcp_xdisco=$00:000911
tcp_xfin_upsequence=$00:000923
tcp_xfinwait1=$00:00091A
tcp_xmit=$00:0007F0
tcp_xsegment=$00:0008F3
tcp_zsegment=$00:0008EF
tcpagent_add=$00:000452
tcpagent_add_assigned=$00:00045D
tcpagent_add_nop=$00:000469
tcpagent_add_x=$00:00046E
tcpagent_compress_address=$00:00051F
tcpagent_compress_tokens=$00:000517
tcpagent_established=$00:000529
tcpagent_established:accumulate=$00:000533
tcpagent_established:nextp=$00:000537
tcpagent_established:nextc=$00:000539
tcpagent_established:upcount=$00:00053F
tcpagent_established:next=$00:000542
tcpagent_established:along=$00:000544
tcpagent_find=$00:0004E0
tcpagent_free=$00:00046F
tcpagent_free_nop=$00:00047D
tcpagent_free_search=$00:000472
tcpagent_neta=$00:0004A9
tcpagent_neta_remote=$00:0004C0
tcpagent_noneta=$00:0004B3
tcpagent_noneta_remote=$00:0004CA
tcpagent_noport=$00:0004BF
tcpagent_noport_remote=$00:0004D6
tcpagent_nostate=$00:000491
tcpagent_port=$00:0004B4
tcpagent_port_remote=$00:0004CB
tcpagent_runout=$00:0004DD
tcpagent_search=$00:000507
tcpagent_search_as_high=$00:0004F3
tcpagent_search_exact=$00:0004D7
tcpagent_search_forward=$00:0004E3
tcpagent_search_higher=$00:0004FA
tcpagent_search_next=$00:000508
tcpagent_search_on=$00:0004EA
tcpagent_state=$00:000480
tcpagent_state!=$00:00048E
tcpagent_state_along=$00:000489
tcpagent_test_local=$00:00050D
tcpagent_test_remote=$00:000513
tcpagent_write_address=$00:00049D
tcpagent_write_oid_tokens=$00:000492
tcpagent_zerof=$00:0004EE
tcpq=$01:00041E
tcpq:head=$01:00041E
tcpq:tail=$01:00041F
tcpr+=$00:0000AB
tcpz+=$00:0000AC
tdescriptor=$00:000475
tdescriptor_free=$00:00024F
tdescriptor_freex=$00:00025D
tdescriptor_high_index=$41:00304A
tdescriptor_sp_plus=$00:00025B
telnet=$00:000140
telnet_align_trunk=$00:00023C
telnet_atest=$00:0002E1
telnet_command=$00:000182
telnet_configuration=$00:000285
telnet_configure=$00:000279
telnet_console=$00:00017F
telnet_count=$00:0002AF
telnet_counted_name=$00:0002B5
telnet_display_quartets=$00:000291
telnet_echo=$00:0001F4
telnet_help=$00:0001C4
telnet_i=$00:000141
telnet_ilist=$00:00024D
telnet_insert=$00:000282
telnet_istring=$03:000056
telnet_library_speedtest=$00:0001D8
telnet_memory=$00:0001F9
telnet_mirror_trunk=$00:00023F
telnet_name_display=$00:0002A6
telnet_name_words=$03:00008F
telnet_name_z=$00:0002AD
telnet_norun=$00:000232
telnet_pop2hex=:P1:0:0000B2
telnet_print_dayclock=$00:0001CE
telnet_prompt=$00:0001C7
telnet_quicktimeout=$00:0001F0
telnet_repeats=$03:00008C
telnet_respond=$00:00027A
telnet_run=$00:000211
telnet_run_binary=$00:00021F
telnet_run_name=$03:000056
telnet_run_report=$00:000234
telnet_smp=$00:000242
telnet_start=$00:000148
telnet_start_time=$03:00008D
telnet_state?=$00:000171
telnet_stream16_respond=$00:00027D
telnet_test_repeat=$00:0001DC
telnet_text_command=$00:00018B
telnet_thread1=$00:00028B
telnet_thread_display=$00:0002BD
telnet_thread_name=$00:000297
telnet_thread_name_clear=$00:0002A3
telnet_thread_not_active=$00:000276
telnet_thread_term=$00:000247
telnet_threadlist=$00:000288
telnet_threads=$00:0001BD
telnet_threadx=$00:00028F
telnet_tpaside=$03:00000A
telnet_traffic?=$00:000176
telnet_tstate?=$00:000157
telnet_ufirst=$00:000270
telnet_uireqs=$00:000253
telnet_uireqx=$00:000272
telnet_uirnext=$00:000256
telnet_ulast?=$00:00026C
telnet_walk=$00:00015F
telnet_walk_on=$00:00015E
telnet_x=$00:00017C
telnet_z=$00:00017E
telnet_zero_timer1=$00:0001CA
telnet_zout=$00:000249
telnet_zstart=$00:000147
teraframe=$00:000706
teraframe:device_k=$43:000000,000003
teraframe:device_k:ts_cell=$43:000000,000003
teraframe:device_k:index=$43:000001,000003
teraframe:canister=$43:000000,000003
teraframe:canister:next=$43:000000,000003
teraframe:canister:free(1)=$43:000001,000003
teraframe:array_device_claim_ii=$00:000706
teraframe:claim?=$00:00070D
teraframe:zchain=$00:00071D
teraframe:index_constructed=$00:000726
teraframe:claim_new=$00:000734
teraframe:return_buffer=$00:00073D
teraframe:key_free=$00:000740
teraframe:claim_next=$00:000742
teraframe:deliver=$00:000750
teraframe:array_device_free=$00:000754
teraframe:shave=$00:000770
teraframe:alongout=$00:00077A
teraframe:free_list_insert=$00:000784
teraframe:alongin=$00:000792
teraframe:into_chain=$00:000798
teraframe:chained_already=$00:00079A
teraframe:not_in_stack=$00:00079A
teraframe:stack_freed=$00:00079A
teraframe:not_in_free_chain=$00:00079A
teraframe:bad_descriptor=$00:00079C
test_if=$00:000093
textoa
tflags=000004,00000F
thandle=$03:000006
thats_enough_interfaces=$00:000086
this_if=$42:000000,000002
this_if:id=$42:000000,000002
this_if:flags=$42:000001,000002
this_if:address_list=$42:000002,000002
this_if:type=$42:000003,000002
this_if:mtu=$42:000004,000002
this_if:state=$42:000005,000002
this_if:bitrate=$42:000006,000002
this_if:physa=$42:000008,000002
this_if:lastchange=$42:00000A,000002
this_if:inoctets=$42:00000C,000002
this_if:outoctets=$42:00000E,000002
this_if:inpackets=$42:000010,000002
this_if:outpackets=$42:000012,000002
this_if:inmcast=$42:000014,000002
this_if:outmcast=$42:000016,000002
this_if:indrops=$42:000018,000002
this_if:outdrops=$42:00001A,000002
this_if:inerrs=$42:00001C,000002
this_if:outerrs=$42:00001E,000002
this_if:inoproto=$42:000020,000002
this_if:oqlen=$42:000022,000002
this_if:oqremaining=$42:000023,000002
this_if:threshold_time=$42:000024,000002
this_if:description_bytes=$42:000025,000002
this_if:description=$42:000026,000002
this_if:IF_DESCRIPTION_BYTES=000000
this_if:q2=$42:00002E,000002
this_if:lock_cell_q1=$42:00002F,000002
this_if:lock_cell_q2=$42:000030,000002
this_if:oq=$42:000031,000002
this_if:oq:head=$42:000031,000002
this_if:oq:tail=$42:000032,000002
this_if:oq2=$42:000033,000002
this_if:oq2:head=$42:000033,000002
this_if:oq2:head:bx=$42:000033,000002
this_if:oq2:head:offset=$42:000034,000002
this_if:oq2:tail=$42:000035,000002
this_if:oq2:tail:bx=$42:000035,000002
this_if:oq2:tail:offset=$42:000036,000002
this_if:initial=$42:000037,000002
this_if:rxtx_interface=$42:000038,000002
this_if:class=$42:000039,000002
this_if:llhl=$42:00003A,000002
this_if:write_llh=$42:00003B,000002
this_if:arp_rx=$42:00003C,000002
this_if:arp_tx=$42:00003D,000002
this_if:arp_resolve=$42:00003E,000002
this_if:xarp=$42:00003F,000002
this_if:ift1=$42:000040,000002
this_if:ift1:rx_restart=$42:000040,000002
this_if:ift1:rx_limit=$42:000041,000002
this_if:ift1:tx_restart=$42:000042,000002
this_if:ift1:tx_limit=$42:000043,000002
this_if:ift1:base_rx=$42:000044,000002
this_if:ift1:rx_cursor=$42:000045,000002
this_if:ift1:base_tx=$42:000046,000002
this_if:ift1:tx_cursor=$42:000047,000002
this_if:sif=$42:000040,000002
thread=$00:0004AA
thread_actual?=$00:000649
thread_current?=$00:000658
thread_final=$00:0004F4
thread_halt=$00:000126
thread_not_actual=$00:000657
thread_state_ii=$00:00065F
thread_state_stopped=$00:000665
thread_stopped=$00:00065E
threads_down=$00:000243
threads_lock_cell=$41:003004
threads_next_down=$00:000245
threads_threshold=$00:000652
threadx_down=$00:00024E
ticko=$01:000446
timer_check=$00:000537
timer_chex=$00:00053D
tlist=$43:000000,000003
tlist:link=$43:000000,000003
tlist:free=$43:000001,000003
tlist:top=$43:000002,000003
tlist:climit=$43:000003,000003
tlist:rxbu_p=$43:000003,000003
tlist:txbu_p=$43:000004,000003
tlist:txchain=$43:000005,000003
tlist:flags=$43:000006,000003
tlist:rxowner=$43:000007,000003
tlist:chain(1)=$43:000008,000003
tlist:chain(2)=$43:000009,000003
tlist:chain(3)=$43:00000A,000003
tlist:chain(4)=$43:00000B,000003
tlist:chain(5)=$43:00000C,000003
tlist:chain(6)=$43:00000D,000003
tlist:chain(7)=$43:00000E,000003
tlist:chain(8)=$43:00000F,000003
tlist:chain(9)=$43:000010,000003
tlist:chain(10)=$43:000011,000003
tlist:chain(11)=$43:000012,000003
tlist:chain(12)=$43:000013,000003
tlist:chain(13)=$43:000014,000003
tlist:chain(14)=$43:000015,000003
tlist:chain(15)=$43:000016,000003
tlist:chain(16)=$43:000017,000003
tlist:chain(17)=$43:000018,000003
tlist:chain(18)=$43:000019,000003
tlist:chain(19)=$43:00001A,000003
tlist:chain(20)=$43:00001B,000003
tlist:chain(21)=$43:00001C,000003
tlist:chain(22)=$43:00001D,000003
tlist:chain(23)=$43:00001E,000003
tlist:chain(24)=$43:00001F,000003
tlist:chain(25)=$43:000020,000003
tlist:chain(26)=$43:000021,000003
tlist:chain(27)=$43:000022,000003
tlist:chain(28)=$43:000023,000003
tlist:chain(29)=$43:000024,000003
tlist:chain(30)=$43:000025,000003
tlist:chain(31)=$43:000026,000003
tlist:chain(32)=$43:000027,000003
tlist:connection_block(1)=$43:000028,000003
tlist:connection_block(1):next=$43:000028,000003
tlist:connection_block(1):automatic_fin=$43:000029,000003
tlist:connection_block(1):state=$43:000029,000003
tlist:connection_block(1):mss=$43:00002A,000003
tlist:connection_block(1):tsq=$43:00002B,000003
tlist:connection_block(1):timer(1)=$43:00002C,000003
tlist:connection_block(1):timer(2)=$43:00002D,000003
tlist:connection_block(1):socket_address=$43:00002E,000003
tlist:connection_block(1):remote_address=$43:000030,000003
tlist:connection_block(1):remote_ack_window=$43:000032,000003
tlist:connection_block(1):sequence_ackx=$43:000034,000003
tlist:connection_block(1):ack_window=$43:000036,000003
tlist:connection_block(1):receiveq=$43:000038,000003
tlist:connection_block(1):receiveq:head=$43:000038,000003
tlist:connection_block(1):receiveq:tail=$43:000039,000003
tlist:connection_block(1):deferq=$43:00003A,000003
tlist:connection_block(1):deferq:head=$43:00003A,000003
tlist:connection_block(1):deferq:tail=$43:00003B,000003
tlist:connection_block(1):q4window=$43:00003C,000003
tlist:connection_block(1):q4window:head=$43:00003C,000003
tlist:connection_block(1):q4window:tail=$43:00003D,000003
tlist:connection_block(1):q4ack=$43:00003E,000003
tlist:connection_block(1):q4ack:head=$43:00003E,000003
tlist:connection_block(1):q4ack:tail=$43:00003F,000003
tlist:connection_block(2)=$43:000040,000003
tlist:connection_block(2):next=$43:000040,000003
tlist:connection_block(2):automatic_fin=$43:000041,000003
tlist:connection_block(2):state=$43:000041,000003
tlist:connection_block(2):mss=$43:000042,000003
tlist:connection_block(2):tsq=$43:000043,000003
tlist:connection_block(2):timer(1)=$43:000044,000003
tlist:connection_block(2):timer(2)=$43:000045,000003
tlist:connection_block(2):socket_address=$43:000046,000003
tlist:connection_block(2):remote_address=$43:000048,000003
tlist:connection_block(2):remote_ack_window=$43:00004A,000003
tlist:connection_block(2):sequence_ackx=$43:00004C,000003
tlist:connection_block(2):ack_window=$43:00004E,000003
tlist:connection_block(2):receiveq=$43:000050,000003
tlist:connection_block(2):receiveq:head=$43:000050,000003
tlist:connection_block(2):receiveq:tail=$43:000051,000003
tlist:connection_block(2):deferq=$43:000052,000003
tlist:connection_block(2):deferq:head=$43:000052,000003
tlist:connection_block(2):deferq:tail=$43:000053,000003
tlist:connection_block(2):q4window=$43:000054,000003
tlist:connection_block(2):q4window:head=$43:000054,000003
tlist:connection_block(2):q4window:tail=$43:000055,000003
tlist:connection_block(2):q4ack=$43:000056,000003
tlist:connection_block(2):q4ack:head=$43:000056,000003
tlist:connection_block(2):q4ack:tail=$43:000057,000003
tlsoc_va=$03:000008
tn_add=$00:000301
tn_div=$00:00030D
tn_edit=$00:000310
tn_editline=$03:00003E
tn_help=$03:00000B
tn_help_bytes=000098
tn_left=000006,00000F
tn_mul=$00:000309
tn_negadd=$00:000305
tn_operate=$00:0002F5
tn_operation=000000,00000F
tn_ostringp=000010,00000F
tn_right=000002,00000F
tn_tight_repeat=000001,00000F
tnet_callstring
tnetbound=$03:000007
tnext=000006,00000F
token_net=[0029]000000
tokena
tq_align(1)=$41:00304B
tq_align(2)=$41:00304C
tq_align(3)=$41:00304D
tq_align(4)=$41:00304E
tq_align(5)=$41:00304F
tra_remote_ack=000000,00000F
transfer=$42:000000,000002
transfer:sourcep=$42:000000,000002
transfer:destp=$42:000001,000002
transfer:seq=$42:000002,000002
transfer:ack=$42:000004,000002
transfer:hl_code=$42:000006,000002
transfer:window=$42:000007,000002
transfer:checksum=$42:000008,000002
transfer:urgent=$42:000009,000002
transfer:mss_option=$42:00000A,000002
transmission=$46:000000,000002
transmission:next=$46:000000,000002
transmission:automatic_fin=$46:000001,000002
transmission:state=$46:000001,000002
transmission:mss=$46:000002,000002
transmission:tsq=$46:000003,000002
transmission:timer(1)=$46:000004,000002
transmission:timer(2)=$46:000005,000002
transmission:socket_address=$46:000006,000002
transmission:remote_address=$46:000008,000002
transmission:remote_ack_window=$46:00000A,000002
transmission:sequence_ackx=$46:00000C,000002
transmission:ack_window=$46:00000E,000002
transmission:receiveq=$46:000010,000002
transmission:receiveq:head=$46:000010,000002
transmission:receiveq:tail=$46:000011,000002
transmission:deferq=$46:000012,000002
transmission:deferq:head=$46:000012,000002
transmission:deferq:tail=$46:000013,000002
transmission:q4window=$46:000014,000002
transmission:q4window:head=$46:000014,000002
transmission:q4window:tail=$46:000015,000002
transmission:q4ack=$46:000016,000002
transmission:q4ack:head=$46:000016,000002
transmission:q4ack:tail=$46:000017,000002
transmission_p=000002,00000F
transmit_socket_protocol_wrong=$00:000C2B
transmit_socket_x=$00:000C2C
trig192=$00:0007FB
trig192:RECIPROCAL_READY=000001
trig192:_RADIAN_FACTOR=3FFFFB8EFA351294E9C8AE0EC5F66E9485C4D900B8
trig192:_PASSES=000012
trig192:sine=$00:0007FB
trig192:sine:angle=000007,00000F
trig192:sine:u_rkxy=000000,00000F
trig192:cosine=$00:000802
trig192:cosine:angle=000007,00000F
trig192:cosine:u_rkxy=000000,00000F
trig192:tangent=$00:000813
trig192:tangent:angle=00000F,00000F
trig192:tangent:cosine=000004,00000F
trig192:tangent:u_rkxy=000000,00000F
trig192:cotangent=$00:00082A
trig192:cotangent:angle=00000F,00000F
trig192:cotangent:sine=000004,00000F
trig192:cotangent:u_rkxy=000000,00000F
trig192:_sine=$00:000841
trig192:anglep=000012,00000F
trig192:power=000008,00000F
trig192:square=000000,00000F
trig192:_NEXT_FACTORIAL=:P1:0:0000BB
trig192:_NEXT_POWER=:P1:0:0000BC
trig192:_poly=$00:000868
trig192:_nomial=$00:000885
trig192:_radian_factor=$00:00089E
trig192:trim=$00:0008A6
trig192:trimmed=$00:0008B4
trig192:eliminate_microdust=$00:0008B6
trig192:eliminate_normalised=$00:0008BA
trig192:eliminated=$00:0008C4
trig192:encircle=$00:0008C6
trig192:degreep=00000A,00000F
trig192:downward=000000,00000F
trig192:magnitude_obtained=$00:0008CD
trig192:encircled=$00:0008DA
trig192:q360=$00:0008DD
trig192:reciprocal_factorials=$00:0008E7
trig96=$00:000A0F
trig96:_RADIAN_FACTOR=3FFFFB8EFA351294E9C8AE0F
trig96:_PASSES=00000B
trig96:sine=$00:000A0F
trig96:sine:angle=00000B,00000F
trig96:sine:u_8=000004,00000F
trig96:sine:u_rkxy=000000,00000F
trig96:cosine=$00:000A18
trig96:cosine:angle=00000B,00000F
trig96:cosine:u_8=000004,00000F
trig96:cosine:u_rkxy=000000,00000F
trig96:tangent=$00:000A24
trig96:tangent:angle=00000F,00000F
trig96:tangent:cosine=000008,00000F
trig96:tangent:u_8=000004,00000F
trig96:tangent:u_rkxy=000000,00000F
trig96:cotangent=$00:000A35
trig96:cotangent:angle=00000F,00000F
trig96:cotangent:sine=000008,00000F
trig96:cotangent:u_8=000004,00000F
trig96:cotangent:u_rkxy=000000,00000F
trig96:_sine=$00:000A46
trig96:anglep=000012,00000F
trig96:power=00000C,00000F
trig96:square=000008,00000F
trig96:factorial=000004,00000F
trig96:factor=000000,00000F
trig96:_NEXT_FACTORIAL=:P1:0:0000BD
trig96:_NEXT_POWER=:P1:0:0000BE
trig96:_poly=$00:000A58
trig96:_nomial=$00:000A72
trig96:trim=$00:000A7E
trig96:trimmed=$00:000A8A
trig96:eliminate_microdust=$00:000A8C
trig96:eliminate_normalised=$00:000A90
trig96:eliminated=$00:000A98
trig96:encircle=$00:000A9A
trig96:degreep=000002,00000F
trig96:magnitude_found=$00:000A9F
trig96:encircled=$00:000AA9
tripl2float
troutine=000005,00000F
tseq=000003,00000F
twait_ii=$00:00052E
tx_mib_update
tx_nocheck=$00:00049D
tx_payload=$00:00044D
txbloc_p=000001,00000F
txbuf=000008,00000F
txbytes=000009,00000F
txflags=00000A,00000F
txq_p=000000,00000F
txsum1?=$00:0004F3
txsum4!=$00:0004EB
txsum4?=$00:0004ED
txsum64!=$00:0004D4
txsum64?=$00:0004E8
txsumx=$00:0004F7
txsumz=$00:0004F8
udgram=:N129:P:0:000000
udgram_acw_send_nocheck+=$00:0000B3
udgram_rbloc=$00:000DBC
udgram_rbuffer=$00:000DB7
udgram_rbuffer_x=$00:000DC1
udgram_read=$00:000DCB
udgram_readx=$00:000DDA
udgram_write=$00:000DDD
udp4=$00:000385
udp4_x=$00:000398
udpInDatagrams=$00:00085E
udpInDatagrams:rw_typ_tokens_words=$00:00085E
udpInDatagrams:o=$00:00085F
udpInDatagrams:l=$00:000860
udpInDatagrams:data=$00:000861
udpInDatagrams:flags=$00:000862
udpInDatagrams:bucket=$00:000863
udpInDatagrams:ranges=$00:000863
udpInDatagrams:range=$00:000864
udpInDatagrams:advance=$00:000864
udpInDatagrams:netstring=:N129:P:0:000000
udpInDatagrams:i=$01:000572
udpInErrors=$00:00086A
udpInErrors:rw_typ_tokens_words=$00:00086A
udpInErrors:o=$00:00086B
udpInErrors:l=$00:00086C
udpInErrors:data=$00:00086D
udpInErrors:flags=$00:00086E
udpInErrors:bucket=$00:00086F
udpInErrors:ranges=$00:00086F
udpInErrors:range=$00:000870
udpInErrors:advance=$00:000870
udpInErrors:netstring=:N129:P:0:000000
udpInErrors:i=$01:000575
udpLocalAddress=$00:000876
udpLocalAddress:rw_typ_tokens_words=$00:000876
udpLocalAddress:o=$00:000877
udpLocalAddress:l=$00:000878
udpLocalAddress:data=$00:000879
udpLocalAddress:flags=$00:00087A
udpLocalAddress:bucket=$00:00087B
udpLocalAddress:ranges=$00:00087B
udpLocalAddress:range=$00:00087C
udpLocalAddress:advance=$00:00087C
udpLocalAddress:netstring=:N129:P:0:000000
udpLocalPort=$00:00087C
udpLocalPort:rw_typ_tokens_words=$00:00087C
udpLocalPort:o=$00:00087D
udpLocalPort:l=$00:00087E
udpLocalPort:data=$00:00087F
udpLocalPort:flags=$00:000880
udpLocalPort:bucket=$00:000881
udpLocalPort:ranges=$00:000881
udpLocalPort:range=$00:000882
udpLocalPort:advance=$00:000882
udpLocalPort:netstring=:N129:P:0:000000
udpNoPorts=$00:000864
udpNoPorts:rw_typ_tokens_words=$00:000864
udpNoPorts:o=$00:000865
udpNoPorts:l=$00:000866
udpNoPorts:data=$00:000867
udpNoPorts:flags=$00:000868
udpNoPorts:bucket=$00:000869
udpNoPorts:ranges=$00:000869
udpNoPorts:range=$00:00086A
udpNoPorts:advance=$00:00086A
udpNoPorts:netstring=:N129:P:0:000000
udpNoPorts:i=$01:000574
udpOutDatagrams=$00:000870
udpOutDatagrams:rw_typ_tokens_words=$00:000870
udpOutDatagrams:o=$00:000871
udpOutDatagrams:l=$00:000872
udpOutDatagrams:data=$00:000873
udpOutDatagrams:flags=$00:000874
udpOutDatagrams:bucket=$00:000875
udpOutDatagrams:ranges=$00:000875
udpOutDatagrams:range=$00:000876
udpOutDatagrams:advance=$00:000876
udpOutDatagrams:netstring=:N129:P:0:000000
udpOutDatagrams:i=$01:000577
udp_acw_send+=$00:0000B7
udp_agent1+=$00:000246
udp_agent2+=$00:000247
udp_auto_connect=$00:000DC2
udp_buy_txaw=$00:000406
udp_buy_txaw_optional=$00:000407
udp_check_payload_tx=$00:0004FD
udp_drop_dgram=$00:000515
udp_exact=$00:0003AD
udp_ip_send=$00:000437
udp_iquick=$00:0003C7
udp_ldgram_noport=$01:00041D
udp_next=$00:000387
udp_noresponseb=$00:00044C
udp_nosocket_rxgrams=$01:00041C
udp_nosource=$00:00043C
udp_qup=$00:0003FE
udp_rbuffer_y=$00:000DAF
udp_read_rxq=$00:00050B
udp_response_buffer=$00:00043E
udp_rtxbuffer+=$00:0000B4
udp_rx_payload=$00:000499
udp_rxq=$00:000399
udp_rxqlong=$00:0003D4
udp_rxqthru=$00:0003CA
udp_send+=$00:0000B5
udp_socket=$00:000518
udp_socket?=$00:0003B6
udp_socket_closed=$00:000395
udp_socketx=$00:00051E
udp_store=$00:000400
udp_tx=$00:00051F
udp_tx:addresses=00000B,00000F
udp_tx:bytes=00000F,00000F
udp_tx:udatap=000010,00000F
udp_tx:flags=000011,00000F
udp_tx:application_header_words=000012,00000F
udp_tx:ap=000013,00000F
udp_tx:caller_fp=000007,00000F
udp_tx:caller_y=000006,00000F
udp_tx:caller_x=000005,00000F
udp_tx:txbytes_total=000004,00000F
udp_tx:unpacked_addresses=000000,00000F
udp_tx:pre_route=$00:00052D
udp_tx:assemble=$00:000531
udp_tx:app_header_counted=$00:00053A
udp_tx:aheadrw=$00:000551
udp_tx:payout_apdata=$00:000558
udp_tx:send_checked=$00:000562
udp_tx:bad_argument=$00:000564
udp_tx:no_can=$00:000566
udp_tx:no_path=$00:000568
udp_tx:udp_txz=$00:000569
udp_tx_payload=$00:000499
udp_txaw=$00:000414
udp_txaw_nocheck=$00:00042D
udp_txbuffer+=$00:0000B6
udp_txbx=$00:000413
udp_uportbound?=$00:0003D8
udp_write_rxq=$00:000501
udpagent_direct=$00:000265
udpagent_eosearch=$00:00029A
udpagent_locate=$00:00027D
udpagent_net=$00:00024D
udpagent_netagain=$00:000255
udpagent_netresult=$00:00025B
udpagent_next_bank=$00:000295
udpagent_next_port=$00:000290
udpagent_nodirect=$00:000271
udpagent_nofind=$00:000298
udpagent_nohit=$00:00025D
udpagent_nohitp=$00:000264
udpagent_port=$00:00025E
udpagent_search_equal=$00:00027C
udpagent_search_forward=$00:000274
udpagent_search_on=$00:000289
udpagent_start_search=$00:000285
udpagent_start_tree=$00:000283
udpq=$01:00041A
udpq:head=$01:00041A
udpq:tail=$01:00041B
uflags=000004,00000F
unbase_deviceb_ii=$00:0006AA
unbase_socketb_ii=$00:0006AD
unbase_standard_netbuf_ii=$00:0006B0
unbind=$00:000097
unconditionally=$00:000314
uq_head=$41:003070
uq_tail=$41:003071
uroutine=000005,00000F
useq=000003,00000F
usocket=$00:00059F
usocket_c_ii=$00:000587
usocket_ii=$00:000591
usocket_nane=$00:0005A4
usocket_no_protocol=$00:00059C
uugram=$47:000000,00000F
uugram:sourcep=$47:000000,00000F
uugram:destp=$47:000001,00000F
uugram:udgraml=$47:000002,00000F
uugram:checksum=$47:000003,00000F
v64=:N129:P:0:000000
w2buffer=$00:000CE0
w2buffer_nocheck=$00:000DE0
w2nocheck32!=$00:000DE4
w2nocheck32?=$00:000E05
w2nocheckbyte=$00:000E14
w2nocheckpair!=$00:000E0B
w2nocheckpair?=$00:000E0E
webhost_threads=$00:000205
wpair_nocheck=:P1:0:000076
wphysa=:N129:P:0:000000
write_avector_ii=$00:0005BC
write_ifq
write_ifqlist
write_ifqlist_head
write_trail=$00:000276
write_xint_table=$00:0000A9
write_xint_wcursor=$00:0000BA
write_xint_wrap=$00:0000B9
write_xvector_ii=$00:0005C6
wrong_pool=$00:000EB5
wstream_registers=000000,00000F
wstream_start_net
wstream_starta
x48d48=$00:000E11
x48d48:divisor=000003,00000F
x48m24=$00:000DBA
x48m24:multiplier=000003,00000F
x48m48=$00:000DC8
x48m48:multiplier=000003,00000F
x72_aU+=$00:000153
x72_anU+=$00:000154
x72_andU+=$00:00014E
x72_d48_48+=$00:00015B
x72_d72_24+=$00:00015A
x72_d72_48+=$00:00015C
x72_d72_72+=$00:00015D
x72_m48_24+=$00:000155
x72_m48_48+=$00:000157
x72_m72_24+=$00:000156
x72_m72_48+=$00:000158
x72_m72_72+=$00:000159
x72_orU+=$00:00014D
x72_sa+=$00:000151
x72_sl+=$00:000152
x72_xorU+=$00:00014F
x72_xtend+=$00:000150
x72andu=$00:000EA8
x72andu:uwords=000006,00000F
x72andu:signs_length=000008,00000F
x72andu:ab=000001,00000F
x72andu:caller_x=000000,00000F
x72anu=$00:000DAB
x72anu:subtrahend2w=000008,00000F
x72anu:signs_length=00000A,00000F
x72anu:carry=000003,00000F
x72anu:i47_0=000001,00000F
x72anu:caller_x=000000,00000F
x72au=$00:000D9E
x72au:addend2w=000008,00000F
x72au:signs_length=00000A,00000F
x72au:carry=000003,00000F
x72au:i47_0=000001,00000F
x72au:caller_x=000000,00000F
x72d24=$00:000E00
x72d24:divisor=000007,00000F
x72d24:remainderp=000008,00000F
x72d24:quotient=000002,00000F
x72d24:quotientu=000000,00000F
x72d48=$00:000E17
x72d48:divisor48=000014,00000F
x72d48:divisor=00000D,00000F
x72d48:caller8_11=000009,00000F
x72d48:dividend=000007,00000F
x72d48:dividendu=000005,00000F
x72d48:caller_rkxy=000001,00000F
x72d48:save_fpguard=000000,00000F
x72d72=$00:000E30
x72d72:divisorp=000012,00000F
x72d72:divisor=00000B,00000F
x72d72:caller_891011=000007,00000F
x72d72:dividend=000005,00000F
x72d72:dividendu=000003,00000F
x72d72:caller_rkxy=000001,00000F
x72d72:save_fpguard=000000,00000F
x72m24=$00:000DC0
x72m24:multiplier=000003,00000F
x72m48=$00:000DCE
x72m48:multiplier_i48=000014,00000F
x72m48:multiplier=00000D,00000F
x72m48:caller891011=000009,00000F
x72m48:multiplicand=000007,00000F
x72m48:multiplicand_u=000005,00000F
x72m48:caller_rkxy=000001,00000F
x72m48:mguard=000000,00000F
x72m72=$00:000DE7
x72m72:multiplierp=000014,00000F
x72m72:multiplier=00000D,00000F
x72m72:caller_891011=000009,00000F
x72m72:multiplicand=000007,00000F
x72m72:multiplicand_u=000005,00000F
x72m72:muser_rkxy=000001,00000F
x72m72:mguard=000000,00000F
x72oru=$00:000E9C
x72oru:uwords=000006,00000F
x72oru:signs_length=000008,00000F
x72oru:ab=000001,00000F
x72oru:caller_x=000000,00000F
x72sa=$00:000E71
x72sa:countR=000007,00000F
x72sa:caller_89=000002,00000F
x72sa:caller_xy=000000,00000F
x72sa:sa_again=$00:000E78
x72sa:sa_round=$00:000E85
x72sa:sa_return=$00:000E89
x72sa:sa_pushdown_store=$00:000E8E
x72sl=$00:000E49
x72sl:countL=000007,00000F
x72sl:usr89=000002,00000F
x72sl:usrxy=000000,00000F
x72sl:sl_again=$00:000E4E
x72sl:sl_round=$00:000E5A
x72sl:sl_return=$00:000E5E
x72sl:sl_pullup_store=$00:000E63
x72xoru=$00:000EB4
x72xoru:uwords=000006,00000F
x72xoru:signs_length=000008,00000F
x72xoru:ab=000001,00000F
x72xoru:caller_x=000000,00000F
x72xtend=$00:000D98
xaccept+=$00:0000A8
xarp=$00:000F69
xbase(32)=$00:0004F5
xbase(33)=$00:0004FC
xbase(34)=$00:000503
xbase(35)=$00:00050A
xdecline+=$00:0000AA
xdisco+=$00:0000A9
xdr_inopaque24
xdr_outopaque24
xint_bind_ii=$00:000603
xint_free=$00:00062E
xint_free_in=$00:000634
xint_free_out=$00:000633
xint_out=$00:000610
xitable=$45:000000,000005
xitable:lock_cell=$45:000000,000005
xitable:rcursor=$45:000001,000005
xitable:wcursor=$45:000002,000005
xitable:limit=$45:000003,000005
xitable:xint=$45:000004,000005
xmitted=000001,00000F
xrelay_reset
xtcp4=$00:000573
xvector_in_range=$00:0005AE
xvector_low_threshold=$00:0005B2
xvector_outwith_range=$00:0005B1
xy=000000,00000F
yield=$00:0002AB
zdevice=$00:0000CF
zeta_ii=$00:000622
zeta_ii_no_op=$00:00062B
zeta_ii_user_refp=$00:00062B
../mib/loadp2.msm=4<000008
../mib/loadplan.msm=3<000007
../mib/idragent.msm=3<000007
../mib/tcpagen2.msm=3<000007
../mib/tcpagent.msm=3<000007
../mib/roagent.msm=3<000007
../mib/ipagent.msm=3<000007
../mib/ifagent.msm=3<000007
../mib/udpagent.msm=3<000007
../mib/mib2tick.msm=3<000007
../mib/mib-II.msm=3<000007
../netapps2/sysinfo.msm=3<000007
../netapps2/../lib/x72_48if.msm=3<000007
../netapps2/subagent.msm=3<000007
../mib/sequo.msm=3<000007
../mib/ber.msm=3<000007
../mib/snmpv1.msm=3<000007
../apps.lib/trig96.msm=3<000007
../apps.lib/rfactori.msm=4<000008
../apps.lib/trig192.msm=3<000007
../apps.lib/aplib96.msm=3<000007
../apps.lib/aplib192.msm=3<000007
../fponline/fponline.msm=3<000007
..//lib/aquiform.def=4<000008
../netapps2/iserver1.msm=3<000007
../netapps2/http.msm=3<000007
../netapps2/normal_s.msm=3<000007
../netapps2/startups.msm=3<000007
../netapps2/span_rom.msm=3<000007
../netapps2/search_x.msm=3<000007
../netapps2/telnet.msm=3<000007
../netapps2/fp_react.msm=3<000007
../netapps2/fpser192.msm=3<000007
../netapps2/fpserver.msm=3<000007
../netapps2/a_protos.msm=3<000007
../netapps2/athreads.msm=3<000007
../netapps2/../stream/stream.def=3<000007
../netapps2/../def.app/iframes.def=3<000007
../netapps2/../fponline/fponline.def=3<000007
../netapps2/../lib/ascii.def=3<000007
../netapps2/../lib/144.def=3<000007
../netapps2/../lib/i72.def=3<000007
../netapps2/../lib/alib.def=3<000007
../netapps2/../lib/register.def=3<000007
../netapps2/ap_bank.msm=2<000006
../t77.4/multiarp.msm=2<000006
../t77.4/icapsule.msm=2<000006
../t77.4/bind.msm=2<000006
../t77.4/dq.msm=2<000006
../t77.4/route_if.msm=2<000006
../t77.4/tcp_add.msm=3<000007
../t77.4/rwsocket.msm=2<000006
../t77.4/connect.msm=2<000006
../t77.4/socket.msm=2<000006
../t77.4/tcp4ruti.msm=3<000007
../t77.4/tcp.msm=2<000006
../t77.4/anomaly.msm=2<000006
../t77.4/udp_send.msm=2<000006
../t77.4/udp.msm=2<000006
../t77.4/icmp.msm=2<000006
../t77.4/ip_q2.msm=2<000006
../t77.4/overhaul.msm=2<000006
../t77.4/netaddr.msm=3<000007
../t77.4/routes.msm=3<000007
../t77.4/ipv4.msm=2<000006
../t77.4/net_buff.msm=2<000006
../t77.4/net_bank.msm=2<000006
../t77.4/i_f.msm=2<000006
../t77.4/a_protos.def=3<000007
../t77.4/networks.msm=2<000006
../t77.4/../fs/response.def=2<000006
../t77.4/../drivers/routecfg.def=2<000006
../t77.4/../drivers/ifconfig.def=2<000006
../t77.4/../mib/ber.def=2<000006
../t77.4/../mib/template.def=2<000006
../t77.4/../mib/mib-II.def=2<000006
../t77.4/pointers.def=2<000006
../t77.4/lockfree.def=2<000006
../t77.4/window.def=2<000006
../t77.4/tcp.def=2<000006
../t77.4/udp.def=2<000006
../t77.4/socket.def=2<000006
../t77.4/icmp.def=2<000006
../t77.4/route.def=2<000006
../t77.4/ipv4.def=2<000006
../t77.4/ip.def=2<000006
../t77.4/arp.def=2<000006
../t77.4/net_bank.def=2<000006
../t77.4/net_buff.def=2<000006
../t77.4/i_f.def=2<000006
../t77.4/networks.def=2<000006
../t77.4/ll.def=2<000006
../t77.4/dq.def=2<000006
../t77.4/t77.msm=1<000005
../teraframe/device_a.msm=1<000005
timer.msm=1<000005
events.msm=1<000005
xiobase.msm=1<000005
threadp.msm=1<000005
measure.msm=1<000005
memory.msm=1<000005
../timer/timer.msm=1<000005
../teraframe/device_a.def=1<000005
../language/stack.def=1<000005
../fs/ustream.def=1<000005
../fs/fs24.def=1<000005
../fs/fs.def=1<000005
../timer/timer.def=1<000005
../def.sys/events.def=1<000005
../def.sys/banks.def=1<000005
../def.sys/base.def=1<000005
../def.sys/io.def=1<000005
../def.sys/tcb.def=1<000005
../def/ringfest.def=1<000005
../def/vector.def=1<000005
../def/ii.def=1<000005
../def/rta.def=1<000005
image.msm=0<000003
:$(00):009000:009BEC :$(01):000000:0005D9 :$(02):002000:003000 :$(03):000000:0026CB :$(41):003000:0030F2 :$(42):000000:000007 :$(43):000000:000006 :$(45):000000:000400 :$(47):000000:000004 
image.msm: object code 124384 bytes: 0 errors: 85 undefined labels
MASMX 7r3A Build 12
3/minimal.msm
system.txo:$(0) 3052 words decimal from hexadecimal 009000 to 009BEC
system.txo:$(1) 1497 words decimal from hexadecimal 001000 to 0015D9
system.txo:$(2) 4096 words decimal from hexadecimal 002000 to 003000
system.txo:$(3) 9931 words decimal from hexadecimal 003000 to 0056CB
system.txo:$(65) 242 words decimal from hexadecimal 003000 to 0030F2
../drivers/drivers.txo:$(0) 1535 words decimal from hexadecimal 004000 to 0045FF
../drivers/drivers.txo:$(1) 428 words decimal from hexadecimal 0015D9 to 001785
../drivers/drivers.txo:$(2) 4096 words decimal from hexadecimal 002000 to 003000
../lib/xdr_lib8.txo:$(0) 3205 words decimal from hexadecimal 008000 to 008C85
../fs/fs.txo:$(0) 2792 words decimal from hexadecimal 007000 to 007AE8
../fs/fs.txo:$(1) 68 words decimal from hexadecimal 001785 to 0017C9
../fs/fs.txo:$(2) 4096 words decimal from hexadecimal 002000 to 003000
*EOF*
  :                            1 .       
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software      
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40: 	$include		../def/map1.def
  :                            41: 	$include		../def.sys/banks.def	
  :                            42 
  :                            43 
  :                            44 $(1:01000)
  :                            45 $(3:03000)
  :                            46 
  :                            47: 	$include, $binary	system
  :                            48: 	$include, $binary	../drivers/drivers
  :                            49 
  :                            50: 	$include, $binary	../lib/xdr_lib8
  :                            51: 	$include, $binary	../fs/fs
  :                            52 
  :                            53 
  :                            54 SUMMIT$3*	$equ	$zenith(3)
  :                            55 	$store			absolute
*EOF*
$map=:N129:P:0:000000
MICRO_IMAGE=000001
IPV4_BANK=002000
IPV4_B1_INITIAL_BANK=003000
A_PROTOS_B3_INITIAL_BANK=003800
DRIVERS_BANK1=004000
A_PROTOS_BANK1=005000
LIBRARY_XDR=006000
FS24_BANK=007000
ASCII_LIB1=008000
A_PROTOS_BANK2=009000
NET_XBANK=00A000
DRIVERS_BANK2=00C000
APP1_BANK=00E000
CORE_FS1_BANK=00F000
APPLICATION_BASE=00A000
$SMP+=00007E
$ZETA+=00007C
$if0p+=$01:001000
$if2p+=$01:001002
$ifzp+=$01:001009
$sockif+=000A85
A$IDX+=000073
B$IDX+=000074
CACHE_NETB$+=00006C
ENERGY$+=00007D
FILE$HANDLE+=00007B
FO$FRAME+=000079
FO$HEAP+=00007A
FREE_DEVB$+=00006E
FREE_NETB$+=000070
FREE_SOCKB$+=00006F
IFNUMBER_I+=$01:0014F7
NET2SYM$+=000071
ON_NETB$+=00006D
TERAFRAME$+=000077
THREAD$STATE+=000072
USOCKET$+=000078
__bind+=000082
__connect+=000083
__disconnect_free_tcp+=000095
__free_tcp_port+=000094
__net_disengage+=000091
__port_disengage+=000092
__port_disengage_udp+=000093
__socket+=000081
__tcp_connect+=00008C
__tcp_socket+=000096
accept+=00008F
agent2+=000146
app_protos+=000160
app_threads+=00015F
bind+=000085
connect+=000084
cosine192+=000175
cosine96+=000179
cotangent192+=000177
cotangent96+=00017B
cube192+=00017E
cube_root192+=00017F
far_initpool+=000099
far_q2+=00009D
far_readq+=00009C
fraction192+=000170
fraction96+=000172
frame_to_protocol+=000098
if_buy1+=00009B
if_q2ifree+=00009E
if_rx_nocheck+=00009F
if_sell1+=00009A
if_tx_nocheck+=00009F
initial_startups+=00014B
integer192+=000171
integer96+=000173
ipsend+=00008B
ipv4_4us?+=0000A0
ipv4_this_host?+=0000A2
ipv4_this_if?+=0000A1
mib+=$03:0034D4
mib2ticks+=000245
mib_get+=000240
mib_getnext+=000241
mib_line+=000244
mib_set+=000242
mib_start+=000243
net_afree+=$01:00133F
net_alexical+=$01:00133E
net_alock+=$01:00133D
net_disengage+=000086
normal_string+=00014C
online_xqt+=000149
recv+=000089
release_udgram+=000087
route_free+=$01:00124B
route_lexical+=$01:00124C
route_list+=$01:00124A
run_start+=00014A
send+=00008A
sense_data+=000090
sine192+=000174
sine96+=000178
snmp_agent+=000146
square192+=00017C
square_root192+=00017D
strilw+=0002B1
subagent+=000147
subagent?+=000148
sysinfo+=00015E
tangent192+=000176
tangent96+=00017A
tcp_accept+=00008D
tcp_addx+=0000B2
tcp_hash_connection+=0000AF
tcp_hash_localsocket+=0000AE
tcp_release_rxline+=0000AD
tcp_rx+=0000B0
tcp_tx+=0000B1
tcpr+=0000AB
tcpz+=0000AC
udgram_acw_send_nocheck+=0000B3
udp_acw_send+=0000B7
udp_agent1+=000246
udp_agent2+=000247
udp_rtxbuffer+=0000B4
udp_send+=0000B5
udp_txbuffer+=0000B6
x72_aU+=000153
x72_anU+=000154
x72_andU+=00014E
x72_d48_48+=00015B
x72_d72_24+=00015A
x72_d72_48+=00015C
x72_d72_72+=00015D
x72_m48_24+=000155
x72_m48_48+=000157
x72_m72_24+=000156
x72_m72_48+=000158
x72_m72_72+=000159
x72_orU+=00014D
x72_sa+=000151
x72_sl+=000152
x72_xorU+=00014F
x72_xtend+=000150
xaccept+=0000A8
xdecline+=0000AA
xdisco+=0000A9
$initial_ift1+=000102
$light_flight+=000103
$rxtx_ift1+=000101
$rxtx_lo+=000100
AT_AGENT
BROADCAST_AND_MAXREASM
SUMMIT$3+=0056CB
UDGRAM_CHECK_WRITE
__ifconfig+=000108
__ift2_align+=000113
__ift2_mirror+=000114
__initial_ift2+=000111
__route_config+=00010E
__rxtx_ift2+=000112
__sprintf+=0001D9
d48_48+=0001A2
date_timef3+=000224
display_quartets+=000221
fedit192a+=000210
fedita+=00020E
feditia+=00020F
fgets_datafile+=0001E5
fileshare_assign+=0001E9
fileshare_space_open+=0001E7
float2i72+=00019E
forward_callstring+=000229
fp192_add+=00018E
fp192_add_negative+=00018F
fp192_divide+=000193
fp192_load+=00018C
fp192_load_negative+=00018D
fp192_mfa+=000191
fp192_multiply+=000192
fs24_open+=0001C7
fs24_read+=0001C8
fs_dsearch+=0001C3
fs_find+=0001C2
fs_xbase+=0001C4
fscan192a+=000208
fscana+=000206
fspath+=0001C5
fsymbola+=000207
hvsocket_storage+=000130
hvsocket_write_rxq+=000138
i48_2float+=00019F
i72_divide+=000195
i72_multiply+=000194
id72_72+=0001A5
iedit48a+=000215
iedit48as+=000216
iedit48ua+=000214
iedit72a+=000218
iedit72as+=000219
iedit72ua+=000217
iedita+=000212
ieditas+=000213
ieditua+=000211
im72_72+=0001A4
iscan48a+=00020B
iscan72a+=00020C
iscan_skipa+=000209
iscana+=00020A
m48_24+=0001A0
m48_48+=0001A1
minimald
qstart+=0001D1
rstream_scana+=000204
rstream_start_net+=000200
rstream_starta+=000202
scanhex+=00021B
seg$load+=0001CD
tcp_window+=000139
textoa+=00021A
tnet_callstring+=00013A
tokena+=00020D
tripl2float+=0001A3
tx_mib_update+=000119
write_ifq+=000110
write_ifqlist+=00010F
write_ifqlist_head+=000117
wstream_start_net+=000201
wstream_starta+=000203
xdr_inopaque24+=0001BA
xdr_outopaque24+=0001BB
xrelay_reset+=00010D
ETHERNET_ARP_ARPQ_HEAD+=$01:0015D9
__buy12_bytes+=000116
__buy6_bytes+=000115
__recheck+=000118
arp_ether_reso+=000109
arp_ether_rx+=00010C
arp_ether_xmit+=00010A
connection_array+=000135
dlt_e10mb+=000107
dlt_loop+=000106
dlt_null+=000105
hvsocket_close+=000137
hvsocket_readq+=000134
hvsocket_rx+=000132
hvsocket_tx+=000133
hvsocket_xbind+=000136
hvsockets_bind+=000131
if_dualport_txwrite+=000104
xarp_ethernet+=00010B
u72tofloat+=000180
fraction6_7+=000181
madd144+=000182
floating_scale192+=000183
floating_scale+=000184
fraction3+=000185
fraction6+=000186
scale_out192+=000187
scale_out+=000188
align192+=000189
scale_integrate+=00018A
n72comp2+=00018B
reciprocal192+=000190
dayclock_ydsm_gmt+=000196
dayclock_ydsm+=000197
strlen+=000199
strlenx+=00019A
strcpy+=00019B
strcat+=00019C
read_octet_column+=00019D
__fpp+=0001A6
__fpx+=0001A7
memcat+=0001A8
ieee754_64_2float+=0001BC
float2_ieee754_64+=0001BD
xdr16_ieee754_64_2float+=0001BE
xdr16_float2_ieee754_64+=0001BF
madd_144+=000116
oper8+=00079B
wstream_composea+=000205
ixscan+=00021E
ixscan48+=00021F
ixscan72+=000220
date_timef1+=000222
date_timef2+=000223
string_scana_sentinel+=000225
qscanquartets+=000226
oscanquartets+=000227
unget+=000228
unpack_callstring+=00022A
retrieve_callstring+=00022B
read_stream_start16+=0004FD
write_stream_start16+=000505
read_stream_start24+=00050B
write_stream_start24+=000513
timetext_f1+=0005FA
timetext_f2+=000610
timetext_f3+=000621
qstring_scana_sentinel+=000632
edit_fo+=000756
quartets+=0007DF
table+=0007FF
__fd_zero_timeout+=0001F2
__fgets+=0001E4
__fprintf+=0001DB
__fscanf+=0001DA
__sscanf+=0001D8
appdata_share+=0001F1
appdata_vector+=000475
array$seg$load+=0001CF
claim_fob+=0001DD
close+=0001D7
dialplan_online+=0001EE
editfor+=0008F6
f_editform+=000911
f_scanform+=000905
fileshare_space_close+=0001E8
fs24_advance+=0001C9
fs24_bytes_written+=0001EC
fs24_lseek+=0001EB
fs24_snoop+=0001E3
fs24_window+=0001E6
fs24_words_written+=0001ED
fs_1st+=0001C0
fs_read+=0001C1
fscan_datafile+=0001EA
fspath_open+=0001C6
fsrom_da+=0001CA
fsrom_find+=0001CC
fsrom_read+=0001CB
fsync+=0001D6
iframe_load+=0001D0
lseek+=0001D5
net_scan_tcp+=0001DC
nfs_open_path+=000561
nfs_seek+=0001E1
nfsclose+=0001E2
nfsmount+=0001DE
nfsopen+=0001DF
nfsread+=0001E0
nfswrite+=0001F0
open+=0001D2
read+=0001D3
recursive$seg$load+=0001CE
scan_tcp+=000933
scanfor+=0008EB
speed_dial+=0001EF
write+=0001D4
$bits=000018
label1=000200,000018
absolute.txo=0<FFFFFFFF
../fs/fs.txo=1<000005
../lib/xdr_lib8.txo=1<000005
../drivers/drivers.txo=1<000005
system.txo=1<000005
../def.sys/banks.def=1<000005
../def/map1.def=1<000005
minimal.msm=0<000003
:$(00):007000:007AE8 :$(01):001000:0017C9 :$(02):002000:003000 :$(03):003000:0056CB :$(41):003000:0030F2 
minimal.msm: object code 193436 bytes: 0 errors: 1 undefined labels
MASMX 7r3A Build 12
3/minimald.msm
absolute.txo:$(1) 1993 words decimal from hexadecimal 001000 to 0017C9
absolute.txo:$(3) 9931 words decimal from hexadecimal 003000 to 0056CB
*EOF*
  :                            1 	$path		../
  :                            2: 	$include	def/map1.def
  :                            3 	$path
  :                            4 
  :                            5: 	$include,$binary	absolute	$(1, 3)
  :                            6 
  :                            7 	$store		minimald
  :                            8 
*EOF*
:$(01):001000:0017C9 :$(03):003000:0056CB 
minimald.msm: object code 15769 bytes: 0 errors: 0 undefined labels
2c slot1 42 banks 0 last granules 0 total 42
minimald.seg loading 42 granules
44 granules written, 20 free
2c slot1 42 banks 0 last granules 0 total 42
minimald.seg loading 42 granules
44 granules written, 20 free
MASMX 7r3A Build 12
3/adcorefs.msm
absolute.txo:$(0) 2792 words decimal from hexadecimal 007000 to 007AE8
*EOF*
  :                            1 	$path	../
  :                            2: 	$include	def/map1.def
  :                            3 	$path
  :                            4 
  :                            5: 	$include,$binary absolute $(0)
  :                            6 $(32::03000)
  :                            7: 	$include,$binary corefs
  :                            8 
*EOF*
$map=:N129:P:0:000000
$SMP+=00007E
$ZETA+=00007C
$sockif+=000A85
A$IDX+=000073
B$IDX+=000074
CACHE_NETB$+=00006C
ENERGY$+=00007D
FILE$HANDLE+=00007B
FO$FRAME+=000079
FO$HEAP+=00007A
FREE_DEVB$+=00006E
FREE_NETB$+=000070
FREE_SOCKB$+=00006F
NET2SYM$+=000071
ON_NETB$+=00006D
TERAFRAME$+=000077
THREAD$STATE+=000072
USOCKET$+=000078
__bind+=000082
__connect+=000083
__disconnect_free_tcp+=000095
__free_tcp_port+=000094
__net_disengage+=000091
__port_disengage+=000092
__port_disengage_udp+=000093
__socket+=000081
__tcp_connect+=00008C
__tcp_socket+=000096
accept+=00008F
agent2+=000146
app_protos+=000160
app_threads+=00015F
bind+=000085
connect+=000084
cosine192+=000175
cosine96+=000179
cotangent192+=000177
cotangent96+=00017B
cube192+=00017E
cube_root192+=00017F
far_initpool+=000099
far_q2+=00009D
far_readq+=00009C
fraction192+=000170
fraction96+=000172
frame_to_protocol+=000098
if_buy1+=00009B
if_q2ifree+=00009E
if_rx_nocheck+=00009F
if_sell1+=00009A
if_tx_nocheck+=00009F
initial_startups+=00014B
integer192+=000171
integer96+=000173
ipsend+=00008B
ipv4_4us?+=0000A0
ipv4_this_host?+=0000A2
ipv4_this_if?+=0000A1
mib2ticks+=000245
mib_get+=000240
mib_getnext+=000241
mib_line+=000244
mib_set+=000242
mib_start+=000243
net_disengage+=000086
normal_string+=00014C
online_xqt+=000149
recv+=000089
release_udgram+=000087
run_start+=00014A
send+=00008A
sense_data+=000090
sine192+=000174
sine96+=000178
snmp_agent+=000146
square192+=00017C
square_root192+=00017D
strilw+=0002B1
subagent+=000147
subagent?+=000148
sysinfo+=00015E
tangent192+=000176
tangent96+=00017A
tcp_accept+=00008D
tcp_addx+=0000B2
tcp_hash_connection+=0000AF
tcp_hash_localsocket+=0000AE
tcp_release_rxline+=0000AD
tcp_rx+=0000B0
tcp_tx+=0000B1
tcpr+=0000AB
tcpz+=0000AC
udgram_acw_send_nocheck+=0000B3
udp_acw_send+=0000B7
udp_agent1+=000246
udp_agent2+=000247
udp_rtxbuffer+=0000B4
udp_send+=0000B5
udp_txbuffer+=0000B6
x72_aU+=000153
x72_anU+=000154
x72_andU+=00014E
x72_d48_48+=00015B
x72_d72_24+=00015A
x72_d72_48+=00015C
x72_d72_72+=00015D
x72_m48_24+=000155
x72_m48_48+=000157
x72_m72_24+=000156
x72_m72_48+=000158
x72_m72_72+=000159
x72_orU+=00014D
x72_sa+=000151
x72_sl+=000152
x72_xorU+=00014F
x72_xtend+=000150
xaccept+=0000A8
xdecline+=0000AA
xdisco+=0000A9
$initial_ift1+=000102
$light_flight+=000103
$rxtx_ift1+=000101
$rxtx_lo+=000100
SUMMIT$3+=0056CB
__ifconfig+=000108
__ift2_align+=000113
__ift2_mirror+=000114
__initial_ift2+=000111
__route_config+=00010E
__rxtx_ift2+=000112
__sprintf+=0001D9
d48_48+=0001A2
date_timef3+=000224
display_quartets+=000221
fedit192a+=000210
fedita+=00020E
feditia+=00020F
fgets_datafile+=0001E5
fileshare_assign+=0001E9
fileshare_space_open+=0001E7
float2i72+=00019E
forward_callstring+=000229
fp192_add+=00018E
fp192_add_negative+=00018F
fp192_divide+=000193
fp192_load+=00018C
fp192_load_negative+=00018D
fp192_mfa+=000191
fp192_multiply+=000192
fs24_open+=0001C7
fs24_read+=0001C8
fs_dsearch+=0001C3
fs_find+=0001C2
fs_xbase+=0001C4
fscan192a+=000208
fscana+=000206
fspath+=0001C5
fsymbola+=000207
hvsocket_storage+=000130
hvsocket_write_rxq+=000138
i48_2float+=00019F
i72_divide+=000195
i72_multiply+=000194
id72_72+=0001A5
iedit48a+=000215
iedit48as+=000216
iedit48ua+=000214
iedit72a+=000218
iedit72as+=000219
iedit72ua+=000217
iedita+=000212
ieditas+=000213
ieditua+=000211
im72_72+=0001A4
iscan48a+=00020B
iscan72a+=00020C
iscan_skipa+=000209
iscana+=00020A
m48_24+=0001A0
m48_48+=0001A1
qstart+=0001D1
rstream_scana+=000204
rstream_start_net+=000200
rstream_starta+=000202
scanhex+=00021B
seg$load+=0001CD
tcp_window+=000139
textoa+=00021A
tnet_callstring+=00013A
tokena+=00020D
tripl2float+=0001A3
tx_mib_update+=000119
write_ifq+=000110
write_ifqlist+=00010F
write_ifqlist_head+=000117
wstream_start_net+=000201
wstream_starta+=000203
xdr_inopaque24+=0001BA
xdr_outopaque24+=0001BB
xrelay_reset+=00010D
__buy12_bytes+=000116
__buy6_bytes+=000115
__recheck+=000118
arp_ether_reso+=000109
arp_ether_rx+=00010C
arp_ether_xmit+=00010A
connection_array+=000135
dlt_e10mb+=000107
dlt_loop+=000106
dlt_null+=000105
hvsocket_close+=000137
hvsocket_readq+=000134
hvsocket_rx+=000132
hvsocket_tx+=000133
hvsocket_xbind+=000136
hvsockets_bind+=000131
if_dualport_txwrite+=000104
xarp_ethernet+=00010B
u72tofloat+=000180
fraction6_7+=000181
madd144+=000182
floating_scale192+=000183
floating_scale+=000184
fraction3+=000185
fraction6+=000186
scale_out192+=000187
scale_out+=000188
align192+=000189
scale_integrate+=00018A
n72comp2+=00018B
reciprocal192+=000190
dayclock_ydsm_gmt+=000196
dayclock_ydsm+=000197
strlen+=000199
strlenx+=00019A
strcpy+=00019B
strcat+=00019C
read_octet_column+=00019D
__fpp+=0001A6
__fpx+=0001A7
memcat+=0001A8
ieee754_64_2float+=0001BC
float2_ieee754_64+=0001BD
xdr16_ieee754_64_2float+=0001BE
xdr16_float2_ieee754_64+=0001BF
madd_144+=000116
oper8+=00079B
wstream_composea+=000205
ixscan+=00021E
ixscan48+=00021F
ixscan72+=000220
date_timef1+=000222
date_timef2+=000223
string_scana_sentinel+=000225
qscanquartets+=000226
oscanquartets+=000227
unget+=000228
unpack_callstring+=00022A
retrieve_callstring+=00022B
read_stream_start16+=0004FD
write_stream_start16+=000505
read_stream_start24+=00050B
write_stream_start24+=000513
timetext_f1+=0005FA
timetext_f2+=000610
timetext_f3+=000621
qstring_scana_sentinel+=000632
edit_fo+=000756
quartets+=0007DF
table+=0007FF
__fd_zero_timeout+=0001F2
__fgets+=0001E4
__fprintf+=0001DB
__fscanf+=0001DA
__sscanf+=0001D8
appdata_share+=0001F1
appdata_vector+=000475
array$seg$load+=0001CF
claim_fob+=0001DD
close+=0001D7
dialplan_online+=0001EE
editfor+=0008F6
f_editform+=000911
f_scanform+=000905
fileshare_space_close+=0001E8
fs24_advance+=0001C9
fs24_bytes_written+=0001EC
fs24_lseek+=0001EB
fs24_snoop+=0001E3
fs24_window+=0001E6
fs24_words_written+=0001ED
fs_1st+=0001C0
fs_read+=0001C1
fscan_datafile+=0001EA
fspath_open+=0001C6
fsrom_da+=0001CA
fsrom_find+=0001CC
fsrom_read+=0001CB
fsync+=0001D6
iframe_load+=0001D0
lseek+=0001D5
net_scan_tcp+=0001DC
nfs_open_path+=000561
nfs_seek+=0001E1
nfsclose+=0001E2
nfsmount+=0001DE
nfsopen+=0001DF
nfsread+=0001E0
nfswrite+=0001F0
open+=0001D2
read+=0001D3
recursive$seg$load+=0001CE
scan_tcp+=000933
scanfor+=0008EB
speed_dial+=0001EF
write+=0001D4
minimald+=$20:000016
$bits=000018
label1=$20:000016,000030
corefs.txo=1<000005
absolute.txo=1<000005
..//def/map1.def=1<000005
adcorefs.msm=0<000003
:$(00):007000:007AE8 :$(20):000000:000B00 
adcorefs.msm: object code 197376 bytes: 0 errors: 0 undefined labels

.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.



YIELD$		$equ	65	.	bank 1	vector	1	. thread switch
SPAWN$		$equ	66	.	bank 1	vector	2	. process start
BANK$		$equ	67	.	bank 1	vector	3	. get storage up to 16777216 words
ARRAY$		$equ	68	.	bank 1	vector	4	. get large storage
BANK$FREE	$equ	69	.	bank 1	vector	5	. pool system executable memory
EXIT$		$equ	70	.	bank 1	vector	6	. stop a thread or a process
THREAD$		$equ	71	.	bank 1	vector	7	. start a thread
TOTAL$FREE	$equ	72	.	bank 1	vector	8	. return amount free executable memory
TAG$		$equ	73	.	bank 1	vector	9	. add a name to a thread
ASSIGN_XVECTOR$	$equ	74	.	bank 1	vector	10	. add a memory block to kernel vectors
I$TABLE		$equ	75	.	bank 1	vector	11	. initialise external interrupt queue
AFFINITY$	$equ	76	.	bank 1	vector	12	. relate a thread to specific cores
WRITE_AVECTOR$	$equ	77	.	bank 1	vector	13	. write a pointer to application vectors
FP_XPO$FLAG	$equ	78	.	bank 1	vector	14	. retrieve + clear exponent overflow flag
XINT$BIND	$equ	79	.	bank 1	vector	15	. exponent overflow | underflow
HANDLE$		$equ	80	.	bank 1	vector	16	. get a handle
FREE_HANDLE$	$equ	81	.	bank 1	vector	17	. pool a handle
READ_HANDLE$	$equ	82	.	bank 1	vector	18	. read 1st word of handle encoding
READ_XVECTOR$	$equ	83	.	bank 1	vector	19	. read a pointer from kernel vectors
WRITE_XVECTOR$	$equ	84	.	bank 1	vector	20	. write a pointer to kernel vectors
READ_SOCKET$	$equ	85	.	bank 1	vector	21	. read both words handle encoding
USOCKET$C	$equ	86	.	bank 1	vector	22	. complete encoding of TCP connection handle
KERNEL$B1	$equ	87	.	bank 1	vector	23	. switch to specified kernel B1 frame
B1$		$equ	88	.	bank 1	vector	24	. switch to actual application B1 frame
KERNEL$B1_1	$equ	89	.	bank 1	vector	25	. switch to first kernel B1 frame
DAYCLOCK$W	$equ	90	.	bank 1	vector	26	. write a:b -> DAYCLOCK$U:DAYCLOCK$
TWAIT$		$equ	91	.	bank 1	vector	27	. wait a:b milliseconds
EVENT_WAIT$ 	$equ	92	.	bank 1	vector	28	. wait for an event in a
EVENT_FREE$	$equ	93	.	bank 1	vector	29	. clear event waits of a thread
FP_GUARD$	$equ	94	.	bank 1	vector	30	. change floating rounding guard pattern
GUARD$		$equ	95	.	bank 1	vector	31	. diagnostic fault synthesis to fault ISR


XBASE_U$	$equ	GUARD$	.	bank 1 vector 31
				.	not a software interrupt
				.	predominantly

				.	application code attempt to
				.	base a device array
				.	SABR instruction guarded

				.	also out-of-range internal stack
				.	operation

				.	same hardware interrupt
				.	called as a software
				.	interrupt: recursive
				.	subprogram attempted to
				.	base an unavailable ADP
				.	in B1

RUNAWAY$	$equ	GUARD$	.	macro code issued this
				.	II instruction
				.	depends on assembly setting
				.	B1_GUARDED

STACK_LIMIT$	$equ	GUARD$	.	same vector again
				.	initiated by software if the
				.	internal stack pointer is
				.	about to go too low because
				.	an application is placing too
				.	many dynamic variables in the
				.	internal stack

XBASE$32	$equ	1*/6++32	. bank 1 vector 32
XBASE$33	$equ	1*/6++33
XBASE$34	$equ	1*/6++34
XBASE$35	$equ	1*/6++35

		$if	0

XBASE$36	$equ	1*/6++36
XBASE$37	$equ	1*/6++37
XBASE$38	$equ	1*/6++38
XBASE$39	$equ	1*/6++39

XBASE$40	$equ	1*/6++40
XBASE$41	$equ	1*/6++41
XBASE$42	$equ	1*/6++42
XBASE$43	$equ	1*/6++43	. bank 1 vector 43

		$endif

				.	bank 1 vectors 32..35
				.	request to base a device array

				.	bank 1 vectors 36..43 spare
				.	bank 1 vectors 44..59
				.	ISRs for opening / closing kernel windows

.				.	ISR vectors 1:35+ export their ISR name*

				.	interrupt mask settings

MAX_INT_MASK	$equ	7

				.	special register names

REALTIME$_CLOCK	$equ	148	.	interrupt register 20
				.	instruction ration
				.	= effective time slice
				.	if the running task
				.	is time-sliced

				.	register increments
				.	from negative value
				.	once per instruction.
				.	on zero YIELD interrupt
				.	is automatic

				.	no action unless
				.	register 144 contains
				.	a minus value

				.	loaded at context switch
				.	the application can't
				.	write register 148

PRIORITY$	$equ	149	.	interrupt register 21
				.	quick look up of the
				.	running task priority
				.	loaded at context switch

				.	interrupt registers 22:23
DAYCLOCK$U	$equ	150	.	tick high order
DAYCLOCK$	$equ	151	.	tick low order

T$SLICE		$equ	20000	.

T$LOG*	$func
	$do	PRIORITIES<2,	$return	0
?	$do	6,	$do	1*/?>PRIORITIES-1,	$return	?
	$flag	you cannot need > 64 priorities
	$return	?
	$end

"$K_WPROTECT"	$equ	1
"$TEST_WPROTECT" $equ	0

"$MCAST_THREAD_HALT"	$equ	0800000
"$ACTIVATE"		$equ	0400000


.
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.

p	$proc
"$map"*	$name

p	$proc
word*	$name
parts	$set	p(1,1:)
"$data"	$set,$binary	p(1,1:parts)
part	$do	parts-1,	relocate	p(1, 1:part)
	$load,$bits	$data
	$end

p	$proc
relocate* $name
label1***	$pushrel	p(1,1)

v	$set	label1

bits	$set	label1\2
scale	$set	label1\3
offset	$set	label1\4
descant	$set	label1\5

	$if	$t(label1)=$equf
limit	$set	1*/bits
mask	$set	limit-1
unmask	$set	^(mask*/scale)

	$if	descant<0
field	$set	v+offset
        $info,$range_check1     field
	$info,$offset		field
field	$set	field*/descant
	$else
field	$set	v+($data/*scale)**mask
	$info,$range_check1	field
	$endif

"$data"* $set	($net(field)*/scale)++($data**unmask)

	$else

	$flag	$pushrel label type
	$trace	$t(label1)
	$trace	label1
	$endif

	$end

index	$do	p(),	word	p(index, 1)
	$end


.       
.    Copyright Tim Cox, 2012
.    TimMilesCox@gmx.ch
.
.    This file is instruction code for the freeware processor architecture
.
.                RTA1
.
.    RTA1 is a free processor architecture specification.
.
.    The executable emulation of RTA1 is free software.
.
.    This instruction code for the target RTA1 architecture is free software
.
.    Software programs delivered with this software to connect the
.    emulated RTA1 with real network interfaces in the emulator host
.    are free software
.
.    Scripts and programs delivered with this software for running
.    on other computers and interacting with the RTA1 are free software
.
.    Scripts and utility programs for constructing RTA1 target
.    executable software are free software      
.
.    You can redistribute it and/or modify RTA1
.    under the terms of the GNU General Public License as published by
.    the Free Software Foundation, either version 3 of the License, or
.    (at your option) any later version.
.
.    RTA1 is distributed in the hope that it will be useful,
.    but WITHOUT ANY WARRANTY; without even the implied warranty of
.    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.    GNU General Public License for more details.
.
.    You should have received a copy of the GNU General Public License
.    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
.
.


p	$proc
ooid*	$name

	$do	p(1, 1:)>14,	$flag	revise this macro for 3 more columns

	+	p(1, 1:3), p(1, 1:4), p(1, 1:5), ;
		p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
                p(1, 1:9), p(1, 1:10),p(1, 1:11), ;
		p(1, 1:12), p(1, 1:13),p(1, 1:14)q
	$end

p	$proc
oid*	$name
				. a literal is generated to the structure component
				. is always the pointer to literal of whichever size

	$if	p(1, 1:)<6
	+	 (p(1, 1:3), p(1, 1:4), p(1, 1:5)s)

	$elseif	p(1, 1:)<9
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8)d)

	$elseif	p(1, 1:)<12
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
		 p(1, 1:9), p(1,1:10), p(1,1:11)t)

	$elseif	p(1, 1:)<15
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
		p(1, 1:9), p(1,1:10), p(1,1:11),  p(1, 1:12), p(1,1:13), p(1,1:14)q)

	$elseif	p(1, 1:)<18
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
		 p(1, 1:9), p(1,1:10), p(1,1:11),  p(1, 1:12), p(1,1:13), p(1,1:14), ;
		 p(1, 1:15), p(1,1:16), p(1,1:17)P)	. P is uppercase
							. because you are saying 5 words
							. not referencing parameters of p
	$elseif	p(1, 1:)<21
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
		 p(1, 1:9), p(1,1:10), p(1,1:11),  p(1, 1:12), p(1,1:13), p(1,1:14), ;
		 p(1, 1:15), p(1,1:16), p(1,1:17), p(1, 1:18), p(1,1:19), p(1,1:20)h)

	$elseif	p(1, 1:)<24
	+	(p(1, 1:3), p(1, 1:4), p(1, 1:5),  p(1, 1:6), p(1, 1:7), p(1, 1:8), ;
		 p(1, 1:9), p(1,1:10), p(1,1:11),  p(1, 1:12), p(1,1:13), p(1,1:14), ;
		 p(1, 1:15), p(1,1:16), p(1,1:17), p(1, 1:18), p(1,1:19), p(1,1:20), ;
		 p(1, 1:21), p(1,1:22), p(1,1:23)z)

	$elseif	p(1, 1:)<27
	+	(p(1,1:3),p(1,1:4),p(1, 1:5),p(1,1:6),p(1,1:7),p(1,1:8), ;
		 p(1,1:9),p(1,1:10),p(1,1:11),p(1,1:12),p(1,1:13),p(1,1:14), ;
		 p(1,1:15),p(1,1:16),p(1,1:17),p(1,1:18),p(1,1:19),p(1,1:20), ;
		 p(1,1:21),p(1,1:22),p(1,1:23),p(1,1:24),p(1,1:25),p(1,1:26)o)
	$else
		flag	stem oid > 26 parts not possible
	$endif
	$end

p	$proc	$(0)
mvo*	$name
*	$tree

rw_typ_tokens_words
	+	p(2, 1:1), p(1, 1:2), advance-$
o	oid	p(1, 1)
. c	+	p(2, 1:1)
l	+	p(2, 1:2)
data
	$if	p(2, 1:1)=MIB_FUNCTION
	+       p(3, 1):s
	$else
	+	$(1)
	$endif

flags   +       MIB_WRITE_ALLOWED*((p(4)^=0)++(p(2, 1:3)^=0))++;
		MIB_READ_ALLOWED*(p(5, 1)^=-1)

bucket
ranges

	$if	(p(2, 1:1)=SNMP_STRING);
	      ++(p(2, 1:1)=SNMP_NETWORKADDRESS);
	      ++(p(2, 1:1)=SNMP_OID)
	$if	p(2, 1:3)
	+	p(2, 1:3)
	$else
	+	p(2, 1:2)//3
	$endif
	$else
	+       p(4)

range
	$sterm	':'
	$do	p(2, 1:2)<4,?	$do	p(4),	+	p(4, ?:1), p(4, ?:2):d
	$do	p(2, 1:2)>3,?	$do	p(4),	+	p(4, ?:1), p(4, ?:2):q
	$sterm	'.'

	$endif

advance
.       bucket is for strings / OIDs
.       is the maximum write size
.       is only stored on first write
.	of the managed object
.	(this is a load template constant
.	getting generated here, not the
.	managed object itself) 

.       ranges are for integers
.       ranges is the # of following tuples
.       which each indicate an allowed
.       upper/lower value on writes

.       # ranges and the range tuples
.       are only stored on first write
.	of the managed object
.	(this is a load template constant
.	getting generated here, not
.	the managed object itself)

.       ranges are 24-bit or 48-bit pairs



$(1)


p	$proc
netstring* $name
	$if	p(1, 1:>4)
	$sterm	':'
	+	p(1, 1:1), p(1, 1:2), p(1, 1:3), p(1, 1:4), p(1, 1:5), p(1, 1:6):d
	$sterm	'.'
	$else
	+	p(1, 1:1), p(1, 1:2), p(1, 1:3), p(1, 1:4), 0, 0:d
	$endif
	$end


start	$set	$net($)

	$do	p(2, 1:1)=SNMP_INT,	$do	p(2, 1:2)<4,i	+	p(3, 1):s
	$do	p(2, 1:1)=SNMP_INT,	$do	p(2, 1:2)>3,i	+	p(3, 1):d
	$do	p(2, 1:1)=SNMP_COUNTER,	$do	p(2, 1:2)<4,i	+	p(3, 1):s
	$do	p(2, 1:1)=SNMP_COUNTER,	$do	p(2, 1:2)>3,i	+	p(3, 1):d
	$do	p(2, 1:1)=SNMP_TIMETICKS, $do	p(2, 1:2)<4,i	+	p(3, 1):s
	$do	p(2, 1:1)=SNMP_TIMETICKS, $do	p(2, 1:2)>3,i	+	p(3, 1):d
	$do	p(2, 1:1)=SNMP_GAUGE,	$do	p(2, 1:2)<4,i	+	p(3, 1):s
	$do	p(2, 1:1)=SNMP_GAUGE,	$do	p(2, 1:2)>3,i	+	p(3, 1):d
	$do	p(2, 1:1)=SNMP_OID,oo	oid	p(3, 1)
	$do	p(2, 1:1)=SNMP_STRING,s		p(3, 1)
	$do	p(2, 1:1)=SNMP_NETWORKADDRESS,n	netstring	p(3, 1)

stop	$set	$net($)

	$do	stop<start+p(2, 1:3)//3,			;
		$do	start+p(2, 1:3)//3-stop,	+	0

	$root
	$end

.	that version can't be used as a void base + displacement construct
.	code is always generated because of the hard switches to $(0) and $(1)
.	so here is a shadow equivalent that can assemble void in a void segent

.	 they have to be kept in line

p	$proc
mvoi*	$name
*	$tree
words	+	p(0, 2)
o	oid	p(1, 1)
. c	+	p(2, 1:1)
l	+	$(2, 1:2)
data	+	$(1)

flags   +       MIB_WRITE_ALLOWED*((p(4)^=0)++(p(2, 1:3)^=0))++;
                MIB_READ_ALLOWED*(p(5, 1)^=-1)
bucket
ranges  +       p(4)
range
	$root
	$end

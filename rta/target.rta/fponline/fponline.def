X_EXIT		$equ	0
X_LOAD		$equ	1
X_LOAD_NEGATIVE $equ 	2
X_PUSH		$equ	3
X_ADD		$equ	4
X_ADD_NEGATIVE $equ	5
X_MULTIPLY	$equ	6
X_DIVIDE	$equ	7
X_POP_ADD	$equ	8
X_POP_ADD_NEGATIVE $equ 9
X_POP_MULTIPLY     $equ 10
X_POP_DIVIDE	$equ	11
X_SQUARE_ROOT	$equ	12
X_SINE		$equ	13
X_SQUARE	$equ	14
X_CUBE_ROOT	$equ	15
X_CUBE		$equ	16
X_COSINE	$equ	17
X_TANGENT	$equ	18
X_COTANGENT	$equ	19
X_SINE96	$equ	20
X_COSINE96	$equ	21
X_TANGENT96	$equ	22
X_COTANGENT96	$equ	23
X_FRACTION	$equ	24
X_INTEGER	$equ	25
X_CODES		$equ	26

FPONLINE_MESSAGE_LIMIT $equ 200
FPONLINE_PORT	$equ	131

"$command" $form	24, 24

f	$func
"$192"*	$name
pointer	$equf	$0(major_minor	f(1, 1))
	$return	pointer
	$end

.	4-function macros connecting fponline
.	to masmx directive $xqt_fp

.	these macros map to 4-function operators + - * / in expressions
.	starting with load = get the left side of the first expression step
.	all about getting a 192-bit floating result
.	in registers a b mantissa2 mantissa3 8 9 10 11

p	$proc
"$x_load"* $name
	$command	X_LOAD, p(1, 1)
	$end

p	$proc
"$x_load_negative"* $name
	$command	X_LOAD_NEGATIVE, p(1, 1)
	$end

p	$proc
"$x_reserve"* $name
	$command	X_PUSH, p(1, 1)
	$end

p	$proc
"$x_"* $name
	$end

p	$proc
"$x_add"* $name
	$command	X_ADD, p(1, 1)
	$end

p	$proc
"$x_subtract"* $name
	$command	X_ADD_NEGATIVE, p(1, 1)
	$end

p	$proc
"$x_multiply"* $name
	$command	X_MULTIPLY, p(1, 1)
	$end

p	$proc
"$x_divide"* $name
	$command	X_DIVIDE, p(1, 1)
	$end

p	$proc
"$x_retrieve_add"* $name
	$command	X_POP_ADD, 0
	$end

p	$proc
"$x_retrieve_subtract"* $name
	$command	X_POP_ADD_NEGATIVE, 0
	$end

p	$proc
"$x_retrieve_multiply"* $name
	$command	X_POP_MULTIPLY, 0
	$end

p	$proc
"$x_retrieve_divide"* $name
	$command	X_POP_DIVIDE, 0
	$end

.	end of 4_function macros connecting fponline
.	to masmx directive $xqt_fp



.	start of macros connecting fponline to math lib
.	these are command names
.	all about getting a 192-bit floating result
.	in registers a b mantissa2 mantissa3 8 9 10 11

p	$proc
_root*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_SQUARE_ROOT, 0
	$end

p	$proc
_square* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_SQUARE,	0
	$end

p	$proc
_root3*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_CUBE_ROOT	0
	$end

p	$proc
_cube*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_CUBE		0
	$end

p	$proc
_sine*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_SINE, 	0
	$end

p	$proc
_cosine* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_COSINE,	0
	$end

p	$proc
_tangent* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_TANGENT,	0
	$end

p	$proc
_cotan*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_COTANGENT,	0
	$end

p	$proc
__sine*	$name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_SINE96,	0
	$end

p	$proc
__cosine* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_COSINE96,	0
	$end

p	$proc
__tangent* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_TANGENT96,	0
	$end

p	$proc
__cotan* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_COTANGENT96,	0
	$end

p	$proc
_fraction* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_FRACTION,	0
	$end

p	$proc
_integer* $name
	$if		p()
	$xqt_fp,$192	p()
	$else
	$xqt_fp,$192	$TOTAL
	$endif
	$command	X_INTEGER,	0
	$end


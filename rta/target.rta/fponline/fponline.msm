
fponline $tree

UDPQ	$equ	1			. takes less space if you use
					. the socket layer interface

COMMANDS_EOP $equ d$save1		. high address commands+ in the remote assembly
ZENITH	$equ	d$save			. limit of literal table in the remote assembly
STACK_GUARD $equ d$save2
MESSAGE	$equ	d$save3

$(3)
s1		0
socket_lva	0:d
editp	+	floating_edit192
buffer	$res	200

. information	"-0.0":HT:". exponent overflow"
. information_bytes $equ	$bits/$byte

$(0)
launch	ql	(server,,,:q)
	ii	THREAD$
	jza	zstart
	lb	$3("*fponline":0),,xi
	ii	TAG$
zstart	fret

server	la	(IPPROTO_UDP*/16)
	call	(__socket)
	jna	leave			. you have no socket
	sa	s1

	c	(bind) a (FPONLINE_PORT:d),,long

.	ql	(,,,FPONLINE_PORT:q)
.	la	s1
.	call	(bind)

	jna	free_socket		. you could not bind

	$if	UDPQ
	dl	10			. this is a thread
	ds	socket_lva		. so the socket structure 
	$endif				. should stay based


	sabr	BSOCKET			. this is a thread
					. this must stay in its window

.	la	(0E00000s)
.	ii	FP_GUARD$

rxnext
	$if	UDPQ
	lb	socket_lva+1
	lb	s:udp:socket_inq:head, b
	jzb	wait

	la	floating_edit192,,xi	. default output edit
	sa	editp

	la	descriptor:bytes, b
	sa	BYTES
	la	descriptor:apdata, b
	sa	q

	la	43+7+1+2+1,,xi		. character columns largest response	
	call	(udp_rtxbuffer)
	jza	release_request

	sa	fp
	
	lx	buffer,,xi
	call	(xdr_inopaque24)	. BYTES [q]->[x]
	ly	buffer,,xi
	lcal	pdu

	lx	descriptor:apdata
	call	(wstream_start_net)
	z	BYTES
	z	WDATAC
	z	WDATA

	ii	FP_XPO$FLAG
	j	inform

	call	editp
	j	respond

inform	ly	$3("-0.0":HT:HT:". ":01b:05b:"41;1;37m":"exponent overflow":01b:05b:"0m"),,i
	lr	$bits/$byte,,xi
	call	(xdr_outopaque24)
	

respond
	$if	1
	la	0,,xi
	wsr	8
	la	BYTES
	$else
	la	(LF*/16)
	wsr	24
	la	BYTES
	la	1, a, i
	$endif

	sa	descriptor:bytes
	lx	fp
	call	(udp_acw_send)
release_request
	lx	socket_lva+1
	call	(release_udgram)
	j	rxnext

	$else
	c	(recv)	s1		;
			buffer,,xi	;
			600,,xi		;
			(UDP_AUTO_CONNECT:s)


	jna	disengage_free		. bound but not reading
	jza	wait

	ly	buffer,,xi
	lcal	pdu
	ly	buffer,,xi
	sy	p
	z	BYTES
	z	WDATAC
	z	WDATA

	ii	FP_XPO$FLAG
	j	complain

	call	(floating_edit192)

	la	(LF*/16:s)
	wsr	24

	c	(send)	s1		;
			buffer,,xi	;
			BYTES		;
			0
	$endif

wait	ii	YIELD$
	j	rxnext

disengage_free
	la	s1
	call	(net_disengage)

free_socket
	la	s1
	ii	FREE_HANDLE$
leave	ii	EXIT$

pdu	lx	sp
	sx	STACK_GUARD

	dl	0, y
	aa	-X_CODES,,xi		. does it look like an fponline PDU ?
	jnza	outrage

	la	b			. range test what this says
	aa	-FPONLINE_MESSAGE_LIMIT+8*2+2,,xi
	jc	outrage			. test maximum message less 2 operands

	ab	y			. change offset to address
	la	1, b			. $zenith function is only real
	ds	ZENITH			. after all literals have been generated on 2nd pass

	aa	-FPONLINE_MESSAGE_LIMIT,,xi
	jc	outrage

	sy	MESSAGE

command	lr	COMMANDS_EOP		. high address of commands list+
	ay	2,,xi
	jyge	exitu
	lx	0, y
	lr	X_CODES,,xi		. a known command?
	jxge	outrage
	lr	ZENITH			. message-relative end of operands
	j	$+1, x
	j	exitu
	j	fpo_load
	j	fpo_load_negative
	j	fpo_push
	j	fpo_add
	j	fpo_add_negative
	j	fpo_multiply
	j	fpo_divide
	j	fpo_pop_add
	j	fpo_pop_add_negative
	j	fpo_pop_multiply
	j	fpo_pop_divide
	j	fpo_square_root
	j	fpo_sine
	j	fpo_square
	j	fpo_cube_root
	j	fpo_cube
	j	fpo_cosine
	j	fpo_tangent
	j	fpo_cotangent
	j	fpo_sine96
	j	fpo_cosine96
	j	fpo_tangent96
	j	fpo_cotangent96
	j	fpo_fraction
	j	fpo_integer

fpo_load
	lx      1, y				. operand index
	jxge	outrage				. surely some mistake
	ax	MESSAGE				. change offset to address
	c	(fp192_load)	x
	j	command

fpo_load_negative
	lx	1, y				. operand index
	jxge	outrage
	ax	MESSAGE				. change offset to address
	c	(fp192_load_negative) x
	j	command

fpo_push
	qpush	8
	qpush	a
	j	command

fpo_add	lx      1, y				. operand index
	jxge	outrage
	ax	MESSAGE				. change offset to address
	c	(fp192_add)   x
	j	command

fpo_add_negative
	lx	1, y
	jxge    outrage
	ax	MESSAGE
	c       (fp192_add_negative)   x

.	on	fp$r
.	fa	$residue
.	off	fp$r

	j	command

fpo_multiply
	lx	1, y
	jxge	outrage
	ax	MESSAGE
	c	(fp192_multiply)   x
	j	command

fpo_divide
	lx	1, y
	jxge	outrage
	ax	MESSAGE
	c	(fp192_divide)	x
	j	command

fpo_pop_add
	c	(fp192_add)	0, sp, i
	lx	8, sp, i
	sx	sp
	j	command

fpo_pop_add_negative
	c	(fp192_add_negative)	0, sp, i
	lx	 8, sp, i
	sx	sp
	j	command

fpo_pop_multiply
	c	(fp192_multiply)	0, sp, i
	lx	8, sp, i
	sx	sp
	j	command

fpo_pop_divide
	c	 (fp192_divide)	0, sp, i
	lx	8, sp, i
	sx	sp
	j	command

fpo_square_root
	c	(square_root192)	a,,float192
	j	command

fpo_square
	c	(square192)	a,,float192
	j	command

fpo_cube_root
	c	(cube_root192)	a,,float192
	j	command

fpo_cube
	c	(cube192)	a,,float192
	j	command

fpo_sine
	c	(sine192)	a,,float192
	j	command

fpo_cosine
	c	(cosine192)	a,,float192
	j	command

fpo_tangent
	c	(tangent192)	a,,float192
	j	command

fpo_cotangent
	c	(cotangent192)	a,,float192
	j	command

fpo_sine96
	c	(sine96)		a,,float
	lcal	trigx
	j	command

fpo_cosine96
	c	(cosine96)		a,,float
	lcal	trigx
	j	command

fpo_tangent96
	c	(tangent96)	a,,float
	lcal	trigx
	j	command

fpo_cotangent96
	c	(cotangent96)	a,,float
	lcal	trigx
	j	command

fpo_fraction
	c	(fraction192)	a,,float192
	j	command

fpo_integer
	c	(integer192)	a,,float192
	j	command

trigx
	$if	1
	push	floating_edit,,xi
	$else
	push	floating_edit9p,,xi
	$endif

	pop	editp
	lret	0

outrage	ql	(-0.0)			. indicate the command list didn't make sense
	qs	8

exitu	lx	STACK_GUARD
	sx	sp

	on	fp$r
	fa	8
	off	fp$r
	lret	0

	$root

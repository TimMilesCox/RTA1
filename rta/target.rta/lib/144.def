f	$func
"$normalised"* $name
	$return	+(f(1, 3)/*f(1, 1)-1--f(1, 3)/*f(1, 2)-1)**1
	$end

f	$func
"$i_f_part"* $name	0	
"$integer"*  $name	1
"$fraction"* $name	2
	$sterm	'.'
"$parts" $set	f(1, 1:)
"$int"	$set	f(1, 1:1)
"$fra"	$set	f(1, 1:2)
	$sterm	':'
	$do	p(0, 0)="$integer",	$return	$int
	$do	p(0, 0)="$fraction",	$return	$fra
	$return	$parts
	$end


.	e$E function for applications which only want floating point
.	users may put an e in a number string and expect masmx to catch on
.	but masmx won't even realise that's floating point without a . point
.	masmx native exponent operators are *+ *- but it sees e after . point
.	e$E sees e in any number string. You get here if the input didn't normalise

f	$func
"e$E"*	$name
	$sterm	'e'
	$do	f(1, 1:)=2,	;	. 'e' between two parts
	$return	f(1, 1:1)z*+f(1, 1:2)	. 7-word floating value from DIGITSeDIGITS
	$sterm	'E'
	$do	f(1, 1:)=2,	;	. 'E' between two parts
	$return	f(1, 1:1)z*+f(1, 1:2)	. 7-word floating value from digitsEdigits
	$return	f(1, 1)z*+0		. 7-word floating value from integer string
	$end

p	$proc
major_minor* $name
f	$func
normalise* $name
?	$do	72,	$do	((f(1, 1)/*72-?)--signs)**1,	$return	?-1
	$return	?
	$end
	$do	$o('U'),	$trace	p(1, 1)

	$twos_complement 0			. in case of -LABEL where label is a floating value
sum	$set,168	p(1, 1)
	$twos_complement 1
	$if		$normalised(168,144,sum)=0
	 $if		sum=-1			. it was -0 or -0.0
	 $elseif	sum=0			. it was +0 or +0.0 , or an unavailable label
	 $elseif	$t(p(1, 1))		. integer with a name
sum	 $set,168	p(1, 1)*+0		. not a number string
	 $else
sum	 $set		e$E(p(1, 1))
	 $sterm		':'			. e$E changes $sterm
	 $endif
	$endif

signs	$set	sum*/-167
	$do	signs^=sum*/-167,	$flag	unable to fix sign correctly

	+	sum/*72q

	$if	1
residual_normalising_count	$set	normalise(sum)
	$if	residual_normalising_count<72
residual_scale	$set	(16777215**((sum--signs)/*144))-72-residual_normalising_count
	$do	residual_scale<0,	$flag	2nd exponent underflow
	$else
residual_scale	$set	0
	$endif

	+(residual_scale--signs)*/72;
	++(sum*/residual_normalising_count)**((1*/72)-1);
	++(signs**(1*/residual_normalising_count)-1)q

	$else

residual_character	$set	(signs--(sum*/-144))-72
residual_mantissa	$set	sum**(1*/72)-1
residual_normalising_count $set	normalise(residual_mantissa)
	$if	residual_normalising_count<72
	$do	residual_character-residual_normalising_count<0,	$flag	2nd exponent underflow
residual_mantissa	$set	residual_mantissa*/residual_normalising_count++signs**(1*/residual_normalising_count)-1
residual_character	$set	residual_character-residual_normalising_count--signs
	$else
residual_character	$set	signs
	$endif
	+	residual_character*/72++residual_mantissa**(1*/72)-1q
	$endif
	$end


.	calls from 48-radix routines
.	all have leftside operand in register a:b

"$$swap"
	dpush	a
	dpush	6
	qpop	a
	lret	0

.	vector name x72_xtend


	$if	1
x72xtend
	dpush	a
	dsa	48
	ds	6
	dpop	a
	fret	0
	$endif

.	vector name x72_aU

x72au	$tree

	$head_far	 params(addend2w,	long		;
				signs_length,	int	)	;
								;
			scalars(carry,	long			;	
				i47_0,	long,	a		;
				caller_x, int,	x		)

	sc	carry+1
	dl	addend2w
	lx	signs_length
	dsa	0, x		. [data word] + extended signs
	da	6
	da	carry
	ds	carry
	pop	x
	qpop	a
	fret	0

	$root
	

.	vector name x72_anU

x72anu	$tree
	$head_far	 params(subtrahend2w,		long	;
				signs_length,		int)	;
								;
			scalars(carry,	long			;
				i47_0,	long,	a		;
				caller_x, int,	x		)

	sc	carry+1
	dl	subtrahend2w
	xor	-1,,xi		. add antisigns
	xorB	-1,,xi
	lx	signs_length
	dsa	0, x
	da	carry
	da	6
	ds	carry
	pop	x
	qpop	a
	fret	0
	$root

.	vector name x72_m48_24

x48m24	$tree
	$head_far	 params(multiplier,	int)

	c	(m48_24)	multiplier

	lcal	$$swap
	$ret
	$root

.	vector name x72_m72_24[]
x72m24	$tree

	$if	1

	$head_far	 params(multiplier,	int	)

	c	(i72_multiply)	7	a,,long		multiplier
	lcal	$$swap
	$ret

	$else

	$head_far	 params(multiplier,	int	)	;
								;
			scalars(caller_8_11,	float,	8	;
				product,	long,	a	;
				productu,	long,	6	)

	c	(i72_multiply)	productu+1,,triple	multiplier	productu+1,,i

	pop	a
	pop	a
	dsa	24
	ds	6
	dpop	a
	qpop	8

	fret	0

	$endif

	$root


.	vector name x72_m48_48

x48m48	$tree
	$head_far	 params(multiplier,	long)

	c	(m48_48)	multiplier,,long
	lcal	$$swap
	$ret
	$root


.	vector name x72_m72_48

x72m48	$tree
	$head_far	 params(multiplier_i48,	long		)	;
									;
			scalars(multiplier,	float			;
				caller891011,	float,	8		;
				multiplicand,	long,	a		;
				multiplicand_u,	long,	6		;
				caller_rkxy,	float,	r		;
				mguard,		int,	fp$guard	)

	la	0,,xi
	ii	FP_GUARD$

	dl	multiplier_i48
	call	(i48_2float)
	qs	multiplier
	lx	multiplicand_u+1,,i
	call	(tripl2float)
	fm	multiplier
	call	(float2i72)
	ds	multiplicand			. multiplicand_u
	dl	6
	ds	multiplicand_u			. multiplicand

	pop	a
	ii	FP_GUARD$
	qpop	r
	qpop	a
	qpop	8
	qpop	0, sp

	fret	0
	$root

.	vector name x72_m72_72

x72m72	$tree
	$head_far	 params(multiplierp,	int		)	;
									;
                        scalars(multiplier,	float			;
				caller_891011,	float,	8		;
				multiplicand,	long,	a		;
				multiplicand_u, long,	6		;
				muser_rkxy,	float, 	r		;
                                mguard,		int,	fp$guard	)

        la      0,,xi                   . everything stays in integer range
        ii      FP_GUARD$               . with no rounding
                                        . scale return > 72 = lost significant bits

        lx      multiplierp
	call	(tripl2float)
        qs      multiplier

        lx      multiplicand_u+1,,i
        call    (tripl2float)

        fm      multiplier
        call    (float2i72)
	ds	multiplicand		. multiplicand_u
	dl	6
	ds	multiplicand_u		. multiplicand

	pop	a
	ii	FP_GUARD$
	qpop	r
	qpop	a
	qpop	8
	qpop	0, sp
	fret	0
	$root


.	vector name x72_d72_24[]

x72d24	$tree

	$head_far	 params(divisor,	int		;
				remainderp,	int	)	;
								;
			scalars(quotient,	long,	a	;
				quotientu,	long,	6	)

	c	(i72_divide)	quotientu+1,,triple	;
				divisor			;
				quotientu+1,,i		;
				remainderp

	pop	a
	pop	a
	dsa	24
	ds	6
	dpop	a

	fret	0

	$root	

.	vector name x72_d48_48

x48d48	$tree
	$head_far	 params(divisor,	long)

	c	(d48_48)	divisor,,long
	lcal	$$swap
	$ret
	$root

.	vector name x72_d72_48

x72d48	$tree
	$head_far	 params(divisor48,	long	)	;
								;
			scalars(divisor,	float		;
				caller8_11,	float,	8	;
				dividend,	long,	a	;
				dividendu,	long,	6	;
				caller_rkxy,	float,	r	;
				save_fpguard,	int,	fp$guard)

	la	0,,xi
	ii	FP_GUARD$

	dl	divisor48
	call	(i48_2float)
	qs	divisor
	lx	dividendu+1,,i
	call	(tripl2float)
	fd	divisor
	call	(float2i72)
	ds	dividend
	dl	6
	ds	dividendu

	pop	a
	ii	FP_GUARD$
	qpop	r
	qpop	a
	qpop	8
	qpop	0, sp
	fret	0

	$root

.	vector name x72_d72_72

x72d72	$tree
	$head_far	 params(divisorp,	int	)	;
								;
			scalars(divisor,	float		;
				caller_891011,	float,	8	;
				dividend,	long,	a	;
				dividendu,	long,	6	;
				caller_rkxy,	long,	r	;
				save_fpguard,	int,	fp$guard)
	la	0,,xi
	ii	FP_GUARD$

	lx	divisorp
	call	(tripl2float)
	qs	divisor
	lx	dividendu+1,,i
	call	(tripl2float)
	fd	divisor
	call	(float2i72)
	ds	dividend
	dl	6
	ds	dividendu

	pop	a
	ii	FP_GUARD$
	qpop	r
	qpop	a
	qpop	8
	qpop	0, sp
	fret	0
	$root

.	vector name x72_sl
x72sl	$tree
	$head_far	 params(countL,	int	)	;
							;
			scalars(usr89,	long,	8	;
				usrxy,	long,	x	)

	ly	3,,xi
	lx	countL
	ds	8			. copy acculumators to data LS positions

sl_again
	ax	-24,,xi			. any completely jumped data words?
	tp	x
	j	sl_round

	dpush	8
	pop	7
	pop	8
	z	9

	tz	y
	j	sl_again

	dsr	48			. no registers in scope of shift
	ds	6			. 2s complement integer
	j	sl_return		. remove anything like signs

sl_round
	ax	24,,xi
	tz	x
	lcal	sl_pullup_store
	dl	8

sl_return
	dpop	x
	dpop	8
	fret	0

sl_pullup_store
	dl	8
	push	a
	dsl	0, x
	ds	8
	pop	b
	la	7
	push	a
	dsl	0, x
	sa	7
	pop	b
	la	6
	dsl	0, x
	sa	6
	lret	0

	$endif

	$root

.	vector name x72_sa
x72sa	$tree
	$head_far	 params(countR,		int	)	;
								;
			scalars(caller_89,	long,	8	;
				caller_xy,	long,	x	)

	ly	3,,xi
	lx	countR
	ds	8			. borrow part of the lookaside area
	la	mantissa2		. this should be a word of signs
	saa	24

sa_again
	ax	-24,,xi			. roll down adding leading signs
	tp	x			. until shift distance <= 1 data word
	j	sa_round
	
	dpush	7
	pop	8
	pop	9			. until the stack comes back up
	sa	7			. add 1 word signs in front

	ay	-1,,xi
	tz	y
	j	sa_again

	dsr	48			. shift count out of range
	ds	6			. 2s complement integer
	j	sa_return		. so all - signs is not zero

sa_round
	ax	24,,xi
.	sa	6			. signs -> high order shift word. It is anyway

	tz	x			. save some work if no net bit offset
	lcal	sa_pushdown_store	. shift overlapping word pairs right
					. by shift distance /// word size
	dl	8			. get manipulated data bits 47..0
					. back into accumulators
sa_return
	dpop	x
	dpop	8
	fret	0

sa_pushdown_store
	dl	6
	push	b
	dsa	0, x
	ds	6
	pop	a
	lb	8
	push	b
	dsr	0, x
	sb	8
	pop	a
	lb	9
	dsr	0, x
	sb	9
	lret	0

	$root

.	vector name x72_orU
x72oru	$tree
	$head_far	 params(uwords,	long		;
				signs_length,	int)	;
							;
			scalars(ab,	long,	a	;
				caller_x, int,	x	)

	dl	uwords
	lx	signs_length
	dsa	0, x
	or	6
	orB	7
	ds	6
	pop	x
	dpop	a
	fret	0
	$root

.	vector name x72_andU

x72andu	$tree
	$head_far	 params(uwords,	long		;
				signs_length,	int)	;
							;
			scalars(ab,	long,	a	;
				caller_x, int,	x	)

	dl	uwords
	lx	signs_length
	dsa	0, x
	and	6
	andB	7
	ds	6
	pop	x
	dpop	a
	fret	0
	$root


.	vector name x72_xorU[]

x72xoru	$tree
	$head_far	 params(uwords,	long		;
				signs_length,	int)	;
							;
			scalars(ab,	long,	a	;
				caller_x, int,	x	)
	dl	uwords
	lx	signs_length
	dsa	0, x
	xor	6
	xorB	7
	ds	6
	pop	x
	dpop	a
	fret	0
	$root

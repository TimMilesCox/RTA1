MASMX 7r3A Build 12
3/lib_utf8.msm
*EOF*
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            49 	$list
  :                            50 
  :                            51: 	$include	register.def
  :                            52: 	$include	binary.def
  :                            53: 	$include	compress.def
  :                            54 
  :                            55 	$if	1
  :                            56: 	$include	aquiform.def
  :                            57: 	$include	ascii.def
  :                            58: 	$include	alib.def
  :                            59 	$else
  :                            60 	$include	../def/map1.def
  :                            61 	$endif
  :                            62 
  :                            63: 	$include	qrecipro.def
  :                            64 
  :                            65 
  :                            66 LIBRARY	$equ	LIBRARY_XDR
  :                            67 
  :                            68 .	this library is for a stream continuum
  :                            69 .	so nothing is set up to initialise
  :                            70 .	a field pointer of any kind
  :                            71 .	except it is a counted stream and must
  :                            72 .	do nothing if no bytes are available
  :                            73 .	and stop when it runs out of bytes
  :                            74 
  :                            75 .	this generation runs with the defaults
  :                            76 .	ASCII / UTF8, 8-bit byte
  :                            77 
  :                            78 .	the initialisation call READ_START
  :                            79 .	programs the staging registers
  :                            80 .	RDATAC+RDATA+Q to shift two bytes
  :                            81 .	per word from network buffers,
  :                            82 .	which store datalike this:
  :                            83 .	
  :                            84 .		_________________________________
  :                            85 .		| 0000 0000 XXXX xxxx XXXX xxxx |
  :                            86 .		|_______________________________|
  :                            87 
  :                            88 .	immediately on acquisition via register *q++
  :                            89 .	if bstream16r is on, RDATAC is decremented
  :                            90 .	from 24 to 16 and RDATA is shifted 8 bits
  :                            91 .	left:
  :                            92 
  :                            93 .		_________________________________
  :                            94 .		| XXXX xxxx XXXX xxxx 0000 0000 |
  :                            95 .		|_______________________________|
  :                            96 
  :                            97 
  :                            98 .	in contrast to 8 bit data in program data
  :                            99 .	which uses all 24 bits in the data word:
  :                            100 
  :                            101 .		_________________________________
  :                            102 .		| XXXX xxxx XXXX xxxx XXXX xxxx |
  :                            103 .		|_______________________________|
  :                            104 
  :                            105 .	the staging registers deliver or output
  :                            106 .	16 bits per word if PSR flags
  :                            107 
  :                            108 .		b$stream16r
  :                            109 .		b$stream16w
  :                            110 
  :                            111 .	are on, otherwise 24 bits per word
  :                            112 
  :                            113 
  :                            114 	$list	2
  :                            115 
  :                            116 .	binary and math library data character code transparent
  :                            117 
  :                            118 $(0:0:LIBRARY)
  :                            119 
00:006000 B600B3              +120 u72tofloat*	$vector	u72_float
00:006001 B600E2              +121 fraction6_7*	$vector	fraction_6_7
00:006002 B600EC              +122 madd144*	$vector	madd_144
00:006003 B60132              +123 floating_scale192* $vector apply_scale192
00:006004 B6013B              +124 floating_scale*	$vector	apply_scale
00:006005 B60370              +125 fraction3*	$vector	fraction_3
00:006006 B6037F              +126 fraction6*	$vector	fraction_6
00:006007 B603AD              +127 scale_out192*	$vector	oscale192
00:006008 B603D6              +128 scale_out*	$vector	oscale
00:006009 B600FB              +129 align192*	$vector	align_192
00:00600A B60419              +130 scale_integrate* $vector scale_integer_fraction
00:00600B B6045A              +131 n72comp2*	$vector	n72_comp2
  :                            132 
00:00600C B6052F              +133 fp192_load*	$vector	fp192lib:load
00:00600D B60536              +134 fp192_load_negative* $vector fp192lib:load_negative
00:00600E B60545              +135 fp192_add*	$vector	fp192lib:add
00:00600F B60556              +136 fp192_add_negative* $vector fp192lib:add_negative
00:006010 B6049C              +137 reciprocal192*	$vector	fp192lib:reciprocal_192
00:006011 B60572              +138 fp192_mfa*	$vector	fp192lib:heavy
00:006012 B60567              +139 fp192_multiply* $vector fp192lib:multiply
00:006013 B60594              +140 fp192_divide* $vector fp192lib:divide
  :                            141 
00:006014 B6061B              +142 i72_multiply*	$vector	i72:i_multiply
00:006015 B6062D              +143 i72_divide*	$vector	i72:i_divide
  :                            144 
00:006016 B606B9              +145 dayclock_ydsm_gmt* $vector dayclock:ydsm_gmt
00:006017 B606BF              +146 dayclock_ydsm*	$vector	dayclock:ydsm
00:006018 3D0000              +147 		fret	0	. spare vector faw yew
  :                            148 
00:006019 B606F1              +149 strlen* $vector		string8:strlena
00:00601A B6072A              +150 strlenx* $vector	string8:container
00:00601B B60746              +151 strcpy* $vector		string8:strcpya
00:00601C B60734              +152 strcat* $vector		string8:strcatena
00:00601D B60771              +153 read_octet_column* $vector oper8:read_column
  :                            154 
00:00601E B60465              +155 float2i72*	$vector	float2i
00:00601F B6060C              +156 i48_2float*	$vector	i48:_2float
00:006020 B605C8              +157 m48_24*		$vector	i48:m24
00:006021 B605D6              +158 m48_48*		$vector	i48:m48
00:006022 B605F1              +159 d48_48*		$vector	i48:d48
  :                            160 
00:006023 B606A6              +161 tripl2float*	$vector	i72_72:tripl2f
00:006024 B60666              +162 im72_72*	$vector	i72_72:multiply
00:006025 B6067B              +163 id72_72*	$vector i72_72:divide
  :                            164 
00:006026 B60817              +165 __fpp*	$vector	compress:fpcompress
00:006027 B60823              +166 __fpx*	$vector	compress:fpxpand
  :                            167 
00:006028 B60752              +168 memcat*	$vector	mstring8:memcatena
  :                            169 
  :                            170         $if     LIBRARY=LIBRARY_XDR
  :                            171 
00:006029 3D0000              +172         $do     58-$,   fret    0
00:00602A 3D0000              +172 
00:00602B 3D0000              +172 
00:00602C 3D0000              +172 
00:00602D 3D0000              +172 
00:00602E 3D0000              +172 
00:00602F 3D0000              +172 
00:006030 3D0000              +172 
00:006031 3D0000              +172 
00:006032 3D0000              +172 
00:006033 3D0000              +172 
00:006034 3D0000              +172 
00:006035 3D0000              +172 
00:006036 3D0000              +172 
00:006037 3D0000              +172 
00:006038 3D0000              +172 
00:006039 3D0000              +172 
00:00603A B60095              +173 xdr_inopaque24* $vector rx16to24
00:00603B B600A6              +174 xdr_outopaque24* $vector tx24to16
  :                            175 
00:00603C B60040              +176 ieee754_64_2float* $vector	ieee754_64_2f
00:00603D B60041              +177 float2_ieee754_64* $vector	f2_ieee754_64
  :                            178 
00:00603E B60042              +179 xdr16_ieee754_64_2float* $vector xdr_ieee754_64:float
00:00603F B6006B              +180 xdr16_float2_ieee754_64* $vector xdr_float:ieee754_64
  :                            181 
  :                            182: 	$include	xdr_bina
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 .	____________________________________________________________
  :                            40 
  :                            41 
  :                            42 .	these are used in conjunction with
  :                            43 .	hard TCP / RPC / XDR / which handle
  :                            44 .	segments fragmented over IP plus messages
  :                            45 .	fragmented over segments with record
  :                            46 .	marks
  :                            47 
  :                            48 .	external data is 24-bit in application
  :                            49 .	space typically in scratch registers or
  :                            50 .	internal stack
  :                            51 
  :                            52 
  :                            53 ieee754_64_2f
00:006040 3D0000              +54 	fret	0
  :                            55 f2_ieee754_64
00:006041 3D0000              +56 	fret	0
  :                            57 
  :                            58 .	below this line routines are available
  :                            59 .	for very simple UDP socket user programs
  :                            60 .	which access the 16-bit data in socket
  :                            61 .	buffers
  :                            62 
  :                            63 .	user datagrams have to be very short or DNF
  :                            64 .	so that no-fragments is assured for these
  :                            65 .	routines to be used safely
  :                            66 
  :                            67 
  :                            68 xdr_ieee754_64:float
00:006042 60B000              +69 	la	0, y
00:006043 6D0000              +70 	lb, xi	0
00:006044 160004              +71 	dsr	4
00:006045 F80005              +72 	push	b
00:006046 6D0000              +73 	lb, xi	0
00:006047 16000A              +74 	dsr	10
00:006048 9E004A              +75 	jao	ieee754_midpoint
00:006049 9D0FFF              +76 	orB, xi	4095
  :                            77 ieee754_midpoint
  :                            78 
00:00604A 4E000C              +79 	rbr	12
00:00604B 160002              +80 	dsr	2
00:00604C CD0002              +81 	ab, xi	2
00:00604D 600005              +82 	la	b
00:00604E 960018              +83 	dsa	24
00:00604F 200011              +84 	sa	SIGNS
00:006050 380004              +85 	pop	a
00:006051 A80833              +86 	andB	(07FFFFF)
00:006052 9F0004              +87 	dpush	a
00:006053 680011              +88 	lb	SIGNS
00:006054 2E0005              +89 	sbl	5	. signs -> b18..0 mantissa
00:006055 60B003              +90 	la	3, y
00:006056 B00011              +91 	xor	SIGNS
00:006057 160005              +92 	dsr	5	. b4..0 ieee mantissa -> 23..19
00:006058 280007              +93 	sb	7
00:006059 16000B              +94 	dsr	11	. b15..5 ieee mantissa -> 34..24
00:00605A 60B002              +95 	la	2, y
00:00605B B00011              +96 	xor	SIGNS
00:00605C 16000D              +97 	dsr	13	. b28..16 ieee mantissa -> 47..35
00:00605D 280006              +98 	sb	6
00:00605E 160003              +99 	dsr	3	. b31..29 ieee mantissa -> 50..48
00:00605F 60B001              +100 	la	1, y
00:006060 B00011              +101 	xor	SIGNS
00:006061 160010              +102 	dsr	16	. b47..32 ieee mantissa -> 66..51
00:006062 380004              +103 	pop	a
00:006063 060014              +104 	sar	20
00:006064 950010              +105 	or, xi	16
00:006065 B00011              +106 	xor	SIGNS
00:006066 160005              +107 	dsr	5	. [1]:b51..48 ieee mantissa -> 71..67
00:006067 380004              +108 	pop	a
00:006068 B00011              +109 	xor	SIGNS	
00:006069 8D0004              +110 	ay, xi	4
00:00606A 3D0000              +111 	fret	0
  :                            112 
  :                            113 xdr_float:ieee754_64
00:00606B A60070              +114 	jpa	xdr_float_upright
00:00606C B00833              +115 	xor	(07FFFFF)	. leave only the sign at 1
00:00606D 0F0005              +116 	n	b
00:00606E 0F0006              +117 	n	6
00:00606F 0F0007              +118 	n	7
  :                            119 
  :                            120 xdr_float_upright
00:006070 9F0004              +121 	dpush	a
00:006071 CF0006              +122 	dl	6
00:006072 D70834              +123 	da	(10*/16:d)	. slightly over-rounding but
  :                            124 				. that agrees with x86 PC
  :                            125 				. 8*/18 is more precise
00:006073 C70006              +126 	ds	6
00:006074 B70005              +127 	sc	b
00:006075 C8F001              +128 	ab	1, sp
00:006076 5E007B              +129 	jnc	xdr_float_around
00:006077 37F001              +130 	src	1, sp
00:006078 370006              +131 	src	6
00:006079 370007              +132 	src	7
00:00607A 17F000              +133 	inc	0, sp
  :                            134 xdr_float_around
00:00607B 380004              +135 	dpop	a		. that's enough rounding
00:00607C 380005              +135 
  :                            136 
00:00607D C5FFFE              +137 	aa, xi	-2		. change from midpoint to bias
00:00607E F80005              +138 	push	b
00:00607F 16000A              +139 	dsr	10
00:006080 06000C              +140 	sar	12		. destroy 12 exponent bits
00:006081 36000A              +141 	dsl	10
00:006082 380005              +142 	pop	b		. recover the high order mantissa
00:006083 2E0001              +143 	sbl	1		. destroy the normalising bit
00:006084 360004              +144 	dsl	4		. put 4 fraction bits in 1st word
00:006085 20B000              +145 	sa	0, y
00:006086 650000              +146 	la, xi	0
00:006087 360010              +147 	dsl	16		. put 16 fraction bits in 2nd word
00:006088 20B001              +148 	sa	1, y
00:006089 650000              +149 	la, xi	0
00:00608A 360003              +150 	dsl	3		. there are 3 fraction bits left
00:00608B 680006              +151 	lb	6
00:00608C 36000D              +152 	dsl	13		. put 16 fraction bits in 3rd word
00:00608D 20B002              +153 	sa	2, y
00:00608E 650000              +154 	la, xi	0
00:00608F 36000B              +155 	dsl	11		. put 16 fraction bits in 4th word
00:006090 680007              +156 	lb	7
00:006091 360005              +157 	dsl	5
00:006092 20B003              +158 	sa	3, y
00:006093 8D0004              +159 	ay, xi	4
00:006094 3D0000              +160 	fret	0
  :                            161 
  :                            162 rx16to24			. vector name xdr_inopaque24*
00:006095 10000C              +163 	sx	p
00:006096 50000D              +164 	lx	q
00:006097 600010              +165 	la	BYTES
00:006098 64C001              +166 	la	1, a, i
00:006099 060001              +167 	sar	1
00:00609A 400004              +168 	lr	a
00:00609B 300016              +169 	z	WDATAC
00:00609C 300017              +170 	z	WDATA
00:00609D 0D0010              +171 	off	b$stream16w
00:00609E B600A3              +172 	j	rx16to24?
  :                            173 
  :                            174 rx16to24!
00:00609F 60A000              +175 	la	0, x
00:0060A0 850001              +176 	ax	1,,xi
00:0060A1 260008              +177 	sal	8
00:0060A2 1D0010              +178 	wsr	16
  :                            179 
  :                            180 rx16to24?
00:0060A3 1E009F              +181 	jdr	rx16to24!
00:0060A4 1D0010              +182 	wsr	16
00:0060A5 3D0000              +183 	fret	0
  :                            184 
  :                            185 tx24to16			. vector name xdr_outopaque24*
00:0060A6 000010              +186 	sr	BYTES
00:0060A7 10000C              +187 	sx	p
00:0060A8 18000D              +188 	sy	q
00:0060A9 300014              +189 	z	RDATAC
00:0060AA 300015              +190 	z	RDATA
00:0060AB 0D0020              +191 	off	b$stream16r
00:0060AC 050010              +192 	on	b$stream16w
00:0060AD B600B1              +193 	j	tx24to16?
  :                            194 
  :                            195 tx24to16!
00:0060AE 150008              +196 	rsr	8
00:0060AF 260010              +197 	sal	16
00:0060B0 1D0008              +198 	wsr	8
  :                            199 	
  :                            200 tx24to16?
00:0060B1 1E00AE              +201 	jdr	tx24to16!
00:0060B2 3D0000              +202 	fret	0
  :                            203 
  :                            183         $else
  :                            184 
  :                            185         $do     64-$,   fret    0
  :                            186 
  :                            187         $endif
  :                            188 
  :                            189: 	$include	binary	. binary number manipulation same for ANY data code
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            40 
  :                            41 .	if the acquired mantissa fits in 72 bits use this conversion
  :                            42 .	because this should be integer accurate if it is correct code
  :                            43 
  :                            44 .	the technique of adding together two overlapping numbers
  :                            45 .	forces a small inaccuracy through hardware rounding. That
  :                            46 .	can't be accepted if the mantissa was 100% representable
  :                            47 .	in the first place
  :                            48 
  :                            49: 	$include	144.def
  :                            50 
  :                            51 	$set_option	"E"
  :                            52 
  :                            53 u72_float			. vector call name u72tofloat
00:0060B3 300006              +54 	z	6
00:0060B4 780009              +55 	tp	TRIPLE		. 
00:0060B5 B600BE              +56 	j	unsigned72	. allow 72-bit unsigned range 
00:0060B6 E70009              +57 	dlsc	TRIPLE		. otherwise look for a sign change
00:0060B7 450019              +58 	lr, xi	25		. from sign zero
00:0060B8 500006              +59 	lx	6
00:0060B9 F600C0              +60 	jxge	around		. bit 47 is also zero
00:0060BA 200009              +61 	sa	TRIPLE
00:0060BB CF000A              +62 	dl	TRIPLE+1	. working in unsigned at this point
00:0060BC 36A000              +63 	dsl	0, x		. rotate up to 24 zeros
00:0060BD C7000A              +64 	ds	TRIPLE+1	. into the LS 48 bits
  :                            65 unsigned72
00:0060BE 600836              +66 	la	(0400048)	. midpoint + 72 - normalising count
00:0060BF B600C4              +67 	j	exponent
00:0060C0 E7000A              +68 around	dlsc	TRIPLE+1	. rotate up to 72 zeros
00:0060C1 30000B              +69 	z	TRIPLE+2	. into all of it
00:0060C2 C70009              +70 	ds	TRIPLE
00:0060C3 600837              +71 	la	(0400030)	. midpoint + 48 - normalising count
  :                            72 exponent
00:0060C4 D00006              +73 	ana	6		. minus normalising count
00:0060C5 B00011              +74 	xor	SIGNS		. now switch to working in signed
00:0060C6 200008              +75 	sa	QUAD
00:0060C7 A600CB              +76 	jpa	signed
00:0060C8 0F0009              +77 	n	TRIPLE		. floating architecture is
00:0060C9 0F000A              +78 	n	TRIPLE+1	. ones complement
00:0060CA 0F000B              +79 	n	TRIPLE+2
00:0060CB 3D0000              +80 signed	fret	0
  :                            81 
  :                            82 	$list	3
  :                            83: 	$include fraction
  :                            1 	$if	1
  :                            2 
  :                            3 .	this routine turns a 144-bit mantissa in 6 registers
  :                            4 .	into binary data values < 1000000 in 7 registers
  :                            5 .	for editing. It works by fractional multiplies
  :                            6 
  :                            7 .	it's a replacement for a long-serving routine
  :                            8 .	which is held in reserve below
  :                            9 
  :                            10 .	this replacement is developed because the old routine
  :                            11 .	is not of methodical construction
  :                            12 .	and would be difficult to update or adapt in any way
  :                            13 
  :                            14 .	note routine madd144 reduces its way thru values fractionL
  :                            15 .	to produce sucessive values which this routine writes to responseL
  :                            16 .	then pops to fixed accumulators
  :                            17 
                                mfractions $head_near	scalars(responseL,	float192,	a	;
00:0060CC 8F0008              +19 				fractionL,	6,		6	)
00:0060CD 8F0004              +19 
00:0060CE 8F0008              +19 
00:0060CF 9F0006              +19 
  :                            20 
00:0060D0 54F007              +21 	lx	responseL+1,,i			. 2nd response word ->
  :                            22 
  :                            23 mrefract
00:0060D1 6D0000              +24 	lb	0,,xi				. madd144 needs b = zero
  :                            25 
00:0060D2 FCF005              +26 	c	(madd144)	(1000000)	fractionL,,i	fractionL+5,,i
00:0060D3 FCF001              +26 
00:0060D4 F80838              +26 
00:0060D5 FCF003              +26 
00:0060D6 FF0839              +26 
00:0060D7 38000F              +26 
  :                            27 
00:0060D8 20A000              +28 	sa	0, x				. store value [ 0..999999 ]
00:0060D9 850001              +29 	ax	1,,xi
00:0060DA 44F00E              +30 	lr	responseL+8,,i			. have we had 7 responses?
00:0060DB F600DD              +31 	jxl	mrefract			. no
00:0060DC B600D1              +31 
  :                            32 						. yes
00:0060DD FCF006              +33 	push	6, sp, i			. drop the internal stack registers
00:0060DE 38000F              +34 	pop	sp				. used by madd144
  :                            35 						. 
00:0060DF 870004              +36 	qpop	a				. write accumulators	[ (a) b  6  7 ]
00:0060E0 870008              +37 	qpop	8				. a <- unchanged	[  8  9 10 11 ]
00:0060E1 350000              +38 	lret	0
  :                            39 
  :                            40 	$else
  :                            41 
  :                            42 .	this older version below is badly constructed
  :                            43 .	but it works and takes a few words less internal stack
  :                            44 .	than the new cleaner version above
  :                            45 .	so if register stack is tight
  :                            46 .	the old routine could prevent some apps from failing
  :                            47 
  :                            48 .	that routine is set aside but not chucked out
  :                            49 .	in case it could help at some time
  :                            50 
  :                            51 .	the bad things in it are
  :                            52 
  :                            53 .	it splits and overlaps dynamic variables in a fairly bad way
  :                            54 .	which is how it saves a few internal stack registers
  :                            55 
  :                            56 .	it unrolls a macro which is not a very short macro
  :                            57 .	taking extra instruction space for no advantage in efficiency
  :                            58 
  :                            59 .	that's how it can do asymmetric kludges on params / dynamic variables
  :                            60 .	feel free to choose
  :                            61 
  :                            62 p	$proc
  :                            63 mframe*	$name
  :                            64 	lb	0,,xi
                                	c	(madd144)	(1000000)	;
                                				fraction,,i	;
  :                            67 				fraction+5,,i
  :                            68 	$do	?<4,	sa	ab67+?
  :                            69 	$do	?>3,	sa	a+?
  :                            70 	$end
  :                            71 
                                mfractions $head_near	scalars(fractioU, long,	10	;
                                				fractioM, long,	8	;
                                				fraction, long,	6	;
  :                            75 				ab67,	float,	a	)
  :                            76 ?	$do	7,	mframe
  :                            77 	ql	ab67
  :                            78 	$ret
  :                            79 
  :                            80 	$endif
  :                            81 
  :                            82 fraction_6_7
00:0060E2 3E00CC              +83 	lcal	mfractions	. produce 7 * million-radix fields
  :                            84 				. point which ones to print
00:0060E3 55000B              +85 	lx	11,,xi
00:0060E4 450006              +86 	lr	6,,xi
  :                            87 significant?
00:0060E5 70A000              +88 	tz	0, x
00:0060E6 B600E9              +89 	j	significant!
00:0060E7 85FFFF              +90 	ax	-1,,xi
00:0060E8 F600E5              +91 	jxge	significant?	. the lowest return pointer is &b
  :                            92 
  :                            93 significant!
00:0060E9 400002              +94 	lr	x		. last significant field plus 1
00:0060EA 550005              +95 	lx	b,,xi 		. always printed either 3 or 6 columns
00:0060EB 3D0000              +96 	fret	0
  :                            97 
  :                            84: 	$include madd144
  :                            1 
                                madd_144* $head_far	 params(multiplier,	int	;
                                				first_word,	int	;
                                				last_word,	int)	;
                                							;
00:0060EC F80000              +6 			scalars(caller_r,	int, r	)
  :                            7 
00:0060ED 40F005              +8 	lr	first_word
00:0060EE 58F006              +9 	ly	last_word
  :                            10 
00:0060EF 280007              +11 	sb	7
00:0060F0 300006              +12 	z	6
  :                            13 
00:0060F1 68B000              +14 madd	lb	0, y
00:0060F2 E8F004              +15 	mf	multiplier
00:0060F3 D70006              +16 	da	6
00:0060F4 28B000              +17 	sb	0, y
00:0060F5 200007              +18 	sa	7
00:0060F6 B70006              +19 	sc	6
00:0060F7 8DFFFF              +20 	ay	-1,,xi
00:0060F8 FE00F1              +21 	jyge	madd
00:0060F9 380000              +22 	pop	r
00:0060FA 3D0000              +23 	fret	0
  :                            24 
  :                            85: 	$include align192
  :                            1 align_192
00:0060FB 050008              +2 	on	fp$r
00:0060FC 670008              +3 	fa	$residue
00:0060FD 0D0008              +4 	off	fp$r
  :                            5 
00:0060FE F80004              +6 	push	a
00:0060FF A5000F              +7 	and, xi	15
00:006100 580004              +8 	ly	a	. integral shift
00:006101 380004              +9 	pop	a
00:006102 D00008              +10 	ana	8	. exponent difference
00:006103 500004              +11 	lx	a
  :                            12 
00:006104 85FFB8              +13 	ax	-72,,xi	. minor normalising count
00:006105 700002              +14 	tz	x
00:006106 3E0120              +15 	lcal	pushdown9_11	. align to major part
  :                            16 
00:006107 650000              +17 	la	0,,xi
00:006108 36B000              +18 	dsl	0, y
00:006109 F80004              +19 	push	a	. integral digit value
  :                            20 			. to return as result
  :                            21 			. gap in b to be filled from 6 MS
00:00610A 600006              +22 	la	6
00:00610B 0EB000              +23 	sbr	0, y
00:00610C 76B000              +24 	drl	0, y	. remaining bits from b uppermost
00:00610D 280006              +25 	sb	6	. first fraction word to 6
  :                            26 
00:00610E 680007              +27 	lb	7	. gap in 6 fill from 7
00:00610F 06B000              +28 	sar	0, y
00:006110 36B000              +29 	dsl	0, y	
00:006111 200007              +30 	sa	7	. 2nd fraction word to 7
  :                            31 
00:006112 600009              +32 	la	9	. gap in 7 fill from 9
00:006113 0EB000              +33 	sbr	0, y	
00:006114 76B000              +34 	drl	0, y	. remaining bits from 7 uppermost
00:006115 280008              +35 	sb	8	. third fraction word to 8
  :                            36 
00:006116 68000A              +37 	lb	10	. gap in 9 fill from 10
00:006117 06B000              +38 	sar	0, y
00:006118 36B000              +39 	dsl	0, y
00:006119 200009              +40 	sa	9	. fourth fraction word to 9
  :                            41 
00:00611A 60000B              +42 	la	11	. gap in 10 fill from 11
00:00611B 0EB000              +43 	sbr	0, y
00:00611C 76B018              +44 	drl	24, y
00:00611D C7000A              +45 	ds	10	. 5th, 6th fraction words in 10, 11
  :                            46 
00:00611E 380004              +47 	pop	a	. return integer bits	
00:00611F 3D0000              +48 	fret	0
  :                            49 
  :                            50 pushdown9_11
00:006120 F80005              +51 	push	b
00:006121 450018              +52 	lr, xi	24
00:006122 F6012B              +53 	jxge	pushdown9_10
00:006123 CF000A              +54 	dl	10
00:006124 16A000              +55 	dsr	0, x
00:006125 28000B              +56 	sb	11
00:006126 680009              +57 	lb	9
00:006127 66A000              +58 	ral	0, x
00:006128 56A018              +59 	drr	24, x
00:006129 C70009              +60 	ds	9
00:00612A B60130              +61 	j	pushdownx
  :                            62 pushdown9_10
00:00612B CF0009              +63 	dl	9
00:00612C 85FFE8              +64 	ax	-24,,xi
00:00612D 16A000              +65 	dsr	0, x
00:00612E C7000A              +66 	ds	10
00:00612F 300009              +67 	z	9
  :                            68 pushdownx
00:006130 380005              +69 	pop	b
00:006131 350000              +70 	lret	0
  :                            71 
  :                            86: 	$include udo
  :                            1 
  :                            2 apply_scale192
00:006132 280012              +3 	sb	SCALE
00:006133 4D0008              +4 	lk	8,,xi	. table increment
00:006134 55083A              +5 	lx	(lcal	scale192),,xi
00:006135 5D0220              +6 	ly	upward192,,xi
00:006136 AE0144              +7 	jpb	apply
00:006137 5D02C8              +8 	ly	downward192,,xi
00:006138 0F0012              +9 	n	SCALE
00:006139 170012              +10 	inc	SCALE
00:00613A B60144              +11 	j	apply
  :                            12 
  :                            13 apply_scale
00:00613B 280012              +14 	sb	SCALE
00:00613C 4D0004              +15 	lk	4,,xi	. table increment
00:00613D 55083B              +16 	lx	(fm	0, y),,xi
00:00613E 5D0178              +17 	ly	upward,,xi
00:00613F AE0143              +18 	jpb	apply96
00:006140 5D01CC              +19 	ly	downward,,xi
00:006141 0F0012              +20 	n	SCALE
00:006142 170012              +21 	inc	SCALE
00:006143 4F0008              +22 apply96	ql	8
  :                            23 
00:006144 450014              +24 apply	lr	21-1,,xi
  :                            25 
00:006145 370012              +26 larger?	src	SCALE
00:006146 5E0148              +27 	jnc	dont
00:006147 97A000              +28 	ex	0, x
00:006148 880001              +29 dont	ay	k	. table increment
00:006149 1E0145              +30 	jdr	larger?
00:00614A 3D0000              +31 	fret	0
  :                            32 
  :                            33 scale192
  :                            34 major	$equf	3, sp
  :                            35 minor	$equf	7, sp
  :                            36 
  :                            37 	$if	1
00:00614B FCF003              +38 	lc	flm	major,,i
00:00614C FCF001              +38 
00:00614D 3E0150              +38 
00:00614E 38000F              +38 
  :                            39 	$else
  :                            40 	ql	major
  :                            41 	on	fp$r
  :                            42 	fm	0, y
  :                            43 	qs	major
  :                            44 	ql	minor
  :                            45 	off	fp$r
  :                            46 	fm	0, y
  :                            47 	fa	$residue
  :                            48 	qs	minor
  :                            49 	$endif
00:00614F 350000              +50 	lret	0
  :                            51 
                                flm	$head_near	 params(mul192,	int)	;
                                			scalars(ux,	int,x	;
                                				tempu,	float	;
00:006150 F80002              +55 				templ,	float	)
00:006151 8F083C              +55 
00:006152 8F083C              +55 
  :                            56 
  :                            57 fmajor	$equf	0, x
  :                            58 
00:006153 50F00B              +59 	lx	mul192		. pointer to multiplicand
00:006154 4FA000              +60 	ql	fmajor		. major * major
00:006155 050008              +61 	on	fp$r
00:006156 77B000              +62 	fm	0, y
00:006157 47F004              +63 	qs	tempu
00:006158 0D0008              +64 	off	fp$r
00:006159 4FA004              +65 	ql	fmajor+4	. minor * major
00:00615A 77B000              +66 	fm	0, y
00:00615B 670008              +67 	fa	$residue	. + residue
00:00615C 47F000              +68 	qs	templ
00:00615D 4FA000              +69 	ql	fmajor		. major * minor
00:00615E 050008              +70 	on	fp$r
00:00615F 77B004              +71 	fm	4, y
00:006160 47A000              +72 	qs	fmajor
00:006161 0D0008              +73 	off	fp$r
00:006162 4FA004              +74 	ql	fmajor+4	. minor * minor
00:006163 77B004              +75 	fm	4, y
00:006164 670008              +76 	fa	$residue	. + residue
00:006165 47A004              +77 	qs	fmajor+4
00:006166 4FA000              +78 	ql	fmajor		. 2nd long product
00:006167 050008              +79 	on	fp$r
00:006168 67F004              +80 	fa	tempu		. + 1st long product
00:006169 47A000              +81 	qs	fmajor		. store major
00:00616A 0D0008              +82 	off	fp$r
00:00616B 4FA004              +83 	ql	fmajor+4	. add residue to minor
00:00616C 67F000              +84 	fa	templ
00:00616D 670008              +85 	fa	$residue
00:00616E 050008              +86 	on	fp$r
00:00616F 67A000              +87 	fa	fmajor
00:006170 0D0008              +88 	off	fp$r
00:006171 47A000              +89 	qs	fmajor
00:006172 4F0008              +90 	ql	8
00:006173 47A004              +91 	qs	fmajor+4	. store minor
00:006174 50F008              +92 	lx	ux		. restore caller pointer		
00:006175 FCF009              +93 	$ret
00:006176 38000F              +93 
00:006177 350000              +93 
  :                            94 
  :                            95 	$do	$<256,$(0:256)
  :                            96 upward
00:006178 400004A00000000000000000
                              +97 ?	$do	21,pplus(?)	1*+(1*/?-1)
00:00617C 400007C80000000000000000
                              +97 
00:006180 40000E9C4000000000000000
                              +97 
00:006184 40001BBEBC20000000000000
                              +97 
00:006188 4000368E1BC9BF0400000000
                              +97 
00:00618C 40006B9DC5ADA82B70B59DF1
                              +97 
00:006190 4000D5C2781F49FFCFA6D53D
                              +97 
00:006194 4001AA93BA47C980E98CDFC7
                              +97 
00:006198 400353AA7EEBFB9DF9DE8DDE
                              +97 
00:00619C 4006A5E319A0AEA60E91C6CD
                              +97 
00:0061A0 400D4AC976758681750C1765
                              +97 
00:0061A4 401A949E8B3B5DC53D5DE4A8
                              +97 
00:0061A8 403527C46052028A20979ACA
                              +97 
00:0061AC 406A4E96A3A1D17FAF211A0D
                              +97 
00:0061B0 40D49BB1485471F16603B563
                              +97 
00:0061B4 41A935F58A326A5783A749B4
                              +97 
00:0061B8 43526AEB81CF19F0160E7F72
                              +97 
00:0061BC 46A4D4D8A7940BFE7769BD09
                              +97 
00:0061C0 4D49A8B75B3786BAAD6104E0
                              +97 
00:0061C4 5A9350835389E324B7C31668
                              +97 
00:0061C8 75269F86BD34C256458F5081
                              +97 
  :                            98 downward
00:0061CC 3FFFFDCCCCCCCCCCCCCCCCCD
                              +99 ?	$do	21,pminus(?)	1*-(1*/?-1)
00:0061D0 3FFFFAA3D70A3D70A3D70A3E
                              +99 
00:0061D4 3FFFF3D1B71758E219652BD4
                              +99 
00:0061D8 3FFFE6ABCC77118461CEFCFE
                              +99 
00:0061DC 3FFFCBE69594BEC44DE15B4D
                              +99 
00:0061E0 3FFF96CFB11EAD453994BA68
                              +99 
00:0061E4 3FFF2CA87FEA27A539E9A540
                              +99 
00:0061E8 3FFE57DDD0467C64BCE4A0AD
                              +99 
00:0061EC 3FFCAEC0314325637A1939FB
                              +99 
00:0061F0 3FF95C9049EE32DB23D21C72
                              +99 
00:0061F4 3FF2B7A2A682A5DA57C0BD88
                              +99 
00:0061F8 3FE56DCEAE534F34362DE44A
                              +99 
00:0061FC 3FCADAA6DD04C8D2CE9FDE2E
                              +99 
00:006200 3F95B3D986C20B686DA8695D
                              +99 
00:006204 3F2B66B8D5BBE70E10851746
                              +99 
00:006208 3E56CC8573F08E5CA085E572
                              +99 
00:00620C 3CAD978B2358EBDC62806126
                              +99 
00:006210 395B2D973ECEE32168765559
                              +99 
00:006214 32B659B2B64EF19D3F7AF4C4
                              +99 
00:006218 256CB1F9840F38AD1FFA36AA
                              +99 
00:00621C 0AD962F33229BBF4226E8E51
                              +99 
  :                            100 
  :                            101 upward192
00:006220 400004A00000000000000000
                              +102 ?	$do	21,pplu192(?)	major_minor	1*+(1*/?-1)
00:006224 000000000000000000000000
                              +102 
00:006228 400007C80000000000000000
                              +102 
00:00622C 000000000000000000000000
                              +102 
00:006230 40000E9C4000000000000000
                              +102 
00:006234 000000000000000000000000
                              +102 
00:006238 40001BBEBC20000000000000
                              +102 
00:00623C 000000000000000000000000
                              +102 
00:006240 4000368E1BC9BF0400000000
                              +102 
00:006244 000000000000000000000000
                              +102 
00:006248 40006B9DC5ADA82B70B59DF0
                              +102 
00:00624C 400021800000000000000000
                              +102 
00:006250 4000D5C2781F49FFCFA6D53C
                              +102 
00:006254 40008DBF6B71C76B25FB50F8
                              +102 
00:006258 4001AA93BA47C980E98CDFC6
                              +102 
00:00625C 400161DE66D86D62026E046A
                              +102 
00:006260 400353AA7EEBFB9DF9DE8DDD
                              +102 
00:006264 40030BBB901B98FEEAB7851F
                              +102 
00:006268 4006A5E319A0AEA60E91C6CC
                              +102 
00:00626C 40065CCAB8A978A0B1F138CC
                              +102 
00:006270 400D4AC976758681750C1765
                              +102 
00:006274 400CFED3D28F18B50CE526C0
                              +102 
00:006278 401A949E8B3B5DC53D5DE4A7
                              +102 
00:00627C 401A4B9A519C65359CA4D464
                              +102 
00:006280 403527C46052028A20979AC9
                              +102 
00:006284 4034DE982A7F00949524CAEC
                              +102 
00:006288 406A4E96A3A1D17FAF211A0C
                              +102 
00:00628C 406A05F8512460BE9C240E58
                              +102 
00:006290 40D49BB1485471F16603B562
                              +102 
00:006294 40D4519B844D371B2223BA94
                              +102 
00:006298 41A935F58A326A5783A749B3
                              +102 
00:00629C 41A8EDC1068FDBAA558BA3A4
                              +102 
00:0062A0 43526AEB81CF19F0160E7F71
                              +102 
00:0062A4 435222CF55536AE2E4124BA2
                              +102 
00:0062A8 46A4D4D8A7940BFE7769BD08
                              +102 
00:0062AC 46A48B9B4B443DD0B01A39AC
                              +102 
00:0062B0 4D49A8B75B3786BAAD6104E0
                              +102 
00:0062B4 4D495DD591760E040537B318
                              +102 
00:0062B8 5A9350835389E324B7C31667
                              +102 
00:0062BC 5A9306BE361BD70FDFA9F230
                              +102 
00:0062C0 75269F86BD34C256458F5080
                              +102 
00:0062C4 752655BDD504A48B3117CEC4
                              +102 
  :                            103 downward192
00:0062C8 3FFFFDCCCCCCCCCCCCCCCCCC
                              +104 ?	$do	21,pmin192(?)	major_minor	1*-(1*/?-1)
00:0062CC 3FFFB5CCCCCCCCCCCCCCCCCD
                              +104 
00:0062D0 3FFFFAA3D70A3D70A3D70A3D
                              +104 
00:0062D4 3FFFB1E147AE147AE147AE16
                              +104 
00:0062D8 3FFFF3D1B71758E219652BD3
                              +104 
00:0062DC 3FFFABC36113404EA4A8C155
                              +104 
00:0062E0 3FFFE6ABCC77118461CEFCFD
                              +104 
00:0062E4 3FFF9EC20D2B36BA7C3D3D4E
                              +104 
00:0062E8 3FFFCBE69594BEC44DE15B4C
                              +104 
00:0062EC 3FFF81BAF9A1E626A6CEFDC8
                              +104 
00:0062F0 3FFF96CFB11EAD453994BA67
                              +104 
00:0062F4 3FFF4EDE18EDA5814AF20B5B
                              +104 
00:0062F8 3FFF2CA87FEA27A539E9A53F
                              +104 
00:0062FC 3FFEE28E635D1ECD8890A880
                              +104 
00:006300 3FFE57DDD0467C64BCE4A0AC
                              +104 
00:006304 3FFE0EF967EDA0BBB7BDC4DA
                              +104 
00:006308 3FFCAEC0314325637A1939FA
                              +104 
00:00630C 3FFC66911155FEFB5308A23F
                              +104 
00:006310 3FF95C9049EE32DB23D21C71
                              +104 
00:006314 3FF912CB4CCB8FC813539CC8
                              +104 
00:006318 3FF2B7A2A682A5DA57C0BD87
                              +104 
00:00631C 3FF26FA601586BD3F698F53F
                              +104 
00:006320 3FE56DCEAE534F34362DE449
                              +104 
00:006324 3FE523944B53CBAB4B2E0990
                              +104 
00:006328 3FCADAA6DD04C8D2CE9FDE2D
                              +104 
00:00632C 3FCA92E38123A1C3CFFC2031
                              +104 
00:006330 3F95B3D986C20B686DA8695D
                              +104 
00:006334 3F9568EA7EC2D82FA6177790
                              +104 
00:006338 3F2B66B8D5BBE70E10851745
                              +104 
00:00633C 3F2B1DDD3C128507764AA716
                              +104 
00:006340 3E56CC8573F08E5CA085E571
                              +104 
00:006344 3E56848E8C4EA73ABF7CD2B2
                              +104 
00:006348 3CAD978B2358EBDC62806125
                              +104 
00:00634C 3CAD4F91506B30320E7399F7
                              +104 
00:006350 395B2D973ECEE32168765558
                              +104 
00:006354 395AE4C007331C32BCDBF662
                              +104 
00:006358 32B659B2B64EF19D3F7AF4C3
                              +104 
00:00635C 32B6109D85E2039E763C9630
                              +104 
00:006360 256CB1F9840F38AD1FFA36A9
                              +104 
00:006364 256C68A33DF815765F258DF4
                              +104 
00:006368 0AD962F33229BBF4226E8E50
                              +104 
00:00636C 0AD9188DFD814F19B07EA18C
                              +104 
  :                            105 
  :                            87 	$list	2
  :                            88 
  :                            89 fraction_3
00:006370 ED03E8              +90         mf, xi  1000
00:006371 28000B              +91         sb      11
00:006372 200007              +92         sa      7
00:006373 300006              +93         z       6
00:006374 68000A              +94         lb      10
00:006375 ED03E8              +95         mf, xi  1000
00:006376 D70006              +96         da      6
00:006377 28000A              +97         sb      10
00:006378 200007              +98         sa      7
00:006379 B70006              +99         sc      6
00:00637A 680009              +100         lb      9
00:00637B ED03E8              +101         mf, xi  1000
00:00637C D70006              +102         da      6
00:00637D 280009              +103         sb      9
00:00637E 3D0000              +104 	fret	0
  :                            105 
  :                            106 	$if	1
  :                            107 
  :                            108 fraction_6
00:00637F 70000B              +109 	tz	11
00:006380 B60392              +110 	j	raise3w
00:006381 70000A              +111 	tz	10
00:006382 B60387              +112 	j	raise2w
  :                            113 
00:006383 680009              +114 	lb	9
00:006384 E80838              +115 	mf	(1000000)
00:006385 200009              +116 	sa	9
00:006386 3D0000              +117 	fret	0
  :                            118 
00:006387 300006              +119 raise2w	z	6
00:006388 300007              +120 	z	7
00:006389 3E03A2              +121 	lcal	double_mf
00:00638A F80004              +122 	push	a
00:00638B 300006              +123 	z	6
00:00638C 300007              +124 	z	7
00:00638D 3E03A2              +125 	lcal	double_mf
00:00638E 70000A              +126 	tz	10
00:00638F 20000A              +127 	sa	10
00:006390 380009              +128 	pop	9
00:006391 3D0000              +129 	fret	0
  :                            130 
00:006392 3E039C              +131 raise3w	lcal	triple_mf
00:006393 F80004              +132 	push	a
00:006394 3E039C              +133 	lcal	triple_mf
00:006395 F80004              +134 	push	a
00:006396 3E039C              +135 	lcal	triple_mf
00:006397 700008              +136 	tz	8		. 11 before operation
00:006398 20000B              +137 	sa	11
00:006399 38000A              +138 	pop	10
00:00639A 380009              +139 	pop	9
00:00639B 3D0000              +140 	fret	0
  :                            141 
  :                            142 triple_mf
00:00639C 68000B              +143         lb      11
00:00639D 280008              +144 	sb	8		. 11 before operation
00:00639E E80838              +145         mf      (1000000)
00:00639F 28000B              +146 	sb	11
00:0063A0 200007              +147         sa      7
00:0063A1 300006              +148         z       6
  :                            149 double_mf
00:0063A2 68000A              +150 	lb      10
00:0063A3 E80838              +151         mf      (1000000)
00:0063A4 D70006              +152         da      6
00:0063A5 28000A              +153         sb      10
00:0063A6 200007              +154         sa      7
00:0063A7 B70006              +155         sc      6
00:0063A8 680009              +156         lb      9
00:0063A9 E80838              +157         mf      (1000000)
00:0063AA D70006              +158         da      6
00:0063AB 280009              +159         sb      9
00:0063AC 350000              +160 	lret	0
  :                            161 
  :                            162 	$else
  :                            163 
  :                            164 fraction_6
  :                            165 	lb	11
  :                            166 	mf	(1000000)
  :                            167 	sa	7
  :                            168 	z	6
  :                            169 	lb	10
  :                            170 	mf	(1000000)
  :                            171 	da	6
  :                            172 	sb	10
  :                            173 	sa	7
  :                            174 	sc	6
  :                            175 	lb	9
  :                            176 	mf	(1000000)
  :                            177 	da	6
  :                            178 	sb	9
  :                            179 	push	a
  :                            180 
  :                            181 
  :                            182 	lb	10
  :                            183 	mf	(1000000)
  :                            184 	sb	10
  :                            185 	sa	7
  :                            186 	z	6
  :                            187 	lb	9
  :                            188 	mf	(1000000)
  :                            189 	da	6
  :                            190 	sa	10
  :                            191 
  :                            192 	mf	(1000000)
  :                            193 	sa	9
  :                            194 
  :                            195 	pop	11
  :                            196 	fret	0
  :                            197 
  :                            198 	$endif
  :                            199 
  :                            200 	$list	3
  :                            201: 	$include	oscale
  :                            1 oscale192
00:0063AD 550840              +2 	lx	(lcal	uprate192),,xi
00:0063AE 5D0220              +3 	ly	pplu192(1),,xi
00:0063AF 450008              +4 	lr	8,,xi
00:0063B0 3E03E0              +5 	lcal	scale_up
00:0063B1 550841              +6 	lx	(lcal	trialm192),,xi
00:0063B2 5D0368              +7 	ly	pmin192(21),,xi
00:0063B3 45FFF8              +8 	lr	-8,,xi
00:0063B4 3E03EF              +9 	lcal	scale_down
  :                            10 
00:0063B5 050008              +11 	on	fp$r
00:0063B6 670008              +12 	fa	$residue
00:0063B7 0D0008              +13 	off	fp$r
  :                            14 
00:0063B8 3E03C7              +15 	lcal	not2high192
00:0063B9 B603C6              +16 	j	scale192_out
00:0063BA 8F0008              +17 	qpush	8
00:0063BB 050008              +18 	on	fp$r
00:0063BC 770842              +19 	fm	(1*+1)
00:0063BD 0D0008              +20 	off	fp$r
00:0063BE 8F0004              +21 	qpush	a
00:0063BF 4FF004              +22 	ql	4, sp
00:0063C0 770842              +23 	fm	(1*+1)
00:0063C1 670008              +24 	fa	$residue
00:0063C2 47F004              +25 	qs	4, sp
00:0063C3 870004              +26 	qpop	a
00:0063C4 870008              +27 	qpop	8
00:0063C5 1F0012              +28 	dec	SCALE
  :                            29 scale192_out
00:0063C6 3D0000              +30 	fret	0
  :                            31 
  :                            32 not2high192
00:0063C7 4DFFFF              +33 	lk	-1,,xi
00:0063C8 AF0846              +34 	mta	(0400000)
00:0063C9 350000              +35 	lret	0		. not at midpoint: don't raise by 10
00:0063CA F80005              +36 	push	b
00:0063CB A80006              +37 	andB	6		. logical difference 6 mantissa words
00:0063CC A80007              +38 	andB	7
00:0063CD A80009              +39 	andB	9
00:0063CE A8000A              +40 	andB	10
00:0063CF A8000B              +41 	andB	11
00:0063D0 BDFFFF              +42 	xorB	-1,,xi		. all 1s -> zero
00:0063D1 480005              +43 	lk	b
00:0063D2 380005              +44 	pop	b
00:0063D3 700001              +45 	tz	k
00:0063D4 350001              +46 	lret	1		. not all 1s: raise by 10
00:0063D5 350000              +47 	lret	0		. all 1s: don't raise by 10
  :                            48 
  :                            49 oscale
00:0063D6 550847              +50 	lx	(fm	upward, y),,xi
00:0063D7 450004              +51 	lr	4,,xi
00:0063D8 5D0000              +52 	ly	0,,xi
00:0063D9 3E03E0              +53 	lcal	scale_up
00:0063DA 550848              +54 	lx	(fm	downward, y),,xi
00:0063DB 5D0050              +55 	ly	pminus(21)-pminus(1),,xi
00:0063DC 45FFFC              +56 	lr	-4,,xi
00:0063DD 3E03EF              +57 	lcal	scale_down
00:0063DE 470008              +58 	qs	8
00:0063DF 3D0000              +59 	fret	0
  :                            60 
  :                            61 scale_up
00:0063E0 480846              +62 	lk	(0400000)
00:0063E1 300012              +63 	z	SCALE
00:0063E2 0F0012              +64 	n	SCALE
00:0063E3 F80000              +65 	push	r
00:0063E4 450014              +66 	lr	21-1,,xi
  :                            67 
00:0063E5 AF0849              +68 rescale	mta	(0)
00:0063E6 B603EC              +69 	j	midpoint
00:0063E7 97A000              +70 	ex	0, x
00:0063E8 88F000              +71 	ay	0, sp
00:0063E9 0D0001              +72 	off	carry$
00:0063EA 3F0012              +73 	slc	SCALE
00:0063EB 1E03E5              +74 	jdr	rescale
  :                            75 
  :                            76 midpoint
00:0063EC 170012              +77 	inc	SCALE
00:0063ED 380000              +78 	pop	r
00:0063EE 350000              +79 	lret	0
  :                            80 
  :                            81 scale_down
00:0063EF F80000              +82 	push	r
00:0063F0 450014              +83 	lr	21-1,,xi
00:0063F1 FD0000              +84 	push	0,,xi
  :                            85 
  :                            86 scale_down?
00:0063F2 8F0004              +87 	qpush	a
00:0063F3 97A000              +88 	ex	0, x
00:0063F4 0D0001              +89 	off	carry$
00:0063F5 AF0846              +90 	mta	(0400000)
00:0063F6 B603F9              +91 	j	scale_under
00:0063F7 050001              +92 	on	carry$
00:0063F8 47F000              +93 	qs	0, sp
  :                            94 scale_under
00:0063F9 3FF004              +95 	slc	4, sp
00:0063FA 870004              +96 	qpop	a
00:0063FB 88F001              +97 	ay	1, sp
00:0063FC 1E03F2              +98 	jdr	scale_down?
00:0063FD 2F0012              +99 	popA	SCALE
00:0063FE 380000              +100 	pop	r
00:0063FF 350000              +101 	lret	0
  :                            102 
  :                            103 
  :                            104 trialm192
00:006400 8F0008              +105 	qpush	8
00:006401 8F0008              +106 	qpush	8
00:006402 8F0004              +107 	qpush	a
00:006403 FCF000              +108 	lc	flm	0,sp,i
00:006404 FCF001              +108 
00:006405 3E0150              +108 
00:006406 38000F              +108 
00:006407 60F000              +109 	la	0, sp		. retrieve the resulting exponent
00:006408 AF0846              +110 	mta	(0400000)
00:006409 B6040C              +111 	j	trialx192	. keep the old values
00:00640A 4F0008              +112 	ql	8		. take the new minor product
00:00640B 47F008              +113 	qs	8, sp
  :                            114 trialx192
00:00640C 870004              +115 	qpop	a
00:00640D 870008              +116 	qpop	8
00:00640E 870008              +117 	qpop	8
00:00640F 350000              +118 	lret	0
  :                            119 
  :                            120 uprate192			. no test involved
00:006410 8F0008              +121 	qpush	8
00:006411 8F0004              +122 	qpush	a
00:006412 FCF000              +123 	lc	flm	0,sp,i
00:006413 FCF001              +123 
00:006414 3E0150              +123 
00:006415 38000F              +123 
00:006416 870004              +124 	qpop	a
00:006417 870008              +125 	qpop	8
00:006418 350000              +126 	lret	0
  :                            127 
  :                            202 	$list	2
  :                            203 
  :                            204 scale_integer_fraction
  :                            205 	.	if scale < midpoint + 73 pull up integral part
  :                            206 	.	in b:6:7
  :                            207 	.	set scale to midpoint and return + 1 instruction
  :                            208 	.	else return to instruction after call
  :                            209 
  :                            210 	.	the number must be represented positive
  :                            211 
00:006419 500008              +212 	lx	8
00:00641A 40084A              +213 	lr	(0400049)
00:00641B F60422              +214 	jxge	scale_outside_integer
  :                            215 
00:00641C 40084B              +216 	lr	(0400031)
00:00641D F60446              +217 	jxge	scale72
  :                            218 
00:00641E 40084C              +219 	lr	(0400019)
00:00641F F60434              +220 	jxge	scale48
  :                            221 
00:006420 40084D              +222 	lr	(0400001)
00:006421 F60423              +223 	jxge	scale24
  :                            224 
  :                            225 scale_outside_integer
00:006422 3D0000              +226 	fret	0
  :                            227 
00:006423 80084E              +228 scale24	ax	(-0400000)
  :                            229 
00:006424 650000              +230 	la, xi	0
00:006425 68000B              +231 	lb	11
00:006426 36A000              +232 	dsl	0, x		. displacement sought
00:006427 28000B              +233 	sb	11		. shifted mantissa3
00:006428 68000A              +234 	lb	10
00:006429 46A000              +235 	rar	0, x
00:00642A 76A000              +236 	drl	0, x		. bits shifted out
00:00642B 28000A              +237 	sb	10		. shifted mantissa2
00:00642C 680009              +238 	lb	9
00:00642D 46A000              +239 	rar	0, x
00:00642E 76A000              +240 	drl	0, x		. bits shifted round
00:00642F 280009              +241 	sb	9		. to mantissa1 lower
00:006430 200007              +242 	sa	7		. ms bits to integer
00:006431 300006              +243 	z	6
00:006432 6D0000              +244 	lb, xi	0
  :                            245 
00:006433 B60457              +246 	j	scale_in_order
  :                            247 
00:006434 80084F              +248 scale48	ax	(-0400018)
  :                            249 
00:006435 650000              +250 	la, xi	0
00:006436 68000B              +251 	lb	11
00:006437 30000B              +252 	z	11		. mantissa3 all bits shifted
00:006438 F80009              +253 	push	9
00:006439 F8000A              +254 	push	10
00:00643A 36A000              +255 	dsl	0, x		. displacement - 24
00:00643B 28000A              +256 	sb	10		. ahifted mantissa2
00:00643C 380005              +257 	pop	b
00:00643D 46A000              +258 	rar	0, x		. bits shifted up
00:00643E 76A000              +259 	drl	0, x		. to mantissa1 lower
00:00643F 280009              +260 	sb	9
  :                            261 
00:006440 380005              +262 	pop	b
00:006441 46A000              +263 	rar	0, x
00:006442 76A000              +264 	drl	0, x		. ms bits to integer
00:006443 C70006              +265 	ds	6
00:006444 6D0000              +266 	lb, xi	0
  :                            267 
00:006445 B60457              +268 	j	scale_in_order
  :                            269 
00:006446 800850              +270 scale72	ax	(-0400030)
  :                            271 
00:006447 650000              +272 	la, xi	0		. integer bits < 72
00:006448 68000B              +273 	lb	11
00:006449 30000B              +274 	z	11
00:00644A 36A000              +275 	dsl	0, x		. shift displacement - 48
00:00644B F80009              +276 	push	9
00:00644C 280009              +277 	sb	9
00:00644D 68000A              +278 	lb	10
00:00644E 30000A              +279 	z	10		. mantissa2..3 all bits shifted
00:00644F 46A000              +280 	rar	0, x		. low integer bits in ms positions a
00:006450 76A000              +281 	drl	0, x		. low integer bits in ls positions b
00:006451 280007              +282 	sb	7		. write integer ls word
00:006452 380005              +283 	pop	b
00:006453 46A000              +284 	rar	0, x		. next word ls bits in ms positions a
00:006454 76A000              +285 	drl	0, x		. next word ls bits in ls positions b
  :                            286 
00:006455 280006              +287 	sb	6		. write integer ms 48 bits
00:006456 160018              +288 	dsr	24
  :                            289 
  :                            290 scale_in_order
00:006457 600846              +291 	la	(0400000)
00:006458 200008              +292 	sa	8
00:006459 3D0001              +293 	fret	1
  :                            294 
  :                            295 n72_comp2
00:00645A 3E045C              +296 	lcal	triverse
00:00645B 3D0000              +297 	fret	0
  :                            298 
  :                            299 triverse
00:00645C F80005              +300 	push	b
00:00645D 160030              +301 	dsr	48
00:00645E DF0006              +302 	dan	6
00:00645F C70006              +303 	ds	6
00:006460 380005              +304 	pop	b
00:006461 B70004              +305 	sc	a
00:006462 0F0005              +306 	n	b
00:006463 C80004              +307 	ab	a
00:006464 350000              +308 	lret	0
  :                            190: 	$include	float2i
  :                            1 float2i	$tree			. vector name float2i72
  :                            2 
00:006465 500004              +3 	lx	a
00:006466 780002              +4 	tp	x		. obtain magnitude exponent
00:006467 0F0002              +5 	n	x
00:006468 80084E              +6 	ax	(-0400000)	. net of midpoint
00:006469 700002              +7 	tz	x		. nothing
00:00646A 780002              +8 	tp	x		. or less
00:00646B B60471              +9 	j	all_fraction	. = no integral part
00:00646C 450090              +10 	lr	144,,xi
00:00646D F60471              +11 	jxge	too_astronomic	. no part can be represented
  :                            12 				. in 72 bits
00:00646E 450049              +13 	lr	73,,xi
00:00646F 860018              +14 	saa	24
00:006470 B60479              +15 	j	promote?
  :                            16 
  :                            17 all_fraction
  :                            18 too_astronomic
00:006471 160030              +19 	dsr	48		. that's all we can tell you
00:006472 C70006              +20 	ds	mantissa2	. for trace residues
00:006473 B6049B              +21 	j	away		. call (float2ix72) instead
  :                            22 
  :                            23 promote!
00:006474 9F0006              +24 	dpush	mantissa2	. this is abandoning
00:006475 200007              +25 	sa	mantissa3	. significant bits
00:006476 380005              +26 	pop	b
00:006477 380006              +27 	pop	mantissa2
00:006478 85FFE8              +28 	ax	-24,,xi
  :                            29 
  :                            30 promote?
00:006479 F60474              +31 	jxge	promote!
  :                            32 				. x = significant bits count 0..72
  :                            33 				. a = signs
  :                            34 				. b:6:7 = LJus integer
00:00647A 450048              +35 	lr	72,,xi
00:00647B F60491              +36 	jxge	maximal		. no manipulation needed
00:00647C 450030              +37 	lr	48,,xi		. shift right sign fill [ 72 - x ]
  :                            38 
  :                            39 pushdown
00:00647D F60484              +40 	jxge	level
00:00647E 9F0005              +41 	dpush	b
00:00647F 200005              +42 	sa	b		. insert a word of signs in front
  :                            43 
00:006480 380006              +44 	dpop	mantissa2
00:006481 380007              +44 
  :                            45 
00:006482 850018              +46 	ax	24,,xi
00:006483 B6047D              +47 	j	pushdown
  :                            48 
00:006484 0F0002              +49 level	n	x		. x = 72 - x
00:006485 850049              +50 	ax	72+1,,xi
  :                            51 
00:006486 9F0004              +52 	dpush	a
00:006487 CF0006              +53 	dl	mantissa2
00:006488 16A000              +54 	dsr	0, x
00:006489 280007              +55 	sb	mantissa3	. [ 6 7 ] /* [x] -> 7
00:00648A 680006              +56 	lb	mantissa2
00:00648B 60F001              +57 	la	1, sp		. b before
00:00648C 16A000              +58 	dsr	0, x
00:00648D 280006              +59 	sb	mantissa2	. [ b 6 ] /* [x] -> 6
00:00648E 380004              +60 	dpop	a
00:00648F 380005              +60 
00:006490 96A000              +61 	dsa	0, x
  :                            62 
00:006491 A6049B              +63 maximal	jpa	away		. 2s & 1s-comp + values are identical
00:006492 9F0004              +64 	dpush	a		. for - values add 1 sign bit
00:006493 16002F              +65 	dsr	47		. to the 96-bit value
00:006494 D70006              +66 	da	mantissa2
00:006495 C70006              +67 	ds	mantissa2	. of which 24+ bits are leading signs
  :                            68 
00:006496 B70005              +69 	sc	b		. the 48-bit add carry
00:006497 300004              +70 	z	a
00:006498 D7F000              +71 	da	0, sp
  :                            72 
00:006499 17000F              +73 	inc	sp
00:00649A 17000F              +74 	inc	sp
  :                            75 
00:00649B 3D0000              +76 away	fret	0
  :                            77 
  :                            78 	$root
  :                            191: 	$include	fp192lib
  :                            1 
  :                            2 fp192lib $tree
  :                            3 
  :                            4 	$list		3
  :                            5: 	$include	recipro1.msm
  :                            1 
  :                            2 .	192-bit floating reciprocal routine
  :                            3 
  :                            4 .	very long and plodding, but has at least established
  :                            5 .	the mantissa can successfully be reciprocated
  :                            6 .	in a separate step from reciprocating the exponent
  :                            7 .	which is a fortunate discovery for writing 
  :                            8 .	any smarter reciprocal routine
  :                            9         
  :                            10 .	used for dividing 192 bits by 192 bits
  :                            11 .	multiply by 192-bit reciprocal of the divisor 
  :                            12 .	is done instead
  :                            13 
  :                            14 
  :                            15 
                                reciprocal_192 $head_far	 params(dzor,		float192)	;
                                				scalars(reciprocal,	float192	;
                                					rzemainder,	float192	;
00:00649C 8F083C              +19 					us_rkxy,	float,	r	)
00:00649D 8FF000              +19 
00:00649E 8F083C              +19 
00:00649F 8FF000              +19 
00:0064A0 8F0000              +19 
00:0064A1 60F017              +20 	la	dzor
00:0064A2 A604AC              +21 	jpa	turn_up
  :                            22 
00:0064A3 0FF00C              +23 	n	reciprocal
00:0064A4 0FF017              +24 	n	dzor
00:0064A5 0FF018              +25 	n	dzor+1
00:0064A6 0FF019              +26 	n	dzor+2
00:0064A7 0FF01A              +27 	n	dzor+3
00:0064A8 0FF01B              +28 	n	dzor+4
00:0064A9 0FF01C              +29 	n	dzor+5
00:0064AA 0FF01D              +30 	n	dzor+6
00:0064AB 0FF01E              +31 	n	dzor+7
  :                            32 
00:0064AC 60F01C              +33 turn_up	la	dzor+5	. is any minor number normalised?
00:0064AD D604B0              +34 	jnza	turn
00:0064AE 30F01B              +35 	z	dzor+4	. positively absolutely zero the characteristic
00:0064AF B604CC              +36 	j	sok	. just in case. Then don't move anything anywhere
  :                            37 
00:0064B0 60F017              +38 turn	la	dzor	. midpointed positive characteristic
00:0064B1 D0F01B              +39 	ana	dzor+4	. magnitude characteristic difference
00:0064B2 C5FFB8              +40 	aa	-72,,xi	. normalising count second mantissa
00:0064B3 500004              +41 	lx	a
00:0064B4 450018              +42 	lr	24,,xi
00:0064B5 F604C3              +43 	jxge	s24plus	. normalising shift >= 1 word
  :                            44 
00:0064B6 60F01E              +45 	la	dzor+7	. includes the no-shift case
00:0064B7 6D0000              +46 	lb	0,,xi
00:0064B8 16A000              +47 	dsr	0, x
00:0064B9 28F01E              +48 	sb	dzor+7
00:0064BA 68F01D              +49 	lb	dzor+6
00:0064BB 26A000              +50 	sal	0, x
00:0064BC 56A000              +51 	drr	0, x
00:0064BD 20F01D              +52 	sa	dzor+6
00:0064BE 60F01C              +53 	la	dzor+5
00:0064BF 2EA000              +54 	sbl	0, x
00:0064C0 16A000              +55 	dsr	0, x
00:0064C1 C7F01B              +56 	ds	dzor+4
  :                            57 
00:0064C2 B604CC              +58 	j	sok
  :                            59 
00:0064C3 CFF01D              +60 s24plus	dl	dzor+6
00:0064C4 85FFE8              +61 	ax	-24,,xi
00:0064C5 16A000              +62 	dsr	0, x
00:0064C6 28F01E              +63 	sb	dzor+7
00:0064C7 68F01C              +64 	lb	dzor+5
00:0064C8 26A000              +65 	sal	0, x
00:0064C9 56A018              +66 	drr	24, x
00:0064CA C7F01C              +67 	ds	dzor+5
00:0064CB 30F01B              +68 	z	dzor+4
  :                            69 
00:0064CC 0FF01E              +70 sok	n	dzor+7
00:0064CD 0FF01D              +71 	n	dzor+6
00:0064CE 0FF01C              +72 	n	dzor+5
00:0064CF 0FF01B              +73 	n	dzor+4
00:0064D0 0FF01A              +74 	n	dzor+3
00:0064D1 0FF019              +75 	n	dzor+2
00:0064D2 0FF018              +76 	n	dzor+1
  :                            77 
00:0064D3 600851              +78 	la	(0800000s)
00:0064D4 20F005              +79 	sa	rzemainder+1
  :                            80 
00:0064D5 600093              +81 	la	fp$guard
00:0064D6 20F00B              +82 	sa	rzemainder+7
  :                            83 
00:0064D7 4500A8              +84 	lr	169-1,,xi
  :                            85 
  :                            86 trial_add
00:0064D8 6D0001              +87 	lb	1,,xi
00:0064D9 650000              +88 	la	0,,xi
00:0064DA D7F00A              +89 	da	rzemainder+6
00:0064DB B70001              +90 	sc	k
00:0064DC D7F01D              +91 	da	dzor+6
00:0064DD C7000A              +92 	ds	10
00:0064DE B70005              +93 	sc	b
00:0064DF C80001              +94 	ab	k
00:0064E0 650000              +95 	la	0,,xi
00:0064E1 D7F008              +96 	da	rzemainder+4
00:0064E2 B70001              +97 	sc	k
00:0064E3 D7F01B              +98 	da	dzor+4
00:0064E4 C70008              +99 	ds	8
00:0064E5 B70005              +100 	sc	b
00:0064E6 C80001              +101 	ab	k
00:0064E7 650000              +102 	la	0,,xi
00:0064E8 D7F006              +103 	da	rzemainder+2
00:0064E9 B70001              +104 	sc	k
00:0064EA D7F019              +105 	da	dzor+2
00:0064EB C70006              +106 	ds	6
00:0064EC B70005              +107 	sc	b
00:0064ED C80001              +108 	ab	k
00:0064EE C8F005              +109 	ab	rzemainder+1
00:0064EF B70001              +110 	sc	k
00:0064F0 C8F018              +111 	ab	dzor+1
00:0064F1 700001              +112 	tnz	k
00:0064F2 B604F4              +112 
  :                            113 
00:0064F3 5E04F9              +114 	jnc	insert_reciprocal
00:0064F4 28F005              +115 	sb	rzemainder+1
00:0064F5 CF0006              +116 	dl	6
00:0064F6 C7F006              +117 	ds	rzemainder+2
00:0064F7 4F0008              +118 	ql	8
00:0064F8 47F008              +119 	qs	rzemainder+4
  :                            120 
  :                            121 insert_reciprocal
00:0064F9 3FF013              +122 	slc	reciprocal+7
00:0064FA 3FF012              +123 	slc	reciprocal+6
00:0064FB 3FF011              +124 	slc	reciprocal+5
00:0064FC 3FF010              +125 	slc	reciprocal+4
00:0064FD 3FF00F              +126 	slc	reciprocal+3
00:0064FE 3FF00E              +127 	slc	reciprocal+2
00:0064FF 3FF00D              +128 	slc	reciprocal+1
  :                            129 
00:006500 050001              +130 	on	carry$
  :                            131 
00:006501 37F018              +132 	src	dzor+1
00:006502 37F019              +133 	src	dzor+2
00:006503 37F01A              +134 	src	dzor+3
00:006504 37F01B              +135 	src	dzor+4
00:006505 37F01C              +136 	src	dzor+5
00:006506 37F01D              +137 	src	dzor+6
00:006507 37F01E              +138 	src	dzor+7
  :                            139 
00:006508 1E04D8              +140 	jdr	trial_add
  :                            141 
00:006509 60F00C              +142 	la	reciprocal
00:00650A 200011              +143 	sa	SIGNS
  :                            144 
00:00650B 60F00D              +145 	la	reciprocal+1
00:00650C 200009              +146 	sa	TRIPLE
00:00650D CFF00E              +147 	dl	reciprocal+2
00:00650E C7000A              +148 	ds	TRIPLE+1
00:00650F FF0852              +149 	call	(u72tofloat)
00:006510 4F0008              +150 	ql	QUAD
00:006511 47F00C              +151 	qs	reciprocal
  :                            152 
00:006512 60F010              +153 	la	reciprocal+4
00:006513 200009              +154 	sa	TRIPLE
00:006514 CFF011              +155 	dl	reciprocal+5
00:006515 C7000A              +156 	ds	TRIPLE+1
00:006516 FF0852              +157 	call	(u72tofloat)
00:006517 4F0008              +158 	ql	QUAD
00:006518 47F010              +159 	qs	reciprocal+4
  :                            160 
00:006519 60F017              +161 	la	dzor		. this exponent is positive
00:00651A B00833              +162 	xor	(07FFFFF)
00:00651B C50002              +163 	aa	2,,xi
  :                            164 
00:00651C 68F010              +165 	lb	reciprocal+4	. u72tofloat signed this exponent
00:00651D D8F00C              +166 	anb	reciprocal	. get the minus of the normalising count
00:00651E B80011              +167 	xorB	SIGNS
00:00651F 780011              +168 	tp	SIGNS
00:006520 CD0001              +169 	ab	1,,xi
00:006521 C80004              +170 	ab	a
00:006522 CDFFB8              +171 	ab	-72,,xi		. and lessify
  :                            172 
00:006523 B00011              +173 	xor	SIGNS
00:006524 B80011              +174 	xorB	SIGNS
00:006525 20F00C              +175 	sa	reciprocal
00:006526 28F010              +176 	sb	reciprocal+4
  :                            177 	
00:006527 050008              +178 	on	fp$r
00:006528 4FF00C              +179 	ql	reciprocal
00:006529 67F010              +180 	fa	reciprocal+4
00:00652A 0D0008              +181 	off	fp$r
00:00652B 870000              +182 	qpop	r
  :                            183 
00:00652C FCF010              +184 	push	8+8, sp, i
00:00652D 38000F              +185 	pop	sp
00:00652E 3D0000              +186 	fret	0
  :                            187 
  :                            6 
  :                            7 _INTENSIFY	$set	0		
  :                            8 
  :                            9 
                                load	$head_far	 params(from1, int)		;
00:00652F F80002              +11 			scalars(l_user_x, int, x	)
00:006530 50F004              +12 	lx	from1
00:006531 4FA004              +13 	ql	4, x
00:006532 470008              +14 	qs	8
00:006533 4FA000              +15 	ql	0, x
00:006534 380002              +16 	pop	x
00:006535 3D0000              +17 	fret	0
  :                            18 
                                load_negative $head_far	 params(from2, int)		;
00:006536 F80002              +20 			scalars(lnuser_x, int, x	)
00:006537 50F004              +21 	lx	from2
00:006538 4FA004              +22 	ql	4, x
00:006539 470008              +23 	qs	8
00:00653A 4FA000              +24 	ql	0, x
  :                            25 
00:00653B 0F0004              +26 	n	a
00:00653C 0F0005              +27 	n	b
00:00653D 0F0006              +28 	n	mantissa2
00:00653E 0F0007              +29 	n	mantissa3
  :                            30 
00:00653F 0F0008              +31 	n	$residue
00:006540 0F0009              +32 	n	$residue+1
00:006541 0F000A              +33 	n	$residue+2
00:006542 0F000B              +34 	n	$residue+3
00:006543 380002              +35 	pop	x
00:006544 3D0000              +36 	fret	0
  :                            37 
                                add	$head_far	 params(addend,	int)		;
                                			scalars(target, float192, a	;
00:006545 8F0008              +40 				a_user_x, int, x	)
00:006546 8F0004              +40 
00:006547 F80002              +40 
  :                            41 
  :                            42 .	vector name is fp192_add
  :                            43 .	addends are in destination a:b:mantissa2:mantissa3:8:9:10:11
  :                            44 .	and pointer at param *addend
  :                            45 .	supernormalise separate
  :                            46 
00:006548 50F00C              +47 	lx	addend
00:006549 050008              +48 	on	fp$r
00:00654A 67A000              +49 	fa	0, x
00:00654B 0D0008              +50 	off	fp$r
  :                            51 
  :                            52 .	tp	fp$xpo			. is exponent overflow / underflow flagged?
  :                            53 .	j	add_exit		. let application evaluate that
  :                            54 					. target registers unchanged
00:00654C 47F001              +55 	qs	target
00:00654D 4FF005              +56 	ql	target+4
00:00654E 67A004              +57 	fa	4, x
00:00654F 670008              +58 	fa	$residue
00:006550 47F005              +59 	qs	target+4
  :                            60 add_exit
00:006551 380002              +61 	pop	x
00:006552 870004              +62 	qpop	a
00:006553 870008              +63 	qpop	8
00:006554 3E05C4              +64 	lcal	supernormalise
00:006555 3D0000              +65 	fret	0
  :                            66 
  :                            67 
                                add_negative $head_far	 params(subtrahend, int)	;
                                			scalars(minuend, float192, a	;
00:006556 8F0008              +70 				anuser_x,int,x		)
00:006557 8F0004              +70 
00:006558 F80002              +70 
  :                            71 
  :                            72 .	vector name is fp192_add_negative
  :                            73 .	minuend is in destination a:b:mantissa2:mantissa3:8:9:10:11
  :                            74 .	subtrahend is at pointer param *subtrahend
  :                            75 .	supernormalise is separate
  :                            76 
00:006559 50F00C              +77 	lx	subtrahend
00:00655A 050008              +78 	on	fp$r
00:00655B 6FA000              +79 	fan	0, x
00:00655C 0D0008              +80 	off	fp$r
  :                            81 
  :                            82 .	tp	fp$xpo			. is exponent overflow / underflow flagged?
  :                            83 .	j	add_negative_exit	. let application evaluate that
  :                            84 					. target registers unchanged
00:00655D 47F001              +85 	qs	minuend
00:00655E 4FF005              +86 	ql	minuend+4
  :                            87 .	fa	$residue
00:00655F 6FA004              +88 	fan	4, x
00:006560 670008              +89 	fa	$residue
00:006561 47F005              +90 	qs	minuend+4
  :                            91 add_negative_exit
00:006562 380002              +92 	pop	x
00:006563 870004              +93 	qpop	a
00:006564 870008              +94 	qpop	8
00:006565 3E05C4              +95 	lcal	supernormalise
00:006566 3D0000              +96 	fret	0
  :                            97 
  :                            98 
  :                            99 .	this way when multiplicand is in a:b:mantissa2:mantissa3:8:9:10:11
  :                            100 .	vector name fp192_multiply
  :                            101 
                                multiply $head_far	 params(m_plier, int)		;
00:006567 8F0008              +103 			scalars(m_plicand, float192, a)
00:006568 8F0004              +103 
  :                            104 
00:006569 F8F00B              +105 	c	(fp192_mfa)	m_plicand,,i	m_plier
00:00656A FCF001              +105 
00:00656B FCF002              +105 
00:00656C FF0853              +105 
00:00656D 38000F              +105 
  :                            106 
00:00656E 870004              +107 	qpop	a
00:00656F 870008              +108 	qpop	$residue
00:006570 3E05C4              +109 	lcal	supernormalise
00:006571 3D0000              +110 	fret	0
  :                            111 
  :                            112 
  :                            113 .	this way when multiplicand is in the internal stack
  :                            114 .	vector name fp192_mfa
  :                            115 
  :                            116 heavy	$tree
                                	$head_far	 params(mzand,int mzier,int)	;
00:006572 9F0002              +118 			scalars(caller_xy, long, x)
00:006573 50F005              +119 	lx	mzand
00:006574 58F006              +120 	ly	mzier
00:006575 050008              +121 	on	fp$r
00:006576 4FA000              +122 	ql	0, x
00:006577 77B000              +123 	fm	0, y
00:006578 0D0008              +124 	off	fp$r
  :                            125 
00:006579 8F0004              +126 	qpush	a			. 2 copies upper[x] * upper[y]
00:00657A 8F0004              +127 	qpush	a			. $residue <- stored[1]
00:00657B 4FA004              +128 	ql	4, x
00:00657C 77B000              +129 	fm	0, y
00:00657D 670008              +130 	fa	8			. lower[x] * upper[y] + 1st $residue 
00:00657E 47F004              +131 	qs	4, sp			. <- 2nd stacked quadw
00:00657F 050008              +132 	on	fp$r
00:006580 4FA000              +133 	ql	0, x			. upper[x] <- upper[x] * lower[y]
00:006581 77B004              +134 	fm	4, y			. $residue <- stored[2]
00:006582 47A000              +135 	qs	0, x
00:006583 0D0008              +136 	off	fp$r
00:006584 4FA004              +137 	ql	4, x			. lower[x] <- 
00:006585 77B004              +138 	fm	4, y			. lower[x] * lower[y] + 2nd $residue
00:006586 670008              +139 	fa	8
00:006587 47A004              +140 	qs	4, x
00:006588 870004              +141 	qpop	a			.   (upper[x] * upper[y] unrounded)
00:006589 050008              +142 	on	fp$r			. 
00:00658A 67A000              +143 	fa	0, x			. + (upper[x] * lower[y] unrounded)
00:00658B 47A000              +144 	qs	0, x			.   upper[x] <-
00:00658C 0D0008              +145 	off	fp$r			. $residue stored[3]
00:00658D 870004              +146 	qpop	a			.   (lower[x] * upper[y] + 1st $residue)
00:00658E 67A004              +147 	fa	4, x			. + (lower[x] * lower[y] + 2nd $residue)
00:00658F 670008              +148 	fa	8			. + 3rd	$residue
00:006590 47A004              +149 	qs	4, x			.   lower[x] <-
  :                            150 
  :                            151 		$if	_INTENSIFY
  :                            152 	 	ql	0, x
  :                            153 		on	fp$r
  :                            154 		fa	4, x
  :                            155 		off	fp$r
  :                            156 		qs	0, x
  :                            157 		ql	8
  :                            158 		qs	4, x
  :                            159 		$endif
  :                            160 
00:006591 380002              +161 	dpop	x
00:006592 380003              +161 
00:006593 3D0000              +162 	fret	0
  :                            163 	$root
  :                            164 
                                divide	$head_far	 params(divisor,  int		)	;
                                								;
                                			scalars(usave,    float,	d$save	;
                                				quotient, float192,	a	;
00:006594 8F0010              +169 				duser_x,  int,		x	)
00:006595 8F0008              +169 
00:006596 8F0004              +169 
00:006597 F80002              +169 
  :                            170 	
  :                            171 
  :                            172 .	vector name is fp192_divide
  :                            173 .	dividend is in destination a:b:mantissa2:mantissa3:8:9:10:11
  :                            174 .	divisor is at pointer parameter *divisor
  :                            175 
00:006598 50F010              +176 	lx	divisor
00:006599 CFA004              +177 	dl	4, x		. is low-order divisor normalised nonzero?
00:00659A B00005              +178 	xor	b		. nonzero = normalising bit not a sign
00:00659B A605A1              +179 	jpa	quick_divide	. less heavy
  :                            180 
00:00659C FCF001              +181 	lc	long_divide	 quotient,,i
00:00659D FCF001              +181 
00:00659E 3E05AF              +181 
00:00659F 38000F              +181 
00:0065A0 B605AA              +182 	j	divided
  :                            183 
  :                            184 quick_divide
00:0065A1 4FF001              +185 	ql	quotient
00:0065A2 050008              +186 	on	fp$r
00:0065A3 7FA000              +187 	fd	0, x
00:0065A4 0D0008              +188 	off	fp$r
  :                            189 
  :                            190 .	tp	fp$xpo
  :                            191 .	j	divided		. exponent overflow / underflow flagged
  :                            192 				. target registers unchanged
  :                            193 				. application decides next action
00:0065A5 47F001              +194 	qs	quotient
00:0065A6 4FF005              +195 	ql	quotient+4
00:0065A7 7FA000              +196 	fd	0, x
00:0065A8 670008              +197 	fa	$residue
00:0065A9 47F005              +198 	qs	quotient+4
  :                            199 
00:0065AA 380002              +200 divided	pop	x
00:0065AB 870004              +201 	qpop	a
00:0065AC 870008              +202 	qpop	8
  :                            203 
  :                            204 		$if	_INTENSIFY
  :                            205 		lcal	supernormalise
  :                            206 		$endif
  :                            207 
00:0065AD 870010              +208 	qpop	d$save
00:0065AE 3D0000              +209 	fret	0
  :                            210 
                                long_divide $head_near	 params(dividend, int)		;
                                							;
                                			scalars(reciprocated, float192	;
00:0065AF 8F083C              +214 				caller_xy, long, x)
00:0065B0 8FF000              +214 
00:0065B1 9F0002              +214 
  :                            215 
00:0065B2 8FA004              +216 	c	(reciprocal192)	0, x, float192
00:0065B3 8FA000              +216 
00:0065B4 FCF008              +216 
00:0065B5 FF0854              +216 
00:0065B6 38000F              +216 
00:0065B7 47F002              +217 	qs	reciprocated
00:0065B8 4F0008              +218 	ql	$residue
00:0065B9 47F006              +219 	qs	reciprocated+4
  :                            220 
00:0065BA FCF002              +221 	c	(fp192_mfa) dividend	reciprocated,,i
00:0065BB F8F00D              +221 
00:0065BC FCF002              +221 
00:0065BD FF0853              +221 
00:0065BE 38000F              +221 
00:0065BF 50F000              +222 	lx	caller_xy
00:0065C0 58F001              +223 	ly	caller_xy+1
00:0065C1 FCF00A              +224 	$ret
00:0065C2 38000F              +224 
00:0065C3 350000              +224 
  :                            225 
  :                            226 supernormalise
00:0065C4 050008              +227 	on	fp$r
00:0065C5 670008              +228 	fa	$residue
00:0065C6 0D0008              +229 	off	fp$r
00:0065C7 350000              +230 	lret	0
  :                            231 
  :                            232 	$root
  :                            233 
  :                            192: 	$include	i48
  :                            1 i48	$tree
  :                            2 
  :                            3 .	far call vector name m48_24
  :                            4 .	multiplicand in a b
  :                            5 
                                m24	$head_far	 params(multiplier_24,	int	)	;
                                								;
                                			scalars(lookaside_a,	int,	a	;
00:0065C8 F80004              +9 				lookaside_ab,	long		)
00:0065C9 9F0855              +9 
  :                            10 
00:0065CA E8F006              +11 	mf	multiplier_24
00:0065CB 280007              +12 	sb	7
00:0065CC 960018              +13 	dsa	24
00:0065CD C7F000              +14 	ds	lookaside_ab
  :                            15 
00:0065CE 68F002              +16 	lb	lookaside_a
00:0065CF E0F006              +17 	m	multiplier_24
00:0065D0 D7F000              +18 	da	lookaside_ab
00:0065D1 280006              +19 	sb	6
00:0065D2 960018              +20 	dsa	24		. quadword containing 72 significant bits
00:0065D3 FCF003              +21 	$ret
00:0065D4 38000F              +21 
00:0065D5 3D0000              +21 
  :                            22 
  :                            23 .	far call vector name m48_48
  :                            24 .	multiplicand in a b
  :                            25 
                                m48	$head_far	 params(multiplier_48,	long	)		;
                                									;
                                			scalars(msave_multiplicand,	long, a		;
                                				quad_return_ab,		long		;
00:0065D6 9F0004              +30 				msave_rounding,		int, fp$guard	)
00:0065D7 9F0855              +30 
00:0065D8 F80093              +30 
00:0065D9 650000              +31 	la	0,,xi
00:0065DA 75005E              +32 	ii	FP_GUARD$		. suppress rounding guard pattern
  :                            33 
00:0065DB CFF003              +34 	dl	msave_multiplicand
00:0065DC 9FF008              +35 	lc	qm48_48		msave_multiplicand,,long multiplier_48,,long
00:0065DD 9FF005              +35 
00:0065DE FCF004              +35 
00:0065DF 3E05E6              +35 
00:0065E0 38000F              +35 
00:0065E1 47F001              +36 	qs	quad_return_ab
  :                            37 
00:0065E2 380004              +38 	pop	a
00:0065E3 75005E              +39 	ii	FP_GUARD$
00:0065E4 870004              +40 	qpop	a
00:0065E5 3D0000              +41 	fret	0
  :                            42 	
  :                            43 
                                qm48_48	$head_near	 params(qmultiplicand,	long		;
                                				qmultiplier,	long	)	;
                                								;
00:0065E6 8F083C              +47 			scalars(qmaside,	float		)
  :                            48 
  :                            49 	
00:0065E7 CFF008              +50 	dl	qmultiplier
00:0065E8 FF0857              +51 	call	(i48_2float)
00:0065E9 47F000              +52 	qs	qmaside
00:0065EA CFF006              +53 	dl	qmultiplicand
00:0065EB FF0857              +54 	call	(i48_2float)
00:0065EC 77F000              +55 	fm	qmaside
00:0065ED FF0858              +56 	call	(float2i72)
00:0065EE FCF004              +57 	$ret
00:0065EF 38000F              +57 
00:0065F0 350000              +57 
  :                            58 
  :                            59 .	far call vector name d48_48
  :                            60 .	dividend in a b
  :                            61 
                                d48	$head_far	 params(divisor_48,	int	)	;
                                								;
                                			scalars(dsave_dividend,	long, a		;
                                				quad_return_quo, long		;
00:0065F1 9F0004              +66 				dsave_rounding,	int, fp$guard	)
00:0065F2 9F0855              +66 
00:0065F3 F80093              +66 
  :                            67 
00:0065F4 650000              +68 	la	0,,xi
00:0065F5 75005E              +69 	ii	FP_GUARD$	. suppress rounding guard pattern
  :                            70 
00:0065F6 CFF003              +71 	dl	dsave_dividend
00:0065F7 9FF008              +72 	lc	qd48_48		dsave_dividend,,long	divisor_48,,long
00:0065F8 9FF005              +72 
00:0065F9 FCF004              +72 
00:0065FA 3E0601              +72 
00:0065FB 38000F              +72 
00:0065FC 47F001              +73 	qs	quad_return_quo
  :                            74 
00:0065FD 380004              +75 	pop	a
00:0065FE 75005E              +76 	ii	 FP_GUARD$	. restore rounding duard pattern
00:0065FF 870004              +77 	qpop	a
00:006600 3D0000              +78 	fret	0
  :                            79 
                                qd48_48	$head_near	 params(qdividend,	long		;
                                				qdivisor,	long	)	;
                                								;
00:006601 8F083C              +83 			scalars(qdaside,	float		)
  :                            84 
00:006602 CFF008              +85 	dl	qdivisor
00:006603 FF0857              +86 	call	(i48_2float)
00:006604 47F000              +87 	qs	qdaside
00:006605 CFF006              +88 	dl	qdividend
00:006606 FF0857              +89 	call	(i48_2float)
00:006607 7FF000              +90 	fd	qdaside
00:006608 FF0858              +91 	call	(float2i72)
00:006609 FCF004              +92 	$ret
00:00660A 38000F              +92 
00:00660B 350000              +92 
  :                            93 
  :                            94 .	far call vector name i48_2float
  :                            95 .	accelerator for 48-bit integer to floating
  :                            96 
00:00660C C70006              +97 _2float	ds	mantissa2	. input 48-bit integer
00:00660D 960030              +98 	dsa	48		. make 48 signs
00:00660E F80004              +99 	push	a		. save a word of signs
00:00660F D70006              +100 	da	mantissa2	. make - values 1s-complement
00:006610 380007              +101 	pop	mantissa3	. write 3rd mantissa word
  :                            102 
00:006611 E70004              +103 	dlsc	a		. scale and count
00:006612 9F0004              +104 	dpush	a		. 1st & 2nd mantissa words
00:006613 650030              +105 	la	48,,xi		.
00:006614 D00006              +106 	ana	6		. subtract normalising count from 48
00:006615 C60617              +107 	jza	all_signs	. 48 bits normalising count = +- zero
00:006616 900846              +108 	or	(0400000)	. all integers are all +midpoint
  :                            109 
  :                            110 all_signs			. polarise word containing
00:006617 B00007              +111 	xor	7		. sign + exponent along with mantissa
00:006618 380005              +112 	dpop	b
00:006619 380006              +112 
00:00661A 3D0000              +113 	fret	0
  :                            114 
  :                            115 	$root
  :                            193: 	$include	i72	. 72-bit integer arithmetic
  :                            1 i72	$tree
  :                            2 
  :                            3 i_multiply				. vector name is i72_multiply
  :                            4 
  :                            5 	$if		1
  :                            6 
                                	$head_far	 params(multiplicand,	triple	;
                                				multiplier,	int)	;
                                							;
00:00661B 9F0855              +10 			scalars(temp,		long	)
  :                            11 
00:00661C 68F007              +12 	lb	multiplicand+2
00:00661D E8F008              +13 	mf	multiplier
00:00661E 280007              +14 	sb	7
00:00661F 960018              +15 	dsa	24
00:006620 C7F000              +16 	ds	temp
00:006621 68F006              +17 	lb	multiplicand+1
00:006622 E8F008              +18 	mf	multiplier
00:006623 D7F000              +19 	da	temp
00:006624 280006              +20 	sb	6
00:006625 960018              +21 	dsa	24
00:006626 C7F000              +22 	ds	temp
00:006627 68F005              +23 	lb	multiplicand
00:006628 E0F008              +24 	m	multiplier
00:006629 D7F000              +25 	da	temp
  :                            26 
00:00662A FCF002              +27 	$ret
00:00662B 38000F              +27 
00:00662C 3D0000              +27 
  :                            28 
  :                            29 
  :                            30 	$else
  :                            31 
                                	$head_far	 params(multiplicand,	triple	;	. 3 data words
                                				multiplier,	int	;	. 1 data word
                                				product,	int )	;	. address pointer
                                							;
  :                            36 			scalars(user_x,		int,	x)
  :                            37 
  :                            38 	lb		multiplicand
  :                            39 	m		multiplier
  :                            40 	dsl		24
  :                            41 	ds		6
  :                            42 
  :                            43 	lb		multiplicand+1
  :                            44 	mf		multiplier
  :                            45 	da		6
  :                            46 	ds		6
  :                            47 
  :                            48 	lb		multiplicand+2
  :                            49 	mf		multiplier
  :                            50 						. no more words to read
  :                            51 	lx		product			. pointer for product write
  :                            52 	sb		2, x			. write
  :                            53 
  :                            54 	dsa		24			. align
  :                            55 	da		6
  :                            56 
  :                            57 	ds		0, x			. write
  :                            58 
  :                            59 	pop		x			. hand x back to the caller
  :                            60 	fret		0
  :                            61 
  :                            62 	$endif
  :                            63 
  :                            64 i_divide				. vector name is i72_divide
  :                            65 
                                	$head_far	 params(dividend,	triple	;	. 3 data words
                                				divisor,	int	;	. 1 data word
                                				quotient,	int	;	. address pointer
                                				remainder,	int )	;	. address pointer optional
                                							;
00:00662D F80002              +71 			scalars(caller_x,	int,	x)
  :                            72 
00:00662E 54F004              +73 	lx		dividend,,i
  :                            74 
00:00662F 3E064A              +75 	lcal		magnitude		. signs returned in a
  :                            76 
00:006630 68F007              +77 	lb		divisor
00:006631 B00005              +78 	xor		b
00:006632 860018              +79 	saa		24			. calculate final sign
00:006633 200007              +80 	sa		7
  :                            81 
00:006634 AE0637              +82 	jpb		divisor_plus
00:006635 0FF007              +83 	n		divisor
00:006636 17F007              +84 	inc		divisor
  :                            85 divisor_plus
  :                            86 
  :                            87 	$if		1			. long quotient from d instruction
  :                            88 						. is necessary for inline 48-bit signed arithmetic
00:006637 CFF004              +89 	dl		dividend		. and saves cycles here as well
00:006638 F0F007              +90 	d		divisor
00:006639 20F005              +91 	sa		dividend+1		. save quotient bits 47..24
  :                            92 
00:00663A 600005              +93 	la		b
00:00663B 680006              +94 	lb		6			. save quotient bits 71..48
00:00663C 28F004              +95 	sb		dividend
  :                            96 
00:00663D 68F006              +97 	lb		dividend+2
00:00663E F0F007              +98 	d		divisor			. a <- quotient bits 23..0
  :                            99 						. b <- remainder
  :                            100 	$else
  :                            101 						. this all works but takes longer
  :                            102 	la		dividend		. it doesn't exploit the payoff of
  :                            103 	dsr		24			. the long quotient from d instruction
  :                            104 
  :                            105 	d		divisor
  :                            106 	sa		dividend
  :                            107 	la		b
  :                            108 
  :                            109 	lb		dividend+1
  :                            110 	d		divisor
  :                            111 	sa		dividend+1
  :                            112 	la		b
  :                            113 
  :                            114 	lb		dividend+2
  :                            115 	d		divisor
  :                            116 
  :                            117 	$endif
  :                            118 
00:00663F 780007              +119 	tp		7
00:006640 3E0658              +120 	lcal		reverse			. x still points to dividend	
  :                            121 
00:006641 50F009              +122 	lx		remainder
00:006642 700002              +123 	tz		x
00:006643 28A000              +124 	sb		0, x
  :                            125 
00:006644 50F008              +126 	lx		quotient
00:006645 20A002              +127 	sa		2, x
  :                            128 
00:006646 CFF004              +129 	dl		dividend
00:006647 C7A000              +130 	ds		0, x
  :                            131 
00:006648 380002              +132 	pop		x			. hand x back to caller
00:006649 3D0000              +133 	fret		0
  :                            134 
  :                            135 
  :                            136 magnitude
00:00664A 60A000              +137 	la		0, x
00:00664B A60657              +138 	jpa		magnitudex
  :                            139 	
00:00664C F80004              +140 	push		a
00:00664D 0FA002              +141 	n		2, x
00:00664E 0FA001              +142 	n		1, x
00:00664F 0FA000              +143 	n		0, x
00:006650 FD0001              +144 	push		1,,xi
00:006651 2FA002              +145 	popA		2, x
00:006652 B70005              +146 	sc		b
00:006653 650000              +147 	la		0,,xi
00:006654 D7A000              +148 	da		0, x
00:006655 C7A000              +149 	ds		0, x
00:006656 380004              +150 	pop		a
  :                            151 
  :                            152 magnitudex
00:006657 350000              +153 	lret		0
  :                            154 
00:006658 0F0004              +155 reverse	n		a
00:006659 0F0005              +156 	n		b
00:00665A CD0001              +157 	ab		1,,xi			. remainder
00:00665B C50001              +158 	aa		1,,xi			. quotient 23..0
00:00665C 9F0004              +159 	dpush		a
00:00665D 0FA000              +160 	n		0, x
00:00665E 0FA001              +161 	n		1, x
00:00665F B70005              +162 	sc		b
00:006660 650000              +163 	la		0,,xi
00:006661 D7A000              +164 	da		0, x			. quotient 71..24
00:006662 C7A000              +165 	ds		0, x
  :                            166 
00:006663 380004              +167 	dpop		a
00:006664 380005              +167 
00:006665 350000              +168 	lret		0
  :                            169 
  :                            170 	$root
  :                            171 
  :                            194: 	$include	i72_72	. 72-bit integer long divisor / multiplier support
  :                            1 i72_72	$tree
  :                            2 
  :                            3 .	vector name im72_72
  :                            4 
  :                            5 multiply
                                	$head_far	 params(multiplicandp,	int	;	pointer
                                				multiplierp,	int	;	pointer
                                				productp,	int)	;	write pointer
                                							;
                                			scalars(mguard,		int, fp$guard	;
                                				muser_rkxy,	float,	r	;
00:006666 F80093              +12 				multiplier,	float		)
00:006667 8F0000              +12 
00:006668 8F083C              +12 
  :                            13 
00:006669 650000              +14 	la	0,,xi			. everything stays in integer range
00:00666A 75005E              +15 	ii	FP_GUARD$		. with no rounding
  :                            16 					. scale return > 72 = lost significant bits
00:00666B 50F00D              +17 	lx	multiplierp
00:00666C FF0859              +18 	call	(tripl2float)
00:00666D 47F000              +19 	qs	multiplier
00:00666E 50F00C              +20 	lx	multiplicandp
00:00666F FF0859              +21 	call	(tripl2float)
00:006670 77F000              +22 	fm	multiplier
00:006671 FF0858              +23 	call	(float2i72)
00:006672 50F00E              +24 	lx	productp
00:006673 28A000              +25 	sb	0, x
00:006674 CF0006              +26 	dl	6
00:006675 C7A001              +27 	ds	1, x
00:006676 87F000              +28 	qpop	0, sp
00:006677 870000              +29 	qpop	r
00:006678 380004              +30 	pop	a			. saved rounding guard
00:006679 75005E              +31 	ii	FP_GUARD$
00:00667A 3D0000              +32 	fret	0
  :                            33 
  :                            34 integer96	$equ	000173
  :                            35 
  :                            36 .	vector name id72_72
  :                            37 
                                divide	$head_far	 params(dividendp,	int	; pointer
                                				divisorp,	int	; pointer
                                				quotientp,	int	; write pointer
                                				remainderp,	int)	; optional wpointer
                                							;
                                			scalars(guard,		int, fp$guard	;
                                				duser_rkxy,	float,	r	;
                                				dividend,	float		;
00:00667B F80093              +46 				divisor,	float		)
00:00667C 8F0000              +46 
00:00667D 8F083C              +46 
00:00667E 8F083C              +46 
  :                            47 
00:00667F 650000              +48 	la	0,,xi			. everything stays in integer range
00:006680 75005E              +49 	ii	FP_GUARD$		. with no rounding
  :                            50 					. scale return > 72 = lost significant bits
00:006681 50F011              +51 	lx	divisorp
00:006682 FF0859              +52 	call	(tripl2float)
00:006683 47F000              +53 	qs	divisor
00:006684 50F010              +54 	lx	dividendp
00:006685 FF0859              +55 	call	(tripl2float)
00:006686 47F004              +56 	qs	dividend
00:006687 7FF000              +57 	fd	divisor
00:006688 470008              +58 	qs	8
  :                            59 
00:006689 FF0858              +60 	call	(float2i72)
00:00668A 50F012              +61 	lx	quotientp
00:00668B 28A000              +62 	sb	0, x
00:00668C CF0006              +63 	dl	6
00:00668D C7A001              +64 	ds	1, x
  :                            65 
00:00668E 70F013              +66 	tnz	remainderp
00:00668F B60691              +66 
00:006690 B606A0              +67 	j	xdivide
  :                            68 
00:006691 8F0008              +69 	c	(integer96)	8,,float
00:006692 FCF004              +69 
00:006693 FF085A              +69 
00:006694 38000F              +69 
00:006695 77F000              +70 	fm	divisor			. integer part neither rounded up not down
00:006696 0F0004              +71 	n	a			. fraction is sometimes rounded down
00:006697 0F0005              +72 	n	b			. therefore dividend - quotient * divisor
00:006698 0F0006              +73 	n	mantissa2		. and never fraction * quotient
00:006699 0F0007              +74 	n	mantissa3
  :                            75 
00:00669A 67F004              +76 	fa	dividend
  :                            77 
00:00669B FF0858              +78 	call	(float2i72)
00:00669C 50F013              +79 	lx	remainderp
00:00669D 28A000              +80 	sb	0, x
00:00669E CF0006              +81 	dl	6
00:00669F C7A001              +82 	ds	1, x
  :                            83 
00:0066A0 87F000              +84 xdivide	qpop	0, sp			. floating divisor
00:0066A1 87F000              +85 	qpop	0, sp			. floating dividend
00:0066A2 870000              +86 	qpop	r
00:0066A3 380004              +87 	pop	a			. saved rounding guard
00:0066A4 75005E              +88 	ii	FP_GUARD$
00:0066A5 3D0000              +89 	fret	0
  :                            90 	
00:0066A6 CFA001              +91 tripl2f	dl	1, x			. vector name tripl2float
00:0066A7 C7000A              +92 	ds	TRIPLE+1		. reads i72 returns float
00:0066A8 60A000              +93 	la	0, x
00:0066A9 960018              +94 	dsa	24
00:0066AA 280009              +95 	sb	TRIPLE
00:0066AB 200011              +96 	sa	SIGNS
00:0066AC A606B6              +97 	jpa	magnitude
00:0066AD 0F0009              +98 	n	TRIPLE			. change integer to positive magnitude
00:0066AE 0F000A              +99 	n	TRIPLE+1		. u72tofloat likes it that way for efficiency
00:0066AF 0F000B              +100 	n	TRIPLE+2
  :                            101 
00:0066B0 CF085B              +102 	dl	(1d)			. 2s complement carry around
00:0066B1 D7000A              +103 	da	TRIPLE+1		. instead of changing - integers to 1s-complement
00:0066B2 C7000A              +104 	ds	TRIPLE+1		. also u72tofloat uses all 72 magnitude bits
00:0066B3 B70005              +105 	sc	b			. it only gets 71 magnitude bits from here
00:0066B4 C80009              +106 	ab	TRIPLE			. but is called from other routines
00:0066B5 280009              +107 	sb	TRIPLE
  :                            108 
  :                            109 magnitude
00:0066B6 FF0852              +110 	call	(u72tofloat)		. reads positive unsigned i72, returns signed float
00:0066B7 4F0008              +111 	ql	QUAD
00:0066B8 3D0000              +112 	fret	0
  :                            113 	
  :                            114 	$root
  :                            195: 	$include	../timer/dayclock
  :                            1 dayclock $tree
  :                            2 
  :                            3 .	vector name dayclock_ydsm_gmt
  :                            4 
  :                            5 ydsm_gmt
00:0066B9 CF0096              +6 	dl	DAYCLOCK$U
00:0066BA F503E8              +7 	d	1000,,xi
00:0066BB 28000B              +8 	sb	11
00:0066BC 200005              +9 	sa	b
00:0066BD 600006              +10 	la	6
00:0066BE B606C6              +11 	j	ydsm_second
  :                            12 
  :                            13 .	vector name dayclock_ydsm
  :                            14 
00:0066BF CF0096              +15 ydsm	dl	DAYCLOCK$U
00:0066C0 F503E8              +16 	d	1000,,xi
00:0066C1 28000B              +17 	sb	11
00:0066C2 200007              +18 	sa	7
00:0066C3 040065              +19 	inA	time$zone	. seconds difference from GMT
00:0066C4 960018              +20 	dsa	24
00:0066C5 D70006              +21 	da	6
  :                            22 
  :                            23 ydsm_second
00:0066C6 F0085D              +24 	d	(SECONDS_DAY)
00:0066C7 28000A              +25 	sb	10
00:0066C8 200005              +26 	sa	b
00:0066C9 600006              +27 	la	6
00:0066CA D7085E              +28 	da	(DAYS_B4_POSIX:d)
00:0066CB 300007              +29 	z	7		. not a leap year so far
00:0066CC F00860              +30 	d	(DAYS_400Y)
00:0066CD 280009              +31 	sb	9
00:0066CE 680004              +32 	lb	a
00:0066CF E50190              +33 	m	400,,xi
00:0066D0 280008              +34 	sb	8		. only 1 product word
00:0066D1 600009              +35 	la	9		. days are a remainder so zero-relative
00:0066D2 C5FE92              +36 	aa	-366,,xi	. days this year are 0..365
00:0066D3 7E06D6              +37 	jc	century?	. 366+ = 376+ days: not quadcentury
  :                            38 
00:0066D4 0F0007              +39 	n	7		. quadcentury + leap year
00:0066D5 B606F0              +40 	j	msdy
  :                            41 
  :                            42 century?
00:0066D6 600009              +43 	la	9
00:0066D7 160018              +44 	dsr	24
00:0066D8 F00861              +45 	d	(DAYS_100Y)
00:0066D9 280009              +46 	sb	9
00:0066DA 680004              +47 	lb	a
00:0066DB E50064              +48 	m	100,,xi
00:0066DC C80008              +49 	ab	8
00:0066DD 280008              +50 	sb	8
  :                            51 
00:0066DE 600009              +52 	la	9
00:0066DF C5FE93              +53 	aa	-365,,xi
00:0066E0 5E06F0              +54 	jnc	msdy		. century, leapyear remains off
  :                            55 				. zero-relative remainder
  :                            56 				. days are 0..364 this year
  :                            57 
  :                            58 				. 365+ = 366+ days
  :                            59 				. not a century and not leap year
00:0066E1 600009              +60 	la	9		. is it a quadyear?
00:0066E2 160018              +61 	dsr	24
00:0066E3 F505B5              +62 	d	DAYS_4Y,,xi
  :                            63 
00:0066E4 260002              +64 	sal	2		. quotient * 4 years
00:0066E5 C00008              +65 	aa	8
00:0066E6 C70008              +66 	ds	8
  :                            67 
00:0066E7 CDFE92              +68 	ab	-366,,xi	. 366+ remainder = 367+ days
00:0066E8 7E06EB              +69 	jc	yearin4?
  :                            70 
00:0066E9 0F0007              +71 	n	7		. leap year
00:0066EA B606F0              +72 	j	msdy
  :                            73 
  :                            74 yearin4?
00:0066EB 600009              +75 	la	9
00:0066EC 160018              +76 	dsr	24
00:0066ED F5016D              +77 	d	365,,xi
00:0066EE C00008              +78 	aa	8
00:0066EF C70008              +79 	ds	8
  :                            80 
00:0066F0 3D0000              +81 msdy	fret	0		. ydms backwards dontcha know?
  :                            82 
  :                            83 	$root
  :                            196: 	$include	octetlib
  :                            1 	$path		../string
  :                            2: 	$include	string
  :                            1 string8	$tree
  :                            2 strlena	$tree
  :                            3 
                                	$head_far	 params(stringp,	int	)	;
00:0066F1 8F0001              +5 			scalars(user_kxya,	float,	k	)		
  :                            6 
00:0066F2 4D00FF              +7 	lk	+(1*/$byte)-1,,xi
00:0066F3 30F003              +8 	z	3, sp
00:0066F4 58F007              +9 	ly	stringp
00:0066F5 60B000              +10 readout	la	0, y
00:0066F6 AF0849              +11 	mta	(0)
00:0066F7 B606FC              +12 	j	maximum
00:0066F8 C60700              +13 count	jza	all
00:0066F9 260008              +14 	sal	$byte
00:0066FA 17F003              +15 	inc	3, sp
00:0066FB B606F8              +16 	j	count
00:0066FC FD0003              +17 maximum	push	$word/$byte,,xi
00:0066FD 2FF004              +18 	popA	4, sp
00:0066FE 8D0001              +19 	ay	1,,xi
00:0066FF B606F5              +20 	j	readout
00:006700 870001              +21 all	qpop	k
00:006701 3D0000              +22 	fret	0
  :                            23 	$root
  :                            24 
  :                            25 contain	$tree
00:006702 F80001              +26 	push	k
00:006703 FD0000              +27 	push	0,,xi
00:006704 4D00FF              +28 	lk	+(1*/$byte)-1,,xi
00:006705 550000              +29 	lx	0,,xi
00:006706 6D0000              +30 	lb	0,,xi
00:006707 60B000              +31 reado	la	0, y
00:006708 AF0849              +32 	mta	(0)
00:006709 B6070F              +33 	j	allofit
00:00670A C60713              +34 countup	jza	thatwas
00:00670B 760008              +35 	drl	$byte
00:00670C 17F000              +36 	inc	0, sp
00:00670D 850008              +37 	ax	$byte,,xi
00:00670E B6070A              +38 	j	countup
00:00670F FD0003              +39 allofit	push	$word/$byte,,xi
00:006710 2FF001              +40 	popA	1, sp
00:006711 8D0001              +41 	ay	1,,xi
00:006712 B60707              +42 	j	reado
00:006713 380004              +43 thatwas	pop	a
00:006714 380001              +44 	pop	k
00:006715 350000              +45 	lret	0
  :                            46 	$root
  :                            47 
  :                            48 bias	$tree
                                	$head_near	 params(string,		int		;
                                				newstring,	int	)	;
                                								;
00:006716 F80001              +52 			scalars(caller_k,	int,	k	)
  :                            53 
  :                            54 .	b contains partial word eostring1, right justified
  :                            55 .	x = # data bits string1 in a
  :                            56 
00:006717 4D00FF              +57 	lk	+(1*/$byte)-1,,xi
  :                            58 
  :                            59 readbias
00:006718 58F004              +60 	ly	newstring
00:006719 17F004              +61 	inc	newstring
00:00671A 60B000              +62 	la	0, y
00:00671B 58F003              +63 	ly	string
00:00671C 17F003              +64 	inc	string
00:00671D AF0849              +65 	mtane	(0)
00:00671E B60720              +65 
00:00671F B60724              +66 	j	last
00:006720 56A000              +67 	drr	0, x
00:006721 6EA000              +68 	rbl	0, x
00:006722 20B000              +69 	sa	0, y
00:006723 B60718              +70 	j	readbias
  :                            71 
00:006724 56A000              +72 last	drr	0, x
00:006725 20B000              +73 	sa	0, y
00:006726 AF0849              +74 	mta	(0)
00:006727 28B001              +75 	sb	1, y
  :                            76 
00:006728 380001              +77 	pop	k
00:006729 350000              +78 	lret	0
  :                            79 
  :                            80 
  :                            81 	$root
  :                            82 
  :                            83 container $tree
                                	$head_far	 params(stringq,	int	)	;
00:00672A 9F0002              +85 			scalars(caller_xy,	long,	x	)
  :                            86 
00:00672B 58F005              +87 	ly	stringq
00:00672C 3E0702              +88 	lcal	string8:contain
00:00672D 680003              +89 	lb	y
00:00672E D8F005              +90 	anb	stringq
00:00672F 700002              +91 	tz	x
00:006730 CD0001              +92 	ab	1,,xi
  :                            93 
00:006731 380002              +94 	dpop	x
00:006732 380003              +94 
00:006733 3D0000              +95 	fret	0	. return a = strlen b = containing words
  :                            96 	$root
  :                            97 
  :                            98 strcatena $tree
                                	$head_far	 params(string1,	int		;
                                				string2,	int	)	;
00:006734 8F0002              +101 			scalars(caller_xyab,	float,	x	)
  :                            102 
00:006735 58F007              +103 	ly	string1
00:006736 3E0702              +104 	lcal	string8:contain
00:006737 700002              +105 	tz	x
00:006738 B6073F              +106 	j	biased
00:006739 F8F008              +107 	c	(strcpy)	y	string2
00:00673A F80003              +107 
00:00673B FCF002              +107 
00:00673C FF0862              +107 
00:00673D 38000F              +107 
00:00673E B60744              +108 	j	strcatenz
00:00673F F8F008              +109 biased	lc	string8:bias	y	string2	. x = rotate count, residual bits in b
00:006740 F80003              +109 
00:006741 FCF002              +109 
00:006742 3E0716              +109 
00:006743 38000F              +109 
  :                            110 strcatenz
00:006744 870002              +111 	qpop	x
00:006745 3D0000              +112 	fret	0
  :                            113 	$root
  :                            114 
  :                            115 
  :                            116 strcpya	$tree
  :                            117 
                                	$head_far	 params(to_p,	int		;
                                				from_p,	int	)	;
00:006746 8F0001              +120 			scalars(u_kxya,	float,	k	)
  :                            121 
00:006747 4D00FF              +122 	lk	+(1*/$byte)-1,,xi
00:006748 50F007              +123 	lx	to_p
00:006749 58F008              +124 	ly	from_p
00:00674A 60B000              +125 readin	la	0, y
00:00674B 20A000              +126 	sa	0, x
00:00674C 850001              +127 	ax	1,,xi
00:00674D 8D0001              +128 	ay	1,,xi
00:00674E AF0849              +129 	mta	(0)
00:00674F B6074A              +130 	j	readin
  :                            131 
00:006750 870001              +132 	qpop	k
00:006751 3D0000              +133 	fret	0
  :                            134 
Note: ../string/string.msm Line 135: $endif not in scope of $if
  :                            135 	$endif
  :                            136 	$root
  :                            137 	$root
  :                            3: 	$include	memcat
  :                            1 mstring8	$tree
  :                            2 
  :                            3 .	catenate string2 defined starting word and number of byte
  :                            4 .	to string1 defined starting word and number of bytes
  :                            5 
  :                            6 memcatena	$tree
                                	$head_far	 params(string1,	int		;
                                				@column,	int		;
                                				string2,	int		;
                                				bytes,		int	)	;
                                			scalars(save_ab67,	float,	a	;
00:006752 8F0004              +12 				save_rkxy,	float,	r	)
00:006753 8F0000              +12 
  :                            13 
  :                            14 				. catenate strings of known length
00:006754 68F00E              +15 	lb	bytes		. input strings are held in whole words
00:006755 6CD002              +16 	lb	2, b, i		. either string may trail slack bytes
00:006756 E80863              +17 	mf	(R3)		
00:006757 C0F00D              +18 	aa	string2
00:006758 400004              +19 	lr	a		. string2 + containing words
  :                            20 
00:006759 68F00C              +21 	lb	@column		. octets string 1
00:00675A 2E0003              +22 	sbl	3		. bits string1
00:00675B E80864              +23 	mf	(R24)		. words rounded down
00:00675C 0E0016              +24 	sbr	22		. remainder offset
00:00675D 2E0003              +25 	sbl	3
00:00675E 280006              +26 	sb	6
  :                            27 
00:00675F 50F00B              +28 	lx	string1		. 1st string
00:006760 800004              +29 	ax	a		. point beyond last whole word
  :                            30 
00:006761 58F00D              +31 	ly	string2		. additonal string
00:006762 700006              +32 	tz	6		. load part word if any
00:006763 68A000              +33 	lb	0, x		. of 1st string
  :                            34 
00:006764 FE076C              +35 roll	jyge	total		. additional string all transfered?
00:006765 60B000              +36 	la	0, y		. load some
00:006766 8D0001              +37 	ay	1,,xi		. pointer forward
00:006767 6E8006              +38 	rbl	*6		. roll in partial word bits if any
00:006768 568006              +39 	drr	*6
00:006769 20A000              +40 	sa	0, x		. store merged or not merged word
00:00676A 850001              +41 	ax	1,,xi		. pointer forward
00:00676B B60764              +42 	j	roll
  :                            43 
00:00676C 700006              +44 total	tz	6		. if catenate was at a bit offset
00:00676D 28A000              +45 	sb	0, x		. store last part word trailing zero
  :                            46 
00:00676E 870000              +47 	qpop	r
00:00676F 870004              +48 	qpop	a
00:006770 3D0000              +49 	fret	0
  :                            50 		$root
  :                            51 		$root
  :                            4 	$path
  :                            5: 	$include	oper8
  :                            1 oper8*	$tree
  :                            2 
  :                            3 read_column			. you must be in 3rd-word mode
  :                            4 
00:006771 4500A0              +5 	lr	160,,xi
00:006772 FE0775              +6 	jyge	no_you_dont
  :                            7 
00:006773 97B777              +8 	ex	read, y
00:006774 3D0000              +9 	fret	0
  :                            10 
  :                            11 no_you_dont
00:006775 650000              +12 	la	0,,xi		. not healthy out of range execute target
00:006776 3D0000              +13 	fret	0
  :                            14 
  :                            15 read
  :                            197 	$list		2
  :                            198: 	$include	compress
  :                            1 
  :                            2 compress $tree
  :                            3 
  :                            4 .	vector name __fpp
  :                            5 
  :                            6 fpcompress
00:006817 9F0004              +7 	dpush	a
  :                            8 
  :                            9 FP_QUAD	$equf	4, sp		. save a:b + far:return
  :                            10 				.			      71			48
00:006818 CFF004              +11 	dl	FP_QUAD		. Smxxxx xxxxxx xxxxxx xxxxxx MMMMMM MMMMMM MMMMMM MMMMMM
00:006819 16000A              +12 	dsr	10		. 000000 0000Sm xxxxxx xxxxxx xxxxxx xxxxMM MMMMMM MMMMMM
00:00681A 06000C              +13 	sar	12		. 000000 000000 000000 0000Sm xxxxxx xxxxMM MMMMMM MMMMMM
00:00681B 160002              +14 	dsr	2		.			      Smxxxx xxxxxx MMMMMM MMMMMM
00:00681C 28F004              +15 	sb	FP_QUAD		. 71
00:00681D CFF005              +16 	dl	FP_QUAD+1	. MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM
00:00681E 36000C              +17 	dsl	12		. MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM		24
00:00681F 20F005              +18 	sa	FP_QUAD+1	. 59			   36
00:006820 380004              +19 	dpop	a
00:006821 380005              +19 
00:006822 3D0000              +20 	fret	0
  :                            21 
  :                            22 .	vector name __fpx
  :                            23 
00:006823 9F0004              +24 fpxpand	dpush	a
  :                            25 BUFFER	$equf	4, sp		. save a:b + far:return
  :                            26 				. 		35					0
00:006824 CFF004              +27 	dl	BUFFER		. Smxxxx xxxxxx MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM MMMMMM
00:006825 96000C              +28 	dsa	12		. SSSSSS SSSSSS Smxxxx xxxxxx MMMMMM MMMMMM MMMMMM MMMMMM
00:006826 28F005              +29 	sb	BUFFER+1	.			      35			12
  :                            30 
00:006827 96000B              +31 	dsa	11		. midpoint @ msb
00:006828 8E000C              +32 	sba	12		. more midpoints
00:006829 B80865              +33 	xorB	(07FF800)	. switch the 12 new midpoints
00:00682A 960001              +34 	dsa	1		. 24-bit characteristic
  :                            35 
00:00682B 28F004              +36 	sb	BUFFER
00:00682C 68F007              +37 	lb	BUFFER+3	. SSSSSS SSSSSS SSSSSS SSSSSS MMMMMM MMMMMM MMMMMM MMMMMM
00:00682D 56000C              +38 	drr	12		. MMMMMM MMMMMM SSSSSS SSSSSS SSSSSS SSSSSS MMMMMM MMMMMM
00:00682E 8E000C              +39 	sba	12		. MMMMMM MMMMMM SSSSSS SSSSSS SSSSSS SSSSSS SSSSSS SSSSSS
00:00682F C7F006              +40 	ds	BUFFER+2
00:006830 380004              +41 	dpop	a
00:006831 380005              +41 
00:006832 3D0000              +42 	fret	0
  :                            43 
  :                            44 	$root
  :                            199 
  :                            200 	$do	$zenith>4096,	$flag	binary lib > 4096 words
  :                            201 
  :                            202 
  :                            203 	. ASCII library with different stream initilaisaton for socket and application buffers
  :                            204 	. once stream is initialised
  :                            205 	. all the same field scan and edit functions work for socket and application data formats
  :                            206 
00:006833+7FFFFF
00:006834+0000000A0000
00:006836+400048
00:006837+400030
00:006838+0F4240
00:006839+000182
00:00683a+3E014B
00:00683b+77B000
00:00683c+000000000000000000000000
00:006840+3E0410
00:006841+3E0400
00:006842+400004A00000000000000000
00:006846+400000
00:006847+77B178
00:006848+77B1CC
00:006849+000000
00:00684a+400049
00:00684b+400031
00:00684c+400019
00:00684d+400001
00:00684e+C00000
00:00684f+BFFFE8
00:006850+BFFFD0
00:006851+800000
00:006852+000180
00:006853+000191
00:006854+000190
00:006855+000000000000
00:006857+00019F
00:006858+00019E
00:006859+0001A3
00:00685a+000173
00:00685b+000000000001
00:00685d+015180
00:00685e+0000000AFAA7
00:006860+023AB1
00:006861+008EAC
00:006862+00019B
00:006863+555556
00:006864+0AAAAB
00:006865+7FF800
  :                            207 $(0:0:ASCII_LIB1)
  :                            208 
  :                            209 	. for socket buffers. counted
  :                            210 
00:008000 B60506              +211 rstream_start_net* $vector read_stream_start16
00:008001 B6050E              +212 wstream_start_net* $vector write_stream_start16
  :                            213 
00:008002 B60514              +214 rstream_starta* $vector read_stream_start24
00:008003 B6051C              +215 wstream_starta*	$vector	write_stream_start24
00:008004 B6063D              +216 rstream_scana*	$vector	scan_fi
00:008005 B6075F              +217 wstream_composea* $vector edit_fo	. wstream_compose_core24
  :                            218 
  :                            219 
00:008006 B60085              +220 fscana*		$vector	fscan		. _core24 now generic
00:008007 B60144              +221 fsymbola*	$vector	symbol		. _core24
00:008008 B60367              +222 fscan192a*	$vector	fp192:fscan	. _core24
00:008009 B60159              +223 iscan_skipa*	$vector	iscanf		. _core24
00:00800A B6017F              +224 iscana*		$vector	bi		. _core24
00:00800B B6018C              +225 iscan48a*	$vector	bdi		. _core24
00:00800C B601CE              +226 iscan72a*	$vector	bti		. _core24
00:00800D B60431              +227 tokena*		$vector	token		. _core24
  :                            228 
00:00800E B6024A              +229 fedita*		$vector	fedit		. _core24
00:00800F B60243              +230 feditia*	$vector	fediti		. _core24
00:008010 B60412              +231 fedit192a*	$vector fedit192:fedit	. _core24
00:008011 B602A6              +232 ieditua*	$vector	ieditu		. _core24	
00:008012 B60293              +233 iedita*		$vector iedit		. _core24
00:008013 B6029B              +234 ieditas*	$vector iedits		. _core24
00:008014 B602BF              +235 iedit48ua*	$vector	iedit48u	. _core24
00:008015 B602A8              +236 iedit48a*	$vector iedit48		. _core24
00:008016 B602B1              +237 iedit48as*	$vector iedit48s	. _core24
00:008017 B602D0              +238 iedit72ua*	$vector	iedit72u	. _core24
00:008018 B602C1              +239 iedit72a*	$vector iedit72		. _core24
00:008019 B602C8              +240 iedit72as*	$vector iedit72s	. _core24
  :                            241 
00:00801A B60355              +242 textoa*		$vector	texto		. _core24
  :                            243 
00:00801B B6045B              +244 scanhex*	$vector	hexa:scan24
00:00801C B6046A              +245 scanhex48	$vector	hexa:scan48
00:00801D B6047D              +246 scanhex72	$vector	hexa:scan72
  :                            247 
00:00801E B604A4              +248 ixscan*		$vector	dec_hex:scan24	
00:00801F B604AA              +249 ixscan48*	$vector	dec_hex:scan48
00:008020 B604B2              +250 ixscan72*	$vector	dec_hex:scan72
  :                            251 
00:008021 B607E8              +252 display_quartets* $vector quartets
00:008022 B60603              +253 date_timef1*	$vector	timetext_f1
00:008023 B60619              +254 date_timef2*	$vector	timetext_f2
00:008024 B6062A              +255 date_timef3*	$vector	timetext_f3
  :                            256 
00:008025 B6063B              +257 string_scana_sentinel* $vector	qstring_scana_sentinel
  :                            258 
00:008026 B604BC              +259 qscanquartets*	$vector	hex2f:x2f96
00:008027 B604D3              +260 oscanquartets*	$vector	hex2f:x2f192
00:008028 B60526              +261 unget*		$vector repoussez
  :                            262 
00:008029 B60040              +263 forward_callstring*	$vector	argument:forward
00:00802A B60056              +264 unpack_callstring*	$vector	argument:unpack
00:00802B B60049              +265 retrieve_callstring*	$vector	argument:retrieve
  :                            266 
00:00802C 3D0000              +267 	$do	64-$,	fret	0
00:00802D 3D0000              +267 
00:00802E 3D0000              +267 
00:00802F 3D0000              +267 
00:008030 3D0000              +267 
00:008031 3D0000              +267 
00:008032 3D0000              +267 
00:008033 3D0000              +267 
00:008034 3D0000              +267 
00:008035 3D0000              +267 
00:008036 3D0000              +267 
00:008037 3D0000              +267 
00:008038 3D0000              +267 
00:008039 3D0000              +267 
00:00803A 3D0000              +267 
00:00803B 3D0000              +267 
00:00803C 3D0000              +267 
00:00803D 3D0000              +267 
00:00803E 3D0000              +267 
00:00803F 3D0000              +267 
  :                            268 
  :                            269 	$list	3
  :                            270 
  :                            271: 	$include	argument
  :                            1 argument	$tree*
  :                            2 
  :                            3 .	vector name forward_callstring
  :                            4 
00:008040 500C35              +5 forward	lx	(32*/12++APP_CALL_STRING-01000)
  :                            6 
  :                            7 .	y	->	call string
  :                            8 
00:008041 4D00FF              +9 	lk	255,,xi
  :                            10 update_string
00:008042 60B000              +11 	la	0, y
00:008043 20A000              +12 	sa	0, x
00:008044 8D0001              +13 	ay	1,,xi
00:008045 850001              +14 	ax	1,,xi
00:008046 AF0C36              +15 	mta	(0)
00:008047 B60042              +16 	j	update_string	
00:008048 3D0000              +17 	fret	0
  :                            18 
  :                            19 .	vector_name	retrieve_callstring
  :                            20 
  :                            21 retrieve
00:008049 4D00FF              +22 	lk	255,,xi
00:00804A 054000              +23 	on	see$1
  :                            24 
00:00804B 5D1C00              +25 	ly	APP_CALL_STRING,,xi
00:00804C 452000              +26 	lr	02000,,xi
  :                            27 
  :                            28 retrieve_string
00:00804D 60B000              +29 	la	0, y
00:00804E 20A000              +30 	sa	0, x
00:00804F 850001              +31 	ax	1,,xi
00:008050 8D0001              +32 	ay	1,,xi
00:008051 FE0054              +33 	jyge	retrieved
00:008052 AF0C36              +34 	mta	(0)
00:008053 B6004D              +35 	j	retrieve_string
  :                            36 
  :                            37 retrieved
00:008054 0D4000              +38 	off	see$1
00:008055 3D0000              +39 	fret	0
  :                            40 
  :                            41 
  :                            42 .	vector name unpack_callstring*
  :                            43 
00:008056 8F0014              +44 unpack	qpush	RDATAC
00:008057 8F0004              +45 	qpush	a
00:008058 8F0000              +46 	qpush	r
00:008059 054000              +47 	on	see$1
  :                            48 
00:00805A 6D1C00              +49 	lb	APP_CALL_STRING,,xi
00:00805B FF0C37              +50 	call	(rstream_starta)
  :                            51 
00:00805C FD1C00              +52 	c	(strlenx)	APP_CALL_STRING,,xi
00:00805D FCF001              +52 
00:00805E FF0C38              +52 
00:00805F 38000F              +52 
00:008060 200010              +53 	sa	BYTES
00:008061 360019              +54 	dsl	25			. words * 2 to buffer any expansion from padding
  :                            55 
00:008062 68000E              +56 	lb	fp			. maximum end of inserted param stream
00:008063 D80004              +57 	anb	a			. start of inserted param stream
00:008064 28000C              +58 	sb	p			. start inserted param stream
00:008065 400005              +59 	lr	b			. limit allowed tuples
00:008066 500005              +60 	lx	b			. end of tuples { words, *where }
00:008067 5D0000              +61 	ly	0,,xi			. argc returned in register a
  :                            62 	
00:008068 68000C              +63 argue	lb	p			. tokena will copy b -> p
00:008069 600010              +64 	la	BYTES			. available bytes
00:00806A F80000              +65 	push	r
00:00806B FF0C39              +66 	call	(tokena)
00:00806C 380000              +67 	pop	r
00:00806D 9F0004              +68 	dpush	a			. words:address
00:00806E 680016              +69 	lb	WDATAC			. this has just had $word-$byte added to it
00:00806F BD0010              +70 	xorB	$word-$byte,,xi		. was it zero before = last word exact fit?
00:008070 DE0073              +71 	jnzb	padded			. no, there is zero padding on last word
00:008071 30800C              +72 	z	*p			. pragmatic step: force zero-end
00:008072 17000C              +73 	inc	p			. as well as word-counted string
00:008073 85FFFE              +74 padded	ax	-2,,xi			. stretch the external stack frame adown
00:008074 C60077              +75 	jza	rebuild			. there weren't words. Last tuple is void
00:008075 8D0001              +76 	ay	1,,xi			. argc++
00:008076 B60068              +77 	j	argue
  :                            78 
00:008077 10000E              +79 rebuild	sx	fp			. tuple list <- fp
00:008078 500000              +80 	lx	r			. x <- start of args / end of tuples
00:008079 40000E              +81 	lr	fp			. limits register <- dp
  :                            82 	
00:00807A 85FFFE              +83 	ax	-2,,xi			. start with 1 unconditional make space + pop		
  :                            84 
00:00807B 38A000              +85 unpop	dpop	0, x			. tuple of internal stack newest first
00:00807C 38A001              +85 
00:00807D 85FFFE              +86 	ax	-2,,xi			. do more of them until x < fp
00:00807E F6007B              +87 	jxge	unpop	
00:00807F 18F004              +88 	sy	4, sp			. return argc in register a
00:008080 0D4000              +89 	off	see$1
00:008081 870000              +90 	qpop	r
00:008082 870004              +91 	qpop	a
00:008083 870014              +92 	qpop	RDATAC
00:008084 3D0000              +93 	fret	0
  :                            94 
  :                            95 		$root
  :                            272: 	$include	aqunique
  :                            1 
  :                            2 	$if		0
  :                            3 	$path		../
  :                            4 	$include	def/rta.def
  :                            5 	$include	language/stack.def
  :                            6 	$path
  :                            7 	$include	register.def
  :                            8 	$include	aquiform.def
  :                            9 	$include	ascii.def
  :                            10 	$include	binary.def
  :                            11 	$endif
  :                            12 
  :                            13:         $include        fp_scan
  :                            1 
  :                            2 $(0)
  :                            3 fscan			. READ_START in read_stream_start
00:008085 3E04F6              +4 fscans	lcal	advance
  :                            5 
00:008086 300011              +6 	z	SIGNS
00:008087 300012              +7 	z	SCALE
00:008088 300012              +8 	z	SCALE_TRIPPED
00:008089 300009              +9 	z	TRIPLE
00:00808A 30000A              +10 	z	TRIPLE+1
00:00808B 30000B              +11 	z	TRIPLE+2
  :                            12 
00:00808C 680004              +13 	anu	'-',,xi
00:00808D DD002D              +13 
00:00808E DE0091              +14 	jnzb	plus?
00:00808F 0F0011              +15 	n	SIGNS
00:008090 B60094              +16 	j	read_number_string
  :                            17 
00:008091 680004              +18 plus?	anu	'+',,xi
00:008092 DD002B              +18 
00:008093 DE009A              +19 	jnzb	first_digit
  :                            20 
  :                            21 read_number_string
00:008094 600013              +22 	READ_BYTE
00:008095 C6009A              +22 
00:008096 150008              +22 
00:008097 200013              +22 
00:008098 700010              +22 
00:008099 3E0521              +22 
  :                            23 
  :                            24 first_digit
00:00809A 6D0000              +25 	lb, xi	0
00:00809B 550006              +26 	lx, xi	6
00:00809C 3E00FD              +27 	lcal	read5
  :                            28 
00:00809D 450006              +29 	lr, xi	6
00:00809E F600E2              +30 	jxge	adjust_scale_no6	. got no digits
  :                            31 					. result registers are zero
  :                            32 	$if	$FINESSE
00:00809F 700002              +33 	tz	x
00:0080A0 3E0BF0              +34 	lcal	diminish6
  :                            35 	$endif
  :                            36 
00:0080A1 28000B              +37 	sb	11
  :                            38 
00:0080A2 700002              +39 	tz	x
00:0080A3 B600E2              +40 	j	adjust_scale
00:0080A4 3E00F5              +41 	lcal	read6
00:0080A5 F600E2              +42 	jxge	adjust_scale_no6	. got no more digits
  :                            43 					. got 1 to 6 digits
  :                            44 	$if	$FINESSE
00:0080A6 700002              +45 	tz	x
00:0080A7 3E0BF0              +46 	lcal	diminish6
  :                            47 	$endif
  :                            48 
00:0080A8 280007              +49 	sb	7
00:0080A9 300006              +50 	z	6
00:0080AA 68000B              +51 	lb	11
  :                            52 
  :                            53 	$if	$FINESSE
00:0080AB E8AC3A              +54 	mf	(1000000, 100000, 10000, 1000, 100, 10h), x
  :                            55 	$else
  :                            56 	mf	(1000000)
  :                            57 	$endif
  :                            58 
00:0080AC D70006              +59 	da	6
00:0080AD C7000A              +60 	ds	10
  :                            61 
00:0080AE 700002              +62 	tz	x
00:0080AF B600E2              +63 	j	adjust_scale
00:0080B0 3E00F5              +64 	lcal	read6
00:0080B1 F600E2              +65 	jxge	adjust_scale_no6	. got no more digits
  :                            66 					. got 1 to 6 digits
  :                            67 	$if	$FINESSE
00:0080B2 700002              +68 	tz	x
00:0080B3 3E0BF0              +69 	lcal	diminish6
  :                            70 	$endif
  :                            71 
00:0080B4 280007              +72 	sb	7
00:0080B5 68000B              +73 	lb	11
  :                            74 
  :                            75 	$if	$FINESSE
00:0080B6 E8AC3A              +76 	mf	(1000000, 100000, 10000, 1000, 100, 10h), x
  :                            77 	$else
  :                            78 	mf	(1000000)
  :                            79 	$endif
  :                            80 
00:0080B7 D70006              +81 	da	6
00:0080B8 28000B              +82 	sb	11
00:0080B9 200007              +83 	sa	7
00:0080BA B70006              +84 	sc	6
00:0080BB 68000A              +85 	lb	10
  :                            86 
  :                            87 	$if	$FINESSE
00:0080BC E8AC3A              +88 	mf	(1000000, 100000, 10000, 1000, 100, 10h), x
  :                            89 	$else
  :                            90 	mf	(1000000)
  :                            91 	$endif
  :                            92 
00:0080BD D70006              +93 	da	6
00:0080BE C70009              +94 	ds	9
  :                            95 
00:0080BF 700002              +96 	tz	x
00:0080C0 B600E2              +97 	j	adjust_scale		. last frame < 6 digits
  :                            98 
00:0080C1 550003              +99 	lx, xi	3
00:0080C2 3E00F6              +100 	lcal	read3
00:0080C3 450003              +101 	lr, xi	3
00:0080C4 F600E2              +102 	jxge	adjust_scale_no3	. got no more digits
  :                            103 
  :                            104 	$if	$FINESSE
00:0080C5 700002              +105 	tz	x
00:0080C6 3E0BF0              +106 	lcal	diminish6
  :                            107 	$endif
  :                            108 
00:0080C7 280007              +109 	sb	7			. got 1 2 or 3 digits
00:0080C8 300006              +110 	z	6
  :                            111 
00:0080C9 68000B              +112 	lb	11
  :                            113 
  :                            114 	$if	$FINESSE
00:0080CA E8AC40              +115 	mf	(1000, 100, 10t), x
  :                            116 	$else
  :                            117 	mf, xi	1000
  :                            118 	$endif
  :                            119 
00:0080CB D70006              +120 	da	6
00:0080CC 28000B              +121 	sb	11
00:0080CD 200007              +122 	sa	7
00:0080CE B70006              +123 	sc	6
00:0080CF 68000A              +124 	lb	10
  :                            125 
  :                            126 	$if	$FINESSE
00:0080D0 E8AC40              +127 	mf	(1000, 100, 10t), x
  :                            128 	$else
  :                            129 	mf, xi	1000
  :                            130 	$endif
  :                            131 
00:0080D1 D70006              +132 	da	6
00:0080D2 28000A              +133 	sb	10
00:0080D3 200007              +134 	sa	7
00:0080D4 680009              +135 	lb	9
  :                            136 
  :                            137 	$if	$FINESSE
00:0080D5 E8AC40              +138 	mf	(1000, 100, 10t), x
  :                            139 	$else
  :                            140 	mf, xi	1000
  :                            141 	$endif
  :                            142 
00:0080D6 C80007              +143 	ab	7
00:0080D7 280009              +144 	sb	9
  :                            145 
00:0080D8 700002              +146 	tz	x
00:0080D9 B600E2              +147 	j	adjust_scale		. last frame < 3 digits
  :                            148 
00:0080DA 600013              +149 	la	LAST_BYTE_READ
  :                            150 	$if	'e'^='E'
00:0080DB 680004              +151 	anu, xi	'e'
00:0080DC DD0065              +151 
00:0080DD CE00E2              +152 	jzb	adjust_scale		. it was not 3 digits
  :                            153 	$endif
00:0080DE 680004              +154 	anu, xi	'E'
00:0080DF DD0045              +154 
00:0080E0 CE00E2              +155 	jzb	adjust_scale
  :                            156 
  :                            157 
00:0080E1 3E010D              +158 	lcal	skate		. 21 digit columns is enough
  :                            159 				. just weigh the rest of them
  :                            160 
  :                            161 adjust_scale
  :                            162 	$if	$FINESSE=0
  :                            163 	lb	SCALE
  :                            164 	anb	x
  :                            165 	sb	SCALE
  :                            166 	$endif
  :                            167 
  :                            168 adjust_scale_no3
  :                            169 adjust_scale_no6
  :                            170 	
00:0080E2 FF0C43              +171 	call	(u72tofloat)
00:0080E3 600013              +172 	la	LAST_BYTE_READ
  :                            173 
  :                            174 	$if	'e'^='E'
00:0080E4 680004              +175 	anu, xi	'e'
00:0080E5 DD0065              +175 
00:0080E6 CE00EC              +176 	jzb	e_string_scan
  :                            177 	$endif
  :                            178 
00:0080E7 680004              +179 	anu, xi	'E'
00:0080E8 DD0045              +179 
00:0080E9 CE00EC              +180 	jzb	e_string_scan
  :                            181 
00:0080EA 6D0000              +182 	lb, xi	0
00:0080EB B600ED              +183 	j	e_string_noscan
  :                            184 
  :                            185 e_string_scan
00:0080EC 3E0123              +186 	lcal	e_string
  :                            187 e_string_noscan
00:0080ED C80012              +188 	ab	SCALE
00:0080EE 780012              +189 	tp	SCALE		. it's 1s complement
00:0080EF CD0001              +190 	ab, xi	1		. because it's shared with SCALE_TRIPPED
  :                            191 
00:0080F0 CE00F3              +192 	jzb	noscale
00:0080F1 FF0C44              +193 	call	(floating_scale)
00:0080F2 470008              +194 	qs	8
  :                            195 noscale
  :                            196 
  :                            197 .	lcal	repoussez	. unconsume the byte
  :                            198 				. which ended the scan
  :                            199 .				. should not need this
00:0080F3 4F0008              +200 	ql	8
00:0080F4 3D0000              +201 	fret	0
  :                            202 
  :                            203 
00:0080F5 550006              +204 read6	lx, xi	6		. start the order of number *100000
00:0080F6 6D0000              +205 read3	lb, xi	0		. and the sum at zero
00:0080F7 600013              +206 read1	READ_BYTE
00:0080F8 C600FD              +206 
00:0080F9 150008              +206 
00:0080FA 200013              +206 
00:0080FB 700010              +206 
00:0080FC 3E0521              +206 
00:0080FD C5FFC6              +207 read5	aa, xi	-'0'-10		. > symbol '9' in the data code
  :                            208 				. of this assembly?
00:0080FE 7E010C              +209 	jc	over		. if so, it is not a digit
00:0080FF C5000A              +210 	aa, xi	10		. if not, is it under '0'?
00:008100 5E0108              +211 	jnc	under		. then it is not a digit either
00:008101 85FFFF              +212 	ax, xi	-1		. count down and address the value list
00:008102 97ABF3              +213 	ex	table_add, x	. add
00:008103 780012              +214 	tp	SCALE_TRIPPED	. if in fraction, reduce scale
00:008104 1F0012              +215 	dec	SCALE		. as order of mantissa increases
00:008105 700002              +216 	tz	x		. last column in six?
00:008106 B600F7              +217 	j	read1
00:008107 350000              +218 	lret	0
  :                            219 
  :                            220 	$if	'.'>'9'		. is point > digits in the data code
  :                            221 				. of this assembly?
  :                            222 over
  :                            223 	aa, xi	'0'+10-'.'	. if so we might have a point
  :                            224 	jnza	out		. otherwise the number string is concluded
  :                            225 	n	SCALE_TRIPPED	. switch on fraction
  :                            226 	j	read1		. carry on
  :                            227 under
  :                            228 out	lret	0
  :                            229 	$endif
  :                            230 
  :                            231 	$if	'.'<'0'		. is point < digits in the data code
  :                            232 under				. of this assembly?
00:008108 C50002              +233 	aa, xi	'0'-'.'		. if so we might have a point
00:008109 D6010C              +234 	jnza	out		. otherwise conclude the number string
00:00810A 0F0012              +235 	n	SCALE_TRIPPED	. switch on fraction
00:00810B B600F7              +236 	j	read1		. carry on
  :                            237 over
00:00810C 350000              +238 out	lret	0
  :                            239 	$endif
  :                            240 
  :                            241 				. this routine slides over any
  :                            242 				. digits in the number string after
  :                            243 				. the first 21. Integer digits cause
  :                            244 				. the exponent to go up
  :                            245 
00:00810D 600013              +246 skate	READ_BYTE		. read extra digits, increment scale
00:00810E C60113              +246 
00:00810F 150008              +246 
00:008110 200013              +246 
00:008111 700010              +246 
00:008112 3E0521              +246 
  :                            247 				. if this is still the integer part
  :                            248 
00:008113 680004              +249 	anu, xi	'0'+10		. is this byte > '9'
00:008114 DD003A              +249 
00:008115 7E0122              +250 	jc	skate_over	. it's not a digit in this case
00:008116 680004              +251 	anu, xi	'0'		. is it < '0'
00:008117 DD0030              +251 
00:008118 5E011D              +252 	jnc	skate_under	. then it's not a digit either
00:008119 780012              +253 	tp	SCALE_TRIPPED	. it's a digit. Are we integer or fraction?
00:00811A B6010D              +254 	j	skate		. we're in the fraction drop the extra digit
00:00811B 170012              +255 	inc	SCALE		. we're in the integer, up the decimal scale
00:00811C B6010D              +256 	j	skate		. and then drop the digit
  :                            257 
  :                            258 	$if	'.'>'9'		. is point > than the digits
  :                            259 				. in the data code of this assembly?
  :                            260 skate_over
  :                            261 	anu, xi	'.'		. then it might be a decimal point
  :                            262 	jnzb	skate_away	. but if not the string is concluded
  :                            263 	n	SCALE_TRIPPED	. turn on the fraction
  :                            264 	j	skate		. and carry on
  :                            265 skate_under
  :                            266 skate_away
  :                            267 	lret	0
  :                            268 	$endif
  :                            269 
  :                            270 	$if	'.'<'0'		. is point < than the digits in the
  :                            271 				. data code of this assembly?
  :                            272 skate_under			
00:00811D 680004              +273 	anu, xi	'.'		. if so this might be a point
00:00811E DD002E              +273 
00:00811F DE0122              +274 	jnzb	skate_away	. if not conclude the string
00:008120 0F0012              +275 	n	SCALE_TRIPPED	. switch on fraction
00:008121 B6010D              +276 	j	skate		. and carry on
  :                            277 skate_over
  :                            278 skate_away
  :                            279 .	sa	LAST_BYTE_READ
00:008122 350000              +280 	lret	0
  :                            281 	$endif
  :                            282 
  :                            283 e_string
00:008123 600013              +284 	READ_BYTE
00:008124 C60129              +284 
00:008125 150008              +284 
00:008126 200013              +284 
00:008127 700010              +284 
00:008128 3E0521              +284 
00:008129 6D0000              +285 	lb, xi	0
00:00812A C5FFD5              +286 	aa, xi	-'+'
00:00812B C60134              +287 	jza	free_ip
00:00812C C5FFFE              +288 	aa, xi	'+'-'-'
00:00812D C60130              +289 	jza	free_in
00:00812E C5FFF3              +290 	aa, xi	'-'-'0'-10
00:00812F B6013B              +291 	j	free_iq
  :                            292 
  :                            293 free_in
00:008130 3E0134              +294 	lcal	free_ip
00:008131 0F0005              +295 	n	b
00:008132 170005              +296 	inc	b
00:008133 350000              +297 	lret	0
  :                            298 
00:008134 600013              +299 free_ip	READ_BYTE
00:008135 C6013A              +299 
00:008136 150008              +299 
00:008137 200013              +299 
00:008138 700010              +299 
00:008139 3E0521              +299 
  :                            300 
00:00813A C5FFC6              +301 	aa, xi	-'0'-10
00:00813B 7E0143              +302 free_iq	jc	free_ix
00:00813C C5000A              +303 	aa, xi	10
00:00813D 5E0143              +304 free_ia	jnc	free_ix
00:00813E 2E0001              +305 	sbl	1
00:00813F C00005              +306 	aa	b
00:008140 2E0002              +307 	sbl	2
00:008141 C80004              +308 	ab	a
00:008142 B60134              +309 	j	free_ip
00:008143 350000              +310 free_ix	lret	0
  :                            311 
  :                            312 
  :                            313 symbol		. READ_START in read_stream_start
00:008144 600013              +314 	la	LAST_BYTE_READ
00:008145 B6014C              +315 	j	blank_symbol?
  :                            316 
  :                            317 next_symbol
00:008146 600013              +318 	READ_BYTE
00:008147 C6014C              +318 
00:008148 150008              +318 
00:008149 200013              +318 
00:00814A 700010              +318 
00:00814B 3E0521              +318 
  :                            319 blank_symbol?
00:00814C 680004              +320 	anu, xi	' '
00:00814D DD0020              +320 
00:00814E CE0146              +321 	jzb	next_symbol
00:00814F 680004              +322 	anu, xi	HORIZONTAL_TAB
00:008150 DD0009              +322 
00:008151 CE0146              +323 	jzb	next_symbol
00:008152 680004              +324 	anu	CR,,xi
00:008153 DD000D              +324 
00:008154 CE0146              +325 	jzb	next_symbol
00:008155 680004              +326 	anu	LF,,xi
00:008156 DD000A              +326 
00:008157 CE0146              +327 	jzb	next_symbol
00:008158 3D0000              +328 	fret	0
  :                            14:         $include        i_scan
  :                            1 $(0)
  :                            2 iscanf
  :                            3 			. READ_START in read_stream_start
00:008159 3E04F6              +4 	lcal	advance
  :                            5 
00:00815A C5FFF7              +6 	aa, xi	-HORIZONTAL_TAB
00:00815B C60159              +7 	jza	iscanf
  :                            8 
00:00815C C5FFDE              +9 	aa, xi	HORIZONTAL_TAB-'+'
00:00815D C60167              +10 	jza	iscanlsp
00:00815E C5FFFE              +11 	aa, xi	'+'-'-'
00:00815F C6016A              +12 	jza	iscanlsm
00:008160 C5FFF3              +13 	aa, xi	'-'-'0'-10
00:008161 7E016D              +14 	jc	iscanx1
00:008162 C5000A              +15 	aa, xi	10
00:008163 5E016D              +16 	jnc	iscanx1
  :                            17 
00:008164 6D0000              +18 	lb, xi	0
00:008165 3E013D              +19 	lcal	free_ia
00:008166 3D0001              +20 	fret	1
  :                            21 
  :                            22 iscanlsp
00:008167 6D0000              +23 	lb, xi	0
00:008168 3E0134              +24 	lcal	free_ip
00:008169 3D0001              +25 	fret	1
  :                            26 iscanlsm
00:00816A 6D0000              +27 	lb, xi	0
00:00816B 3E0130              +28 	lcal	free_in
00:00816C 3D0001              +29 	fret	1
  :                            30 
00:00816D 3D0000              +31 iscanx1	fret	0
  :                            32 
  :                            33 
00:00816E 550006              +34 quix	lx, xi	6
00:00816F 6D0000              +35 	lb, xi	0
00:008170 600013              +36 quil	READ_BYTE
00:008171 C60176              +36 
00:008172 150008              +36 
00:008173 200013              +36 
00:008174 700010              +36 
00:008175 3E0521              +36 
00:008176 C5FFC6              +37 quiv	aa, xi	-'0'-10
00:008177 7E017E              +38 	jc	quit
00:008178 C5000A              +39 	aa, xi	10
00:008179 5E017E              +40 	jnc	quit
00:00817A 85FFFF              +41 	ax, xi	-1
00:00817B 97ABF3              +42 	ex	table_add, x
00:00817C 700002              +43 	tz	x
00:00817D B60170              +44 	j	quil
00:00817E 350000              +45 quit	lret	0
  :                            46 
  :                            47 
00:00817F 6D0000              +48 bi	lb, xi	0
00:008180 3E04F6              +49 	lcal	advance
  :                            50 
  :                            51 bi_sense
00:008181 C5FFD5              +52 	aa	-'+',,xi
00:008182 C60188              +53 	jza	bi_plus
00:008183 C5FFFE              +54 	aa, xi	'+'-'-'
00:008184 C6018A              +55 	jza	bi_minus
00:008185 C5FFF3              +56 	aa, xi	'-'-'0'-10
00:008186 3E013B              +57 	lcal	free_iq
00:008187 3D0000              +58 	fret	0
  :                            59 
00:008188 3E0134              +60 bi_plus	lcal	free_ip
00:008189 3D0000              +61 	fret	0
  :                            62 
  :                            63 bi_minus
00:00818A 3E0130              +64 	lcal	free_in
00:00818B 3D0000              +65 	fret	0
  :                            66 
00:00818C 300006              +67 bdi	z	6
00:00818D 300007              +68 	z	7
00:00818E 300008              +69 	z	8
00:00818F 3E04F6              +70 	lcal	advance
  :                            71 
  :                            72 bdi_sense
  :                            73 
00:008190 450006              +74 	lr, xi	6
00:008191 6D0000              +75 	lb, xi	0
00:008192 550006              +76 	lx, xi	6
  :                            77 
00:008193 C5FFD5              +78 	aa	-'+',,xi
00:008194 C6019A              +79 	jza	bdi_rp
00:008195 C5FFFE              +80 	aa, xi	'+'-'-'
00:008196 C6019C              +81 	jza	bdi_rn
00:008197 C5002D              +82 	aa, xi	'-'
00:008198 3E01A7              +83 	lcal	bdi_rp1		. this should be a numeral
00:008199 3D0000              +84 	fret	0
  :                            85 
00:00819A 3E01A1              +86 bdi_rp	lcal	bdi_rp0
00:00819B 3D0000              +87 	fret	0
  :                            88 
00:00819C 3E01A1              +89 bdi_rn	lcal	bdi_rp0
00:00819D C70006              +90 	ds	6
00:00819E 160030              +91 	dsr	48
00:00819F DF0006              +92 	dan	6
00:0081A0 3D0000              +93 	fret	0
  :                            94 
00:0081A1 600013              +95 bdi_rp0	READ_BYTE		. read the 1st numeral
00:0081A2 C601A7              +95 
00:0081A3 150008              +95 
00:0081A4 200013              +95 
00:0081A5 700010              +95 
00:0081A6 3E0521              +95 
00:0081A7 3E0176              +96 bdi_rp1	lcal	quiv		. interpret up to 6 numerals
00:0081A8 F601CC              +97 	jxge	bdi_z		. not a single one
00:0081A9 700002              +98 	tz	x
00:0081AA B601BC              +99 	j	bdi_qx		. up to 5
00:0081AB 280007              +100 	sb	7
00:0081AC 3E016E              +101 bdi_r6	lcal	quix		. read up to 6 more numerals
00:0081AD F601CC              +102 	jxge	bdi_z		. not a single one
00:0081AE 700002              +103 	tz	x
00:0081AF B601C0              +104 	j	bdi_x		.
00:0081B0 280009              +105 	sb	9
00:0081B1 680007              +106 	lb	7
00:0081B2 E80C45              +107 	mf	(1000000)
00:0081B3 F80006              +108 	push	6
00:0081B4 C70006              +109 	ds	6
00:0081B5 380005              +110 	pop	b
00:0081B6 E80C45              +111 	mf	(1000000)
00:0081B7 360018              +112 	dsl	24
00:0081B8 D70006              +113 	da	6
00:0081B9 D70008              +114 	da	8
00:0081BA C70006              +115 	ds	6
00:0081BB B601AC              +116 	j	bdi_r6
  :                            117 
00:0081BC E8AC46              +118 bdi_qx	mf	(1, R10, R100, R1000, R10000, R100000:h), x
00:0081BD 160018              +119 	dsr	24
00:0081BE C70006              +120 	ds	6
00:0081BF 350000              +121 	lret	0
  :                            122 
00:0081C0 E8AC46              +123 bdi_x	mf	(1, R10, R100, R1000, R10000, R100000:h), x
00:0081C1 200009              +124 	sa	9
00:0081C2 680007              +125 	lb	7
00:0081C3 E8AC3A              +126 	mf	(1000000, 100000, 10000, 1000, 100, 10:h), x
00:0081C4 F80006              +127 	push	6
00:0081C5 C70006              +128 	ds	6
00:0081C6 380005              +129 	pop	b
00:0081C7 E8AC3A              +130 	mf	(1000000, 100000, 10000, 1000, 100, 10:h), x
00:0081C8 360018              +131 	dsl	24
00:0081C9 D70006              +132 	da	6
00:0081CA D70008              +133 	da	8
00:0081CB C70006              +134 	ds	6
00:0081CC CF0006              +135 bdi_z	dl	6
00:0081CD 350000              +136 	lret	0
  :                            137 
00:0081CE 300008              +138 bti	z	8
00:0081CF 300009              +139 	z	9
00:0081D0 30000A              +140 	z	10
00:0081D1 30000B              +141 	z	11
  :                            142 
00:0081D2 3E04F6              +143 	lcal	advance
  :                            144 bti_sense
  :                            145 
00:0081D3 450006              +146 	lr, xi	6
00:0081D4 550006              +147 	lx, xi	6
00:0081D5 6D0000              +148 	lb, xi	0
  :                            149 
00:0081D6 C5FFD5              +150 	aa	-'+',,xi
00:0081D7 C601DD              +151 	jza	bti_rp
00:0081D8 C5FFFE              +152 	aa, xi	'+'-'-'
00:0081D9 C601DF              +153 	jza	bti_rn
00:0081DA C5002D              +154 	aa, xi	'-'
00:0081DB 3E01ED              +155 	lcal	bti_rp1
00:0081DC 3D0000              +156 	fret	0
  :                            157 
00:0081DD 3E01E7              +158 bti_rp	lcal	bti_rp0
00:0081DE 3D0000              +159 	fret	0
  :                            160 
00:0081DF 3E01E7              +161 bti_rn	lcal	bti_rp0
00:0081E0 160018              +162 	dsr	24
00:0081E1 DF000A              +163 	dan	10
00:0081E2 C70006              +164 	ds	6
00:0081E3 B70005              +165 	sc	b
00:0081E4 CDFFFF              +166 	ab, xi	-1
00:0081E5 D80009              +167 	anb	9
00:0081E6 3D0000              +168 	fret	0
  :                            169 
00:0081E7 600013              +170 bti_rp0	READ_BYTE
00:0081E8 C601ED              +170 
00:0081E9 150008              +170 
00:0081EA 200013              +170 
00:0081EB 700010              +170 
00:0081EC 3E0521              +170 
00:0081ED 3E0176              +171 bti_rp1	lcal	quiv
00:0081EE F6021E              +172 	jxge	bti_z
00:0081EF 700002              +173 	tz	x
00:0081F0 B60208              +174 	j	bti_qx
00:0081F1 28000B              +175 	sb	11
00:0081F2 3E016E              +176 bti_r6	lcal	quix
00:0081F3 F6021E              +177 	jxge	bti_z
00:0081F4 700002              +178 	tz	x
00:0081F5 B6020C              +179 	j	bti_x
00:0081F6 280007              +180 	sb	7
00:0081F7 300006              +181 	z	6
00:0081F8 68000B              +182 	lb	11
00:0081F9 E80C45              +183 	mf	(1000000)
00:0081FA D70006              +184 	da	6
00:0081FB 28000B              +185 	sb	11
00:0081FC 200007              +186 	sa	7
00:0081FD B70006              +187 	sc	6
00:0081FE 68000A              +188 	lb	10
00:0081FF E80C45              +189 	mf	(1000000)
00:008200 D70006              +190 	da	6
00:008201 28000A              +191 	sb	10
00:008202 200007              +192 	sa	7
00:008203 680009              +193 	lb	9
00:008204 E80C45              +194 	mf	(1000000)
00:008205 C80007              +195 	ab	7
00:008206 280009              +196 	sb	9
00:008207 B601F2              +197 	j	bti_r6
  :                            198 
00:008208 E8AC46              +199 bti_qx	mf	(1, R10, R100, R1000, R10000, R100000:h), x
00:008209 20000B              +200 	sa	11
00:00820A 4F0008              +201 	ql	8
00:00820B 350000              +202 	lret	0
  :                            203 
00:00820C E8AC46              +204 bti_x	mf	(1, R10, R100, R1000, R10000, R100000:h), x
00:00820D 200007              +205 	sa	7
00:00820E 300006              +206 	z	6
00:00820F 68000B              +207 	lb	11
00:008210 E8AC3A              +208 	mf	(1000000, 100000, 10000, 1000, 100, 10:h), x
00:008211 D70006              +209 	da	6
00:008212 28000B              +210 	sb	11
00:008213 200007              +211 	sa	7
00:008214 B70006              +212 	sc	6
00:008215 68000A              +213 	lb	10
00:008216 E8AC3A              +214 	mf	(1000000, 100000, 10000, 1000, 100, 10:h), x
00:008217 D70006              +215 	da	6
00:008218 28000A              +216 	sb	10
00:008219 200007              +217 	sa	7
00:00821A 680009              +218 	lb	9
00:00821B E8AC3A              +219 	mf	(1000000, 100000, 10000, 1000, 100, 10:h), x
00:00821C C80007              +220 	ab	7
00:00821D 280009              +221 	sb	9
00:00821E 4F0008              +222 bti_z	ql	8
00:00821F 350000              +223 	lret	0
  :                            224 
  :                            15:         $include        aquiform
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 	$if	0
  :                            40 
  :                            41 	$if	AQUIFORM_NET16
  :                            42 AQUIFORM_BITS $set	16
  :                            43 	$else
  :                            44 AQUIFORM_BITS $set	24
  :                            45 	$endif
  :                            46 
  :                            47 
  :                            48 $(0)
  :                            49 
  :                            50 	$if	COUNTED_STREAM
  :                            51 	inc	BYTES
  :                            52 	$endif
  :                            53 
  :                            54 	lret	0
  :                            55 
  :                            56 read_stream_start
  :                            57 	push	' ',,xi
  :                            58 	pop	LAST_BYTE_READ
  :                            59 	READ_STREAM_START
  :                            60 	READ_START
  :                            61 	fret	0
  :                            62 
  :                            63 write_stream_start
  :                            64 	WRITE_STREAM_START
  :                            65 	WRITE_START
  :                            66 	fret	0
  :                            67 
  :                            68 	$endif
  :                            69 
  :                            70 fedit_start
  :                            71 		. WRITE_START in write_stream_start
00:008220 470008              +72 	qs	8
00:008221 65002B              +73 	la, xi	'+'
00:008222 780008              +74 	tn	8
00:008223 B60225              +74 
00:008224 B6022A              +75 	j	write_sign
00:008225 0F0008              +76 	n	8
00:008226 0F0009              +77 	n	9
00:008227 0F000A              +78 	n	10
00:008228 0F000B              +79 	n	11
00:008229 65002D              +80 	la, xi	'-'
  :                            81 write_sign
00:00822A 260010              +82 	WRITE_BYTE
00:00822B 1D0008              +82 
00:00822C 170010              +82 
00:00822D 350000              +83 	lret	0
  :                            84 
  :                            85 fedit_integral_digit
00:00822E 600008              +86 	la	8
00:00822F A5000F              +87 	and, xi	15
00:008230 500004              +88 	lx	a
00:008231 650000              +89 	la, xi	0
00:008232 680009              +90 	lb	9
00:008233 36A000              +91 	dsl	0, x
  :                            92 
00:008234 F80004              +93 	push	a
  :                            94 
00:008235 60000A              +95 	la	10
00:008236 0EA000              +96 	sbr	0, x
00:008237 76A000              +97 	drl	0, x
00:008238 280009              +98 	sb	9
  :                            99 
00:008239 68000B              +100 	lb	11
00:00823A 06A000              +101 	sar	0, x
00:00823B 36A000              +102 	dsl	0, x
00:00823C C7000A              +103 	ds	10
  :                            104 
00:00823D 380004              +105 	pop	a
  :                            106 
00:00823E 950030              +107 	or, xi	'0'
00:00823F 260010              +108 	WRITE_BYTE
00:008240 1D0008              +108 
00:008241 170010              +108 
00:008242 350000              +109 	lret	0
  :                            110 
00:008243 3E0220              +111 fediti	lcal	fedit_start		. edit placing integral digits
00:008244 FF0C4C              +112 	call	(scale_integrate)	. before point
00:008245 B6024B              +113 	j	fedit1			. if feasible
  :                            114 
00:008246 3E02E5              +115 	lcal	iedit72_u
00:008247 300012              +116 	z	SCALE
00:008248 68000B              +117 	lb	11
00:008249 B60255              +118 	j	fedit_fraction
  :                            119 
  :                            120 
00:00824A 3E0220              +121 fedit	lcal	fedit_start
00:00824B 4F0008              +122 fedit1	ql	8
00:00824C EE0253              +123 	jnb	fedit_nonzero
  :                            124 fedit_z1
00:00824D 300012              +125 	z	SCALE
00:00824E 300008              +126 	z	8
00:00824F 300009              +127 	z	9
00:008250 30000A              +128 	z	10
00:008251 30000B              +129 	z	11
00:008252 B60254              +130 	j	fedit_zero
  :                            131 fedit_nonzero
00:008253 FF0C4D              +132 	call	(scale_out)
  :                            133 fedit_zero
00:008254 3E022E              +134 	lcal	fedit_integral_digit
  :                            135 
  :                            136 fedit_fraction
00:008255 65002E              +137 	la, xi	'.'
00:008256 260010              +138 	WRITE_BYTE
00:008257 1D0008              +138 
00:008258 170010              +138 
  :                            139 
00:008259 FF0C4E              +140 	call	(fraction3)
  :                            141 	
00:00825A 60C808              +142 	la	table, a
00:00825B 1D0010              +143 	WRITE3_BYTES
00:00825C 1D0008              +143 
00:00825D FD0003              +143 
00:00825E 2F0010              +143 
  :                            144 
00:00825F FF0C4F              +145 	call	(fraction6)
  :                            146 
00:008260 70000B              +147 	tz	11
00:008261 B60267              +148 	j	edit18
00:008262 70000A              +149 	tz	10
00:008263 B6026E              +150 	j	edit12
00:008264 700009              +151 	tz	9
00:008265 B60273              +152 	j	edit6
00:008266 B60275              +153 	j	edit_scale?
  :                            154 
00:008267 600009              +155 edit18	la	9
00:008268 3E0278              +156 	lcal	allsix
00:008269 60000A              +157 	la	10
00:00826A 3E0278              +158 	lcal	allsix
00:00826B 60000B              +159 	la	11
00:00826C 3E0285              +160 	lcal	up2six
00:00826D B60275              +161 	j	edit_scale?
  :                            162 
00:00826E 600009              +163 edit12	la	9
00:00826F 3E0278              +164 	lcal	allsix
00:008270 60000A              +165 	la	10
00:008271 3E0285              +166 	lcal	up2six
00:008272 B60275              +167 	j	edit_scale?
  :                            168 
00:008273 600009              +169 edit6	la	9
00:008274 3E0285              +170 	lcal	up2six
  :                            171 edit_scale?
00:008275 700012              +172 	tz	SCALE
00:008276 3E0314              +173 	lcal	edit_scale
00:008277 3D0000              +174 	fret	0
  :                            175 
00:008278 160018              +176 allsix	dsr	24
00:008279 F503E8              +177 	d, xi	1000
00:00827A 60C808              +178 	la	table, a
00:00827B 1D0010              +179 	WRITE3_BYTES
00:00827C 1D0008              +179 
00:00827D FD0003              +179 
00:00827E 2F0010              +179 
00:00827F 60D808              +180 	la	table, b
00:008280 1D0010              +181 	WRITE3_BYTES
00:008281 1D0008              +181 
00:008282 FD0003              +181 
00:008283 2F0010              +181 
00:008284 350000              +182 	lret	0
  :                            183 
00:008285 160018              +184 up2six	dsr	24
00:008286 F503E8              +185 	d, xi	1000
00:008287 60C808              +186 	la	table, a
00:008288 1D0010              +187 	WRITE3_BYTES
00:008289 1D0008              +187 
00:00828A FD0003              +187 
00:00828B 2F0010              +187 
00:00828C CE0292              +188 	jzb	only3
00:00828D 60D808              +189 	la	table, b
00:00828E 1D0010              +190 	WRITE3_BYTES
00:00828F 1D0008              +190 
00:008290 FD0003              +190 
00:008291 2F0010              +190 
00:008292 350000              +191 only3	lret	0
  :                            192 
  :                            193 
  :                            194 .	these are genteel column-oriented translates
  :                            195 .	so far they have only been needed unsigned
  :                            196 .	not much trouble however to push sign-handling
  :                            197 .	onto the start of them
  :                            198 
  :                            199 
00:008293 A60299              +200 iedit	jpa	ieditp
00:008294 160018              +201 	dsr	24
00:008295 600C50              +202 	la	('-'*/$word-$byte:s)
  :                            203 			. WRITE_START in write_stream_start
00:008296 1D0008              +204 	WRITE_UBYTE
00:008297 170010              +204 
00:008298 D00005              +205 	ana	b
00:008299 3E02D2              +206 ieditp	lcal	iedit_u
00:00829A 3D0000              +207 	fret	0
  :                            208 
  :                            209 iedits			. WRITE_START in write_stream_start
00:00829B 200005              +210 	sa	b
00:00829C 600C51              +211 	la	('+'*/$word-$byte:s)
00:00829D AE02A1              +212 	jpb	ieditsp
00:00829E 600C50              +213 	la	('-'*/$word-$byte:s)
00:00829F 0F0005              +214 	n	b
00:0082A0 CD0001              +215 	ab, xi	1
00:0082A1 1D0008              +216 ieditsp	WRITE_UBYTE
00:0082A2 170010              +216 
00:0082A3 600005              +217 	la	b
00:0082A4 3E02D2              +218 	lcal	iedit_u
00:0082A5 3D0000              +219 	fret	0
  :                            220 
00:0082A6 3E02D2              +221 ieditu	lcal	iedit_u
00:0082A7 3D0000              +222 	fret	0
  :                            223 
00:0082A8 A602AF              +224 iedit48	jpa     iedit48p
00:0082A9 C70006              +225         ds	6
00:0082AA 600C50              +226         la      ('-'*/$word-$byte:s)
  :                            227         		. WRITE_START in write_stream_start
00:0082AB 1D0008              +228         WRITE_UBYTE
00:0082AC 170010              +228 
00:0082AD 6D0000              +229         lb, xi	0
00:0082AE DF0006              +230 	dan	6
  :                            231 iedit48p
00:0082AF 3E02D7              +232 	lcal    iedit48_u
00:0082B0 3D0000              +233         fret    0
  :                            234 
  :                            235 iedit48s
  :                            236 			. WRITE_START in write_stream_start
00:0082B1 C70006              +237         ds	6
00:0082B2 A602B9              +238 	jpa	iedit48sp
00:0082B3 600C50              +239         la      ('-'*/$word-$byte:s)
00:0082B4 1D0008              +240         WRITE_UBYTE
00:0082B5 170010              +240 
00:0082B6 160030              +241 	dsr	48
00:0082B7 DF0006              +242 	dan	6
00:0082B8 B602BD              +243 	j	iedit48si
  :                            244 iedit48sp
00:0082B9 600C51              +245 	la	('+'*/$word-$byte:s)
00:0082BA 1D0008              +246 	WRITE_UBYTE
00:0082BB 170010              +246 
00:0082BC CF0006              +247         dl	6
  :                            248 iedit48si
00:0082BD 3E02D7              +249         lcal    iedit48_u
00:0082BE 3D0000              +250         fret    0
  :                            251 
  :                            252 iedit48u
00:0082BF 3E02D7              +253 	lcal	iedit48_u
00:0082C0 3D0000              +254 	fret	0
  :                            255 
00:0082C1 A602C6              +256 iedit72	jpa     iedit72p
  :                            257 			. WRITE_START in write_stream_start
00:0082C2 600C50              +258 	la	('-'*/$word-$byte:s)
00:0082C3 1D0008              +259 	WRITE_UBYTE
00:0082C4 170010              +259 
00:0082C5 FF0C52              +260 	call	(n72comp2)
  :                            261 iedit72p
00:0082C6 3E02E5              +262 	lcal    iedit72_u
00:0082C7 3D0000              +263         fret    0
  :                            264 
  :                            265 iedit72s
  :                            266 			. WRITE_START in write_stream_start
00:0082C8 600C51              +267         la      ('+'*/$word-$byte:s)
00:0082C9 AE02CC              +268         jpb     iedit72sp
00:0082CA FF0C52              +269 	call	(n72comp2)
00:0082CB 600C50              +270         la      ('-'*/$word-$byte:s)
00:0082CC 1D0008              +271 iedit72sp WRITE_UBYTE
00:0082CD 170010              +271 
00:0082CE 3E02E5              +272         lcal    iedit72_u
00:0082CF 3D0000              +273         fret    0
  :                            274 
  :                            275 iedit72u
00:0082D0 3E02E5              +276 	lcal	iedit72_u
00:0082D1 3D0000              +277 	fret	0
  :                            278 
  :                            279 
  :                            280 iedit_u			. WRITE_START in write_stream_start
  :                            281 
00:0082D2 160018              +282 	dsr	24
00:0082D3 F00C45              +283 	d	(1000000)
00:0082D4 9F0004              +284 	dpush	a
00:0082D5 450001              +285 	lr, xi	2-1
00:0082D6 B602FF              +286 	j	izeditugo
  :                            287 
  :                            288 iedit48_u
  :                            289 			. WRITE_START in write_stream_start
  :                            290 
00:0082D7 280009              +291 	sb	9		. it may be unsigned all 48 bits
00:0082D8 160018              +292 	dsr	24		. divide it as positive
00:0082D9 F00C45              +293 	d	(1000000)
00:0082DA 200008              +294 	sa	8		. 1st quotient upper
00:0082DB 600005              +295 	la	b
00:0082DC 680009              +296 	lb	9		. dividend 2nd word
00:0082DD F00C45              +297 	d	(1000000)
00:0082DE F80005              +298 	push	b		. 1st remainder	
00:0082DF 200005              +299 	sa	b		. 1st quotient lower
00:0082E0 600008              +300 	la	8		. 1st quotient upper
00:0082E1 F00C45              +301 	d	(1000000)
00:0082E2 9F0004              +302 	dpush	a
  :                            303 
00:0082E3 450002              +304 	lr, xi	3-1
00:0082E4 B602FF              +305 	j	izeditugo
  :                            306 
  :                            307 
  :                            308 iedit72_u
  :                            309 			. WRITE_START in write_stream_start
  :                            310 				. you can't start with 1st word in a
  :                            311 				. because this is unsigned positive
  :                            312 				. maybe all of 72 bits
00:0082E5 650000              +313 	la, xi	0
00:0082E6 F80006              +314 	push	6		. you don't need the ms quotient word
  :                            315 				. but you get it
  :                            316 
00:0082E7 F00C45              +317 	d	(1000000)	. 
00:0082E8 F80004              +318 	push	a		. first quotient word
00:0082E9 600005              +319 	la	b
00:0082EA 68F001              +320 	lb	1, sp		. 2nd input word
00:0082EB F00C45              +321 	d	(1000000)
00:0082EC F80004              +322 	push	a		. second quotient word
00:0082ED 600005              +323 	la	b
00:0082EE 680007              +324 	lb	7		. 3nd input word
00:0082EF F00C45              +325 	d	(1000000)
00:0082F0 F80004              +326 	push	a		. 3rd quotient word
00:0082F1 28F003              +327 	sb	3, sp		. lowest remainder word
  :                            328 
00:0082F2 60F002              +329 	la	2, sp		. first quotient ms word
00:0082F3 68F001              +330 	lb	1, sp		. and 2nd word
00:0082F4 F00C45              +331 	d	(1000000)
00:0082F5 20F001              +332 	sa	1, sp
00:0082F6 600005              +333 	la	b
00:0082F7 68F000              +334 	lb	0, sp		. first quotient ls word
00:0082F8 F00C45              +335 	d	(1000000)
00:0082F9 28F002              +336 	sb	2, sp		. second lowest remainder word
00:0082FA 680004              +337 	lb	a
00:0082FB 60F001              +338 	la	1, sp
00:0082FC F00C45              +339 	d	(1000000)
00:0082FD C7F000              +340 	ds	0, sp
  :                            341 
00:0082FE 450003              +342 	lr, xi	4-1
  :                            343 
  :                            344 izeditugo
00:0082FF 300007              +345 	z	7		. significance off
  :                            346 izeditugo_next
00:008300 380005              +347 	pop	b
00:008301 780007              +348 	tp	7
00:008302 B60307              +349 	j	izeditudo
00:008303 CE0308              +350 	jzb	izeditudont
00:008304 0F0007              +351 	n	7
00:008305 3E0326              +352 	lcal	izedit6
00:008306 B60308              +353 	j	izeditudid
  :                            354 izeditudo
00:008307 3E0348              +355 	lcal	iprint6
  :                            356 izeditudont
  :                            357 izeditudid
00:008308 1E0300              +358 	jdr	izeditugo_next
  :                            359 	
00:008309 700007              +360 	tz	7		. significance on?
00:00830A B6030F              +361 	j	izexit
  :                            362 
00:00830B 650030              +363 	la, xi	'0'
00:00830C 260010              +364 	WRITE_BYTE
00:00830D 1D0008              +364 
00:00830E 170010              +364 
  :                            365 
00:00830F 350000              +366 izexit	lret	0
  :                            367 
00:008310 65002D              +368 izeditn	la	'-',,xi
00:008311 0F0005              +369 	n	b
00:008312 CD0001              +370 	ab	1,,xi
00:008313 350000              +371 	lret	0
  :                            372 
  :                            373 edit_scale
00:008314 650065              +374 	la	'e',,xi
00:008315 260010              +375 	WRITE_BYTE
00:008316 1D0008              +375 
00:008317 170010              +375 
00:008318 680012              +376 	lb	SCALE
  :                            377 
00:008319 65002B              +378 izedits	la	'+',,xi
00:00831A 780005              +379 	tp	b
00:00831B 3E0310              +380 	lcal	izeditn
00:00831C 260010              +381 	WRITE_BYTE
00:00831D 1D0008              +381 
00:00831E 170010              +381 
00:00831F F00C45              +382 iedit7	d	(1000000)
00:008320 C60326              +383 	jza	izedit6
00:008321 950030              +384 	or	'0',,xi
00:008322 260010              +385 	WRITE_BYTE
00:008323 1D0008              +385 
00:008324 170010              +385 
00:008325 B60348              +386 	j	iprint6
  :                            387 
00:008326 650000              +388 izedit6	la, xi	0
00:008327 F503E8              +389 	d, xi	1000
00:008328 C60330              +390 	jza	izeditu
00:008329 3E0331              +391 	lcal	izedit3
00:00832A 60D808              +392 	la	table, b
00:00832B 1D0010              +393 	WRITE3_BYTES
00:00832C 1D0008              +393 
00:00832D FD0003              +393 
00:00832E 2F0010              +393 
00:00832F 350000              +394 	lret	0
  :                            395 
  :                            396 izeditq* $proc
  :                            397 	sal	$byte
  :                            398 	mta	('0'*/$word-$byte)
  :                            399 	j	iz3out($word/$byte-?)
  :                            400 	$end
  :                            401 
  :                            402 izeditp* $proc
  :                            403 	WRITE_BYTES	?
  :                            404 	lret
  :                            405 	$end
  :                            406 
00:008330 600005              +407 izeditu	la	b
00:008331 60C808              +408 izedit3	la	table, a
00:008332 480C53              +409 	lk	(-1*/16)
00:008333 AF0C54              +410 	mta	('0'*/16:s)
00:008334 B60343              +411 	j	iz3out($word/$byte)
  :                            412 
00:008335 260008              +413 ?	$do	$word/$byte-1,	izeditq
00:008336 AF0C54              +413 
00:008337 B6033F              +413 
00:008338 260008              +413 
00:008339 AF0C54              +413 
00:00833A B6033B              +413 
  :                            414 
00:00833B 1D0008              +415 ?	$do	$word/$byte,iz3out(?)	izeditp
00:00833C FD0001              +415 
00:00833D 2F0010              +415 
00:00833E 350000              +415 
00:00833F 1D0010              +415 
00:008340 FD0002              +415 
00:008341 2F0010              +415 
00:008342 350000              +415 
00:008343 1D0010              +415 
00:008344 1D0008              +415 
00:008345 FD0003              +415 
00:008346 2F0010              +415 
00:008347 350000              +415 
  :                            416 	
  :                            417 	.	fear not, there is an lret instruction
  :                            418 	.	in izeditp macro
  :                            419 
00:008348 650000              +420 iprint6	la, xi	0
00:008349 F503E8              +421 	d, xi	1000
00:00834A 60C808              +422 	la	table, a
00:00834B 1D0010              +423 	WRITE3_BYTES
00:00834C 1D0008              +423 
00:00834D FD0003              +423 
00:00834E 2F0010              +423 
00:00834F 60D808              +424 	la	table, b
00:008350 1D0010              +425 	WRITE3_BYTES
00:008351 1D0008              +425 
00:008352 FD0003              +425 
00:008353 2F0010              +425 
00:008354 350000              +426 	lret	0
  :                            427 
00:008355 4D00FF              +428 texto	lk	+(1*/$byte)-1,,xi
00:008356 60B000              +429 nexto	la	0, y
00:008357 8D0001              +430 	ay	1,,xi
00:008358 AF0C36              +431 	mtane	(0)		. is any byte in this word zero?
00:008359 B6035B              +431 
00:00835A B60360              +432 	j	trail
00:00835B 1D0010              +433 	WRITE3_BYTES
00:00835C 1D0008              +433 
00:00835D FD0003              +433 
00:00835E 2F0010              +433 
00:00835F B60356              +434 	j	nexto
  :                            435 
00:008360 480C53              +436 trail	lk	(-1*/$word-$byte)
00:008361 AF0C36              +437 trail?	mtane	(0)		. is the high order byte zero?
00:008362 B60364              +437 
00:008363 3D0000              +438 	fret	0		. yes, finish
00:008364 1D0008              +439 	wsr	$byte		. no, shift into staging register
00:008365 170010              +440 	inc	BYTES
00:008366 B60361              +441 	j	trail?
  :                            16:         $include        lib192
  :                            1 
  :                            2 $(0)
  :                            3 fp192	$tree
00:008367 8F0C55              +4 fscan	qpush	(0.0)
00:008368 8FF000              +5 		qpush	0, sp
  :                            6 
  :                            7 major		$equf	0, sp
  :                            8 mantissa	$equf	major+2
  :                            9 minor		$equf	major+4
  :                            10 
  :                            11 		. READ_START is in read_stream_start
  :                            12 
00:008369 3E04F6              +13 fscans	lcal	advance
  :                            14 	
00:00836A 300011              +15 	z	SIGNS
00:00836B 300012              +16 	z	SCALE
00:00836C 300012              +17 	z	SCALE_TRIPPED
  :                            18 
00:00836D 680004              +19 	anu	'-',,xi
00:00836E DD002D              +19 
00:00836F DE0372              +20 	jnzb	plus?
00:008370 0F0011              +21 	n	SIGNS
00:008371 B60375              +22 	j	read_number_string
  :                            23 
00:008372 680004              +24 plus?	anu	'+',,xi
00:008373 DD002B              +24 
00:008374 DE037B              +25 	jnzb	first_digit
  :                            26 
  :                            27 read_number_string
00:008375 600013              +28 	READ_BYTE
00:008376 C6037B              +28 
00:008377 150008              +28 
00:008378 200013              +28 
00:008379 700010              +28 
00:00837A 3E0521              +28 
  :                            29 
  :                            30 first_digit		. first of possible 43 digits read
  :                            31 
00:00837B C5FFC6              +32 	aa, xi	-'0'-10
00:00837C 7E03F9              +33 	jc	adjust_nothing
00:00837D C5000A              +34 	aa, xi	10
00:00837E 5E03F9              +35 	jnc	adjust_nothing
  :                            36 
00:00837F 20F007              +37 	sa	mantissa+5
  :                            38 			. there may now be 7 * 6 more digits
  :                            39 
00:008380 450006              +40 	lr	6,,xi
  :                            41 
00:008381 3E00F5              +42 	lcal	read6
00:008382 F603D5              +43 	jxge	scale_mantissa
00:008383 700002              +44 	tz	x
00:008384 3E0BF0              +45 	lcal	diminish6
00:008385 280007              +46 	sb	7
00:008386 68F007              +47 	lb	mantissa+5
00:008387 E8AC3A              +48 	mf	(1000000, 100000, 10000, 1000, 100, 10h), x
00:008388 C80007              +49 	ab	7)
00:008389 28F007              +50 	sb	mantissa+5	. 10 million fits in there
00:00838A 700002              +51 	tz	x
00:00838B B603D5              +52 	j	scale_mantissa
  :                            53 
00:00838C 3E00F5              +54 	lcal	read6
00:00838D F603D5              +55 	jxge	scale_mantissa
00:00838E 700002              +56 	tz	x
00:00838F 3E0BF0              +57 	lcal	diminish6
00:008390 280007              +58 	sb	7
00:008391 300006              +59 	z	6
00:008392 68F007              +60 	lb	mantissa+5
00:008393 E8AC3A              +61 	mf	(1000000, 100000, 10000, 1000, 100, 10h), x
00:008394 D70006              +62 	da	6
00:008395 C7F006              +63 	ds	mantissa+4	. now more than 16 million
00:008396 700002              +64 	tz	x
00:008397 B603D5              +65 	j	scale_mantissa
  :                            66 
00:008398 3E00F5              +67 	lcal	read6
00:008399 F603D5              +68 	jxge	scale_mantissa
00:00839A 700002              +69 	tz	x
00:00839B 3E0BF0              +70 	lcal	diminish6
                                	c	(madd144)	(1000000, 100000, 10000, 1000, 100, 10h), x	;
                                		mantissa+3,,i	;
00:00839C FCF007              +73 		mantissa+5,,i
00:00839D FCF006              +73 
00:00839E F8AC3A              +73 
00:00839F FCF003              +73 
00:0083A0 FF0C59              +73 
00:0083A1 38000F              +73 
00:0083A2 700002              +74 	tz	x
00:0083A3 B603D5              +75 	j	scale_mantissa
  :                            76 
00:0083A4 3E00F5              +77         lcal    read6
00:0083A5 F603D5              +78         jxge    scale_mantissa
00:0083A6 700002              +79         tz      x
00:0083A7 3E0BF0              +80         lcal    diminish6
                                        c       (madd144) (1000000, 100000, 10000, 1000, 100, 10h), x        ;
                                                mantissa+2,,i      ;
00:0083A8 FCF007              +83                 mantissa+5,,i
00:0083A9 FCF005              +83 
00:0083AA F8AC3A              +83 
00:0083AB FCF003              +83 
00:0083AC FF0C59              +83 
00:0083AD 38000F              +83 
00:0083AE 700002              +84         tz      x
00:0083AF B603D5              +85         j       scale_mantissa
  :                            86 
00:0083B0 3E00F5              +87         lcal    read6
00:0083B1 F603D5              +88         jxge    scale_mantissa
00:0083B2 700002              +89         tz      x
00:0083B3 3E0BF0              +90         lcal    diminish6
                                        c       (madd144) (1000000, 100000, 10000, 1000, 100, 10h), x        ;
                                                mantissa+1,,i      ;
00:0083B4 FCF007              +93                 mantissa+5,,i
00:0083B5 FCF004              +93 
00:0083B6 F8AC3A              +93 
00:0083B7 FCF003              +93 
00:0083B8 FF0C59              +93 
00:0083B9 38000F              +93 
00:0083BA 700002              +94         tz      x
00:0083BB B603D5              +95         j       scale_mantissa
  :                            96 
00:0083BC 3E00F5              +97         lcal    read6
00:0083BD F603D5              +98         jxge    scale_mantissa
00:0083BE 700002              +99         tz      x
00:0083BF 3E0BF0              +100         lcal    diminish6
                                        c       (madd144) (1000000, 100000, 10000, 1000, 100, 10h), x        ;
                                                mantissa,,i        ;
00:0083C0 FCF007              +103                 mantissa+5,,i
00:0083C1 FCF003              +103 
00:0083C2 F8AC3A              +103 
00:0083C3 FCF003              +103 
00:0083C4 FF0C59              +103 
00:0083C5 38000F              +103 
00:0083C6 700002              +104         tz      x
00:0083C7 B603D5              +105         j       scale_mantissa
  :                            106 
00:0083C8 3E00F5              +107         lcal    read6
00:0083C9 F603D5              +108         jxge    scale_mantissa
00:0083CA 700002              +109         tz      x
00:0083CB 3E0BF0              +110         lcal    diminish6
                                        c       (madd144) (1000000, 100000, 10000, 1000, 100, 10h), x        ;
                                                mantissa,,i        ;
00:0083CC FCF007              +113                 mantissa+5,,i
00:0083CD FCF003              +113 
00:0083CE F8AC3A              +113 
00:0083CF FCF003              +113 
00:0083D0 FF0C59              +113 
00:0083D1 38000F              +113 
00:0083D2 700002              +114 	tz	x
00:0083D3 B603D5              +115 	j	scale_mantissa
00:0083D4 3E010D              +116 	lcal	skate
  :                            117 
  :                            118 scale_mantissa
00:0083D5 60F002              +119 	la	mantissa
00:0083D6 200009              +120 	sa	TRIPLE
00:0083D7 CFF003              +121 	dl	mantissa+1
00:0083D8 C7000A              +122 	ds	TRIPLE+1
00:0083D9 FF0C43              +123 	call	(u72tofloat)
00:0083DA 3E03FC              +124 	lcal	a72magnitude
00:0083DB 200008              +125 	sa	QUAD
00:0083DC 4F0008              +126 	ql	QUAD
00:0083DD 47F000              +127 	qs	major
  :                            128 
00:0083DE 60F005              +129 	la	mantissa+3
00:0083DF 200009              +130 	sa	TRIPLE
00:0083E0 CFF006              +131 	dl	mantissa+4
00:0083E1 C7000A              +132 	ds	TRIPLE+1
00:0083E2 FF0C43              +133 	call	(u72tofloat)
00:0083E3 200008              +134 	sa	QUAD
00:0083E4 4F0008              +135 	ql	QUAD
  :                            136 
00:0083E5 050008              +137 	on	fp$r
00:0083E6 67F000              +138 	fa	major		. get as much as possible into major
00:0083E7 47F000              +139 	qs	major
00:0083E8 4F0008              +140 	ql	QUAD
00:0083E9 47F004              +141 	qs	minor
  :                            142 
00:0083EA 600013              +143         la      LAST_BYTE_READ
  :                            144 
  :                            145         $if     'e'^='E'
00:0083EB 680004              +146         anu, xi 'e'
00:0083EC DD0065              +146 
00:0083ED CE03F3              +147         jzb     e_string_scan
  :                            148         $endif
  :                            149 
00:0083EE 680004              +150         anu, xi 'E'
00:0083EF DD0045              +150 
00:0083F0 CE03F3              +151         jzb     e_string_scan
  :                            152 
00:0083F1 6D0000              +153         lb, xi  0
00:0083F2 B603F4              +154         j       e_string_noscan
  :                            155 
  :                            156 e_string_scan
00:0083F3 3E0123              +157         lcal    e_string
  :                            158 e_string_noscan
00:0083F4 C80012              +159         ab      SCALE
00:0083F5 780012              +160         tp      SCALE           . it's 1s complement
00:0083F6 CD0001              +161         ab, xi  1               . because it's shared with SCALE_TRIPPED
  :                            162 
00:0083F7 CE03F9              +163         jzb     noscale
00:0083F8 FF0C5A              +164         call    (floating_scale192)
  :                            165 
  :                            166 adjust_nothing
00:0083F9 870004              +167 noscale	qpop	a
00:0083FA 870008              +168 	qpop	8
00:0083FB 3D0000              +169 	fret	0
  :                            170 
  :                            171 a72magnitude
00:0083FC E603FF              +172 	jna	a72negativemagnitude
00:0083FD C50048              +173 	aa	72,,xi
00:0083FE 350000              +174 	lret	0
  :                            175 a72negativemagnitude
00:0083FF C5FFB8              +176 	aa	-72,,xi
00:008400 350000              +177 	lret	0
  :                            178 
  :                            179 	$root
  :                            17:         $include        fedit192
  :                            1 $(0)
  :                            2 fedit192 $tree
  :                            3 
  :                            4 fedit_start
  :                            5 			. WRITE_START is in write_stream_start	. a is on stack top
00:008401 65002B              +6 	la	'+',,xi
00:008402 78F001              +7 	tn	1, sp	. 0, sp is lcal return address
00:008403 B60405              +7 
00:008404 B6040E              +8 	j	write_sign
00:008405 0FF001              +9 	n	1, sp
00:008406 0F0005              +10 	n	b
00:008407 0F0006              +11 	n	6
00:008408 0F0007              +12 	n	7
00:008409 0F0008              +13 	n	8
00:00840A 0F0009              +14 	n	9
00:00840B 0F000A              +15 	n	10
00:00840C 0F000B              +16 	n	11
00:00840D 65002D              +17 	la	'-',,xi
  :                            18 write_sign
00:00840E 260010              +19 	WRITE_BYTE
00:00840F 1D0008              +19 
00:008410 170010              +19 
00:008411 350000              +20 	lret	0
  :                            21 
00:008412 0D0008              +22 fedit	off	fp$r	. makes a mess if it stays on
00:008413 F80004              +23 	push	a
00:008414 600008              +24 	la	8
00:008415 B00009              +25 	xor	9
00:008416 E60419              +26 	jna	fedito	. $residue is normalised
  :                            27 
00:008417 380004              +28 	pop	a	. $residue is not normalised
00:008418 B60243              +29 	j	fediti	. edit a 4-word float
  :                            30 			. zero $residue has no
  :                            31 			. exponent for alignment 
  :                            32 
00:008419 3E0401              +33 fedito	lcal	fedit_start
00:00841A 380004              +34 	pop	a
  :                            35 
00:00841B FF0C5B              +36 	call	(scale_out192)
  :                            37 
00:00841C FF0C5C              +38 	call	(align192)
  :                            39 
00:00841D 950030              +40 	or	'0',,xi
00:00841E 260010              +41 	WRITE_BYTE
00:00841F 1D0008              +41 
00:008420 170010              +41 
00:008421 65002E              +42 	la	'.',,xi
00:008422 260010              +43 	WRITE_BYTE
00:008423 1D0008              +43 
00:008424 170010              +43 
  :                            44 
00:008425 FF0C5D              +45 	call	(fraction6_7)
  :                            46 
00:008426 60A000              +47 display	la	0, x
00:008427 F6042D              +48 	jxge	display_last
00:008428 F80006              +49 	push	6
00:008429 3E0278              +50 	lcal	allsix
00:00842A 380006              +51 	pop	6
00:00842B 850001              +52 	ax	1,,xi
00:00842C B60426              +53 	j	display
  :                            54 display_last
00:00842D 3E0285              +55 	lcal	up2six
  :                            56 
00:00842E 700012              +57 	tz	SCALE
00:00842F 3E0314              +58 	lcal	edit_scale
00:008430 3D0000              +59 	fret	0
  :                            60 
  :                            61 	$root
  :                            18:         $include        token
  :                            1 $(0)
  :                            2 
  :                            3 .	retrieve a maximum # text columns in aligned words
  :                            4 .	from a scanned array of free column format
  :                            5 .	maximim columns is in a
  :                            6 .	start receive buffer is in b and stays there
  :                            7 .	a returns the # words stored at *b
  :                            8 .	b$stream16w must be off
  :                            9 
00:008431 C60448              +10 token	jza	tokenz		. nane
00:008432 400004              +11 	lr	a
00:008433 4D00FF              +12 	lk, xi	+(1*/$byte)-1	
00:008434 300016              +13 	z	WDATAC
00:008435 0D0010              +14 	off	b$stream16w
00:008436 28000C              +15 	sb	p
00:008437 1F0000              +16 	dec	r
  :                            17 
  :                            18 token_search
00:008438 3E0449              +19 	lcal	tcolumn
00:008439 B60438              +20 	j	token_search
00:00843A AF0C36              +21 	mta	(0)
00:00843B B60442              +22 	j	token_store
00:00843C B60445              +23 	j	token_total
  :                            24 
  :                            25 token_read
00:00843D 3E0449              +26 	lcal	tcolumn
00:00843E B60445              +27 	j	token_total
00:00843F AF0C36              +28 	mtane	(0)
00:008440 B60442              +28 
00:008441 B60445              +29 	j	token_total
  :                            30 
  :                            31 token_store
00:008442 260010              +32 	sal	$word-$byte
00:008443 1D0008              +33 	wsr	$byte
00:008444 1E043D              +34 	jdr	token_read
  :                            35 
  :                            36 token_total
00:008445 1D0010              +37 	wsr	$word-$byte
00:008446 60000C              +38 	la	p		. words written result
00:008447 D00005              +39 	ana	b		. p - starting p
00:008448 3D0000              +40 tokenz	fret	0
  :                            41 
00:008449 600013              +42 tcolumn	READ_BYTE
00:00844A C6044F              +42 
00:00844B 150008              +42 
00:00844C 200013              +42 
00:00844D 700010              +42 
00:00844E 3E0521              +42 
00:00844F AF0C5E              +43 	mtane	(' ')
00:008450 B60452              +43 
00:008451 350000              +44 	lret	0
00:008452 AF0C5F              +45 	mtane	(CR)
00:008453 B60455              +45 
00:008454 350000              +46 	lret	0
00:008455 AF0C60              +47 	mtane	(LF)
00:008456 B60458              +47 
00:008457 350000              +48 	lret	0
00:008458 AF0C61              +49 	mta	(HORIZONTAL_TAB)
00:008459 350001              +50 	lret	1
00:00845A 350000              +51 	lret	0
  :                            19: 	$include        hex
  :                            1 .	vector name scan_hex
  :                            2 
  :                            3 hexa	$tree
  :                            4 
00:00845B 6D0000              +5 scan24	lb	0,,xi
00:00845C 3E04F6              +6 	lcal	advance
00:00845D 3E0496              +7 new24	lcal	hex_symbol?
00:00845E B60468              +8 	j	scan24z
00:00845F 260014              +9 	sal	$word-4
00:008460 760004              +10 	drl	4
00:008461 600013              +11 next24	READ_BYTE
00:008462 C60467              +11 
00:008463 150008              +11 
00:008464 200013              +11 
00:008465 700010              +11 
00:008466 3E0521              +11 
00:008467 B6045D              +12 	j	new24
00:008468 600005              +13 scan24z	la	b
00:008469 3D0000              +14 	fret	0
  :                            15 
00:00846A 300006              +16 scan48	z	6
00:00846B 300007              +17 	z	7
00:00846C 3E04F6              +18 	lcal	advance
00:00846D 3E0496              +19 new48	lcal	hex_symbol?
00:00846E B6047B              +20 	j	scan48z
  :                            21 
00:00846F 200008              +22 	sa	8
00:008470 CF0006              +23 	dl	6
00:008471 360004              +24 	dsl	4
00:008472 980008              +25 	orB	8
00:008473 C70006              +26 	ds	6
  :                            27 
00:008474 600013              +28 next48	READ_BYTE
00:008475 C6047A              +28 
00:008476 150008              +28 
00:008477 200013              +28 
00:008478 700010              +28 
00:008479 3E0521              +28 
00:00847A B6046D              +29 	j	new48
  :                            30 
00:00847B CF0006              +31 scan48z	dl	6
00:00847C 3D0000              +32 	fret	0
  :                            33 
00:00847D 300007              +34 scan72	z	7
00:00847E 300008              +35 	z	8
00:00847F 300009              +36 	z	9
00:008480 3E04F6              +37 	lcal	advance
00:008481 3E0496              +38 new72	lcal	hex_symbol?
00:008482 B60493              +39 	j	scan72z
  :                            40 
00:008483 200006              +41 	sa	6
00:008484 CF0007              +42 	dl	7
00:008485 360004              +43 	dsl	4
00:008486 200007              +44 	sa	7
00:008487 600009              +45 	la	9
00:008488 4E0004              +46 	rbr	4
00:008489 560014              +47 	drr	20
00:00848A 980006              +48 	orB	6
00:00848B C70008              +49 	ds	8
  :                            50 
00:00848C 600013              +51 next72	READ_BYTE
00:00848D C60492              +51 
00:00848E 150008              +51 
00:00848F 200013              +51 
00:008490 700010              +51 
00:008491 3E0521              +51 
00:008492 B60481              +52 	j	new72
  :                            53 
00:008493 8F0006              +54 scan72z	qpush	6
00:008494 870004              +55 	qpop	a
00:008495 3D0000              +56 	fret	0
  :                            57 	
  :                            58 hex_symbol?
00:008496 C5FFC6              +59 	aa	-'0'-10,,xi
00:008497 7E049B              +60 	jc	letter?
00:008498 C5000A              +61 	aa	10,,xi
00:008499 7E04A2              +62 	jc	deliver
00:00849A B604A3              +63 	j	report_end		. end of symbols
  :                            64 
00:00849B C5003A              +65 letter?	aa	'0'+10,,xi
  :                            66 
00:00849C A5005F              +67 	and	05F,,xi		. sandpaper the case difference
  :                            68 
00:00849D C5FFB9              +69 	aa	-'A'-6,,xi
00:00849E 7E04A3              +70 	jc	report_end
00:00849F C50006              +71 	aa	6,,xi
00:0084A0 5E04A3              +72 	jnc	report_end		. end of symbols
  :                            73 
00:0084A1 C5000A              +74 	aa	10,,xi		. [ A..F ]
  :                            75 deliver
00:0084A2 350001              +76 	lret	1
  :                            77 report_end
00:0084A3 350000              +78 	lret	0
  :                            79 
  :                            80 	$root
  :                            81 
  :                            82 dec_hex	$tree
  :                            83 
00:0084A4 6D0000              +84 scan24	lb	0,,xi
00:0084A5 3E04F6              +85 	lcal	advance
  :                            86 
00:0084A6 C5FFD0              +87 	aa	-'0',,xi
00:0084A7 C60461              +88 	jza	hexa:next24
00:0084A8 600013              +89 	la	LAST_BYTE_READ
00:0084A9 B60181              +90 	j	bi_sense
  :                            91 
00:0084AA 300006              +92 scan48	z	6
00:0084AB 300007              +93 	z	7
00:0084AC 300008              +94 	z	8
00:0084AD 3E04F6              +95 	lcal	advance
  :                            96 
00:0084AE C5FFD0              +97 	aa	-'0',,xi
00:0084AF C60474              +98 	jza	hexa:next48
00:0084B0 600013              +99 	la	LAST_BYTE_READ
00:0084B1 B60190              +100 	j	bdi_sense
  :                            101 
00:0084B2 300007              +102 scan72	z	7
00:0084B3 300008              +103 	z	8
00:0084B4 300009              +104 	z	9
00:0084B5 3E04F6              +105 	lcal	advance
  :                            106 
00:0084B6 C5FFD0              +107 	aa	-'0',,xi
00:0084B7 C6048C              +108 	jza	hexa:next72
00:0084B8 600013              +109 	la	LAST_BYTE_READ
00:0084B9 30000A              +110 	z	10
00:0084BA 30000B              +111 	z	11
00:0084BB B601D3              +112 	j	bti_sense
  :                            113 
  :                            114 	$root
  :                            115 
  :                            20: 	$include	hex2f
  :                            1 hex2f	$tree
  :                            2 
  :                            3 .	%a specification	read up to 24 hex symbols -> 24 quartets
  :                            4 
                                x2f96	$head_far	scalars(caller96_x,	int, 	x	;
00:0084BC F80002              +6 				train96,	float,	(0.0)	)
00:0084BD 8F0C55              +6 
  :                            7 
00:0084BE 3E04F6              +8 	lcal	advance
  :                            9 
  :                            10 x2f96_new
00:0084BF 3E0496              +11 	lcal	hexa:hex_symbol?
00:0084C0 B604D0              +12 	j	x2f96z
  :                            13 
00:0084C1 200006              +14 	sa	6
00:0084C2 CFF000              +15 	dl	train96
00:0084C3 360004              +16 	dsl	4
00:0084C4 54F000              +17 	lx	train96,,i
  :                            18 
00:0084C5 3E04F0              +19 	$do	2,	lcal	shunt
00:0084C6 3E04F0              +19 
  :                            20 
00:0084C7 980006              +21 	orB	6
00:0084C8 C7F002              +22 	ds	train96+2
  :                            23 
  :                            24 x2f96_next
00:0084C9 600013              +25 	READ_BYTE
00:0084CA C604CF              +25 
00:0084CB 150008              +25 
00:0084CC 200013              +25 
00:0084CD 700010              +25 
00:0084CE 3E0521              +25 
00:0084CF B604BF              +26 	j	x2f96_new
  :                            27 
00:0084D0 870004              +28 x2f96z	qpop	a
00:0084D1 380002              +29 	pop	x
00:0084D2 3D0000              +30 	fret	0
  :                            31 
  :                            32 .	%A specification, read up to 48 hex symbols -> 48 quartets
  :                            33 
                                x2f192	$head_far	scalars(caller192_x,	int, x	;
00:0084D3 F80002              +35 				train192,	float192)
00:0084D4 8F0C55              +35 
00:0084D5 8FF000              +35 
00:0084D6 3E04F6              +36 	lcal	advance
  :                            37 
  :                            38 x2f192_new
00:0084D7 3E0496              +39 	lcal	hexa:hex_symbol?
00:0084D8 B604EC              +40 	j	x2f192z
  :                            41 
00:0084D9 200006              +42 	sa	6
00:0084DA CFF000              +43 	dl	train192
00:0084DB 360004              +44 	dsl	4
00:0084DC 54F000              +45 	lx	train192,,i
  :                            46 
00:0084DD 3E04F0              +47 	$do	6,	lcal	shunt
00:0084DE 3E04F0              +47 
00:0084DF 3E04F0              +47 
00:0084E0 3E04F0              +47 
00:0084E1 3E04F0              +47 
00:0084E2 3E04F0              +47 
  :                            48 
00:0084E3 980006              +49 	orB	6
00:0084E4 C7F006              +50 	ds	train192+6
  :                            51 
  :                            52 x2f192_next
00:0084E5 600013              +53 	READ_BYTE
00:0084E6 C604EB              +53 
00:0084E7 150008              +53 
00:0084E8 200013              +53 
00:0084E9 700010              +53 
00:0084EA 3E0521              +53 
00:0084EB B604D7              +54 	j	x2f192_new
  :                            55 
00:0084EC 870004              +56 x2f192z	qpop	a
00:0084ED 870008              +57 	qpop	8
00:0084EE 380002              +58 	pop	x
00:0084EF 3D0000              +59 	fret	0
  :                            60 
  :                            61 .	write 1 updated word
  :                            62 .	position 6 more quartets as the next word
  :                            63 
00:0084F0 20A000              +64 shunt	sa	0, x		. [ 1 ] [ 2 3 4 5 6 7 ] [ 8 9 A B C z ]
00:0084F1 60A002              +65 	la	2, x		.	[ D E F G H I ]
00:0084F2 4E0004              +66 	rbr	4		.			[ z 8 9 A B C ]
00:0084F3 560014              +67 	drr	20		.	[ 8 9 A B C D ] [ E F G H I z ]
00:0084F4 850001              +68 	ax	1,,xi
00:0084F5 350000              +69 	lret	0
  :                            70 
  :                            71 	$root
  :                            21: 	$include	advance
00:0084F6 600013              +1 advance	READ_BYTE
00:0084F7 C604FC              +1 
00:0084F8 150008              +1 
00:0084F9 200013              +1 
00:0084FA 700010              +1 
00:0084FB 3E0521              +1 
00:0084FC C5FFF7              +2 	aa	-HORIZONTAL_TAB,,xi
00:0084FD C604F6              +3 	jza	advance
00:0084FE C5FFE9              +4 	aa	HORIZONTAL_TAB-' ',,xi
00:0084FF C604F6              +5 	jza	advance
00:008500 C50013              +6 	aa	' '-CR,,xi
00:008501 C604F6              +7 	jza	advance
00:008502 C50003              +8 	aa	CR-LF,,xi
00:008503 C604F6              +9 	jza	advance
00:008504 600013              +10 	la	LAST_BYTE_READ
00:008505 350000              +11 	lret	0
  :                            12 
  :                            22 
  :                            23 COUNTED_STREAM $set 1
  :                            24 AQUIFORM_NET16 $set 1
  :                            25 
  :                            26 read_stream_start16*
00:008506 200010              +27 	READ_STREAM_START
00:008507 28000D              +27 
00:008508 300014              +27 
00:008509 050060              +27 
00:00850A 0D0080              +27 
00:00850B 650020              +27 
00:00850C 200013              +27 
00:00850D 3D0000              +28 	fret	0
  :                            29 write_stream_start16*
00:00850E 300010              +30 	WRITE_STREAM_START
00:00850F 10000C              +30 
00:008510 300016              +30 
00:008511 050010              +30 
00:008512 0D0080              +30 
00:008513 3D0000              +31 	fret	0
  :                            32 
  :                            33 COUNTED_STREAM $set 0
  :                            34 AQUIFORM_NET16 $set 0
  :                            35 
  :                            36 read_stream_start24*
00:008514 300010              +37 	READ_STREAM_START
00:008515 28000D              +37 
00:008516 300014              +37 
00:008517 050040              +37 
00:008518 0D00A0              +37 
00:008519 650020              +37 
00:00851A 200013              +37 
00:00851B 3D0000              +38 	fret	0
  :                            39 write_stream_start24*
00:00851C 300010              +40 	WRITE_STREAM_START
00:00851D 10000C              +40 
00:00851E 300016              +40 
00:00851F 0D0090              +40 
00:008520 3D0000              +41 	fret	0
  :                            42 
  :                            43 counted_stream
00:008521 1F0010              +44 	dec	BYTES		. arrived here with 1+
00:008522 700010              +45 	tz	BYTES		. transition 1..0 ?
00:008523 350000              +46 	lret	0		. no
00:008524 300013              +47 	z	LAST_BYTE_READ	. deliver the newly read byte
00:008525 350000              +48 	lret	0		. but not any more
  :                            49 
  :                            50 repoussez
00:008526 680015              +51 	lb	RDATA
00:008527 160008              +52 	dsr	$byte
00:008528 600014              +53 	la	RDATAC
00:008529 64C008              +54 	la	$byte, a, i
00:00852A C70014              +55 	ds	RDATAC
00:00852B 3D0000              +56 	fret	0
  :                            57 
  :                            58: 	$include	timetext
  :                            1 timetext $tree
  :                            2 
00:00852C C6052F              +3 ydsm	jza	ydsm_local
00:00852D FF0C62              +4 	call	(dayclock_ydsm_gmt)
00:00852E 350000              +5 	lret	0
  :                            6 
  :                            7 ydsm_local
00:00852F FF0C63              +8 	call	(dayclock_ydsm)
00:008530 350000              +9 	lret	0
  :                            10 
  :                            11 
00:008531 65003B              +12 mmdd	la	31+28,,xi	. days in jan + feb = 59
00:008532 D00007              +13 	ana	7		. or 60 if register 7 is -1 
00:008533 680009              +14 	lb	9		. day of year zero-relative
00:008534 D80004              +15 	anb	a
00:008535 7E053C              +16 	jc	march_december
00:008536 680009              +17 	lb	9
00:008537 CDFFE1              +18 	ab	-31,,xi
00:008538 B70002              +19 	sc	x		. month 0 or 1
00:008539 7E0545              +20 	jc	mmddx
00:00853A 580009              +21 	ly	9		. it was january
00:00853B B60546              +22 	j	mmddy
  :                            23 
  :                            24 				. the last 10 months in the year
  :                            25 march_december			. are two equal sets of
  :                            26 				. [ 31 30 31 30 31 ]
00:00853C 650000              +27 	la	0,,xi
00:00853D F50099              +28 	d	31+30+31+30+31,,xi
00:00853E 50CC64              +29 	lx	(2, 7d),a	. start point march or august
00:00853F 650000              +30 	la	0,,xi
00:008540 F5003D              +31 	d	31+30,,xi
00:008541 80CC66              +32 	ax	(0, 2, 4t),a
00:008542 650000              +33 	la	0,,xi
00:008543 F5001F              +34 	d	31,,xi
00:008544 800004              +35 	ax	a
00:008545 580005              +36 mmddx	ly	b
00:008546 350000              +37 mmddy	lret	0
  :                            38 
                                format_time $head_near	 params(timestring,	int)	;
00:008547 F80002              +40 			scalars(caller_x,	int, x	)
  :                            41 	
00:008548 50F003              +42 	lx	timestring
00:008549 68000A              +43 	lb	10
00:00854A 650000              +44 	la	0,,xi
00:00854B F50E10              +45 	d	3600,,xi
00:00854C 60C57D              +46 	la	format1_numerals, a
00:00854D 20A000              +47 	sa	0, x
00:00854E 650000              +48 	la	0,,xi
00:00854F F5003C              +49 	d	60,,xi
00:008550 60C57D              +50 	la	format1_numerals, a
00:008551 68D57D              +51 	lb	format1_numerals, b
00:008552 C7A001              +52 	ds	1, x
00:008553 60000B              +53 	la	11
00:008554 60C808              +54 	la	table, a
00:008555 20A003              +55 	sa	3, x
  :                            56 
00:008556 380002              +57 	pop	x
00:008557 350000              +58 	lret	0
  :                            59 
  :                            60 format__yyyy
00:008558 600008              +61 	la	8
00:008559 160018              +62 	dsr	24
00:00855A F503E8              +63 	d	1000,,xi
00:00855B 68D808              +64 	lb	table, b
00:00855C 900C69              +65 	or	('  0's)
00:00855D 350000              +66 	lret	0
  :                            67 
  :                            68 format1_names
                                	   ".01.02.03.04.05.06.07.08.09":;
                                	".10.11.12.13.14.15.16.17.18.19":;
00:00855E 2E30312E30322E30332E30342E30352E30362E30372E3038
                              +71 	".20.21.22.23.24.25.26.27.28.29.30.31"
00:008566 2E30392E31302E31312E31322E31332E31342E31352E3136
                              +71 
00:00856E 2E31372E31382E31392E32302E32312E32322E32332E3234
                              +71 
00:008576 2E32352E32362E32372E32382E32392E33302E3331
                              +71 
  :                            72 
  :                            73 format1_numerals
                                	"00:01:02:03:04:05:06:07:08:09:":;
                                	"10:11:12:13:14:15:16:17:18:19:":;
                                	"20:21:22:23:24:25:26:27:28:29:":;
                                	"30:31:32:33:34:35:36:37:38:39:":;
                                	"40:41:42:43:44:45:46:47:48:49:":;
00:00857D 30303A30313A30323A30333A30343A30353A30363A30373A
                              +79 	"50:51:52:53:54:55:56:57:58:59:"
00:008585 30383A30393A31303A31313A31323A31333A31343A31353A
                              +79 
00:00858D 31363A31373A31383A31393A32303A32313A32323A32333A
                              +79 
00:008595 32343A32353A32363A32373A32383A32393A33303A33313A
                              +79 
00:00859D 33323A33333A33343A33353A33363A33373A33383A33393A
                              +79 
00:0085A5 34303A34313A34323A34333A34343A34353A34363A34373A
                              +79 
00:0085AD 34383A34393A35303A35313A35323A35333A35343A35353A
                              +79 
00:0085B5 35363A35373A35383A35393A
                              +79 
  :                            80 
  :                            81 format2_names_e
                                	   "01 02 03 04 05 06 07 08 09 ":;
                                	"10 11 12 13 14 15 16 17 18 19 ":;
00:0085B9 303120303220303320303420303520303620303720303820
                              +84 	"20 21 22 23 24 25 26 27 28 29 30 31 "
00:0085C1 303920313020313120313220313320313420313520313620
                              +84 
00:0085C9 313720313820313920323020323120323220323320323420
                              +84 
00:0085D1 323520323620323720323820323920333020333120
                              +84 
  :                            85 
  :                            86 format3_names
                                	   "01.02.03.04.05.06.07.08.09.":;
                                	"10.11.12.13.14.15.16.17.18.19.":;
00:0085D8 30312E30322E30332E30342E30352E30362E30372E30382E
                              +89 	"20.21.22.23.24.25.26.27.28.29.30.31."
00:0085E0 30392E31302E31312E31322E31332E31342E31352E31362E
                              +89 
00:0085E8 31372E31382E31392E32302E32312E32322E32332E32342E
                              +89 
00:0085F0 32352E32362E32372E32382E32392E33302E33312E
                              +89 
  :                            90 
00:0085F7 4A616E4665624D61724170724D61794A756E4A756C417567
                              +91 format2_months_e	"JanFebMarAprMayJunJulAugSepOctNovDec"
00:0085FF 5365704F63744E6F76446563
                              +91 
  :                            92 
  :                            93 	$root
  :                            94 
  :                            95 timetext_f1*	$tree
                                	 $head_far	 params(gmt,		int		;
                                				textp,		int	)	;
                                								;
00:008603 8F0002              +99 			scalars(caller_xyab,	float,	x	)
  :                            100 
00:008604 60F007              +101 	la	gmt
00:008605 3E052C              +102 	lcal	timetext:ydsm
00:008606 3E0531              +103 	lcal	timetext:mmdd
00:008607 600008              +104 	la	8				. year
00:008608 160018              +105 	dsr	24
00:008609 F5000A              +106 	d	10,,xi
00:00860A 60C808              +107 	la	table, a
00:00860B 9D0030              +108 	orB	'0',,xi
00:00860C 2E0010              +109 	sbl	16
00:00860D 480C6A              +110 	lk	(00FFFF)
00:00860E BFA55E              +111 	mlb	timetext:format1_names, x
00:00860F 50F008              +112 	lx	textp
00:008610 C7A000              +113 	ds	0, x
00:008611 60B57E              +114 	la	timetext:format1_numerals+1, y	. force relative 1 for day
00:008612 20A002              +115 	sa	2, x
00:008613 FCA003              +116 	lc	timetext:format_time	3, x, i
00:008614 FCF001              +116 
00:008615 3E0547              +116 
00:008616 38000F              +116 
  :                            117 
00:008617 870002              +118 	qpop	x
00:008618 3D0000              +119 	fret	0
  :                            120 	$root
  :                            121 
  :                            122 timetext_f2*	$tree
                                	$head_far	 params(gmt,		int		;
                                				textp,		int	)	;
                                								;
00:008619 8F0002              +126 			scalars(caller_xyab,	float,	x	)
  :                            127 
00:00861A 60F007              +128 	la	gmt
00:00861B 3E052C              +129 	lcal	timetext:ydsm
00:00861C 3E0531              +130 	lcal	timetext:mmdd
00:00861D 60B5B9              +131 	la	timetext:format2_names_e, y
00:00861E 68A5F7              +132 	lb	timetext:format2_months_e, x
00:00861F 50F008              +133 	lx	textp
00:008620 C7A000              +134 	ds	0, x
00:008621 3E0558              +135 	lcal	timetext:format__yyyy
00:008622 760008              +136 	drl	8
00:008623 C7A002              +137 	ds	2, x
00:008624 FCA004              +138 	lc	timetext:format_time	4, x, i
00:008625 FCF001              +138 
00:008626 3E0547              +138 
00:008627 38000F              +138 
  :                            139 	
00:008628 870002              +140 	qpop	x
00:008629 3D0000              +141 	fret	0
  :                            142 	$root
  :                            143 
  :                            144 timetext_f3*	$tree
                                	$head_far	 params(gmt,		int		;
                                				textp,		int	)	;
                                								;
00:00862A 8F0002              +148 			scalars(caller_xyab,	float,	x	)
  :                            149 
00:00862B 60F007              +150 	la	gmt
00:00862C 3E052C              +151 	lcal	timetext:ydsm
00:00862D 3E0531              +152 	lcal	timetext:mmdd
00:00862E 60B5D8              +153 	la	timetext:format3_names, y
00:00862F 68A5D8              +154 	lb	timetext:format3_names, x
00:008630 50F008              +155 	lx	textp
00:008631 C7A000              +156 	ds	0, x
00:008632 3E0558              +157 	lcal	timetext:format__yyyy
00:008633 760010              +158 	drl	16
00:008634 C7A002              +159 	ds	2, x
00:008635 FCA004              +160 	lc	timetext:format_time	4, x, i
00:008636 FCF001              +160 
00:008637 3E0547              +160 
00:008638 38000F              +160 
  :                            161 
00:008639 870002              +162 	qpop	x
00:00863A 3D0000              +163 	fret	0
  :                            164 	$root
  :                            59 
  :                            60 qstring_scana_sentinel*
  :                            61 	.		string extraction with leading whitespace suppression
  :                            62 	.		register r is optional SENTINEL zero if not needed
  :                            63 
00:00863B 3E0723              +64         lcal            scan_istring    . used to be in scanfi
00:00863C 3D0000              +65         fret            0
  :                            66 
  :                            273: 	$include		aquarel	. common parts for socket and for application buffers
  :                            1 
  :                            2 .	components of ASCII 8-bit stream library
  :                            3 .	equally used accessing socket buffers and application space
  :                            4 .	stream settings in psr RDATAC and BYTES
  :                            5 .	are set with a call to rstream_start_net or rstream_starta
  :                            6 .	medium depending
  :                            7 
  :                            8 	$path		../stream
  :                            9: 	$include	scanfi
  :                            1 
  :                            2 $(0)
  :                            3 
  :                            4 	. vector name scanfi
  :                            5 
  :                            6 SENTINEL $equ	r
  :                            7 
  :                            8 scan_fi $tree
  :                            9 
                                	$head_far	 params(limit,		int		;
                                				argop,		int	)	;
                                								;
                                			scalars(caller_xyab,	float,	x	;
                                				delivery_words,	int		;
                                				column,		int		;
00:00863D 8F0002              +16 				specificationp,	int		)
00:00863E FD0000              +16 
00:00863F FD0000              +16 
00:008640 FD0000              +16 
  :                            17 
00:008641 50F00B              +18 	lx	argop			. pointer to first pointer
00:008642 10F005              +19 	sx	caller_xyab+2		. initialise result
00:008643 50A000              +20 	lx	0, x			. pointer to format string
00:008644 10F000              +21 	sx	specificationp
00:008645 650020              +22 	la	' ',,xi
00:008646 200013              +23 	sa	LAST_BYTE_READ
  :                            24 
  :                            25 read_format
00:008647 3E04F6              +26 	lcal	advance
00:008648 C60704              +27 	jza	read_format_end
  :                            28 
00:008649 680015              +29 	lb	RDATA
00:00864A 160008              +30 	dsr	$byte
00:00864B 600014              +31 	la	RDATAC
00:00864C C50008              +32 	aa	$byte,,xi
00:00864D C70014              +33 	ds	RDATAC
  :                            34 
00:00864E 50F000              +35 	lx	specificationp
00:00864F 4D00FF              +36 	lk	+(1*/$byte)-1,,xi
  :                            37 
00:008650 17F00B              +38 	inc	argop
00:008651 58F00B              +39 	ly	argop
00:008652 40F00A              +40 	lr	limit
00:008653 FE0703              +41 	jyge	read_format_end_backstep
  :                            42 
  :                            43 read_format_byte
00:008654 58F001              +44 	ly	column
00:008655 17F001              +45 	inc	column
00:008656 FF0C6B              +46 	call	(read_octet_column)
00:008657 C60703              +47 	jza	read_format_end_backstep . format string end
  :                            48 
00:008658 AF0C6C              +49 	mta	('%')
00:008659 B60654              +50 	j	read_format_byte	. stuff to consume nonspace goes near here
  :                            51 					. scanning sizes goes here
00:00865A 58F001              +52 	ly	column
00:00865B 17F001              +53 	inc	column
00:00865C FF0C6B              +54 	call	(read_octet_column)
00:00865D C60703              +55 	jza	read_format_end_backstep . format string end
  :                            56 
00:00865E 30F002              +57 	z	delivery_words		. set default to type default
00:00865F 3E07DC              +58 	lcal	edit_fo:size?		. is there a size tag before the type tag?
00:008660 B60666              +59 	j	target?			. no
  :                            60 
00:008661 20F002              +61 	sa	delivery_words		. yes, remember it
00:008662 58F001              +62 	ly	column
00:008663 17F001              +63 	inc	column
00:008664 FF0C6B              +64 	call	(read_octet_column)	. read again for the type tag
00:008665 C60703              +65 	jza	read_format_end_backstep
  :                            66 
00:008666 AF0C6D              +67 target?	mta	('f')			. float ?
00:008667 B60688              +68 	j	symbol?
  :                            69 
00:008668 3E0716              +70 	lcal	is_it_a_number?
00:008669 B60703              +71 	j	read_format_end_backstep
  :                            72 
00:00866A 60F002              +73 	la	delivery_words
00:00866B C6066E              +74 	jza	fp96
00:00866C AF0C6E              +75 	mta	('q')			. quad is accepted. It is the size of a float
00:00866D B60673              +76 	j	fp192?	
  :                            77 
00:00866E FF0C6F              +78 fp96	call	(floating_scan)		. 4-word float
00:00866F 58F00B              +79 	ly	argop
00:008670 58B000              +80 	ly	0, y
00:008671 47B000              +81 	qs	0, y
00:008672 B60647              +82 	j	read_format
  :                            83 
00:008673 AF0C70              +84 fp192?	mta	('L')
00:008674 B6067C              +85 	j	fp_compress?		. don't know don't write target memory
  :                            86 
00:008675 FF0C71              +87 	call	(floating_scan192)	. 8-word float
00:008676 58F00B              +88 	ly	argop
00:008677 58B000              +89 	ly	0, y
00:008678 47B000              +90 	qs	0, y
00:008679 4F0008              +91 	ql	$residue
00:00867A 47B004              +92 	qs	4, y
00:00867B B60647              +93 	j	read_format
  :                            94 
  :                            95 fp_compress?
00:00867C AF0C72              +96 	mta	('l')
00:00867D B60654              +97 	j	read_format_byte	. that only leaves j and we don't input 3-word floats
00:00867E FF0C6F              +98 	call	(floating_scan)		. with l you may input...
00:00867F 58F00B              +99 	ly	argop
00:008680 58B000              +100 	ly	0, y
00:008681 8F0004              +101 	qpush	a			. ...and compress a float unbeautifully not-rounded
00:008682 FF0C73              +102 	fpp	0, y			. into a long which is 48 bits
00:008683 38B000              +102 
00:008684 38B001              +102 
00:008685 38F000              +102 
00:008686 38F000              +102 
  :                            103 					. and won't be unrounded if it's ever re-expanded...
00:008687 B60647              +104 	j	read_format		. ...and won't ever be computed unless it is re-expanded
  :                            105 
00:008688 AF0C74              +106 symbol?	mta	('c')			. right justified character scalar?
00:008689 B6068F              +107 	j	decimal?
  :                            108 
00:00868A FF0C75              +109 	call	(symbol_scan)
00:00868B 58F00B              +110 	ly	argop			. position argument array
00:00868C 58B000              +111 	ly	0, y			. pointer from argument array
00:00868D 20B000              +112 	sa	0, y
00:00868E B60647              +113 	j	read_format
  :                            114 
  :                            115 decimal?
00:00868F AF0C76              +116 	mta	('d')
00:008690 B606AA              +117 	j	hex?
  :                            118 
00:008691 3E0716              +119         lcal    is_it_a_number?
00:008692 B60703              +120         j       read_format_end_backstep
  :                            121 
00:008693 60F002              +122 	la	delivery_words
00:008694 D6069A              +123 	jnza	decimal_48?
  :                            124 
00:008695 FF0C77              +125 	call	(iscana)		. 24 bits base 10
00:008696 58F00B              +126 	ly	argop
00:008697 58B000              +127 	ly	0, y
00:008698 28B000              +128 	sb	0, y
00:008699 B60647              +129 	j	read_format
  :                            130 	
  :                            131 decimal_48?
00:00869A AF0C72              +132 	mta	('l')
00:00869B B606A1              +133 	j	decimal_72?
  :                            134 
00:00869C FF0C78              +135 	call	(iscan48a)		. 48 bits base 10
00:00869D 58F00B              +136 	ly	argop
00:00869E 58B000              +137 	ly	0, y
00:00869F C7B000              +138 	ds	0, y
00:0086A0 B60647              +139 	j	read_format
  :                            140 
  :                            141 decimal_72?
00:0086A1 AF0C79              +142 	mta	('j')
00:0086A2 B60654              +143 	j	read_format_byte	. don't know don't write target memory
  :                            144 
00:0086A3 FF0C7A              +145 	call	(iscan72a)		. 72 bits base 10
00:0086A4 58F00B              +146 	ly	argop
00:0086A5 58B000              +147 	ly	0, y
00:0086A6 28B000              +148 	sb	0, y
00:0086A7 CF0006              +149 	dl	6
00:0086A8 C7B001              +150 	ds	1, y
00:0086A9 B60647              +151 	j	read_format
  :                            152 
00:0086AA AF0C7B              +153 hex?	mta	('x')
00:0086AB B606D5              +154 	j	integer?
  :                            155 
00:0086AC 3E070C              +156         lcal    is_it_hex?
00:0086AD B60703              +157         j       read_format_end_backstep
  :                            158 
00:0086AE 60F002              +159 	la	delivery_words
00:0086AF D606B5              +160 	jnza	hex_48?
  :                            161 
00:0086B0 FF0C7C              +162 	call	(scanhex)		. 24 bits base 16
00:0086B1 58F00B              +163 	ly	argop
00:0086B2 58B000              +164 	ly	0, y
00:0086B3 28B000              +165 	sb	0, y
00:0086B4 B60647              +166 	j	read_format
  :                            167 
00:0086B5 AF0C72              +168 hex_48?	mta	('l')
00:0086B6 B606BC              +169 	j	hex_72?
  :                            170 
00:0086B7 FF0C7D              +171 	call	(scanhex48)		. 48 bits base 16 
00:0086B8 58F00B              +172 	ly	argop
00:0086B9 58B000              +173 	ly	0, y
00:0086BA C7B000              +174 	ds	0, y
00:0086BB B60647              +175 	j	read_format
  :                            176 
00:0086BC AF0C79              +177 hex_72?	mta	('j')
00:0086BD B606C5              +178 	j	hex_96?
  :                            179 
00:0086BE FF0C7E              +180 	call	(scanhex72)		. 72 bits base 16
00:0086BF 58F00B              +181 	ly	argop
00:0086C0 58B000              +182 	ly	0, y
00:0086C1 28B000              +183 	sb	0, y
00:0086C2 CF0006              +184 	dl	6
00:0086C3 C7B001              +185 	ds	1, y
00:0086C4 B60647              +186 	j	read_format
  :                            187 
00:0086C5 AF0C6E              +188 hex_96?	mta	('q')
00:0086C6 B606CC              +189 	j	hex_192?
  :                            190 
00:0086C7 FF0C7F              +191 	call	(qscanquartets)		. 96 bits base 16
00:0086C8 58F00B              +192 	ly	argop
00:0086C9 58B000              +193 	ly	0, y
00:0086CA 47B000              +194 	qs	0, y
00:0086CB B60647              +195 	j	read_format
  :                            196 
  :                            197 hex_192?
00:0086CC AF0C70              +198 	mta	('L')
00:0086CD B60654              +199 	j	read_format_byte	. don't know don't write target memory
  :                            200 
00:0086CE FF0C80              +201 	call	(oscanquartets)		. 192 bits base 16
00:0086CF 58F00B              +202 	ly	argop
00:0086D0 58B000              +203 	ly	0, y
00:0086D1 47B000              +204 	qs	0, y
00:0086D2 4F0008              +205 	ql	$residue
00:0086D3 47B004              +206 	qs	4, y
00:0086D4 B60647              +207 	j	read_format
  :                            208 
  :                            209 
  :                            210 integer?
00:0086D5 AF0C81              +211 	mta	('i')
00:0086D6 B606F0              +212 	j	string?
  :                            213 
00:0086D7 3E0716              +214         lcal    is_it_a_number?
00:0086D8 B60703              +215         j       read_format_end_backstep
  :                            216 
00:0086D9 60F002              +217 	la	delivery_words
00:0086DA D606E0              +218 	jnza	i48?
  :                            219 
00:0086DB FF0C82              +220 	call	(ixscan)		. 24 bits base 10 or 16
00:0086DC 58F00B              +221 	ly	argop
00:0086DD 58B000              +222 	ly	0, y
00:0086DE 28B000              +223 	sb	0, y
00:0086DF B60647              +224 	j	read_format
  :                            225 
00:0086E0 AF0C72              +226 i48?	mta	('l')
00:0086E1 B606E7              +227 	j	i72?
  :                            228 
00:0086E2 FF0C83              +229 	call	(ixscan48)		. 48 bits base 10 or 16
00:0086E3 58F00B              +230 	ly	argop
00:0086E4 58B000              +231 	ly	0, y
00:0086E5 C7B000              +232 	ds	0, y
00:0086E6 B60647              +233 	j	read_format
  :                            234 
00:0086E7 AF0C79              +235 i72?	mta	('j')
00:0086E8 B60654              +236 	j	read_format_byte	. don't know don't write target memory
  :                            237 
00:0086E9 FF0C84              +238 	call	(ixscan72)		. 72 bits base 10 or 16
00:0086EA 58F00B              +239 	ly	argop
00:0086EB 58B000              +240 	ly	0, y
00:0086EC 28B000              +241 	sb	0, y
00:0086ED CF0006              +242 	dl	6
00:0086EE C7B001              +243 	ds	1, y
00:0086EF B60647              +244 	j	read_format
  :                            245 
00:0086F0 AF0C85              +246 string?	mta	('s')
00:0086F1 B606F8              +247 	j	string_sentinel?
  :                            248 
00:0086F2 58F00B              +249 	ly	argop			. string by default rules
00:0086F3 58B000              +250 	ly	0, y
00:0086F4 300000              +251 	z	SENTINEL
00:0086F5 650000              +252 	la	0,,xi			. zero sentinel
00:0086F6 3E0723              +253 	lcal	scan_istring
00:0086F7 B60647              +254 	j	read_format	
  :                            255 
  :                            256 string_sentinel?
00:0086F8 AF0C86              +257 	mta	(':')
00:0086F9 B60654              +258 	j	read_format_byte	. none of the above, keep walking
  :                            259 					. string until named symbol
00:0086FA 58F001              +260 	ly	column			. read delimiter
00:0086FB 17F001              +261 	inc	column
00:0086FC FF0C6B              +262 	call	(read_octet_column)
00:0086FD C60703              +263 	jza	read_format_end_backstep
00:0086FE 200000              +264 	sa	SENTINEL		. set delimiter
00:0086FF 58F00B              +265 	ly	argop			. transfer string until delimiter
00:008700 58B000              +266 	ly	0, y
00:008701 3E073B              +267 	lcal	scan_istring:until
  :                            268 
00:008702 B60647              +269 	j	read_format		. independent callers to istring
  :                            270 					. cancel SENTINEL as required
  :                            271 read_format_end_backstep
00:008703 1FF00B              +272 	dec	argop			. a field has been counted
  :                            273 					. but not delivered
  :                            274 read_format_end
00:008704 60F00B              +275 	la	argop			. arguments used up to here
00:008705 D0F005              +276 	ana	caller_xyab+2		. starting from here
00:008706 20F005              +277 	sa	caller_xyab+2		. result in caller register a
  :                            278 
00:008707 380002              +279 	pop	x			. relinquish specification pointer
00:008708 380002              +280 	pop	x			. relinquish column offset
00:008709 380002              +281 	pop	x			. relinquish words tag
00:00870A 870002              +282 	qpop	x			. reload 4 caller registers
00:00870B 3D0000              +283 	fret	0			. including result = items read
  :                            284 
  :                            285 
  :                            286 .	is the sampled byte of sscanf input the start of a number?
  :                            287 .	stop the scan if not
  :                            288 
  :                            289 .	data code is not known until assembly
  :                            290 .	RTA1 coding standard
  :                            291 
  :                            292 .	but assume sets [ '0'..'9' ] [ 'a'..'f' ] [ 'A'..'F' ]
  :                            293 .	are each individually serial and contiguous
  :                            294 
  :                            295 is_it_hex?				. call here here for %x %X
00:00870C 600013              +296 	la	LAST_BYTE_READ
00:00870D C5FF99              +297 	aa	-'a'-6,,xi
00:00870E 7E0711              +298 	jc	it_is_not_lowercase_hex
00:00870F C50006              +299 	aa	6,,xi
00:008710 7E0722              +300 	jc	it_is_a_number
  :                            301 
  :                            302 it_is_not_lowercase_hex
00:008711 600013              +303 	la	LAST_BYTE_READ
00:008712 C5FFB9              +304 	aa	-'A'-6,,xi
00:008713 7E0716              +305 	jc	it_is_not_uppercase_hex
00:008714 C50006              +306 	aa	6,,xi
00:008715 7E0722              +307 	jc	it_is_a_number
  :                            308 
  :                            309 it_is_not_uppercase_hex			. fall thru from hex not [ a..f A..F ]
  :                            310 is_it_a_number?				. call here for decimal and %i
00:008716 600013              +311 	la	LAST_BYTE_READ
00:008717 C5FFD5              +312 	aa	-'+',,xi
00:008718 C60722              +313 	jza	it_is_a_number
00:008719 C5FFFE              +314 	aa	'+'-'-',,xi
00:00871A C60722              +315 	jza	it_is_a_number
00:00871B C5FFCF              +316 	aa	'-'-'^',,xi
00:00871C C60722              +317 	jza	it_is_a_number
00:00871D C50024              +318 	aa	'^'-'0'-10,,xi
00:00871E 7E0721              +319 	jc	it_is_not_a_number
00:00871F C5000A              +320 	aa	10,,xi
00:008720 7E0722              +321 	jc	it_is_a_number
  :                            322 
  :                            323 it_is_not_a_number
00:008721 350000              +324 	lret	0
  :                            325 
  :                            326 it_is_a_number
00:008722 350001              +327 	lret	1
  :                            328 
  :                            329 	$root
  :                            330 
  :                            10: 	$include	scanstri
  :                            1 scan_istring	$tree
  :                            2 
  :                            3 .	SENTINEL character is register r loaded by caller
  :                            4 .	and should be ZERO if SPACE HT CR LF ZERO are enough sentinels
  :                            5 .	this is lcal target of %s in sscanf
  :                            6 .	and encapsulated in far call target vector string_scana_sentinel
  :                            7 
00:008723 4D00FF              +8 token	lk, xi  +(1*/$byte)-1
00:008724 300016              +9         z       WDATAC
00:008725 0D0010              +10         off     b$stream16w
00:008726 18000C              +11         sy      p
  :                            12 
00:008727 600013              +13 	la	LAST_BYTE_READ
00:008728 C6073A              +14 	jza	tokenz
  :                            15 
  :                            16 token_search
00:008729 3E0747              +17         lcal    tcolumn
00:00872A B60729              +18         j       token_search	. SP HT search forward
00:00872B B60733              +19         j       token_total	. CR LF SENTINEL NUL conclude
00:00872C B60730              +20         j       token_store	. data
  :                            21 
  :                            22 token_read
00:00872D 3E0747              +23         lcal    tcolumn
00:00872E B60733              +24         j       token_total	. SP HT stop
00:00872F B60733              +25         j       token_total	. CR LF SENTINEL 0 stop
  :                            26 				. data keep going
  :                            27 token_store
00:008730 260010              +28         sal     $word-$byte
00:008731 1D0008              +29         wsr     $byte
00:008732 B6072D              +30         j       token_read
  :                            31 
  :                            32 token_total
00:008733 68000C              +33 	lb	p
00:008734 700016              +34 	tz	WDATAC		. if some bits remain to go
00:008735 6CD001              +35 	lb	1, b, i		. containing words = p - y + 1
00:008736 D80003              +36 	anb	y
00:008737 400005              +37 	lr	b		. containing words returned in r
  :                            38 
00:008738 650000              +39 	la	0,,xi		. there must be a zero byte 
00:008739 1D0018              +40         wsr     $word		. or three on the output string
00:00873A 350000              +41 tokenz  lret    0		. local return
  :                            42 
00:00873B 4D00FF              +43 until	lk	+(1*/$byte)-1,,xi
00:00873C 300016              +44 	z	WDATAC
00:00873D 0D0010              +45 	off	b$stream16w
00:00873E 18000C              +46 	sy	p
00:00873F 600013              +47 	la	LAST_BYTE_READ
00:008740 C6073A              +48 	jza	tokenz
  :                            49 
  :                            50 until_when
00:008741 3E0747              +51 	lcal	tcolumn
00:008742 B60744              +52 	j	until_store	. keep including columns
00:008743 B60733              +53 	j	token_total	. until sentinal or radical end of line
  :                            54 until_store
00:008744 260010              +55 	sal	$word-$byte
00:008745 1D0008              +56 	wsr	$byte
00:008746 B60741              +57 	j	until_when
  :                            58 
00:008747 600013              +59 tcolumn READ_BYTE
00:008748 C6074D              +59 
00:008749 150008              +59 
00:00874A 200013              +59 
00:00874B 700010              +59 
00:00874C 3E0521              +59 
00:00874D AF0C36              +60 	mtane	(0)
00:00874E B60750              +60 
00:00874F 350001              +61 	lret	1
00:008750 AF0C5E              +62         mtane   (' ')
00:008751 B60753              +62 
00:008752 350000              +63         lret    0
00:008753 AF0C5F              +64         mtane   (CR)
00:008754 B60756              +64 
00:008755 350001              +65         lret    1
00:008756 AF0C60              +66         mtane   (LF)
00:008757 B60759              +66 
00:008758 350001              +67         lret    1
00:008759 AF0000              +68 	mtane	SENTINEL
00:00875A B6075C              +68 
00:00875B 350001              +69 	lret	1
00:00875C AF0C61              +70         mta     (HORIZONTAL_TAB)
00:00875D 350002              +71         lret    2		. data
00:00875E 350000              +72         lret    0		. HT
  :                            73 
  :                            74 	$root
  :                            11: 	$include	editfo
  :                            1 $(0)
  :                            2 edit_fo* $tree
  :                            3 
                                	$head_far		 params(limit,		int		;
                                					argop,		int	)	;
                                									;
                                				scalars(input_words,	int		;
                                					column,		int		;
00:00875F FD0000              +9 					specificationp,	int		)
00:008760 FD0000              +9 
00:008761 FD0000              +9 
  :                            10 
00:008762 50F007              +11 	lx	argop
00:008763 50A000              +12 	lx	0, x
00:008764 10F000              +13 	sx	specificationp	. format
  :                            14 
  :                            15 read_format
00:008765 50F000              +16 	lx	specificationp
00:008766 4D00FF              +17 	lk	+(1*/$byte)-1,,xi
  :                            18 
  :                            19 read_format_byte
  :                            20 	
00:008767 58F001              +21 	ly	column
00:008768 17F001              +22 	inc	column
00:008769 FF0C6B              +23 	call	(read_octet_column)
00:00876A C607D6              +24 	jza	eoform
  :                            25 
00:00876B AF0C6C              +26 	mta	('%')
00:00876C B607CF              +27 	j	write_advance
  :                            28 				. a specifier
00:00876D 58F001              +29 	ly	column
00:00876E 17F001              +30 	inc	column
00:00876F FF0C6B              +31 	call	(read_octet_column)
00:008770 C607D6              +32 	jza	eoform
  :                            33 
00:008771 30F002              +34 	z	input_words	. size of object is default by type
00:008772 3E07DC              +35 	lcal	size?		. not default?
00:008773 B60779              +36 	j	arg?		. default size for type
  :                            37 
00:008774 20F002              +38 	sa	input_words	. save the input object size flag
00:008775 58F001              +39 	ly	column		. read again to get the type
00:008776 17F001              +40 	inc	column
00:008777 FF0C6B              +41 	call	(read_octet_column)
00:008778 C607D6              +42 	jza	eoform
  :                            43 
00:008779 17F007              +44 arg?	inc	argop		. next pointer in argument list
00:00877A 58F007              +45 	ly	argop
00:00877B 40F006              +46 	lr	limit
00:00877C FE07CF              +47 	jyge	write_advance	. if there is no corresponding argument
  :                            48 				. print the specification
  :                            49 				. they might then notice what they're doing
  :                            50 
  :                            51 				. test for type
00:00877D AF0C6D              +52 	mta	('f')
00:00877E B60794              +53 	j	dinteger?
  :                            54 
00:00877F 60F002              +55 	la	input_words
00:008780 C6078F              +56 	jza	float96
  :                            57 	
  :                            58 float192?
00:008781 AF0C70              +59 	mta	('L')
00:008782 B6078A              +60 	j	float96?
  :                            61 
00:008783 4FB004              +62 	ql	4, y
00:008784 470008              +63 	qs	$residue
00:008785 4FB000              +64 	ql	0, y
00:008786 8D0007              +65 	ay	7,,xi		. + 1 = 8 parameter words counted
00:008787 18F007              +66 	sy	argop
00:008788 FF0C87              +67 	call	(fedit192a)
00:008789 B60765              +68 	j	read_format
  :                            69 
  :                            70 float96?
00:00878A AF0C6E              +71 	mtane	('q')		. permitted because that is really its size
00:00878B B6078D              +71 
00:00878C B6078F              +72 	j	float96
00:00878D AF0C72              +73 	mta	('l')		. permitted because most platforms do
00:00878E B607CF              +74 	j	write_advance	. dont guess, display the format tags
  :                            75 				. %lf means promoted to 96 bits in the stack
00:00878F 4FB000              +76 float96	ql	0, y		. this occupies 4 internal stack words
00:008790 8D0003              +77 	ay	3,,xi		. and 1 word has been counted
00:008791 18F007              +78 	sy	argop
00:008792 FF0C88              +79 	call	(fedita)
00:008793 B60765              +80 	j	read_format
  :                            81 	
  :                            82 dinteger?
00:008794 AF0C76              +83 	mta	('d')
00:008795 B607AB              +84 	j	xinteger?
  :                            85 
00:008796 60F002              +86 	la	input_words
00:008797 D6079B              +87 	jnza	di48?
  :                            88 
00:008798 60B000              +89 	la	0, y
00:008799 FF0C89              +90 	call	(iedita)
00:00879A B60765              +91 	j	read_format
  :                            92 
00:00879B AF0C72              +93 di48?	mta	('l')
00:00879C B607A1              +94 	j	di72?
  :                            95 
00:00879D CFB000              +96 	dl	0, y			. read 2 data words
00:00879E 17F007              +97 	inc	argop			. arguments pointer + 1 + 1
00:00879F FF0C8A              +98 	call	(iedit48a)
00:0087A0 B60765              +99 	j	read_format
  :                            100 
00:0087A1 AF0C79              +101 di72?	mta	('j')
00:0087A2 B607CF              +102 	j	write_advance		. don't attempt to guess
  :                            103 
00:0087A3 CFB001              +104 	dl	1, y			. read 3 data words
00:0087A4 C70006              +105 	ds	6
00:0087A5 60B000              +106 	la	0, y
00:0087A6 960018              +107 	dsa	24
00:0087A7 8D0002              +108 	ay	2,,xi			. arguments pointer + 2 + 1
00:0087A8 18F007              +109 	sy	argop
00:0087A9 FF0C8B              +110 	call	(iedit72a)
00:0087AA B60765              +111 	j	read_format	
  :                            112 
  :                            113 xinteger?
00:0087AB AF0C7B              +114 	mta	('x')
00:0087AC B607CA              +115 	j	string?
  :                            116 
00:0087AD 60F002              +117 	la	input_words
00:0087AE 400003              +118 	lr	y
00:0087AF C607BF              +119 	jza	xi24
  :                            120 
00:0087B0 AF0C72              +121 	mta	('l')
00:0087B1 B607B4              +122 	j	xi72?
00:0087B2 44B001              +123 	lr	2-1, y, i
00:0087B3 B607BF              +124 	j	xi24
  :                            125 
00:0087B4 AF0C79              +126 xi72?	mta	('j')
00:0087B5 B607B8              +127 	j	xi96?
00:0087B6 44B002              +128 	lr	3-1, y, i
00:0087B7 B607BF              +129 	j	xi24
  :                            130 
00:0087B8 AF0C6E              +131 xi96?	mta	('q')
00:0087B9 B607BC              +132 	j	xi192?
00:0087BA 44B003              +133 	lr	4-1, y, i
00:0087BB B607BF              +134 	j	xi24
  :                            135 
00:0087BC AF0C70              +136 xi192?	mta	('L')
00:0087BD B607CF              +137 	j	write_advance		. if length tags are ever > [ %l %j %q %L ]
  :                            138 
00:0087BE 44B007              +139 	lr	8-1, y, i
  :                            140 
00:0087BF 00F007              +141 xi24	sr	argop			. yemmira?
00:0087C0 60B000              +142 	la	0, y
00:0087C1 FF0C8C              +143 	call	(display_quartets)
  :                            144 
00:0087C2 1D0018              +145 	wsr	24
00:0087C3 600005              +146 	la	b
00:0087C4 1D0018              +147 	wsr	24
  :                            148 
00:0087C5 FD0006              +149 	push	6,,xi
00:0087C6 2F0010              +150 	popA	BYTES
  :                            151 
00:0087C7 FE0765              +152 	jyge	read_format
00:0087C8 8D0001              +153 	ay	1,,xi
00:0087C9 B607BF              +154 	j	xi24
  :                            155 	
00:0087CA AF0C85              +156 string?	mta	('s')
00:0087CB B607CF              +157 	j	write_advance		. just show if the request is outside repertoire
00:0087CC 58B000              +158 	ly	0, y
00:0087CD FF0C8D              +159 	call	(textoa)
00:0087CE B60765              +160 	j	read_format
  :                            161 
  :                            162 write_advance
00:0087CF 260010              +163 	sal	$word-$byte
00:0087D0 200006              +164 	sa	6
00:0087D1 1D0008              +165 	wsr	$byte
00:0087D2 700006              +166 	tz	6
00:0087D3 170010              +167 	inc	BYTES
00:0087D4 700006              +168 	tz	6
00:0087D5 B60767              +169 	j	read_format_byte
  :                            170 
00:0087D6 1D0010              +171 eoform	wsr	$word-$byte
  :                            172 
00:0087D7 380002              +173 	pop	x			. specificationp
00:0087D8 380002              +174 	pop	x			. column
00:0087D9 380002              +175 	pop	x			. input_words
  :                            176 .	qpop	x			. caller registers xyab
00:0087DA 600010              +177 	la	BYTES
00:0087DB 3D0000              +178 	fret	0
  :                            179 
00:0087DC AF0C72              +180 size?	mta	('l')
00:0087DD B607DF              +181 	j	triple?
00:0087DE 350001              +182 	lret	1
  :                            183 
00:0087DF AF0C79              +184 triple?	mta	('j')
00:0087E0 B607E2              +185 	j	quad?
00:0087E1 350001              +186 	lret	1
  :                            187 
00:0087E2 AF0C6E              +188 quad?	mta	('q')
00:0087E3 B607E5              +189 	j	octo?
00:0087E4 350001              +190 	lret	1
  :                            191 
00:0087E5 AF0C70              +192 octo?	mta	('L')
00:0087E6 350000              +193 	lret	0
  :                            194 
00:0087E7 350001              +195 	lret	1
  :                            196 
  :                            197 
  :                            198 	$root
  :                            12 	$path
  :                            13: 	$include	quartets
  :                            1 				. vector name display_quartets
  :                            2 				. must load higher than 256
  :                            3 				. change integer in a to 6 hex symbols in a:b
  :                            4 quartets*
00:0087E8 3E07F1              +5 	$do	3,	lcal	quartet
00:0087E9 3E07F1              +5 
00:0087EA 3E07F1              +5 
00:0087EB F80005              +6 	push	b
00:0087EC 3E07F1              +7 	$do	3,	lcal	quartet
00:0087ED 3E07F1              +7 
00:0087EE 3E07F1              +7 
00:0087EF 380004              +8 	pop	a
00:0087F0 3D0000              +9 	fret	0
  :                            10 
00:0087F1 660004              +11 quartet	ral	4
00:0087F2 F80004              +12 	push	a
00:0087F3 A5000F              +13 	and	15,,xi
00:0087F4 2E0008              +14 	sbl	8
00:0087F5 98C7F8              +15 	orB	quartet_symbol, a
00:0087F6 380004              +16 	pop	a
00:0087F7 350000              +17 	lret	0
  :                            18 
  :                            19 quartet_symbol
00:0087F8 000030              +20 ?	$do	10,	+	'0'+?-1
00:0087F9 000031              +20 
00:0087FA 000032              +20 
00:0087FB 000033              +20 
00:0087FC 000034              +20 
00:0087FD 000035              +20 
00:0087FE 000036              +20 
00:0087FF 000037              +20 
00:008800 000038              +20 
00:008801 000039              +20 
00:008802 000061              +21 ?	$do	6,	+	'a'+?-1
00:008803 000062              +21 
00:008804 000063              +21 
00:008805 000064              +21 
00:008806 000065              +21 
00:008807 000066              +21 
  :                            22 
  :                            14 
  :                            274 
  :                            275: 	$include		numeral	. edit constants for THIS data code / byte size
  :                            1 .
  :                            2 .    Copyright Tim Cox, 2012
  :                            3 .    TimMilesCox@gmx.ch
  :                            4 .
  :                            5 .    This file is instruction code for the freeware processor architecture
  :                            6 .
  :                            7 .                RTA1
  :                            8 .
  :                            9 .    RTA1 is a free processor architecture specification.
  :                            10 .
  :                            11 .    The executable emulation of RTA1 is free software.
  :                            12 .
  :                            13 .    This instruction code for the target RTA1 architecture is free software
  :                            14 .
  :                            15 .    Software programs delivered with this software to connect the
  :                            16 .    emulated RTA1 with real network interfaces in the emulator host
  :                            17 .    are free software
  :                            18 .
  :                            19 .    Scripts and programs delivered with this software for running
  :                            20 .    on other computers and interacting with the RTA1 are free software
  :                            21 .
  :                            22 .    Scripts and utility programs for constructing RTA1 target
  :                            23 .    executable software are free software
  :                            24 .
  :                            25 .    You can redistribute it and/or modify RTA1
  :                            26 .    under the terms of the GNU General Public License as published by
  :                            27 .    the Free Software Foundation, either version 3 of the License, or
  :                            28 .    (at your option) any later version.
  :                            29 .
  :                            30 .    RTA1 is distributed in the hope that it will be useful,
  :                            31 .    but WITHOUT ANY WARRANTY; without even the implied warranty of
  :                            32 .    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  :                            33 .    GNU General Public License for more details.
  :                            34 .
  :                            35 .    You should have received a copy of the GNU General Public License
  :                            36 .    along with RTA1.  If not, see <http://www.gnu.org/licenses/>.
  :                            37 .
  :                            38 .
  :                            39 
  :                            276: 	$include		table_a . execute / translate constants for number scan
  :                            277 	$do	$zenith(0)>4096,	$flag	libascii > 4k
*EOF*
00:008c35+020C00
00:008c36+000000
00:008c37+000202
00:008c38+00019A
00:008c39+00020D
00:008c3a+0F42400186A00027100003E800006400000A
00:008c40+0003E800006400000A
00:008c43+000180
00:008c44+000184
00:008c45+0F4240
00:008c46+00000119999A028F5D00418A00068E0000A8
00:008c4c+00018A
00:008c4d+000188
00:008c4e+000185
00:008c4f+000186
00:008c50+2D0000
00:008c51+2B0000
00:008c52+00018B
00:008c53+FF0000
00:008c54+300000
00:008c55+000000000000000000000000
00:008c59+000182
00:008c5a+000183
00:008c5b+000187
00:008c5c+000189
00:008c5d+000181
00:008c5e+000020
00:008c5f+00000D
00:008c60+00000A
00:008c61+000009
00:008c62+000196
00:008c63+000197
00:008c64+000002000007
00:008c66+000000000002000004
00:008c69+202030
00:008c6a+00FFFF
00:008c6b+00019D
00:008c6c+000025
00:008c6d+000066
00:008c6e+000071
00:008c6f+000206
00:008c70+00004C
00:008c71+000208
00:008c72+00006C
00:008c73+0001A6
00:008c74+000063
00:008c75+000207
00:008c76+000064
00:008c77+00020A
00:008c78+00020B
00:008c79+00006A
00:008c7a+00020C
00:008c7b+000078
00:008c7c+00021B
00:008c7d+00021C
00:008c7e+00021D
00:008c7f+000226
00:008c80+000227
00:008c81+000069
00:008c82+00021E
00:008c83+00021F
00:008c84+000220
00:008c85+000073
00:008c86+00003A
00:008c87+000210
00:008c88+00020E
00:008c89+000212
00:008c8a+000215
00:008c8b+000218
00:008c8c+000221
00:008c8d+00021A
LAST_BYTE_READ=000013
BYTES=000010
QUAD=000008
TRIPLE=000009
SIGNS=000011
SCALE_TRIPPED=000012
SCALE=000012
$FINESSE=000001
R10=19999A
R100=028F5D
R1000=00418A
R10000=00068E
R100000=0000A8
fpp=:N129:P:0:000000
fpx=:N129:P:0:000000
READ_STREAM_START=:P1:0:000022
WRITE_STREAM_START=:P1:0:000023
READ_START=:P1:0:000024
WRITE_START=:P1:0:000025
READ_BYTE=:P3:0:000026
WRITE_BYTE=:N129:P:0:000000
WRITE_UBYTE=:N129:P:0:000000
WRITE3_BYTES=:P1:0:000028
WRITE_BYTES=:P1:0:000029
HT=000009
CR=00000D
LF=00000A
SUB=00001A
ESC=00001B
HORIZONTAL_TAB=000009
floating_scan=$00:000206
floating_edit=$00:00020E
floating_iedit=$00:00020F
floating_edit192=$00:000210
symbol_scan=$00:000207
floating_scan192=$00:000208
integer_edit=$00:000211
edit=$00:000212
edits=$00:000213
edit48=$00:000215
edit48u=$00:000214
edit48s=$00:000216
edit72=$00:000218
edit72u=$00:000217
edit72s=$00:000219
iscan_skip=$00:000209
iscan=$00:00020A
iscan48=$00:00020B
iscan72=$00:00020C
otext=$00:00021A
rstream_scan_net=$00:000204
token_net=$00:00020D
R24=0AAAAB
R3=555556
LIBRARY=006000
u72tofloat+=$00:000180
fraction6_7+=$00:000181
madd144+=$00:000182
floating_scale192+=$00:000183
floating_scale+=$00:000184
fraction3+=$00:000185
fraction6+=$00:000186
scale_out192+=$00:000187
scale_out+=$00:000188
align192+=$00:000189
scale_integrate+=$00:00018A
n72comp2+=$00:00018B
fp192_load+=$00:00018C
fp192_load_negative+=$00:00018D
fp192_add+=$00:00018E
fp192_add_negative+=$00:00018F
reciprocal192+=$00:000190
fp192_mfa+=$00:000191
fp192_multiply+=$00:000192
fp192_divide+=$00:000193
i72_multiply+=$00:000194
i72_divide+=$00:000195
dayclock_ydsm_gmt+=$00:000196
dayclock_ydsm+=$00:000197
strlen+=$00:000199
strlenx+=$00:00019A
strcpy+=$00:00019B
strcat+=$00:00019C
read_octet_column+=$00:00019D
float2i72+=$00:00019E
i48_2float+=$00:00019F
m48_24+=$00:0001A0
m48_48+=$00:0001A1
d48_48+=$00:0001A2
tripl2float+=$00:0001A3
im72_72+=$00:0001A4
id72_72+=$00:0001A5
__fpp+=$00:0001A6
__fpx+=$00:0001A7
memcat+=$00:0001A8
xdr_inopaque24+=$00:0001BA
xdr_outopaque24+=$00:0001BB
ieee754_64_2float+=$00:0001BC
float2_ieee754_64+=$00:0001BD
xdr16_ieee754_64_2float+=$00:0001BE
xdr16_float2_ieee754_64+=$00:0001BF
ieee754_64_2f=$00:000040
f2_ieee754_64=$00:000041
xdr_ieee754_64:float=$00:000042
ieee754_midpoint=$00:00004A
xdr_float:ieee754_64=$00:00006B
xdr_float_upright=$00:000070
xdr_float_around=$00:00007B
rx16to24=$00:000095
rx16to24!=$00:00009F
rx16to24?=$00:0000A3
tx24to16=$00:0000A6
tx24to16!=$00:0000AE
tx24to16?=$00:0000B1
$normalised=:N65:F:0:000000
$i_f_part=:N65:F:0:000000
$integer=:N65:F:0:000001
$fraction=:N65:F:0:000002
e$E=:N65:F:0:000000
major_minor=:N129:P:0:000000
u72_float=$00:0000B3
unsigned72=$00:0000BE
around=$00:0000C0
exponent=$00:0000C4
signed=$00:0000CB
mfractions=$00:0000CC
$$zero_stack=000000
$$call_space=000003
$$params=000002
part(1)=000005
responseL=000006,00000F
fractionL=000000,00000F
$$frame=000003
$$xframe=$46:000000
$$list=000005
mrefract=$00:0000D1
fraction_6_7=$00:0000E2
significant?=$00:0000E5
significant!=$00:0000E9
madd_144+=$00:0000EC
multiplier=000004,00000F
first_word=000005,00000F
last_word=000006,00000F
part(2)=000000
caller_r=000000,00000F
madd=$00:0000F1
align_192=$00:0000FB
pushdown9_11=$00:000120
pushdown9_10=$00:00012B
pushdownx=$00:000130
apply_scale192=$00:000132
apply_scale=$00:00013B
apply96=$00:000143
apply=$00:000144
larger?=$00:000145
dont=$00:000148
scale192=$00:00014B
major=000003,00000F
minor=000007,00000F
flm=$00:000150
mul192=00000B,00000F
ux=000008,00000F
tempu=000004,00000F
templ=000000,00000F
fmajor=000000,000002
upward=$00:000178
pplus(1)=$00:000178
pplus(2)=$00:00017C
pplus(3)=$00:000180
pplus(4)=$00:000184
pplus(5)=$00:000188
pplus(6)=$00:00018C
pplus(7)=$00:000190
pplus(8)=$00:000194
pplus(9)=$00:000198
pplus(10)=$00:00019C
pplus(11)=$00:0001A0
pplus(12)=$00:0001A4
pplus(13)=$00:0001A8
pplus(14)=$00:0001AC
pplus(15)=$00:0001B0
pplus(16)=$00:0001B4
pplus(17)=$00:0001B8
pplus(18)=$00:0001BC
pplus(19)=$00:0001C0
pplus(20)=$00:0001C4
pplus(21)=$00:0001C8
downward=$00:0001CC
pminus(1)=$00:0001CC
pminus(2)=$00:0001D0
pminus(3)=$00:0001D4
pminus(4)=$00:0001D8
pminus(5)=$00:0001DC
pminus(6)=$00:0001E0
pminus(7)=$00:0001E4
pminus(8)=$00:0001E8
pminus(9)=$00:0001EC
pminus(10)=$00:0001F0
pminus(11)=$00:0001F4
pminus(12)=$00:0001F8
pminus(13)=$00:0001FC
pminus(14)=$00:000200
pminus(15)=$00:000204
pminus(16)=$00:000208
pminus(17)=$00:00020C
pminus(18)=$00:000210
pminus(19)=$00:000214
pminus(20)=$00:000218
pminus(21)=$00:00021C
upward192=$00:000220
pplu192(1)=$00:000220
pplu192(2)=$00:000228
pplu192(3)=$00:000230
pplu192(4)=$00:000238
pplu192(5)=$00:000240
pplu192(6)=$00:000248
pplu192(7)=$00:000250
pplu192(8)=$00:000258
pplu192(9)=$00:000260
pplu192(10)=$00:000268
pplu192(11)=$00:000270
pplu192(12)=$00:000278
pplu192(13)=$00:000280
pplu192(14)=$00:000288
pplu192(15)=$00:000290
pplu192(16)=$00:000298
pplu192(17)=$00:0002A0
pplu192(18)=$00:0002A8
pplu192(19)=$00:0002B0
pplu192(20)=$00:0002B8
pplu192(21)=$00:0002C0
downward192=$00:0002C8
pmin192(1)=$00:0002C8
pmin192(2)=$00:0002D0
pmin192(3)=$00:0002D8
pmin192(4)=$00:0002E0
pmin192(5)=$00:0002E8
pmin192(6)=$00:0002F0
pmin192(7)=$00:0002F8
pmin192(8)=$00:000300
pmin192(9)=$00:000308
pmin192(10)=$00:000310
pmin192(11)=$00:000318
pmin192(12)=$00:000320
pmin192(13)=$00:000328
pmin192(14)=$00:000330
pmin192(15)=$00:000338
pmin192(16)=$00:000340
pmin192(17)=$00:000348
pmin192(18)=$00:000350
pmin192(19)=$00:000358
pmin192(20)=$00:000360
pmin192(21)=$00:000368
fraction_3=$00:000370
fraction_6=$00:00037F
raise2w=$00:000387
raise3w=$00:000392
triple_mf=$00:00039C
double_mf=$00:0003A2
oscale192=$00:0003AD
scale192_out=$00:0003C6
not2high192=$00:0003C7
oscale=$00:0003D6
scale_up=$00:0003E0
rescale=$00:0003E5
midpoint=$00:0003EC
scale_down=$00:0003EF
scale_down?=$00:0003F2
scale_under=$00:0003F9
trialm192=$00:000400
trialx192=$00:00040C
uprate192=$00:000410
scale_integer_fraction=$00:000419
scale_outside_integer=$00:000422
scale24=$00:000423
scale48=$00:000434
scale72=$00:000446
scale_in_order=$00:000457
n72_comp2=$00:00045A
triverse=$00:00045C
float2i=$00:000465
float2i:all_fraction=$00:000471
float2i:too_astronomic=$00:000471
float2i:promote!=$00:000474
float2i:promote?=$00:000479
float2i:pushdown=$00:00047D
float2i:level=$00:000484
float2i:maximal=$00:000491
float2i:away=$00:00049B
fp192lib=$00:00049C
fp192lib:reciprocal_192=$00:00049C
fp192lib:dzor=000017,00000F
fp192lib:reciprocal=00000C,00000F
fp192lib:rzemainder=000004,00000F
fp192lib:us_rkxy=000000,00000F
fp192lib:turn_up=$00:0004AC
fp192lib:turn=$00:0004B0
fp192lib:s24plus=$00:0004C3
fp192lib:sok=$00:0004CC
fp192lib:trial_add=$00:0004D8
fp192lib:insert_reciprocal=$00:0004F9
fp192lib:load=$00:00052F
fp192lib:from1=000004,00000F
fp192lib:l_user_x=000000,00000F
fp192lib:load_negative=$00:000536
fp192lib:from2=000004,00000F
fp192lib:lnuser_x=000000,00000F
fp192lib:add=$00:000545
fp192lib:addend=00000C,00000F
fp192lib:target=000001,00000F
fp192lib:a_user_x=000000,00000F
fp192lib:add_exit=$00:000551
fp192lib:add_negative=$00:000556
fp192lib:subtrahend=00000C,00000F
fp192lib:minuend=000001,00000F
fp192lib:anuser_x=000000,00000F
fp192lib:add_negative_exit=$00:000562
fp192lib:multiply=$00:000567
fp192lib:m_plier=00000B,00000F
fp192lib:m_plicand=000000,00000F
fp192lib:heavy=$00:000572
fp192lib:heavy:mzand=000005,00000F
fp192lib:heavy:mzier=000006,00000F
fp192lib:heavy:caller_xy=000000,00000F
fp192lib:divide=$00:000594
fp192lib:divisor=000010,00000F
fp192lib:usave=000009,00000F
fp192lib:quotient=000001,00000F
fp192lib:duser_x=000000,00000F
fp192lib:quick_divide=$00:0005A1
fp192lib:divided=$00:0005AA
fp192lib:long_divide=$00:0005AF
fp192lib:dividend=00000C,00000F
fp192lib:reciprocated=000002,00000F
fp192lib:caller_xy=000000,00000F
fp192lib:supernormalise=$00:0005C4
_INTENSIFY=000000
i48=$00:0005C8
i48:m24=$00:0005C8
i48:multiplier_24=000006,00000F
i48:lookaside_a=000002,00000F
i48:lookaside_ab=000000,00000F
i48:m48=$00:0005D6
i48:multiplier_48=000008,00000F
i48:msave_multiplicand=000003,00000F
i48:quad_return_ab=000001,00000F
i48:msave_rounding=000000,00000F
i48:qm48_48=$00:0005E6
i48:qmultiplicand=000006,00000F
i48:qmultiplier=000008,00000F
i48:qmaside=000000,00000F
i48:d48=$00:0005F1
i48:divisor_48=000008,00000F
i48:dsave_dividend=000003,00000F
i48:quad_return_quo=000001,00000F
i48:dsave_rounding=000000,00000F
i48:qd48_48=$00:000601
i48:qdividend=000006,00000F
i48:qdivisor=000008,00000F
i48:qdaside=000000,00000F
i48:_2float=$00:00060C
i48:all_signs=$00:000617
i72=$00:00061B
i72:i_multiply=$00:00061B
i72:multiplicand=000005,00000F
i72:multiplier=000008,00000F
i72:temp=000000,00000F
i72:i_divide=$00:00062D
i72:dividend=000004,00000F
i72:divisor=000007,00000F
i72:quotient=000008,00000F
i72:remainder=000009,00000F
i72:caller_x=000000,00000F
i72:divisor_plus=$00:000637
i72:magnitude=$00:00064A
i72:magnitudex=$00:000657
i72:reverse=$00:000658
i72_72=$00:000666
i72_72:multiply=$00:000666
i72_72:multiplicandp=00000C,00000F
i72_72:multiplierp=00000D,00000F
i72_72:productp=00000E,00000F
i72_72:mguard=000008,00000F
i72_72:muser_rkxy=000004,00000F
i72_72:multiplier=000000,00000F
i72_72:integer96=000173
i72_72:divide=$00:00067B
i72_72:dividendp=000010,00000F
i72_72:divisorp=000011,00000F
i72_72:quotientp=000012,00000F
i72_72:remainderp=000013,00000F
i72_72:guard=00000C,00000F
i72_72:duser_rkxy=000008,00000F
i72_72:dividend=000004,00000F
i72_72:divisor=000000,00000F
i72_72:xdivide=$00:0006A0
i72_72:tripl2f=$00:0006A6
i72_72:magnitude=$00:0006B6
dayclock=$00:0006B9
dayclock:ydsm_gmt=$00:0006B9
dayclock:ydsm=$00:0006BF
dayclock:ydsm_second=$00:0006C6
dayclock:century?=$00:0006D6
dayclock:yearin4?=$00:0006EB
dayclock:msdy=$00:0006F0
string8=$00:0006F1
string8:strlena=$00:0006F1
string8:strlena:stringp=000007,00000F
string8:strlena:user_kxya=000000,00000F
string8:strlena:readout=$00:0006F5
string8:strlena:count=$00:0006F8
string8:strlena:maximum=$00:0006FC
string8:strlena:all=$00:000700
string8:contain=$00:000702
string8:contain:reado=$00:000707
string8:contain:countup=$00:00070A
string8:contain:allofit=$00:00070F
string8:contain:thatwas=$00:000713
string8:bias=$00:000716
string8:bias:string=000003,00000F
string8:bias:newstring=000004,00000F
string8:bias:caller_k=000000,00000F
string8:bias:readbias=$00:000718
string8:bias:last=$00:000724
string8:container=$00:00072A
string8:container:stringq=000005,00000F
string8:container:caller_xy=000000,00000F
string8:strcatena=$00:000734
string8:strcatena:string1=000007,00000F
string8:strcatena:string2=000008,00000F
string8:strcatena:caller_xyab=000000,00000F
string8:strcatena:biased=$00:00073F
string8:strcatena:strcatenz=$00:000744
string8:strcpya=$00:000746
string8:strcpya:to_p=000007,00000F
string8:strcpya:from_p=000008,00000F
string8:strcpya:u_kxya=000000,00000F
string8:strcpya:readin=$00:00074A
mstring8=$00:000752
mstring8:memcatena=$00:000752
mstring8:memcatena:string1=00000B,00000F
mstring8:memcatena:@column=00000C,00000F
mstring8:memcatena:string2=00000D,00000F
mstring8:memcatena:bytes=00000E,00000F
mstring8:memcatena:save_ab67=000004,00000F
mstring8:memcatena:save_rkxy=000000,00000F
mstring8:memcatena:roll=$00:000764
mstring8:memcatena:total=$00:00076C
oper8+=$00:000771
oper8:read_column=$00:000771
oper8:no_you_dont=$00:000775
oper8:read=$00:000777
compress=$00:000817
compress:fpcompress=$00:000817
compress:FP_QUAD=000004,00000F
compress:fpxpand=$00:000823
compress:BUFFER=000004,00000F
rstream_start_net+=$00:000200
wstream_start_net+=$00:000201
rstream_starta+=$00:000202
wstream_starta+=$00:000203
rstream_scana+=$00:000204
wstream_composea+=$00:000205
fscana+=$00:000206
fsymbola+=$00:000207
fscan192a+=$00:000208
iscan_skipa+=$00:000209
iscana+=$00:00020A
iscan48a+=$00:00020B
iscan72a+=$00:00020C
tokena+=$00:00020D
fedita+=$00:00020E
feditia+=$00:00020F
fedit192a+=$00:000210
ieditua+=$00:000211
iedita+=$00:000212
ieditas+=$00:000213
iedit48ua+=$00:000214
iedit48a+=$00:000215
iedit48as+=$00:000216
iedit72ua+=$00:000217
iedit72a+=$00:000218
iedit72as+=$00:000219
textoa+=$00:00021A
scanhex+=$00:00021B
scanhex48=$00:00021C
scanhex72=$00:00021D
ixscan+=$00:00021E
ixscan48+=$00:00021F
ixscan72+=$00:000220
display_quartets+=$00:000221
date_timef1+=$00:000222
date_timef2+=$00:000223
date_timef3+=$00:000224
string_scana_sentinel+=$00:000225
qscanquartets+=$00:000226
oscanquartets+=$00:000227
unget+=$00:000228
forward_callstring+=$00:000229
unpack_callstring+=$00:00022A
retrieve_callstring+=$00:00022B
argument=$00:000040
argument:forward=$00:000040
argument:update_string=$00:000042
argument:retrieve=$00:000049
argument:retrieve_string=$00:00004D
argument:retrieved=$00:000054
argument:unpack=$00:000056
argument:argue=$00:000068
argument:padded=$00:000073
argument:rebuild=$00:000077
argument:unpop=$00:00007B
fscan=$00:000085
fscans=$00:000085
plus?=$00:000091
read_number_string=$00:000094
first_digit=$00:00009A
adjust_scale=$00:0000E2
adjust_scale_no3=$00:0000E2
adjust_scale_no6=$00:0000E2
e_string_scan=$00:0000EC
e_string_noscan=$00:0000ED
noscale=$00:0000F3
read6=$00:0000F5
read3=$00:0000F6
read1=$00:0000F7
read5=$00:0000FD
under=$00:000108
over=$00:00010C
out=$00:00010C
skate=$00:00010D
skate_under=$00:00011D
skate_over=$00:000122
skate_away=$00:000122
e_string=$00:000123
free_in=$00:000130
free_ip=$00:000134
free_iq=$00:00013B
free_ia=$00:00013D
free_ix=$00:000143
symbol=$00:000144
next_symbol=$00:000146
blank_symbol?=$00:00014C
iscanf=$00:000159
iscanlsp=$00:000167
iscanlsm=$00:00016A
iscanx1=$00:00016D
quix=$00:00016E
quil=$00:000170
quiv=$00:000176
quit=$00:00017E
bi=$00:00017F
bi_sense=$00:000181
bi_plus=$00:000188
bi_minus=$00:00018A
bdi=$00:00018C
bdi_sense=$00:000190
bdi_rp=$00:00019A
bdi_rn=$00:00019C
bdi_rp0=$00:0001A1
bdi_rp1=$00:0001A7
bdi_r6=$00:0001AC
bdi_qx=$00:0001BC
bdi_x=$00:0001C0
bdi_z=$00:0001CC
bti=$00:0001CE
bti_sense=$00:0001D3
bti_rp=$00:0001DD
bti_rn=$00:0001DF
bti_rp0=$00:0001E7
bti_rp1=$00:0001ED
bti_r6=$00:0001F2
bti_qx=$00:000208
bti_x=$00:00020C
bti_z=$00:00021E
fedit_start=$00:000220
write_sign=$00:00022A
fedit_integral_digit=$00:00022E
fediti=$00:000243
fedit=$00:00024A
fedit1=$00:00024B
fedit_z1=$00:00024D
fedit_nonzero=$00:000253
fedit_zero=$00:000254
fedit_fraction=$00:000255
edit18=$00:000267
edit12=$00:00026E
edit6=$00:000273
edit_scale?=$00:000275
allsix=$00:000278
up2six=$00:000285
only3=$00:000292
iedit=$00:000293
ieditp=$00:000299
iedits=$00:00029B
ieditsp=$00:0002A1
ieditu=$00:0002A6
iedit48=$00:0002A8
iedit48p=$00:0002AF
iedit48s=$00:0002B1
iedit48sp=$00:0002B9
iedit48si=$00:0002BD
iedit48u=$00:0002BF
iedit72=$00:0002C1
iedit72p=$00:0002C6
iedit72s=$00:0002C8
iedit72sp=$00:0002CC
iedit72u=$00:0002D0
iedit_u=$00:0002D2
iedit48_u=$00:0002D7
iedit72_u=$00:0002E5
izeditugo=$00:0002FF
izeditugo_next=$00:000300
izeditudo=$00:000307
izeditudont=$00:000308
izeditudid=$00:000308
izexit=$00:00030F
izeditn=$00:000310
edit_scale=$00:000314
izedits=$00:000319
iedit7=$00:00031F
izedit6=$00:000326
izeditq=:P1:0:00002E
izeditp=:P1:0:00002F
izeditu=$00:000330
izedit3=$00:000331
iz3out(1)=$00:00033B
iz3out(2)=$00:00033F
iz3out(3)=$00:000343
iprint6=$00:000348
texto=$00:000355
nexto=$00:000356
trail=$00:000360
trail?=$00:000361
fp192=$00:000367
fp192:fscan=$00:000367
fp192:major=000000,00000F
fp192:mantissa=000002,00000F
fp192:minor=000004,00000F
fp192:fscans=$00:000369
fp192:plus?=$00:000372
fp192:read_number_string=$00:000375
fp192:first_digit=$00:00037B
fp192:scale_mantissa=$00:0003D5
fp192:e_string_scan=$00:0003F3
fp192:e_string_noscan=$00:0003F4
fp192:adjust_nothing=$00:0003F9
fp192:noscale=$00:0003F9
fp192:a72magnitude=$00:0003FC
fp192:a72negativemagnitude=$00:0003FF
fedit192=$00:000401
fedit192:fedit_start=$00:000401
fedit192:write_sign=$00:00040E
fedit192:fedit=$00:000412
fedit192:fedito=$00:000419
fedit192:display=$00:000426
fedit192:display_last=$00:00042D
token=$00:000431
token_search=$00:000438
token_read=$00:00043D
token_store=$00:000442
token_total=$00:000445
tokenz=$00:000448
tcolumn=$00:000449
hexa=$00:00045B
hexa:scan24=$00:00045B
hexa:new24=$00:00045D
hexa:next24=$00:000461
hexa:scan24z=$00:000468
hexa:scan48=$00:00046A
hexa:new48=$00:00046D
hexa:next48=$00:000474
hexa:scan48z=$00:00047B
hexa:scan72=$00:00047D
hexa:new72=$00:000481
hexa:next72=$00:00048C
hexa:scan72z=$00:000493
hexa:hex_symbol?=$00:000496
hexa:letter?=$00:00049B
hexa:deliver=$00:0004A2
hexa:report_end=$00:0004A3
dec_hex=$00:0004A4
dec_hex:scan24=$00:0004A4
dec_hex:scan48=$00:0004AA
dec_hex:scan72=$00:0004B2
hex2f=$00:0004BC
hex2f:x2f96=$00:0004BC
hex2f:caller96_x=000004,00000F
hex2f:train96=000000,00000F
hex2f:x2f96_new=$00:0004BF
hex2f:x2f96_next=$00:0004C9
hex2f:x2f96z=$00:0004D0
hex2f:x2f192=$00:0004D3
hex2f:caller192_x=000008,00000F
hex2f:train192=000000,00000F
hex2f:x2f192_new=$00:0004D7
hex2f:x2f192_next=$00:0004E5
hex2f:x2f192z=$00:0004EC
hex2f:shunt=$00:0004F0
advance=$00:0004F6
COUNTED_STREAM=000000
AQUIFORM_NET16=000000
read_stream_start16+=$00:000506
write_stream_start16+=$00:00050E
read_stream_start24+=$00:000514
write_stream_start24+=$00:00051C
counted_stream=$00:000521
repoussez=$00:000526
timetext=$00:00052C
timetext:ydsm=$00:00052C
timetext:ydsm_local=$00:00052F
timetext:mmdd=$00:000531
timetext:march_december=$00:00053C
timetext:mmddx=$00:000545
timetext:mmddy=$00:000546
timetext:format_time=$00:000547
timetext:timestring=000003,00000F
timetext:caller_x=000000,00000F
timetext:format__yyyy=$00:000558
timetext:format1_names=$00:00055E
timetext:format1_numerals=$00:00057D
timetext:format2_names_e=$00:0005B9
timetext:format3_names=$00:0005D8
timetext:format2_months_e=$00:0005F7
$bits=000120
timetext_f1+=$00:000603
timetext_f1:gmt=000007,00000F
timetext_f1:textp=000008,00000F
timetext_f1:caller_xyab=000000,00000F
timetext_f2+=$00:000619
timetext_f2:gmt=000007,00000F
timetext_f2:textp=000008,00000F
timetext_f2:caller_xyab=000000,00000F
timetext_f3+=$00:00062A
timetext_f3:gmt=000007,00000F
timetext_f3:textp=000008,00000F
timetext_f3:caller_xyab=000000,00000F
qstring_scana_sentinel+=$00:00063B
SENTINEL=000000
scan_fi=$00:00063D
scan_fi:limit=00000A,00000F
scan_fi:argop=00000B,00000F
scan_fi:caller_xyab=000003,00000F
scan_fi:delivery_words=000002,00000F
scan_fi:column=000001,00000F
scan_fi:specificationp=000000,00000F
scan_fi:read_format=$00:000647
scan_fi:read_format_byte=$00:000654
scan_fi:target?=$00:000666
scan_fi:fp96=$00:00066E
scan_fi:fp192?=$00:000673
scan_fi:fp_compress?=$00:00067C
scan_fi:symbol?=$00:000688
scan_fi:decimal?=$00:00068F
scan_fi:decimal_48?=$00:00069A
scan_fi:decimal_72?=$00:0006A1
scan_fi:hex?=$00:0006AA
scan_fi:hex_48?=$00:0006B5
scan_fi:hex_72?=$00:0006BC
scan_fi:hex_96?=$00:0006C5
scan_fi:hex_192?=$00:0006CC
scan_fi:integer?=$00:0006D5
scan_fi:i48?=$00:0006E0
scan_fi:i72?=$00:0006E7
scan_fi:string?=$00:0006F0
scan_fi:string_sentinel?=$00:0006F8
scan_fi:read_format_end_backstep=$00:000703
scan_fi:read_format_end=$00:000704
scan_fi:is_it_hex?=$00:00070C
scan_fi:it_is_not_lowercase_hex=$00:000711
scan_fi:it_is_not_uppercase_hex=$00:000716
scan_fi:is_it_a_number?=$00:000716
scan_fi:it_is_not_a_number=$00:000721
scan_fi:it_is_a_number=$00:000722
scan_istring=$00:000723
scan_istring:token=$00:000723
scan_istring:token_search=$00:000729
scan_istring:token_read=$00:00072D
scan_istring:token_store=$00:000730
scan_istring:token_total=$00:000733
scan_istring:tokenz=$00:00073A
scan_istring:until=$00:00073B
scan_istring:until_when=$00:000741
scan_istring:until_store=$00:000744
scan_istring:tcolumn=$00:000747
edit_fo+=$00:00075F
edit_fo:limit=000006,00000F
edit_fo:argop=000007,00000F
edit_fo:input_words=000002,00000F
edit_fo:column=000001,00000F
edit_fo:specificationp=000000,00000F
edit_fo:read_format=$00:000765
edit_fo:read_format_byte=$00:000767
edit_fo:arg?=$00:000779
edit_fo:float192?=$00:000781
edit_fo:float96?=$00:00078A
edit_fo:float96=$00:00078F
edit_fo:dinteger?=$00:000794
edit_fo:di48?=$00:00079B
edit_fo:di72?=$00:0007A1
edit_fo:xinteger?=$00:0007AB
edit_fo:xi72?=$00:0007B4
edit_fo:xi96?=$00:0007B8
edit_fo:xi192?=$00:0007BC
edit_fo:xi24=$00:0007BF
edit_fo:string?=$00:0007CA
edit_fo:write_advance=$00:0007CF
edit_fo:eoform=$00:0007D6
edit_fo:size?=$00:0007DC
edit_fo:triple?=$00:0007DF
edit_fo:quad?=$00:0007E2
edit_fo:octo?=$00:0007E5
quartets+=$00:0007E8
quartet=$00:0007F1
quartet_symbol=$00:0007F8
table+=$00:000808
hundred=00000A
ten=00000A
unit=00000A
diminish6=$00:000BF0
table_add=$00:000BF3
units=$00:000BF9
tens=$00:000C03
hundreds=$00:000C0D
thousands=$00:000C17
ten_thousands=$00:000C21
hundred_thousands=$00:000C2B
table_a.msm=1<000005
numeral.msm=1<000005
quartets.msm=2<000006
../stream/editfo.msm=2<000006
../stream/scanstri.msm=2<000006
../stream/scanfi.msm=2<000006
aquarel.msm=1<000005
timetext.msm=2<000006
advance.msm=2<000006
hex2f.msm=2<000006
hex.msm=2<000006
token.msm=2<000006
fedit192.msm=2<000006
lib192.msm=2<000006
aquiform.msm=2<000006
i_scan.msm=2<000006
fp_scan.msm=2<000006
aqunique.msm=1<000005
argument.msm=1<000005
compress.msm=1<000005
oper8.msm=2<000006
../string/memcat.msm=2<000006
../string/string.msm=2<000006
octetlib.msm=1<000005
../timer/dayclock.msm=1<000005
i72_72.msm=1<000005
i72.msm=1<000005
i48.msm=1<000005
recipro1.msm=2<000006
fp192lib.msm=1<000005
float2i.msm=1<000005
oscale.msm=2<000006
udo.msm=2<000006
align192.msm=2<000006
madd144.msm=2<000006
fraction.msm=2<000006
144.def=2<000006
binary.msm=1<000005
xdr_bina.msm=1<000005
qrecipro.def=1<000005
alib.def=1<000005
ascii.def=1<000005
aquiform.def=1<000005
compress.def=1<000005
binary.def=1<000005
register.def=1<000005
../timer/epoch.def=1<000005
../language/stack.def=1<000005
../def.sys/tcb.def=1<000005
../def.sys/banks.def=1<000005
../def.sys/io.def=1<000005
../def/ii.def=1<000005
../def/rta.def=1<000005
lib_utf8.msm=0<000003
:$(00):008000:008C8E 
lib_utf8.msm: object code 40634 bytes: 0 errors: 0 undefined labels

p	$proc
i72a*	$name
	dl	p(1)+1		. addend
	da	p(2)+1		. addend
	ds	p(3)+1		. target

	sc	b		. carry
	ab	p(1)		. addend high order word
	ab	p(2)		. addend high order word 
	sb	p(3)		. target
	$end

p	$proc
i72an*	$name

	dl	p(1)+1		. minuend
	dan	p(2)+1		. subtrahend
	ds	p(3)+1		. target

	sc	b		. carry
	ab	-1,,xi		. or borrow
	ab	p(1)		. minuend high order word
	anb	p(2)		. subtrahend high order word
	sb	p(3)		. target
	$end

p	$proc
i72compare* $name
	dl	p(1)+1		. test subtract two low order words
	dan	p(2)+1		. of each comparand
	sc	a
	aa	-1,,xi		. calculate borrow
	aa	p(1)		. test subtract high order word
	ana	p(2)		. of each comparand
	$end			. result < = > in a, unsigned result in carry

p	$proc
i72a48*	$name			. add 48 bits to 72 giving 72
	dl	p(1)+1
	da	p(2)
	ds	p(3)+1
	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
	saa	24
	sc	b		. carry
	ab	a
	ab	p(1)		. high order word longer field
	sb	p(3)
	$end

p	$proc
i72an48* $name			. take 48 bits fom 72 giving 72
	dl	p(1)+1
	dan	p(2)+1
	ds	p(3)+1
	sc	b
	ab	-1,,xi		. borrow
	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
	saa	24		. signs shorter field
	ab	a
	la	p(1)		. high order word longer field	
	ana	b
	sa	p(3)	
	$end

p	$proc
i72compare48* $name
	dl	p(1)+1		. test subtract two low-order words
	dan	p(2)
	sc	b
	ab	-1,,xi		. borrow
	la	p(2)		. if it wasn't in the internal stack you've read memory twice, too bad
	saa	24		. signs shorter field
	la	p(1)		. high order word longer field
	ana	b		. test subtract high order word. result < = > in a
	$end

p	$proc			. add 48 bits to 48 giving 72
i72a48_48* $name
	dl	p(1)
	da	p(2)
	ds	p(3)+1
	saa	24
	sa	p(3)
	$end

p	$proc
i72an48_48* $name		. subtract 48 bits from 48 giving 72
	dl	p(1)
	dan	p(2)
	ds	p(3)+1
	saa	24
	sa	p(3)
	$end

p	$proc
i48m*	$name
	dl	p(1)
	c	(m48_24)	p(2)
	$if	p()>2
	sa	p(3)
	dl	6
	ds	p(3)+1
	$endif
	$end

p	$proc
i48m48*	$name
	dl	p(1)
	c	(m48_48)	p(2),,long
	$do	p()>2,	qs	p(3)
	$end

p	$proc
i72m*	$name
	c	(i72_multiply)	p(1),,triple	;	. multiplicand 3 data words
				p(2)		;	. multiplier 1 data word
				p(3),,i			. product address pointer
	$end

p	$proc
i72m48*	$name
	la	p(1)
	dsa	24
	ds	6
	dl	p(1)+1
	c	(x72_m72_48)	p(2),,long
	$if	p()>2
	ds	p(3)+1
	la	7
	sa	p(3)
	$endif
	$end

p	$proc
i72m72*	$name
	c	(im72_72)	p(1),,i p(2),,i p(3),,i
	$end

p	$proc
i48d48*	$name
	dl	p(1)
	c	(d48_48)	p(2),,long
	$do	p()>2,	ds	p(3)
	$end

p	$proc
i72d*	$name
	c	(i72_divide)	p(1),,triple	;	. dividend 3 data words
				p(2)		;	. divisor 1 data word
				p(3),,i		;	. quotient address pointer
				p(4),,i			. remainder address pointer optional
	$end

p	$proc
i72d48*	$name
	la	p(1)
	dsa	24
	ds	6
	dl	p(1)+1
	c	(x72_d72_48)	p(2),,long
	$if	p()>2
	ds	p(1)+1
	la	7
	sa	p(1)
	$endif
	$end

p	$proc
i72d72*	$name
	c	(id72_72)	p(1),,i	p(2),,i	p(3),,i	p(4),,i
	$endif
	$end

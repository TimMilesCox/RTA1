	$list		0
	$path		../
	$include	def/rta.def
	$include	def/vector.def
	$include	def/ii.def
	$include	language/stack.def
	$include	stream/stream.def
	$include	lib/144.def
	$include	lib/ascii.def
	$include	lib/octopop.def
	$include	array.app/array.def
	$include	image.app/imports.def
	$path
	$list

TRACHWEIT	$equ	1

$(3:03000/$3)
input1	major_minor	+1.222222333333111111222222333333111111222222e+1100000
input2	major_minor	-1.222222333333111111222222333333111111222222e+1100000
input4	major_minor	+3.666666999999333333666666999999333333666666e+1100000
output1	$res		8
output2	$res		8
output3	$res		8
mlpier1	major_minor	3.0e+150000
dvisor1	major_minor	3.0e-150000
recipro	$res		8
compared $res		8
two	major_minor	2.0

GUID	$set		0479a22b58093bdf3bd90ba00
EVIDENT	$res		8

. SEED2	$equ		1*/71++0400000-72*/72
SEED2	$equ		0c000931222b1f8e7d65d1181	. 03fff68e237da7aebaf5c1098

$(4:*1/$4)
	$lit

$(0:*1)

	$base_d	$zenith(3)-03000	1024
	c	(seg$load)	0,,xi	(clacq_data:d),,long

accu	$equf	0, sp

	on	fp$r			. switches 192-bit SIMD float
	qpush	input1+4		. accumulator192 on stack top
	qpush	input1
	rex	(fa	input1)		. double input1
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	accu,,float192		accu,, float192

	on	fp$r
	rex	(fa	input1)		. triple input

	qpop	output1			. wanted later
	qpop	output1+4
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	output1,,float192	output1,,float192

	on	fp$r
	qpush	output1+4		. wanted now
	qpush	output1
	rex	(fa	input2)		. intput1 * 3 + input1
	printf  $3("%Lx":LF:"%Lf":LF:0),,xi     accu,,float192         accu,,float192

	on	fp$r
	rex	(fa	input2)		. input1 * 3 + input2 * 2 = input1
	qpop	a
	qpop	8
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	on	fp$r			. edit will have blootered fp$r
	qpush	output1+4
	qpush	output1

	rex	(fan	input1)		
	printf  $3("%Lx":LF:"%Lf":LF:0),,xi     accu,,float192         accu,,float192

	on	fp$r
	rex	(fan	input1)
	qpop	output2
	qpop	output2+4

	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	output2,,float192	output2,,float192

	ql	output1+4
	qs	$residue
	ql	output1
	c	(fp192_add_negative)	input1,,i
	c	(fp192_add_negative)	input1,,i
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	on	fp$r
	octopush	(major_minor	+1.222222111111222222111111222222111111222222e+1000000)
	rex	(fm	(major_minor	4.0e250000))
	octopop	a
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	on	fp$r
	octopush	(major_minor	+4.040404040404040404040404040404040404040409e-1250001)
	rex	(fm	(major_minor	21.0e625000))
	octopop	a
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	on	fp$r
	octopush	(major_minor	+4.040404040404040404040404040404040404040404e+1249999)
	rex	(fm	(major_minor	12.0e-1000000))
	octopop	a
	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	qpush	input1+4
	qpush	input1
	on	fp$r
	rex	(fm	(major_minor	3.0e+150000))
	qpop	a
	qpop	8

	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	ql	input1+4
	qs	$residue
	ql	input1
	c	(fp192_multiply)	$3(major_minor	3.0e+150000),,xi

	printf	$3("%Lx":LF:"%Lf":LF:0),,xi	a,,float192	a,,float192

	

	$if	1

	lc	fdll	(major_minor	20.0),,float192		(major_minor	0.6),,float192

	lc	fdsim	(major_minor	20.0),,xi	(major_minor	0.6),,xi

	lc	fdll	(major_minor	20.0),,float192		(major_minor	0.7),,float192

	lc	fdsim	(major_minor 20.0),,xi	(major_minor 0.7),,xi

	lc	fdll	(major_minor    9216.0*+630000-3),,float192	(major_minor 3.0e-630000),,float192

	lc	fdsim	(major_minor 9216.0*+630000-3),,xi	(major_minor 3.0e-630000),,xi

	lc	fdll	input4,,float192	(major_minor 3.0e-150000),,float192

	lc	fdsim	input4,,xi	(major_minor 3.0e-150000),,xi

	lc	fdll	(major_minor	9216.0),,float192	(major_minor 3.0e+1260000),,float192

	lc	fdsim	(major_minor    9216.0),,xi	(major_minor 3.0e+1260000),,xi

	lc	fdll	(major_minor 4.888888444444888888444444888888444444888888e1000000),,float192	;
			(major_minor 4.0e-250000),,float192

	lc	fdsim	(major_minor 4.888888444444888888444444888888444444888888e1000000),,xi	;
			(major_minor 4.0e-250000),,xi

	lc	fdll	(major_minor 4.848484848484848484848484848484848484848484e250000),,float192	;
			(major_minor 12.0e-1000000),,float192

	lc	fdsim	(major_minor 4.848484848484848484848484848484848484848484e250000),,xi	;
			(major_minor 12.0e-1000000),,xi

	lc	fdll	(major_minor 8.484848484848484848484848484848484848484848e-625000),,float192	;
			(major_minor 21.0e625000),,float192

	lc	fdsim	(major_minor 8.484848484848484848484848484848484848484848e-625000),,xi	;
			(major_minor 21.0e625000),,xi
	$endif

	$if	1
	octopush	(major_minor 8.484848484848484848484848484848484848484848e-625000)
	octopush	(major_minor 4.848484848484848484848484848484848484848484e250000)
	octopush	(major_minor 4.888888444444888888444444888888444444888888e1000000)
	octopush	(major_minor    9216.0)

$(4)
table2		major_minor	0.6
		major_minor	0.7
		major_minor	1.04
		major_minor	3.0e-630000
		major_minor	0.333333333333333333333333333333333333333333333333e-150000

table1		major_minor	3.0e-630000
		major_minor	4.0e-250000
		major_minor	12.0e-1000000
		major_minor	21.0e625000

$(0)
	lx	table1,,xi
	SIMD_CONTROL	(-1, 8, 4-1, 8q)	. accu + 8w, restart count 4, x += 8
	on		fp$r
	rex		(fd	0, x)		. postindex indirect

getacc	octopop	a
	printf	$3("%Lf":LF:0),,xi	a,,float192
	lx	sp
	lr	128,,xi
	jxl	getacc

	octopush	input4
	octopush	(major_minor 9216.0e629996)
	octopush	(1.0e1262611)
	octopush	(major_minor	20.0)
	octopush	(major_minor	20.0)

	lx	table2,,xi
	SIMD_CONTROL	(-1, 8, 5-1, 8q)
	on	fp$r
	rex	(fm	0, x)
	ii	FP_XPO$FLAG
	lcal	island_coda
	SIMD_CONTROL	(-1, 0, 0, 0q)		. reset SIMD defaults
	
getaccu	octopop	a
	printf	$3("%Lf":LF:0),,xi	a,,float192
	lx	sp
	lr	128,,xi
	jxl	getaccu	

	ii	EXIT$
	$endif

	fret	0

island_coda		. exponent outflow. ISR stopped SIMD repeats
			. without uppdating accmmulator cursor / operand index register
			. both were left pointing at operands of failed operation

			. if you want to do stuff like printf
			. save any index register used in the SIMD -> target instruction

	ax	WDATA	. increment you must know which index register
	push	RDATA	. advance accumulator cursor
	popA	q	. 

	dec	RDATAC	. outstanding count relative zero
	tp	RDATAC	. if this transitions RDATAC to -1
	lret	0	. it means fault was on last in list
	lret	-3	. otherwise restart SIMD operation


fdsim	$head_near	 params(dividendp,	int		;
				divisorp,	int	)	;
								;
			scalars(d_vidend,	float192,	*dividendp)

quotient_r	$equf	d_vidend

	on	fp$r
	lx	divisorp
	rex	(fd	0, x)

	printf	$3("  r:%Lx":LF:"  R:%Lf":LF:0),,xi	quotient_r,,float192	quotient_r,,float192

	qpop	a
	qpop	8
	lret	0

fdll	$head_near	 params(divisible,	float192	;
				divisory,	float192)	;
								;
			scalars(reciprocal,	float192,	(major_minor	1.0))

quotient_l	$equf	reciprocal

	on	fp$r
	rex	(fd	divisory)
	c 	(fp192_mfa)	reciprocal,,i	divisible,,i
	printf	$3("  l:%Lx":LF:"  L:%Lf":LF:0),,xi	quotient_l,,float192	quotient_l,,float192
	qpop	a
	qpop	8
	lret	0


	$list		0
	$path		../
	$include	def/rta.def
	$include	def/ii.def
	$include	def/vector.def
	$include	language/stack.def
	$include	stream/stream.def
	$include	lib/ascii.def
	$include	array.app/array.def
	$path
	$list

$(3:03000/$3)
alongside	3.666666999999333333666e+1200000

OUTPUT(2)	$equ	8
OUTPUT(3)	$equ	d$save

	$lit	4

$(4:*1/$4)
$(0:*1)

start	$base_d	$zenith(3)-03000 1024
	c	(seg$load)	0,,xi	(one_off_data:L),,long

	lc	summary	alongside,,float

	printf	$3("%f":LF:"%f":LF:"%f":LF:0),,xi	a,,float OUTPUT(2),,float OUTPUT(3),,float
	fret	0

summary	$head_near	 params(along,	float)					;
										;
			scalars(another1,	float,	(2.0),,float		;
				one_off,	float,	along			)

	SIMD_CONTROL	(-1, 0, 0, 0q)		. single operation at internal stack top
						. increment neither cursor

	rex	(fd	(3.0e-60000))		. divide on stack top [object called one_off]

	ql	(0.333333333333333333333e50000)
	fm	along				. multiply in regular accumulators [ 4..7 ]

	SIMD_TARGET	another1		. single operation inside the internal stack
	rex	(fm	a)			. multiply next object after stack top

						. return 3 results in available scalar registers
	qpop	OUTPUT(2)			. object one_off from internal stack top
	qpop	OUTPUT(3)			. object another1 next on internal stack
	lret	0				. regular accumulators [ 4..7 ] also contain a result


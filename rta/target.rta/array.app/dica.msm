	$list		0
	$path		../
	$include	def/rta.def
	$include	def/vector.def
	$include	language/stack.def
	$include	stream/stream.def
	$include	lib/144.def
	$include	lib/ascii.def
	$include	lib/octopop.def
	$include	image.app/imports.def
	$path
	$list

UNRESIST	$equ	1	. allow library to choose
				. economical instruction path

$(3:03000/$3)
down1	major_minor	-2000000000000000000000
up1	major_minor	2000000000000000000000
third	$res	8
counter1	14
counter2	14

$(4:*1/$4)
	$lit

$(0:*1)
	$base_d	$zenith(3)-03000	1024
	c	(seg$load)	0,,xi	(dica_data:L),,long

	c	(reciprocal192)	(major_minor 3.0),,float192
	qs	third
	ql	8
	qs	third+4

	$if	UNRESIST

	ql	down1+4
	qs	8
	ql	down1

loopy1	c	(fp192_divide)	$3(major_minor 3.0),,xi	. just the address please
	on	fp$r
	fa	$residue
	octopush	a
	printf	$3("%Lx %Lf":LF:0),,xi	a,,float192	a,,float192
	octopop		a

	$else	

loopy1	c	(fp192_mfa)	down1,,xi	third,,xi
	on	fp$r
	ql	down1
	fa	down1+4
	off	fp$r
	qs	down1
	ql	$residue
	qs	down1+4

	printf	$3("%Lx %Lf":LF:0),,xi	down1,,float192	down1,,float192

	$endif

	dec	counter1
	tz	counter1
	j	loopy1

	$if	UNRESIST

	ql	up1+4
	qs	8
	ql	up1

loopy2	c	(fp192_divide)	$3(major_minor 3.0),,xi	. just the address please
	on	fp$r
	fa	$residue

	octopush	a
	printf	$3("%Lx %Lf":LF:0),,xi	a,,float192	a,,float192
	octopop		a

	$else

loopy2	c	(fp192_mfa)	up1,,xi	third,,xi
	on	fp$r
	ql	up1
	fa	up1+4
	off	fp$r
	qs	up1
	ql	$residue
	qs	up1+4

	printf	$3("%Lx %Lf":LF:0),,xi	up1,,float192	up1,,float192

	$endif

	dec	counter2
	tz	counter2
	j	loopy2

	fret	0
